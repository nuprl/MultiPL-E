name: HumanEval_79_decimal_to_binary
language: php
results:
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary = \"db\";\n    while ($decimal >\
    \ 0) {\n        $binary .= $decimal % 2;\n        $decimal = intval($decimal /\
    \ 2);\n    }\n    return $binary . \"db\";\n}\n\necho decimal_to_binary(15);\n\
    echo decimal_to_binary(32);\n\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "db1111dbdb000001db\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphnwgy9e8.php:27\n\
    Stack trace:\n#0 /tmp/tmphnwgy9e8.php(33): test()\n#1 {main}\n  thrown in /tmp/tmphnwgy9e8.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $result = [];\n  $decimal = intval($decimal);\n\
    \  if ($decimal < 0) {\n    $decimal = 0;\n  } elseif ($decimal > 255) {\n   \
    \ $decimal = 255;\n  }\n  while ($decimal != 0) {\n    $result[] = $decimal %\
    \ 2;\n    $decimal = floor($decimal / 2);\n  }\n  $length = count($result);\n\
    \  if ($length < 8) {\n    $result = array_merge(array_fill(0, 8 - $length, 0),\
    \ $result);\n  }\n  return 'db' . implode($result) . 'db';\n}\n\nvar_dump(decimal_to_binary(0));\n\
    var_dump(decimal_to_binary(15));\nvar_dump(decimal_to_binary(32));\nvar_dump(decimal_to_binary(255));\n\
    var_dump(decimal_to_binary(256));\nfunction candidate(...$args) {\n    return\
    \ decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(32)\
    \ !== \"db100000db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(103)\
    \ !== \"db1100111db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(15)\
    \ !== \"db1111db\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string(12) \"db00000000db\"\nstring(12) \"db00001111db\"\nstring(12) \"\
    db00000001db\"\nstring(12) \"db11111111db\"\nstring(12) \"db11111111db\"\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp3pci66_x.php:39\nStack trace:\n\
    #0 /tmp/tmp3pci66_x.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp3pci66_x.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  //replace with your code\n}\necho \"the binary\
    \ number of 15 is: \" . decimal_to_binary(15) . \"<br>\";\necho \"the binary number\
    \ of 32 is: \" . decimal_to_binary(32) . \"<br>\";\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "the binary number of 15 is: <br>the binary number of 32 is: <br>\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmphryjnvhs.php:21\nStack trace:\n\
    #0 /tmp/tmphryjnvhs.php(27): test()\n#1 {main}\n  thrown in /tmp/tmphryjnvhs.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  return 'db' . decbin($decimal) . 'db';\n}\n\
    \nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = [];\n  $binary_string = '';\n  $count\
    \ = 0;\n  $total = 0;\n  while ($decimal > 0) {\n    $remainder = ($decimal %\
    \ 2);\n    $decimal = floor($decimal / 2);\n    $binary[$count] = $remainder;\n\
    \    $count++;\n  }\n  $binary = array_reverse($binary);\n  for ($i = 0; $i <\
    \ count($binary); $i++) {\n    $binary_string .= $binary[$i];\n  }\n  return 'db'\
    \ . $binary_string . 'db';\n}\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi05t50ao.php:32\n\
    Stack trace:\n#0 /tmp/tmpi05t50ao.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpi05t50ao.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = decbin($decimal);\n  $binary_array\
    \ = str_split($binary);\n  $front = array_fill(0, (8 - count($binary_array)),\
    \ 0);\n  $end = array_merge($front, $binary_array);\n  $final = implode($end);\n\
    \  return \"db$final\" . \"db\";\n}\n\nfunction candidate(...$args) {\n    return\
    \ decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(32)\
    \ !== \"db100000db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(103)\
    \ !== \"db1100111db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(15)\
    \ !== \"db1111db\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyr3nx2f.php:24\n\
    Stack trace:\n#0 /tmp/tmpkyr3nx2f.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpkyr3nx2f.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $decimal = (int)$decimal;\n    $binary =\
    \ '';\n    $binary = 'db';\n    while ($decimal != 0) {\n        $binary .= ($decimal\
    \ % 2 == 0) ? '0' : '1';\n        $decimal = (int)($decimal / 2);\n    }\n   \
    \ $binary .= 'db';\n    return strrev($binary);\n}\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8bc4n57e.php:27\n\
    Stack trace:\n#0 /tmp/tmp8bc4n57e.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp8bc4n57e.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $out = 'db';\n    while($decimal > 0) {\n\
    \        $out .= $decimal % 2;\n        $decimal = floor($decimal / 2);\n    }\n\
    \    return $out . 'db';\n}\n\necho decimal_to_binary(15) . '<br>';   // returns\
    \ \"db1111db\"\necho decimal_to_binary(32) . '<br>';   // returns \"db100000db\"\
    \necho decimal_to_binary(42) . '<br>';   // returns \"db101010db\"\necho decimal_to_binary(2)\
    \ . '<br>';    // returns \"db10db\"\necho decimal_to_binary(51) . '<br>';   //\
    \ returns \"db110011db\"\necho decimal_to_binary(86) . '<br>';   // returns \"\
    db1010110db\"\necho decimal_to_binary(100) . '<br>';  // returns \"db1100100db\"\
    \necho decimal_to_binary(42) . '<br>';   // returns \"db101010db\"\necho decimal_to_binary(123)\
    \ . '<br>';  // returns \"db1111011db\"\necho decimal_to_binary(235) . '<br>';\
    \  // returns \"db11101011db\"\necho decimal_to_binary(255) . '<br>';  // returns\
    \ \"db11111111db\"\necho decimal_to_binary(256) . '<br>';  // returns \"db100000000db\"\
    \necho decimal_to_binary(512) . '<br>';  // returns \"db1000000000db\"\necho decimal_to_binary(1024)\
    \ . '<br>'; // returns \"db10000000000db\"\necho decimal_to_binary(4096) . '<br>';\
    \ // returns \"db1000000000000db\"\necho decimal_to_binary(8192) . '<br>'; //\
    \ returns \"db10000000000000db\"\necho decimal_to_binary(16384) . '<br>';// returns\
    \ \"db100000000000000db\"\necho decimal_to_binary(32768) . '<br>';// returns \"\
    db10000000000000000db\"\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "db1111db<br>db000001db<br>db010101db<br>db01db<br>db110011db<br>db0110101db<br>db0010011db<br>db010101db<br>db1101111db<br>db11010111db<br>db11111111db<br>db000000001db<br>db0000000001db<br>db00000000001db<br>db0000000000001db<br>db00000000000001db<br>db000000000000001db<br>db0000000000000001db<br>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpica68wyf.php:42\nStack\
    \ trace:\n#0 /tmp/tmpica68wyf.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpica68wyf.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  // Enter code here\n}\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp16fuitvy.php:18\n\
    Stack trace:\n#0 /tmp/tmp16fuitvy.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp16fuitvy.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $arr = [];\n    for ($i = $decimal; $i !=\
    \ 0; $i = floor($i / 2)) {\n        $arr[] = $i % 2;\n    }\n    return 'db' .\
    \ implode('', array_reverse($arr)) . 'db';\n}\n\necho decimal_to_binary(125);\n\
    \nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "db1111101db\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm8mim6qq.php:25\n\
    Stack trace:\n#0 /tmp/tmpm8mim6qq.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpm8mim6qq.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $decimal = intval($decimal);\n    $binary\
    \ = decbin($decimal);\n    return \"db\" . $binary . \"db\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $decimal = decbin($decimal);\n  $numOfDigits\
    \ = strlen($decimal);\n  $diff = 8 - $numOfDigits;\n  $newDecimal = \"\";\n  for\
    \ ($i = 0; $i < $diff; $i++) {\n    $newDecimal .= \"0\";\n  }\n  $newDecimal\
    \ .= $decimal;\n  return \"db\".$newDecimal.\"db\";\n}\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_pifclq.php:26\n\
    Stack trace:\n#0 /tmp/tmp3_pifclq.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp3_pifclq.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $bin = base_convert($decimal, 10, 2);\n  return\
    \ 'db' . $bin . 'db';\n}\n\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  return str_pad(decbin($decimal), 8, '0', STR_PAD_LEFT);\n\
    }\n\necho decimal_to_binary(15);\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "00001111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0l0qu8dx.php:20\n\
    Stack trace:\n#0 /tmp/tmp0l0qu8dx.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp0l0qu8dx.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary_string = \"db\";\n  while ($decimal\
    \ > 0) {\n    $binary_string .= ($decimal % 2);\n    $decimal = floor($decimal\
    \ / 2);\n  }\n  return strrev($binary_string) . \"db\";\n}\necho decimal_to_binary(15);\n\
    echo \"<br>\";\necho decimal_to_binary(32);\necho \"<br>\";\necho decimal_to_binary(51);\n\
    echo \"<br>\";\necho decimal_to_binary(100);\n\nfunction candidate(...$args) {\n\
    \    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1111bddb<br>100000bddb<br>110011bddb<br>1100100bddb\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpltgl03yx.php:31\nStack trace:\n#0 /tmp/tmpltgl03yx.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpltgl03yx.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary_num = \n    return \"db$binary_num\"\
    ;\n}\n$answer = decimal_to_binary(15);\nvar_dump($answer);\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6m_sl1je.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = \"db\";\n  $i = 0;\n  while ($decimal\
    \ >= 1) {\n    $i++;\n    $remainder = $decimal % 2;\n    $decimal = $decimal\
    \ / 2;\n    $binary = $remainder . $binary;\n  }\n  $binary = str_pad($binary,\
    \ (strlen($binary) + ($i - 1)), \"0\", STR_PAD_LEFT);\n  $binary = $binary . \"\
    db\";\n  return $binary;\n}\necho decimal_to_binary(15) . \"<br>\";\necho decimal_to_binary(32)\
    \ . \"<br>\";\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0001111dbdb<br>00000100000dbdb<br>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpexdtp0my.php:30\nStack trace:\n#0 /tmp/tmpexdtp0my.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpexdtp0my.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    // Your code here.\n}\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb9epvjn1.php:19\n\
    Stack trace:\n#0 /tmp/tmpb9epvjn1.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpb9epvjn1.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  return 'db' . strrev(implode('', array_map(function($a)\
    \ {\n    return $a ? '1' : '0';\n  }, str_split(strrev(decbin($decimal)))))) .\
    \ 'db';\n}\n\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary = decbin($decimal);\n    $binary\
    \ = 'db' . $binary . 'db';\n    return $binary;\n}\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $digits = '';\n    while ($decimal > 0) {\n\
    \        $digits = $decimal % 2 . $digits;\n        $decimal = (int)($decimal\
    \ / 2);\n    }\n    if (strlen($digits) < 8) {\n        $digits = str_pad($digits,\
    \ 8, \"0\", STR_PAD_LEFT);\n    }\n    return \"db$digits\" . \"db\";\n}\n\necho\
    \ decimal_to_binary(15) . PHP_EOL;\necho decimal_to_binary(32) . PHP_EOL;\n\n\
    function candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "db00001111db\ndb00100000db\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp_ljiy3vj.php:30\nStack trace:\n#0 /tmp/tmp_ljiy3vj.php(36): test()\n\
    #1 {main}\n  thrown in /tmp/tmp_ljiy3vj.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary = decbin($decimal);\n    return \"\
    db\".$binary.\"db\";\n}\n\necho decimal_to_binary(15) . \"\\n\";\necho decimal_to_binary(32)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "db1111db\ndb100000db\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = decbin($decimal);\n  $binary = \"\
    db\" . $binary . \"db\";\n  return $binary;\n}\n\necho decimal_to_binary(15);\n\
    echo decimal_to_binary(32);\n\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: db1111dbdb100000db
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $str = '';\n  while ($decimal > 0) {\n    $str\
    \ = ($decimal % 2) . $str;\n    $decimal = (int)($decimal / 2);\n  }\n  if (strlen($str)\
    \ < 7) {\n    $str = str_pad($str, 7, '0', STR_PAD_LEFT);\n  }\n  return 'db'\
    \ . $str . 'db';\n}\n\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx3ibjfas.php:27\n\
    Stack trace:\n#0 /tmp/tmpx3ibjfas.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpx3ibjfas.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary = decbin($decimal);\n    return \"\
    db$binary\" . \"db\";\n}\necho decimal_to_binary(18);\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: db10010db
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $bin = (string)decbin($decimal);\n  return\
    \ \"db\" . $bin . \"db\";\n}\n\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  // Your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpudmbwm3z.php:19\n\
    Stack trace:\n#0 /tmp/tmpudmbwm3z.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpudmbwm3z.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n\t$result = \"db\";\n\twhile ($decimal > 0) {\n\
    \t\t$result .= $decimal % 2;\n\t\t$decimal = intval($decimal / 2);\n\t}\n\treturn\
    \ strrev($result) . \"db\";\n}\n\necho \"15 = \" . decimal_to_binary(15) . \"\\\
    n\";\necho \"32 = \" . decimal_to_binary(32) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "15 = 1111bddb\n32 = 100000bddb\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpvv451ap6.php:26\nStack trace:\n#0 /tmp/tmpvv451ap6.php(32):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvv451ap6.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = decbin($decimal);\n  $binary = \"\
    db\" . $binary . \"db\";\n  return $binary;\n}\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = decbin($decimal);\n  return 'db'\
    \ . $binary . 'db';\n}\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = '';\n  if ($decimal <= 1)\n  {\n\
    \    $binary = 'db' . $decimal . 'db';\n  }\n  else\n  {\n    while ($decimal\
    \ > 0)\n    {\n      $binary = $decimal % 2 . $binary;\n      $decimal = floor($decimal\
    \ / 2);\n    }\n    $binary = 'db' . $binary . 'db';\n  }\n  return $binary;\n\
    }\n\nvar_dump(decimal_to_binary(15));\nvar_dump(decimal_to_binary(32));\nvar_dump(decimal_to_binary(97));\n\
    var_dump(decimal_to_binary(88));\nvar_dump(decimal_to_binary(10));\n\nfunction\
    \ candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "string(8) \"db1111db\"\nstring(10) \"db100000db\"\nstring(11) \"db1100001db\"\
    \nstring(11) \"db1011000db\"\nstring(8) \"db1010db\"\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary = 'db';\n    $binary .= decbin($decimal);\n\
    \    $binary .= 'db';\n    return $binary;\n}\necho decimal_to_binary(15) . PHP_EOL;\
    \ // 'db1111db'\necho decimal_to_binary(32) . PHP_EOL; // 'db100000db'\necho PHP_EOL;\n\
    function candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "db1111db\ndb100000db\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  return \"db\" . decbin($decimal) . \"db\";\n\
    }\n\necho decimal_to_binary(15) . \"\\n\"; // \"db1111db\"\necho decimal_to_binary(32)\
    \ . \"\\n\"; // \"db100000db\"\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "db1111db\ndb100000db\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = strrev(decbin($decimal));\n  return\
    \ \"db\".str_pad($binary, 7, \"0\", STR_PAD_LEFT).\"db\";\n}\necho decimal_to_binary(15);\n\
    echo \"\\n\";\necho decimal_to_binary(32);\n\nfunction candidate(...$args) {\n\
    \    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "db0001111db\ndb0000001db\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpou6gu_uk.php:23\nStack trace:\n#0 /tmp/tmpou6gu_uk.php(29): test()\n\
    #1 {main}\n  thrown in /tmp/tmpou6gu_uk.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $db = 'db';\n  $binary = decbin($decimal);\n\
    \  return $db . $binary . $db;\n}\n\nfunction candidate(...$args) {\n    return\
    \ decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(32)\
    \ !== \"db100000db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(103)\
    \ !== \"db1100111db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(15)\
    \ !== \"db1111db\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $bin = \"\";\n    if ($decimal > 0) {\n \
    \       $bin = decbin($decimal);\n    } else {\n        $bin = \"0\";\n    }\n\
    \    while (strlen($bin) < 8) {\n        $bin = \"0\" . $bin;\n    }\n    return\
    \ \"db\" . $bin . \"db\";\n}\n\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpao5ibkoz.php:28\n\
    Stack trace:\n#0 /tmp/tmpao5ibkoz.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpao5ibkoz.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $bin = decbin($decimal);\n    $bin = \"db\"\
    .$bin.\"db\";\n    return $bin;\n}\n\nfunction candidate(...$args) {\n    return\
    \ decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(32)\
    \ !== \"db100000db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(103)\
    \ !== \"db1100111db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(15)\
    \ !== \"db1111db\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = \"db\";\n  while ($decimal > 0) {\n\
    \    $binary .= $decimal % 2;\n    $decimal = floor($decimal / 2);\n  }\n  return\
    \ strrev($binary) . \"db\";\n}\necho decimal_to_binary(123);\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1111011bddb\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5vk8gmnm.php:24\n\
    Stack trace:\n#0 /tmp/tmp5vk8gmnm.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp5vk8gmnm.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n\t// Implement your code here!\n}\n\nfunction\
    \ candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx835js2s.php:19\n\
    Stack trace:\n#0 /tmp/tmpx835js2s.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpx835js2s.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = decbin($decimal);\n  $binary = 'db'\
    \ . $binary . 'db';\n  return $binary;\n}\necho decimal_to_binary(15) . PHP_EOL;\n\
    echo decimal_to_binary(32) . PHP_EOL;\n\nfunction candidate(...$args) {\n    return\
    \ decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(32)\
    \ !== \"db100000db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(103)\
    \ !== \"db1100111db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(15)\
    \ !== \"db1111db\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "db1111db\ndb100000db\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary = decbin($decimal);\n    return \"\
    db\" . $binary . \"db\";\n}\n\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $tmp = decbin($decimal);\n    $len = strlen($tmp);\n\
    \    return \"db\" . $tmp . str_repeat(\"0\", 8 - $len) . \"db\";\n}\nfunction\
    \ candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_6gvdm5e.php:20\n\
    Stack trace:\n#0 /tmp/tmp_6gvdm5e.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp_6gvdm5e.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary_string = 'db';\n  for ($x = 1; $x <=\
    \ 8; $x++) {\n    $binary_string .= ($decimal & (1 << ($x - 1))) ? '1' : '0';\n\
    \  }\n  $binary_string .= 'db';\n  return $binary_string;\n}\n\necho decimal_to_binary(15)\
    \ . PHP_EOL;\necho decimal_to_binary(32) . PHP_EOL;\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "db11110000db\ndb00000100db\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmprf0wsm20.php:27\nStack trace:\n#0 /tmp/tmprf0wsm20.php(33): test()\n\
    #1 {main}\n  thrown in /tmp/tmprf0wsm20.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = '';\n  while($decimal > 0) {\n  \
    \  $binary = ($decimal % 2) . $binary;\n    $decimal = floor($decimal / 2);\n\
    \  }\n  return 'db' . $binary . 'db';\n}\n\n$decimal = 15;\n$binary = decimal_to_binary($decimal);\n\
    echo $binary;\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "db1111db\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp06b_l7bd.php:27\n\
    Stack trace:\n#0 /tmp/tmp06b_l7bd.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp06b_l7bd.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $str = \"db\";\n    while($decimal != 0)\
    \ {\n        $str .= $decimal % 2;\n        $decimal = (int)($decimal / 2);\n\
    \    }\n    return $str . \"db\";\n}\n\nfunction candidate(...$args) {\n    return\
    \ decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(32)\
    \ !== \"db100000db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(103)\
    \ !== \"db1100111db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(15)\
    \ !== \"db1111db\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoqh1cu0p.php:24\n\
    Stack trace:\n#0 /tmp/tmpoqh1cu0p.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpoqh1cu0p.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = decbin($decimal);\n  $binary = 'db'\
    \ . $binary . 'db';\n  return $binary;\n}\n\nfunction candidate(...$args) {\n\
    \    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $length = strlen($decimal);\n    $binary\
    \ = str_pad(decbin($decimal), $length + 2, 'db', STR_PAD_BOTH);\n    return $binary;\n\
    }\n\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyjqnd54h.php:21\n\
    Stack trace:\n#0 /tmp/tmpyjqnd54h.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpyjqnd54h.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = decbin($decimal);\n  $binary_string\
    \ = \"db\";\n  for ($i = 0; $i < strlen($binary); $i++) {\n    $binary_string\
    \ .= $binary[$i];\n  }\n  $binary_string .= \"db\";\n  return $binary_string;\n\
    }\n\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = decbin($decimal);\n  $binary = 'db'\
    \ . $binary . 'db';\n  return $binary;\n}\n\necho decimal_to_binary(15) . PHP_EOL;\n\
    echo decimal_to_binary(32) . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(32)\
    \ !== \"db100000db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(103)\
    \ !== \"db1100111db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(15)\
    \ !== \"db1111db\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "db1111db\ndb100000db\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = decbin($decimal);\n  return 'db'\
    \ . $binary . 'db';\n}\n\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = array();\n  $res = \"\";\n  $res2\
    \ = \"\";\n  for ($i = 1; $i <= $decimal; $i *= 2) {\n    $binary[] = $i;\n  }\n\
    \  $binary = array_reverse($binary);\n  for ($j = 0; $j < count($binary); $j++)\
    \ {\n    if ($decimal - $binary[$j] >= 0) {\n      $res .= \"1\";\n      $decimal\
    \ -= $binary[$j];\n    } else {\n      $res .= \"0\";\n    }\n  }\n  $res2 = str_pad($res,\
    \ 7, \"0\", STR_PAD_LEFT);\n  $res2 = \"db\" . $res2 . \"db\";\n  return $res2;\n\
    }\n\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnmcvh5p2.php:36\n\
    Stack trace:\n#0 /tmp/tmpnmcvh5p2.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpnmcvh5p2.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary = decbin($decimal);\n    return \"\
    db\" . $binary . \"db\";\n}\n\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  // your code here\n}\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptexv5q87.php:18\n\
    Stack trace:\n#0 /tmp/tmptexv5q87.php(24): test()\n#1 {main}\n  thrown in /tmp/tmptexv5q87.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary = decbin($decimal);\n    $binary\
    \ = \"db\" . $binary . \"db\";\n    return $binary;\n}\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = decbin($decimal);\n  return 'db'\
    \ . $binary . 'db';\n}\n\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $result = \"db\";\n    while($decimal !=\
    \ 0) {\n        $result .= $decimal % 2;\n        $decimal = floor($decimal /\
    \ 2);\n    }\n    return $result . \"db\";\n}\necho decimal_to_binary(15);\nfunction\
    \ candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "db1111db\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj5bm4tym.php:24\n\
    Stack trace:\n#0 /tmp/tmpj5bm4tym.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpj5bm4tym.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = decbin($decimal);\n  $binary = 'db'\
    \ . $binary . 'db';\n  return $binary;\n}\n\necho decimal_to_binary(15) . PHP_EOL;\n\
    echo decimal_to_binary(32) . PHP_EOL;\n\nfunction candidate(...$args) {\n    return\
    \ decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(32)\
    \ !== \"db100000db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(103)\
    \ !== \"db1100111db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(15)\
    \ !== \"db1111db\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "db1111db\ndb100000db\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $output = \"db\";\n  $decimal = decbin($decimal);\n\
    \  for ($i = 0; $i < strlen($decimal); $i++) {\n    $output .= $decimal[$i];\n\
    \  }\n  $output .= \"db\";\n  return $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = \"db\";\n  for ($i = 0; $i < 8; $i++)\
    \ {\n    $binary .= ($decimal >> $i) & 1;\n  }\n  return $binary . \"db\";\n}\n\
    \nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphggezxuv.php:23\n\
    Stack trace:\n#0 /tmp/tmphggezxuv.php(29): test()\n#1 {main}\n  thrown in /tmp/tmphggezxuv.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary = decbin($decimal);\n    return \"\
    db\" . $binary . \"db\";\n}\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $b = 'db';\n    while ($decimal > 0) {\n\
    \        $b .= $decimal % 2;\n        $decimal /= 2;\n    }\n    return $b . 'db';\n\
    }\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_iyh2_p3.php:23\n\
    Stack trace:\n#0 /tmp/tmp_iyh2_p3.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp_iyh2_p3.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary = decbin($decimal);\n    return \"\
    db$binary\" . \"db\";\n}\n\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = '';\n  while($decimal != 0) {\n \
    \   $binary = ($decimal % 2).$binary;\n    $decimal = intval($decimal / 2);\n\
    \  }\n  return \"db\".str_pad($binary, 8, '0', STR_PAD_LEFT).\"db\";\n}\n\necho\
    \ decimal_to_binary(15) . \"\\n\";\necho decimal_to_binary(32) . \"\\n\";\necho\
    \ decimal_to_binary(4) . \"\\n\";\necho decimal_to_binary(7) . \"\\n\";\necho\
    \ decimal_to_binary(9) . \"\\n\";\necho decimal_to_binary(32) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "db00001111db\ndb00100000db\ndb00000100db\ndb00000111db\ndb00001001db\n\
    db00100000db\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo4b1n2fw.php:30\n\
    Stack trace:\n#0 /tmp/tmpo4b1n2fw.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpo4b1n2fw.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = (decbin($decimal));\n  return 'db'\
    \ . $binary . 'db';\n}\n\necho decimal_to_binary(15);\necho \"<br>\";\necho decimal_to_binary(32);\n\
    echo \"<br>\";\necho decimal_to_binary(45);\necho \"<br>\";\necho decimal_to_binary(93);\n\
    function candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: db1111db<br>db100000db<br>db101101db<br>db1011101db
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $bin = decbin($decimal);\n  return 'db' . $bin\
    \ . 'db';\n}\n\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  return \"db\".decbin($decimal).\"db\";\n}\n\
    \necho decimal_to_binary(32);\n ?>\nfunction candidate(...$args) {\n    return\
    \ decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(32)\
    \ !== \"db100000db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(103)\
    \ !== \"db1100111db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(15)\
    \ !== \"db1111db\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "db100000dbfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $bin = decbin($decimal);\n    return \"db\"\
    .$bin.\"db\";\n}\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binaryString = \"db\";\n  while ($decimal\
    \ > 0) {\n    $binaryString .= $decimal % 2;\n    $decimal = floor($decimal /\
    \ 2);\n  }\n  return $binaryString .= \"db\";\n}\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdkiqt7c_.php:23\n\
    Stack trace:\n#0 /tmp/tmpdkiqt7c_.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpdkiqt7c_.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n\n}\n\nfunction candidate(...$args) {\n    return\
    \ decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(32)\
    \ !== \"db100000db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(103)\
    \ !== \"db1100111db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(15)\
    \ !== \"db1111db\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxbphp5_m.php:19\n\
    Stack trace:\n#0 /tmp/tmpxbphp5_m.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpxbphp5_m.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary =  str_pad(decbin($decimal), 8, '0',\
    \ STR_PAD_LEFT);\n  return \"db\" . $binary . \"db\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjjm2eyvv.php:20\n\
    Stack trace:\n#0 /tmp/tmpjjm2eyvv.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpjjm2eyvv.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n// $decimal\u306E2\u9032\u6570\u306E\u6587\u5B57\
    \u5217\u3092\u4F5C\u308B\n  $ans = \"\";\n  while($decimal > 0){\n    $ans = ($decimal\
    \ % 2).$ans;\n    $decimal = floor($decimal / 2);\n  }\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpanzxtn6u.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = decbin($decimal);\n  $binary = \"\
    db\".$binary.\"db\";\n  return $binary;\n}\nfunction candidate(...$args) {\n \
    \   return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $bits = array();\n  while ($decimal > 0) {\n\
    \    $bits[] = $decimal % 2;\n    $decimal = floor($decimal / 2);\n  }\n  return\
    \ 'db' . implode(array_reverse($bits)) . 'db';\n}\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyjan19v4.php:24\n\
    Stack trace:\n#0 /tmp/tmpyjan19v4.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpyjan19v4.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = \"db\";\n  while($decimal > 0) {\n\
    \    $binary .= $decimal % 2;\n    $decimal = floor($decimal / 2);\n  }\n  return\
    \ $binary . \"db\";\n}\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbpg5fgyx.php:23\n\
    Stack trace:\n#0 /tmp/tmpbpg5fgyx.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbpg5fgyx.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $result = 'db';\n    while($decimal >= 1)\
    \ {\n        $result .= $decimal % 2;\n        $decimal = floor($decimal / 2);\n\
    \    }\n    return strrev($result).'db';\n}\n\necho decimal_to_binary(15);\nfunction\
    \ candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1111bddb\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl_8uts5g.php:25\n\
    Stack trace:\n#0 /tmp/tmpl_8uts5g.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpl_8uts5g.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  // Your code here\n}\n\n$tests = [\n  0 =>\
    \ \"db0db\",\n  1 => \"db1db\",\n  8 => \"db1000db\",\n  15 => \"db1111db\",\n\
    \  16 => \"db10000db\",\n  32 => \"db100000db\",\n  64 => \"db1000000db\",\n \
    \ 100 => \"db1100100db\",\n  257 => \"db100000001db\",\n  1024 => \"db10000000000db\"\
    ,\n  10000 => \"db10011100010000db\",\n  5000000 => \"db10011010101101000000db\"\
    ,\n  10000000 => \"db101000010101011000000db\",\n  100000000 => \"db101111110101100000000db\"\
    ,\n  1000000000 => \"dbn\
    function candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpiqd1nyv3.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  // Your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpefgccvsq.php:19\n\
    Stack trace:\n#0 /tmp/tmpefgccvsq.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpefgccvsq.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = decbin($decimal);\n  $binary = 'db'\
    \ . $binary . 'db';\n  return $binary;\n}\n\nfunction candidate(...$args) {\n\
    \    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary = '';\n    for ($i = $decimal; $i\
    \ >= 1; $i = floor($i / 2)) {\n        $binary = ($i % 2) . $binary;\n    }\n\
    \    return \"db{$binary}db\";\n}\n\nfunction candidate(...$args) {\n    return\
    \ decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(32)\
    \ !== \"db100000db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(103)\
    \ !== \"db1100111db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(15)\
    \ !== \"db1111db\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsb060gic.php:23\n\
    Stack trace:\n#0 /tmp/tmpsb060gic.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpsb060gic.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binaryArray = [];\n  if ($decimal < 0) {\n\
    \    return \"db-\" . decimal_to_binary(-$decimal);\n  }\n  else if ($decimal\
    \ == 0) {\n    return \"db0db\";\n  }\n  else {\n    while ($decimal > 0) {\n\
    \      array_push($binaryArray, $decimal % 2);\n      $decimal = floor($decimal\
    \ / 2);\n    }\n    $binaryArray = array_reverse($binaryArray);\n    $binaryString\
    \ = \"db\";\n    foreach ($binaryArray as $value) {\n      $binaryString .= $value;\n\
    \    }\n    $binaryString .= \"db\";\n    return $binaryString;\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  // Your code here\n}\necho(decimal_to_binary(64));\n\
    function candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqgkqbh1f.php:19\n\
    Stack trace:\n#0 /tmp/tmpqgkqbh1f.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpqgkqbh1f.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  // Your code here\n}\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0wod7frx.php:18\n\
    Stack trace:\n#0 /tmp/tmp0wod7frx.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp0wod7frx.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary = decbin($decimal);\n    return \"\
    db\" . $binary . \"db\";\n}\necho \"decimal_to_binary(15): \", decimal_to_binary(15),\
    \ \"\\n\";\necho \"decimal_to_binary(32): \", decimal_to_binary(32), \"\\n\";\n\
    \nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "decimal_to_binary(15): db1111db\ndecimal_to_binary(32): db100000db\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = decbin($decimal);\n  $binary = \"\
    db\".$binary.\"db\";\n  return $binary;\n}\nfunction candidate(...$args) {\n \
    \   return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $number = $decimal;\n  $bin = [];\n  while($number\
    \ !== 0) {\n    $temp = $number % 2;\n    $bin[] = $temp;\n    $number = (int)($number\
    \ / 2);\n  }\n  $bin = array_reverse($bin);\n  $bin = array_merge(['db'], $bin,\
    \ ['db']);\n  $bin = implode('', $bin);\n  return $bin;\n}\necho decimal_to_binary(15)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "db1111db\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6n_dhaz_.php:29\n\
    Stack trace:\n#0 /tmp/tmp6n_dhaz_.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp6n_dhaz_.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $arr = str_split($decimal);\n  $counter = 0;\n\
    \  $bin = '';\n  for ($i = count($arr) - 1; $i >= 0; $i--) {\n    $counter +=\
    \ pow(10, $i) * $arr[$i];\n  }\n  while ($counter) {\n    $bin .= $counter % 2;\n\
    \    $counter = (int)($counter / 2);\n  }\n  return \"db\" . strrev($bin) . \"\
    db\";\n}\n\necho(decimal_to_binary(11) . \"\\n\");\necho(decimal_to_binary(32)\
    \ . \"\\n\");\necho(decimal_to_binary(56) . \"\\n\");\necho(decimal_to_binary(77)\
    \ . \"\\n\");\necho(decimal_to_binary(89) . \"\\n\");\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "db1011db\ndb10111db\ndb1000001db\ndb1001101db\ndb1100010db\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpb8oo3t4i.php:35\nStack trace:\n\
    #0 /tmp/tmpb8oo3t4i.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpb8oo3t4i.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    // return \"db\".decbin($decimal).\"db\"\
    ;\n    return \"db\".base_convert($decimal, 10, 2).\"db\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = array();\n  $string = 'db';\n  for\
    \ ($i = 0; $i < $decimal; $i++) {\n    $binary[] = $i;\n  }\n  foreach ($binary\
    \ as $value) {\n    $string .= str_pad(decbin($value), 7, '0', STR_PAD_LEFT);\n\
    \  }\n  return $string . 'db';\n}\n\nfunction candidate(...$args) {\n    return\
    \ decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(32)\
    \ !== \"db100000db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(103)\
    \ !== \"db1100111db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(15)\
    \ !== \"db1111db\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_yp1p7g0.php:27\n\
    Stack trace:\n#0 /tmp/tmp_yp1p7g0.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp_yp1p7g0.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n\t$decimal = decbin($decimal);\n\t$decimal =\
    \ \"db\" . $decimal . \"db\";\n\treturn $decimal;\n}\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = decbin($decimal);\n  $binary = \"\
    db$binary\" . \"db\";\n  return $binary;\n}\n\nfunction candidate(...$args) {\n\
    \    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary =  str_split(\"db\".base_convert($decimal,\
    \ 10, 2).\"db\");\n  return $binary;\n}\nfunction candidate(...$args) {\n    return\
    \ decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(32)\
    \ !== \"db100000db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(103)\
    \ !== \"db1100111db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(15)\
    \ !== \"db1111db\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpivkgfz4d.php:19\n\
    Stack trace:\n#0 /tmp/tmpivkgfz4d.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpivkgfz4d.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary = decbin($decimal);\n    return 'db'\
    \ . $binary . 'db';\n}\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $bin = decbin($decimal);\n    if (strlen($bin)\
    \ < 8) {\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n    }\n    return\
    \ 'db' . $bin . 'db';\n}\necho decimal_to_binary(10) . \"\\n\";\necho decimal_to_binary(32)\
    \ . \"\\n\";\necho decimal_to_binary(99) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "db00001010db\ndb00100000db\ndb01100011db\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpa_cm1vk5.php:25\nStack trace:\n#0 /tmp/tmpa_cm1vk5.php(31):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpa_cm1vk5.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = decbin($decimal);\n  $binary = \"\
    db\" . $binary . \"db\";\n  return $binary;\n}\nfunction candidate(...$args) {\n\
    \    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  return \"db\" . decbin($decimal) . \"db\";\n\
    }\n\necho decimal_to_binary(15) . \"\\n\";\necho decimal_to_binary(32) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "db1111db\ndb100000db\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = '';\n  while($decimal > 0) {\n  \
    \  $binary = $decimal % 2 . $binary;\n    $decimal = floor($decimal / 2);\n  }\n\
    \  $binary = 'db' . $binary . 'db';\n  return $binary;\n}\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn4vndd0w.php:25\n\
    Stack trace:\n#0 /tmp/tmpn4vndd0w.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpn4vndd0w.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  // YOUR CODE HERE\n}\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmput64pkmh.php:19\n\
    Stack trace:\n#0 /tmp/tmput64pkmh.php(25): test()\n#1 {main}\n  thrown in /tmp/tmput64pkmh.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n// $decimal = 15;\n  // $decimal % 2;\n  $binary\
    \ = \"\";\n  while ($decimal > 0) {\n    if ($decimal % 2 == 0) {\n      $binary\
    \ = \"0\" . $binary;\n    } else {\n      $binary = \"1\" . $binary;\n    }\n\
    \    $decimal = floor($decimal / 2);\n  }\n  $binary = \"db\" . $binary . \"db\"\
    ;\n  return $binary;\n}\necho \"check correct number: db1111db = \" . decimal_to_binary(15)\
    \ . \"<br>\";\necho \"check correct number: db100000db = \" . decimal_to_binary(32)\
    \ . \"<br>\";\necho \"check correct number: db101101db = \" . decimal_to_binary(45)\
    \ . \"<br>\";\necho \"check correct number: db101101db = \" . decimal_to_binary(16)\
    \ . \"<br>\";\necho \"check correct number: db1001001db = \" . decimal_to_binary(73)\
    \ . \"<br>\";\necho \"check correct number: db1001001db = \" . decimal_to_binary(100)\
    \ . \"<br>\";\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "check correct number: db1111db = db1111db<br>check correct number: db100000db\
    \ = db100000db<br>check correct number: db101101db = db101101db<br>check correct\
    \ number: db101101db = db10000db<br>check correct number: db1001001db = db1001001db<br>check\
    \ correct number: db1001001db = db1100100db<br>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmplnefffqq.php:36\nStack trace:\n#0 /tmp/tmplnefffqq.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmplnefffqq.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n\n}\n\n\nfunction candidate(...$args) {\n   \
    \ return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(32)\
    \ !== \"db100000db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(103)\
    \ !== \"db1100111db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(15)\
    \ !== \"db1111db\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpps777eko.php:20\n\
    Stack trace:\n#0 /tmp/tmpps777eko.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpps777eko.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = \"db\";\n  while ($decimal > 0) {\n\
    \    $mod = $decimal % 2;\n    $decimal = floor($decimal / 2);\n    $binary =\
    \ $mod . $binary;\n  }\n  return $binary . \"db\";\n}\necho decimal_to_binary(15)\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1111dbdb\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv3qrnaal.php:25\n\
    Stack trace:\n#0 /tmp/tmpv3qrnaal.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpv3qrnaal.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary = base_convert($decimal, 10, 2);\n\
    \    return \"db\" . $binary . \"db\";\n}\nfunction candidate(...$args) {\n  \
    \  return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(32)\
    \ !== \"db100000db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(103)\
    \ !== \"db1100111db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(15)\
    \ !== \"db1111db\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n\t$binary = '';\n\twhile ($decimal > 0) {\n\t\
    \t$binary = ($decimal % 2) . $binary;\n\t\t$decimal = floor($decimal / 2);\n\t\
    }\n\treturn 'db' . $binary . 'db';\n}\nfunction candidate(...$args) {\n    return\
    \ decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(32)\
    \ !== \"db100000db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(103)\
    \ !== \"db1100111db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(15)\
    \ !== \"db1111db\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps0obth5q.php:23\n\
    Stack trace:\n#0 /tmp/tmps0obth5q.php(29): test()\n#1 {main}\n  thrown in /tmp/tmps0obth5q.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n\t$tmp = $decimal;\n\t$res = '';\n\twhile ($tmp\
    \ > 0) {\n\t\t$res = $tmp % 2 . $res;\n\t\t$tmp = intval($tmp / 2);\n\t}\n\treturn\
    \ 'db' . $res . 'db';\n}\n\nprint_r(decimal_to_binary(15));\nprint_r(decimal_to_binary(32));\n\
    function candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "db1111dbdb100000db\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_nd5z7e3.php:27\n\
    Stack trace:\n#0 /tmp/tmp_nd5z7e3.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp_nd5z7e3.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    return \"db\". decbin($decimal) . \"db\"\
    ;\n}\n\nprint_r(decimal_to_binary(15));\nfunction candidate(...$args) {\n    return\
    \ decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(32)\
    \ !== \"db100000db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(103)\
    \ !== \"db1100111db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(15)\
    \ !== \"db1111db\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: db1111db
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = \"db\";\n  for ($i = 0; $i < 8; $i++)\
    \ {\n    $temp = $decimal % 2;\n    $binary .= (string)$temp;\n    $decimal =\
    \ floor($decimal / 2);\n  }\n  $binary .= \"db\";\n  return strrev($binary);\n\
    }\necho decimal_to_binary(15) . \"\\n\";\necho decimal_to_binary(32) . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "bd00001111bd\nbd00100000bd\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpghtp7fts.php:27\nStack trace:\n#0 /tmp/tmpghtp7fts.php(33): test()\n\
    #1 {main}\n  thrown in /tmp/tmpghtp7fts.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    return 'db' . decbin($decimal) . 'db';\n\
    }\n\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    // your code here\n}\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9b7_fftj.php:18\n\
    Stack trace:\n#0 /tmp/tmp9b7_fftj.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp9b7_fftj.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $result = 'db';\n    while($decimal > 0)\
    \ {\n        $result .= $decimal % 2;\n        $decimal = floor($decimal / 2);\n\
    \    }\n    return strrev($result) . 'db';\n}\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7edgas4_.php:24\n\
    Stack trace:\n#0 /tmp/tmp7edgas4_.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp7edgas4_.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary = decbin($decimal);\n    return \"\
    db\" . $binary . \"db\";\n}\n\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  // Your code here\n  $binary = \"db\";\n  if($decimal\
    \ == 0)\n    $binary .= \"0\";\n  while($decimal > 0) {\n    $binary .= $decimal\
    \ % 2;\n    $decimal = floor($decimal / 2);\n  }\n  $binary .= \"db\";\n  return\
    \ strrev($binary);\n}\n\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2hhjh3kk.php:28\n\
    Stack trace:\n#0 /tmp/tmp2hhjh3kk.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp2hhjh3kk.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = \"db\";\n  $remainder = $decimal;\n\
    \  while ($remainder > 0) {\n    $binary .= $remainder % 2;\n    $remainder =\
    \ floor($remainder / 2);\n  }\n  return strrev($binary) . \"db\";\n}\necho decimal_to_binary(15)\
    \ . PHP_EOL;\necho decimal_to_binary(32) . PHP_EOL;\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1111bddb\n100000bddb\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmps6zq58nc.php:27\nStack trace:\n#0 /tmp/tmps6zq58nc.php(33): test()\n\
    #1 {main}\n  thrown in /tmp/tmps6zq58nc.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = decbin($decimal);\n  $binary = 'db'\
    \ . $binary . 'db';\n  return $binary;\n}\necho decimal_to_binary(15) . \"\\n\"\
    ;\necho decimal_to_binary(32) . \"\\n\";\necho decimal_to_binary(2) . \"\\n\"\
    ;\necho decimal_to_binary(1) . \"\\n\";\n\nfunction candidate(...$args) {\n  \
    \  return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(32)\
    \ !== \"db100000db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(103)\
    \ !== \"db1100111db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(15)\
    \ !== \"db1111db\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "db1111db\ndb100000db\ndb10db\ndb1db\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $remainder = $decimal;\n    $binary = \"\"\
    ;\n    while ($remainder >= 1) {\n        $r = $remainder % 2;\n        $remainder\
    \ = floor($remainder / 2);\n        $binary = $r . $binary;\n    }\n    return\
    \ \"db\" . $binary . \"db\";\n}\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphml808tg.php:25\n\
    Stack trace:\n#0 /tmp/tmphml808tg.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphml808tg.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary = decbin($decimal);\n    $binary\
    \ = \"db\" . $binary . \"db\";\n    return $binary;\n}\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $output = array();\n  while ($decimal > 0)\
    \ {\n    $remainder = $decimal % 2;\n    $decimal = (int)($decimal / 2);\n   \
    \ array_unshift($output, $remainder);\n  }\n  $output_length = count($output);\n\
    \  for ($i = 0; $i < 7 - $output_length; $i++) {\n    array_unshift($output, 0);\n\
    \  }\n  array_unshift($output, 'd');\n  array_push($output, 'b');\n  return implode('',\
    \ $output);\n}\n\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplk599ifd.php:31\n\
    Stack trace:\n#0 /tmp/tmplk599ifd.php(37): test()\n#1 {main}\n  thrown in /tmp/tmplk599ifd.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary = array_fill(0, 32, '0');\n    for\
    \ ($i = 0; $i < 32; $i++) {\n        if ($decimal % 2 != 0) {\n            $binary[31\
    \ - $i] = '1';\n        }\n        $decimal = (int)($decimal / 2);\n    }\n  \
    \  $binary = array_slice($binary, array_search('1', $binary));\n    $binary =\
    \ implode('', $binary);\n    return \"db\" . $binary . \"db\";\n}\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc75rnf0z.php:27\n\
    Stack trace:\n#0 /tmp/tmpc75rnf0z.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpc75rnf0z.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = 'db';\n  for ($decimal; $decimal\
    \ > 0; $decimal /= 2) {\n    $binary .= $decimal % 2;\n  }\n  return strrev($binary)\
    \ . 'db';\n}\nprint_r(decimal_to_binary(10));\nfunction candidate(...$args) {\n\
    \    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdoutbddb\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpb9xwt56c.php:23\nStack\
    \ trace:\n#0 /tmp/tmpb9xwt56c.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpb9xwt56c.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $result = \"db\";\n  if ($decimal == 0) {\n\
    \    $result .= \"0db\";\n  } else {\n    while ($decimal > 0) {\n      $result\
    \ .= ($decimal % 2 == 0) ? \"0\" : \"1\";\n      $decimal = (int)($decimal / 2);\n\
    \    }\n    $result .= \"db\";\n  }\n  return strrev($result);\n}\n\nfunction\
    \ candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp881aimr.php:29\n\
    Stack trace:\n#0 /tmp/tmpp881aimr.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpp881aimr.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = decbin($decimal);\n  $binary = \"\
    db\" . $binary . \"db\";\n  return $binary;\n}\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n\t// the base of the number must be the base\
    \ 2\n\t// the number needs to be a string to go through the string_split function\n\
    \t// after that, I will use the array_reverse function to read the binary number\
    \ from left to right\n\t// I am going to use the base 2 to convert the number\
    \ from decimal to binary\n\t$binary =  str_split(base_convert($decimal, 10, 2));\n\
    \t// after the array is reversed, I will use the implode function to join the\
    \ number together\n\t// and add a \"db\" infront and after the number\n\t$binary\
    \ = \"db\" . implode($binary) . \"db\";\n\treturn $binary;\n}\nprint_r(decimal_to_binary(15));\n\
    print_r(decimal_to_binary(32));\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: db1111dbdb100000db
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $str = 'db';\n    for ($i = 8; $i > 0; $i--)\
    \ {\n        $str .= ($decimal & (1 << ($i - 1))) ? '1' : '0';\n    }\n    return\
    \ $str . 'db';\n}\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp10bejn3o.php:22\n\
    Stack trace:\n#0 /tmp/tmp10bejn3o.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp10bejn3o.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = \"db\";\n  while ($decimal > 0) {\n\
    \    $binary .= $decimal % 2;\n    $decimal = floor($decimal / 2);\n  }\n  return\
    \ $binary . \"db\";\n}\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp11sjoz_n.php:23\n\
    Stack trace:\n#0 /tmp/tmp11sjoz_n.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp11sjoz_n.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $db = 'db';\n    return $db . decbin($decimal)\
    \ . $db;\n}\necho decimal_to_binary(32);\necho \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "db100000db\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  // We can convert decimal number to binary\
    \ format using PHP build-in function decbin\n  // And then we only need to return\
    \ string with 'db' at the beginning and at the end\n  return 'db' . decbin($decimal)\
    \ . 'db';\n}\n\necho decimal_to_binary(15) . \"\\n\";\necho decimal_to_binary(32)\
    \ . \"\\n\";\necho decimal_to_binary(500) . \"\\n\";\necho decimal_to_binary(4000)\
    \ . \"\\n\";\n\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "db1111db\ndb100000db\ndb111110100db\ndb111110100000db\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  // Your code here\n}\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcfes8n14.php:18\n\
    Stack trace:\n#0 /tmp/tmpcfes8n14.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpcfes8n14.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    return \"db\" . decbin($decimal) . \"db\"\
    ;\n}\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary = decbin($decimal);\n    $binary\
    \ = \"db\".$binary.\"db\";\n    return $binary;\n}\necho decimal_to_binary(15);\n\
    function candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: db1111db
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = decbin($decimal);\n  return \"db\"\
    \ . $binary . \"db\";\n}\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    // your code here\n    $b = [];\n    while\
    \ ($decimal > 0) {\n        $b[] = $decimal % 2;\n        $decimal = floor($decimal\
    \ / 2);\n    }\n    return \"db\" . implode('', array_reverse($b)) . \"db\";\n\
    }\n\necho decimal_to_binary(15) . PHP_EOL;\necho decimal_to_binary(32) . PHP_EOL;\n\
    function candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "db1111db\ndb100000db\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpn0exvmit.php:27\nStack trace:\n#0 /tmp/tmpn0exvmit.php(33): test()\n\
    #1 {main}\n  thrown in /tmp/tmpn0exvmit.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = decbin($decimal);\n  return \"db\"\
    \ . $binary . \"db\";\n}\n\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary = decbin($decimal);\n    return \"\
    db\" . $binary . \"db\";\n}\n\necho decimal_to_binary(15);\necho \"\\n\";\necho\
    \ decimal_to_binary(32);\necho \"\\n\";\necho decimal_to_binary(6);\necho \"\\\
    n\";\necho decimal_to_binary(40);\necho \"\\n\";\necho decimal_to_binary(47);\n\
    echo \"\\n\";\necho decimal_to_binary(27);\necho \"\\n\";\necho decimal_to_binary(33);\n\
    echo \"\\n\";\necho decimal_to_binary(53);\necho \"\\n\";\necho decimal_to_binary(59);\n\
    echo \"\\n\";\necho decimal_to_binary(5);\necho \"\\n\";\necho decimal_to_binary(3);\n\
    echo \"\\n\";\necho decimal_to_binary(7);\necho \"\\n\";\necho decimal_to_binary(38);\n\
    echo \"\\n\";\necho decimal_to_binary(13);\necho \"\\n\";\necho decimal_to_binary(44);\n\
    echo \"\\n\";\necho decimal_to_binary(12);\necho \"\\n\";\necho decimal_to_binary(39);\n\
    echo \"\\n\";\necho decimal_to_binary(10);\necho \"\\n\";\necho decimal_to_binary(7);\n\
    echo \"\\n\";\necho decimal_to_binary(45);\necho \"\\n\";\necho decimal_to_binary(46);\n\
    echo \"\\n\";\necho decimal_to_binary(6);\necho \"\\n\";\necho decimal_to_binary(53);\n\
    echo \"\\n\";\necho decimal_to_binary(59);\necho \"\\n\";\necho decimal_to_binary(13);\n\
    echo \"\\n\";\necho decimal_to_binary(44);\necho \"\\n\";\necho decimal_to_binary(12);\n\
    echo \"\\n\";\necho decimal_to_binary(39);\necho \"\\n\";\necho decimal_to_binary(10);\n\
    echo \"\\n\";\necho decimal_to_binary(48);\necho \"\\n\";\necho decimal_to_binary(50);\n\
    echo \"\\n\";\necho decimal_to_binary(17);\necho \"\\n\";\necho decimal_to\nfunction\
    \ candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp34srkj9g.php on line 80\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $result = 'db';\n    while($decimal) {\n\
    \        $result .= ($decimal % 2) ? '1' : '0';\n        $decimal = floor($decimal\
    \ / 2);\n    }\n    return $result . 'db';\n}\necho decimal_to_binary(15) . PHP_EOL;\n\
    echo decimal_to_binary(32) . PHP_EOL;\n\nfunction candidate(...$args) {\n    return\
    \ decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(32)\
    \ !== \"db100000db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(103)\
    \ !== \"db1100111db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(15)\
    \ !== \"db1111db\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "db1111db\ndb000001db\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpbzxql_qa.php:26\nStack trace:\n#0 /tmp/tmpbzxql_qa.php(32): test()\n\
    #1 {main}\n  thrown in /tmp/tmpbzxql_qa.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  return 'db' . decbin($decimal) . 'db';\n}\n\
    \necho decimal_to_binary(15);\n\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: db1111db
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = base_convert($decimal, 10, 2);\n\
    \  $binary = \"db\".$binary.\"db\";\n  return $binary;\n}\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary_array = array('db');\n    while($decimal)\
    \ {\n        $remainder = $decimal % 2;\n        array_push($binary_array, $remainder);\n\
    \        $decimal = floor($decimal / 2);\n    }\n    $result = array_reverse($binary_array);\n\
    \    array_push($result, 'db');\n    return implode($result);\n}\necho decimal_to_binary(15);\n\
    echo \"\\n\";\necho decimal_to_binary(32);\necho \"\\n\";\necho decimal_to_binary(52);\n\
    echo \"\\n\";\necho decimal_to_binary(91);\necho \"\\n\";\necho decimal_to_binary(7);\n\
    echo \"\\n\";\necho decimal_to_binary(83);\necho \"\\n\";\necho decimal_to_binary(38);\n\
    echo \"\\n\";\necho decimal_to_binary(96);\necho \"\\n\";\necho decimal_to_binary(100);\n\
    echo \"\\n\";\necho decimal_to_binary(96);\necho \"\\n\";\necho decimal_to_binary(77);\n\
    echo \"\\n\";\necho decimal_to_binary(78);\necho \"\\n\";\necho decimal_to_binary(88);\n\
    echo \"\\n\";\necho decimal_to_binary(36);\necho \"\\n\";\necho decimal_to_binary(29);\n\
    echo \"\\n\";\necho decimal_to_binary(56);\necho \"\\n\";\necho decimal_to_binary(53);\n\
    echo \"\\n\";\necho decimal_to_binary(60);\necho \"\\n\";\necho decimal_to_binary(63);\n\
    echo \"\\n\";\necho decimal_to_binary(74);\necho \"\\n\";\necho decimal_to_binary(30);\n\
    echo \"\\n\";\necho decimal_to_binary(14);\necho \"\\n\";\necho decimal_to_binary(9);\n\
    echo \"\\n\";\necho decimal_to_binary(22);\necho \"\\n\";\necho decimal_to_binary(42);\n\
    echo \"\\n\";\necho decimal_to_binary(47);\necho \"\\n\";\necho decimal_to_binary(33);\n\
    echo \"\\n\";\necho decimal_to_binary(54);\nfunction candidate(...$args) {\n \
    \   return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1111dbdb\n100000dbdb\n110100dbdb\n1011011dbdb\n111dbdb\n1010011dbdb\n100110dbdb\n\
    1100000dbdb\n1100100dbdb\n1100000dbdb\n1001101dbdb\n1001110dbdb\n1011000dbdb\n\
    100100dbdb\n11101dbdb\n111000dbdb\n110101dbdb\n111100dbdb\n111111dbdb\n1001010dbdb\n\
    11110dbdb\n1110dbdb\n1001dbdb\n10110dbdb\n101010dbdb\n101111dbdb\n100001dbdb\n\
    110110dbdb\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjigxl65m.php:81\n\
    Stack trace:\n#0 /tmp/tmpjigxl65m.php(87): test()\n#1 {main}\n  thrown in /tmp/tmpjigxl65m.php\
    \ on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $res = decbin($decimal);\n  return 'db'.$res.'db';\n\
    }\n\necho decimal_to_binary(15);\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: db1111db
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary = decbin($decimal);\n    $binary\
    \ = \"db\".$binary.\"db\";\n    return $binary;\n}\necho decimal_to_binary(15);\n\
    function candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: db1111db
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $decimal = decbin($decimal);\n    $decimal\
    \ = \"db\" . $decimal . \"db\";\n    return $decimal;\n}\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  return \"db\".decbin($decimal).\"db\";\n}\n\
    \nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n\t$binary = decbin($decimal);\n\treturn \"db\"\
    \ . $binary . \"db\";\n}\n\necho decimal_to_binary(15);\necho \"\\n\";\necho decimal_to_binary(32);\n\
    echo \"\\n\";\n\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "db1111db\ndb100000db\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    return decbin($decimal);\n}\n\necho decimal_to_binary(15);\n\
    function candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1sf6h6bq.php:20\n\
    Stack trace:\n#0 /tmp/tmp1sf6h6bq.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp1sf6h6bq.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  return 'db' . decbin($decimal) . 'db';\n}\n\
    \nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  return \"db\" . decbin($decimal) . \"db\";\n\
    }\n\necho decimal_to_binary(15) . \"\\n\"; // returns \"db1111db\"\necho decimal_to_binary(32)\
    \ . \"\\n\"; // returns \"db100000db\"\n\nfunction candidate(...$args) {\n   \
    \ return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(32)\
    \ !== \"db100000db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(103)\
    \ !== \"db1100111db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(15)\
    \ !== \"db1111db\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "db1111db\ndb100000db\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary = 'db';\n    $binary .= decbin($decimal);\n\
    \    $binary .= 'db';\n    return $binary;\n}\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary = decbin($decimal);\n    $binary\
    \ = \"db\" . $binary . \"db\";\n    return $binary;\n}\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    return 'db' . decbin($decimal) . 'db';\n\
    }\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = \"db\";\n  while ($decimal >= 1)\
    \ {\n    $remainder = $decimal % 2;\n    $decimal = floor($decimal / 2);\n   \
    \ $binary = $remainder . $binary;\n  }\n  return $binary . \"db\";\n}\n\nfunction\
    \ candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm52f0dp9.php:25\n\
    Stack trace:\n#0 /tmp/tmpm52f0dp9.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpm52f0dp9.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  // iterate backwards through the number, starting\
    \ at the last digit\n  $binary_string = \"db\";\n  while($decimal > 0) {\n   \
    \ $binary_string .= $decimal % 2;\n    $decimal = intval($decimal / 2);\n  }\n\
    \  $binary_string .= \"db\";\n  return $binary_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf2dlv9rq.php:26\n\
    Stack trace:\n#0 /tmp/tmpf2dlv9rq.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpf2dlv9rq.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binaryString = \"db\";\n  while ($decimal\
    \ > 0) {\n    $binaryString .= $decimal % 2;\n    $decimal = floor($decimal /\
    \ 2);\n  }\n  return $binaryString . \"db\";\n}\n\necho decimal_to_binary(32)\
    \ . \"\\n\";\necho decimal_to_binary(15) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "db000001db\ndb1111db\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpcqbda5sb.php:26\nStack trace:\n#0 /tmp/tmpcqbda5sb.php(32): test()\n\
    #1 {main}\n  thrown in /tmp/tmpcqbda5sb.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = \"db\" . decbin($decimal) . \"db\"\
    ;\n  return $binary;\n}\necho decimal_to_binary(15) . \"\\n\";\necho decimal_to_binary(32)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "db1111db\ndb100000db\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $bin_string = '';\n  while ($decimal > 0) {\n\
    \    $bin_string = ($decimal % 2) . $bin_string;\n    $decimal = floor($decimal\
    \ / 2);\n  }\n  return 'db' . $bin_string . 'db';\n}\n\necho decimal_to_binary(15)\
    \ . \"\\n\";\necho decimal_to_binary(32) . \"\\n\";\necho decimal_to_binary(0)\
    \ . \"\\n\";\necho decimal_to_binary(16777215) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "db1111db\ndb100000db\ndbdb\ndb111111111111111111111111db\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmptgrvwogg.php:28\nStack trace:\n\
    #0 /tmp/tmptgrvwogg.php(34): test()\n#1 {main}\n  thrown in /tmp/tmptgrvwogg.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  return 'db' . decbin($decimal) . 'db';\n}\n\
    \necho decimal_to_binary(15); // 'db1111db'\necho decimal_to_binary(32); // 'db100000db'\n\
    \nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: db1111dbdb100000db
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary_string = \"db\";\n    while ($decimal\
    \ > 0) {\n        $binary_string .= $decimal % 2;\n        $decimal = floor($decimal\
    \ / 2);\n    }\n    return $binary_string . \"db\";\n}\nprint(decimal_to_binary(0)\
    \ . \"\\n\");\nprint(decimal_to_binary(15) . \"\\n\");\nprint(decimal_to_binary(32)\
    \ . \"\\n\");\nprint(decimal_to_binary(98) . \"\\n\");\nprint(decimal_to_binary(101)\
    \ . \"\\n\");\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "dbdb\ndb1111db\ndb000001db\ndb0100011db\ndb1010011db\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp5r0x4a68.php:28\nStack trace:\n#0 /tmp/tmp5r0x4a68.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5r0x4a68.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    return \"db\".decbin($decimal).\"db\";\n\
    }\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $decimal = (int)$decimal;\n    $binary =\
    \ decbin($decimal);\n    $binary = str_pad($binary, 7, '0', STR_PAD_LEFT);\n \
    \   return 'db' . $binary . 'db';\n}\nfunction candidate(...$args) {\n    return\
    \ decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(32)\
    \ !== \"db100000db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(103)\
    \ !== \"db1100111db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(15)\
    \ !== \"db1111db\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqx_hxu_9.php:21\n\
    Stack trace:\n#0 /tmp/tmpqx_hxu_9.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqx_hxu_9.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = \"db\";\n  while($decimal > 0) {\n\
    \    $remainder = $decimal % 2;\n    $binary .= $remainder;\n    $decimal = floor($decimal\
    \ / 2);\n  }\n  return strrev($binary) . \"db\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmic49fq6.php:25\n\
    Stack trace:\n#0 /tmp/tmpmic49fq6.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpmic49fq6.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = decbin($decimal);\n  return 'db'\
    \ . $binary . 'db';\n}\necho decimal_to_binary(15) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "db1111db\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary = \"db\";\n    while($decimal >=\
    \ 1) {\n        $binary .= $decimal % 2;\n        $decimal = floor($decimal /\
    \ 2);\n    }\n    return strrev($binary . \"db\");\n}\necho decimal_to_binary(15)\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "bd1111bd\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps4bwqqqo.php:24\n\
    Stack trace:\n#0 /tmp/tmps4bwqqqo.php(30): test()\n#1 {main}\n  thrown in /tmp/tmps4bwqqqo.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary_array = array();\n    $binary_string\
    \ = '';\n    while ($decimal > 0) {\n        $binary_array[] = $decimal % 2;\n\
    \        $decimal = floor($decimal / 2);\n    }\n    $binary_array = array_reverse($binary_array);\n\
    \    foreach ($binary_array as $bit) {\n        $binary_string .= $bit;\n    }\n\
    \    return 'db' . $binary_string . 'db';\n}\nfunction candidate(...$args) {\n\
    \    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp708h7g8e.php:28\n\
    Stack trace:\n#0 /tmp/tmp708h7g8e.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp708h7g8e.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $bin = '';\n  $bin .= \"db\";\n  for ($i =\
    \ 0; $i < 8; $i++) {\n    $bin .= $decimal % 2;\n    $decimal = (int)($decimal\
    \ / 2);\n  }\n  $bin .= \"db\";\n  return strrev($bin);\n}\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplz75kdxr.php:26\n\
    Stack trace:\n#0 /tmp/tmplz75kdxr.php(32): test()\n#1 {main}\n  thrown in /tmp/tmplz75kdxr.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $db = \"db\";\n  $dec_copy = $decimal;\n  $zeros\
    \ = \"\";\n  $one = \"1\";\n  $bin = \"\";\n  $binary_array = array();\n  if($decimal\
    \ < 0) {\n    return \"decimal number must be greater than 0\";\n  } else if($decimal\
    \ == 0) {\n    return \"db0db\";\n  } else {\n    while($dec_copy != 0) {\n  \
    \    $remainder = $dec_copy % 2;\n      if($remainder == 0) {\n        $bin =\
    \ $zeros;\n      } else {\n        $bin = $one;\n      }\n      array_push($binary_array,\
    \ $bin);\n      $dec_copy = floor($dec_copy / 2);\n    }\n    $binary_array =\
    \ array_reverse($binary_array);\n    $binary_array = implode($binary_array);\n\
    \    $binary_array = $db . $binary_array . $db;\n    return $binary_array;\n \
    \ }\n}\n\necho \"<pre>\";\necho \"decimal_to_binary(15) \\n\";\necho decimal_to_binary(15);\n\
    echo \"</pre>\";\n\necho \"<pre>\";\necho \"decimal_to_binary(32) \\n\";\necho\
    \ decimal_to_binary(32);\necho \"</pre>\";\n\necho \"<pre>\";\necho \"decimal_to_binary(0)\
    \ \\n\";\necho decimal_to_binary(0);\necho \"</pre>\";\n\necho \"<pre>\";\necho\
    \ \"decimal_to_binary(-1) \\n\";\necho decimal_to_binary(-1);\necho \"</pre>\"\
    ;\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>decimal_to_binary(15) \ndb1111db</pre><pre>decimal_to_binary(32) \n\
    db1db</pre><pre>decimal_to_binary(0) \ndb0db</pre><pre>decimal_to_binary(-1) \n\
    decimal number must be greater than 0</pre>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp0ulb81tr.php:64\nStack trace:\n#0 /tmp/tmp0ulb81tr.php(69):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0ulb81tr.php on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $array = [];\n  $bin = \"\";\n  $bin .= \"\
    db\";\n  while ($decimal > 0) {\n    $rest = $decimal % 2;\n    $decimal = ($decimal\
    \ - $rest) / 2;\n    array_push($array, $rest);\n  }\n  $revArray = array_reverse($array);\n\
    \  for ($i = 0; $i < count($revArray); $i++) {\n    $bin .= $revArray[$i];\n \
    \ }\n  $bin .= \"db\";\n  return $bin;\n}\n\nfunction candidate(...$args) {\n\
    \    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfyw0dfvk.php:32\n\
    Stack trace:\n#0 /tmp/tmpfyw0dfvk.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpfyw0dfvk.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary = decbin($decimal);\n    $binary\
    \ = 'db' . $binary . 'db';\n    return $binary;\n}\necho decimal_to_binary(15);\n\
    echo \"\\n\";\necho decimal_to_binary(32);\necho \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "db1111db\ndb100000db\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary = (string)decbin($decimal);\n   \
    \ $binary = \"db\" . $binary . \"db\";\n    return $binary;\n}\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n\t$binaryString = \"db\";\n\t$binary = decbin($decimal);\n\
    \t$binaryLength = strlen($binary);\n\t\n\t$binary = str_pad($binary, 8, \"0\"\
    , STR_PAD_LEFT);\n\t$binaryString .= $binary;\n\t$binaryString .= \"db\";\n\t\n\
    \treturn $binaryString;\n}\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpihgdbwk_.php:26\n\
    Stack trace:\n#0 /tmp/tmpihgdbwk_.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpihgdbwk_.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = '';\n  for($i = 0; $i < 8; $i++)\
    \ {\n    $binary = ($decimal % 2) . $binary;\n    $decimal = floor($decimal /\
    \ 2);\n  }\n  return \"db\" . $binary . \"db\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpebjdyisg.php:24\n\
    Stack trace:\n#0 /tmp/tmpebjdyisg.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpebjdyisg.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n\t$bin = 'db';\n\t$t = 0;\n\twhile (2 ** $t <=\
    \ $decimal) {\n\t\t$t++;\n\t}\n\twhile ($t >= 0) {\n\t\tif (2 ** $t <= $decimal)\
    \ {\n\t\t\t$bin .= '1';\n\t\t\t$decimal -= 2 ** $t;\n\t\t} else {\n\t\t\t$bin\
    \ .= '0';\n\t\t}\n\t\t$t--;\n\t}\n\t$bin .= 'db';\n\treturn $bin;\n}\necho decimal_to_binary(15)\
    \ . \"\\n\";\necho decimal_to_binary(32) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "db01111db\ndb0100000db\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp8j02dktn.php:36\nStack trace:\n#0 /tmp/tmp8j02dktn.php(41): test()\n\
    #1 {main}\n  thrown in /tmp/tmp8j02dktn.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary =  decbin($decimal);\n  $arr = str_split($binary);\n\
    \  array_unshift($arr,\"d\",\"b\");\n  array_push($arr,\"d\",\"b\");\n  $binary\
    \ = implode($arr);\n  return $binary;\n}\n\nfunction candidate(...$args) {\n \
    \   return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = '';\n  for ($i = $decimal; $i > 0;\
    \ $i = intval($i / 2)) {\n    $binary = strval($i % 2) . $binary;\n  }\n  return\
    \ 'db' . $binary . 'db';\n}\n\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwlwe8dze.php:23\n\
    Stack trace:\n#0 /tmp/tmpwlwe8dze.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpwlwe8dze.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $bin = \"\";\n  while($decimal>0){\n    $bin\
    \ .= $decimal%2;\n    $decimal = floor($decimal/2);\n  }\n  return \"db\".strrev($bin).\"\
    db\";\n}\n ?>\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "function candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n\t$binary = '';\n\t$fraction = 0;\n\twhile($decimal\
    \ > 0) {\n\t\t$fraction = $decimal * 2;\n\t\t$decimal = floor($fraction);\n\t\t\
    $binary = ($fraction - $decimal) . $binary;\n\t}\n\treturn \"db\" . $binary .\
    \ \"db\";\n}\n\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptu2ov16t.php:26\n\
    Stack trace:\n#0 /tmp/tmptu2ov16t.php(32): test()\n#1 {main}\n  thrown in /tmp/tmptu2ov16t.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $base = 2;\n  $result = '';\n  $remainder =\
    \ 0;\n  while($decimal > 0) {\n    $remainder = $decimal % $base;\n    $decimal\
    \ = (int)($decimal / $base);\n    $result = $remainder . $result;\n  }\n  return\
    \ 'db' . $result . 'db';\n}\n\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn7mmvv4q.php:27\n\
    Stack trace:\n#0 /tmp/tmpn7mmvv4q.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpn7mmvv4q.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = decbin($decimal);\n  return \"db\"\
    \ . $binary . \"db\";\n}\necho decimal_to_binary(15);\necho \"\\n\";\necho decimal_to_binary(32);\n\
    function candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "db1111db\ndb100000db"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $arr = [];\n  while($decimal > 0) {\n    array_unshift($arr,\
    \ $decimal % 2);\n    $decimal = floor($decimal / 2);\n  }\n  return \"db\" .\
    \ implode(\"\", $arr) . \"db\";\n}\nfunction candidate(...$args) {\n    return\
    \ decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(32)\
    \ !== \"db100000db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(103)\
    \ !== \"db1100111db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(15)\
    \ !== \"db1111db\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw4xb9g99.php:23\n\
    Stack trace:\n#0 /tmp/tmpw4xb9g99.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpw4xb9g99.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $result = '';\n  $dec = $decimal;\n  $bin =\
    \ '';\n  if ($dec > 1) {\n    while ($dec >= 1) {\n      $bin .= $dec % 2;\n \
    \     $dec = (int)($dec / 2);\n    }\n    for ($i = strlen($bin) - 1; $i >= 0;\
    \ $i--) {\n      $result .= $bin[$i];\n    }\n  } else {\n    $result = $dec;\n\
    \  }\n  return 'db' . $result . 'db';\n}\n\nfunction candidate(...$args) {\n \
    \   return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = decbin($decimal);\n  $binary = 'db'\
    \ . $binary . 'db';\n  return $binary;\n}\nfunction candidate(...$args) {\n  \
    \  return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(32)\
    \ !== \"db100000db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(103)\
    \ !== \"db1100111db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(15)\
    \ !== \"db1111db\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $string = decbin($decimal);\n    $length\
    \ = strlen($string);\n    if($length < 8) {\n        $count = 8 - $length;\n \
    \       $string = str_repeat('0', $count) . $string;\n    }\n    return \"db\"\
    .$string.\"db\";\n}\n\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgf2rs_0q.php:25\n\
    Stack trace:\n#0 /tmp/tmpgf2rs_0q.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpgf2rs_0q.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary = decbin($decimal);\n    $binary\
    \ = 'db' . $binary . 'db';\n    return $binary;\n}\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $bin = decbin($decimal);\n  return \"db\" .\
    \ $bin . \"db\";\n}\n\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary = '';\n    while ($decimal >= 1)\
    \ {\n        $binary = ($decimal % 2) . $binary;\n        $decimal = floor($decimal\
    \ / 2);\n    }\n    $binary = \"db\" . $binary . \"db\";\n    return $binary;\n\
    }\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7uj8w0a1.php:24\n\
    Stack trace:\n#0 /tmp/tmp7uj8w0a1.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp7uj8w0a1.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = decbin($decimal);\n  return \"db\"\
    .$binary.\"db\";\n}\n\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  // This is the place to store binary numbers\n\
    \  $binary = \"\";\n  $current_number = $decimal;\n  // How will we know when\
    \ to stop?\n  // Keep dividing the number by 2, until we get 0\n  while ($current_number\
    \ != 0) {\n    // Remember the remainder, as that is our bit\n    $remainder =\
    \ $current_number % 2;\n    // Add the remainder (bit) to the binary string\n\
    \    $binary = \"$remainder\" . $binary;\n    // Divide the number by 2 and continue\n\
    \    $current_number = $current_number / 2;\n  }\n  // Remove the 0b from the\
    \ beginning,\n  // and add 0b to the beginning and the end\n  $binary = str_replace(\"\
    0b\", \"\", $binary);\n  return \"db\" . $binary . \"db\";\n}\necho decimal_to_binary(8);\n\
    function candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "dbdb\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpvicn0t1w.php:35\nStack\
    \ trace:\n#0 /tmp/tmpvicn0t1w.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpvicn0t1w.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n\t$num = \"db\";\n\t$i = 0;\n\twhile ($decimal\
    \ > 0) {\n\t\t$num = ($decimal % 2).$num;\n\t\t$decimal = floor($decimal / 2);\n\
    \t\tif ($i > 100) break;\n\t\t$i++;\n\t}\n\treturn $num.\"db\";\n}\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvuc18had.php:26\n\
    Stack trace:\n#0 /tmp/tmpvuc18had.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpvuc18had.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  // code here\n  $bin = decbin($decimal);\n\
    \  return \"db\" . $bin . \"db\";\n}\n\nfunction candidate(...$args) {\n    return\
    \ decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(32)\
    \ !== \"db100000db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(103)\
    \ !== \"db1100111db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(15)\
    \ !== \"db1111db\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = '';\n  while ($decimal != 0) {\n\
    \    $binary = ($decimal % 2) . $binary;\n    $decimal = floor($decimal / 2);\n\
    \  }\n  return 'db' . str_pad($binary, 8, '0', STR_PAD_LEFT) . 'db';\n}\n\nfunction\
    \ candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy7h9lmir.php:24\n\
    Stack trace:\n#0 /tmp/tmpy7h9lmir.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpy7h9lmir.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = decbin($decimal);\n  $result = 'db';\n\
    \  $result .= str_pad($binary, 8, '0', STR_PAD_LEFT);\n  $result .= 'db';\n  return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpphsf5wd8.php:22\n\
    Stack trace:\n#0 /tmp/tmpphsf5wd8.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpphsf5wd8.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n\n}\nfunction candidate(...$args) {\n    return\
    \ decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(32)\
    \ !== \"db100000db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(103)\
    \ !== \"db1100111db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(15)\
    \ !== \"db1111db\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3mk5vnuo.php:18\n\
    Stack trace:\n#0 /tmp/tmp3mk5vnuo.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3mk5vnuo.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary = decbin($decimal);\n    $result\
    \ = \"db\" . $binary . \"db\";\n    return $result;\n}\n\necho decimal_to_binary(15);\n\
    function candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: db1111db
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  // Convert $decimal into binary\n  $binary\
    \ = decbin($decimal);\n  // Put string \"db\" on either side of $binary\n  $binary\
    \ = \"db$binary\" . \"db\";\n  // Return $binary\n  return $binary;\n}\nfunction\
    \ candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = 'db';\n  $binary .= decbin($decimal);\n\
    \  $binary .= 'db';\n  return $binary;\n}\n\nfunction candidate(...$args) {\n\
    \    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $ans = '';\n  while ($decimal > 0) {\n    $ans\
    \ = ($decimal % 2) . $ans;\n    $decimal = floor($decimal / 2);\n  }\n  return\
    \ 'db' . $ans . 'db';\n}\n\necho decimal_to_binary(15) . \"\\n\";\necho decimal_to_binary(32)\
    \ . \"\\n\";\n\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "db1111db\ndb100000db\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp7siinsa6.php:27\nStack trace:\n#0 /tmp/tmp7siinsa6.php(33): test()\n\
    #1 {main}\n  thrown in /tmp/tmp7siinsa6.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $dec = strrev($decimal);\n    $index = strlen($dec);\n\
    \    for ($i = 0; $i < $index; $i++) {\n        $dec[$i] = bindec($dec[$i]);\n\
    \    }\n    return 'db' . implode($dec) . 'db';\n}\necho decimal_to_binary(32);\n\
    function candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: implode(): Argument must be an array in /tmp/tmpugjqnmj2.php\
    \ on line 16\ndbdb\nWarning: implode(): Argument must be an array in /tmp/tmpugjqnmj2.php\
    \ on line 16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpugjqnmj2.php:24\n\
    Stack trace:\n#0 /tmp/tmpugjqnmj2.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpugjqnmj2.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $bin = \"\";\n  if ($decimal > 0) {\n    $bin\
    \ = decbin($decimal);\n  }\n  return \"db\" . $bin . \"db\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw3ikmalc.php:23\n\
    Stack trace:\n#0 /tmp/tmpw3ikmalc.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpw3ikmalc.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $result = 'db';\n  for ($i = 0; $i < 7; $i++)\
    \ {\n    $result .= ($decimal & 1);\n    $decimal >>= 1;\n  }\n  $result .= 'db';\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return decimal_to_binary(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\"\
    ) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp32b50ywh.php:25\n\
    Stack trace:\n#0 /tmp/tmp32b50ywh.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp32b50ywh.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = \"db\";\n  $binary .= decbin($decimal);\n\
    \  $binary .= \"db\";\n  return $binary;\n}\nfunction candidate(...$args) {\n\
    \    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n  $binary = \"db\";\n  if ($decimal == 0) {\n\
    \    $binary .= \"0\";\n  } else {\n    while ($decimal > 0) {\n      $binary\
    \ .= ($decimal % 2);\n      $decimal = floor($decimal / 2);\n    }\n  }\n  $binary\
    \ .= \"db\";\n  return strrev($binary);\n}\nfunction candidate(...$args) {\n \
    \   return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcztd0cmj.php:28\n\
    Stack trace:\n#0 /tmp/tmpcztd0cmj.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpcztd0cmj.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $return = \"db\";\n    while ($decimal >\
    \ 0) {\n        $return .= ($decimal % 2);\n        $decimal = floor($decimal\
    \ / 2);\n    }\n    return strrev($return) . \"db\";\n}\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnwpmwp3o.php:23\n\
    Stack trace:\n#0 /tmp/tmpnwpmwp3o.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpnwpmwp3o.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    return decbin($decimal);\n}\n\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt3qp3ntr.php:19\n\
    Stack trace:\n#0 /tmp/tmpt3qp3ntr.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpt3qp3ntr.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n\t// check if the number is valid\n\tif (empty($decimal)\
    \ || !is_numeric($decimal)) {\n\t\tthrow new InvalidArgumentException(\"Please\
    \ enter a valid integer.\");\n\t}\n\t// check if the number is less than 0\n\t\
    if ($decimal < 0) {\n\t\tthrow new InvalidArgumentException(\"Please enter a positive\
    \ integer.\");\n\t}\n\t// check if the number is equal to 0\n\tif ($decimal ==\
    \ 0) {\n\t\treturn \"db0db\";\n\t}\n\t// set the result to null\n\t$result = null;\n\
    \t// set the base of the number system\n\t$base = 2;\n\t// calculate the binary\
    \ number\n\twhile ($decimal > 0) {\n\t\t$result = $decimal % $base . $result;\n\
    \t\t$decimal = (int)($decimal / $base);\n\t}\n\t// return the decimal number,\
    \ without the minus sign\n\treturn \"db\" . $result . \"db\";\n}\nfunction candidate(...$args)\
    \ {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught InvalidArgumentException: Please enter a valid\
    \ integer. in /tmp/tmpbifg59_a.php:13\nStack trace:\n#0 /tmp/tmpbifg59_a.php(36):\
    \ decimal_to_binary(0)\n#1 /tmp/tmpbifg59_a.php(40): candidate(0)\n#2 /tmp/tmpbifg59_a.php(46):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpbifg59_a.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You will be given a number in decimal form and your task is\
    \ to convert it to\n// binary format. The function should return a string, with\
    \ each character representing a binary\n// number. Each character in the string\
    \ will be '0' or '1'.\n// There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n// The extra characters are there\
    \ to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns\
    \ \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction\
    \ decimal_to_binary($decimal) {\n    $binary = '';\n    while ($decimal > 0) {\n\
    \        $binary = ($decimal % 2).$binary;\n        $decimal = floor($decimal\
    \ / 2);\n    }\n    return 'db'.str_pad($binary, 8, '0', STR_PAD_LEFT).'db';\n\
    }\n\necho decimal_to_binary(32); // \"db100000db\"\necho \"\\n\";\necho decimal_to_binary(128);\
    \ // \"db10000000db\"\necho \"\\n\";\necho decimal_to_binary(15); // \"db1111db\"\
    \necho \"\\n\";\necho decimal_to_binary(255); // \"db11111111db\"\necho \"\\n\"\
    ;\necho decimal_to_binary(0); // \"db00000000db\"\necho \"\\n\";\necho decimal_to_binary(1);\
    \ // \"db00000001db\"\necho \"\\n\";\necho decimal_to_binary(127); // \"db01111111db\"\
    \necho \"\\n\";\necho decimal_to_binary(256); // \"db100000000db\"\necho \"\\\
    n\";\necho decimal_to_binary(5678); // \"db10101011110010db\"\necho \"\\n\";\n\
    echo decimal_to_binary(1000234); // \"db111101010101110111010db\"\necho \"\\n\"\
    ;\necho decimal_to_binary(1000000); // \"db01111101010100000000000db\"\necho \"\
    \\n\";\necho decimal_to_binary(2132712); // \"db100001100010000001000000db\"\n\
    echo \"\\n\";\necho decimal_to_binary(2147483647); // \"db011111111111111111111111111111db\"\
    \necho \"\\n\";\necho decimal_to_binary(2147483648); // \"db10000000000000000000000000000000db\"\
    \necho \"\\n\";\necho decimal_to_binary(4294967295); // \"db11111111111111111111111111111111db\"\
    \necho \"\\n\";\necho decimal_to_binary(4294967296); // \"db100000000000000000000000000000000db\"\
    \necho \"\\n\";\necho decimal_to_binary(9223372036854775807); // \"db011111111111111111111111111111\n\
    function candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "db00100000db\ndb10000000db\ndb00001111db\ndb11111111db\ndb00000000db\n\
    db00000001db\ndb01111111db\ndb100000000db\ndb1011000101110db\ndb11110100001100101010db\n\
    db11110100001001000000db\ndb1000001000101011101000db\ndb1111111111111111111111111111111db\n\
    db10000000000000000000000000000000db\ndb11111111111111111111111111111111db\ndb100000000000000000000000000000000db\n\
    db1000000000000000000000000000000000000000000000000000000000000001db\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp_yg5w6o0.php:57\nStack trace:\n\
    #0 /tmp/tmp_yg5w6o0.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp_yg5w6o0.php\
    \ on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
