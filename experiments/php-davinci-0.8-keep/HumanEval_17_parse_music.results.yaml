name: HumanEval_17_parse_music
language: php
results:
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $result = [];\n    $notes = str_split($music_string);\n\
    \    $length = count($notes);\n    $beat = 4;\n    for ($i = 0; $i < $length;\
    \ $i++) {\n        if ($notes[$i] == '.') {\n            $beat = 1;\n        }\
    \ else if ($notes[$i] == 'o') {\n            $beat = 4;\n        }\n        $result[]\
    \ = $beat;\n        if ($notes[$i + 1] == '|') {\n            $i++;\n        }\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu_icr7vt.php:35\n\
    Stack trace:\n#0 /tmp/tmpu_icr7vt.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpu_icr7vt.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\t\n}\n\necho '<pre>' . implode(PHP_EOL, parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')) . '</pre>';\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: implode(): Invalid arguments passed in /tmp/tmpbsymb80k.php\
    \ on line 15\n<pre></pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbsymb80k.php:21\n\
    Stack trace:\n#0 /tmp/tmpbsymb80k.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpbsymb80k.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $note_length = 0;\n    $current_note = 0;\n    foreach ($notes as\
    \ $note) {\n        if ($note == 'o') {\n            $note_length += 4;\n    \
    \    } elseif ($note == '|') {\n            $note_length /= 2;\n        } elseif\
    \ ($note == '.') {\n            $note_length += 1;\n        } elseif ($note ==\
    \ ' ') {\n            $beats[] = $note_length;\n            $note_length = 0;\n\
    \        }\n    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n \
    \   return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6sto9ytq.php:37\n\
    Stack trace:\n#0 /tmp/tmp6sto9ytq.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp6sto9ytq.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  $notes_to_beats = array(\n    'o' => 4,\n  \
    \  'o|' => 2,\n    '.|' => 1\n  );\n  $note_parts = explode(' ', $music_string);\n\
    \  $beat_counts = array();\n  foreach ($note_parts as $note_part) {\n    $beat_counts[]\
    \ = $notes_to_beats[$note_part];\n  }\n  return $beat_counts;\n}\n\necho implode(',\
    \ ', parse_music('o o| .| o| o| .| .| .| .| o o'));\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpvo7s4n8o.php:31\nStack trace:\n#0 /tmp/tmpvo7s4n8o.php(38):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvo7s4n8o.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\t$key = array('o', 'o|', '.|');\n\t$value = array(4,\
    \ 2, 1);\n\t$arr = array_combine($key, $value);\n\t$res = explode(' ', $music_string);\n\
    \t$res1 = array();\n\tforeach ($res as $str) {\n\t\t$res1[] = $arr[$str];\n\t\
    }\n\treturn $res1;\n}\necho '<pre>';\nprint_r(parse_music('o o| .| o| o| .| .|\
    \ .| .| o o'));\necho '</pre>';\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 1\n    [3] => 2\n\
    \    [4] => 2\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n    [9]\
    \ => 4\n    [10] => 4\n)\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpwxrtwwl2.php:30\nStack trace:\n#0 /tmp/tmpwxrtwwl2.php(37): test()\n\
    #1 {main}\n  thrown in /tmp/tmpwxrtwwl2.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $total_note\
    \ = 0;\n    foreach ($notes as $key => $note) {\n        switch ($note) {\n  \
    \          case 'o':\n                $total_note++;\n                break;\n\
    \            case 'o|':\n                $total_note++;\n                break;\n\
    \            case '.|':\n                $total_note++;\n                break;\n\
    \            default:\n                break;\n        }\n    }\n    return $total_note;\n\
    }\n\nparse_music('o o| .| o| o| .| .| .| .| o o');\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbj783vob.php:38\n\
    Stack trace:\n#0 /tmp/tmpbj783vob.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpbj783vob.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\t$music = explode(' ', $music_string);\n\t$beat\
    \ = [];\n\tforeach ($music as $k => $v) {\n\t\t$beat[] = strlen($v) - strlen(str_replace('|',\
    \ '', $v));\n\t}\n\treturn $beat;\n}\n\nvar_dump(parse_music('o o| .| o| o| .|\
    \ .| .| .| o o'));\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "array(11) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(1)\n  [2]=>\n  int(1)\n\
    \  [3]=>\n  int(1)\n  [4]=>\n  int(1)\n  [5]=>\n  int(1)\n  [6]=>\n  int(1)\n\
    \  [7]=>\n  int(1)\n  [8]=>\n  int(1)\n  [9]=>\n  int(0)\n  [10]=>\n  int(0)\n\
    }\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphu1tpvd7.php:26\n\
    Stack trace:\n#0 /tmp/tmphu1tpvd7.php(33): test()\n#1 {main}\n  thrown in /tmp/tmphu1tpvd7.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\t$notes = array('o', 'o|', '.|');\n\t$values\
    \ = array(4, 2, 1);\n\t$replace = array_fill(0, count($notes), '*');\n\t$input\
    \ = str_replace($notes, $replace, $music_string);\n\t$input = str_replace(' ',\
    \ '', $input);\n\t$input = explode('*', $input);\n\t$answer = array();\n\tforeach\
    \ ($input as $index => $value) {\n\t\tif ($value !== '') {\n\t\t\t$answer[] =\
    \ (int)$value * $values[$index];\n\t\t}\n\t}\n\treturn $answer;\n}\n\nprint_r(parse_music('o\
    \ o| .| o| o| .| .| .| .| o o'));\nprint_r(parse_music('o o| o o| o o| o o| o\
    \ o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o|\
    \ o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o\
    \ o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o|\
    \ o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o\
    \ o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o|\
    \ o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o\
    \ o| o o| o o| o o| o o| o o| o o|\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp65xa3ciq.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $beats = array();\n    $pattern = '/.o|o|.|/';\n\
    \    $array_notes = preg_split($pattern, $music_string);\n    foreach ($array_notes\
    \ as $note) {\n        switch ($note) {\n            case 'o':\n             \
    \   $beats[] = 4;\n                break;\n            case 'o|':\n          \
    \      $beats[] = 2;\n                break;\n            case '.|':\n       \
    \         $beats[] = 1;\n                break;\n            default:\n      \
    \          break;\n        }\n    }\n    return $beats;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxipu4j80.php:39\n\
    Stack trace:\n#0 /tmp/tmpxipu4j80.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpxipu4j80.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    // your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxavfcabm.php:20\n\
    Stack trace:\n#0 /tmp/tmpxavfcabm.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpxavfcabm.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $result = [];\n    $length = strlen($music_string);\n\
    \    $music_array = str_split($music_string);\n    $note = 0;\n    $beat = 0;\n\
    \    $sharp = FALSE;\n    while ($note < $length) {\n        if ($music_array[$note]\
    \ == 'o') {\n            if (!$sharp) {\n                $beat = 4;\n        \
    \    } else {\n                $beat = 2;\n            }\n            if ($music_array[$note\
    \ + 1] == '#') {\n                $sharp = TRUE;\n                $note += 2;\n\
    \            } else {\n                $sharp = FALSE;\n                $note\
    \ += 1;\n            }\n        } else {\n            $beat = 1;\n           \
    \ $note += 2;\n        }\n        $result[] = $beat;\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpni80ib65.php:46\n\
    Stack trace:\n#0 /tmp/tmpni80ib65.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpni80ib65.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  // your code goes here\n  $legend = [\n    'o'\
    \ => 4,\n    'o|' => 2,\n    '.|' => 1\n  ];\n  $result = [];\n  $notes = explode('\
    \ ', $music_string);\n  foreach ($notes as $note) {\n    $result[] = $legend[$note];\n\
    \  }\n  return $result;\n}\n\nvar_dump(parse_music('o o| .| o| o| .| .| .| .|\
    \ o o'));\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "array(11) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(2)\n  [2]=>\n  int(1)\n\
    \  [3]=>\n  int(2)\n  [4]=>\n  int(2)\n  [5]=>\n  int(1)\n  [6]=>\n  int(1)\n\
    \  [7]=>\n  int(1)\n  [8]=>\n  int(1)\n  [9]=>\n  int(4)\n  [10]=>\n  int(4)\n\
    }\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcow01m6b.php:32\n\
    Stack trace:\n#0 /tmp/tmpcow01m6b.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpcow01m6b.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\t// Complete the function.\n\t$length = strlen($music_string);\n\
    \t$music_array = array();\n\t$i = 0;\n\twhile ($i <= $length) {\n\t\tswitch ($music_string[$i])\
    \ {\n\t\t\tcase 'o':\n\t\t\t\t$music_array[] = 4;\n\t\t\t\tbreak;\n\t\t\tcase\
    \ '.':\n\t\t\t\t$music_array[] = 1;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t\
    break;\n\t\t}\n\t\t$i++;\n\t}\n\treturn $music_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphunsjnk6.php:40\n\
    Stack trace:\n#0 /tmp/tmphunsjnk6.php(44): test()\n#1 {main}\n  thrown in /tmp/tmphunsjnk6.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music = [];\n    $music_arr = explode(' ',\
    \ $music_string);\n    foreach ($music_arr as $value) {\n        if ($value ===\
    \ 'o') {\n            $music[] = 4;\n        } else if ($value === 'o|') {\n \
    \           $music[] = 2;\n        } else if ($value === '.|') {\n           \
    \ $music[] = 1;\n        }\n    }\n    return $music;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    foreach ($notes as $note) {\n        switch ($note) {\n         \
    \   case 'o':\n                $result[] = 4;\n                break;\n      \
    \      case 'o|':\n                $result[] = 2;\n                break;\n  \
    \          case '.|':\n                $result[] = 1;\n                break;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpux1nizb2.php:37\n\
    Stack trace:\n#0 /tmp/tmpux1nizb2.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpux1nizb2.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    // ...\n    $notes = array('o' => 4, 'o|'\
    \ => 2, '.|' => 1);\n    $music_string = str_replace('o|', 'o |', $music_string);\n\
    \    $music_string = str_replace('.|', '. |', $music_string);\n    $music_string\
    \ = str_replace('  ', ' ', $music_string);\n    $music_array = explode(' ', $music_string);\n\
    \    $res = array();\n    foreach ($music_array as $note) {\n        $res[] =\
    \ $notes[$note];\n    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbhm0uagx.php:30\n\
    Stack trace:\n#0 /tmp/tmpbhm0uagx.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpbhm0uagx.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    // write your code here\n    // Hint: explode\
    \ might be useful\n    $result = explode(' ', $music_string);\n    $arr = [];\n\
    \    foreach ($result as $val) {\n        if ($val == 'o') {\n            $arr[]\
    \ = 4;\n        } elseif ($val == 'o|') {\n            $arr[] = 2;\n        }\
    \ elseif ($val == '.|') {\n            $arr[] = 1;\n        }\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $str_len = strlen($music_string);\n    $music_arr\
    \ = str_split($music_string);\n    $result = [];\n    for ($i = 0; $i < $str_len;\
    \ $i++) {\n        if ($music_arr[$i] == 'o') {\n            if ($music_arr[$i\
    \ + 1] == ' ') {\n                $result[] = 4;\n            } else {\n     \
    \           $result[] = 2;\n                $i++;\n            }\n        } else\
    \ {\n            $result[] = 1;\n            $i++;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvs7vqic4.php:37\n\
    Stack trace:\n#0 /tmp/tmpvs7vqic4.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpvs7vqic4.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $arr = str_split($music_string);\n    $notes\
    \ = [\n        'o' => 4,\n        '.' => 1,\n        '|' => 0\n    ];\n    $res\
    \ = [];\n    $i = 0;\n    $tmp = 0;\n    $prev = 0;\n    foreach ($arr as $k =>\
    \ $v) {\n        if ($v == 'o') {\n            $res[] = $notes[$v];\n        \
    \    $prev = $v;\n        } elseif ($v == '.') {\n            $res[] = $notes[$v];\n\
    \            $prev = $v;\n        } elseif ($v == '|') {\n            if ($prev\
    \ == 'o') {\n                $tmp = 2;\n            } elseif ($prev == '.') {\n\
    \                $tmp = 1;\n            }\n            $res[] = $tmp;\n      \
    \      $prev = $v;\n        }\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_zfnx67w.php:49\n\
    Stack trace:\n#0 /tmp/tmp_zfnx67w.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp_zfnx67w.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $mArray = str_split($music_string);\n    $musicArr\
    \ = [];\n    $i = 0;\n    $g = count($mArray);\n    while ($i < $g) {\n      \
    \  if ($mArray[$i] == 'o') {\n            $c = $i + 1;\n            if (isset($mArray[$c])\
    \ && $mArray[$c] == '|') {\n                $musicArr[] = 2;\n               \
    \ $i++;\n            } else {\n                $musicArr[] = 4;\n            }\n\
    \        } else if ($mArray[$i] == '.') {\n            $c = $i + 1;\n        \
    \    if (isset($mArray[$c]) && $mArray[$c] == '|') {\n                $musicArr[]\
    \ = 1;\n                $i++;\n            }\n        }\n        $i++;\n    }\n\
    \    return $musicArr;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $beat_sum = 0;\n    $output = array();\n \
    \   $music_array = str_split($music_string);\n    foreach ($music_array as $key\
    \ => $character) {\n        if ($character == 'o') {\n            $beat_sum +=\
    \ 4;\n            $output[] = 4;\n        } elseif ($character == '|') {\n   \
    \         $beat_sum += 2;\n            $output[] = 2;\n        } elseif ($character\
    \ == '.') {\n            $beat_sum += 1;\n            $output[] = 1;\n       \
    \ }\n    }\n    return $output;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9jo8t_zj.php:37\n\
    Stack trace:\n#0 /tmp/tmp9jo8t_zj.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp9jo8t_zj.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\t$music_string = str_replace('|', ' ', $music_string);\n\
    \t$music_string = str_replace('o', '4 ', $music_string);\n\t$music_string = str_replace('.',\
    \ '1 ', $music_string);\n\t$music_string = explode(' ', $music_string);\n\t$music_string\
    \ = array_filter($music_string);\n\treturn $music_string;\n}\n\n$music_string\
    \ = 'o o| .| o| o| .| .| .| .| o o';\necho '<pre>' . print_r(parse_music($music_string),\
    \ true) . '</pre>';\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 4\n    [2] => 4\n    [5] => 1\n    [8] => 4\n\
    \    [11] => 4\n    [14] => 1\n    [17] => 1\n    [20] => 1\n    [23] => 1\n \
    \   [26] => 4\n    [28] => 4\n)\n</pre>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpvju2j3lz.php:29\nStack trace:\n#0 /tmp/tmpvju2j3lz.php(35):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvju2j3lz.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  $note_map = array('o' => 4, 'o|' => 2, '.|'\
    \ => 1);\n  $result = array();\n  foreach (explode(' ', $music_string) as $note)\
    \ {\n    if (array_key_exists($note, $note_map)) {\n      $result[] = $note_map[$note];\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $mapping = [\n        'o' => 4,\n        'o|'\
    \ => 2,\n        '.|' => 1\n    ];\n    $notes = explode(' ', $music_string);\n\
    \    return array_map(function($note) use ($mapping) {\n        return $mapping[$note];\n\
    \    }, $notes);\n}\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3zx7ag_h.php:27\n\
    Stack trace:\n#0 /tmp/tmp3zx7ag_h.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp3zx7ag_h.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\t$result = [];\n\t$string_parts = explode(' ',\
    \ $music_string);\n\tforeach ($string_parts as $string_part) {\n\t\t$part_length\
    \ = strlen($string_part);\n\t\tif ($part_length == 1) {\n\t\t\t$result[] = 4;\n\
    \t\t} elseif ($part_length == 2) {\n\t\t\t$result[] = 2;\n\t\t} else {\n\t\t\t\
    $result[] = 1;\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdybf43ct.php:32\n\
    Stack trace:\n#0 /tmp/tmpdybf43ct.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpdybf43ct.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $beats[] = 4;\n        } elseif ($note == 'o' && $note[1] == '|') {\n \
    \           $beats[] = 2;\n        } elseif ($note == '.' && $note[1] == '|')\
    \ {\n            $beats[] = 1;\n        }\n    }\n    return $beats;\n}\n\nvar_dump(parse_music('o\
    \ o| .| o| o| .| .| .| .| o o'));\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "array(6) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(4)\n  [2]=>\n  int(4)\n \
    \ [3]=>\n  int(4)\n  [4]=>\n  int(4)\n  [5]=>\n  int(4)\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp60l2ni13.php:34\nStack trace:\n#0 /tmp/tmp60l2ni13.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp60l2ni13.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_arr = preg_split('/(?<!^)(?!$)/u',\
    \ $music_string);\n    $parsed_music = [];\n    $notes = array_unique($music_arr);\n\
    \    $notes_beat = [];\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $notes_beat[$note] = 4;\n        } elseif ($note == 'o|')\
    \ {\n            $notes_beat[$note] = 2;\n        } elseif ($note == '.|') {\n\
    \            $notes_beat[$note] = 1;\n        }\n    }\n    foreach ($music_arr\
    \ as $value) {\n        $parsed_music[] = $notes_beat[$value];\n    }\n    return\
    \ $parsed_music;\n}\nvar_dump(parse_music('o o| .| o| o| .| .| .| .| o o'));\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(29) {\n  [0]=>\n  int(4)\n  [1]=>\n  NULL\n  [2]=>\n  int(4)\n  [3]=>\n\
    \  NULL\n  [4]=>\n  NULL\n  [5]=>\n  NULL\n  [6]=>\n  NULL\n  [7]=>\n  NULL\n\
    \  [8]=>\n  int(4)\n  [9]=>\n  NULL\n  [10]=>\n  NULL\n  [11]=>\n  int(4)\n  [12]=>\n\
    \  NULL\n  [13]=>\n  NULL\n  [14]=>\n  NULL\n  [15]=>\n  NULL\n  [16]=>\n  NULL\n\
    \  [17]=>\n  NULL\n  [18]=>\n  NULL\n  [19]=>\n  NULL\n  [20]=>\n  NULL\n  [21]=>\n\
    \  NULL\n  [22]=>\n  NULL\n  [23]=>\n  NULL\n  [24]=>\n  NULL\n  [25]=>\n  NULL\n\
    \  [26]=>\n  int(4)\n  [27]=>\n  NULL\n  [28]=>\n  int(4)\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp6ytt9h2c.php:36\nStack trace:\n#0 /tmp/tmp6ytt9h2c.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp6ytt9h2c.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $parse_array = [];\n    $music_array = str_split($music_string);\n\
    \    foreach ($music_array as $value) {\n        if ($value == 'o') {\n      \
    \      $parse_array[] = 4;\n        } elseif ($value == 'o|') {\n            $parse_array[]\
    \ = 2;\n        } elseif ($value == '.|') {\n            $parse_array[] = 1;\n\
    \        }\n    }\n    return $parse_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprnq9sh8o.php:33\n\
    Stack trace:\n#0 /tmp/tmprnq9sh8o.php(38): test()\n#1 {main}\n  thrown in /tmp/tmprnq9sh8o.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $parse_table = [\n        'o' => 4,\n    \
    \    'o|' => 2,\n        '.|' => 1\n    ];\n    $result = [];\n    $notes = explode('\
    \ ', $music_string);\n    foreach ($notes as $note) {\n        $result[] = $parse_table[$note];\n\
    \    }\n    return $result;\n}\nprint_r(parse_music('o o| .| o| o| .| .| .| .|\
    \ o o'));\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 1\n    [3] => 2\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n    [9] => 4\n\
    \    [10] => 4\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaxb1w_t2.php:30\n\
    Stack trace:\n#0 /tmp/tmpaxb1w_t2.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpaxb1w_t2.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\t\n\t$notes = str_split($music_string);\n\t$parsed\
    \ = array();\n\t$previous = 0;\n\t\n\tforeach($notes as $note) {\n\t\t\n\t\tif($note\
    \ == 'o') {\n\t\t\t$previous = 4;\n\t\t} elseif($note == '.') {\n\t\t\t$previous\
    \ = 1;\n\t\t} elseif($note == '|') {\n\t\t\tif($previous == 4) {\n\t\t\t\t$previous\
    \ = 2;\n\t\t\t} elseif($previous == 1) {\n\t\t\t\t$previous = 2;\n\t\t\t}\n\t\t\
    }\n\t\t\n\t\t$parsed[] = $previous;\n\t}\n\t\n\treturn $parsed;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe2y1ax30.php:42\n\
    Stack trace:\n#0 /tmp/tmpe2y1ax30.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpe2y1ax30.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  $result = [];\n  $arr = str_split($music_string);\n\
    \  $str = '';\n  foreach ($arr as $key => $value) {\n    if ($value == ' ') {\n\
    \      if ($str == 'o') {\n        $result[] = 4;\n      } elseif ($str == 'o|')\
    \ {\n        $result[] = 2;\n      } elseif ($str == '.|') {\n        $result[]\
    \ = 1;\n      }\n      $str = '';\n    } else {\n      $str .= $value;\n    }\n\
    \  }\n  if ($str == 'o') {\n    $result[] = 4;\n  } elseif ($str == 'o|') {\n\
    \    $result[] = 2;\n  } elseif ($str == '.|') {\n    $result[] = 1;\n  }\n  return\
    \ $result;\n}\n\nprint_r(parse_music('o o| .| o| o| .| .| .| .| o o'));\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 1\n    [3] => 2\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n    [9] => 4\n\
    \    [10] => 4\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  $beats = ['o' => 4, 'o|' => 2, '.|' => 1];\n\
    \  $beat_sequence = [];\n  $pattern = '/o+|o\\|+|\\.\\|+/';\n  $tokens = preg_split($pattern,\
    \ $music_string, -1, PREG_SPLIT_DELIM_CAPTURE);\n  foreach ($tokens as $token)\
    \ {\n    if (isset($beats[$token])) {\n      $beat_sequence[] = $beats[$token];\n\
    \    }\n  }\n  return $beat_sequence;\n}\n$file_handle = fopen(\"php://stdin\"\
    , \"r\");\nwhile (!feof($file_handle)) {\n  echo implode(', ', parse_music(trim(fgets($file_handle))))\
    \ . \"\\n\";\n}\nfclose($file_handle);\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqmdffa8r.php:34\n\
    Stack trace:\n#0 /tmp/tmpqmdffa8r.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpqmdffa8r.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $current_note = '';\n    $i = 0;\n    foreach ($notes as $note) {\n\
    \        if ($note === 'o') {\n            $result[$i] = 4;\n            $i++;\n\
    \        } else if ($note === 'o' || $note === '.') {\n            $current_note\
    \ .= $note;\n        } else if ($note === '|') {\n            $result[$i] = strlen($current_note)\
    \ === 1 ? 2 : 1;\n            $i++;\n            $current_note = '';\n       \
    \ }\n    }\n    return $result;\n}\necho '<pre>';\nprint_r(parse_music('o o| .|\
    \ o| o| .| .| .| .| o o'));\necho '</pre>';\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 4\n    [1] => 4\n    [2] => 1\n    [3] => 2\n\
    \    [4] => 4\n    [5] => 1\n    [6] => 4\n    [7] => 1\n    [8] => 2\n    [9]\
    \ => 2\n    [10] => 2\n    [11] => 2\n    [12] => 4\n    [13] => 4\n)\n</pre>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpjnxo7a5s.php:40\nStack\
    \ trace:\n#0 /tmp/tmpjnxo7a5s.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjnxo7a5s.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n}\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaofy_gkl.php:18\n\
    Stack trace:\n#0 /tmp/tmpaofy_gkl.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpaofy_gkl.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = array('o' => 4, 'o|' => 2, '.|' =>\
    \ 1);\n    $result = array();\n    foreach (str_split($music_string) as $key =>\
    \ $value) {\n        if ($value == ' ') continue;\n        if ($value == 'o')\
    \ {\n            $result[] = $notes[$value];\n            continue;\n        }\n\
    \        $result[] = $notes[$value . $music_string[$key + 1]];\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7nnq0dgq.php:30\n\
    Stack trace:\n#0 /tmp/tmp7nnq0dgq.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp7nnq0dgq.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ro81vpq.php:20\n\
    Stack trace:\n#0 /tmp/tmp4ro81vpq.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp4ro81vpq.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $result = array();\n    $music_notes = explode('\
    \ ', $music_string);\n    foreach ($music_notes as $music_note) {\n        switch\
    \ ($music_note) {\n            case 'o':\n                $result[] = 4;\n   \
    \             break;\n            case 'o|':\n                $result[] = 2;\n\
    \                break;\n            case '.|':\n                $result[] = 1;\n\
    \                break;\n        }\n    }\n    return $result;\n}\n\necho json_encode(parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')) . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "[4,2,1,2,2,1,1,1,1,4,4]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\t// We will first extract only o and o|, as other\
    \ characters are not part of notes.\n\t// We will then split them into array\n\
    \t$arr = preg_split('/[^o|o]/', $music_string);\n\t// We will then loop through\
    \ each element of the array and replace o with 4 and o| with 2\n\tfor ($i = 0;\
    \ $i < count($arr); $i++) {\n\t\tif ($arr[$i] == 'o') {\n\t\t\t$arr[$i] = 4;\n\
    \t\t} elseif ($arr[$i] == 'o|') {\n\t\t\t$arr[$i] = 2;\n\t\t}\n\t}\n\t// We will\
    \ then remove empty array elements\n\tforeach ($arr as $key => $value) {\n\t\t\
    if ($value == '') {\n\t\t\tunset($arr[$key]);\n\t\t}\n\t}\n\t// We will then return\
    \ the array\n\treturn $arr;\n}\n\n$test = 'o o| .| o| o| .| .| .| .| o o';\nprint_r(parse_music($test));\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 4\n    [1] => 2\n    [3] => |\n    [4] => 2\n    [5]\
    \ => 2\n    [7] => |\n    [9] => |\n    [11] => |\n    [13] => |\n    [14] =>\
    \ 4\n    [15] => 4\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy6nssn7b.php:42\n\
    Stack trace:\n#0 /tmp/tmpy6nssn7b.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpy6nssn7b.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    return $music_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_4h1tct.php:20\n\
    Stack trace:\n#0 /tmp/tmp6_4h1tct.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp6_4h1tct.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes_mas = str_split($music_string);\n \
    \   $count = 0;\n    foreach ($notes_mas as $index => $value) {\n        if ($index\
    \ == 0) {\n            $ar[] = 1;\n            $count++;\n        } else {\n \
    \           if ($value == '|') {\n                $ar[] = 1;\n               \
    \ $count++;\n            } elseif ($value == ' ') {\n                $ar[] = $count;\n\
    \                $count = 0;\n            } else {\n                $count++;\n\
    \            }\n        }\n    }\n    $ar[] = $count;\n    return $ar;\n}\nprint_r(parse_music('o\
    \ o| .| o| o| .| .| .| .| o o'));\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 1\n    [2] => 1\n    [3] => 2\n    [4]\
    \ => 1\n    [5] => 2\n    [6] => 1\n    [7] => 2\n    [8] => 1\n    [9] => 2\n\
    \    [10] => 1\n    [11] => 2\n    [12] => 1\n    [13] => 2\n    [14] => 1\n \
    \   [15] => 2\n    [16] => 1\n    [17] => 2\n    [18] => 1\n    [19] => 1\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmprongz0mn.php:39\nStack\
    \ trace:\n#0 /tmp/tmprongz0mn.php(46): test()\n#1 {main}\n  thrown in /tmp/tmprongz0mn.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  $whole_note = 'o';\n  $half_note = 'o|';\n \
    \ $quarter_note = '.|';\n  $whole_note_duration = 4;\n  $half_note_duration =\
    \ 2;\n  $quarter_note_duration = 1;\n  $notes = explode(' ', $music_string);\n\
    \  $result = [];\n  foreach ($notes as $note) {\n    if ($note === $whole_note)\
    \ {\n      $result[] = $whole_note_duration;\n    } elseif ($note === $half_note)\
    \ {\n      $result[] = $half_note_duration;\n    } elseif ($note === $quarter_note)\
    \ {\n      $result[] = $quarter_note_duration;\n    }\n  }\n  return $result;\n\
    }\n\necho '<pre>';\nprint_r(parse_music('o o| .| o| o| .| .| .| .| o o'));\necho\
    \ '</pre>';\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 1\n    [3] => 2\n\
    \    [4] => 2\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n    [9]\
    \ => 4\n    [10] => 4\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $result = [];\n    $music_array = str_split($music_string);\n\
    \    $flag = 0;\n    $count = 0;\n    foreach ($music_array as $key => $value)\
    \ {\n        if ($value == ' ' || $key == count($music_array) - 1) {\n       \
    \     $result[] = $count;\n            $count = 0;\n        } else {\n       \
    \     $count++;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplfmf2d40.php:32\n\
    Stack trace:\n#0 /tmp/tmplfmf2d40.php(39): test()\n#1 {main}\n  thrown in /tmp/tmplfmf2d40.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  $music_string = str_replace('o|', '.', $music_string);\n\
    \  $arr_music = explode(' ', $music_string);\n  foreach ($arr_music as $key =>\
    \ $value) {\n    $arr_music[$key] = strlen($value);\n  }\n  return $arr_music;\n\
    }\n\nvar_dump(parse_music('o o| .| o| o| .| .| .| .| o o'));\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "array(11) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(1)\n  [2]=>\n  int(2)\n\
    \  [3]=>\n  int(1)\n  [4]=>\n  int(1)\n  [5]=>\n  int(2)\n  [6]=>\n  int(2)\n\
    \  [7]=>\n  int(2)\n  [8]=>\n  int(2)\n  [9]=>\n  int(1)\n  [10]=>\n  int(1)\n\
    }\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvcl7u40u.php:26\n\
    Stack trace:\n#0 /tmp/tmpvcl7u40u.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpvcl7u40u.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $beats = array();\n    $notes = explode('\
    \ ', $music_string);\n    foreach ($notes as $note) {\n        switch ($note)\
    \ {\n            case 'o':\n                $beats[] = 4;\n                break;\n\
    \            case 'o|':\n                $beats[] = 2;\n                break;\n\
    \            case '.|':\n                $beats[] = 1;\n                break;\n\
    \        }\n    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n \
    \   return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $result = [];\n    $notes = str_split($music_string);\n\
    \    $current_note = \"\";\n    foreach ($notes as $note) {\n        if ($note\
    \ === \" \") {\n            switch ($current_note) {\n                case \"\
    o\":\n                    $result[] = 4;\n                    break;\n       \
    \         case \"o|\":\n                    $result[] = 2;\n                 \
    \   break;\n                case \".|\":\n                    $result[] = 1;\n\
    \                    break;\n            }\n            $current_note = \"\";\n\
    \        } else {\n            $current_note .= $note;\n        }\n    }\n   \
    \ switch ($current_note) {\n        case \"o\":\n            $result[] = 4;\n\
    \            break;\n        case \"o|\":\n            $result[] = 2;\n      \
    \      break;\n        case \".|\":\n            $result[] = 1;\n            break;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music = explode(' ', $music_string);\n  \
    \  $notes = [\n        'o' => 4,\n        'o|' => 2,\n        '.|' => 1\n    ];\n\
    \    $beats = [];\n    foreach ($music as $note) {\n        $beats[] = $notes[$note];\n\
    \    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnw0rqwq0.php:30\n\
    Stack trace:\n#0 /tmp/tmpnw0rqwq0.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpnw0rqwq0.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $values = array('o' => 4, '.|' => 1, 'o|'\
    \ => 2);\n    $result = array();\n    $notes = explode(' ', $music_string);\n\
    \    foreach ($notes as $note) {\n        if (array_key_exists($note, $values))\
    \ {\n            $result[] = $values[$note];\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $scales = array('o' => 4, 'o|' => 2, '.|'\
    \ => 1);\n    $notes = array();\n    $pieces = explode(' ', $music_string);\n\
    \    foreach ($pieces as $piece) {\n        if (isset($scales[$piece])) {\n  \
    \          $notes[] = $scales[$piece];\n        }\n    }\n    return $notes;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $beats = [\n        'o' => 4,\n        'o|'\
    \ => 2,\n        '.|' => 1\n    ];\n    $notes = explode(' ', $music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        $result[] = $beats[$note];\n\
    \    }\n    return $result;\n}\n\nassert_options(ASSERT_BAIL, 1);\nassert(implode('',\
    \ parse_music('o o| .| o| o| .| .| .| .| o o')) === '42211111');\necho 'OK';\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert(implode('', parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')) === '42211111') failed in /tmp/tmpwzq1tkda.php on line 26\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $count = 0;\n    $symbols = explode(' ', $music_string);\n\
    \    $split_symbols = [];\n    foreach ($symbols as $symbol) {\n        $split_symbols[]\
    \ = str_split($symbol);\n    }\n    foreach ($split_symbols as $item) {\n    \
    \    if ($item[0] == 'o') {\n            $count += 4;\n        } elseif ($item[0]\
    \ == '.') {\n            $count += 1;\n        }\n    }\n    return $count;\n\
    }\n\nprint_r(parse_music('o o| .| o| o| .| .| .| .| o o'));\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "29\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdh0gwll2.php:35\n\
    Stack trace:\n#0 /tmp/tmpdh0gwll2.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpdh0gwll2.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  // Your implementation goes here.\n}\n\nprint_r(parse_music('o\
    \ o| .| o| o| .| .| .| .| o o'));\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo6km0py1.php:21\n\
    Stack trace:\n#0 /tmp/tmpo6km0py1.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpo6km0py1.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music = explode(' ', $music_string);\n  \
    \  $result = [];\n    foreach ($music as $note) {\n        $note = str_replace('o',\
    \ '4', $note);\n        $note = str_replace('|', '2', $note);\n        $note =\
    \ str_replace('.', '1', $note);\n        $result[] = (int)$note;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjgyqc37l.php:28\n\
    Stack trace:\n#0 /tmp/tmpjgyqc37l.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpjgyqc37l.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes_array = explode(' ', $music_string);\n\
    \    $beat_array = [];\n    foreach ($notes_array as $note) {\n        if ($note\
    \ === 'o') {\n            $beat_array[] = 4;\n        } else if ($note === 'o|')\
    \ {\n            $beat_array[] = 2;\n        } else if ($note === '.|') {\n  \
    \          $beat_array[] = 1;\n        }\n    }\n    return $beat_array;\n}\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $result = array();\n    $notes = str_split($music_string);\n\
    \    $index = 0;\n    while($index < count($notes)) {\n        if($notes[$index]\
    \ == 'o') {\n            $result[] = 4;\n            $index++;\n        } elseif($notes[$index]\
    \ == '.') {\n            $result[] = 1;\n            $index += 2;\n        }\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    // your code here\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_wfd0gi.php:19\n\
    Stack trace:\n#0 /tmp/tmp5_wfd0gi.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp5_wfd0gi.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $keys = ['o', 'o|', '.|'];\n    $values =\
    \ [4, 2, 1];\n    $key_values = array_combine($keys, $values);\n    $notes = preg_split('/(\\\
    s+)/', $music_string, null, PREG_SPLIT_DELIM_CAPTURE);\n    $result = [];\n  \
    \  foreach ($notes as $note) {\n        if (array_key_exists($note, $key_values))\
    \ {\n            $result[] = $key_values[$note];\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $result = array();\n    $notes = explode('\
    \ ', $music_string);\n    foreach ($notes as $note) {\n        switch ($note)\
    \ {\n            case 'o':\n                $result[] = 4;\n                break;\n\
    \            case 'o|':\n                $result[] = 2;\n                break;\n\
    \            case '.|':\n                $result[] = 1;\n                break;\n\
    \        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  $music_arr = explode(' ', $music_string);\n\
    \  $music_notes = [];\n  foreach ($music_arr as $key => $note) {\n    if ($note\
    \ === 'o') {\n      $music_notes[] = 4;\n    } elseif ($note === 'o|') {\n   \
    \   $music_notes[] = 2;\n    } elseif ($note === '.|') {\n      $music_notes[]\
    \ = 1;\n    }\n  }\n  return $music_notes;\n}\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\t$music_array = explode(' ', $music_string);\n\
    \t$beat_count = [];\n\tfor ($i = 0; $i < count($music_array); $i++) {\n\t\t$bar_count\
    \ = substr_count($music_array[$i], '|');\n\t\t$beat_count[] = 4 - $bar_count;\n\
    \t}\n\treturn $beat_count;\n}\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc_iin6ja.php:25\n\
    Stack trace:\n#0 /tmp/tmpc_iin6ja.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpc_iin6ja.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  $result = array();\n  $arr = str_split($music_string);\n\
    \  foreach ($arr as $key => $val) {\n    switch ($val) {\n      case 'o':\n  \
    \      $result[] = 4;\n        break;\n      case '|':\n        if ($arr[$key-1]\
    \ == 'o') {\n          $result[] = 2;\n        } else {\n          $result[] =\
    \ 1;\n        }\n        break;\n      case '.':\n        break;\n      case '\
    \ ':\n        break;\n      default:\n        echo 'Error';\n        return;\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Error\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0a_w4ubs.php:43\n\
    Stack trace:\n#0 /tmp/tmp0a_w4ubs.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp0a_w4ubs.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv_87i7hm.php:20\n\
    Stack trace:\n#0 /tmp/tmpv_87i7hm.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpv_87i7hm.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $result = [];\n    $beats = str_split($music_string);\n\
    \    $length = count($beats);\n    $i = 0;\n    while ($i < $length) {\n     \
    \   if ($beats[$i] == 'o') {\n            if ($i + 1 < $length && $beats[$i +\
    \ 1] == '|') {\n                $result[] = 2;\n                $i += 2;\n   \
    \         } else {\n                $result[] = 4;\n                $i++;\n  \
    \          }\n        } else {\n            $result[] = 1;\n            $i +=\
    \ 2;\n        }\n    }\n    return $result;\n}\n\nassert_options(ASSERT_BAIL,\
    \ 1);\nassert(parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]);\nassert(parse_music('o o| .| o| o| .| .| .| .| o o') ==\
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\nassert(parse_music('o o| .| o| o| .| .|\
    \ .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\nassert(parse_music('o o|\
    \ .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\nassert(parse_music('o\
    \ o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\nassert(parse_music('o\
    \ o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\nassert(parse_music('o\
    \ o| .| o| o| .| .| .| .| o o') == [4, 2, 1,\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp16fmtcv5.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = explode(' ', $music_string);\n\
    \    $musical_notes = [];\n    foreach ($music_string as $note) {\n        if\
    \ (strlen($note) > 1) {\n            $musical_notes[] = 4;\n        } else {\n\
    \            $musical_notes[] = 2;\n        }\n    }\n    return $musical_notes;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvkjsj4je.php:29\n\
    Stack trace:\n#0 /tmp/tmpvkjsj4je.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpvkjsj4je.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    return '';\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzp6vagyh.php:19\n\
    Stack trace:\n#0 /tmp/tmpzp6vagyh.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpzp6vagyh.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  $music_array = str_split($music_string);\n \
    \ $new_music_array = [];\n  $beats = 0;\n  foreach ($music_array as $m) {\n  \
    \  if ($m == 'o') {\n      if ($beats > 0) {\n        array_push($new_music_array,\
    \ $beats);\n        $beats = 0;\n      }\n      $beats += 4;\n    } elseif ($m\
    \ == '|') {\n      if ($beats > 0) {\n        array_push($new_music_array, $beats);\n\
    \        $beats = 0;\n      }\n      $beats += 2;\n    } elseif ($m == '.') {\n\
    \      if ($beats > 0) {\n        array_push($new_music_array, $beats);\n    \
    \    $beats = 0;\n      }\n      $beats += 1;\n    } elseif ($m == ' ') {\n  \
    \    if ($beats > 0) {\n        array_push($new_music_array, $beats);\n      \
    \  $beats = 0;\n      }\n    }\n  }\n  return $new_music_array;\n}\nprint_r(parse_music('o\
    \ o| .| o| o| .| .| .| .| o o'));\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 4\n    [1] => 4\n    [2] => 2\n    [3] => 1\n    [4]\
    \ => 2\n    [5] => 4\n    [6] => 2\n    [7] => 4\n    [8] => 2\n    [9] => 1\n\
    \    [10] => 2\n    [11] => 1\n    [12] => 2\n    [13] => 1\n    [14] => 2\n \
    \   [15] => 1\n    [16] => 2\n    [17] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp7loi8e5m.php:50\nStack trace:\n#0 /tmp/tmp7loi8e5m.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp7loi8e5m.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\t$result = [];\n\t$music_array = explode(' ',\
    \ $music_string);\n\t\n\tforeach ($music_array as $musical_note) {\n\t\tswitch\
    \ ($musical_note) {\n\t\t\tcase 'o':\n\t\t\t\t$result[] = 4;\n\t\t\t\tbreak;\n\
    \t\t\tcase 'o|':\n\t\t\t\t$result[] = 2;\n\t\t\t\tbreak;\n\t\t\tcase '.|':\n\t\
    \t\t\t$result[] = 1;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn $result;\n}\necho\
    \ \"<pre>\";\nprint_r(parse_music('o o| .| o| o| .| .| .| .| o o'));\necho \"\
    </pre>\";\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 1\n    [3] => 2\n\
    \    [4] => 2\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n    [9]\
    \ => 4\n    [10] => 4\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $beats = [\n        'o' => 4,\n        'o|'\
    \ => 2,\n        '.|' => 1\n    ];\n    $notes = explode(' ', $music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        if ($note == 'o'\
    \ || $note == 'o|' || $note == '.|') {\n            $result[] = $beats[$note];\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    // your solution here\n    $notes = str_split($music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        if ($note == 'o')\
    \ {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n        \
    \    $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4chmyudc.php:34\n\
    Stack trace:\n#0 /tmp/tmp4chmyudc.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp4chmyudc.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = explode(' ', $music_string);\n  \
    \  $r = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') $r[] =\
    \ 4;\n        else if ($note == 'o|') $r[] = 2;\n        else if ($note == '.|')\
    \ $r[] = 1;\n    }\n    return $r;\n}\n\n$string = \"o o| .| o| o| .| .| .| .|\
    \ o o\";\n$result = parse_music($string);\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 1\n    [3] => 2\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n    [9] => 4\n\
    \    [10] => 4\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_array = explode(' ', $music_string);\n\
    \    $result = [];\n    foreach ($music_array as $item) {\n        if ($item ==\
    \ 'o') {\n            $result[] = 4;\n        } elseif ($item == 'o|') {\n   \
    \         $result[] = 2;\n        } elseif ($item == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = preg_replace('/\\s+/', '',\
    \ $music_string);\n    $parts = preg_split('/(\\||o)/', $music_string, 0, PREG_SPLIT_DELIM_CAPTURE);\n\
    \    $lengths = [];\n    $current_length = 0;\n    foreach ($parts as $key =>\
    \ $value) {\n        if ($value == 'o') {\n            $current_length = 4;\n\
    \        } elseif ($value == '|') {\n            $current_length /= 2;\n     \
    \   } elseif ($value == '.') {\n            $lengths[] = $current_length;\n  \
    \      }\n    }\n    return $lengths;\n}\n\nprint_r(parse_music('o o| .| o| o|\
    \ .| .| .| .| o o'));\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 1\n    [3] => 0.5\n  \
    \  [4] => 0.25\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphy6fpuvc.php:35\n\
    Stack trace:\n#0 /tmp/tmphy6fpuvc.php(41): test()\n#1 {main}\n  thrown in /tmp/tmphy6fpuvc.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $result = [];\n    $note_time = array(\n \
    \       'o' => 4,\n        'o|' => 2,\n        '.|' => 1\n    );\n    $notes =\
    \ explode(' ', $music_string);\n    foreach ($notes as $note) {\n        $result[]\
    \ = $note_time[$note];\n    }\n    return $result;\n}\n\necho '<h3>Task 2</h3>';\n\
    echo '<pre>parse_music(\"o o| .| o| o| .| .| .| .| o o\")<br><br>';\nvar_dump(parse_music('o\
    \ o| .| o| o| .| .| .| .| o o'));\necho '</pre>';\necho '<hr>';\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<h3>Task 2</h3><pre>parse_music(\"o o| .| o| o| .| .| .| .| o o\")<br><br>array(11)\
    \ {\n  [0]=>\n  int(4)\n  [1]=>\n  int(2)\n  [2]=>\n  int(1)\n  [3]=>\n  int(2)\n\
    \  [4]=>\n  int(2)\n  [5]=>\n  int(1)\n  [6]=>\n  int(1)\n  [7]=>\n  int(1)\n\
    \  [8]=>\n  int(1)\n  [9]=>\n  int(4)\n  [10]=>\n  int(4)\n}\n</pre><hr>\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp24wdlxre.php:35\nStack trace:\n\
    #0 /tmp/tmp24wdlxre.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp24wdlxre.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $note_lengths\
    \ = [];\n    $current_note = '';\n    foreach ($notes as $note) {\n        if\
    \ ($note === '|') {\n            if ($current_note === 'o') {\n              \
    \  $note_lengths[] = 2;\n            } elseif ($current_note === '.') {\n    \
    \            $note_lengths[] = 1;\n            }\n            $current_note =\
    \ '';\n        } else {\n            $current_note = $note;\n        }\n    }\n\
    \    return $note_lengths;\n}\nprint_r(parse_music('o o| .| o| o| .| .| .| .|\
    \ o o'));\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n    [2] => 2\n    [3] => 2\n    [4]\
    \ => 1\n    [5] => 1\n    [6] => 1\n    [7] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp9dalqtzl.php:36\nStack trace:\n#0 /tmp/tmp9dalqtzl.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp9dalqtzl.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    // your code goes here\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjveg7jt3.php:19\n\
    Stack trace:\n#0 /tmp/tmpjveg7jt3.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpjveg7jt3.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  $music = str_split($music_string);\n  $parsed_music\
    \ = [];\n  $counter = 0;\n  foreach ($music as $key => $value) {\n    if ($value\
    \ === 'o') {\n      $parsed_music[$counter] = 4;\n      $counter++;\n    } elseif\
    \ ($value === '.') {\n      $parsed_music[$counter] = 1;\n      $counter++;\n\
    \    } elseif ($value === '|') {\n      $parsed_music[$counter] += $parsed_music[$counter\
    \ - 1];\n      unset($parsed_music[$counter - 1]);\n    }\n  }\n  return $parsed_music;\n\
    }\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1umbw7yu.php:36\n\
    Stack trace:\n#0 /tmp/tmp1umbw7yu.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp1umbw7yu.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    // TODO: Write your code here.\n    $beatLengths\
    \ = [];\n    $beat = 1;\n    $music_string = preg_replace(\"/(o)(o)/\", '${1}|${2}',\
    \ $music_string);\n    $music_string = preg_replace(\"/(o)(o)/\", '${1}|${2}',\
    \ $music_string);\n    $music_string = preg_replace(\"/(o)(o)/\", '${1}|${2}',\
    \ $music_string);\n    $music_string = preg_replace(\"/(o)(o)/\", '${1}|${2}',\
    \ $music_string);\n    $music_string = preg_replace(\"/(o)(o)/\", '${1}|${2}',\
    \ $music_string);\n    $music_string = preg_replace(\"/(o)(o)/\", '${1}|${2}',\
    \ $music_string);\n    $music_string = preg_replace(\"/(o)(o)/\", '${1}|${2}',\
    \ $music_string);\n    $music_string = preg_replace(\"/(o)(o)/\", '${1}|${2}',\
    \ $music_string);\n    $music_string = preg_replace(\"/(o)(o)/\", '${1}|${2}',\
    \ $music_string);\n    $music_string = preg_replace(\"/(o)(o)/\", '${1}|${2}',\
    \ $music_string);\n    $music_string = preg_replace(\"/(o)(o)/\", '${1}|${2}',\
    \ $music_string);\n    $music_string = preg_replace(\"/(o)(o)/\", '${1}|${2}',\
    \ $music_string);\n    $music_string = preg_replace(\"/(o)(o)/\", '${1}|${2}',\
    \ $music_string);\n    $music_string = preg_replace(\"/(o)(o)/\", '${1}|${2}',\
    \ $music_string);\n    $music_string = preg_replace(\"/(o)(o)/\", '${1}|${2}',\
    \ $music_string);\n    $music_string\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdn_8emh2.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_array = explode(' ', $music_string);\n\
    \    $result = [];\n    foreach ($music_array as $note) {\n        $result[] =\
    \ strlen($note);\n    }\n    return $result;\n}\n\nprint_r(parse_music('o o| .|\
    \ o| o| .| .| .| .| o o'));\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 2\n    [3] => 2\n    [4]\
    \ => 2\n    [5] => 2\n    [6] => 2\n    [7] => 2\n    [8] => 2\n    [9] => 1\n\
    \    [10] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqj1m2b_2.php:26\n\
    Stack trace:\n#0 /tmp/tmpqj1m2b_2.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpqj1m2b_2.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $result = array();\n    $notes = explode('\
    \ ', $music_string);\n    foreach ($notes as $note) {\n        switch($note) {\n\
    \            case 'o':\n                $result[] = 4;\n                break;\n\
    \            case 'o|':\n                $result[] = 2;\n                break;\n\
    \            case '.|':\n                $result[] = 1;\n                break;\n\
    \        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = explode(' ', $music_string);\n  \
    \  $len = count($notes);\n    $result = [];\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        if ($notes[$i] == 'o') {\n            $result[] = 4;\n        } else\
    \ if ($notes[$i] == 'o|') {\n            $result[] = 2;\n        } else if ($notes[$i]\
    \ == '.|') {\n            $result[] = 1;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $beats = [4, 2, 1];\n    $expected_note =\
    \ \"o\";\n    $notes = str_split($music_string);\n    $time = [];\n    foreach\
    \ ($notes as $note) {\n        if ($note == \"o\") {\n            if ($expected_note\
    \ == \"o\") {\n                $time[] = 4;\n            } else {\n          \
    \      $time[] = $beats[$expected_note - 1];\n                $expected_note =\
    \ \"o\";\n            }\n        } elseif ($note == \"|\") {\n            if ($expected_note\
    \ == \"o\") {\n                $expected_note = 2;\n            } else {\n   \
    \             $time[] = $beats[$expected_note - 1];\n                $expected_note\
    \ = 2;\n            }\n        } elseif ($note == \".\") {\n            if ($expected_note\
    \ == \"o\") {\n                $expected_note = 3;\n            } else {\n   \
    \             $time[] = $beats[$expected_note - 1];\n                $expected_note\
    \ = 3;\n            }\n        }\n    }\n    return $time;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwu5phbzm.php:49\n\
    Stack trace:\n#0 /tmp/tmpwu5phbzm.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpwu5phbzm.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $output = [];\n    $music_string = str_replace('\
    \ o', ' o ', $music_string);\n    $music_string = str_replace('o|', 'o| ', $music_string);\n\
    \    $music_string = str_replace('.|', '.| ', $music_string);\n    $music_array\
    \ = explode(' ', $music_string);\n    foreach ($music_array as $note) {\n    \
    \    switch ($note) {\n            case 'o':\n                $output[] = 4;\n\
    \                break;\n            case 'o|':\n                $output[] = 2;\n\
    \                break;\n            case '.|':\n                $output[] = 1;\n\
    \                break;\n        }\n    }\n    return $output;\n}\n\necho \"<pre>\"\
    ;\nprint_r(parse_music('o o| .| o| o| .| .| .| .| o o'));\necho \"</pre>\";\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 4\n    [1] => 4\n    [2] => 1\n    [3] => 4\n\
    \    [4] => 4\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n    [9]\
    \ => 4\n    [10] => 4\n)\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpw5na5k9w.php:44\nStack trace:\n#0 /tmp/tmpw5na5k9w.php(48): test()\n\
    #1 {main}\n  thrown in /tmp/tmpw5na5k9w.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\t$notes = explode(' ', $music_string);\n\t$output\
    \ = [];\n\tforeach ($notes as $note) {\n\t\tif ($note == 'o') {\n\t\t\t$output[]\
    \ = 4;\n\t\t} elseif ($note == 'o|') {\n\t\t\t$output[] = 2;\n\t\t} elseif ($note\
    \ == '.|') {\n\t\t\t$output[] = 1;\n\t\t}\n\t}\n\treturn $output;\n}\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\t$arr = str_split($music_string);\n\t$i = 0;\n\
    \t$cnt = 0;\n\t$result = [];\n\twhile($i < count($arr)) {\n\t\tif ($arr[$i] ==\
    \ 'o') {\n\t\t\tif ($i < count($arr) - 1 && $arr[$i + 1] == '|') {\n\t\t\t\t$result[]\
    \ = 2;\n\t\t\t\t$i++;\n\t\t\t} else {\n\t\t\t\t$result[] = 4;\n\t\t\t}\n\t\t}\
    \ else if ($arr[$i] == '.') {\n\t\t\tif ($i < count($arr) - 1 && $arr[$i + 1]\
    \ == '|') {\n\t\t\t\t$result[] = 1;\n\t\t\t\t$i++;\n\t\t\t}\n\t\t}\n\t\t$i++;\n\
    \t}\n\treturn $result;\n}\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace(' ', '', $music_string);\n\
    \    $arr = preg_split('//', $music_string, -1, PREG_SPLIT_NO_EMPTY);\n    $beats\
    \ = 0;\n    $i = 0;\n    $answer = [];\n    while ($i < count($arr)) {\n     \
    \   if ($arr[$i] == 'o') {\n            $beats += 4;\n            if ($arr[$i\
    \ + 1] == '|') {\n                $beats += 2;\n                $i++;\n      \
    \      }\n        } elseif ($arr[$i] == '.') {\n            $beats += 1;\n   \
    \         if ($arr[$i + 1] == '|') {\n                $beats += 1;\n         \
    \       $i++;\n            }\n        }\n        $answer[] = $beats;\n       \
    \ $beats = 0;\n        $i++;\n    }\n    return $answer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps1qdol5p.php:45\n\
    Stack trace:\n#0 /tmp/tmps1qdol5p.php(50): test()\n#1 {main}\n  thrown in /tmp/tmps1qdol5p.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_array = str_split($music_string);\n\
    \    $notelist = array();\n    foreach ($music_array as $note) {\n        if ($note\
    \ == 'o') {\n            $notelist[] = 4;\n        } elseif ($note == '.') {\n\
    \            $notelist[] = 1;\n        } elseif ($note == '|') {\n           \
    \ $notelist[] = 2;\n        }\n    }\n    return $notelist;\n}\n$music_string\
    \ = 'o o| .| o| o| .| .| .| .| o o';\n$result = parse_music($music_string);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 4\n    [1] => 4\n    [2] => 2\n    [3] => 1\n    [4]\
    \ => 2\n    [5] => 4\n    [6] => 2\n    [7] => 4\n    [8] => 2\n    [9] => 1\n\
    \    [10] => 2\n    [11] => 1\n    [12] => 2\n    [13] => 1\n    [14] => 2\n \
    \   [15] => 1\n    [16] => 2\n    [17] => 4\n    [18] => 4\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpce1xa6w8.php:35\nStack trace:\n\
    #0 /tmp/tmpce1xa6w8.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpce1xa6w8.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  $notes = [\n    'o' => 4,\n    'o|' => 2,\n\
    \    '.|' => 1\n  ];\n  $music_string = str_replace(' ', '', $music_string);\n\
    \  $length = strlen($music_string);\n  $result = [];\n  for ($i = 0; $i < $length;\
    \ $i++) {\n    if ($music_string[$i] === 'o') {\n      if ($music_string[$i +\
    \ 1] === '|') {\n        $result[] = $notes['o|'];\n        $i++;\n      } else\
    \ {\n        $result[] = $notes['o'];\n      }\n    } else {\n      $result[]\
    \ = $notes['.|'];\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8u7r1ytz.php:42\n\
    Stack trace:\n#0 /tmp/tmp8u7r1ytz.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp8u7r1ytz.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  $notes = str_split($music_string);\n  $beat_lengths\
    \ = [];\n  foreach ($notes as $note) {\n    switch ($note) {\n      case 'o':\n\
    \        $beat_lengths[] = 4;\n        break;\n      case 'o|':\n        $beat_lengths[]\
    \ = 2;\n        break;\n      case '.|':\n        $beat_lengths[] = 1;\n     \
    \   break;\n    }\n  }\n  return $beat_lengths;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6q0r7h29.php:37\n\
    Stack trace:\n#0 /tmp/tmp6q0r7h29.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp6q0r7h29.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $beats = [4, 2, 1];\n    $result = [];\n \
    \   $notes = explode(' ', $music_string);\n    foreach ($notes as $note) {\n \
    \       $result[] = $beats[strpos($note, '|')];\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_4bjaxdo.php:25\n\
    Stack trace:\n#0 /tmp/tmp_4bjaxdo.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_4bjaxdo.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  $notes = array();\n  $music_array = explode('\
    \ ', $music_string);\n  $i = 0;\n  while ($i < count($music_array)) {\n    $note\
    \ = $music_array[$i];\n    if (strlen($note) == 1) {\n      $notes[] = 4;\n  \
    \  } else {\n      $notes[] = 2;\n    }\n    $i++;\n  }\n  return $notes;\n}\n\
    \nassert_options(ASSERT_BAIL, 1);\nassert(parse_music('o') == array(4));\nassert(parse_music('o\
    \ o') == array(4, 4));\nassert(parse_music('o o|') == array(4, 2));\nassert(parse_music('o\
    \ o| .|') == array(4, 2, 1));\nassert(parse_music('o o| .| o|') == array(4, 2,\
    \ 1, 2));\nassert(parse_music('o o| .| o| o|') == array(4, 2, 1, 2, 2));\nassert(parse_music('o\
    \ o| .| o| o| .|') == array(4, 2, 1, 2, 2, 1));\nassert(parse_music('o o| .| o|\
    \ o| .| .|') == array(4, 2, 1, 2, 2, 1, 1));\nassert(parse_music('o o| .| o| o|\
    \ .| .| .|') == array(4, 2, 1, 2, 2, 1, 1, 1));\nassert(parse_music('o o| .| o|\
    \ o| .| .| .| .|') == array(4, 2, 1, 2, 2, 1, 1, 1, 1));\nassert(parse_music('o\
    \ o| .| o| o| .| .| .| .| o o') == array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4));\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert(parse_music('o o| .|') == [4, 2, 1]) failed\
    \ in /tmp/tmp2j03c47o.php on line 31\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    // write your code here...\n}\n\nparse_music('o\
    \ o| .| o| o| .| .| .| .| o o');\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5wl5710.php:21\n\
    Stack trace:\n#0 /tmp/tmpb5wl5710.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpb5wl5710.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = str_replace('o o o o', '1', $music_string);\n    $music_string\
    \ = str_replace('.', '1', $music_string);\n    $music_string = str_replace('1\
    \ 1 1 1', '4', $music_string);\n    $music_string = str_replace('1 1', '2', $music_string);\n\
    \    $music_string = str_replace(' ', '', $music_string);\n    $music_array =\
    \ str_split($music_string);\n    return $music_array;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwn4mqnj2.php:26\n\
    Stack trace:\n#0 /tmp/tmpwn4mqnj2.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpwn4mqnj2.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $result = array();\n    $notes = array(\"\
    .|\" => 1, \"o|\" => 2, \"o\" => 4);\n    $music_string = str_replace(\" \", \"\
    \", $music_string);\n    $notes_list = explode(\"|\", $music_string);\n    foreach\
    \ ($notes_list as $note) {\n        $note = trim($note);\n        if (strlen($note)\
    \ > 0) {\n            $result[] = $notes[$note];\n        }\n    }\n    return\
    \ $result;\n}\n\necho implode(\",\", parse_music('o o| .| o| o| .| .| .| .| o\
    \ o'));\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ",,4,4,,,,,\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnghodav1.php:32\n\
    Stack trace:\n#0 /tmp/tmpnghodav1.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpnghodav1.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    // Put your code here\n}\n\n$a = 'o o| .|\
    \ o| o| .| .| .| .| o o';\nprint_r(parse_music($a));\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpez4qglr3.php:22\n\
    Stack trace:\n#0 /tmp/tmpez4qglr3.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpez4qglr3.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $count = 0;\n    foreach ($notes as $note) {\n        $count++;\n\
    \        if ($note === '|') {\n            array_push($result,$count);\n     \
    \       $count = 0;\n        }\n    }\n    if ($count != 0) {\n        array_push($result,$count);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiog42h7_.php:33\n\
    Stack trace:\n#0 /tmp/tmpiog42h7_.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpiog42h7_.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $result = [];\n    $notes = explode(' ', $music_string);\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $result[]\
    \ = 4;\n        } elseif ($note == 'o|') {\n            $result[] = 2;\n     \
    \   } elseif ($note == '.|') {\n            $result[] = 1;\n        }\n    }\n\
    \    return $result;\n}\n\necho implode(', ', parse_music('o o| .| o| o| .| .|\
    \ .| .| o o'));\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: 4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = preg_replace('/\\s+/', '',\
    \ $music_string);\n    $music_len = strlen($music_string);\n    $result = [];\n\
    \    $music_array = str_split($music_string);\n    for ($i = 0; $i < $music_len;\
    \ $i++) {\n        if ($music_array[$i] == 'o') {\n            $next_char = $music_array[$i\
    \ + 1];\n            if ($next_char == '|') {\n                $result[] = 2;\n\
    \                $i++;\n            } else {\n                $result[] = 4;\n\
    \            }\n        } elseif ($music_array[$i] == '.') {\n            $result[]\
    \ = 1;\n            $i++;\n        }\n    }\n    return $result;\n}\n\nassert(parse_music('o\
    \ o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\nassert(parse_music('o\
    \ o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o|\
    \ o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o\
    \ o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o|\
    \ o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o\
    \ o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o|\
    \ o o| o o| o o| o o| o o| o o| o o\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcbcnxcyi.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  $notes = str_split($music_string);\n  $beats\
    \ = [];\n  foreach ($notes as $note) {\n    if ($note == 'o') {\n      $beats[]\
    \ = 4;\n    } elseif ($note == 'o|') {\n      $beats[] = 2;\n    } elseif ($note\
    \ == '.|') {\n      $beats[] = 1;\n    }\n  }\n  return $beats;\n}\n\n$result\
    \ = parse_music('o o| .| o| o| .| .| .| .| o o');\nprint_r($result);\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 4\n    [1] => 4\n    [2] => 4\n    [3] => 4\n    [4]\
    \ => 4\n    [5] => 4\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0wiercfx.php:36\n\
    Stack trace:\n#0 /tmp/tmp0wiercfx.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp0wiercfx.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = explode(' ', $music_string);\n  \
    \  $beats = array();\n    foreach ($notes as $note) {\n        if ($note == 'o')\
    \ {\n            $beats[] = 4;\n        } elseif ($note == 'o|') {\n         \
    \   $beats[] = 2;\n        } elseif ($note == '.|') {\n            $beats[] =\
    \ 1;\n        }\n    }\n    return $beats;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  $result = [];\n  $tab = explode(' ', $music_string);\n\
    \  foreach ($tab as $elem) {\n    if ($elem == 'o') {\n      $result[] = 4;\n\
    \    } else if ($elem == 'o|') {\n      $result[] = 2;\n    } else if ($elem ==\
    \ '.|') {\n      $result[] = 1;\n    }\n  }\n  return $result;\n}\n\necho \"<br>\"\
    ;\nvar_dump(parse_music('o o| .| o| o| .| .| .| .| o o'));\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<br>array(11) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(2)\n  [2]=>\n  int(1)\n\
    \  [3]=>\n  int(2)\n  [4]=>\n  int(2)\n  [5]=>\n  int(1)\n  [6]=>\n  int(1)\n\
    \  [7]=>\n  int(1)\n  [8]=>\n  int(1)\n  [9]=>\n  int(4)\n  [10]=>\n  int(4)\n\
    }\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $result = [];\n    $split_music = str_split($music_string);\n\
    \    $len = count($split_music);\n    $j = 0;\n    $b = 0;\n    while ($j < $len)\
    \ {\n        if ($split_music[$j] == 'o') {\n            $i = $j + 1;\n      \
    \      if ($i < $len && $split_music[$i] == ' ') {\n                $b = 4;\n\
    \                $j = $j + 2;\n            } elseif ($i < $len && $split_music[$i]\
    \ == '|') {\n                $k = $i + 1;\n                if ($k < $len && $split_music[$k]\
    \ == ' ') {\n                    $b = 2;\n                    $j = $j + 3;\n \
    \               }\n            }\n        } elseif ($split_music[$j] == '.') {\n\
    \            $i = $j + 1;\n            if ($i < $len && $split_music[$i] == '|')\
    \ {\n                $k = $i + 1;\n                if ($k < $len && $split_music[$k]\
    \ == ' ') {\n                    $b = 1;\n                    $j = $j + 3;\n \
    \               }\n            }\n        } elseif ($split_music[$j] == ' ') {\n\
    \            $b = 0;\n            $j = $j + 1;\n        }\n        $result[] =\
    \ $b;\n    }\n    return $result;\n}\n\necho json_encode(parse_music('o o| .|\
    \ o| o| .| .| .| .| o o'));\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpbxenba5b.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $lengths = str_split($music_string);\n   \
    \ $output = [];\n    foreach ($lengths as $length) {\n        switch ($length)\
    \ {\n            case 'o':\n                $output[] = 4;\n                break;\n\
    \            case 'o|':\n                $output[] = 2;\n                break;\n\
    \            case '.|':\n                $output[] = 1;\n                break;\n\
    \        }\n    }\n    return $output;\n}\nfunction candidate(...$args) {\n  \
    \  return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps46qchnu.php:36\n\
    Stack trace:\n#0 /tmp/tmps46qchnu.php(41): test()\n#1 {main}\n  thrown in /tmp/tmps46qchnu.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\t$notes_arr = str_split($music_string);\n\t$result\
    \ = [];\n\t$current_note = '';\n\tforeach ($notes_arr as $current_char) {\n\t\t\
    if ($current_char === ' ') {\n\t\t\tif ($current_note === 'o') {\n\t\t\t\t$result[]\
    \ = 4;\n\t\t\t} elseif ($current_note === 'o|') {\n\t\t\t\t$result[] = 2;\n\t\t\
    \t} elseif ($current_note === '.|') {\n\t\t\t\t$result[] = 1;\n\t\t\t}\n\t\t\t\
    $current_note = '';\n\t\t} else {\n\t\t\t$current_note .= $current_char;\n\t\t\
    }\n\t}\n\treturn $result;\n}\n\necho '<pre>';\nprint_r(parse_music('o o| .| o|\
    \ o| .| .| .| .| o o'));\necho '</pre>';\nfunction candidate(...$args) {\n   \
    \ return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 1\n    [3] => 2\n\
    \    [4] => 2\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n    [9]\
    \ => 4\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8on6kgob.php:41\n\
    Stack trace:\n#0 /tmp/tmp8on6kgob.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp8on6kgob.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $arr = str_split($music_string);\n    $result\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value == 'o') {\n\
    \            $result[] = 4;\n        } elseif ($value == 'o' && $arr[$key + 1]\
    \ == '|') {\n            $result[] = 2;\n        } elseif ($value == '.' && $arr[$key\
    \ + 1] == '|') {\n            $result[] = 1;\n        }\n    }\n    return $result;\n\
    }\n\n$str = 'o o| .| o| o| .| .| .| .| o o';\nvar_dump(parse_music($str));\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(11) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(4)\n  [2]=>\n  int(1)\n\
    \  [3]=>\n  int(4)\n  [4]=>\n  int(4)\n  [5]=>\n  int(1)\n  [6]=>\n  int(1)\n\
    \  [7]=>\n  int(1)\n  [8]=>\n  int(1)\n  [9]=>\n  int(4)\n  [10]=>\n  int(4)\n\
    }\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa14v9wia.php:37\n\
    Stack trace:\n#0 /tmp/tmpa14v9wia.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpa14v9wia.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = [];\n    $explode_string = explode('\
    \ ', $music_string);\n    foreach ($explode_string as $note) {\n        if ($note\
    \ == 'o') {\n            $notes[] = 4;\n        } else if ($note == 'o|') {\n\
    \            $notes[] = 2;\n        } else if ($note == '.|') {\n            $notes[]\
    \ = 1;\n        }\n    }\n    return $notes;\n}\necho '<pre>';\nvar_dump(parse_music('o\
    \ o| .| o| o| .| .| .| .| o o'));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>array(11) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(2)\n  [2]=>\n  int(1)\n\
    \  [3]=>\n  int(2)\n  [4]=>\n  int(2)\n  [5]=>\n  int(1)\n  [6]=>\n  int(1)\n\
    \  [7]=>\n  int(1)\n  [8]=>\n  int(1)\n  [9]=>\n  int(4)\n  [10]=>\n  int(4)\n\
    }\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $matches = preg_split('/\\s+/', $music_string);\n\
    \    $result = [];\n    foreach ($matches as $match) {\n        if ($match ==\
    \ 'o') {\n            $result[] = 4;\n        } else if ($match == 'o|') {\n \
    \           $result[] = 2;\n        } else if ($match == '.|') {\n           \
    \ $result[] = 1;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  $notes = str_split($music_string);\n  $beats\
    \ = [];\n  $key = '';\n  $len = count($notes);\n  for ($i = 0; $i < $len; $i++)\
    \ {\n    if ($notes[$i] == 'o') {\n      if ($i < $len - 1 && $notes[$i + 1] ==\
    \ '|') {\n        $beats[] = 2;\n        $i++;\n      } else {\n        $beats[]\
    \ = 4;\n      }\n    } else if ($notes[$i] == '.') {\n      $beats[] = 1;\n  \
    \    $i++;\n    }\n  }\n  return $beats;\n}\necho '<pre>';\nprint_r(parse_music('o\
    \ o| .| o| o| .| .| .| .| o o'));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 1\n    [3] => 2\n\
    \    [4] => 2\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n    [9]\
    \ => 4\n    [10] => 4\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\t$notes = str_split($music_string);\n\t$beats\
    \ = array();\n\tforeach ($notes as $note) {\n\t\tswitch ($note) {\n\t\t\tcase\
    \ 'o':\n\t\t\t\t$beats[] = 4;\n\t\t\t\tbreak;\n\t\t\tcase 'o|':\n\t\t\t\t$beats[]\
    \ = 2;\n\t\t\t\tbreak;\n\t\t\tcase '.|':\n\t\t\t\t$beats[] = 1;\n\t\t\t\tbreak;\n\
    \t\t}\n\t}\n\treturn $beats;\n}\n$result = parse_music('o o| .| o| o| .| .| .|\
    \ .| o o');\nvar_dump($result);\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "array(6) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(4)\n  [2]=>\n  int(4)\n \
    \ [3]=>\n  int(4)\n  [4]=>\n  int(4)\n  [5]=>\n  int(4)\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpouit2ij6.php:38\nStack trace:\n#0 /tmp/tmpouit2ij6.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpouit2ij6.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\t$music = str_split($music_string);\n\t$result\
    \ = [];\n\t$count = 1;\n\tforeach ($music as $key => $value) {\n\t\tif ($value\
    \ == 'o') {\n\t\t\tif (isset($music[$key+1]) && $music[$key+1] == '|') {\n\t\t\
    \t\t$result[] = 2;\n\t\t\t\t$count = 1;\n\t\t\t} else {\n\t\t\t\t$result[] = 4;\n\
    \t\t\t\t$count = 1;\n\t\t\t}\n\t\t} elseif ($value == '.') {\n\t\t\tif (isset($music[$key+1])\
    \ && $music[$key+1] == '|') {\n\t\t\t\t$result[] = 1;\n\t\t\t\t$count = 1;\n\t\
    \t\t} else {\n\t\t\t\t$count++;\n\t\t\t}\n\t\t} elseif ($value == '|') {\n\t\t\
    \t$count++;\n\t\t} elseif ($value == ' ') {\n\t\t\t$result[] = $count;\n\t\t\t\
    $count = 1;\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ebutfns.php:47\n\
    Stack trace:\n#0 /tmp/tmp4ebutfns.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp4ebutfns.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_array = str_split($music_string);\n\
    \    $result = [];\n    foreach ($music_array as $key => $value) {\n        if\
    \ ($value == 'o') {\n            $result[] = 4;\n        } elseif ($value == '.')\
    \ {\n            $result[] = 1;\n        } elseif ($value == '|') {\n        \
    \    $result[count($result) - 1] = $result[count($result) - 1] / 2;\n        }\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8m20fjv0.php:33\n\
    Stack trace:\n#0 /tmp/tmp8m20fjv0.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8m20fjv0.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_pieces = explode(' ', $music_string);\n\
    \    $map = array(\n        'o' => 4,\n        'o|' => 2,\n        '.|' => 1\n\
    \    );\n    $result = array();\n    foreach ($music_pieces as $piece) {\n   \
    \     $result[] = $map[$piece];\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv34m7tj7.php:29\n\
    Stack trace:\n#0 /tmp/tmpv34m7tj7.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpv34m7tj7.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $duration = array(\n        'o' => 4,\n  \
    \      'o|' => 2,\n        '.|' => 1\n    );\n    $result = array();\n    $notes\
    \ = explode(' ', $music_string);\n    foreach ($notes as $note) {\n        $result[]\
    \ = $duration[$note];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz8y2e05f.php:30\n\
    Stack trace:\n#0 /tmp/tmpz8y2e05f.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpz8y2e05f.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    // Write your code here!\n    $nums = explode('\
    \ ', $music_string);\n    $result = [];\n    foreach ($nums as $num) {\n     \
    \   $number = '0';\n        $count = 0;\n        $split_num = str_split($num);\n\
    \        foreach ($split_num as $digit) {\n            $count++;\n           \
    \ if ($digit == 'o') {\n                $number = '4';\n            } elseif ($digit\
    \ == '.') {\n                $number = '1';\n            } elseif ($digit == '|')\
    \ {\n                if ($count == 2) {\n                    $number = '2';\n\
    \                }\n            }\n        }\n        $result[] = $number;\n \
    \   }\n    return $result;\n}\n\necho '<pre>';\nprint_r(parse_music('o o| .| o|\
    \ o| .| .| .| .| o o'));\necho '</pre>';\nfunction candidate(...$args) {\n   \
    \ return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 2\n    [3] => 2\n\
    \    [4] => 2\n    [5] => 2\n    [6] => 2\n    [7] => 2\n    [8] => 2\n    [9]\
    \ => 4\n    [10] => 4\n)\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpxespztlw.php:44\nStack trace:\n#0 /tmp/tmpxespztlw.php(51): test()\n\
    #1 {main}\n  thrown in /tmp/tmpxespztlw.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\t$result = array();\n\t$music_string = explode('\
    \ ', $music_string);\n\tforeach ($music_string as $value) {\n\t\tif($value ==\
    \ 'o') {\n\t\t\t$result[] = 4;\n\t\t} elseif($value == 'o|') {\n\t\t\t$result[]\
    \ = 2;\n\t\t} elseif($value == '.|') {\n\t\t\t$result[] = 1;\n\t\t}\n\t}\n\treturn\
    \ $result;\n}\n\necho '<pre>';\nprint_r(parse_music('o o| .| o| o| .| .| .| .|\
    \ o o'));\necho '</pre>';\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 1\n    [3] => 2\n\
    \    [4] => 2\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n    [9]\
    \ => 4\n    [10] => 4\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\t$output = '';\n\t$newMusic = explode(' ', $music_string);\n\
    \t$arrayConversion = array(\n\t\t'o'=>'4',\n\t\t'o|'=>'2',\n\t\t'.|'=>'1',\n\t\
    );\n\tfor ($i=0; $i < count($newMusic); $i++) { \n\t\t$output .= $arrayConversion[$newMusic[$i]].'\
    \ ';\n\t}\n\treturn $output;\n}\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1sr_mczz.php:29\n\
    Stack trace:\n#0 /tmp/tmp1sr_mczz.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1sr_mczz.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $notes_arr\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $notes_arr[] = 4;\n        } elseif ($note == '.') {\n            $notes_arr[]\
    \ = 1;\n        }\n    }\n    return $notes_arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzc8k8lls.php:32\n\
    Stack trace:\n#0 /tmp/tmpzc8k8lls.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpzc8k8lls.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $chars = str_split($music_string);\n    $notes\
    \ = array();\n    $current_note = '';\n    foreach ($chars as $char) {\n     \
    \   if ($char === ' ') {\n            array_push($notes, beats($current_note));\n\
    \            $current_note = '';\n        } else {\n            $current_note\
    \ .= $char;\n        }\n    }\n    array_push($notes, beats($current_note));\n\
    \    return $notes;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function beats() in /tmp/tmp8fbkmcdl.php:23\n\
    Stack trace:\n#0 /tmp/tmp8fbkmcdl.php(28): parse_music('')\n#1 /tmp/tmp8fbkmcdl.php(32):\
    \ candidate('')\n#2 /tmp/tmp8fbkmcdl.php(39): test()\n#3 {main}\n  thrown in /tmp/tmp8fbkmcdl.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = explode(' ', $music_string);\n    return array_map(function($item)\
    \ {\n        if ($item == 'o') {\n            return 4;\n        } else {\n  \
    \          return 1;\n        }\n    }, $music_string);\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfjvae3zt.php:28\n\
    Stack trace:\n#0 /tmp/tmpfjvae3zt.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpfjvae3zt.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  $musical_notes = explode(' ', $music_string);\n\
    \  $beat_array = [];\n  foreach ($musical_notes as $note) {\n    switch ($note)\
    \ {\n      case 'o':\n        $beat_array[] = 4;\n        break;\n      case 'o|':\n\
    \        $beat_array[] = 2;\n        break;\n      case '.|':\n        $beat_array[]\
    \ = 1;\n        break;\n    }\n  }\n  return $beat_array;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\t$notes = explode(' ', $music_string);\n\t$list\
    \ = [];\n\tforeach ($notes as $note) {\n\t\tif ($note === 'o') {\n\t\t\t$list[]\
    \ = 4;\n\t\t} else if ($note === 'o|') {\n\t\t\t$list[] = 2;\n\t\t} else if ($note\
    \ === '.|') {\n\t\t\t$list[] = 1;\n\t\t}\n\t}\n\treturn $list;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  // !!! write code here !!!\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgn8p0tjj.php:19\n\
    Stack trace:\n#0 /tmp/tmpgn8p0tjj.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpgn8p0tjj.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $beats = 0;\n    $beats_array = [];\n    $notes\
    \ = str_split($music_string);\n    foreach ($notes as $note) {\n        switch\
    \ ($note) {\n            case 'o':\n                $beats += 4;\n           \
    \     $beats_array[] = $beats;\n                break;\n            case 'o|':\n\
    \                $beats += 2;\n                $beats_array[] = $beats;\n    \
    \            break;\n            case '.|':\n                $beats += 1;\n  \
    \              $beats_array[] = $beats;\n                break;\n            default:\n\
    \                break;\n        }\n    }\n    return $beats_array;\n}\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp96r6ktc1.php:41\n\
    Stack trace:\n#0 /tmp/tmp96r6ktc1.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp96r6ktc1.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $note_lengths\
    \ = array();\n    $note_lengths_map = array('o' => 4, 'o|' => 2, '.|' => 1);\n\
    \    $temp_note = '';\n    foreach ($notes as $note) {\n        if ($note ===\
    \ ' ') {\n            $note_lengths[] = $note_lengths_map[$temp_note];\n     \
    \       $temp_note = '';\n        } else {\n            $temp_note .= $note;\n\
    \        }\n    }\n    $note_lengths[] = $note_lengths_map[$temp_note];\n    return\
    \ $note_lengths;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpocoq1vqu.php:33\n\
    Stack trace:\n#0 /tmp/tmpocoq1vqu.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpocoq1vqu.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    // Your code here\n}\n\necho \"Number of beats\
    \ in each note: <br />\\n\";\nprint_r(parse_music('o o| .| o| o| .| .| .| .| o\
    \ o'));\necho \"<br />\\n\";\n\necho \"Number of beats in each note: <br />\\\
    n\";\nprint_r(parse_music('o o o o o o o o o o o o o o o o o o o o o o o o o o\
    \ o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o\
    \ o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o\
    \ o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o\
    \ o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o\
    \ o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o\
    \ o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o\
    \ o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o\
    \ o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o\
    \ o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o\
    \ o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o\
    \ o o o o o o o o o o o o o o o o o\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp30hhfycx.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $result = array();\n    $notes = explode('\
    \ ', $music_string);\n    foreach ($notes as $note) {\n        if ($note == 'o')\
    \ {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n        \
    \    $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = explode(' ', $music_string);\n  \
    \  foreach ($notes as $key => $note) {\n        if ($note === 'o') {\n       \
    \     $notes[$key] = 4;\n        } else if ($note === 'o|') {\n            $notes[$key]\
    \ = 2;\n        } else if ($note === '.|') {\n            $notes[$key] = 1;\n\
    \        }\n    }\n    return $notes;\n}\n$music_string = 'o o| .| o| o| .| .|\
    \ .| .| o o';\n$beat_count = parse_music($music_string);\nprint_r($beat_count);\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 1\n    [3] => 2\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n    [9] => 4\n\
    \    [10] => 4\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3t3mvn0d.php:32\n\
    Stack trace:\n#0 /tmp/tmp3t3mvn0d.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp3t3mvn0d.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  $lookup = [\n    'o' => 4,\n    'o|' => 2,\n\
    \    '.|' => 1\n  ];\n  $symbols = explode(' ', $music_string);\n  $result = [];\n\
    \  foreach ($symbols as $key => $symbol) {\n    $result[] = $lookup[$symbol];\n\
    \  }\n  return $result;\n}\n\necho parse_music('o o| .| o| o| .| .| .| .| o o');\n\
    echo PHP_EOL;\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwbekuyh4.php:32\n\
    Stack trace:\n#0 /tmp/tmpwbekuyh4.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpwbekuyh4.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $duration = [\n        'o' => 4,\n       \
    \ 'o|' => 2,\n        '.|' => 1\n    ];\n    $notes = explode(' ', $music_string);\n\
    \    $beats = [];\n    foreach ($notes as $note) {\n        $beats[] = $duration[$note];\n\
    \    }\n    return $beats;\n}\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg1h11dfz.php:29\n\
    Stack trace:\n#0 /tmp/tmpg1h11dfz.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpg1h11dfz.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  $notes = str_split($music_string);\n  $count\
    \ = 0;\n  $num_notes = count($notes);\n  $results = [];\n  while ($count < $num_notes)\
    \ {\n    if ($notes[$count] == 'o') {\n      $results[] = 4;\n      $count++;\n\
    \    } else if ($notes[$count] == 'o' && $notes[$count + 1] == '|') {\n      $results[]\
    \ = 2;\n      $count += 2;\n    } else if ($notes[$count] == '.' && $notes[$count\
    \ + 1] == '|') {\n      $results[] = 1;\n      $count += 2;\n    }\n  }\n  return\
    \ $results;\n}\nprint_r(parse_music('o o| .| o| o| .| .| .| .| o o'));\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\t$entries = explode(' ', $music_string);\n\t\
    foreach ($entries as $key => $entry) {\n\t\tif ($entry == 'o') {\n\t\t\t$result[]\
    \ = 4;\n\t\t} elseif ($entry == 'o|') {\n\t\t\t$result[] = 2;\n\t\t} elseif ($entry\
    \ == '.|') {\n\t\t\t$result[] = 1;\n\t\t}\n\t}\n\treturn $result;\n}\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprd7nnlx2.php:29\n\
    Stack trace:\n#0 /tmp/tmprd7nnlx2.php(36): test()\n#1 {main}\n  thrown in /tmp/tmprd7nnlx2.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  if(strlen($music_string) == 0) {\n    return\
    \ array();\n  }\n  $music_array = str_split($music_string);\n  $music_parsed =\
    \ array();\n  $count = 0;\n  foreach($music_array as $char) {\n    if($char ===\
    \ 'o') {\n      $count++;\n    } elseif($char === '.') {\n      $count++;\n  \
    \  } elseif($char === '|') {\n      array_push($music_parsed, $count);\n     \
    \ $count = 0;\n    }\n  }\n  array_push($music_parsed, $count);\n  return $music_parsed;\n\
    }\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_rlmll7a.php:37\n\
    Stack trace:\n#0 /tmp/tmp_rlmll7a.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp_rlmll7a.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $result = [];\n    $notes = explode(' ', $music_string);\n\
    \    foreach ($notes as $note) {\n        switch ($note) {\n            case 'o':\n\
    \                $result[] = 4;\n                break;\n            case 'o|':\n\
    \                $result[] = 2;\n                break;\n            case '.|':\n\
    \                $result[] = 1;\n                break;\n        }\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  //TODO: Write code here.\n\t$whole_note = 'o';\n\
    \t$half_note = 'o|';\n\t$quarter_note = '.|';\n\t$music_array = str_split($music_string);\n\
    \t$result = [];\n\t$n_whole_note = substr_count($music_string, $whole_note);\n\
    \t$n_half_note = substr_count($music_string, $half_note);\n\t$n_quarter_note =\
    \ substr_count($music_string, $quarter_note);\n\t$n_all_notes = $n_whole_note\
    \ + $n_half_note + $n_quarter_note;\n\tif($n_all_notes == 0) {\n\t\treturn $result;\n\
    \t}\n\tfor($i = 0; $i < $n_whole_note; $i++) {\n\t\t$result[] = 4;\n\t}\n\tfor($i\
    \ = 0; $i < $n_half_note; $i++) {\n\t\t$result[] = 2;\n\t}\n\tfor($i = 0; $i <\
    \ $n_quarter_note; $i++) {\n\t\t$result[] = 1;\n\t}\n\treturn $result;\n}\n\n\
    /**\n * $sum - sum of all integers\n * $count - count of integers\n * $avg - average\
    \ value\n * $arr - array with integers\n */\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk0oxj7aq.php:51\n\
    Stack trace:\n#0 /tmp/tmpk0oxj7aq.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpk0oxj7aq.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\t$len = strlen($music_string);\n\t$notes = str_split($music_string);\n\
    \t$result = [];\n\tfor ($i = 0; $i < $len; $i++) {\n\t\tif ($notes[$i] == 'o')\
    \ {\n\t\t\tif ($notes[$i + 1] == ' ') {\n\t\t\t\t$result[] = 4;\n\t\t\t} else\
    \ {\n\t\t\t\t$result[] = 2;\n\t\t\t\t$i += 2;\n\t\t\t}\n\t\t} else {\n\t\t\t$result[]\
    \ = 1;\n\t\t\t$i += 2;\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6leq5spo.php:37\n\
    Stack trace:\n#0 /tmp/tmp6leq5spo.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp6leq5spo.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $result = [];\n    $music = str_split($music_string);\n\
    \    for ($i = 0; $i < count($music); $i++) {\n        if ($music[$i] == 'o')\
    \ {\n            if ($music[$i + 1] == '|') {\n                $result[] = 2;\n\
    \                $i++;\n            } else {\n                $result[] = 4;\n\
    \            }\n        } else {\n            $result[] = 1;\n            $i++;\n\
    \        }\n    }\n    return $result;\n}\n\necho implode(', ', parse_music('o\
    \ o| .| o| o| .| .| .| .| o o'));\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "4, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpqmzfout8.php:36\nStack trace:\n#0 /tmp/tmpqmzfout8.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpqmzfout8.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $arr = [];\n    $arr2 = [];\n    $j = 0;\n\
    \    for ($i = 0; $i < strlen($music_string); $i++) {\n        if ($music_string[$i]\
    \ == 'o') {\n            $arr[$j] = 4;\n            $j++;\n        } elseif ($music_string[$i]\
    \ == '.') {\n            $arr[$j] = 1;\n            $j++;\n        } elseif ($music_string[$i]\
    \ == '|') {\n            $arr[$j - 1] = ($arr[$j - 1] == 4) ? 2 : 1;\n       \
    \ }\n    }\n    return $arr;\n}\n\nvar_dump(parse_music('o o| .| o| o| .| .| .|\
    \ .| o o'));\necho \"<br>\";\nvar_dump(parse_music('o o| .| o| o| .| .| .| .|\
    \ o'));\necho \"<br>\";\nvar_dump(parse_music('o o| .| o| o| .| .| .| .| .'));\n\
    echo \"<br>\";\nvar_dump(parse_music('o o| .| o| o| .| .| .| .|'));\necho \"<br>\"\
    ;\nvar_dump(parse_music('o o| .| o| o| .| .| .|'));\necho \"<br>\";\nvar_dump(parse_music('o\
    \ o| .| o| o| .| .|'));\necho \"<br>\";\nvar_dump(parse_music('o o| .| o| o| .|'));\n\
    echo \"<br>\";\nvar_dump(parse_music('o o| .| o| o|'));\necho \"<br>\";\nvar_dump(parse_music('o\
    \ o| .| o|'));\necho \"<br>\";\nvar_dump(parse_music('o o| .|'));\necho \"<br>\"\
    ;\nvar_dump(parse_music('o o|'));\necho \"<br>\";\nvar_dump(parse_music('o'));\n\
    echo \"<br>\";\nvar_dump\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4tlx03e4.php on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    // your code goes here\n}\n\nvar_dump(parse_music('o\
    \ o| .| o| o| .| .| .| .| o o'));\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "NULL\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccy9bi17.php:21\n\
    Stack trace:\n#0 /tmp/tmpccy9bi17.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpccy9bi17.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $g = array(\n        'o' => 4,\n        'o|'\
    \ => 2,\n        '.|' => 1\n    );\n    $result = [];\n    $arr = explode(' ',\
    \ $music_string);\n    foreach ($arr as $key => $value) {\n        $result[] =\
    \ $g[$value];\n    }\n    return $result;\n}\necho '<pre>';\nprint_r(parse_music('o\
    \ o| .| o| o| .| .| .| .| o o'));\necho '</pre>';\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 1\n    [3] => 2\n\
    \    [4] => 2\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n    [9]\
    \ => 4\n    [10] => 4\n)\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmps06rfjaw.php:33\nStack trace:\n#0 /tmp/tmps06rfjaw.php(40): test()\n\
    #1 {main}\n  thrown in /tmp/tmps06rfjaw.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $count = array_count_values(str_split($music_string));\n\
    \    $previousCount = 0;\n    $counts = array();\n    foreach ($count as $key\
    \ => $value) {\n        if ($key == 'o') {\n            $counts[] = $value * 4;\n\
    \        } elseif ($key == 'o|') {\n            $counts[] = $value * 2;\n    \
    \    } elseif ($key == '.|') {\n            $counts[] = $value;\n        }\n \
    \   }\n    return $counts;\n}\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5dfoiul7.php:32\n\
    Stack trace:\n#0 /tmp/tmp5dfoiul7.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp5dfoiul7.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = explode(' ', $music_string);\n  \
    \  $parsed_notes = [];\n    foreach ($notes as $note) {\n        if (substr($note,\
    \ -1) == '|') {\n            $parsed_notes[] = (substr($note, 0, 1) == 'o') ?\
    \ 2 : 1;\n        } else {\n            $parsed_notes[] = 4;\n        }\n    }\n\
    \    return $parsed_notes;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcz_g_o5w.php:29\n\
    Stack trace:\n#0 /tmp/tmpcz_g_o5w.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpcz_g_o5w.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $new_string = str_replace(' ', '', $music_string);\n\
    \    $result = array();\n    for ($i = 0; $i < strlen($new_string); $i++) {\n\
    \        if ($new_string[$i] == 'o') {\n            if ($new_string[$i + 1] ==\
    \ '|') {\n                $result[] = 2;\n                $i++;\n            }\
    \ else {\n                $result[] = 4;\n            }\n        } else {\n  \
    \          $result[] = 1;\n            $i++;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    return [];\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2_4j52mn.php:20\n\
    Stack trace:\n#0 /tmp/tmp2_4j52mn.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp2_4j52mn.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  // todo: implement this function\n  $i = 0;\n\
    \  $s = str_split($music_string);\n  $result = array();\n  for ($i = 0; $i < count($s);\
    \ $i++) {\n    if ($s[$i] == 'o') {\n      if ($s[$i + 1] == ' ') {\n        $result[]\
    \ = 4;\n      } else {\n        $result[] = 2;\n        $i++;\n      }\n    }\
    \ else {\n      $result[] = 1;\n      $i++;\n    }\n  }\n  return $result;\n}\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb6mofsu_.php:36\n\
    Stack trace:\n#0 /tmp/tmpb6mofsu_.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpb6mofsu_.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  $symbols = str_split($music_string);\n  $values\
    \ = [];\n  $note = '';\n  $value = 0;\n  foreach ($symbols as $symbol) {\n   \
    \ if ($symbol === ' ' || $symbol === '|') {\n      $values[] = $value;\n     \
    \ $value = 0;\n      continue;\n    }\n    $note .= $symbol;\n    if ($note ===\
    \ 'o') {\n      $value = 4;\n    } else if ($note === 'o|') {\n      $value =\
    \ 2;\n    } else if ($note === '.|') {\n      $value = 1;\n    }\n  }\n  return\
    \ $values;\n}\nprint_r(parse_music('o o| .| o| o| .| .| .| .| o o'));\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 4\n    [1] => 0\n    [2] => 0\n    [3] => 0\n    [4]\
    \ => 0\n    [5] => 0\n    [6] => 0\n    [7] => 0\n    [8] => 0\n    [9] => 0\n\
    \    [10] => 0\n    [11] => 0\n    [12] => 0\n    [13] => 0\n    [14] => 0\n \
    \   [15] => 0\n    [16] => 0\n    [17] => 0\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp1pjg9vsu.php:40\nStack trace:\n#0 /tmp/tmp1pjg9vsu.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1pjg9vsu.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\t$music_ascii = array('o' => 4, 'o|' => 2, '.|'\
    \ => 1);\n\treturn array_map(function($item) use ($music_ascii) {\n\t\treturn\
    \ $music_ascii[$item];\n\t}, explode(' ', $music_string));\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_pa347yi.php:22\n\
    Stack trace:\n#0 /tmp/tmp_pa347yi.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp_pa347yi.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_array = str_split($music_string);\n\
    \    $result = [];\n    $count = 0;\n    for ($i = 0; $i < count($music_array);\
    \ $i++) {\n        if ($music_array[$i] == 'o') {\n            $count++;\n   \
    \         if ($music_array[$i + 1] == ' ') {\n                array_push($result,\
    \ 4);\n            }\n        } else if ($music_array[$i] == 'o' && $music_array[$i\
    \ + 1] == '|') {\n            array_push($result, 2);\n        } else if ($music_array[$i]\
    \ == '.' && $music_array[$i + 1] == '|') {\n            array_push($result, 1);\n\
    \        }\n    }\n    return $result;\n}\n\necho \"<pre>\";\nprint_r(parse_music('o\
    \ o| .| o| o| .| .| .| .| o o'));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 4\n    [1] => 1\n    [2] => 1\n    [3] => 1\n\
    \    [4] => 1\n    [5] => 1\n    [6] => 4\n)\n</pre>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp1d7p2xfs.php:39\nStack trace:\n#0 /tmp/tmp1d7p2xfs.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1d7p2xfs.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    // your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpucgv66sj.php:20\n\
    Stack trace:\n#0 /tmp/tmpucgv66sj.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpucgv66sj.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    // Your code here\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ai3km88.php:19\n\
    Stack trace:\n#0 /tmp/tmp_ai3km88.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp_ai3km88.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\t// your code goes here\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwiqj_gks.php:19\n\
    Stack trace:\n#0 /tmp/tmpwiqj_gks.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpwiqj_gks.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    // TODO\n}\n\n$list = parse_music('o o| .|\
    \ o| o| .| .| .| .| o o');\nvar_dump($list);\nassert($list == [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]);\n```\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpodvth20p.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes_to_beats = [\n        'o' => 4,\n \
    \       'o|' => 2,\n        '.|' => 1\n    ];\n    $arr_notes = explode(' ', $music_string);\n\
    \    $result = [];\n    foreach ($arr_notes as $note) {\n        $result[] = $notes_to_beats[$note];\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbcmmpqxo.php:29\n\
    Stack trace:\n#0 /tmp/tmpbcmmpqxo.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpbcmmpqxo.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe4bs8bni.php:20\n\
    Stack trace:\n#0 /tmp/tmpe4bs8bni.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpe4bs8bni.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\t$notes = array('o','o|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp91x2bff3.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $matches = [];\n    $regex = \"/[o\\.|]+/\"\
    ;\n    $found = preg_match_all($regex, $music_string, $matches);\n    $notes =\
    \ [];\n    if ($found) {\n        foreach ($matches[0] as $note) {\n         \
    \   if ($note == 'o')\n                $notes[] = 4;\n            else if ($note\
    \ == 'o|')\n                $notes[] = 2;\n            else if ($note == '.|')\n\
    \                $notes[] = 1;\n        }\n    }\n    return $notes;\n}\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  return [1, 4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4];\n\
    }\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps7d4qdn0.php:19\n\
    Stack trace:\n#0 /tmp/tmps7d4qdn0.php(26): test()\n#1 {main}\n  thrown in /tmp/tmps7d4qdn0.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $result = array();\n    foreach (explode('\
    \ ', $music_string) as $note) {\n        switch ($note) {\n            case 'o':\n\
    \                $result[] = 4;\n                break;\n            case 'o|':\n\
    \                $result[] = 2;\n                break;\n            case '.|':\n\
    \                $result[] = 1;\n                break;\n        }\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  // Your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi3b8v0yg.php:20\n\
    Stack trace:\n#0 /tmp/tmpi3b8v0yg.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpi3b8v0yg.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    // This can be done using str_split, str_replace\
    \ and a few loops\n\n    // YOUR CODE HERE\n    $music_string = str_replace('\
    \ ', '', $music_string);\n    $music_array = str_split($music_string);\n    $beat_array\
    \ = [];\n    foreach ($music_array as $key => $value) {\n        if ($value ==\
    \ 'o') {\n            $beat_array[] = 4;\n        } elseif ($value == 'o|') {\n\
    \            $beat_array[] = 2;\n        } elseif ($value == '.|') {\n       \
    \     $beat_array[] = 1;\n        }\n    }\n    return $beat_array;\n}\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6auporbd.php:36\n\
    Stack trace:\n#0 /tmp/tmp6auporbd.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp6auporbd.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\t$notes = array('o' => 4,\n\t\t\t\t\t'o|' =>\
    \ 2,\n\t\t\t\t\t'.|' => 1);\n\t$beats = array();\n\t$arr = explode(' ', $music_string);\n\
    \tforeach ($arr as $value) {\n\t\t$beats[] = $notes[$value];\n\t}\n\treturn $beats;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxt9nla9e.php:28\n\
    Stack trace:\n#0 /tmp/tmpxt9nla9e.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpxt9nla9e.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace(' ', '', $music_string);\n\
    \    $notes = explode('|', $music_string);\n    $beat_count = array();\n    foreach\
    \ ($notes as $note) {\n        if ($note == 'o') {\n            $beat_count[]\
    \ = 4;\n        } else {\n            $beat_count[] = 2;\n        }\n    }\n \
    \   return $beat_count;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp73w62dff.php:30\n\
    Stack trace:\n#0 /tmp/tmp73w62dff.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp73w62dff.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  // Your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe92tkj0z.php:20\n\
    Stack trace:\n#0 /tmp/tmpe92tkj0z.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpe92tkj0z.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $result = array();\n    $notes = str_split($music_string);\n\
    \    $beats = array('o' => 4, 'o|' => 2, '.|' => 1);\n    $i = 0;\n    $j = 0;\n\
    \    while ($i < count($notes)) {\n        while ($notes[$i] == ' ') {\n     \
    \       $i++;\n        }\n        $note = '';\n        while ($notes[$i] != '\
    \ ' && $i < count($notes)) {\n            $note .= $notes[$i];\n            $i++;\n\
    \        }\n        $result[$j] = $beats[$note];\n        $j++;\n    }\n    return\
    \ $result;\n}\n\necho '<pre>';\nprint_r(parse_music('o o| .| o| o| .| .| .| .|\
    \ o o'));\necho '</pre>';\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 1\n    [3] => 2\n\
    \    [4] => 2\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n    [9]\
    \ => 4\n    [10] => 4\n)\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpnp1nuec5.php:40\nStack trace:\n#0 /tmp/tmpnp1nuec5.php(47): test()\n\
    #1 {main}\n  thrown in /tmp/tmpnp1nuec5.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = ['o' => 4, 'o|' => 2, '.|' => 1];\n\
    \    $result = [];\n    $arr = explode(' ', $music_string);\n    for ($i = 0;\
    \ $i < count($arr); $i++) {\n        $result[] = $notes[$arr[$i]];\n    }\n  \
    \  return $result;\n}\n\nparse_music('o o| .| o| o| .| .| .| .| o o');\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvr2nzp3_.php:27\n\
    Stack trace:\n#0 /tmp/tmpvr2nzp3_.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpvr2nzp3_.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\t// Your code here\n\t$music_string = str_replace(\"\
    o\", \"O\", $music_string);\n\t$music_string = str_replace(\"|\", \"\", $music_string);\n\
    \t$string_length = strlen($music_string);\n\t$output = array();\n\t$i = 0;\n\t\
    while ($i < $string_length) {\n\t\tif ($music_string[$i] == \"O\") {\n\t\t\tif\
    \ ($music_string[$i + 1] == \" \") {\n\t\t\t\t$beat = 4;\n\t\t\t\tarray_push($output,\
    \ $beat);\n\t\t\t\t$i += 2;\n\t\t\t} else {\n\t\t\t\t$beat = 2;\n\t\t\t\tarray_push($output,\
    \ $beat);\n\t\t\t\t$i += 1;\n\t\t\t}\n\t\t} else {\n\t\t\t$beat = 1;\n\t\t\tarray_push($output,\
    \ $beat);\n\t\t\t$i += 1;\n\t\t}\n\t}\n\treturn $output;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkxktbnuw.php:43\n\
    Stack trace:\n#0 /tmp/tmpkxktbnuw.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpkxktbnuw.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $ret = array();\n    $delim = \"|\";\n   \
    \ $split = explode($delim, $music_string);\n    //print_r($split);\n    foreach\
    \ ($split as $key => $value) {\n        //echo $value;\n        if ($value ==\
    \ 'o ') {\n            array_push($ret, 4);\n        } else if ($value == 'o')\
    \ {\n            array_push($ret, 4);\n        } else if ($value == ' o') {\n\
    \            array_push($ret, 4);\n        } else if ($value == ' o ') {\n   \
    \         array_push($ret, 4);\n        } else if ($value == 'o|') {\n       \
    \     array_push($ret, 2);\n        } else if ($value == ' .|') {\n          \
    \  array_push($ret, 1);\n        } else if ($value == '.|') {\n            array_push($ret,\
    \ 1);\n        } else if ($value == ' .| ') {\n            array_push($ret, 1);\n\
    \        } else if ($value == '.| ') {\n            array_push($ret, 1);\n   \
    \     } else if ($value == ' o|') {\n            array_push($ret, 2);\n      \
    \  } else if ($value == 'o| ') {\n            array_push($ret, 2);\n        }\
    \ else if ($value == ' o| ') {\n            array_push($ret, 2);\n        } else\
    \ if ($value == '.| ') {\n            array_push($ret, 1);\n        } else if\
    \ ($value == ' o| ') {\n            array_push($ret, 2);\n        } else if ($value\
    \ == 'o|') {\n            array_push($ret, 2);\n        } else if ($value == 'o|')\
    \ {\n            array_push($ret, 2);\n        } else if ($value == 'o|') {\n\
    \            array_push($ret, 2);\n        } else if ($value == 'o|') {\n    \
    \        array_push($ret, 2);\n        } else if ($value == 'o|') {\n        \
    \    array_push($ret, 2);\n        } else if ($value == 'o|') {\n           \n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1mpow6tw.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $mus = explode(' ', $music_string);\n    $beat\
    \ = [];\n    foreach ($mus as $key => $mu) {\n        if ($mu == 'o') {\n    \
    \        $beat[] = 4;\n        } elseif ($mu == 'o|') {\n            $beat[] =\
    \ 2;\n        } elseif ($mu == '.|') {\n            $beat[] = 1;\n        }\n\
    \    }\n    return $beat;\n}\n\n$beat = parse_music('o o| .| o| o| .| .| .| .|\
    \ o o');\n$sum = 0;\nforeach ($beat as $bea) {\n    $sum += $bea;\n}\necho $sum;\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '23'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $beats = array();\n    $music_arr = explode('\
    \ ', $music_string);\n    foreach ($music_arr as $note) {\n        switch ($note)\
    \ {\n            case 'o':\n                $beats[] = 4;\n                break;\n\
    \            case 'o|':\n                $beats[] = 2;\n                break;\n\
    \            case '.|':\n                $beats[] = 1;\n                break;\n\
    \        }\n    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n \
    \   return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $ret = array();\n    $delimiter = ' ';\n \
    \   $data = explode($delimiter, $music_string);\n    foreach ($data as $item)\
    \ {\n        switch ($item) {\n            case 'o':\n                $ret[] =\
    \ 4;\n                break;\n            case 'o|':\n                $ret[] =\
    \ 2;\n                break;\n            case '.|':\n                $ret[] =\
    \ 1;\n                break;\n        }\n    }\n    return $ret;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  $theArray = explode(\" \", $music_string);\n\
    \  $arr = [\n    \"o\" => 4,\n    \"o|\" => 2,\n    \".|\" => 1\n  ];\n  $arr2\
    \ = [];\n  foreach ($theArray as $key => $value) {\n    array_push($arr2, $arr[$value]);\n\
    \  }\n  return $arr2;\n}\nvar_dump(parse_music('o o| .| o| o| .| .| .| .| o o'));\n\
    \nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(11) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(2)\n  [2]=>\n  int(1)\n\
    \  [3]=>\n  int(2)\n  [4]=>\n  int(2)\n  [5]=>\n  int(1)\n  [6]=>\n  int(1)\n\
    \  [7]=>\n  int(1)\n  [8]=>\n  int(1)\n  [9]=>\n  int(4)\n  [10]=>\n  int(4)\n\
    }\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi22stpya.php:31\n\
    Stack trace:\n#0 /tmp/tmpi22stpya.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpi22stpya.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $beats = ['o' => 4, 'o|' => 2, '.|' => 1];\n\
    \    $music_array = str_split($music_string);\n    $result = [];\n    $index =\
    \ 0;\n    while ($index < count($music_array)) {\n        if (array_key_exists($music_array[$index]\
    \ . $music_array[$index + 1], $beats)) {\n            $result[] = $beats[$music_array[$index]\
    \ . $music_array[$index + 1]];\n            $index++;\n        } else {\n    \
    \        $result[] = $beats[$music_array[$index]];\n        }\n        $index++;\n\
    \    }\n    return $result;\n}\n\nvar_dump(parse_music('o o| .| o| o| .| .| .|\
    \ .| o o'));\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "array(21) {\n  [0]=>\n  int(4)\n  [1]=>\n  NULL\n  [2]=>\n  int(2)\n  [3]=>\n\
    \  NULL\n  [4]=>\n  int(1)\n  [5]=>\n  NULL\n  [6]=>\n  int(2)\n  [7]=>\n  NULL\n\
    \  [8]=>\n  int(2)\n  [9]=>\n  NULL\n  [10]=>\n  int(1)\n  [11]=>\n  NULL\n  [12]=>\n\
    \  int(1)\n  [13]=>\n  NULL\n  [14]=>\n  int(1)\n  [15]=>\n  NULL\n  [16]=>\n\
    \  int(1)\n  [17]=>\n  NULL\n  [18]=>\n  int(4)\n  [19]=>\n  NULL\n  [20]=>\n\
    \  int(4)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf5hp0230.php:34\n\
    Stack trace:\n#0 /tmp/tmpf5hp0230.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpf5hp0230.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes_list = explode(' ', $music_string);\n\
    \    $beats_list = [];\n    foreach ($notes_list as $note) {\n        if (strlen($note)\
    \ == 1) {\n            $beats_list[] = 4;\n        } else {\n            $beats_list[]\
    \ = 2;\n        }\n    }\n    return $beats_list;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp869hst1x.php:29\n\
    Stack trace:\n#0 /tmp/tmp869hst1x.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp869hst1x.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\t$parsed_array = [];\n\t$notes = str_split($music_string);\n\
    \tforeach ($notes as $key => $value) {\n\t\tif($value == 'o') {\n\t\t\t$parsed_array[]\
    \ = 4;\n\t\t} elseif($value == 'o|') {\n\t\t\t$parsed_array[] = 2;\n\t\t} elseif($value\
    \ == '.|') {\n\t\t\t$parsed_array[] = 1;\n\t\t}\n\t}\n\treturn $parsed_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3fo57f3a.php:33\n\
    Stack trace:\n#0 /tmp/tmp3fo57f3a.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp3fo57f3a.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_array = explode(' ', $music_string);\n\
    \    $music_notes = array();\n    foreach ($music_array as $note) {\n        switch\
    \ ($note) {\n            case 'o':\n                $music_notes[] = 4;\n    \
    \            break;\n            case 'o|':\n                $music_notes[] =\
    \ 2;\n                break;\n            case '.|':\n                $music_notes[]\
    \ = 1;\n                break;\n        }\n    }\n    return $music_notes;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  $result = [];\n  $notas = explode(' ', $music_string);\n\
    \  foreach ($notas as $nota) {\n    if ($nota == 'o') {\n      $result[] = 4;\n\
    \    } else if ($nota == 'o|') {\n      $result[] = 2;\n    } else if ($nota ==\
    \ '.|') {\n      $result[] = 1;\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $result = array();\n    for ($i = 0; $i <\
    \ strlen($music_string); $i++) {\n        if ($music_string[$i] == 'o') {\n  \
    \          if ($music_string[$i + 1] == ' ') {\n                $result[] = 4;\n\
    \            } else {\n                $result[] = 2;\n                $i++;\n\
    \            }\n        } else {\n            $result[] = 1;\n            $i++;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_flc1d6e.php:35\n\
    Stack trace:\n#0 /tmp/tmp_flc1d6e.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp_flc1d6e.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  $converter = array(\n    'o' => 4,\n    'o|'\
    \ => 2,\n    '.|' => 1\n  );\n  $beats = [];\n  $notes = explode(' ', $music_string);\n\
    \  foreach ($notes as $note) {\n    $beats[] = $converter[$note];\n  }\n  return\
    \ $beats;\n}\n\n$test = 'o o| .| o| o| .| .| .| .| o o';\n$result = parse_music($test);\n\
    \nprint_r($result);\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 1\n    [3] => 2\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n    [9] => 4\n\
    \    [10] => 4\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsac4iwwc.php:34\n\
    Stack trace:\n#0 /tmp/tmpsac4iwwc.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpsac4iwwc.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\t$arr = array();\n\t$str_len = strlen($music_string);\n\
    \t$i = 0;\n\twhile ($i < $str_len) {\n\t\tif ($music_string[$i] == 'o') {\n\t\t\
    \tif ($music_string[$i + 1] == ' ') {\n\t\t\t\t$arr[] = 4;\n\t\t\t\t$i += 2;\n\
    \t\t\t} else {\n\t\t\t\t$arr[] = 2;\n\t\t\t\t$i += 3;\n\t\t\t}\n\t\t} else {\n\
    \t\t\t$arr[] = 1;\n\t\t\t$i += 3;\n\t\t}\n\t}\n\treturn $arr;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe40_kkzq.php:37\n\
    Stack trace:\n#0 /tmp/tmpe40_kkzq.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpe40_kkzq.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $result = [];\n    $arr_music = explode('\
    \ ', $music_string);\n    foreach ($arr_music as $item) {\n        switch ($item)\
    \ {\n            case 'o':\n                $result[] = 4;\n                break;\n\
    \            case 'o|':\n                $result[] = 2;\n                break;\n\
    \            case '.|':\n                $result[] = 1;\n                break;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $song\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $song[] = 4;\n        } elseif ($note == 'o' || $note == '|') {\n     \
    \       $song[] = 2;\n        } elseif ($note == '.' || $note == '|') {\n    \
    \        $song[] = 1;\n        }\n    }\n    return $song;\n}\n\nprint_r(parse_music('o\
    \ o| .| o| o| .| .| .| .| o o'));\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 4\n    [1] => 4\n    [2] => 2\n    [3] => 1\n    [4]\
    \ => 2\n    [5] => 4\n    [6] => 2\n    [7] => 4\n    [8] => 2\n    [9] => 1\n\
    \    [10] => 2\n    [11] => 1\n    [12] => 2\n    [13] => 1\n    [14] => 2\n \
    \   [15] => 1\n    [16] => 2\n    [17] => 4\n    [18] => 4\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpjel3dv76.php:34\nStack trace:\n\
    #0 /tmp/tmpjel3dv76.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpjel3dv76.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_arr = str_split($music_string);\n \
    \   $length = count($music_arr);\n    $result = [];\n    for ($i = 0; $i < $length;\
    \ $i++) {\n        if ($music_arr[$i] == 'o') {\n            if ($music_arr[$i\
    \ + 1] == ' ') {\n                $result[] = 4;\n            } else {\n     \
    \           $result[] = 4;\n                $i++;\n            }\n        } elseif\
    \ ($music_arr[$i] == '.') {\n            $result[] = 1;\n            $i++;\n \
    \       } elseif ($music_arr[$i] == '|') {\n            $result[] = 2;\n     \
    \   }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi28u_ifl.php:41\n\
    Stack trace:\n#0 /tmp/tmpi28u_ifl.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpi28u_ifl.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $tokens = str_split($music_string);\n    $duration\
    \ = '';\n    $beat_lengths = [];\n    foreach ($tokens as $token) {\n        if\
    \ ($token == 'o') {\n            $duration .= $token;\n        } elseif ($token\
    \ == '|') {\n            $duration .= $token;\n        } elseif ($token == ' ')\
    \ {\n            $beat_lengths[] = get_beat_length($duration);\n            $duration\
    \ = '';\n        }\n    }\n    if ($duration != '') {\n        $beat_lengths[]\
    \ = get_beat_length($duration);\n    }\n    return $beat_lengths;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_beat_length()\
    \ in /tmp/tmpceyh366s.php:21\nStack trace:\n#0 /tmp/tmpceyh366s.php(32): parse_music('o\
    \ o o o')\n#1 /tmp/tmpceyh366s.php(37): candidate('o o o o')\n#2 /tmp/tmpceyh366s.php(43):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpceyh366s.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string_array = explode(' ', $music_string);\n\
    \    $music_string_array_length = count($music_string_array);\n    $result = [];\n\
    \    for ($i = 0; $i < $music_string_array_length; $i++) {\n        if ($music_string_array[$i]\
    \ == 'o') {\n            $result[] = 4;\n        } elseif ($music_string_array[$i]\
    \ == 'o|') {\n            $result[] = 2;\n        } elseif ($music_string_array[$i]\
    \ == '.|') {\n            $result[] = 1;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    // Your code here!\n}\n```\n\n\u041F\u0440\
    \u0438\u043C\u0435\u0440 \u0432\u0445\u043E\u0434\u0430 \u0438 \u0432\u044B\u0445\
    \u043E\u0434\u0430:\n\n```php\n<?php\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg03yhngj.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n}\n\nclass MusicTest extends \\PHPUnit_Framework_TestCase\
    \ {\n  public function test_example() {\n    $result = parse_music('o o| .| o|\
    \ o| .| .| .| .| o o');\n    $this->assertEquals([4, 2, 1, 2, 2, 1, 1, 1, 1, 4,\
    \ 4], $result);\n  }\n}\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Class 'PHPUnit_Framework_TestCase' not found\
    \ in /tmp/tmpd0ifmgrh.php:14\nStack trace:\n#0 {main}\n  thrown in /tmp/tmpd0ifmgrh.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $returnArr = [];\n    $music_string_arr =\
    \ explode(' ', $music_string);\n    foreach ($music_string_arr as $string) {\n\
    \        if ($string == 'o') {\n            $returnArr[] = 4;\n        } elseif\
    \ ($string == 'o|') {\n            $returnArr[] = 2;\n        } elseif ($string\
    \ == '.|') {\n            $returnArr[] = 1;\n        }\n    }\n    return $returnArr;\n\
    }\necho '<pre>';\nprint_r(parse_music('o o| .| o| o| .| .| .| .| o o'));\necho\
    \ '</pre>';\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 1\n    [3] => 2\n\
    \    [4] => 2\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n    [9]\
    \ => 4\n    [10] => 4\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    // Your code goes here.\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp56fv1vsv.php:20\n\
    Stack trace:\n#0 /tmp/tmp56fv1vsv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp56fv1vsv.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = ['o', 'o|', '.|'];\n    $notes_values\
    \ = [4, 2, 1];\n    $music_values = [];\n    $music_array = explode(' ', $music_string);\n\
    \    for ($i = 0; $i < count($music_array); $i++) {\n        $note = $music_array[$i];\n\
    \        $note_key = array_search($note, $notes);\n        $music_values[] = $notes_values[$note_key];\n\
    \    }\n    return $music_values;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx_ni9p3w.php:29\n\
    Stack trace:\n#0 /tmp/tmpx_ni9p3w.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpx_ni9p3w.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  return array_map(function($e) {\n    if ($e\
    \ == 'o') return 4;\n    if ($e == 'o|') return 2;\n    if ($e == '.|') return\
    \ 1;\n  }, explode(' ', $music_string));\n}\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq7fhvm29.php:23\n\
    Stack trace:\n#0 /tmp/tmpq7fhvm29.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpq7fhvm29.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $arr = [];\n    $arr_music = str_split($music_string);\n\
    \    foreach ($arr_music as $key => $value) {\n        if ($value == 'o') {\n\
    \            $arr[] = 4;\n        } elseif ($value == 'o' && $arr_music[$key+1]\
    \ == '|') {\n            $arr[] = 2;\n        } elseif ($value == '.' && $arr_music[$key+1]\
    \ == '|') {\n            $arr[] = 1;\n        }\n    }\n    return $arr;\n}\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3l17akpo.php:33\n\
    Stack trace:\n#0 /tmp/tmp3l17akpo.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp3l17akpo.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\t$arr = [];\n\t$x = explode(' ', $music_string);\n\
    \tforeach ($x as $value) {\n\t\t$a = substr_count($value, 'o');\n\t\t$b = substr_count($value,\
    \ '|');\n\t\t$c = substr_count($value, '.');\n\t\tif ($a !== 0) {\n\t\t\t$arr[]\
    \ = $a * 4;\n\t\t} elseif ($b !== 0) {\n\t\t\t$arr[] = $b * 2;\n\t\t} elseif ($c\
    \ !== 0) {\n\t\t\t$arr[] = $c * 1;\n\t\t}\n\t}\n\treturn $arr;\n}\nprint_r(parse_music('o\
    \ o| .| o| o| .| .| .| .| o o'));\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 4\n    [1] => 4\n    [2] => 2\n    [3] => 4\n    [4]\
    \ => 4\n    [5] => 2\n    [6] => 2\n    [7] => 2\n    [8] => 2\n    [9] => 4\n\
    \    [10] => 4\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ltiennu.php:36\n\
    Stack trace:\n#0 /tmp/tmp3ltiennu.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp3ltiennu.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    return array_map(function($note) {\n     \
    \   return $note === 'o' ? 4 : 2;\n    }, str_split(str_replace(['|', ' '], '',\
    \ $music_string)));\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptat1wm59.php:22\n\
    Stack trace:\n#0 /tmp/tmptat1wm59.php(29): test()\n#1 {main}\n  thrown in /tmp/tmptat1wm59.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $return = array();\n    $length = strlen($music_string);\n\
    \    $cursor = 0;\n    $state = 0;\n    $value = '';\n    while ($cursor < $length)\
    \ {\n        $char = $music_string[$cursor];\n        if ($state == 0) {\n   \
    \         if ($char == 'o') {\n                $state = 1;\n                $value\
    \ = '';\n            } else {\n                $state = 2;\n                $value\
    \ = '';\n            }\n        } else if ($state == 1) {\n            if ($char\
    \ == ' ') {\n                $state = 0;\n                $return[] = 4;\n   \
    \         } else if ($char == '|') {\n                $state = 3;\n          \
    \  }\n        } else if ($state == 2) {\n            if ($char == ' ') {\n   \
    \             $state = 0;\n                $return[] = 1;\n            } else\
    \ if ($char == '|') {\n                $state = 3;\n            }\n        } else\
    \ if ($state == 3) {\n            if ($char == ' ') {\n                $state\
    \ = 0;\n                $return[] = 2;\n            }\n        }\n        $cursor++;\n\
    \    }\n    return $return;\n}\n\n$tests = array(\n    'o o| .| o| o| .| .| .|\
    \ .| o o' => array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4),\n    'o| .| .| .| .| .| .|\
    \ .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .|\
    \ .| .| .| .| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o|\
    \ o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o|\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9pvgwv_v.php on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0a03o0vx.php:20\n\
    Stack trace:\n#0 /tmp/tmp0a03o0vx.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp0a03o0vx.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\t\n\t$music_string = str_replace(\"o o|\", \"\
    oh oh|\", $music_string);\n\t$music_string = str_replace(\"o o\", \"oh oh\", $music_string);\n\
    \t$music_string = str_replace(\"oh\", \"4\", $music_string);\n\t$music_string\
    \ = str_replace(\"oh|\", \"2\", $music_string);\n\t$music_string = str_replace(\"\
    |\", \"1\", $music_string);\n\t$music_string = str_replace(\".\", \"\", $music_string);\n\
    \t$music_string = str_replace(\"|\", \"\", $music_string);\n\t$music_string =\
    \ str_replace(\" \", \",\", $music_string);\n\t\n\t$music_string = explode(\"\
    ,\", $music_string);\n\t\n\t$music_string = array_filter($music_string);\n\t\n\
    \treturn $music_string;\n}\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmctwwtdt.php:34\n\
    Stack trace:\n#0 /tmp/tmpmctwwtdt.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpmctwwtdt.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  $music_string = preg_replace('/o/', 'o ', $music_string);\n\
    \  $music_string = preg_replace('/\\|/', '| ', $music_string);\n  $music_string\
    \ = preg_replace('/\\./', '. ', $music_string);\n  $music_string = preg_replace('/\\\
    s+/', ' ', $music_string);\n  $notes = explode(' ', $music_string);\n  $result\
    \ = [];\n  foreach ($notes as $note) {\n    if ($note == 'o') {\n      $result[]\
    \ = 4;\n    } elseif ($note == 'o|') {\n      $result[] = 2;\n    } elseif ($note\
    \ == '.|') {\n      $result[] = 1;\n    }\n  }\n  return $result;\n}\n\necho '<pre>'\
    \ . print_r(parse_music('o o| .| o| o| .| .| .| .| o o'), true) . '</pre>';\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 4\n    [1] => 4\n    [2] => 4\n    [3] => 4\n\
    \    [4] => 4\n    [5] => 4\n)\n</pre>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpfwg52r_n.php:38\nStack trace:\n#0 /tmp/tmpfwg52r_n.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpfwg52r_n.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  $music_array = str_split($music_string);\n \
    \ $length_array = [];\n  $hold = '';\n  foreach ($music_array as $char) {\n  \
    \  if ($char === 'o') {\n      $hold .= $char;\n    } else if ($char === ' ' ||\
    \ $char === '|') {\n      if ($hold === 'o') {\n        $length_array[] = 4;\n\
    \      } else if ($hold === 'o|') {\n        $length_array[] = 2;\n      } else\
    \ if ($hold === '.|') {\n        $length_array[] = 1;\n      }\n      $hold =\
    \ '';\n    } else {\n      $hold .= $char;\n    }\n  }\n  return $length_array;\n\
    }\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1w59px0u.php:39\n\
    Stack trace:\n#0 /tmp/tmp1w59px0u.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp1w59px0u.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  $array = str_split($music_string);\n  $notes\
    \ = array_filter($array, function($el) {\n    return $el === 'o' || $el === '|';\n\
    \  });\n  $notes = array_values($notes);\n  $beats = [];\n  $total_beats = 0;\n\
    \  foreach ($notes as $index => $note) {\n    if ($note === 'o') {\n      $beats[]\
    \ = 4;\n      $total_beats += 4;\n    } else {\n      if ($total_beats % 2 ==\
    \ 0) {\n        $beats[] = 2;\n        $total_beats += 2;\n      } else {\n  \
    \      $beats[] = 1;\n        $total_beats += 1;\n      }\n    }\n  }\n  return\
    \ $beats;\n}\n\nprint_r(parse_music('o o| .| o| o| .| .| .| .| o o'));\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 4\n    [1] => 4\n    [2] => 2\n    [3] => 2\n    [4]\
    \ => 4\n    [5] => 2\n    [6] => 4\n    [7] => 2\n    [8] => 2\n    [9] => 2\n\
    \    [10] => 2\n    [11] => 2\n    [12] => 4\n    [13] => 4\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp74qtbbep.php:44\nStack trace:\n\
    #0 /tmp/tmp74qtbbep.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp74qtbbep.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\t$notetab = array();\n\t$music_array = explode('\
    \ ', $music_string);\n\t$note_lengthes = array(\n\t\t'o' => 4,\n\t\t'o|' => 2,\n\
    \t\t'.|' => 1\n\t);\n\tforeach ($music_array as $index => $music_el) {\n\t\tif\
    \ (array_key_exists($music_el, $note_lengthes)) {\n\t\t\t$notetab[] = $note_lengthes[$music_el];\n\
    \t\t}\n\t}\n\treturn $notetab;\n}\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  $notes = explode(' ', $music_string);\n  $res\
    \ = [];\n  foreach ($notes as $note) {\n    if ($note === 'o') $res[] = 4;\n \
    \   else if ($note === 'o|') $res[] = 2;\n    else if ($note === '.|') $res[]\
    \ = 1;\n  }\n  return $res;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n\t// Complete this function ...\n\t$result = array();\n\
    \t$music_string = str_replace(\" \", \"\", $music_string);\n\t$parts = explode(\"\
    o\", $music_string);\n\tforeach ($parts as $part) {\n\t\tif (strlen($part) ==\
    \ 0) {\n\t\t\t$result[] = 4;\n\t\t} else {\n\t\t\t$result[] = 4 - strlen($part);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\necho implode(\" \", parse_music('o o| .| o|\
    \ o| .| .| .| .| o o'));\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "4 4 1 3 -5 4 4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3aq6avtr.php:32\n\
    Stack trace:\n#0 /tmp/tmp3aq6avtr.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp3aq6avtr.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  $notes = str_split($music_string);\n  $return_array\
    \ = [];\n  foreach ($notes as $key => $value) {\n    if ($value == 'o') {\n  \
    \    $return_array[] = 4;\n    } elseif ($value == 'o' && $notes[$key + 1] ==\
    \ '|') {\n      $return_array[] = 2;\n    } elseif ($value == '.' && $notes[$key\
    \ + 1] == '|') {\n      $return_array[] = 1;\n    }\n  }\n  return $return_array;\n\
    }\n\nprint_r(parse_music('o o| .| o| o| .| .| .| .| o o'));\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 4\n    [1] => 4\n    [2] => 1\n    [3] => 4\n    [4]\
    \ => 4\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n    [9] => 4\n\
    \    [10] => 4\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo4mxmffk.php:35\n\
    Stack trace:\n#0 /tmp/tmpo4mxmffk.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpo4mxmffk.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
