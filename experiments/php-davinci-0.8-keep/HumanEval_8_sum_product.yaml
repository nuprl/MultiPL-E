name: HumanEval_8_sum_product
language: php
prompt: "<?php\n// For a given list of integers, return a tuple consisting of a sum\
  \ and a product of all the integers in a list.\n// Empty sum should be equal to\
  \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n\
  // >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers) {\n"
tests: "function candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
  \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
  \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
  \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $sum = array_sum($numbers);\n  $product = 1;\n  foreach ($numbers\
    \ as $number) {\n    $product *= $number;\n  }\n  return array($sum, $product);\n\
    }\n$numbers = array(3, 6, 8, 2);\n$result = sum_product($numbers);\nprint_r($result);\n\
    echo \"\\n\";", "\t$sum = 0;\n\t$product = 1;\n\tforeach ($numbers as $number)\
    \ {\n\t\t$sum += $number;\n\t\t$product *= $number;\n\t}\n\treturn array($sum,\
    \ $product);\n}\n\necho \"Enter integers separated by comma and hit Enter: \"\
    ;\n$input = explode(\",\", readline());\n$result = sum_product($input);\necho\
    \ \"Result: \" . json_encode($result);", "    $sum = array_sum($numbers);\n  \
    \  $prod = 1;\n    foreach ($numbers as $num) {\n        $prod *= $num;\n    }\n\
    \    return array($sum, $prod);\n}\n", "\tif (count($numbers) == 0) {\n\t\treturn\
    \ array(0, 1);\n\t}\n\t$sum = 0;\n\t$product = 1;\n\tforeach ($numbers as $number)\
    \ {\n\t\t$sum += $number;\n\t\t$product *= $number;\n\t}\n\treturn array($sum,\
    \ $product);\n}", "\t// Use array_sum and array_product.\n\t$sum = array_sum($numbers);\n\
    \t$product = array_product($numbers);\n\treturn array($sum, $product);\n}\n",
  "    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n       \
    \ $sum += $number;\n        $product *= $number;\n    }\n    return [$sum, $product];\n\
    }", "  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum\
    \ += $number;\n    $product *= $number;\n  }\n  return [$sum, $product];\n}\n\n\
    var_dump(sum_product([]));\nvar_dump(sum_product([1, 2, 3, 4]));", "  $sum = 0;\n\
    \  $product = 1;\n  if (!empty($numbers)) {\n    foreach ($numbers as $number)\
    \ {\n      $sum += $number;\n      $product *= $number;\n    }\n  }\n  return\
    \ array($sum, $product);\n}\n\necho json_encode(sum_product([1, 2, 3, 4])) . \"\
    \\n\";\necho json_encode(sum_product([])) . \"\\n\";\necho json_encode(sum_product([10,\
    \ 15, 20])) . \"\\n\";\necho json_encode(sum_product([0, -2, 3, -4])) . \"\\n\"\
    ;", "\t$sum = 0;\n\t$product = 1;\n\tforeach ($numbers as $number) {\n\t\t$sum\
    \ += $number;\n\t\t$product *= $number;\n\t}\n\t$result = array($sum, $product);\n\
    \treturn $result;\n}\n\n$result = sum_product([1, 2, 3, 4]);\nforeach ($result\
    \ as $item) {\n\techo \"$item \";\n}\n", "    $sum = 0;\n    $product = 1;\n \
    \   foreach ($numbers as $number) {\n        $sum += $number;\n        $product\
    \ *= $number;\n    }\n    return array($sum, $product);\n}\n\nprint_r(sum_product([]));\n\
    print_r(sum_product([1, 2, 3, 4]));", "    $sum = 0;\n    $product = 1;\n    foreach\
    \ ($numbers as $n) {\n        $sum += $n;\n        $product *= $n;\n    }\n  \
    \  return [$sum, $product];\n}\n", "  $sum = 0;\n  $product = 1;\n  for ($i =\
    \ 0; $i < count($numbers); $i++) {\n    $sum += $numbers[$i];\n    $product *=\
    \ $numbers[$i];\n  }\n  return array($sum, $product);\n}\n\n$sumProduct = sum_product([1,\
    \ 2, 3, 4]);\nprint_r($sumProduct);\n", "    $sum = 0;\n    $product = 1;\n  \
    \  foreach ($numbers as $number) {\n        $sum += $number;\n        $product\
    \ *= $number;\n    }\n    return array($sum, $product);\n}", "    $sum = 0;\n\
    \    $product = 1;\n    if (count($numbers) == 0) {\n        return [$sum, $product];\n\
    \    }\n    foreach ($numbers as $number) {\n        $sum += $number;\n      \
    \  $product *= $number;\n    }\n    return [$sum, $product];\n}\n$numbers = [1,\
    \ 2, 3, 4];\necho implode(\", \", sum_product($numbers));\necho \"\\n\";", " \
    \   $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n      \
    \  $sum += $number;\n        $product *= $number;\n    }\n    return array($sum,\
    \ $product);\n}\n", "    $sum = 0;\n    $product = 1;\n    if (count($numbers)\
    \ == 0) {\n        return [$sum, $product];\n    }\n    else {\n        foreach\
    \ ($numbers as $number) {\n            $sum += $number;\n            $product\
    \ *= $number;\n        }\n        return [$sum, $product];\n    }\n}\n", "   \
    \ $sum = array_sum($numbers);\n    $product = array_product($numbers);\n    $tuple\
    \ = array(\n        $sum,\n        $product\n    );\n    return $tuple;\n}\nprint_r(sum_product([1,\
    \ 2, 3, 4]));", "    $arrSum = 0;\n    $arrProduct = 1;\n    foreach ($numbers\
    \ as $num) {\n        $arrSum += $num;\n        $arrProduct *= $num;\n    }\n\
    \    return [$arrSum, $arrProduct];\n}\n", "   $sum = 0;\n   $product = 1;\n \
    \  foreach ($numbers as $number) {\n      $sum += $number;\n      $product *=\
    \ $number;\n   }\n   return array($sum, $product);\n}\n", "  // Write your code\
    \ here\n  // To print results to the standard output you can use print\n  // Example:\
    \ print \"Hello world!\";\n  if(empty($numbers)){\n  \treturn array(0,1);\n  }\n\
    \  $sum = array_sum($numbers);\n  $product = 1;\n  foreach ($numbers as $number)\
    \ {\n  \t$product *= $number;\n  }\n  return array($sum,$product);\n}", "  $sum\
    \ = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum += $number;\n\
    \    $product *= $number;\n  }\n  return [$sum, $product];\n}\nprint_r(sum_product([]));\n\
    print_r(sum_product([1, 2, 3, 4]));\necho '<br>';", "  $sum = 0;\n  $product =\
    \ 1;\n  foreach ($numbers as $n) {\n    $sum += $n;\n    $product *= $n;\n  }\n\
    \  return [$sum, $product];\n}\n", "    $sum = 0;\n    $product = 1;\n    foreach\
    \ ($numbers as $number) {\n        $sum += $number;\n        $product *= $number;\n\
    \    }\n    return array($sum, $product);\n}\n$result = sum_product([1, 2, 3,\
    \ 4]);\nprint_r($result);", "  if(count($numbers) == 0) {\n    return (0, 1);\n\
    \  }\n  $product = 1;\n  $sum = 0;\n  foreach($numbers as $value) {\n    $product\
    \ *= $value;\n    $sum += $value;\n  }\n  return [$sum, $product];\n}\n$result\
    \ = sum_product([1, 2, 3, 4]);\necho \"result: \" . implode(\",\", $result) .\
    \ \"\\n\";\n", "    return array_sum($numbers) && array_product($numbers);\n}\n",
  "  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $value) {\n    $sum += $value;\n\
    \    $product *= $value;\n  }\n  return array($sum, $product);\n}\n", "    $sum\
    \ = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n        $sum +=\
    \ $number;\n        $product *= $number;\n    }\n    return array($sum, $product);\n\
    }\n", "    $sum = array_sum($numbers);\n    $product = array_product($numbers);\n\
    \    return array($sum, $product);\n}", "  $sum = 0;\n  $product = 1;\n  foreach\
    \ ($numbers as $number) {\n    $sum += $number;\n    $product *= $number;\n  }\n\
    \  return array($sum, $product);\n}\n", "  $result = array();\n  $sum = 0;\n \
    \ $product = 1;\n  if (!empty($numbers)) {\n    foreach ($numbers as $number)\
    \ {\n      $sum += $number;\n      $product *= $number;\n    }\n  }\n  array_push($result,\
    \ $sum, $product);\n  return $result;\n}\n", "    $sum = 0;\n    $product = 1;\n\
    \    foreach ($numbers as $number) {\n        $sum += $number;\n        $product\
    \ *= $number;\n    }\n    return array($sum, $product);\n}\n", "    $sum = 0;\n\
    \    $product = 1;\n    foreach ($numbers as $num) {\n        $sum += $num;\n\
    \        $product *= $num;\n    }\n    return array($sum, $product);\n}\nprint_r(sum_product([]));\n\
    print_r(sum_product([1, 2, 3, 4]));", "\tif (empty($numbers)) {\n\t\treturn array(0,\
    \ 1);\n\t}\n\t$sum = 0;\n\t$product = 1;\n\tforeach ($numbers as $number) {\n\t\
    \t$sum += $number;\n\t\t$product *= $number;\n\t}\n\treturn array($sum, $product);\n\
    }", "\t$sum = 0;\n\t$product = 1;\n\tforeach ($numbers as $number) {\n\t\t$sum\
    \ += $number;\n\t\t$product *= $number;\n\t}\n\treturn array($sum, $product);\n\
    }", "    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $key => $number)\
    \ {\n        $sum += $number;\n        $product *= $number;\n    }\n    return\
    \ array($sum, $product);\n}\n", "    $sum = array_sum($numbers);\n    $product\
    \ = 1;\n    foreach ($numbers as $number) {\n        $product *= $number;\n  \
    \  }\n    return [$sum, $product];\n}\n", "\t$result = array(array_sum($numbers),\
    \ array_product($numbers));\n\treturn $result;\n}\n", "\t$sum = array_sum($numbers);\n\
    \t$product = array_product($numbers);\n\treturn array($sum, $product);\n}", " \
    \   $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n      \
    \  $sum += $number;\n        $product *= $number;\n    }\n    return [$sum, $product];\n\
    }\n", "\t$sum = 0;\n\t$product = 1;\n\tfor ($i = 0; $i < count($numbers); $i++)\
    \ {\n\t\t$sum += $numbers[$i];\n\t\t$product *= $numbers[$i];\n\t}\n\treturn array($sum,\
    \ $product);\n}\n", "  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number)\
    \ {\n    $sum += $number;\n    $product *= $number;\n  }\n  return [$sum, $product];\n\
    }\n\nprint_r(sum_product([]));\nprint_r(sum_product([1, 2, 3, 4]));", "  $sum\
    \ = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum += $number;\n\
    \    $product *= $number;\n  }\n  return [$sum, $product];\n}\n$numbers = [1,\
    \ 2, 3, 4];\nprint_r(sum_product($numbers));", "  $sum = 0;\n  $product = 1;\n\
    \  foreach ($numbers as $number) {\n    $sum += $number;\n    $product *= $number;\n\
    \  }\n  return array($sum, $product);\n}\necho json_encode(sum_product([1, 2,\
    \ 3, 4])) . PHP_EOL;", "  if (empty($numbers)) return [0, 1];\n  $sum = 0;\n \
    \ $product = 1;\n  foreach ($numbers as $number) {\n    $sum += $number;\n   \
    \ $product *= $number;\n  }\n  return [$sum, $product];\n}", "\t$sum = 0;\n\t\
    $product = 1;\n\tforeach ($numbers as $number) {\n\t\t$sum += $number;\n\t\t$product\
    \ *= $number;\n\t}\n\treturn array($sum, $product);\n}\n\necho \"<pre>\";\nprint_r(sum_product([]));\n\
    print_r(sum_product([1, 2, 3, 4]));\necho \"</pre>\";", "  $sum = 0;\n  $product\
    \ = 1;\n  foreach ($numbers as $number) {\n    $sum += $number;\n    $product\
    \ *= $number;\n  }\n  $tuple = array($sum, $product);\n  return $tuple;\n}", " \
    \   if (count($numbers) == 0) {\n        return array(0, 1);\n    }\n    $sum\
    \ = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n        $sum +=\
    \ $number;\n        $product *= $number;\n    }\n    return array($sum, $product);\n\
    }", "    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $n) {\n      \
    \  $sum += $n;\n        $product *= $n;\n    }\n    return array($sum, $product);\n\
    }", "  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum\
    \ += $number;\n    $product *= $number;\n  }\n  return [$sum, $product];\n}",
  "\t$sum = 0;\n\t$product = 1;\n\tforeach ($numbers as $number) {\n\t\t$sum += $number;\n\
    \t\t$product *= $number;\n\t}\n\treturn [$sum, $product];\n}\n", "  $sum = array_sum($numbers);\n\
    \  $product = array_product($numbers);\n  $tuple = array($sum, $product);\n  return\
    \ $tuple;\n}\n", "    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $num)\
    \ {\n        $sum += $num;\n        $product *= $num;\n    }\n    return [$sum,\
    \ $product];\n}\n$res = sum_product([1, 2, 3, 4]);\necho $res[0] . ', ' . $res[1];",
  "  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $n) {\n    $sum += $n;\n \
    \   $product *= $n;\n  }\n  return [$sum, $product];\n}\necho implode(\", \",\
    \ sum_product([1, 2, 3, 4]));\necho \"\\n\";\n", "    $sum = 0;\n    $product\
    \ = 1;\n    if(count($numbers) == 0) {\n        return [$sum, $product];\n   \
    \ }\n    else {\n        foreach($numbers as $number) {\n            $sum += $number;\n\
    \            $product *= $number;\n        }\n        return [$sum, $product];\n\
    \    }\n}\n", "  // iterate over the list\n  //    sum all the numbers\n  // \
    \   multiply all the numbers\n  // return tuple of the sum and product\n  $sum\
    \ = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum += $number;\n\
    \    $product *= $number;\n  }\n  return array($sum, $product);\n}\n", "    return\
    \ [array_sum($numbers), array_product($numbers)];\n}\n\n$data = [\n    [],\n \
    \   [1, 2, 3, 4],\n];\n\n$expected = [\n    [0, 1],\n    [10, 24],\n];\n\nforeach\
    \ ($data as $index => $numbers) {\n    $result = sum_product($numbers);\n    $expected_value\
    \ = $expected[$index];\n    if ($result === $expected_value) {\n        echo 'PASS';\n\
    \    } else {\n        echo 'FAIL';\n    }\n    echo \"\\n\";\n}", "    if (empty($numbers))\
    \ {\n        return [0, 1];\n    }\n    $sum = 0;\n    $product = 1;\n    foreach\
    \ ($numbers as $number) {\n        $sum += $number;\n        $product *= $number;\n\
    \    }\n    return [$sum, $product];\n}\n", "    $sum = 0;\n    $product = 1;\n\
    \    foreach ($numbers as $num) {\n        $sum += $num;\n        $product *=\
    \ $num;\n    }\n    return array($sum, $product);\n}", "    if (sizeof($numbers)\
    \ == 0) {\n        return array(0, 1);\n    } else {\n        $sum = array_sum($numbers);\n\
    \        $product = 1;\n        foreach ($numbers as $number) {\n            $product\
    \ *= $number;\n        }\n        return array($sum, $product);\n    }\n}\n",
  "\t$sum = 0;\n\t$product = 1;\n\tforeach ($numbers as $number) {\n\t\t$sum += $number;\n\
    \t\t$product *= $number;\n\t}\n\treturn [$sum, $product];\n}\n", "    return [array_sum($numbers),\
    \ array_product($numbers)];\n}", "  $sum = 0;\n  $product = 1;\n  foreach ($numbers\
    \ as $number) {\n    $sum += $number;\n    $product *= $number;\n  }\n  return\
    \ [$sum, $product];\n}\n", "    $sum = 0;\n    $product = 1;\n    if (sizeof($numbers)\
    \ < 1) {\n        return array($sum, $product);\n    }\n    foreach ($numbers\
    \ as $number) {\n        $sum += $number;\n        $product *= $number;\n    }\n\
    \    return array($sum, $product);\n}\n", "    $sum = 0;\n    $product = 1;\n\
    \    foreach ($numbers as $number) {\n        $sum += $number;\n        $product\
    \ *= $number;\n    }\n    return [$sum, $product];\n}\n", "    $sum = 0;\n   \
    \ $product = 1;\n    foreach ($numbers as $number) {\n        $sum += $number;\n\
    \        $product *= $number;\n    }\n    return array($sum, $product);\n}\n",
  "    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $num) {\n        $sum\
    \ += $num;\n        $product *= $num;\n    }\n    return [$sum, $product];\n}\n\
    $numbers = [2, 3, 4, 5];\nprint_r(sum_product($numbers));", "    $result = array();\n\
    \    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n     \
    \   $sum += $number;\n        $product *= $number;\n    }\n    array_push($result,\
    \ $sum, $product);\n    return $result;\n}\nprint_r(sum_product([1, 2, 3, 4]));\n\
    echo \"<br>\";\n", "    $sum = 0;\n    $product = 1;\n    foreach ($numbers as\
    \ $number) {\n        $sum += $number;\n        $product *= $number;\n    }\n\
    \    return array($sum, $product);\n}\n\nprint_r(sum_product([]));\nprint_r(sum_product([1,\
    \ 2, 3, 4]));", "    $result = [];\n    if (!empty($numbers)) {\n        $result[0]\
    \ = array_sum($numbers);\n        $result[1] = array_product($numbers);\n    }\
    \ else {\n        $result[0] = 0;\n        $result[1] = 1;\n    }\n    return\
    \ $result;\n}\n$numbers = [1, 2, 3, 4];\nprint_r(sum_product($numbers));", " \
    \ $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum += $number;\n\
    \    $product *= $number;\n  }\n  return array($sum, $product);\n}\n", "    if\
    \ (empty($numbers)) {\n        return [0, 1];\n    }\n    $sum = array_sum($numbers);\n\
    \    $product = array_product($numbers);\n    return [$sum, $product];\n}\n\n\
    print_r(sum_product([]));\necho '<br>';\nprint_r(sum_product([1, 2, 3, 4]));\n\
    echo '<br>';", "    if (count($numbers) === 0) {\n        return [0, 1];\n   \
    \ }\n    $sum = array_sum($numbers);\n    $product = array_product($numbers);\n\
    \    return [$sum, $product];\n}\n", "  if (empty($numbers)) return [0, 1];\n\
    \  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum +=\
    \ $number;\n    $product *= $number;\n  }\n  return [$sum, $product];\n}\nprint_r(sum_product([]));\n\
    print_r(sum_product([1, 2, 3, 4]));\n", "\tif (count($numbers) == 0) {\n\t\treturn\
    \ [0, 1];\n\t}\n\telse {\n\t\t$sum = 0;\n\t\t$product = 1;\n\t\tforeach ($numbers\
    \ as $number) {\n\t\t\t$sum += $number;\n\t\t\t$product *= $number;\n\t\t}\n\t\
    \treturn [$sum, $product];\n\t}\n}\n", "    $sum = 0;\n    $product = 1;\n   \
    \ foreach ($numbers as $number) {\n        $sum += $number;\n        $product\
    \ *= $number;\n    }\n    return [$sum, $product];\n}\n", "    $sum = 0;\n   \
    \ $product = 1;\n    foreach ($numbers as $number) {\n        $sum += $number;\n\
    \        $product *= $number;\n    }\n    return array($sum, $product);\n}\n",
  "  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum += $number;\n\
    \    $product *= $number;\n  }\n  return [$sum, $product];\n}\necho implode(',\
    \ ', sum_product([1, 2, 3, 4]));", "   $tuple = ['sum' => 0, 'product' => 1];\n\
    \   if (sizeof($numbers) == 0) {\n      return $tuple;\n   }\n   $tuple['sum']\
    \ = array_sum($numbers);\n   $tuple['product'] = array_product($numbers);\n  \
    \ return $tuple;\n}", "    $sum = 0;\n    $product = 1;\n    foreach ($numbers\
    \ as $num) {\n        $sum += $num;\n        $product *= $num;\n    }\n    return\
    \ [$sum, $product];\n}", "  // your code here\n}\n", "    $sum = 0;\n    $product\
    \ = 1;\n    foreach ($numbers as $number) {\n        $sum += $number;\n      \
    \  $product *= $number;\n    }\n    return array($sum, $product);\n}\n", "  $sum\
    \ = 0;\n  $product = 1;\n  for($i = 0; $i < count($numbers); $i++) {\n    $sum\
    \ += $numbers[$i];\n    $product *= $numbers[$i];\n  }\n  return $tuple = [$sum,\
    \ $product];\n}", "  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number)\
    \ {\n    $sum += $number;\n    $product *= $number;\n  }\n  return array($sum,\
    \ $product);\n}\n\nprint_r(sum_product([]));\nprint_r(sum_product([1, 2, 3, 4]));\n",
  "    return [array_sum($numbers), array_product($numbers)];\n}", "    $sum = 0;\n\
    \    $product = 1;\n    foreach ($numbers as $num) {\n        $sum += $num;\n\
    \        $product *= $num;\n    }\n    return [$sum, $product];\n}", "\tif (count($numbers)\
    \ == 0) {\n\t\treturn [0, 1];\n\t}\n\t$sum = array_sum($numbers);\n\t$product\
    \ = array_product($numbers);\n\treturn [$sum, $product];\n}\n", "    $sum = 0;\n\
    \    $product = 1;\n    foreach ($numbers as $number) {\n        $sum += $number;\n\
    \        $product *= $number;\n    }\n    return [$sum, $product];\n}\n", "\t\
    if (empty($numbers)) {\n\t\treturn [0, 1];\n\t}\n\t$sum = array_sum($numbers);\n\
    \t$product = array_product($numbers);\n\treturn [$sum, $product];\n}\n\necho 'returns\
    \ [0, 1]: ';\necho sum_product([])[0] . ', ' . sum_product([])[1] . '<br>';\n\
    echo 'returns [10, 24]: ';\necho sum_product([1, 2, 3, 4])[0] . ', ' . sum_product([1,\
    \ 2, 3, 4])[1] . '<br>';\n", "    $sum = 0;\n    $product = 1;\n    foreach ($numbers\
    \ as $number) {\n        $sum += $number;\n        $product *= $number;\n    }\n\
    \    return [$sum, $product];\n}\n", "    $sum = 0;\n    $product = 1;\n    foreach\
    \ ($numbers as $value) {\n        $sum += $value;\n        $product *= $value;\n\
    \    }\n    return \"($sum, $product)\";\n}\n\necho sum_product([]) . \"\\n\"\
    ;\necho sum_product([1, 2, 3, 4]) . \"\\n\";", "    $sum = 0;\n    $product =\
    \ 1;\n    foreach ($numbers as $key => $value) {\n        $sum += $value;\n  \
    \      $product *= $value;\n    }\n    return array($sum, $product);\n}", "  $sum\
    \ = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum += $number;\n\
    \    $product *= $number;\n  }\n  return [$sum, $product];\n}\n", "    $sum =\
    \ 0;\n    $product = 1;\n    foreach ($numbers as $num) {\n        $sum += $num;\n\
    \        $product *= $num;\n    }\n    return array($sum, $product);\n}\n", " \
    \   $sum = 0;\n    $product = 1;\n    foreach ($numbers as $num) {\n        $sum\
    \ += $num;\n        $product *= $num;\n    }\n    return [$sum, $product];\n}\n",
  "  $sum = 0;\n  $product = 1;\n  if (count($numbers) == 0) {\n    return array(0,\
    \ 1);\n  }\n  foreach ($numbers as $number) {\n    $sum += $number;\n    $product\
    \ *= $number;\n  }\n  return array($sum, $product);\n}\n", "    $sum = 0;\n  \
    \  $product = 1;\n    foreach ($numbers as $number) {\n        $sum += $number;\n\
    \        $product *= $number;\n    }\n    return array($sum, $product);\n}\n",
  "    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n       \
    \ $sum += $number;\n        $product *= $number;\n    }\n    return array($sum,\
    \ $product);\n}\n\n$numbers = array(1, 2, 3, 4);\n$result = sum_product($numbers);\n\
    var_dump($result);", "    $sum = 0;\n    $product = 1;\n    if (count($numbers)\
    \ > 0) {\n        foreach ($numbers as $number) {\n            $sum += $number;\n\
    \            $product *= $number;\n        }\n    }\n    return array(\n     \
    \   $sum,\n        $product\n    );\n}\n", "    $sum = array_sum($numbers);\n\
    \    $product = array_product($numbers);\n    return [$sum, $product];\n}\necho\
    \ implode(', ', sum_product([]));\necho \"\\n\";\necho implode(', ', sum_product([1,\
    \ 2, 3, 4]));\necho \"\\n\";\n", "    $sum = 0;\n    $product = 1;\n    foreach\
    \ ($numbers as $num) {\n        $sum += $num;\n        $product *= $num;\n   \
    \ }\n    return [$sum, $product];\n}", "    $sum = 0;\n    $product = 1;\n   \
    \ if (count($numbers) != 0) {\n        foreach ($numbers as $number) {\n     \
    \       $sum += $number;\n            $product *= $number;\n        }\n    }\n\
    \    return array($sum, $product);\n}\n\necho implode(', ', sum_product([1, 2,\
    \ 3, 4]));", "  if(empty($numbers)) {\n    return [0, 1];\n  }\n  $sum = 0;\n\
    \  $product = 1;\n  foreach($numbers as $num) {\n    $sum += $num;\n    $product\
    \ *= $num;\n  }\n  return [$sum, $product];\n}\n", "    $sum = 0;\n    $product\
    \ = 1;\n    foreach ($numbers as $number) {\n        $sum += $number;\n      \
    \  $product *= $number;\n    }\n    return [$sum, $product];\n}\n", "  $sum =\
    \ 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum += $number;\n\
    \    $product *= $number;\n  }\n  return array($sum, $product);\n}\n", "    $result\
    \ = [0, 1];\n    foreach ($numbers as $value) {\n        $result[0] += $value;\n\
    \        $result[1] *= $value;\n    }\n    return $result;\n}\n", "    $product\
    \ = array_product($numbers);\n    $sum = array_sum($numbers);\n    $result = array($sum,\
    \ $product);\n    return $result;\n}\n", "    $sum = array_sum($numbers);\n  \
    \  $product = array_product($numbers);\n    return \"($sum, $product)\";\n}\n\n\
    echo sum_product([]) . \"\\n\";\necho sum_product([1, 2, 3, 4]) . \"\\n\";\n",
  "  $a = 0;\n  $b = 1;\n  foreach ($numbers as $number) {\n    $a += $number;\n \
    \   $b *= $number;\n  }\n  return array($a, $b);\n}\nprint_r(sum_product([]));\n\
    print_r(sum_product([1, 2, 3, 4]));\n", "  $sum = 0;\n  $product = 1;\n  foreach\
    \ ($numbers as $number) {\n    $sum += $number;\n    $product *= $number;\n  }\n\
    \  return array($sum, $product);\n}\nprint_r(sum_product([]));\nprint_r(sum_product([1,\
    \ 2, 3, 4]));\n", "    $sum = 0;\n    $product = 1;\n    foreach ($numbers as\
    \ $key => $value) {\n        $sum += $value;\n        $product *= $value;\n  \
    \  }\n    return array($sum, $product);\n}\necho '<pre>';\nprint_r(sum_product([]));\n\
    print_r(sum_product([1, 2, 3, 4]));\necho '</pre>';\n", "    if(empty($numbers))\
    \ {\n        return array(0, 1);\n    }\n    $sum = 0;\n    $product = 1;\n  \
    \  foreach($numbers as $number) {\n        $sum += $number;\n        $product\
    \ *= $number;\n    }\n    return array($sum, $product);\n}", "    if (empty($numbers))\
    \ {\n        return array(0, 1);\n    } else {\n        $sum = 0;\n        $product\
    \ = 1;\n        foreach ($numbers as $number) {\n            $sum += $number;\n\
    \            $product *= $number;\n        }\n        return array($sum, $product);\n\
    \    }\n}", "    $sum = 0;\n    $product = 1;\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        $sum += $numbers[$i];\n        $product *= $numbers[$i];\n\
    \    }\n    return array($sum, $product);\n}\n$result = sum_product([1, 2, 3,\
    \ 4]);\necho $result[0] . \" \" . $result[1];", "    $sum = array_sum($numbers);\n\
    \    $product = array_product($numbers);\n    if ($sum == 0) {\n        return\
    \ 0;\n    } elseif ($product == 1) {\n        return 1;\n    } else {\n      \
    \  return ($sum, $product);\n    }\n}", "\t$result = [0, 1];\n\tforeach ($numbers\
    \ as $n) {\n\t\t$result[0] += $n;\n\t\t$result[1] *= $n;\n\t}\n\treturn $result;\n\
    }\n", "    if (empty($numbers)) {\n        return array(0, 1);\n    }\n    $sum\
    \ = 0;\n    $product = 1;\n    foreach ($numbers as $n) {\n        $sum += $n;\n\
    \        $product *= $n;\n    }\n    return array($sum, $product);\n}\nprint_r(sum_product([]));\n\
    print_r(sum_product([1, 2, 3, 4]));", "    $sum = 0;\n    $product = 1;\n    foreach\
    \ ($numbers as $number) {\n        $sum += $number;\n        $product *= $number;\n\
    \    }\n    return [$sum, $product];\n}\nprint_r(sum_product([1, 2, 3, 4]));",
  "    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $num) {\n        $sum\
    \ += $num;\n        $product *= $num;\n    }\n    return array($sum, $product);\n\
    }\n", "    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n\
    \        $sum += $number;\n        $product *= $number;\n    }\n    return array($sum,\
    \ $product);\n}\n", "    if (count($numbers) == 0) {\n        return [0, 1];\n\
    \    }\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n\
    \        $sum += $number;\n        $product *= $number;\n    }\n    return [$sum,\
    \ $product];\n}\n$res = sum_product([1, 2, 3, 4]);\nprint_r($res);\necho \"<br>\"\
    ;\necho \"<br>\";\necho \"<br>\";", "  $result = array_reduce($numbers, function($carry,\
    \ $item) {\n    $carry[0] += $item;\n    $carry[1] *= $item;\n    return $carry;\n\
    \  }, array(0, 1));\n  return $result;\n}\n", "\t$sum = 0;\n\t$product = 1;\n\t\
    foreach ($numbers as $num) {\n\t\t$sum += $num;\n\t\t$product *= $num;\n\t}\n\t\
    return array ($sum, $product);\n}\n", "    $sum = 0;\n    $product = 1;\n    foreach\
    \ ($numbers as $number) {\n        $sum += $number;\n        $product *= $number;\n\
    \    }\n    return array($sum, $product);\n}\n\nprint_r(sum_product([]));\nprint_r(sum_product([1,\
    \ 2, 3, 4]));", "    $numbers = array_filter($numbers);\n    $sum = array_sum($numbers);\n\
    \    $product = array_product($numbers);\n    $new_array = [$sum, $product];\n\
    \    return $new_array;\n}\n", "    $sum = 0;\n    $product = 1;\n    foreach\
    \ ($numbers as $value) {\n        $sum += $value;\n        $product *= $value;\n\
    \    }\n    return array ($sum, $product);\n}", "    return array_reduce($numbers,\
    \ function($acc, $item) {\n        $acc[0] += $item;\n        $acc[1] *= $item;\n\
    \        return $acc;\n    }, [0, 1]);\n}", "  $sum = 0;\n  $product = 1;\n  foreach\
    \ ($numbers as $number) {\n    $sum += $number;\n    $product *= $number;\n  }\n\
    \  return array($sum, $product);\n}\n\nprint_r(sum_product([]));\nprint_r(sum_product([1,\
    \ 2, 3, 4]));", "    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $num)\
    \ {\n        $sum += $num;\n        $product *= $num;\n    }\n    return array($sum,\
    \ $product);\n}\n", "    if (empty($numbers)) {\n        return [0, 1];\n    }\n\
    \n    $sum = array_sum($numbers);\n    $product = array_product($numbers);\n\n\
    \    return [$sum, $product];\n}\n", "\tif (count($numbers) === 0) {\n\t\treturn\
    \ array(0, 1);\n\t}\n\t$sum = array_sum($numbers);\n\t$product = array_product($numbers);\n\
    \treturn array($sum, $product);\n}\necho var_dump(sum_product([]));\necho var_dump(sum_product([1,\
    \ 2, 3, 4]));\n", "    $sum = 0;\n    $product = 1;\n    foreach ($numbers as\
    \ $number) {\n        $sum += $number;\n        $product *= $number;\n    }\n\
    \    return [$sum, $product];\n}", "\treturn array_sum($numbers) . ', ' . array_product($numbers);\n\
    }\n", "\t$sum = 0;\n\t$product = 1;\n\tforeach ($numbers as $number) {\n\t\t$sum\
    \ += $number;\n\t\t$product *= $number;\n\t}\n\treturn array($sum, $product);\n\
    }\n", "    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n\
    \        $sum += $number;\n        $product *= $number;\n    }\n    return array($sum,\
    \ $product);\n}", "   $sum = 0;\n   $product = 1;\n   foreach ($numbers as $n)\
    \ {\n       $sum += $n;\n       $product *= $n;\n   }\n   return [$sum, $product];\n\
    }\necho json_encode(sum_product([1, 2, 3, 4])) . \"\\n\";\necho json_encode(sum_product([]))\
    \ . \"\\n\";", "    $product = 1;\n    $sum = 0;\n    if (empty($numbers)) {\n\
    \        return [$sum, $product];\n    }\n    foreach ($numbers as $number) {\n\
    \        $product *= $number;\n        $sum += $number;\n    }\n    return [$sum,\
    \ $product];\n}\nprint_r(sum_product([]));\nprint_r(sum_product([1, 2, 3, 4]));",
  "    $sum = array_sum($numbers);\n    $product = array_product($numbers);\n    return\
    \ [$sum, $product];\n}", "    $sum = 0;\n    $product = 1;\n    foreach ($numbers\
    \ as $number) {\n        $sum += $number;\n        $product *= $number;\n    }\n\
    \    return array($sum, $product);\n}\necho implode(\", \", sum_product([1, 2,\
    \ 3, 4]));\n", "    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number)\
    \ {\n        $sum += $number;\n        $product *= $number;\n    }\n    return\
    \ [$sum, $product];\n}\necho '<pre>';\nprint_r(sum_product([]));\necho '</pre>';\n\
    echo '<pre>';\nprint_r(sum_product([1, 2, 3, 4]));\necho '</pre>';", "  if(empty($numbers)){\n\
    \    return [0, 1];\n  }\n  $sum = 0;\n  $product = 1;\n  foreach($numbers as\
    \ $number){\n    $sum += $number;\n    $product *= $number;\n  }\n  return [$sum,\
    \ $product];\n}", "    if (empty($numbers)) {\n        return [0, 1];\n    }\n\
    \    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $num) {\n        $sum\
    \ += $num;\n        $product *= $num;\n    }\n    return [$sum, $product];\n}\n\
    echo \"The sum of [1, 2, 3, 4] is \" . sum_product([1, 2, 3, 4])[0] . \"\\n\"\
    ;\necho \"The product of [1, 2, 3, 4] is \" . sum_product([1, 2, 3, 4])[1] . \"\
    \\n\";\necho \"The sum of [1, 2, 3, 4, 0] is \" . sum_product([1, 2, 3, 4, 0])[0]\
    \ . \"\\n\";\necho \"The product of [1, 2, 3, 4, 0] is \" . sum_product([1, 2,\
    \ 3, 4, 0])[1] . \"\\n\";\necho \"The sum of [] is \" . sum_product([])[0] . \"\
    \\n\";\necho \"The product of [] is \" . sum_product([])[1] . \"\\n\";", "   \
    \ $sum = 0;\n    $product = 1;\n    for ($i = 0; $i < count($numbers); $i++) {\n\
    \        $sum += $numbers[$i];\n        $product *= $numbers[$i];\n    }\n   \
    \ return [$sum, $product];\n}\n", "  $sum = array_sum($numbers);\n  $product =\
    \ 1;\n  foreach ($numbers as $number) {\n    $product *= $number;\n  }\n  return\
    \ [$sum, $product];\n}\n", "    if(count($numbers) == 0) {\n        return [0,\
    \ 1];\n    } else {\n        $sum = 0;\n        $product = 1;\n        foreach($numbers\
    \ as $number) {\n            $sum += $number;\n            $product *= $number;\n\
    \        }\n        return [$sum, $product];\n    }\n}\n", "  $sum = array_sum($numbers);\n\
    \  $product = array_product($numbers);\n  return array($sum, $product);\n}\necho\
    \ json_encode(sum_product([1, 2, 3, 4]));\necho \"\\n\";\n", "    $sum = array_sum($numbers);\n\
    \    $product = array_product($numbers);\n    $result = array($sum, $product);\n\
    \    return $result;\n}\necho '<pre>';\nprint_r(sum_product([]));\nprint_r(sum_product([1,\
    \ 2, 3, 4]));\necho '</pre>';\n", "  if (empty($numbers)) {\n    return [0, 1];\n\
    \  }\n\n  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum\
    \ += $number;\n    $product *= $number;\n  }\n\n  return [$sum, $product];\n}\n",
  "\t$sum = 0;\n\t$product = 1;\n\tforeach ($numbers as $number) {\n\t\t$sum += $number;\n\
    \t\t$product *= $number;\n\t}\n\treturn array($sum, $product);\n}\n", "  $sum\
    \ = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum += $number;\n\
    \    $product *= $number;\n  }\n  $numbers = array($sum, $product);\n  return\
    \ $numbers;\n}", "    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $key\
    \ => $value) {\n        $sum += $value;\n        $product *= $value;\n    }\n\
    \    return [$sum, $product];\n}\n", "\t$sum = 0;\n\t$product = 1;\n\tif(count($numbers)\
    \ == 0) {\n\t\treturn array(0, 1);\n\t}\n\tforeach($numbers as $number) {\n\t\t\
    $sum += $number;\n\t\t$product *= $number;\n\t}\n\treturn array($sum, $product);\n\
    }\n", "    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $num) {\n  \
    \      $sum += $num;\n        $product *= $num;\n    }\n    return array($sum,\
    \ $product);\n}\necho json_encode(sum_product([1, 2, 3, 4])) . PHP_EOL;\necho\
    \ json_encode(sum_product([])) . PHP_EOL;\n", "  $sum = array_sum($numbers);\n\
    \  $product = 1;\n  foreach ($numbers as $number) {\n    $product *= $number;\n\
    \  }\n  return array($sum, $product);\n}\n", "  $sum = 0;\n  $product = 1;\n \
    \ foreach ($numbers as $number) {\n    $sum += $number;\n    $product *= $number;\n\
    \  }\n  return array($sum, $product);\n}\n", "    $numbers = is_array($numbers)\
    \ ? $numbers : [$numbers];\n    $sum = array_sum($numbers);\n    $product = array_product($numbers);\n\
    \    return [$sum, $product];\n}", "  $sum = 0;\n  $product = 1;\n  foreach ($numbers\
    \ as $number) {\n    $sum += $number;\n    $product *= $number;\n  }\n  return\
    \ [$sum, $product];\n}\n", "    $sum = array_sum($numbers);\n    $product = 1;\n\
    \    foreach ($numbers as $key => $value) {\n        $product *= $value;\n   \
    \ }\n    $result = [$sum, $product];\n    return $result;\n}\n\nprint_r(sum_product([]));\n\
    print_r(sum_product([1, 2, 3, 4]));", "    $sum = 0;\n    $product = 1;\n    foreach\
    \ ($numbers as $i) {\n        $sum += $i;\n        $product *= $i;\n    }\n  \
    \  return [$sum, $product];\n}\n", "    $sum = array_sum($numbers);\n    $product\
    \ = $sum > 0 ? array_product($numbers) : 1;\n    return [$sum, $product];\n}\n",
  "    $result = array_reduce($numbers, function($acc, $current) {\n        $acc[0]\
    \ += $current;\n        $acc[1] *= $current;\n        return $acc;\n    }, array(0,\
    \ 1));\n    return $result;\n}\n$numbers = [1, 2, 3, 4];\necho implode(\", \"\
    , sum_product($numbers));\necho \"\\n\";", "\t$sum = 0;\n\t$product = 1;\n\tforeach\
    \ ($numbers as $value) {\n\t\t$sum += $value;\n\t\t$product *= $value;\n\t}\n\t\
    return [$sum, $product];\n}\n", "  $s = 0;\n  $p = 1;\n  for ($i = 0; $i < count($numbers);\
    \ $i++) {\n    $s += $numbers[$i];\n    $p *= $numbers[$i];\n  }\n  return [$s,\
    \ $p];\n}\n", "\t$sum = 0;\n\t$product = 1;\n\tforeach ($numbers as $number) {\n\
    \t\t$sum += $number;\n\t\t$product *= $number;\n\t}\n\treturn array($sum, $product);\n\
    }\n", "\t$sum = 0;\n\t$product = 1;\n\tforeach ($numbers as $number) {\n\t\t$sum\
    \ += $number;\n\t\t$product *= $number;\n\t}\n\treturn array($sum, $product);\n\
    }\n\necho '<pre>';\n$result = sum_product(array(1, 2, 3, 4));\nprint_r($result);\n\
    echo '</pre>';\n", "\t$sum = array_sum($numbers);\n\t$product = array_product($numbers);\n\
    \treturn array($sum, $product);\n}\n", "    $sum = 0;\n    $product = 1;\n   \
    \ foreach ($numbers as $number) {\n        $sum += $number;\n        $product\
    \ *= $number;\n    }\n    $result = array();\n    array_push($result, $sum, $product);\n\
    \    return $result;\n}\n", "\tif (empty($numbers)) {\n\t\treturn [0, 1];\n\t\
    }\n\n\t$sum = 0;\n\t$product = 1;\n\tforeach ($numbers as $number) {\n\t\t$sum\
    \ += $number;\n\t\t$product *= $number;\n\t}\n\n\treturn [$sum, $product];\n}\n",
  "\t$sum = 0;\n\t$product = 1;\n\tfor ($i = 0; $i < count($numbers); $i++) {\n\t\t\
    $sum += $numbers[$i];\n\t\t$product *= $numbers[$i];\n\t}\n\treturn array($sum,\
    \ $product);\n}\n\n$result = sum_product(array(1, 2, 3, 4));\necho '(' . $result[0]\
    \ . ', ' . $result[1] . ')';", "\tif (count($numbers) == 0) {\n\t\treturn [0,\
    \ 1];\n\t} else {\n\t\t$sum = 0;\n\t\t$product = 1;\n\t\tforeach ($numbers as\
    \ $n) {\n\t\t\t$sum += $n;\n\t\t\t$product *= $n;\n\t\t}\n\t\treturn [$sum, $product];\n\
    \t}\n}\n", "\t$sum = array_sum($numbers);\n\t$product = 1;\n\tif (count($numbers)\
    \ > 0) {\n\t\tforeach ($numbers as $number) {\n\t\t\t$product *= $number;\n\t\t\
    }\n\t}\n\t$return = array($sum, $product);\n\treturn $return;\n}\n", "    $sum\
    \ = array_sum($numbers);\n    $product = array_product($numbers);\n    return\
    \ [$sum, $product];\n}\nprint_r(sum_product([1, 2, 3, 4]));", "  $sum = array_sum($numbers);\n\
    \  $product = array_product($numbers);\n  return array($sum, $product);\n}\n",
  "    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n       \
    \ $sum += $number;\n        $product *= $number;\n    }\n    return array($sum,\
    \ $product);\n}\n", "    if(empty($numbers)){\n        return array(0,1);\n  \
    \  } else {\n        $sum = array_sum($numbers);\n        $product = array_product($numbers);\n\
    \        return array($sum, $product);\n    }\n}\n", "  $sum = 0;\n  $product\
    \ = 1;\n  for ($i = 0; $i < count($numbers); $i++) {\n    $sum += $numbers[$i];\n\
    \    $product *= $numbers[$i];\n  }\n  return [$sum, $product];\n}\necho \"{\"\
    ;\necho implode(\", \", sum_product([]));\necho \"}\\n\";\necho \"{\";\necho implode(\"\
    , \", sum_product([1, 2, 3, 4]));\necho \"}\\n\";\n", "   $result = array();\n\
    \   if(!empty($numbers)) {\n      $sum = 0;\n      $product = 1;\n      foreach($numbers\
    \ as $number) {\n         $sum += $number;\n         $product *= $number;\n  \
    \    }\n      $result[] = $sum;\n      $result[] = $product;\n   } else {\n  \
    \    $result[] = 0;\n      $result[] = 1;\n   }\n   return $result;\n}\n", " \
    \ $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum += $number;\n\
    \    $product *= $number;\n  }\n  return [$sum, $product];\n}\n", "    $sum =\
    \ 0;\n    $product = 1;\n    for ($i = 0; $i < count($numbers); $i++) {\n    \
    \    $sum += $numbers[$i];\n        $product *= $numbers[$i];\n    }\n    return\
    \ [$sum, $product];\n}\n\necho json_encode(sum_product([1, 2, 3, 4]));", "  $sum\
    \ = 0;\n  $product = 1;\n  for ($i = 0; $i < count($numbers); $i++) {\n    $sum\
    \ += $numbers[$i];\n    $product *= $numbers[$i];\n  }\n  return array($sum, $product);\n\
    }\n\necho \"sum_product([])\" . PHP_EOL;\nprint_r(sum_product([]));\necho PHP_EOL;\n\
    echo \"sum_product([1, 2, 3, 4])\" . PHP_EOL;\nprint_r(sum_product([1, 2, 3, 4]));",
  "    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n       \
    \ $sum += $number;\n        $product *= $number;\n    }\n    return array($sum,\
    \ $product);\n}\nprint_r(sum_product([]));\nprint_r(sum_product([1, 2, 3, 4]));\n",
  "  $sum = 0;\n  $product = 1;\n  if (empty($numbers)) {\n    $sum = 0;\n    $product\
    \ = 1;\n  } else {\n    foreach ($numbers as $key => $value) {\n      $sum +=\
    \ $value;\n      $product *= $value;\n    }\n  }\n  return array($sum, $product);\n\
    }\n", "  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum\
    \ += $number;\n    $product *= $number;\n  }\n  return array($sum, $product);\n\
    }\n\n$sum_product = sum_product([1, 2, 3, 4]);\necho $sum_product[0] . \" , \"\
    \ . $sum_product[1];", "  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number)\
    \ {\n    $sum += $number;\n    $product *= $number;\n  }\n  return [$sum, $product];\n\
    }\n", "\t$sum = array_sum($numbers);\n\t$product = 1;\n\tforeach ($numbers as\
    \ $number) {\n\t\t$product *= $number;\n\t}\n\treturn array($sum, $product);\n\
    }\n", "    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n\
    \        $sum += $number;\n        $product *= $number;\n    }\n    return array($sum,\
    \ $product);\n}\n", "    if (count($numbers) == 0) {\n        return [0, 1];\n\
    \    } else {\n        $sum = 0;\n        $product = 1;\n        foreach ($numbers\
    \ as $number) {\n            $sum += $number;\n            $product *= $number;\n\
    \        }\n        return [$sum, $product];\n    }\n}\n", "    $sum = 0;\n  \
    \  $product = 1;\n    foreach ($numbers as $number) {\n        $sum += $number;\n\
    \        $product *= $number;\n    }\n    return [$sum, $product];\n}\n", "  $product\
    \ = 1;\n  $sum = 0;\n  foreach ($numbers as $number) {\n    $product *= $number;\n\
    \    $sum += $number;\n  }\n  return [$sum, $product];\n}\necho \"sum_product([1,\
    \ 2, 3, 4]) = \" . json_encode(sum_product([1, 2, 3, 4])) . \"<br>\";\necho \"\
    sum_product([]) = \" . json_encode(sum_product([])) . \"<br>\";\n", "\t$sum =\
    \ 0;\n\t$product = 1;\n\tforeach ($numbers as $number) {\n\t\t$sum += $number;\n\
    \t\t$product *= $number;\n\t}\n\treturn array($sum, $product);\n}\n", "\tif(!$numbers)\
    \ {\n\t\treturn [0, 1];\n\t}\n\treturn [array_sum($numbers), array_product($numbers)];\n\
    }\n\n$numbers = [];\necho print_r(sum_product($numbers), true) . \"\\n\";\n\n\
    $numbers = [1, 2, 3, 4];\necho print_r(sum_product($numbers), true) . \"\\n\";",
  "    $sum = array_sum($numbers);\n    $product = 1;\n    foreach ($numbers as $n)\
    \ {\n        $product *= $n;\n    }\n    return [$sum, $product];\n}\n\necho implode(',\
    \ ', sum_product([1, 2, 3, 4])) . \"\\n\";", "    $sum = array_sum($numbers);\n\
    \    $product = array_product($numbers);\n    return array($sum, $product);\n\
    }\n\nprint_r(sum_product([]));\nprint_r(sum_product([1, 2, 3, 4]));", "    return\
    \ [array_sum($numbers), array_product($numbers)];\n}\n", "    $sum = 0;\n    $product\
    \ = 1;\n    if (count($numbers) > 0) {\n        foreach ($numbers as $number)\
    \ {\n            $sum += $number;\n            $product *= $number;\n        }\n\
    \    }\n    return [$sum, $product];\n}\n\nprint_r(sum_product([]));\nprint_r(sum_product([1,\
    \ 2, 3, 4]));", "    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number)\
    \ {\n        $sum += $number;\n        $product *= $number;\n    }\n    return\
    \ array($sum, $product);\n}\n$numbers = array(1, 2, 3, 4);\n$result = sum_product($numbers);\n\
    echo 'Sum: ' . $result[0] . ' Product: ' . $result[1];", "\t$sum = 0;\n\t$product\
    \ = 1;\n\tforeach ($numbers as $number) {\n\t\t$sum += $number;\n\t\t$product\
    \ *= $number;\n\t}\n\t$tuple = array($sum, $product);\n\treturn $tuple;\n}\n",
  "    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n       \
    \ $sum += $number;\n        $product *= $number;\n    }\n    return [$sum, $product];\n\
    }\n", "    $sum = 0;\n    $product = 1;\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        $sum += $numbers[$i];\n        $product *= $numbers[$i];\n\
    \    }\n    return array($sum, $product);\n}\n", "\t$sum = 0;\n\t$product = 1;\n\
    \tfor ($i = 0; $i < count($numbers); $i++) {\n\t\t$sum += $numbers[$i];\n\t\t\
    $product *= $numbers[$i];\n\t}\n\treturn array($sum, $product);\n}\n$numbers =\
    \ [1, 2, 3, 4];\n$result = sum_product($numbers);\necho \"Sum is: \" . $result[0]\
    \ . \"\\n\";\necho \"Product is: \" . $result[1] . \"\\n\";", "    if (!count($numbers))\
    \ {\n        return [0, 1];\n    }\n    return [array_sum($numbers), array_product($numbers)];\n\
    }\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
