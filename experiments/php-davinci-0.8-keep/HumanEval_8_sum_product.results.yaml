name: HumanEval_8_sum_product
language: php
results:
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = array_sum($numbers);\n  $product = 1;\n  foreach ($numbers as $number)\
    \ {\n    $product *= $number;\n  }\n  return array($sum, $product);\n}\n$numbers\
    \ = array(3, 6, 8, 2);\n$result = sum_product($numbers);\nprint_r($result);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 19\n    [1] => 288\n)\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\t$sum = 0;\n\t$product = 1;\n\tforeach ($numbers as $number) {\n\t\t$sum\
    \ += $number;\n\t\t$product *= $number;\n\t}\n\treturn array($sum, $product);\n\
    }\n\necho \"Enter integers separated by comma and hit Enter: \";\n$input = explode(\"\
    ,\", readline());\n$result = sum_product($input);\necho \"Result: \" . json_encode($result);\n\
    function candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Enter integers separated by comma and hit Enter: \nFatal error: Uncaught\
    \ Error: Call to undefined function readline() in /tmp/tmp7fxj3fo2.php:19\nStack\
    \ trace:\n#0 {main}\n  thrown in /tmp/tmp7fxj3fo2.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = array_sum($numbers);\n    $prod = 1;\n    foreach ($numbers as\
    \ $num) {\n        $prod *= $num;\n    }\n    return array($sum, $prod);\n}\n\n\
    function candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\tif (count($numbers) == 0) {\n\t\treturn array(0, 1);\n\t}\n\t$sum = 0;\n\
    \t$product = 1;\n\tforeach ($numbers as $number) {\n\t\t$sum += $number;\n\t\t\
    $product *= $number;\n\t}\n\treturn array($sum, $product);\n}\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\t// Use array_sum and array_product.\n\t$sum = array_sum($numbers);\n\t\
    $product = array_product($numbers);\n\treturn array($sum, $product);\n}\n\nfunction\
    \ candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    return [$sum,\
    \ $product];\n}\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum\
    \ += $number;\n    $product *= $number;\n  }\n  return [$sum, $product];\n}\n\n\
    var_dump(sum_product([]));\nvar_dump(sum_product([1, 2, 3, 4]));\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "array(2) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(1)\n}\narray(2) {\n  [0]=>\n\
    \  int(10)\n  [1]=>\n  int(24)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = 0;\n  $product = 1;\n  if (!empty($numbers)) {\n    foreach ($numbers\
    \ as $number) {\n      $sum += $number;\n      $product *= $number;\n    }\n \
    \ }\n  return array($sum, $product);\n}\n\necho json_encode(sum_product([1, 2,\
    \ 3, 4])) . \"\\n\";\necho json_encode(sum_product([])) . \"\\n\";\necho json_encode(sum_product([10,\
    \ 15, 20])) . \"\\n\";\necho json_encode(sum_product([0, -2, 3, -4])) . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "[10,24]\n[0,1]\n[45,3000]\n[-3,0]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\t$sum = 0;\n\t$product = 1;\n\tforeach ($numbers as $number) {\n\t\t$sum\
    \ += $number;\n\t\t$product *= $number;\n\t}\n\t$result = array($sum, $product);\n\
    \treturn $result;\n}\n\n$result = sum_product([1, 2, 3, 4]);\nforeach ($result\
    \ as $item) {\n\techo \"$item \";\n}\n\nfunction candidate(...$args) {\n    return\
    \ sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: '10 24 '
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    return array($sum,\
    \ $product);\n}\n\nprint_r(sum_product([]));\nprint_r(sum_product([1, 2, 3, 4]));\n\
    function candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 1\n)\nArray\n(\n    [0] => 10\n    [1]\
    \ => 24\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $n) {\n      \
    \  $sum += $n;\n        $product *= $n;\n    }\n    return [$sum, $product];\n\
    }\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = 0;\n  $product = 1;\n  for ($i = 0; $i < count($numbers); $i++)\
    \ {\n    $sum += $numbers[$i];\n    $product *= $numbers[$i];\n  }\n  return array($sum,\
    \ $product);\n}\n\n$sumProduct = sum_product([1, 2, 3, 4]);\nprint_r($sumProduct);\n\
    \nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 10\n    [1] => 24\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    return array($sum,\
    \ $product);\n}\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    if (count($numbers) == 0) {\n     \
    \   return [$sum, $product];\n    }\n    foreach ($numbers as $number) {\n   \
    \     $sum += $number;\n        $product *= $number;\n    }\n    return [$sum,\
    \ $product];\n}\n$numbers = [1, 2, 3, 4];\necho implode(\", \", sum_product($numbers));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "10, 24\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    return array($sum,\
    \ $product);\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    if (count($numbers) == 0) {\n     \
    \   return [$sum, $product];\n    }\n    else {\n        foreach ($numbers as\
    \ $number) {\n            $sum += $number;\n            $product *= $number;\n\
    \        }\n        return [$sum, $product];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = array_sum($numbers);\n    $product = array_product($numbers);\n\
    \    $tuple = array(\n        $sum,\n        $product\n    );\n    return $tuple;\n\
    }\nprint_r(sum_product([1, 2, 3, 4]));\nfunction candidate(...$args) {\n    return\
    \ sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 10\n    [1] => 24\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $arrSum = 0;\n    $arrProduct = 1;\n    foreach ($numbers as $num) {\n\
    \        $arrSum += $num;\n        $arrProduct *= $num;\n    }\n    return [$arrSum,\
    \ $arrProduct];\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n   $sum = 0;\n   $product = 1;\n   foreach ($numbers as $number) {\n    \
    \  $sum += $number;\n      $product *= $number;\n   }\n   return array($sum, $product);\n\
    }\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  // Write your code here\n  // To print results to the standard output you\
    \ can use print\n  // Example: print \"Hello world!\";\n  if(empty($numbers)){\n\
    \  \treturn array(0,1);\n  }\n  $sum = array_sum($numbers);\n  $product = 1;\n\
    \  foreach ($numbers as $number) {\n  \t$product *= $number;\n  }\n  return array($sum,$product);\n\
    }\nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum\
    \ += $number;\n    $product *= $number;\n  }\n  return [$sum, $product];\n}\n\
    print_r(sum_product([]));\nprint_r(sum_product([1, 2, 3, 4]));\necho '<br>';\n\
    function candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 1\n)\nArray\n(\n    [0] => 10\n    [1]\
    \ => 24\n)\n<br>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $n) {\n    $sum += $n;\n\
    \    $product *= $n;\n  }\n  return [$sum, $product];\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    return array($sum,\
    \ $product);\n}\n$result = sum_product([1, 2, 3, 4]);\nprint_r($result);\nfunction\
    \ candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 10\n    [1] => 24\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  if(count($numbers) == 0) {\n    return (0, 1);\n  }\n  $product = 1;\n\
    \  $sum = 0;\n  foreach($numbers as $value) {\n    $product *= $value;\n    $sum\
    \ += $value;\n  }\n  return [$sum, $product];\n}\n$result = sum_product([1, 2,\
    \ 3, 4]);\necho \"result: \" . implode(\",\", $result) . \"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjw_15bpi.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    return array_sum($numbers) && array_product($numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0e1r5_w_.php:17\n\
    Stack trace:\n#0 /tmp/tmp0e1r5_w_.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp0e1r5_w_.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $value) {\n    $sum\
    \ += $value;\n    $product *= $value;\n  }\n  return array($sum, $product);\n\
    }\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    return array($sum,\
    \ $product);\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = array_sum($numbers);\n    $product = array_product($numbers);\n\
    \    return array($sum, $product);\n}\nfunction candidate(...$args) {\n    return\
    \ sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum\
    \ += $number;\n    $product *= $number;\n  }\n  return array($sum, $product);\n\
    }\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $result = array();\n  $sum = 0;\n  $product = 1;\n  if (!empty($numbers))\
    \ {\n    foreach ($numbers as $number) {\n      $sum += $number;\n      $product\
    \ *= $number;\n    }\n  }\n  array_push($result, $sum, $product);\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    return array($sum,\
    \ $product);\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $num) {\n    \
    \    $sum += $num;\n        $product *= $num;\n    }\n    return array($sum, $product);\n\
    }\nprint_r(sum_product([]));\nprint_r(sum_product([1, 2, 3, 4]));\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 1\n)\nArray\n(\n    [0] => 10\n    [1]\
    \ => 24\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\tif (empty($numbers)) {\n\t\treturn array(0, 1);\n\t}\n\t$sum = 0;\n\t$product\
    \ = 1;\n\tforeach ($numbers as $number) {\n\t\t$sum += $number;\n\t\t$product\
    \ *= $number;\n\t}\n\treturn array($sum, $product);\n}\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\t$sum = 0;\n\t$product = 1;\n\tforeach ($numbers as $number) {\n\t\t$sum\
    \ += $number;\n\t\t$product *= $number;\n\t}\n\treturn array($sum, $product);\n\
    }\nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $key => $number)\
    \ {\n        $sum += $number;\n        $product *= $number;\n    }\n    return\
    \ array($sum, $product);\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = array_sum($numbers);\n    $product = 1;\n    foreach ($numbers\
    \ as $number) {\n        $product *= $number;\n    }\n    return [$sum, $product];\n\
    }\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\t$result = array(array_sum($numbers), array_product($numbers));\n\treturn\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\t$sum = array_sum($numbers);\n\t$product = array_product($numbers);\n\t\
    return array($sum, $product);\n}\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    return [$sum,\
    \ $product];\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\t$sum = 0;\n\t$product = 1;\n\tfor ($i = 0; $i < count($numbers); $i++)\
    \ {\n\t\t$sum += $numbers[$i];\n\t\t$product *= $numbers[$i];\n\t}\n\treturn array($sum,\
    \ $product);\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum\
    \ += $number;\n    $product *= $number;\n  }\n  return [$sum, $product];\n}\n\n\
    print_r(sum_product([]));\nprint_r(sum_product([1, 2, 3, 4]));\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 1\n)\nArray\n(\n    [0] => 10\n    [1]\
    \ => 24\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum\
    \ += $number;\n    $product *= $number;\n  }\n  return [$sum, $product];\n}\n\
    $numbers = [1, 2, 3, 4];\nprint_r(sum_product($numbers));\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 10\n    [1] => 24\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum\
    \ += $number;\n    $product *= $number;\n  }\n  return array($sum, $product);\n\
    }\necho json_encode(sum_product([1, 2, 3, 4])) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "[10,24]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  if (empty($numbers)) return [0, 1];\n  $sum = 0;\n  $product = 1;\n  foreach\
    \ ($numbers as $number) {\n    $sum += $number;\n    $product *= $number;\n  }\n\
    \  return [$sum, $product];\n}\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\t$sum = 0;\n\t$product = 1;\n\tforeach ($numbers as $number) {\n\t\t$sum\
    \ += $number;\n\t\t$product *= $number;\n\t}\n\treturn array($sum, $product);\n\
    }\n\necho \"<pre>\";\nprint_r(sum_product([]));\nprint_r(sum_product([1, 2, 3,\
    \ 4]));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 0\n    [1] => 1\n)\nArray\n(\n    [0] => 10\n\
    \    [1] => 24\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum\
    \ += $number;\n    $product *= $number;\n  }\n  $tuple = array($sum, $product);\n\
    \  return $tuple;\n}\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    if (count($numbers) == 0) {\n        return array(0, 1);\n    }\n   \
    \ $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n        $sum\
    \ += $number;\n        $product *= $number;\n    }\n    return array($sum, $product);\n\
    }\nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $n) {\n      \
    \  $sum += $n;\n        $product *= $n;\n    }\n    return array($sum, $product);\n\
    }\nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum\
    \ += $number;\n    $product *= $number;\n  }\n  return [$sum, $product];\n}\n\
    function candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\t$sum = 0;\n\t$product = 1;\n\tforeach ($numbers as $number) {\n\t\t$sum\
    \ += $number;\n\t\t$product *= $number;\n\t}\n\treturn [$sum, $product];\n}\n\n\
    function candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = array_sum($numbers);\n  $product = array_product($numbers);\n  $tuple\
    \ = array($sum, $product);\n  return $tuple;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $num) {\n    \
    \    $sum += $num;\n        $product *= $num;\n    }\n    return [$sum, $product];\n\
    }\n$res = sum_product([1, 2, 3, 4]);\necho $res[0] . ', ' . $res[1];\nfunction\
    \ candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 10, 24
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $n) {\n    $sum += $n;\n\
    \    $product *= $n;\n  }\n  return [$sum, $product];\n}\necho implode(\", \"\
    , sum_product([1, 2, 3, 4]));\necho \"\\n\";\n\nfunction candidate(...$args) {\n\
    \    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "10, 24\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    if(count($numbers) == 0) {\n      \
    \  return [$sum, $product];\n    }\n    else {\n        foreach($numbers as $number)\
    \ {\n            $sum += $number;\n            $product *= $number;\n        }\n\
    \        return [$sum, $product];\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  // iterate over the list\n  //    sum all the numbers\n  //    multiply\
    \ all the numbers\n  // return tuple of the sum and product\n  $sum = 0;\n  $product\
    \ = 1;\n  foreach ($numbers as $number) {\n    $sum += $number;\n    $product\
    \ *= $number;\n  }\n  return array($sum, $product);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    return [array_sum($numbers), array_product($numbers)];\n}\n\n$data =\
    \ [\n    [],\n    [1, 2, 3, 4],\n];\n\n$expected = [\n    [0, 1],\n    [10, 24],\n\
    ];\n\nforeach ($data as $index => $numbers) {\n    $result = sum_product($numbers);\n\
    \    $expected_value = $expected[$index];\n    if ($result === $expected_value)\
    \ {\n        echo 'PASS';\n    } else {\n        echo 'FAIL';\n    }\n    echo\
    \ \"\\n\";\n}\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "PASS\nPASS\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    if (empty($numbers)) {\n        return [0, 1];\n    }\n    $sum = 0;\n\
    \    $product = 1;\n    foreach ($numbers as $number) {\n        $sum += $number;\n\
    \        $product *= $number;\n    }\n    return [$sum, $product];\n}\n\nfunction\
    \ candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $num) {\n    \
    \    $sum += $num;\n        $product *= $num;\n    }\n    return array($sum, $product);\n\
    }\nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    if (sizeof($numbers) == 0) {\n        return array(0, 1);\n    } else\
    \ {\n        $sum = array_sum($numbers);\n        $product = 1;\n        foreach\
    \ ($numbers as $number) {\n            $product *= $number;\n        }\n     \
    \   return array($sum, $product);\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\t$sum = 0;\n\t$product = 1;\n\tforeach ($numbers as $number) {\n\t\t$sum\
    \ += $number;\n\t\t$product *= $number;\n\t}\n\treturn [$sum, $product];\n}\n\n\
    function candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    return [array_sum($numbers), array_product($numbers)];\n}\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum\
    \ += $number;\n    $product *= $number;\n  }\n  return [$sum, $product];\n}\n\n\
    function candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    if (sizeof($numbers) < 1) {\n     \
    \   return array($sum, $product);\n    }\n    foreach ($numbers as $number) {\n\
    \        $sum += $number;\n        $product *= $number;\n    }\n    return array($sum,\
    \ $product);\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    return [$sum,\
    \ $product];\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    return array($sum,\
    \ $product);\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $num) {\n    \
    \    $sum += $num;\n        $product *= $num;\n    }\n    return [$sum, $product];\n\
    }\n$numbers = [2, 3, 4, 5];\nprint_r(sum_product($numbers));\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 14\n    [1] => 120\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $result = array();\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers\
    \ as $number) {\n        $sum += $number;\n        $product *= $number;\n    }\n\
    \    array_push($result, $sum, $product);\n    return $result;\n}\nprint_r(sum_product([1,\
    \ 2, 3, 4]));\necho \"<br>\";\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 10\n    [1] => 24\n)\n<br>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    return array($sum,\
    \ $product);\n}\n\nprint_r(sum_product([]));\nprint_r(sum_product([1, 2, 3, 4]));\n\
    function candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 1\n)\nArray\n(\n    [0] => 10\n    [1]\
    \ => 24\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $result = [];\n    if (!empty($numbers)) {\n        $result[0] = array_sum($numbers);\n\
    \        $result[1] = array_product($numbers);\n    } else {\n        $result[0]\
    \ = 0;\n        $result[1] = 1;\n    }\n    return $result;\n}\n$numbers = [1,\
    \ 2, 3, 4];\nprint_r(sum_product($numbers));\nfunction candidate(...$args) {\n\
    \    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 10\n    [1] => 24\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum\
    \ += $number;\n    $product *= $number;\n  }\n  return array($sum, $product);\n\
    }\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    if (empty($numbers)) {\n        return [0, 1];\n    }\n    $sum = array_sum($numbers);\n\
    \    $product = array_product($numbers);\n    return [$sum, $product];\n}\n\n\
    print_r(sum_product([]));\necho '<br>';\nprint_r(sum_product([1, 2, 3, 4]));\n\
    echo '<br>';\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 1\n)\n<br>Array\n(\n    [0] => 10\n\
    \    [1] => 24\n)\n<br>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    if (count($numbers) === 0) {\n        return [0, 1];\n    }\n    $sum\
    \ = array_sum($numbers);\n    $product = array_product($numbers);\n    return\
    \ [$sum, $product];\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  if (empty($numbers)) return [0, 1];\n  $sum = 0;\n  $product = 1;\n  foreach\
    \ ($numbers as $number) {\n    $sum += $number;\n    $product *= $number;\n  }\n\
    \  return [$sum, $product];\n}\nprint_r(sum_product([]));\nprint_r(sum_product([1,\
    \ 2, 3, 4]));\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 1\n)\nArray\n(\n    [0] => 10\n    [1]\
    \ => 24\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\tif (count($numbers) == 0) {\n\t\treturn [0, 1];\n\t}\n\telse {\n\t\t$sum\
    \ = 0;\n\t\t$product = 1;\n\t\tforeach ($numbers as $number) {\n\t\t\t$sum +=\
    \ $number;\n\t\t\t$product *= $number;\n\t\t}\n\t\treturn [$sum, $product];\n\t\
    }\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    return [$sum,\
    \ $product];\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    return array($sum,\
    \ $product);\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum\
    \ += $number;\n    $product *= $number;\n  }\n  return [$sum, $product];\n}\n\
    echo implode(', ', sum_product([1, 2, 3, 4]));\nfunction candidate(...$args) {\n\
    \    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: 10, 24
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n   $tuple = ['sum' => 0, 'product' => 1];\n   if (sizeof($numbers) == 0)\
    \ {\n      return $tuple;\n   }\n   $tuple['sum'] = array_sum($numbers);\n   $tuple['product']\
    \ = array_product($numbers);\n   return $tuple;\n}\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn4_o5ozw.php:22\n\
    Stack trace:\n#0 /tmp/tmpn4_o5ozw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpn4_o5ozw.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $num) {\n    \
    \    $sum += $num;\n        $product *= $num;\n    }\n    return [$sum, $product];\n\
    }\nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  // your code here\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbofblf4d.php:17\n\
    Stack trace:\n#0 /tmp/tmpbofblf4d.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpbofblf4d.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    return array($sum,\
    \ $product);\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = 0;\n  $product = 1;\n  for($i = 0; $i < count($numbers); $i++) {\n\
    \    $sum += $numbers[$i];\n    $product *= $numbers[$i];\n  }\n  return $tuple\
    \ = [$sum, $product];\n}\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum\
    \ += $number;\n    $product *= $number;\n  }\n  return array($sum, $product);\n\
    }\n\nprint_r(sum_product([]));\nprint_r(sum_product([1, 2, 3, 4]));\n\nfunction\
    \ candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 1\n)\nArray\n(\n    [0] => 10\n    [1]\
    \ => 24\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    return [array_sum($numbers), array_product($numbers)];\n}\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $num) {\n    \
    \    $sum += $num;\n        $product *= $num;\n    }\n    return [$sum, $product];\n\
    }\nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\tif (count($numbers) == 0) {\n\t\treturn [0, 1];\n\t}\n\t$sum = array_sum($numbers);\n\
    \t$product = array_product($numbers);\n\treturn [$sum, $product];\n}\n\nfunction\
    \ candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    return [$sum,\
    \ $product];\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\tif (empty($numbers)) {\n\t\treturn [0, 1];\n\t}\n\t$sum = array_sum($numbers);\n\
    \t$product = array_product($numbers);\n\treturn [$sum, $product];\n}\n\necho 'returns\
    \ [0, 1]: ';\necho sum_product([])[0] . ', ' . sum_product([])[1] . '<br>';\n\
    echo 'returns [10, 24]: ';\necho sum_product([1, 2, 3, 4])[0] . ', ' . sum_product([1,\
    \ 2, 3, 4])[1] . '<br>';\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: 'returns [0, 1]: 0, 1<br>returns [10, 24]: 10, 24<br>'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    return [$sum,\
    \ $product];\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $value) {\n  \
    \      $sum += $value;\n        $product *= $value;\n    }\n    return \"($sum,\
    \ $product)\";\n}\n\necho sum_product([]) . \"\\n\";\necho sum_product([1, 2,\
    \ 3, 4]) . \"\\n\";\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "(0, 1)\n(10, 24)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6x7zupgd.php:25\n\
    Stack trace:\n#0 /tmp/tmp6x7zupgd.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp6x7zupgd.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $key => $value)\
    \ {\n        $sum += $value;\n        $product *= $value;\n    }\n    return array($sum,\
    \ $product);\n}\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum\
    \ += $number;\n    $product *= $number;\n  }\n  return [$sum, $product];\n}\n\n\
    function candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $num) {\n    \
    \    $sum += $num;\n        $product *= $num;\n    }\n    return array($sum, $product);\n\
    }\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $num) {\n    \
    \    $sum += $num;\n        $product *= $num;\n    }\n    return [$sum, $product];\n\
    }\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = 0;\n  $product = 1;\n  if (count($numbers) == 0) {\n    return array(0,\
    \ 1);\n  }\n  foreach ($numbers as $number) {\n    $sum += $number;\n    $product\
    \ *= $number;\n  }\n  return array($sum, $product);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    return array($sum,\
    \ $product);\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    return array($sum,\
    \ $product);\n}\n\n$numbers = array(1, 2, 3, 4);\n$result = sum_product($numbers);\n\
    var_dump($result);\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "array(2) {\n  [0]=>\n  int(10)\n  [1]=>\n  int(24)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    if (count($numbers) > 0) {\n      \
    \  foreach ($numbers as $number) {\n            $sum += $number;\n           \
    \ $product *= $number;\n        }\n    }\n    return array(\n        $sum,\n \
    \       $product\n    );\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = array_sum($numbers);\n    $product = array_product($numbers);\n\
    \    return [$sum, $product];\n}\necho implode(', ', sum_product([]));\necho \"\
    \\n\";\necho implode(', ', sum_product([1, 2, 3, 4]));\necho \"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0, 1\n10, 24\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $num) {\n    \
    \    $sum += $num;\n        $product *= $num;\n    }\n    return [$sum, $product];\n\
    }\nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    if (count($numbers) != 0) {\n     \
    \   foreach ($numbers as $number) {\n            $sum += $number;\n          \
    \  $product *= $number;\n        }\n    }\n    return array($sum, $product);\n\
    }\n\necho implode(', ', sum_product([1, 2, 3, 4]));\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: 10, 24
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  if(empty($numbers)) {\n    return [0, 1];\n  }\n  $sum = 0;\n  $product\
    \ = 1;\n  foreach($numbers as $num) {\n    $sum += $num;\n    $product *= $num;\n\
    \  }\n  return [$sum, $product];\n}\n\nfunction candidate(...$args) {\n    return\
    \ sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    return [$sum,\
    \ $product];\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum\
    \ += $number;\n    $product *= $number;\n  }\n  return array($sum, $product);\n\
    }\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $result = [0, 1];\n    foreach ($numbers as $value) {\n        $result[0]\
    \ += $value;\n        $result[1] *= $value;\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $product = array_product($numbers);\n    $sum = array_sum($numbers);\n\
    \    $result = array($sum, $product);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = array_sum($numbers);\n    $product = array_product($numbers);\n\
    \    return \"($sum, $product)\";\n}\n\necho sum_product([]) . \"\\n\";\necho\
    \ sum_product([1, 2, 3, 4]) . \"\\n\";\n\nfunction candidate(...$args) {\n   \
    \ return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "(0, 1)\n(10, 24)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt7yyw2mb.php:22\n\
    Stack trace:\n#0 /tmp/tmpt7yyw2mb.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpt7yyw2mb.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $a = 0;\n  $b = 1;\n  foreach ($numbers as $number) {\n    $a += $number;\n\
    \    $b *= $number;\n  }\n  return array($a, $b);\n}\nprint_r(sum_product([]));\n\
    print_r(sum_product([1, 2, 3, 4]));\n\nfunction candidate(...$args) {\n    return\
    \ sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 1\n)\nArray\n(\n    [0] => 10\n    [1]\
    \ => 24\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum\
    \ += $number;\n    $product *= $number;\n  }\n  return array($sum, $product);\n\
    }\nprint_r(sum_product([]));\nprint_r(sum_product([1, 2, 3, 4]));\n\nfunction\
    \ candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 1\n)\nArray\n(\n    [0] => 10\n    [1]\
    \ => 24\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $key => $value)\
    \ {\n        $sum += $value;\n        $product *= $value;\n    }\n    return array($sum,\
    \ $product);\n}\necho '<pre>';\nprint_r(sum_product([]));\nprint_r(sum_product([1,\
    \ 2, 3, 4]));\necho '</pre>';\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 0\n    [1] => 1\n)\nArray\n(\n    [0] => 10\n\
    \    [1] => 24\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    if(empty($numbers)) {\n        return array(0, 1);\n    }\n    $sum =\
    \ 0;\n    $product = 1;\n    foreach($numbers as $number) {\n        $sum += $number;\n\
    \        $product *= $number;\n    }\n    return array($sum, $product);\n}\nfunction\
    \ candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    if (empty($numbers)) {\n        return array(0, 1);\n    } else {\n \
    \       $sum = 0;\n        $product = 1;\n        foreach ($numbers as $number)\
    \ {\n            $sum += $number;\n            $product *= $number;\n        }\n\
    \        return array($sum, $product);\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        $sum += $numbers[$i];\n        $product *= $numbers[$i];\n\
    \    }\n    return array($sum, $product);\n}\n$result = sum_product([1, 2, 3,\
    \ 4]);\necho $result[0] . \" \" . $result[1];\nfunction candidate(...$args) {\n\
    \    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: 10 24
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = array_sum($numbers);\n    $product = array_product($numbers);\n\
    \    if ($sum == 0) {\n        return 0;\n    } elseif ($product == 1) {\n   \
    \     return 1;\n    } else {\n        return ($sum, $product);\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4in82t_2.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\t$result = [0, 1];\n\tforeach ($numbers as $n) {\n\t\t$result[0] += $n;\n\
    \t\t$result[1] *= $n;\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    if (empty($numbers)) {\n        return array(0, 1);\n    }\n    $sum\
    \ = 0;\n    $product = 1;\n    foreach ($numbers as $n) {\n        $sum += $n;\n\
    \        $product *= $n;\n    }\n    return array($sum, $product);\n}\nprint_r(sum_product([]));\n\
    print_r(sum_product([1, 2, 3, 4]));\nfunction candidate(...$args) {\n    return\
    \ sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 1\n)\nArray\n(\n    [0] => 10\n    [1]\
    \ => 24\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    return [$sum,\
    \ $product];\n}\nprint_r(sum_product([1, 2, 3, 4]));\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 10\n    [1] => 24\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $num) {\n    \
    \    $sum += $num;\n        $product *= $num;\n    }\n    return array($sum, $product);\n\
    }\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    return array($sum,\
    \ $product);\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    if (count($numbers) == 0) {\n        return [0, 1];\n    }\n    $sum\
    \ = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n        $sum +=\
    \ $number;\n        $product *= $number;\n    }\n    return [$sum, $product];\n\
    }\n$res = sum_product([1, 2, 3, 4]);\nprint_r($res);\necho \"<br>\";\necho \"\
    <br>\";\necho \"<br>\";\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 10\n    [1] => 24\n)\n<br><br><br>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $result = array_reduce($numbers, function($carry, $item) {\n    $carry[0]\
    \ += $item;\n    $carry[1] *= $item;\n    return $carry;\n  }, array(0, 1));\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\t$sum = 0;\n\t$product = 1;\n\tforeach ($numbers as $num) {\n\t\t$sum +=\
    \ $num;\n\t\t$product *= $num;\n\t}\n\treturn array ($sum, $product);\n}\n\nfunction\
    \ candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    return array($sum,\
    \ $product);\n}\n\nprint_r(sum_product([]));\nprint_r(sum_product([1, 2, 3, 4]));\n\
    function candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 1\n)\nArray\n(\n    [0] => 10\n    [1]\
    \ => 24\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $numbers = array_filter($numbers);\n    $sum = array_sum($numbers);\n\
    \    $product = array_product($numbers);\n    $new_array = [$sum, $product];\n\
    \    return $new_array;\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8_ce8uuc.php:23\n\
    Stack trace:\n#0 /tmp/tmp8_ce8uuc.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp8_ce8uuc.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $value) {\n  \
    \      $sum += $value;\n        $product *= $value;\n    }\n    return array ($sum,\
    \ $product);\n}\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    return array_reduce($numbers, function($acc, $item) {\n        $acc[0]\
    \ += $item;\n        $acc[1] *= $item;\n        return $acc;\n    }, [0, 1]);\n\
    }\nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum\
    \ += $number;\n    $product *= $number;\n  }\n  return array($sum, $product);\n\
    }\n\nprint_r(sum_product([]));\nprint_r(sum_product([1, 2, 3, 4]));\nfunction\
    \ candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 1\n)\nArray\n(\n    [0] => 10\n    [1]\
    \ => 24\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $num) {\n    \
    \    $sum += $num;\n        $product *= $num;\n    }\n    return array($sum, $product);\n\
    }\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    if (empty($numbers)) {\n        return [0, 1];\n    }\n\n    $sum = array_sum($numbers);\n\
    \    $product = array_product($numbers);\n\n    return [$sum, $product];\n}\n\n\
    function candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\tif (count($numbers) === 0) {\n\t\treturn array(0, 1);\n\t}\n\t$sum = array_sum($numbers);\n\
    \t$product = array_product($numbers);\n\treturn array($sum, $product);\n}\necho\
    \ var_dump(sum_product([]));\necho var_dump(sum_product([1, 2, 3, 4]));\n\nfunction\
    \ candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(2) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(1)\n}\narray(2) {\n  [0]=>\n\
    \  int(10)\n  [1]=>\n  int(24)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    return [$sum,\
    \ $product];\n}\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\treturn array_sum($numbers) . ', ' . array_product($numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb9050ajc.php:17\n\
    Stack trace:\n#0 /tmp/tmpb9050ajc.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpb9050ajc.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\t$sum = 0;\n\t$product = 1;\n\tforeach ($numbers as $number) {\n\t\t$sum\
    \ += $number;\n\t\t$product *= $number;\n\t}\n\treturn array($sum, $product);\n\
    }\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    return array($sum,\
    \ $product);\n}\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n   $sum = 0;\n   $product = 1;\n   foreach ($numbers as $n) {\n       $sum\
    \ += $n;\n       $product *= $n;\n   }\n   return [$sum, $product];\n}\necho json_encode(sum_product([1,\
    \ 2, 3, 4])) . \"\\n\";\necho json_encode(sum_product([])) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "[10,24]\n[0,1]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $product = 1;\n    $sum = 0;\n    if (empty($numbers)) {\n        return\
    \ [$sum, $product];\n    }\n    foreach ($numbers as $number) {\n        $product\
    \ *= $number;\n        $sum += $number;\n    }\n    return [$sum, $product];\n\
    }\nprint_r(sum_product([]));\nprint_r(sum_product([1, 2, 3, 4]));\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 1\n)\nArray\n(\n    [0] => 10\n    [1]\
    \ => 24\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = array_sum($numbers);\n    $product = array_product($numbers);\n\
    \    return [$sum, $product];\n}\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    return array($sum,\
    \ $product);\n}\necho implode(\", \", sum_product([1, 2, 3, 4]));\n\nfunction\
    \ candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 10, 24
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    return [$sum,\
    \ $product];\n}\necho '<pre>';\nprint_r(sum_product([]));\necho '</pre>';\necho\
    \ '<pre>';\nprint_r(sum_product([1, 2, 3, 4]));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 0\n    [1] => 1\n)\n</pre><pre>Array\n(\n   \
    \ [0] => 10\n    [1] => 24\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  if(empty($numbers)){\n    return [0, 1];\n  }\n  $sum = 0;\n  $product\
    \ = 1;\n  foreach($numbers as $number){\n    $sum += $number;\n    $product *=\
    \ $number;\n  }\n  return [$sum, $product];\n}\nfunction candidate(...$args) {\n\
    \    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    if (empty($numbers)) {\n        return [0, 1];\n    }\n    $sum = 0;\n\
    \    $product = 1;\n    foreach ($numbers as $num) {\n        $sum += $num;\n\
    \        $product *= $num;\n    }\n    return [$sum, $product];\n}\necho \"The\
    \ sum of [1, 2, 3, 4] is \" . sum_product([1, 2, 3, 4])[0] . \"\\n\";\necho \"\
    The product of [1, 2, 3, 4] is \" . sum_product([1, 2, 3, 4])[1] . \"\\n\";\n\
    echo \"The sum of [1, 2, 3, 4, 0] is \" . sum_product([1, 2, 3, 4, 0])[0] . \"\
    \\n\";\necho \"The product of [1, 2, 3, 4, 0] is \" . sum_product([1, 2, 3, 4,\
    \ 0])[1] . \"\\n\";\necho \"The sum of [] is \" . sum_product([])[0] . \"\\n\"\
    ;\necho \"The product of [] is \" . sum_product([])[1] . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "The sum of [1, 2, 3, 4] is 10\nThe product of [1, 2, 3, 4] is 24\nThe sum\
    \ of [1, 2, 3, 4, 0] is 10\nThe product of [1, 2, 3, 4, 0] is 0\nThe sum of []\
    \ is 0\nThe product of [] is 1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        $sum += $numbers[$i];\n        $product *= $numbers[$i];\n\
    \    }\n    return [$sum, $product];\n}\n\nfunction candidate(...$args) {\n  \
    \  return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = array_sum($numbers);\n  $product = 1;\n  foreach ($numbers as $number)\
    \ {\n    $product *= $number;\n  }\n  return [$sum, $product];\n}\n\nfunction\
    \ candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    if(count($numbers) == 0) {\n        return [0, 1];\n    } else {\n  \
    \      $sum = 0;\n        $product = 1;\n        foreach($numbers as $number)\
    \ {\n            $sum += $number;\n            $product *= $number;\n        }\n\
    \        return [$sum, $product];\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = array_sum($numbers);\n  $product = array_product($numbers);\n  return\
    \ array($sum, $product);\n}\necho json_encode(sum_product([1, 2, 3, 4]));\necho\
    \ \"\\n\";\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "[10,24]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = array_sum($numbers);\n    $product = array_product($numbers);\n\
    \    $result = array($sum, $product);\n    return $result;\n}\necho '<pre>';\n\
    print_r(sum_product([]));\nprint_r(sum_product([1, 2, 3, 4]));\necho '</pre>';\n\
    \nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 0\n    [1] => 1\n)\nArray\n(\n    [0] => 10\n\
    \    [1] => 24\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  if (empty($numbers)) {\n    return [0, 1];\n  }\n\n  $sum = 0;\n  $product\
    \ = 1;\n  foreach ($numbers as $number) {\n    $sum += $number;\n    $product\
    \ *= $number;\n  }\n\n  return [$sum, $product];\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\t$sum = 0;\n\t$product = 1;\n\tforeach ($numbers as $number) {\n\t\t$sum\
    \ += $number;\n\t\t$product *= $number;\n\t}\n\treturn array($sum, $product);\n\
    }\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum\
    \ += $number;\n    $product *= $number;\n  }\n  $numbers = array($sum, $product);\n\
    \  return $numbers;\n}\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $key => $value)\
    \ {\n        $sum += $value;\n        $product *= $value;\n    }\n    return [$sum,\
    \ $product];\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\t$sum = 0;\n\t$product = 1;\n\tif(count($numbers) == 0) {\n\t\treturn array(0,\
    \ 1);\n\t}\n\tforeach($numbers as $number) {\n\t\t$sum += $number;\n\t\t$product\
    \ *= $number;\n\t}\n\treturn array($sum, $product);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $num) {\n    \
    \    $sum += $num;\n        $product *= $num;\n    }\n    return array($sum, $product);\n\
    }\necho json_encode(sum_product([1, 2, 3, 4])) . PHP_EOL;\necho json_encode(sum_product([]))\
    \ . PHP_EOL;\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "[10,24]\n[0,1]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = array_sum($numbers);\n  $product = 1;\n  foreach ($numbers as $number)\
    \ {\n    $product *= $number;\n  }\n  return array($sum, $product);\n}\n\nfunction\
    \ candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum\
    \ += $number;\n    $product *= $number;\n  }\n  return array($sum, $product);\n\
    }\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $numbers = is_array($numbers) ? $numbers : [$numbers];\n    $sum = array_sum($numbers);\n\
    \    $product = array_product($numbers);\n    return [$sum, $product];\n}\nfunction\
    \ candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum\
    \ += $number;\n    $product *= $number;\n  }\n  return [$sum, $product];\n}\n\n\
    function candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = array_sum($numbers);\n    $product = 1;\n    foreach ($numbers\
    \ as $key => $value) {\n        $product *= $value;\n    }\n    $result = [$sum,\
    \ $product];\n    return $result;\n}\n\nprint_r(sum_product([]));\nprint_r(sum_product([1,\
    \ 2, 3, 4]));\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 1\n)\nArray\n(\n    [0] => 10\n    [1]\
    \ => 24\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $i) {\n      \
    \  $sum += $i;\n        $product *= $i;\n    }\n    return [$sum, $product];\n\
    }\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = array_sum($numbers);\n    $product = $sum > 0 ? array_product($numbers)\
    \ : 1;\n    return [$sum, $product];\n}\n\nfunction candidate(...$args) {\n  \
    \  return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $result = array_reduce($numbers, function($acc, $current) {\n       \
    \ $acc[0] += $current;\n        $acc[1] *= $current;\n        return $acc;\n \
    \   }, array(0, 1));\n    return $result;\n}\n$numbers = [1, 2, 3, 4];\necho implode(\"\
    , \", sum_product($numbers));\necho \"\\n\";\nfunction candidate(...$args) {\n\
    \    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "10, 24\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\t$sum = 0;\n\t$product = 1;\n\tforeach ($numbers as $value) {\n\t\t$sum\
    \ += $value;\n\t\t$product *= $value;\n\t}\n\treturn [$sum, $product];\n}\n\n\
    function candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $s = 0;\n  $p = 1;\n  for ($i = 0; $i < count($numbers); $i++) {\n    $s\
    \ += $numbers[$i];\n    $p *= $numbers[$i];\n  }\n  return [$s, $p];\n}\n\nfunction\
    \ candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\t$sum = 0;\n\t$product = 1;\n\tforeach ($numbers as $number) {\n\t\t$sum\
    \ += $number;\n\t\t$product *= $number;\n\t}\n\treturn array($sum, $product);\n\
    }\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\t$sum = 0;\n\t$product = 1;\n\tforeach ($numbers as $number) {\n\t\t$sum\
    \ += $number;\n\t\t$product *= $number;\n\t}\n\treturn array($sum, $product);\n\
    }\n\necho '<pre>';\n$result = sum_product(array(1, 2, 3, 4));\nprint_r($result);\n\
    echo '</pre>';\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 10\n    [1] => 24\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\t$sum = array_sum($numbers);\n\t$product = array_product($numbers);\n\t\
    return array($sum, $product);\n}\n\nfunction candidate(...$args) {\n    return\
    \ sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    $result = array();\n\
    \    array_push($result, $sum, $product);\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\tif (empty($numbers)) {\n\t\treturn [0, 1];\n\t}\n\n\t$sum = 0;\n\t$product\
    \ = 1;\n\tforeach ($numbers as $number) {\n\t\t$sum += $number;\n\t\t$product\
    \ *= $number;\n\t}\n\n\treturn [$sum, $product];\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\t$sum = 0;\n\t$product = 1;\n\tfor ($i = 0; $i < count($numbers); $i++)\
    \ {\n\t\t$sum += $numbers[$i];\n\t\t$product *= $numbers[$i];\n\t}\n\treturn array($sum,\
    \ $product);\n}\n\n$result = sum_product(array(1, 2, 3, 4));\necho '(' . $result[0]\
    \ . ', ' . $result[1] . ')';\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: (10, 24)
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\tif (count($numbers) == 0) {\n\t\treturn [0, 1];\n\t} else {\n\t\t$sum =\
    \ 0;\n\t\t$product = 1;\n\t\tforeach ($numbers as $n) {\n\t\t\t$sum += $n;\n\t\
    \t\t$product *= $n;\n\t\t}\n\t\treturn [$sum, $product];\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\t$sum = array_sum($numbers);\n\t$product = 1;\n\tif (count($numbers) > 0)\
    \ {\n\t\tforeach ($numbers as $number) {\n\t\t\t$product *= $number;\n\t\t}\n\t\
    }\n\t$return = array($sum, $product);\n\treturn $return;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = array_sum($numbers);\n    $product = array_product($numbers);\n\
    \    return [$sum, $product];\n}\nprint_r(sum_product([1, 2, 3, 4]));\nfunction\
    \ candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 10\n    [1] => 24\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = array_sum($numbers);\n  $product = array_product($numbers);\n  return\
    \ array($sum, $product);\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    return array($sum,\
    \ $product);\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    if(empty($numbers)){\n        return array(0,1);\n    } else {\n    \
    \    $sum = array_sum($numbers);\n        $product = array_product($numbers);\n\
    \        return array($sum, $product);\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = 0;\n  $product = 1;\n  for ($i = 0; $i < count($numbers); $i++)\
    \ {\n    $sum += $numbers[$i];\n    $product *= $numbers[$i];\n  }\n  return [$sum,\
    \ $product];\n}\necho \"{\";\necho implode(\", \", sum_product([]));\necho \"\
    }\\n\";\necho \"{\";\necho implode(\", \", sum_product([1, 2, 3, 4]));\necho \"\
    }\\n\";\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "{0, 1}\n{10, 24}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n   $result = array();\n   if(!empty($numbers)) {\n      $sum = 0;\n     \
    \ $product = 1;\n      foreach($numbers as $number) {\n         $sum += $number;\n\
    \         $product *= $number;\n      }\n      $result[] = $sum;\n      $result[]\
    \ = $product;\n   } else {\n      $result[] = 0;\n      $result[] = 1;\n   }\n\
    \   return $result;\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum\
    \ += $number;\n    $product *= $number;\n  }\n  return [$sum, $product];\n}\n\n\
    function candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        $sum += $numbers[$i];\n        $product *= $numbers[$i];\n\
    \    }\n    return [$sum, $product];\n}\n\necho json_encode(sum_product([1, 2,\
    \ 3, 4]));\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: '[10,24]'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = 0;\n  $product = 1;\n  for ($i = 0; $i < count($numbers); $i++)\
    \ {\n    $sum += $numbers[$i];\n    $product *= $numbers[$i];\n  }\n  return array($sum,\
    \ $product);\n}\n\necho \"sum_product([])\" . PHP_EOL;\nprint_r(sum_product([]));\n\
    echo PHP_EOL;\necho \"sum_product([1, 2, 3, 4])\" . PHP_EOL;\nprint_r(sum_product([1,\
    \ 2, 3, 4]));\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "sum_product([])\nArray\n(\n    [0] => 0\n    [1] => 1\n)\n\nsum_product([1,\
    \ 2, 3, 4])\nArray\n(\n    [0] => 10\n    [1] => 24\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    return array($sum,\
    \ $product);\n}\nprint_r(sum_product([]));\nprint_r(sum_product([1, 2, 3, 4]));\n\
    \nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 1\n)\nArray\n(\n    [0] => 10\n    [1]\
    \ => 24\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = 0;\n  $product = 1;\n  if (empty($numbers)) {\n    $sum = 0;\n \
    \   $product = 1;\n  } else {\n    foreach ($numbers as $key => $value) {\n  \
    \    $sum += $value;\n      $product *= $value;\n    }\n  }\n  return array($sum,\
    \ $product);\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum\
    \ += $number;\n    $product *= $number;\n  }\n  return array($sum, $product);\n\
    }\n\n$sum_product = sum_product([1, 2, 3, 4]);\necho $sum_product[0] . \" , \"\
    \ . $sum_product[1];\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: 10 , 24
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum\
    \ += $number;\n    $product *= $number;\n  }\n  return [$sum, $product];\n}\n\n\
    function candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\t$sum = array_sum($numbers);\n\t$product = 1;\n\tforeach ($numbers as $number)\
    \ {\n\t\t$product *= $number;\n\t}\n\treturn array($sum, $product);\n}\n\nfunction\
    \ candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    return array($sum,\
    \ $product);\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    if (count($numbers) == 0) {\n        return [0, 1];\n    } else {\n \
    \       $sum = 0;\n        $product = 1;\n        foreach ($numbers as $number)\
    \ {\n            $sum += $number;\n            $product *= $number;\n        }\n\
    \        return [$sum, $product];\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    return [$sum,\
    \ $product];\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n  $product = 1;\n  $sum = 0;\n  foreach ($numbers as $number) {\n    $product\
    \ *= $number;\n    $sum += $number;\n  }\n  return [$sum, $product];\n}\necho\
    \ \"sum_product([1, 2, 3, 4]) = \" . json_encode(sum_product([1, 2, 3, 4])) .\
    \ \"<br>\";\necho \"sum_product([]) = \" . json_encode(sum_product([])) . \"<br>\"\
    ;\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: sum_product([1, 2, 3, 4]) = [10,24]<br>sum_product([]) = [0,1]<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\t$sum = 0;\n\t$product = 1;\n\tforeach ($numbers as $number) {\n\t\t$sum\
    \ += $number;\n\t\t$product *= $number;\n\t}\n\treturn array($sum, $product);\n\
    }\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\tif(!$numbers) {\n\t\treturn [0, 1];\n\t}\n\treturn [array_sum($numbers),\
    \ array_product($numbers)];\n}\n\n$numbers = [];\necho print_r(sum_product($numbers),\
    \ true) . \"\\n\";\n\n$numbers = [1, 2, 3, 4];\necho print_r(sum_product($numbers),\
    \ true) . \"\\n\";\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 1\n)\n\nArray\n(\n    [0] => 10\n  \
    \  [1] => 24\n)\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = array_sum($numbers);\n    $product = 1;\n    foreach ($numbers\
    \ as $n) {\n        $product *= $n;\n    }\n    return [$sum, $product];\n}\n\n\
    echo implode(', ', sum_product([1, 2, 3, 4])) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "10, 24\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = array_sum($numbers);\n    $product = array_product($numbers);\n\
    \    return array($sum, $product);\n}\n\nprint_r(sum_product([]));\nprint_r(sum_product([1,\
    \ 2, 3, 4]));\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 1\n)\nArray\n(\n    [0] => 10\n    [1]\
    \ => 24\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    return [array_sum($numbers), array_product($numbers)];\n}\n\nfunction\
    \ candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
    \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
    \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    if (count($numbers) > 0) {\n      \
    \  foreach ($numbers as $number) {\n            $sum += $number;\n           \
    \ $product *= $number;\n        }\n    }\n    return [$sum, $product];\n}\n\n\
    print_r(sum_product([]));\nprint_r(sum_product([1, 2, 3, 4]));\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 1\n)\nArray\n(\n    [0] => 10\n    [1]\
    \ => 24\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    return array($sum,\
    \ $product);\n}\n$numbers = array(1, 2, 3, 4);\n$result = sum_product($numbers);\n\
    echo 'Sum: ' . $result[0] . ' Product: ' . $result[1];\nfunction candidate(...$args)\
    \ {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: 'Sum: 10 Product: 24'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\t$sum = 0;\n\t$product = 1;\n\tforeach ($numbers as $number) {\n\t\t$sum\
    \ += $number;\n\t\t$product *= $number;\n\t}\n\t$tuple = array($sum, $product);\n\
    \treturn $tuple;\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n        $product *= $number;\n    }\n    return [$sum,\
    \ $product];\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    $sum = 0;\n    $product = 1;\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        $sum += $numbers[$i];\n        $product *= $numbers[$i];\n\
    \    }\n    return array($sum, $product);\n}\n\nfunction candidate(...$args) {\n\
    \    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n\t$sum = 0;\n\t$product = 1;\n\tfor ($i = 0; $i < count($numbers); $i++)\
    \ {\n\t\t$sum += $numbers[$i];\n\t\t$product *= $numbers[$i];\n\t}\n\treturn array($sum,\
    \ $product);\n}\n$numbers = [1, 2, 3, 4];\n$result = sum_product($numbers);\n\
    echo \"Sum is: \" . $result[0] . \"\\n\";\necho \"Product is: \" . $result[1]\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Sum is: 10\nProduct is: 24\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a list.\n// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0,\
    \ 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product($numbers)\
    \ {\n    if (!count($numbers)) {\n        return [0, 1];\n    }\n    return [array_sum($numbers),\
    \ array_product($numbers)];\n}\n\nfunction candidate(...$args) {\n    return sum_product(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
