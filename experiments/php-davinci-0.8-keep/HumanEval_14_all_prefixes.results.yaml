name: HumanEval_14_all_prefixes
language: php
results:
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    $length = strlen($string);\n    for ($pos = 0; $pos\
    \ < $length; $pos++) {\n        $prefixes[] = substr($string, 0, $pos + 1);\n\
    \    }\n    return $prefixes;\n}\n\nfunction candidate(...$args) {\n    return\
    \ all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = [];\n    $i = 0;\n    $length = strlen($string);\n    while\
    \ ($i < $length) {\n        $result[] = substr($string, 0, $i+1);\n        $i++;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $len = strlen($string);\n    $prefixes = [];\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return\
    \ $prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $length = strlen($string);\n    for ($i = 1; $i <= $length; $i++) {\n\
    \        $prefixes[] = substr($string, 0, $i);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz6tmcpbb.php:18\n\
    Stack trace:\n#0 /tmp/tmpz6tmcpbb.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpz6tmcpbb.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $length = strlen($string);\n    $prefixes = [];\n    for ($i = 0; $i\
    \ < $length; $i++) {\n        $prefixes[] = substr($string, 0, $i + 1);\n    }\n\
    \    return $prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    if ($string === '') {\n        return [];\n    }\n\n    $prefixes = [];\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        $prefixes[] = substr($string,\
    \ 0, $i + 1);\n    }\n\n    return $prefixes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $len = strlen($string);\n    $prefixes = [];\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return\
    \ $prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n\t$res = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\t$res[] =\
    \ substr($string, 0, $i + 1);\n\t}\n\treturn $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n   \
    \     $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = [];\n    $chars = str_split($string);\n    $count = count($chars);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        $result[] = implode('', array_slice($chars,\
    \ 0, $i + 1));\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8v3z2uqw.php:20\n\
    Stack trace:\n#0 /tmp/tmp8v3z2uqw.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp8v3z2uqw.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $array = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n      \
    \  $array[] = substr($string, 0, $i + 1);\n    }\n    return $array;\n}\nfunction\
    \ candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n   \
    \     $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $return = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n     \
    \   $return[] = substr($string, 0, $i + 1);\n    }\n    return $return;\n}\nfunction\
    \ candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $chars = str_split($string);\n    $prefixes = [];\n    $prefix = '';\n\
    \    foreach ($chars as $char) {\n        $prefix .= $char;\n        $prefixes[]\
    \ = $prefix;\n    }\n    return $prefixes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpchtaelwt.php:21\n\
    Stack trace:\n#0 /tmp/tmpchtaelwt.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpchtaelwt.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n\t$prefixes = [];\n\t$len = strlen($string);\n\tfor ($i = 0; $i < $len; $i++)\
    \ {\n\t\t$prefixes[] = substr($string, 0, $i + 1);\n\t}\n\treturn $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n   \
    \     $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n\t$prefixes = [];\n\t$length = strlen($string);\n\tfor ($i = 1; $i <= $length;\
    \ $i++) {\n\t\t$prefixes[] = substr($string, 0, $i);\n\t}\n\treturn $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n   \
    \     $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n     \
    \   $result[] = substr($string, 0, $i + 1);\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n     \
    \   $result[] = substr($string, 0, $i + 1);\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    $length = strlen($string);\n    for ($i = 0; $i\
    \ < $length; $i++) {\n        $prefixes[] = substr($string, 0, $i + 1);\n    }\n\
    \    return $prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    for ($x = 1; $x <= strlen($string); $x++) {\n        $results[] = substr($string,\
    \ 0, $x);\n    }\n    return $results;\n}\nfunction candidate(...$args) {\n  \
    \  return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5m7tr84a.php:16\n\
    Stack trace:\n#0 /tmp/tmp5m7tr84a.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp5m7tr84a.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n\t$prefixes = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\t$prefixes[]\
    \ = substr($string, 0, $i + 1);\n\t}\n\treturn $prefixes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $length = strlen($string);\n    $result = [];\n    for ($i = 1; $i <=\
    \ $length; $i++) {\n        $result[] = substr($string, 0, $i);\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n     \
    \   $result[] = substr($string, 0, $i + 1);\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $chars = str_split($string);\n    $prefixes = array();\n    foreach ($chars\
    \ as $i => $char) {\n        $prefixes[] = implode(array_slice($chars, 0, $i +\
    \ 1));\n    }\n    return $prefixes;\n}\n\nfunction candidate(...$args) {\n  \
    \  return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2i_k_223.php:19\n\
    Stack trace:\n#0 /tmp/tmp2i_k_223.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp2i_k_223.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n\t$length = strlen($string);\n\tif ($length === 0) {\n\t\treturn [];\n\t\
    }\n\t$result = [];\n\tfor ($i = 1; $i <= $length; $i++) {\n\t\t$result[] = substr($string,\
    \ 0, $i);\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n   \
    \     $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n\t$sub_arr = array();\n\tfor ($i = 1; $i <= strlen($string); $i++) {\n\t\t\
    $sub_arr[] = substr($string, 0, $i);\n\t}\n\treturn $sub_arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    for ($len = 1; $len <= strlen($string); $len++)\
    \ {\n        $prefixes[] = substr($string, 0, $len);\n    }\n    return $prefixes;\n\
    }\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $len = strlen($string);\n    $results = [];\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $results[] = substr($string, 0, $i + 1);\n    }\n    return\
    \ $results;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    if (is_array($string)) {\n        $string = implode('', $string);\n \
    \   }\n    $prefixes = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n \
    \       $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    $length = strlen($string);\n    for ($i = 0; $i\
    \ < $length; $i++) {\n        $prefixes[] = substr($string, 0, $i + 1);\n    }\n\
    \    return $prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $ret = [];\n    $len = strlen($string);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $ret[] = substr($string, 0, $i + 1);\n    }\n    return $ret;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n     \
    \   $result[] = substr($string, 0, $i + 1);\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = [];\n    $prefix = '';\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        $prefix .= $string[$i];\n        $result[] = $prefix;\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $length = strlen($string);\n    $result = [];\n    for ($i = 1; $i <=\
    \ $length; $i++) {\n        $result[] = substr($string, 0, $i);\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $strings = [];\n    for ($len = 1; $len <= strlen($string); $len++) {\n\
    \        $strings[] = substr($string, 0, $len);\n    }\n    return $strings;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    $len = strlen($string);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return\
    \ $prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  return array_reduce(\n    array_keys(str_split($string)),\n    function($result,\
    \ $index) use ($string) {\n      $result[] = substr($string, 0, $index + 1);\n\
    \      return $result;\n    },\n    []\n  );\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb9qezoy_.php:21\n\
    Stack trace:\n#0 /tmp/tmpb9qezoy_.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpb9qezoy_.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = [];\n    $prefix = '';\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        $prefix .= $string[$i];\n        $result[] = $prefix;\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $len = strlen($string);\n    $result = [];\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $result[] = substr($string, 0, $i + 1);\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $length = strlen($string);\n    $prefixes = [];\n    for ($i = 0; $i\
    \ < $length; $i++) {\n        $prefixes[] = substr($string, 0, $i + 1);\n    }\n\
    \    return $prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $length = strlen($string);\n    for ($i = 1; $i <= $length; $i++) {\n\
    \        $ret[] = substr($string, 0, $i);\n    }\n    return $ret;\n}\n\nfunction\
    \ candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3qtgaxkr.php:18\n\
    Stack trace:\n#0 /tmp/tmp3qtgaxkr.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp3qtgaxkr.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n   \
    \     $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = array();\n  for ($i = 0; $i < strlen($string); $i++) {\n  \
    \  $prefixes[] = substr($string, 0, $i + 1);\n  }\n  return $prefixes;\n}\n\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    $length = strlen($string);\n    for ($i = 0; $i\
    \ < $length; $i++) {\n        $prefixes[] = substr($string, 0, $i + 1);\n    }\n\
    \    return $prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = array();\n  for ($i = 0; $i < strlen($string); $i++) {\n  \
    \  $prefixes[] = substr($string, 0, $i + 1);\n  }\n  return $prefixes;\n}\n\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = [];\n  for ($i = 0; $i < strlen($string); $i++) {\n    $prefixes[]\
    \ = substr($string, 0, $i + 1);\n  }\n  return $prefixes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $out = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        $out[]\
    \ = substr($string, 0, $i + 1);\n    }\n    return $out;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $results = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n    \
    \    $results[] = substr($string, 0, $i + 1);\n    }\n    return $results;\n}\n\
    \nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = [];\n    $total = strlen($string);\n    for ($i = 1; $i <=\
    \ $total; $i++) {\n        $result[] = substr($string, 0, $i);\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $output = [];\n    $count = strlen($string);\n    for ($i = 1; $i <=\
    \ $count; $i++) {\n        $output[] = substr($string, 0, $i);\n    }\n    return\
    \ $output;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $strings = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n    \
    \    $strings[] = substr($string, 0, $i + 1);\n    }\n    return $strings;\n}\n\
    \nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n   \
    \     $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    $length = strlen($string);\n    for ($i = 0; $i\
    \ < $length; $i++) {\n        $prefixes[] = substr($string, 0, $i + 1);\n    }\n\
    \    return $prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $result = [];\n  for ($i = 0; $i < strlen($string); $i++) {\n    $result[]\
    \ = substr($string, 0, $i + 1);\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = [];\n    $length = strlen($string);\n    for ($i = 1; $i <=\
    \ $length; $i++) {\n        $result[] = substr($string, 0, $i);\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $len = strlen($string);\n    $prefixes = [];\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return\
    \ $prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $res = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        $res[]\
    \ = substr($string, 0, $i + 1);\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = [];\n  for ($i = 0; $i < strlen($string); $i++) {\n    $prefixes[]\
    \ = substr($string, 0, $i + 1);\n  }\n  return $prefixes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = [];\n  $prefix = '';\n  foreach (str_split($string) as $char)\
    \ {\n    $prefix .= $char;\n    $prefixes[] = $prefix;\n  }\n  return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc6h8z4g5.php:20\n\
    Stack trace:\n#0 /tmp/tmpc6h8z4g5.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpc6h8z4g5.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n     \
    \   $result[] = substr($string, 0, $i + 1);\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    return array_filter(str_split($string), function($s) { return !empty($s);\
    \ }, ARRAY_FILTER_USE_KEY);\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprsdtbpzb.php:15\n\
    Stack trace:\n#0 /tmp/tmprsdtbpzb.php(19): test()\n#1 {main}\n  thrown in /tmp/tmprsdtbpzb.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n     \
    \   $result[] = substr($string, 0, $i + 1);\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $r = [];\n    for ($i = 1; $i <= strlen($string); $i++) {\n        $r[]\
    \ = substr($string, 0, $i);\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    $length = strlen($string);\n    for ($i = 0; $i\
    \ < $length; $i++) {\n        $prefixes[] = substr($string, 0, $i + 1);\n    }\n\
    \    return $prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    return array_map(function($i) use ($string) {\n        return substr($string,\
    \ 0, $i);\n    }, range(1, strlen($string)));\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4zc12_qt.php:16\n\
    Stack trace:\n#0 /tmp/tmp4zc12_qt.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp4zc12_qt.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $results = [];\n    $len = strlen($string);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $results[] = substr($string, 0, $i + 1);\n    }\n    return\
    \ $results;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n   \
    \     $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $result = [];\n  $len = strlen($string);\n  for ($i = 0; $i < $len; $i++)\
    \ {\n    $result[] = substr($string, 0, $i + 1);\n  }\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = [];\n    $length = strlen($string);\n    for ($i = 1; $i <=\
    \ $length; $i++) {\n        $result[] = substr($string, 0, $i);\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    for ($i = 0; $i < strlen($string); $i++) {\n        $prefixes[] = substr($string,\
    \ 0, $i + 1);\n    }\n    return $prefixes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2fmo96z.php:17\n\
    Stack trace:\n#0 /tmp/tmpg2fmo96z.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpg2fmo96z.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    for ($i = 1; $i <= strlen($string); $i++) {\n        $prefixes[] = substr($string,\
    \ 0, $i);\n    }\n    return $prefixes;\n}\n\nfunction candidate(...$args) {\n\
    \    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg5iv6q01.php:17\n\
    Stack trace:\n#0 /tmp/tmpg5iv6q01.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpg5iv6q01.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $arr_prefixes = [];\n    $len = strlen($string);\n    for ($i = 0; $i\
    \ < $len; $i++) {\n        $arr_prefixes[] = substr($string, 0, $i + 1);\n   \
    \ }\n    return $arr_prefixes;\n}\n\nfunction candidate(...$args) {\n    return\
    \ all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n   \
    \     $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $output = [];\n  $length = strlen($string);\n  for ($i = 1; $i <= $length;\
    \ $i++) {\n    $output[] = substr($string, 0, $i);\n  }\n  return $output;\n}\n\
    \nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n   \
    \     $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $p = [];\n  for ($i = 0; $i < strlen($string); $i++) {\n    $p[] = substr($string,\
    \ 0, $i + 1);\n  }\n  return $p;\n}\n\nfunction candidate(...$args) {\n    return\
    \ all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  return array_map(function($i) use ($string) {\n    return substr($string,\
    \ 0, $i);\n  }, range(1, strlen($string)));\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpscp4ujyi.php:16\n\
    Stack trace:\n#0 /tmp/tmpscp4ujyi.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpscp4ujyi.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = [];\n    $prefix = '';\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        $prefix .= $string[$i];\n        $result[] = $prefix;\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n   \
    \     $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = array();\n  for ($i = 0; $i < strlen($string); $i++) {\n  \
    \  $prefixes[] = substr($string, 0, $i + 1);\n  }\n  return $prefixes;\n}\n\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n   \
    \     $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  return explode(' ', substr(str_repeat(' ' . $string, strlen($string)),\
    \ 1));\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy2zlu0lu.php:14\n\
    Stack trace:\n#0 /tmp/tmpy2zlu0lu.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpy2zlu0lu.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    if (!is_string($string)) return [];\n    $len = strlen($string);\n  \
    \  $prefixes = [];\n    for ($i = 1; $i <= $len; $i++) {\n        $prefixes[]\
    \ = substr($string, 0, $i);\n    }\n    return $prefixes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $length = strlen($string);\n  for ($i = 1; $i <= $length; $i++) {\n   \
    \ $prefixes[] = substr($string, 0, $i);\n  }\n  return $prefixes;\n}\n\nfunction\
    \ candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1b2tlete.php:18\n\
    Stack trace:\n#0 /tmp/tmp1b2tlete.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp1b2tlete.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n   \
    \     $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $ret = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        $ret[]\
    \ = substr($string, 0, $i + 1);\n    }\n    return $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n   \
    \     $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $array = [];\n    for ($i = 1; $i <= strlen($string); $i++) {\n     \
    \   $array[] = substr($string, 0, $i);\n    }\n    return $array;\n}\nfunction\
    \ candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $strings = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n    \
    \    $strings[] = substr($string, 0, $i + 1);\n    }\n    return $strings;\n}\n\
    \nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = [];\n    $len = strlen($string);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $result[] = substr($string, 0, $i + 1);\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = [];\n    for ($length = 1; $length <= strlen($string); $length++)\
    \ {\n        $result[] = substr($string, 0, $length);\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $split = str_split($string);\n    $result = [];\n    for ($i = 0; $i\
    \ < count($split); $i++) {\n        $result[] = implode('', array_slice($split,\
    \ 0, $i + 1));\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw963ocn_.php:19\n\
    Stack trace:\n#0 /tmp/tmpw963ocn_.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpw963ocn_.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n   \
    \     $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $len = strlen($string);\n    $prefixes = [];\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return\
    \ $prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $results = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n    \
    \    $results[] = substr($string, 0, $i + 1);\n    }\n    return $results;\n}\n\
    \nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = [];\n    $size = strlen($string);\n    for ($i = 1; $i <= $size;\
    \ $i++) {\n        $result[] = substr($string, 0, $i);\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n   \
    \     $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n   \
    \     $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n     \
    \   $result[] = substr($string, 0, $i + 1);\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n\t// Your code here\n\t$res = [];\n\t$n = strlen($string);\n\tfor ($i = 0;\
    \ $i < $n; $i++) {\n\t\t$res[] = substr($string, 0, $i + 1);\n\t}\n\treturn $res;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefix_arr = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n \
    \       $substr = substr($string, 0, $i + 1);\n        array_push($prefix_arr,\
    \ $substr);\n    }\n    return $prefix_arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n     \
    \   $result[] = substr($string, 0, $i + 1);\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n   \
    \     $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    for ($i = 1; $i <= strlen($string); $i++) {\n        $prefix = substr($string,\
    \ 0, $i);\n        yield $prefix;\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpshg6lh63.php:17\n\
    Stack trace:\n#0 /tmp/tmpshg6lh63.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpshg6lh63.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $string_length = strlen($string);\n    $prefixes = [];\n    for ($i =\
    \ 0; $i < $string_length; $i++) {\n        $prefixes[] = substr($string, 0, $i\
    \ + 1);\n    }\n    return $prefixes;\n}\n\nfunction candidate(...$args) {\n \
    \   return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n     \
    \   $result[] = substr($string, 0, $i + 1);\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = [];\n    $length = strlen($string);\n    for ($i = 1; $i <=\
    \ $length; $i++) {\n        $result[] = substr($string, 0, $i);\n    }\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n     \
    \   $result[] = substr($string, 0, $i + 1);\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n\t$prefixes = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\t$prefixes[]\
    \ = substr($string, 0, $i + 1);\n\t}\n\treturn $prefixes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n\t$result = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\t$result[]\
    \ = substr($string, 0, $i + 1);\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n\t$prefixes = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\t$prefixes[]\
    \ = substr($string, 0, $i + 1);\n\t}\n\treturn $prefixes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    return array_map(function($i) use ($string) { return substr($string,\
    \ 0, $i); }, range(1, strlen($string)));\n}\n\nfunction candidate(...$args) {\n\
    \    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjuezsk1d.php:14\n\
    Stack trace:\n#0 /tmp/tmpjuezsk1d.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpjuezsk1d.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $max_index = strlen($string) - 1;\n    $prefixes = [];\n    for ($i =\
    \ 0; $i <= $max_index; $i++) {\n        $prefixes[] = substr($string, 0, $i +\
    \ 1);\n    }\n    return $prefixes;\n}\n\nfunction candidate(...$args) {\n   \
    \ return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $n = strlen($string);\n    $result = [];\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $result[] = substr($string, 0, $i + 1);\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    for ($i = 1; $i <= strlen($string); $i++) {\n        $result[] = substr($string,\
    \ 0, $i);\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp111d_ols.php:17\n\
    Stack trace:\n#0 /tmp/tmp111d_ols.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp111d_ols.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n\t$prefixes = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\t$prefixes[]\
    \ = substr($string, 0, $i + 1);\n\t}\n\treturn $prefixes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n\t$all_prefixes = [];\n\t\n\t$prefix_length = 1;\n\twhile ($prefix_length\
    \ <= strlen($string)) {\n\t\t$all_prefixes[] = substr($string, 0, $prefix_length);\n\
    \t\t$prefix_length++;\n\t}\n\t\n\treturn $all_prefixes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $length = strlen($string);\n    $result = [];\n    for ($i = 1; $i <=\
    \ $length; $i++) {\n        $result[] = substr($string, 0, $i);\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $result = [];\n  for ($i = 0; $i < strlen($string); $i++) {\n    $result[]\
    \ = substr($string, 0, $i + 1);\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $ret = [];\n    for ($i = 1; $i <= strlen($string); $i++) {\n       \
    \ $ret[] = substr($string, 0, $i);\n    }\n    return $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    for ($length = 1; $length <= strlen($string); $length++)\
    \ {\n        $prefixes[] = substr($string, 0, $length);\n    }\n    return $prefixes;\n\
    }\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = array();\n  for ($i = 0; $i < strlen($string); $i++) {\n  \
    \  $prefixes[] = substr($string, 0, $i + 1);\n  }\n  return $prefixes;\n}\n\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $ret = [];\n    $length = strlen($string);\n    for ($i = 1; $i <= $length;\
    \ $i++) {\n        $ret[] = substr($string, 0, $i);\n    }\n    return $ret;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $strlen = strlen($string);\n    $prefixes = [];\n    for ($i = 0; $i\
    \ < $strlen; $i++) {\n        $prefixes[] = substr($string, 0, $i + 1);\n    }\n\
    \    return $prefixes;\n}\n\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n   \
    \     $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n   \
    \     $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    for ($i = 1; $i <= strlen($string); $i++) {\n        $prefixes[] = substr($string,\
    \ 0, $i);\n    }\n    return $prefixes;\n}\n\nfunction candidate(...$args) {\n\
    \    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp542g9mlo.php:17\n\
    Stack trace:\n#0 /tmp/tmp542g9mlo.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp542g9mlo.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = [];\n    $length = strlen($string);\n    for ($i = 1; $i <=\
    \ $length; $i++) {\n        $result[] = substr($string, 0, $i);\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $result = [];\n  for ($i = 0; $i < strlen($string); $i++) {\n    $result[]\
    \ = substr($string, 0, $i + 1);\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n   \
    \     $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $parts = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n      \
    \  $parts[] = substr($string, 0, $i + 1);\n    }\n    return $parts;\n}\n\nfunction\
    \ candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n   \
    \     $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $length = strlen($string);\n  $length_range = range(1, $length);\n  $prefixes\
    \ = array_map(function($length) use ($string) {\n    return substr($string, 0,\
    \ $length);\n  }, $length_range);\n  return $prefixes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkjaz9mdl.php:19\n\
    Stack trace:\n#0 /tmp/tmpkjaz9mdl.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpkjaz9mdl.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $ret = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        $ret[]\
    \ = substr($string, 0, $i + 1);\n    }\n    return $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $length = strlen($string);\n    $output = [];\n    for ($i = 1; $i <=\
    \ $length; $i++) {\n        $output[] = substr($string, 0, $i);\n    }\n    return\
    \ $output;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $output = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n     \
    \   $output[] = substr($string, 0, $i + 1);\n    }\n    return $output;\n}\n\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n   \
    \     $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    if (empty($string)) {\n        return [];\n    }\n    $output = [''];\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        $output[] = substr($string,\
    \ 0, $i + 1);\n    }\n    return $output;\n}\n\nfunction candidate(...$args) {\n\
    \    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphramk3m3.php:22\n\
    Stack trace:\n#0 /tmp/tmphramk3m3.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphramk3m3.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $length = strlen($string);\n  $prefixes = [];\n  for ($i = 1; $i <= $length;\
    \ $i++) {\n    $prefixes[] = substr($string, 0, $i);\n  }\n  return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $ret = [];\n    $length = strlen($string);\n    for ($i = 1; $i <= $length;\
    \ $i++) {\n        $ret[] = substr($string, 0, $i);\n    }\n    return $ret;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    if (strlen($string) <= 1) {\n        return [$string];\n    }\n    return\
    \ array_merge([$string[0]], all_prefixes(substr($string, 1)));\n}\n\nfunction\
    \ candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0sg897ts.php:17\n\
    Stack trace:\n#0 /tmp/tmp0sg897ts.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp0sg897ts.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n   \
    \     $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $output = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n     \
    \   $output[] = substr($string, 0, $i + 1);\n    }\n    return $output;\n}\n\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    return array_map(function($index) use ($string) {\n        return substr($string,\
    \ 0, $index);\n    }, range(1, strlen($string)));\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprugtw94h.php:16\n\
    Stack trace:\n#0 /tmp/tmprugtw94h.php(21): test()\n#1 {main}\n  thrown in /tmp/tmprugtw94h.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $ret = [];\n    for ($i = 1; $i <= strlen($string); $i++) {\n       \
    \ $ret[] = substr($string, 0, $i);\n    }\n    return $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    return array_map(function($i) use ($string) {\n        return substr($string,\
    \ 0, $i);\n    }, range(1, strlen($string)));\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb38fdhs_.php:16\n\
    Stack trace:\n#0 /tmp/tmpb38fdhs_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpb38fdhs_.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = [];\n    $len = strlen($string);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $result[] = substr($string, 0, $i + 1);\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n   \
    \     $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n     \
    \   $result[] = substr($string, 0, $i + 1);\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n     \
    \   $result[] = substr($string, 0, $i + 1);\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $length = strlen($string);\n    $result = [];\n    for ($i = 1; $i <=\
    \ $length; $i++) {\n        $result[] = substr($string, 0, $i);\n    }\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    for ($i = 0; $i < strlen($string); $i++) {\n        $prefixes[] = substr($string,\
    \ 0, $i + 1);\n    }\n    return $prefixes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphlragjaq.php:17\n\
    Stack trace:\n#0 /tmp/tmphlragjaq.php(22): test()\n#1 {main}\n  thrown in /tmp/tmphlragjaq.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n   \
    \     $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $length = strlen($string);\n    $prefixes = [];\n    for ($i = 0; $i\
    \ < $length; $i++) {\n        $prefixes[] = substr($string, 0, $i + 1);\n    }\n\
    \    return $prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n   \
    \     $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $count = strlen($string);\n  $results = [];\n  for ($i = 1; $i <= $count;\
    \ $i++) {\n    $results[] = substr($string, 0, $i);\n  }\n  return $results;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = [];\n  $len = strlen($string);\n  for ($i = 0; $i < $len; $i++)\
    \ {\n    $prefixes[] = substr($string, 0, $i + 1);\n  }\n  return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    if (strlen($string) == 0) {\n        return array();\n    }\n    $prefixes\
    \ = array();\n    for ($i = 0; $i < strlen($string); $i++) {\n        $prefixes[]\
    \ = substr($string, 0, $i + 1);\n    }\n    return $prefixes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $array = array();\n    for ($i = 0; $i < strlen($string); $i++) {\n \
    \       $array[] = substr($string, 0, $i + 1);\n    }\n    return $array;\n}\n\
    \nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $result = [];\n  for ($i = 0; $i < strlen($string); $i++) {\n    $result[]\
    \ = substr($string, 0, $i + 1);\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $pre = [];\n  $str_len = strlen($string);\n  for ($i = 0; $i < $str_len;\
    \ $i++) {\n    $pre[] = substr($string, 0, $i + 1);\n  }\n  return $pre;\n}\n\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $output = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n     \
    \   $output[] = substr($string, 0, $i + 1);\n    }\n    return $output;\n}\n\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $length = strlen($string);\n    $prefixes = [];\n    for ($i = 0; $i\
    \ < $length; $i++) {\n        $prefixes[] = substr($string, 0, $i + 1);\n    }\n\
    \    return $prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $len = strlen($string);\n  $result = [];\n  for ($i = 0; $i < $len; $i++)\
    \ {\n    $result[] = substr($string, 0, $i + 1);\n  }\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n   \
    \     $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n     \
    \   $result[] = substr($string, 0, $i + 1);\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $return_prefixes = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        $return_prefixes[] = substr($string, 0, $i + 1);\n    }\n    return\
    \ $return_prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $res = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        $res[]\
    \ = substr($string, 0, $i + 1);\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
