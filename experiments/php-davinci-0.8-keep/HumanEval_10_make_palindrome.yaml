name: HumanEval_10_make_palindrome
language: php
prompt: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
  // Algorithm idea is simple:\n// - Find the longest postfix of supplied string that\
  \ is a palindrome.\n// - Append to the end of the string reverse of a string prefix\
  \ that comes before the palindromic suffix.\n// >>> make_palindrome('')\n// ''\n\
  // >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n// 'catac'\n\
  function make_palindrome($string) {\n"
tests: "function candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
  \ Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    if ($string == '') {\n        return '';\n    }\n    $length =\
    \ strlen($string);\n    // First, find the longest suffix that is a palindrome.\
    \ We will use the suffix reversed as prefix.\n    $suffix = '';\n    $prefix =\
    \ '';\n    $suffix_reverse = '';\n    for ($i = $length - 1; $i >= 0; $i--) {\n\
    \        // Check if substring ($length - $i, $length) is a palindrome.\n    \
    \    $substring = substr($string, $length - $i, $i + 1);\n        $is_palindrome\
    \ = true;\n        for ($j = 0; $j < (strlen($substring) / 2); $j++) {\n     \
    \       if ($substring[$j] != $substring[strlen($substring) - $j - 1]) {\n   \
    \             $is_palindrome = false;\n                break;\n            }\n\
    \        }\n        if ($is_palindrome) {\n            $suffix = $substring;\n\
    \            break;\n        }\n    }\n    if ($suffix == '') {\n        // No\
    \ palindromic suffix. Reverse the whole string and append it to the beginning.\n\
    \        $prefix = strrev($string);\n    } else {\n        // Palindromic suffix\
    \ exists. Suffix is $suffix. String prefix is ($length - strlen($suffix), $length).\n\
    \        $prefix = strrev(substr($string, 0, $length - strlen($suffix)));\n  \
    \  }\n    // Assemble the result.\n    return $string . $prefix;\n}\n\n$input\
    \ = 'cat';\necho make_palindrome($input);", "    $string = (string) $string;\n\
    \    if (strlen($string) < 2) {\n        return $string;\n    }\n    $longest_suffix\
    \ = longest_palindromic_suffix($string);\n    return $string . substr(strrev($string),\
    \ 0, strlen($string) - strlen($longest_suffix));\n}\n", "    $n = strlen($string);\n\
    \    $i = 1;\n    $palindrome = '';\n    while ($i <= $n) {\n        if (is_palindrome(substr($string,\
    \ 0, $i))) {\n            $palindrome = substr($string, 0, $i);\n        }\n \
    \       $i++;\n    }\n    return $string . strrev(substr($string, strlen($palindrome)));\n\
    }\n", "    if ($string == '') {\n        return '';\n    }\n    $longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix($string);\n    $reverse_string_prefix = strrev(substr($string,\
    \ 0, strlen($string) - strlen($longest_palindrome_suffix)));\n    return $string\
    \ . $reverse_string_prefix;\n}\n", "    $reverse = strrev($string);\n    $length\
    \ = strlen($string);\n    $longest = 0;\n    for ($i = 0; $i < $length; $i++)\
    \ {\n        $postfix = substr($string, $i);\n        $prefix = substr($reverse,\
    \ 0, $length - $i);\n        if ($postfix == $prefix) {\n            $longest\
    \ = $i;\n        }\n    }\n    $prefix = substr($string, 0, $length - $longest);\n\
    \    return $string . strrev($prefix);\n}\n$string = '';\necho $string . ' ' .\
    \ make_palindrome($string) . PHP_EOL;\n$string = 'cat';\necho $string . ' ' .\
    \ make_palindrome($string) . PHP_EOL;\n$string = 'cata';\necho $string . ' ' .\
    \ make_palindrome($string) . PHP_EOL;\n$string = 'xyzcat';\necho $string . ' '\
    \ . make_palindrome($string) . PHP_EOL;", "    $len = strlen($string);\n    for\
    \ ($i = $len; $i > 0; $i--) {\n        $suffix = substr($string, -$i);\n     \
    \   if (is_palindrome($suffix)) {\n            $prefix = substr($string, 0, $len\
    \ - $i);\n            return $string . strrev($prefix);\n        }\n    }\n  \
    \  return $string;\n}\n", "    $len = strlen($string);\n    if ($len <= 1) {\n\
    \        return $string;\n    }\n    $longest_palindrome_pos = $len;\n    for\
    \ ($i = $len - 1; $i >= 0; $i--) {\n        if (is_palindrome($string, $i)) {\n\
    \            $longest_palindrome_pos = $i;\n            break;\n        }\n  \
    \  }\n    return substr($string, 0, $longest_palindrome_pos) . substr($string,\
    \ $longest_palindrome_pos) . substr($string, 0, $longest_palindrome_pos);\n}\n",
  "    $max = '';\n    $length = strlen($string);\n    for ($i = $length; $i > 0;\
    \ $i--) {\n        $sub = substr($string, 0, $i);\n        if ($sub == strrev($sub))\
    \ {\n            $max = $sub;\n            break;\n        }\n    }\n    $string\
    \ .= strrev(substr($string, strlen($max)));\n    return $string;\n}\n\necho make_palindrome(''),\
    \ \"\\n\";\necho make_palindrome('cat'), \"\\n\";\necho make_palindrome('cata'),\
    \ \"\\n\";", "  $length = strlen($string);\n  if ($length == 0) {\n    return\
    \ '';\n  }\n  if ($length == 1) {\n    return $string . $string;\n  }\n  $prefix\
    \ = '';\n  $suffix = '';\n  for ($i = 0; $i < $length - 1; $i++) {\n    $prefix\
    \ .= $string[$i];\n    $suffix = $string[$i] . $suffix;\n    if ($prefix == $suffix)\
    \ {\n      $palindrome = $prefix . $string[$length - 1] . strrev($prefix);\n \
    \     if ($palindrome == $string) {\n        continue;\n      }\n      return\
    \ $palindrome;\n    }\n  }\n  return $string . strrev($string);\n}\n\necho \"\
    make_palindrome('') = '\" . make_palindrome('') . \"'\\n\";\necho \"make_palindrome('cat')\
    \ = '\" . make_palindrome('cat') . \"'\\n\";\necho \"make_palindrome('cata') =\
    \ '\" . make_palindrome('cata') . \"'\\n\";", "    if (!$string) {\n        return\
    \ '';\n    }\n    if (strlen($string) === 1) {\n        return $string;\n    }\n\
    \    $is_palindrome = function($string) {\n        for ($i = 0; $i < strlen($string)\
    \ / 2; $i++) {\n            if ($string[$i] !== $string[strlen($string) - $i -\
    \ 1]) {\n                return false;\n            }\n        }\n        return\
    \ true;\n    };\n    for ($i = strlen($string); $i > 0; $i--) {\n        if ($is_palindrome(substr($string,\
    \ $i))) {\n            $prefix = substr($string, 0, $i);\n            return $string\
    \ . strrev($prefix);\n        }\n    }\n}\n", "    $postfix = find_palindromic_postfix($string);\n\
    \    $prefix = substr($string, 0, strlen($string) - strlen($postfix));\n    return\
    \ $string . strrev($prefix);\n}\n", "    // Length of the input string.\n    $string_length\
    \ = strlen($string);\n    // Backward position in the input string.\n    $backward_index\
    \ = $string_length - 1;\n    // Forward position in the input string.\n    $forward_index\
    \ = 0;\n    // Backward position in the reverse string.\n    $reverse_backward_index\
    \ = 0;\n    // Forward position in the reverse string.\n    $reverse_forward_index\
    \ = $string_length - 1;\n    // Length of the maximum palindromic substring.\n\
    \    $palindrome_length = 0;\n    // Start of the maximum palindromic substring.\n\
    \    $palindrome_start = 0;\n    // While the backward position is greater than\
    \ the forward position.\n    while ($backward_index > $forward_index) {\n    \
    \    // If characters in string match at backward and forward positions.\n   \
    \     if ($string[$backward_index] == $string[$forward_index]) {\n           \
    \ // Increase backward position in string.\n            --$backward_index;\n \
    \           // Increase forward position in string.\n            ++$forward_index;\n\
    \            // Increase backward position in reverse string.\n            ++$reverse_backward_index;\n\
    \            // Decrease forward position in reverse string.\n            --$reverse_forward_index;\n\
    \        }\n        // If characters in string do not match at backward and forward\
    \ positions.\n        else {\n            // If current palindrome is longer than\
    \ the maximum palindrome.\n            if ($palindrome_length < $reverse_backward_index)\
    \ {\n                // Store current palindrome length as the maximum palindrome\
    \ length.\n                $palindrome_length = $reverse_backward_index;\n   \
    \             // Store current palindrome start as the maximum palindrome start.\n\
    \                $palindrome_start = $forward_index;\n            }\n        \
    \    // If forward position in the string is at the beginning.\n            if\
    \ ($forward_index == 0) {\n                // Move backward position in the string\
    \ to the right.\n                --$backward_index;\n            }\n         \
    \   // If forward position in the string is not at the beginning.\n          \
    \  else {\n                // Increase forward position in the string", "  $pref\
    \ = '';\n  $suff = '';\n  if (is_palindrome($string)) {\n    return $string;\n\
    \  }\n  for ($i = mb_strlen($string); $i > 0; $i--) {\n    $pref = mb_substr($string,\
    \ 0, $i);\n    $suff = mb_substr($string, $i);\n    if (is_palindrome($pref))\
    \ {\n      break;\n    }\n  }\n  $pref = mb_substr($pref, 0, -1);\n  return $string\
    \ . strrev($pref);\n}\n", "  // Edge case\n  if (strlen($string) <= 1) {\n   \
    \ return $string;\n  }\n\n  // Find the longest postfix palindrome\n  $rev_string\
    \ = strrev($string);\n  $lcs = lcs($string, $rev_string);\n  $length = strlen($lcs);\n\
    \n  // Substring before the palindrome\n  $prefix = substr($string, 0, strlen($string)\
    \ - $length);\n\n  // Append reverse of prefix to the string\n  return $string\
    \ . strrev($prefix);\n}\n\n/**\n * Find longest common substring between $str1\
    \ and $str2.\n *\n * @param string $str1\n * @param string $str2\n * @return string\n\
    \ */", "  if ($string == strrev($string)) {\n    return $string;\n  }\n  $len\
    \ = strlen($string);\n  for ($i = $len; $i > 0; $i--) {\n    $suffix = substr($string,\
    \ -$i);\n    if ($suffix == strrev($suffix)) {\n      return $string . strrev(substr($string,\
    \ 0, $len - $i));\n    }\n  }\n}\n", "  $max_palindrome_postfix_length = longest_palindrome_postfix_length($string);\n\
    \  $palindrome_postfix = substr($string, -$max_palindrome_postfix_length);\n \
    \ $palindrome_prefix = substr($string, 0, -$max_palindrome_postfix_length);\n\
    \  $palindrome_prefix = reverse($palindrome_prefix);\n  return $palindrome_prefix\
    \ . $string;\n}\n", "  $len = strlen($string);\n  for ($postfix_len = $len; $postfix_len\
    \ >= 0; $postfix_len--) {\n    $postfix = substr($string, -$postfix_len);\n  \
    \  if (str_is_palindrome($postfix)) {\n      return $string . substr(strrev($string),\
    \ $len - $postfix_len);\n    }\n  }\n  return '';\n}\n", "    if (!strlen($string))\
    \ {\n        return '';\n    }\n    // The function below finds the longest palindromic\
    \ suffix of the supplied string.\n    $longest_suffix = find_longest_palindromic_suffix($string);\n\
    \    $prefix = substr($string, 0, -strlen($longest_suffix));\n    $prefix_reversed\
    \ = strrev($prefix);\n    return $string . $prefix_reversed;\n}\n", "  $len =\
    \ strlen($string);\n  for ($i = $len; $i > 0; $i--) {\n    $suffix = substr($string,\
    \ $len - $i);\n    if (is_palindrome($suffix)) {\n      $prefix = substr($string,\
    \ 0, $len - $i);\n      return $string . strrev($prefix);\n    }\n  }\n  return\
    \ $string;\n}\n", "  $len = strlen($string);\n  $palindrome_suffix = '';\n  $palindrome_suffix_len\
    \ = 0;\n  for ($i = 0; $i < $len; $i++) {\n    if ($string[$i] == $string[$len\
    \ - $i - 1]) {\n      $palindrome_suffix .= $string[$i];\n      $palindrome_suffix_len++;\n\
    \    }\n  }\n  $palindrome_prefix = substr($string, 0, $len - $palindrome_suffix_len);\n\
    \  return $string . strrev($palindrome_prefix);\n}\n", "  $rev = strrev($string);\n\
    \  for ($i = 0; $i < strlen($string); $i++) {\n    if (substr($string, $i) ==\
    \ substr($rev, 0, strlen($string) - $i)) {\n      return $string . substr($rev,\
    \ strlen($string) - $i);\n    }\n  }\n}\necho make_palindrome('abcdba') . \"\\\
    n\";\necho make_palindrome('cat') . \"\\n\";\necho make_palindrome('cata') . \"\
    \\n\";\necho make_palindrome('') . \"\\n\";\necho make_palindrome('cta') . \"\\\
    n\";\necho make_palindrome('abc') . \"\\n\";", "    if ($string == '') {\n   \
    \     return '';\n    }\n    if (is_palindrome($string)) {\n        return $string;\n\
    \    }\n    $i = strlen($string) - 1;\n    while ($i > 0) {\n        if (is_palindrome(substr($string,\
    \ $i))) {\n            return $string . strrev(substr($string, 0, $i));\n    \
    \    }\n        $i--;\n    }\n    return $string . strrev($string);\n}\n", " \
    \ $prefix = get_palindrome_prefix($string);\n  return $string . substr(strrev($string),\
    \ strlen($prefix));\n}\n", "    $palindrome_suffix = find_palindrome_suffix($string);\n\
    \    $prefix = substr($string, 0, strlen($string) - strlen($palindrome_suffix));\n\
    \    return $string . strrev($prefix);\n}", "    $start = 0;\n    $end = strlen($string);\n\
    \    $suffix = '';\n    $prefix = '';\n    $suffix_length = 0;\n    while ($start\
    \ < $end) {\n        $substring = substr($string, $start, $end);\n        if (is_palindrome($substring))\
    \ {\n            $suffix = $substring;\n            $suffix_length = strlen($suffix);\n\
    \            break;\n        }\n        $start++;\n    }\n    if ($suffix_length\
    \ == 0) {\n        $suffix = $string;\n        $suffix_length = strlen($suffix);\n\
    \    }\n    $prefix = substr($string, 0, strlen($string) - $suffix_length);\n\
    \    return $prefix . strrev($prefix) . $suffix;\n}\n", "    $reversed = strrev($string);\n\
    \    $string_length = strlen($string);\n    for ($i = 0; $i < $string_length;\
    \ $i++) {\n        $postfix = substr($string, $i);\n        $prefix = substr($string,\
    \ 0, $string_length - $i);\n        if ($postfix == $reversed) {\n           \
    \ return $string . strrev($prefix);\n        }\n    }\n    return '';\n}", " \
    \ $length = strlen($string);\n  for ($i = $length; $i > 0; $i--) {\n    if (is_palindrome(substr($string,\
    \ $length - $i))) {\n      return $string . strrev(substr($string, 0, $length\
    \ - $i));\n    }\n  }\n  return $string;\n}\n\n$arguments = array('', 'cat', 'cata');\n\
    foreach ($arguments as $argument) {\n  echo make_palindrome($argument) . \"\\\
    n\";\n}", "  $length = strlen($string);\n  for ($i = $length; $i > 0; $i--) {\n\
    \    if (is_palindrome(substr($string, 0, $i))) {\n      return $string . strrev(substr($string,\
    \ 0, $length - $i));\n    }\n  }\n  return $string;\n}\n", "    if ($string ==\
    \ '') return '';\n    $string = (string) $string;\n    $len = strlen($string);\n\
    \    $i = 1;\n    while ($i <= $len) {\n        if (substr($string, 0, $i) ==\
    \ strrev(substr($string, $len - $i))) break;\n        $i++;\n    }\n    $suffix\
    \ = substr($string, $i);\n    return $string . strrev($suffix);\n}", "  // Look\
    \ for suffix that is the same as prefix, reversed.\n  $prefix = \"\";\n  $suffix\
    \ = \"\";\n  $length = strlen($string);\n  $match = false;\n  for ($i = 0; $i\
    \ < $length; $i++) {\n    // Add a character to suffix.\n    $suffix .= $string[$i];\n\
    \    // Try to match the suffix to the prefix.\n    $prefix = substr($string,\
    \ 0, $length - $i - 1);\n    if ($suffix == strrev($prefix)) {\n      $match =\
    \ true;\n      break;\n    }\n  }\n  // If no match, return empty string.\n  if\
    \ (!$match) {\n    return \"\";\n  }\n  // Append the reverse of the prefix.\n\
    \  return $string . strrev($prefix);\n}\n", "    $i = strlen($string);\n    while\
    \ (is_palindrome($string, $i) == false) {\n        $i--;\n    }\n    $prefix =\
    \ substr($string, 0, $i);\n    $suffix = strrev($prefix);\n    return $string\
    \ . $suffix;\n}", "  $len = strlen($string);\n  if ($len <= 1) {\n    return $string;\n\
    \  }\n  $longest_palindrome_postfix = '';\n  for ($i = 0; $i < $len; $i++) {\n\
    \    $prefix = substr($string, 0, $len - $i);\n    $suffix = substr($string, $len\
    \ - $i);\n    if ($prefix == strrev($suffix)) {\n      $longest_palindrome_postfix\
    \ = $suffix;\n      break;\n    }\n  }\n  return $string . strrev(substr($string,\
    \ 0, $len - strlen($longest_palindrome_postfix)));\n}\n\necho make_palindrome('abc');",
  "    $string_length = strlen($string);\n    $longest_palindrome_postfix_end = $string_length;\n\
    \    // Iterate through the end of the string.\n    // If a substring of length\
    \ $palindrome_postfix_length is a palindrome,\n    // set $longest_palindrome_postfix_end\
    \ to that index.\n    for ($palindrome_postfix_length = $string_length; $palindrome_postfix_length\
    \ > 0; $palindrome_postfix_length--) {\n        $substring_start = $string_length\
    \ - $palindrome_postfix_length;\n        $substring = substr($string, $substring_start,\
    \ $palindrome_postfix_length);\n        $substring_reversed = strrev($substring);\n\
    \        if ($substring === $substring_reversed) {\n            $longest_palindrome_postfix_end\
    \ = $substring_start;\n            break;\n        }\n    }\n    // Append string\
    \ prefix reverse to the end of the string.\n    $palindrome_prefix = substr($string,\
    \ 0, $longest_palindrome_postfix_end);\n    $palindrome_prefix_reversed = strrev($palindrome_prefix);\n\
    \    $palindrome = $string . $palindrome_prefix_reversed;\n    return $palindrome;\n\
    }\n", "  if (empty($string)) {\n    return '';\n  }\n  $max_size = 0;\n  $position\
    \ = 0;\n  $input_size = strlen($string);\n  $input_size_minus_one = $input_size\
    \ - 1;\n  for ($i = 0; $i < $input_size; $i++) {\n    $size = 0;\n    $position\
    \ = $i;\n    $left = $i;\n    $right = $input_size_minus_one;\n    while (($left\
    \ >= 0) && ($right > $left)) {\n      if ($string[$left] == $string[$right]) {\n\
    \        $size += 2;\n        $left--;\n        $right--;\n      }\n      else\
    \ {\n        break;\n      }\n    }\n    if ($size > $max_size) {\n      $max_size\
    \ = $size;\n    }\n  }\n  $prefix = substr($string, 0, $position - $max_size +\
    \ 1);\n  $prefix = strrev($prefix);\n  return $string . $prefix;\n}", "    if\
    \ ($string == '') {\n        return '';\n    }\n    $suffix = find_longest_palindromic_suffix($string);\n\
    \    $prefix = substr($string, 0, strlen($string) - strlen($suffix));\n    return\
    \ $string . strrev($prefix);\n}\n", "    $longest_palindrome = find_longest_palindrome($string);\n\
    \    if (strlen($longest_palindrome) == strlen($string)) {\n        return $string;\n\
    \    }\n    $prefix = substr($string, 0, strlen($string) - strlen($longest_palindrome));\n\
    \    return $string . strrev($prefix);\n}\n", "    $rev_string = strrev($string);\n\
    \    $len = strlen($string);\n    for ($i = $len; $i > 0; $i--) {\n        if\
    \ (substr($string, 0, $i) == substr($rev_string, $len - $i)) {\n            $result\
    \ = $string . substr($rev_string, 0, $len - $i);\n            break;\n       \
    \ }\n    }\n    return $result;\n}", "    if ($string == '') {\n        return\
    \ '';\n    }\n\n    $palindrome_suffix = get_palindrome_suffix($string);\n   \
    \ $palindrome_suffix_length = strlen($palindrome_suffix);\n    $string_prefix\
    \ = substr($string, 0, strlen($string) - $palindrome_suffix_length);\n    $string_prefix_reversed\
    \ = strrev($string_prefix);\n\n    return $string . $string_prefix_reversed;\n\
    }\n", "    // Base case.\n    if ($string == '') return '';\n    // Find the longest\
    \ palindromic suffix of the string.\n    $len = strlen($string);\n    $end = $len;\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if ($string[$i] == $string[$end\
    \ - 1]) {\n            $end--;\n        } else {\n            break;\n       \
    \ }\n    }\n    // If the string is already a palindrome,\n    // we just return\
    \ the string.\n    if ($end == 0) return $string;\n    // Otherwise we need to\
    \ create a new palindrome.\n    $prefix = substr($string, 0, $end);\n    $suffix\
    \ = make_palindrome($prefix);\n    return $suffix . $string;\n}", "    if (empty($string))\
    \ return '';\n    $prefix = $string;\n    $suffix = '';\n    $string_length =\
    \ strlen($string);\n    $palindrome_found = false;\n    for ($i = 0; $i < $string_length;\
    \ $i++) {\n        $suffix .= $string[$i];\n        $prefix = substr($prefix,\
    \ 0, strlen($prefix) - 1);\n        if (is_palindrome($suffix)) {\n          \
    \  $palindrome_found = true;\n            break;\n        }\n    }\n    if ($palindrome_found)\
    \ {\n        return $string . strrev($prefix);\n    } else {\n        return $string\
    \ . strrev($suffix);\n    }\n}\n", "  $longest_palindrome = '';\n  $length = strlen($string);\n\
    \  for ($i = $length; $i > 0; $i--) {\n    for ($j = 0; $j <= $length - $i; $j++)\
    \ {\n      $possible_palindrome = substr($string, $j, $i);\n      if ($possible_palindrome\
    \ == strrev($possible_palindrome)) {\n        $longest_palindrome = $possible_palindrome;\n\
    \        break 2;\n      }\n    }\n  }\n  $prefix = substr($string, 0, strlen($string)\
    \ - strlen($longest_palindrome));\n  return $prefix . $longest_palindrome . strrev($prefix);\n\
    }\n\nassert(make_palindrome('') == '');\nassert(make_palindrome('cat') == 'catac');\n\
    assert(make_palindrome('cata') == 'catac');\nassert(make_palindrome('121') ==\
    \ '1221');\n\necho \"All test passed. Palindrome is fine.\\n\";", "  $palindrome_suffix\
    \ = get_longest_palindrome_suffix($string);\n  $palindrome_prefix = substr($string,\
    \ 0, strlen($string) - strlen($palindrome_suffix));\n  return $string . strrev($palindrome_prefix);\n\
    }\n", "    // Base case for a palindrome.\n    if (is_palindrome($string)) return\
    \ $string;\n    // Unpack the string and turn it into an array.\n    $chars =\
    \ str_split($string);\n    // Find the longest palindromic suffix (from the end\
    \ of the array).\n    $longest_palindrome_suffix = -1;\n    $longest_palindrome_suffix_length\
    \ = -1;\n    for ($i = count($chars) - 1; $i >= 0; $i--) {\n        $subarray\
    \ = array_slice($chars, $i);\n        $subarray_length = count($subarray);\n \
    \       // 'subarray_length' is at least 2 because we are iterating from the end\
    \ of the array.\n        if ($subarray_length > 1 && is_palindrome($subarray))\
    \ {\n            $longest_palindrome_suffix = $i;\n            $longest_palindrome_suffix_length\
    \ = $subarray_length;\n            break;\n        }\n    }\n    // Get the prefix\
    \ (the part of the string that comes before the palindromic suffix).\n    $prefix\
    \ = array_slice($chars, 0, count($chars) - $longest_palindrome_suffix_length);\n\
    \    // Reverse the prefix and append it to the original string.\n    $prefix\
    \ = array_reverse($prefix);\n    $string .= implode('', $prefix);\n    return\
    \ $string;\n}", "  $length = strlen($string);\n  $prefix = '';\n  $suffix = '';\n\
    \  for ($i = $length - 1; $i >= 0; $i--) {\n    if ($string[$i] == $string[0])\
    \ {\n      $prefix = substr($string, 0, $i);\n      $suffix = substr($string,\
    \ $i);\n      if (is_palindrome($suffix)) {\n        break;\n      }\n    }\n\
    \  }\n  return $string . strrev($prefix);\n}\n", "  $length = strlen($string);\n\
    \  if ($length <= 1) {\n    return $string;\n  }\n  // We'll search for palindromes\
    \ in the range [$n - $maximum_palindrome_length, $n]\n  // $n is the length of\
    \ a string that needs to be palindromed.\n  $n = $length;\n  $maximum_palindrome_length\
    \ = floor($n / 2);\n  $i = 0;\n  $j = $n - 1;\n  $found = FALSE;\n  while (($i\
    \ < $maximum_palindrome_length) && !$found) {\n    if ($string[$i] != $string[$j])\
    \ {\n      $i++;\n      $j--;\n    }\n    else {\n      $found = TRUE;\n    }\n\
    \  }\n  if ($found) {\n    // We've found a palindrome starting at character $i.\n\
    \    // Now we need to reverse the string prefix $string[0, $i - 1]\n    // and\
    \ append it to the end of the string $string.\n    $reversed_prefix = strrev(substr($string,\
    \ 0, $i));\n    return $string . $reversed_prefix;\n  }\n  else {\n    // No palindrome\
    \ found.\n    // Return the string with a reversed prefix appended to it.\n  \
    \  return $string . strrev(substr($string, 0, $n - 1));\n  }\n}\n", "  // We need\
    \ to find the longest suffix of the string that is a palindrome.\n  // For example,\
    \ for the string 'cata' longest palindromic suffix is 'ata'.\n  // Thus, our palindrome\
    \ will be 'catac'.\n  $length = strlen($string);\n  for ($i = $length; $i > 0;\
    \ $i--) {\n    $suffix = substr($string, $length - $i);\n    $prefix = substr($string,\
    \ 0, $i);\n    if ($suffix == strrev($prefix)) {\n      return $string . strrev(substr($string,\
    \ 0, $length - $i));\n    }\n  }\n  return $string;\n}\n", "    if ($string ==\
    \ '') return '';\n    $palindrome_length = 0;\n    $palindrome_prefix = '';\n\
    \    for ($len = strlen($string); $len > 0; $len--) {\n        if ($len > $palindrome_length\
    \ && is_palindrome(substr($string, 0, $len))) {\n            $palindrome_length\
    \ = $len;\n            $palindrome_prefix = substr($string, 0, $len);\n      \
    \  }\n    }\n    return $string . strrev(substr($string, $palindrome_length));\n\
    }\n", "  $string_len = strlen($string);\n  $reverse_string = strrev($string);\n\
    \  $palindrome_len = 0;\n  $postfix_len = 0;\n  $len = $string_len;\n  while($len\
    \ > 0) {\n    $suffix = substr($string, $string_len - $len);\n    $postfix = substr($reverse_string,\
    \ 0, $len);\n    if ($suffix == $postfix) {\n      $palindrome_len = $len;\n \
    \     break;\n    }\n    $len--;\n  }\n  $postfix_len = $string_len - $palindrome_len;\n\
    \  $prefix = substr($string, 0, $postfix_len);\n  $reverse_prefix = strrev($prefix);\n\
    \  return $string . $reverse_prefix;\n}\n", "  if (strlen($string) == 0) {\n \
    \   return $string;\n  }\n  $s = $string;\n  while (strcmp($s, strrev($s)) !=\
    \ 0) {\n    $s = substr($s, 1);\n  }\n  return $string . strrev(substr($string,\
    \ 0, strlen($string) - strlen($s)));\n}\n", "  $result = strrev($string);\n  $chars\
    \ = str_split($string);\n  $chars_count = count($chars);\n  $end = $chars_count\
    \ - 1;\n  while ($end > 0) {\n    $middle = floor($end / 2);\n    $is_palindrome\
    \ = true;\n    for ($i = 0; $i <= $middle; $i++) {\n      if ($chars[$i] != $chars[$end\
    \ - $i]) {\n        $is_palindrome = false;\n        break;\n      }\n    }\n\
    \    if ($is_palindrome) {\n      $result .= strrev(substr($string, 0, $end));\n\
    \      break;\n    }\n    $end--;\n  }\n  return $result;\n}\n\necho make_palindrome('')\
    \ . \"\\n\";\necho make_palindrome('cat') . \"\\n\";\necho make_palindrome('cata')\
    \ . \"\\n\";", "    if (empty($string)) {\n        return '';\n    }\n    $string_length\
    \ = strlen($string);\n    for ($i = $string_length; $i > 0; $i--) {\n        $string_suffix\
    \ = substr($string, $string_length - $i);\n        if (is_palindrome($string_suffix))\
    \ {\n            $string_prefix = substr($string, 0, $string_length - $i);\n \
    \           $string_prefix_reversed = strrev($string_prefix);\n            return\
    \ $string_prefix . $string_suffix . $string_prefix_reversed;\n        }\n    }\n\
    }\n", "  $rev_string = strrev($string);\n  $lcs = lcs($string, $rev_string);\n\
    \  $prefix = substr($string, 0, -strlen($lcs));\n  return $string . strrev($prefix);\n\
    }\n", "  if ($string == '') {\n    return '';\n  }\n  $n = strlen($string);\n\
    \  $prefix = '';\n  $suffix = '';\n  $longest_suffix_index = 0;\n  $longest_suffix_len\
    \ = 0;\n  for ($i = 0; $i < $n; $i++) {\n    $prefix = $string[$i] . $prefix;\n\
    \    $suffix = $string[$n - $i - 1] . $suffix;\n    if ($prefix == $suffix) {\n\
    \      $longest_suffix_index = $i;\n      $longest_suffix_len = strlen($prefix);\n\
    \    }\n  }\n  return $string . substr($prefix, 0, $n - $longest_suffix_len);\n\
    }\n\necho make_palindrome('') . \"\\n\";\necho make_palindrome('cat') . \"\\n\"\
    ;\necho make_palindrome('cata') . \"\\n\";", "  for ($i = floor(strlen($string)\
    \ / 2); $i >= 0; $i--) {\n    if (is_palindrome($string, $i)) {\n      return\
    \ $string . strrev(substr($string, 0, $i));\n    }\n  }\n  return '';\n}\n", " \
    \ if (!$string) {\n    return '';\n  }\n  $size = strlen($string);\n  for ($i\
    \ = 0; $i < $size; $i++) {\n    if (is_palindrome($string, $i)) {\n      return\
    \ $string . strrev(substr($string, 0, $i));\n    }\n  }\n  return NULL;\n}\n",
  "    // Find the longest palindromic postfix that ends at the last position of a\
    \ string.\n    $postfix = '';\n    for ($i = strlen($string) - 1; $i >= 0; $i--)\
    \ {\n        if (is_palindrome($string, $i)) {\n            $postfix = substr($string,\
    \ $i);\n            break;\n        }\n    }\n    // Find the longest palindromic\
    \ prefix and reverse it.\n    $prefix = '';\n    for ($i = 0; $i < strlen($string)\
    \ - strlen($postfix); $i++) {\n        if (is_palindrome($string, $i)) {\n   \
    \         $prefix = substr($string, 0, $i);\n            break;\n        }\n \
    \   }\n    return $string . strrev($prefix);\n}\n", "    if (strlen($string) <=\
    \ 1) {\n        return $string;\n    }\n    $length = strlen($string);\n    $palindrome_found\
    \ = false;\n    $left = 0;\n    while ($left < $length) {\n        $right = $length\
    \ - 1;\n        while ($right > $left) {\n            if ($string[$left] == $string[$right])\
    \ {\n                $left++;\n                $right--;\n            } else {\n\
    \                break;\n            }\n        }\n        if ($left >= $right)\
    \ {\n            $palindrome_found = true;\n            break;\n        }\n  \
    \      $left++;\n    }\n    if ($palindrome_found) {\n        $prefix = substr($string,\
    \ 0, $right);\n        $reverse_prefix = strrev($prefix);\n        return $string\
    \ . $reverse_prefix;\n    }\n    return $string . strrev($string);\n}\n", "  \
    \  // Let's find the longest postfix, which is also a palindrome.\n    // Notice,\
    \ that we are looking for a palindrome that ends at the end of the string,\n \
    \   // so start search from the end.\n    $max_postfix_length = 0;\n    $max_postfix_position\
    \ = 0;\n    for ($i = strlen($string) - 1; $i >= 0; $i--) {\n        // Let's\
    \ find a postfix ending at $i, which is also a palindrome.\n        // To do so,\
    \ we will try to expand $i-th position as much to the right as possible.\n   \
    \     // Start with the smallest possible palindrome, i.e. 1 character long.\n\
    \        $postfix_length = 1;\n        while ($postfix_length <= $i) {\n     \
    \       // Check, if left-most boundary of the possible palindrome is equal to\
    \ the right-most boundary.\n            if ($string[$i - $postfix_length] == $string[$i])\
    \ {\n                // We found a longer postfix, which is also a palindrome.\n\
    \                $postfix_length++;\n            } else {\n                //\
    \ The postfix is not a palindrome, so let's skip it.\n                break;\n\
    \            }\n        }\n        // The last iteration of the loop will increase\
    \ postfix length by 1, so let's decrease it back.\n        $postfix_length--;\n\
    \        // If we found a longer postfix, remember its length and position.\n\
    \        if ($postfix_length > $max_postfix_length) {\n            $max_postfix_length\
    \ = $postfix_length;\n            $max_postfix_position = $i;\n        }\n   \
    \ }\n    $prefix = substr($string, 0, $max_postfix_position - $max_postfix_length\
    \ + 1);\n    $prefix_reversed = strrev($prefix);\n    $postfix = substr($string,\
    \ $max_postfix_position + 1);\n    return $prefix . $postfix . $prefix_reversed;\n\
    }", "  $reverse = strrev($string);\n  $suffix = '';\n  for ($i = 0; $i < strlen($string);\
    \ $i++) {\n    if (substr($string, $i) == substr($reverse, 0, strlen($string)\
    \ - $i)) {\n      $suffix = substr($string, $i);\n      break;\n    }\n  }\n \
    \ return $string . strrev(substr($string, 0, strlen($string) - strlen($suffix)));\n\
    }\n\necho make_palindrome('') . PHP_EOL;\necho make_palindrome('cat') . PHP_EOL;\n\
    echo make_palindrome('cata') . PHP_EOL;", "    if (empty($string)) return '';\n\
    \    $length = strlen($string);\n    $suffix = '';\n    for ($i = $length - 1;\
    \ $i >= 0; $i--) {\n        $suffix = $string[$i] . $suffix;\n        if (substr($string,\
    \ 0, $i) == $suffix) {\n            break;\n        }\n    }\n    return $string\
    \ . strrev(substr($string, 0, $i));\n}\n", "  $len = strlen($string);\n  $suffix\
    \ = $string;\n  while (1) {\n    $rev_suffix = strrev($suffix);\n    if ($rev_suffix\
    \ == $suffix) {\n      break;\n    }\n    $suffix = substr($suffix, 1);\n  }\n\
    \  return $string . substr($string, 0, $len - strlen($suffix));\n}\n\n$string\
    \ = 'cata';\necho \"$string => \" . make_palindrome($string) . \"\\n\";\necho\
    \ \"cat => \" . make_palindrome('cat') . \"\\n\";\necho \" => \" . make_palindrome('')\
    \ . \"\\n\";", "    // If string is empty, we cannot make a palindrome.\n    if\
    \ (empty($string)) {\n        return '';\n    }\n\n    // Find the longest postfix\
    \ of supplied string that is a palindrome.\n    $i = 1;\n    while ($i <= strlen($string))\
    \ {\n        if (is_palindrome(substr($string, -$i))) {\n            break;\n\
    \        }\n        $i++;\n    }\n\n    // Prepend to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    $string .=\
    \ strrev(substr($string, 0, -$i + 1));\n\n    return $string;\n}\n", "  // Remove\
    \ spaces from the string.\n  $string = str_replace(' ', '', $string);\n  // Find\
    \ the number of characters in the string.\n  $n = strlen($string);\n  // If the\
    \ string already is a palindrome, return it.\n  if (is_palindrome($string)) return\
    \ $string;\n  // Find the longest palindromic suffix of the string.\n  $suffix\
    \ = longest_palindromic_suffix($string);\n  // Find the length of the suffix.\n\
    \  $suffix_length = strlen($suffix);\n  // Find the string prefix before the palindromic\
    \ suffix.\n  $prefix = substr($string, 0, $n - $suffix_length);\n  // Return the\
    \ prefixed string with the reverse of the prefix appended to the end.\n  return\
    \ $prefix . strrev($prefix) . $suffix;\n}\n", "    $len = strlen($string);\n \
    \   $longest_palindrome_len = longest_palindrome_len($string);\n    $reverse_prefix\
    \ = '';\n    for ($i = $longest_palindrome_len; $i < $len; $i++) {\n        $reverse_prefix\
    \ = $string[$i] . $reverse_prefix;\n    }\n    return $string . $reverse_prefix;\n\
    }", "    $length = strlen($string);\n    $longest_match = 0;\n    $longest_match_pos\
    \ = 0;\n    $pos = 0;\n    while ($pos < $length) {\n        $match_len = 0;\n\
    \        while ($pos - $match_len - 1 >= 0 && $pos + $match_len < $length && $string[$pos\
    \ - $match_len - 1] == $string[$pos + $match_len]) {\n            $match_len++;\n\
    \        }\n        if ($match_len > $longest_match) {\n            $longest_match\
    \ = $match_len;\n            $longest_match_pos = $pos;\n        }\n        $pos++;\n\
    \    }\n    $prefix = substr($string, 0, $longest_match_pos - $longest_match);\n\
    \    $prefix_reversed = strrev($prefix);\n    return $string . $prefix_reversed;\n\
    }\n\necho make_palindrome('') . \"\\n\";\necho make_palindrome('cat') . \"\\n\"\
    ;\necho make_palindrome('cata') . \"\\n\";", "    $rev = strrev($string);\n  \
    \  $pos = strpos($string, $rev);\n    $prefix = substr($string, 0, $pos);\n  \
    \  $rev_prefix = strrev($prefix);\n    return $string . $rev_prefix;\n}\n\nprint(make_palindrome(''));\n\
    print(\"\\n\");\nprint(make_palindrome('cat'));\nprint(\"\\n\");\nprint(make_palindrome('cata'));\n\
    print(\"\\n\");\n", "    $len = strlen($string);\n    if ($len <= 1) {\n     \
    \   return $string;\n    }\n    $i = $len - 1;\n    while (!is_palindrome(substr($string,\
    \ $i))) {\n        $i--;\n    }\n    return $string . strrev(substr($string, 0,\
    \ $i));\n}\n", "    $length = strlen($string);\n    for ($i = 0; $i < $length;\
    \ $i++) {\n        if (substr($string, $i) == strrev(substr($string, 0, $i)))\
    \ {\n            return $string . strrev(substr($string, $i));\n        }\n  \
    \  }\n    return $string;\n}", "  $palindrome_start = find_palindrome_start($string);\n\
    \  $string_head = substr($string, 0, $palindrome_start);\n  $reverse_string_head\
    \ = strrev($string_head);\n  return $string.$reverse_string_head;\n}\n", "   \
    \ $postfix = get_postfix($string);\n    $prefix = get_prefix($string);\n    return\
    \ $prefix . $postfix . strrev($prefix);\n}\n", "    $prefix = '';\n    $suffix\
    \ = '';\n    $tmp_string = $string;\n    while ($tmp_string) {\n        $prefix\
    \ = substr($tmp_string, 0, 1) . $prefix;\n        $suffix = $suffix . substr($tmp_string,\
    \ -1);\n        if ($prefix == $suffix) {\n            break;\n        }\n   \
    \     $tmp_string = substr($tmp_string, 1, -1);\n    }\n    return $string . strrev(substr($string,\
    \ 0, strlen($string) - strlen($suffix)));\n}\n", "  $length = strlen($string);\n\
    \  if ($length <= 1) {\n    return $string;\n  }\n  $palindrome_length = 0;\n\
    \  for ($i = 1; $i <= $length; $i++) {\n    if ($string[$length - $i] === $string[$length\
    \ - $palindrome_length - 1]) {\n      $palindrome_length++;\n    }\n    else {\n\
    \      $palindrome_length = 0;\n    }\n  }\n  return $string . strrev(substr($string,\
    \ 0, $length - $palindrome_length));\n}\n\necho make_palindrome('') . PHP_EOL;\n\
    echo make_palindrome('cat') . PHP_EOL;\necho make_palindrome('cata') . PHP_EOL;",
  "  $prefix = '';\n  $suffix = '';\n  $half = strlen($string) / 2;\n  for ($i = $half;\
    \ $i >= 0; $i--) {\n    $prefix = substr($string, 0, $i);\n    $suffix = substr($string,\
    \ $i);\n    if (is_palindrome($suffix)) {\n      return $string . strrev($prefix);\n\
    \    }\n  }\n  return $string;\n}\n", "  $n = strlen($string);\n  $next_string\
    \ = substr($string, 1);\n  $reverse_prefix = strrev(substr($string, 0, $n - strlen(make_palindrome($next_string))));\n\
    \  return $string . $reverse_prefix;\n}\n", "  $longest = '';\n  $i = 0;\n  $n\
    \ = strlen($string);\n  while ($i < $n) {\n    if ($i > 0 && $string[$i] == $string[$i\
    \ - 1]) {\n      $longest = substr($string, $i - 1, 2);\n      break;\n    }\n\
    \    if ($i > 1 && $string[$i] == $string[$i - 2]) {\n      $longest = substr($string,\
    \ $i - 2, 3);\n      break;\n    }\n    $i++;\n  }\n  if ($longest != '') {\n\
    \    return $string . strrev(substr($string, 0, $n - strlen($longest)));\n  }\n\
    \  return $string . strrev(substr($string, 0, $n - 1));\n}\n", "    $string_length\
    \ = strlen($string);\n    $palindrome_suffix = '';\n    for ($index = $string_length\
    \ - 1; $index >= 0; $index--) {\n        $new_palindrome_suffix = $string[$index]\
    \ . $palindrome_suffix;\n        if (is_palindrome($new_palindrome_suffix)) {\n\
    \            $palindrome_suffix = $new_palindrome_suffix;\n        }\n    }\n\
    \    $string_prefix = substr($string, 0, $string_length - strlen($palindrome_suffix));\n\
    \    return $string . strrev($string_prefix);\n}\n", "    if (mb_strlen($string)\
    \ < 2) {\n        return $string;\n    }\n    $max_start = 0;\n    $max_len =\
    \ 1;\n    for ($start = 0; $start < mb_strlen($string); $start++) {\n        for\
    \ ($len = mb_strlen($string) - $start - 1; $len >= 0; $len--) {\n            if\
    \ ($len < $max_len) {\n                break;\n            }\n            if (is_palindrome($string,\
    \ $start, $len)) {\n                $max_start = $start;\n                $max_len\
    \ = $len;\n                break;\n            }\n        }\n    }\n    return\
    \ mb_substr($string, 0, $max_start) . mb_substr($string, $max_start + $max_len,\
    \ mb_strlen($string) - $max_start - $max_len) . mb_substr($string, $max_start,\
    \ $max_len);\n}\n", "    if ($string == '') {\n        return '';\n    }\n   \
    \ if (strlen($string) == 1) {\n        return $string . $string;\n    }\n    $length\
    \ = strlen($string);\n    $is_palindrome = false;\n    $iteration = 0;\n    $maximum_postfix_length\
    \ = $length;\n    $palindrome_part = '';\n    $suffix = '';\n    $palindrome_length\
    \ = 0;\n    while (!$is_palindrome && $iteration < $maximum_postfix_length) {\n\
    \        // Find a palindrome.\n        $palindrome_part = substr($string, -$maximum_postfix_length,\
    \ $maximum_postfix_length);\n        $suffix = substr($palindrome_part, 0, $maximum_postfix_length\
    \ - $iteration);\n        $prefix = substr($palindrome_part, $maximum_postfix_length\
    \ - $iteration, $iteration);\n        $is_palindrome = strrev($prefix) == $suffix;\n\
    \        $iteration++;\n    }\n    if ($is_palindrome) {\n        $palindrome_length\
    \ = $maximum_postfix_length - $iteration + 1;\n    }\n    $prefix = substr($string,\
    \ 0, $length - $palindrome_length);\n    return $prefix . $palindrome_part . strrev($prefix);\n\
    }\n\necho make_palindrome('') . PHP_EOL;\necho make_palindrome('cat') . PHP_EOL;\n\
    echo make_palindrome('cata') . PHP_EOL;\necho make_palindrome('cataa') . PHP_EOL;\n\
    echo make_palindrome('aacata') . PHP_EOL;\necho make_palindrome('12345677899876543')\
    \ . PHP_EOL;\necho make_palindrome('catop') . PHP_EOL;\necho make_palindrome('catopop')\
    \ . PHP_EOL;\necho make_palindrome('topcop') . PHP_EOL;\necho make_palindrome('topcopop",
  "    $string_len = strlen($string);\n    $longest_palindrome_end = -1;\n\n    for\
    \ ($j = 0; $j < $string_len; $j++) {\n        $is_palindrome = true;\n       \
    \ $check_string_len = $string_len - $j;\n        for ($k = 0; $k < $check_string_len;\
    \ $k++) {\n            if ($string[$j + $k] != $string[$string_len - 1 - $k])\
    \ {\n                $is_palindrome = false;\n                break;\n       \
    \     }\n        }\n        if ($is_palindrome) {\n            $longest_palindrome_end\
    \ = $j + $check_string_len - 1;\n            break;\n        }\n    }\n\n    $prefix\
    \ = substr($string, 0, $longest_palindrome_end + 1);\n    $palindrome = $string\
    \ . strrev($prefix);\n    return $palindrome;\n}\n\n$palindrome = make_palindrome('cat');\n\
    if ($palindrome == 'catac') {\n    echo \"PASS\\n\";\n} else {\n    echo \"FAIL\\\
    n\";\n}\n\n$palindrome = make_palindrome('cata');\nif ($palindrome == 'catac')\
    \ {\n    echo \"PASS\\n\";\n} else {\n    echo \"FAIL\\n\";\n}\n\n$palindrome\
    \ = make_palindrome('');\nif ($palindrome == '') {\n    echo \"PASS\\n\";\n} else\
    \ {\n    echo \"FAIL\\n\";\n}", "  if (strlen($string) <= 1) {\n    return $string;\n\
    \  }\n  $first = mb_substr($string, 0, 1);\n  $last = mb_substr($string, -1);\n\
    \  if ($first == $last) {\n    return $string . mb_substr(make_palindrome(mb_substr($string,\
    \ 1, -1)), 0, -1);\n  }\n  else {\n    return $first . make_palindrome(mb_substr($string,\
    \ 1)) . $first;\n  }\n}\n", "    $len = strlen($string);\n    $palindrome_suffix\
    \ = '';\n    $palindrome_suffix_len = 0;\n    for ($i = 0; $i < $len; $i++) {\n\
    \        $reversed_prefix = strrev(substr($string, 0, $i + 1));\n        if (substr($string,\
    \ $i + 1) == $reversed_prefix) {\n            $palindrome_suffix = $reversed_prefix;\n\
    \            $palindrome_suffix_len = $i + 1;\n        }\n    }\n    return $string\
    \ . substr($palindrome_suffix, $palindrome_suffix_len);\n}", "  $reversed = strrev($string);\n\
    \  $string_length = strlen($string);\n  $prefix_length = 0;\n  for ($i = 0; $i\
    \ < $string_length; $i++) {\n    if ($string[$i] === $reversed[$string_length\
    \ - $i - 1]) {\n      $prefix_length++;\n    } else {\n      break;\n    }\n \
    \ }\n  return $string . substr($reversed, $prefix_length);\n}\n\necho make_palindrome('cat')\
    \ . \"\\n\";\necho make_palindrome('cata') . \"\\n\";\necho make_palindrome('kanyewest')\
    \ . \"\\n\";\necho make_palindrome('dog') . \"\\n\";", "    $length = strlen($string);\n\
    \    for ($i = 1; $i <= $length; $i++) {\n        if (is_palindrome(substr($string,\
    \ 0, $i))) {\n            $reverse = strrev(substr($string, $i));\n          \
    \  return $string . $reverse;\n        }\n    }\n}\n", "  $len = strlen($string);\n\
    \  $n = $len;\n  for ($i = 0; $i < $len - 1; $i++) {\n    if ($string[$i] == $string[$n\
    \ - 1]) {\n      $prefix = substr($string, 0, $i + 1);\n      $suffix = substr($string,\
    \ $i + 1);\n      $reverse_prefix = strrev($prefix);\n      if ($suffix == $reverse_prefix)\
    \ {\n        return $string . $reverse_prefix;\n      }\n    }\n  }\n  $n--;\n\
    \  return $string . strrev(substr($string, 0, $n));\n}\n", "  if (empty($string))\
    \ {\n    return '';\n  }\n  $str_length = strlen($string);\n  for ($suffix_length\
    \ = $str_length; $suffix_length > 0; $suffix_length--) {\n    $suffix = substr($string,\
    \ -$suffix_length);\n    if (is_palindrome($suffix)) {\n      $prefix = substr($string,\
    \ 0, $str_length - $suffix_length);\n      return $string . strrev($prefix);\n\
    \    }\n  }\n}\n", "  // Find the longest palindromic suffix.\n  $suffix = '';\n\
    \  for ($i = 0; $i < strlen($string); $i++) {\n    $suffix = $string[$i] . $suffix;\n\
    \    if (is_palindrome($suffix)) {\n      return $string . strrev(substr($string,\
    \ 0, strlen($string) - strlen($suffix)));\n    }\n  }\n  // If string is already\
    \ a palindrome, return it.\n  return $string;\n}\n", "    if ($string == '') {\n\
    \        return '';\n    }\n\n    // Find the longest palindromic suffix of the\
    \ supplied string.\n    // Two-pointer approach is used here.\n    $end = strlen($string)\
    \ - 1;\n    for ($start = 0; $start < $end; $start++) {\n        if ($string[$start]\
    \ != $string[$end]) {\n            continue;\n        }\n\n        $palindrome_length\
    \ = 0;\n        while ($start - $palindrome_length >= 0 && $end + $palindrome_length\
    \ < strlen($string) && $string[$start - $palindrome_length] == $string[$end +\
    \ $palindrome_length]) {\n            $palindrome_length++;\n        }\n\n   \
    \     if ($start - $palindrome_length == -1) {\n            break;\n        }\n\
    \    }\n\n    // Invert the remaining string and append to the supplied string.\n\
    \    return $string . strrev(substr($string, 0, $start - $palindrome_length +\
    \ 1));\n}\n\necho make_palindrome('') . \"\\n\";\necho make_palindrome('cat')\
    \ . \"\\n\";\necho make_palindrome('cata') . \"\\n\";", "    if ($string == strrev($string))\
    \ {\n        return $string;\n    }\n    $longest_palindrome = \"\";\n    for\
    \ ($i = strlen($string); $i > 0; $i--) {\n        $substring = substr($string,\
    \ 0, $i);\n        if ($substring == strrev($substring)) {\n            $longest_palindrome\
    \ = $substring;\n            break;\n        }\n    }\n    $string_prefix = substr($string,\
    \ strlen($longest_palindrome));\n    return $string . strrev($string_prefix);\n\
    }", "  if (!strlen($string)) {\n    return '';\n  }\n  // Find a longest palindromic\
    \ suffix.\n  $suffix = $string;\n  while (strlen($suffix) > 1) {\n    if (is_palindrome($suffix))\
    \ {\n      break;\n    }\n    $suffix = substr($suffix, 1);\n  }\n  // Append\
    \ the reverse of a string prefix.\n  return $string . strrev(substr($string, 0,\
    \ strlen($string) - strlen($suffix)));\n}\n", "    $length = strlen($string);\n\
    \    $t = array();\n    $i = 0;\n    $j = -1;\n    $t[0] = -1;\n    while ($i\
    \ < $length) {\n        while ($j >= 0 && $string[$i] != $string[$j]) {\n    \
    \        $j = $t[$j];\n        }\n        $i++;\n        $j++;\n        $t[$i]\
    \ = $j;\n    }\n    $prefix = substr($string, 0, $j);\n    $prefix = strrev($prefix);\n\
    \    return $string . $prefix;\n}", "  $reverse = '';\n  for ($i = strlen($string);\
    \ $i >= 0; $i--) {\n    $reverse .= $string[$i];\n  }\n  $longest_postfix = find_longest_palindromic_postfix($string);\n\
    \  return $string . substr($reverse, 0, strlen($string) - strlen($longest_postfix));\n\
    }\n", "    $palindrome_length = longest_palindrome_postfix($string);\n    $prefix\
    \ = substr($string, 0, $palindrome_length);\n    $prefix_reverse = strrev($prefix);\n\
    \    return $string . $prefix_reverse;\n}\n", "    $reverse = strrev($string);\n\
    \    $length = strlen($string);\n    for ($i = 0; $i < $length; $i++) {\n    \
    \    if (substr($string, 0, $length - $i) == substr($reverse, $i)) {\n       \
    \     return $string . substr($reverse, $i);\n        }\n    }\n    return $string;\n\
    }\n", "    if (strlen($string) == 0) {\n        return '';\n    }\n\n    $string_len\
    \ = strlen($string);\n    $longest_suffix_palindrome_len = 0;\n    $longest_suffix_palindrome_begin\
    \ = 0;\n    for ($i = $string_len - 1; $i >= 0; $i--) {\n        if (is_palindrome($string,\
    \ $i, $string_len - 1)) {\n            $longest_suffix_palindrome_len = $string_len\
    \ - $i;\n            $longest_suffix_palindrome_begin = $i;\n            break;\n\
    \        }\n    }\n\n    $reverse_prefix = '';\n    for ($i = 0; $i < $longest_suffix_palindrome_begin;\
    \ $i++) {\n        $reverse_prefix = $string[$i] . $reverse_prefix;\n    }\n\n\
    \    return $string . $reverse_prefix;\n}\n", "  $string_length = strlen($string);\n\
    \  if ($string_length < 2) {\n    return $string;\n  }\n  $palindrome_suffix =\
    \ find_palindrome_suffix($string);\n  $palindrome_suffix_length = strlen($palindrome_suffix);\n\
    \  if ($palindrome_suffix_length == $string_length) {\n    return $string;\n \
    \ }\n  $reverse_prefix = reverse_string(substr($string, 0, $string_length - $palindrome_suffix_length));\n\
    \  return $string . $reverse_prefix;\n}\n", "    $length = strlen($string);\n\
    \    $postfix = \"\";\n    for ($i = $length; $i > 0; $i--) {\n        $postfix\
    \ = substr($string, $i - 1, 1) . $postfix;\n        if (is_palindrome($string\
    \ . $postfix)) {\n            return $string . $postfix;\n        }\n    }\n \
    \   return \"\";\n}\n", "  $string_rev = strrev($string);\n  $last_char = substr($string,\
    \ -1);\n  $first_char = substr($string, 0, 1);\n  $mid = substr($string, 1, -1);\n\
    \  if($last_char == $first_char) {\n    $maybe_palindrome = $string_rev . $mid\
    \ . $first_char;\n    if($maybe_palindrome == strrev($maybe_palindrome)) {\n \
    \     return $maybe_palindrome;\n    }\n  }\n  return make_palindrome($mid) .\
    \ $first_char;\n}\n", "    $string_length = strlen($string);\n    $palindrome_suffix\
    \ = '';\n    $palindrome_suffix_length = 0;\n    // Find the longest palindromic\
    \ suffix of supplied string.\n    for ($i = 0; $i < $string_length; $i++) {\n\
    \        $postfix = substr($string, $string_length - $i);\n        $prefix = substr($string,\
    \ 0, $i);\n        if ($postfix == strrev($prefix)) {\n            $palindrome_suffix\
    \ = $postfix;\n            $palindrome_suffix_length = $i;\n        }\n    }\n\
    \    $palindrome_prefix = strrev(substr($string, $palindrome_suffix_length));\n\
    \    return $palindrome_prefix . $string;\n}\n", "  // Check trivial case: the\
    \ empty string is the palindrome of itself.\n  if (strlen($string) == 0) {\n \
    \   return $string;\n  }\n  // Check another trivial case: the single-character\
    \ string is the palindrome of itself.\n  if (strlen($string) == 1) {\n    return\
    \ $string;\n  }\n  // Get the length of the string.\n  $string_length = strlen($string);\n\
    \  // Initialize the start index for suffix search.\n  $suffix_start_index = $string_length\
    \ - 1;\n  // Find the longest postfix of supplied string that is a palindrome.\n\
    \  // Check if the string is a palindrome already.\n  if (is_palindrome($string))\
    \ {\n    // Return the string itself.\n    return $string;\n  }\n  // Check all\
    \ postfixes of string until a palindrome is found.\n  while ($suffix_start_index\
    \ > 0) {\n    // Compute length of the postfix.\n    $suffix_length = $string_length\
    \ - $suffix_start_index;\n    // Construct postfix to check.\n    $suffix = substr($string,\
    \ $suffix_start_index, $suffix_length);\n    // Check if the postfix is a palindrome.\n\
    \    if (is_palindrome($suffix)) {\n      // Get the prefix of the string.\n \
    \     $prefix = substr($string, 0, $suffix_start_index);\n      // Reverse the\
    \ prefix.\n      $prefix_reversed = strrev($prefix);\n      // Concatenate the\
    \ prefix, the palindromic suffix and the reversed prefix.\n      return $prefix\
    \ . $suffix . $prefix_reversed;\n    }\n    // Update the start index for suffix\
    \ search.\n    $suffix_start_index--;\n  }\n  // Return the string itself - if\
    \ no palindromic suffix was found, then no palindrome can be constructed.\n  return\
    \ $string;\n}", "    $string_length = strlen($string);\n    if ($string_length\
    \ == 0) {\n        return '';\n    }\n    $start = 0;\n    $length = 0;\n    for\
    \ ($i = 1; $i < $string_length; $i++) {\n        // Checking for odd length palindromes.\n\
    \        $tmp_start = $i - 1;\n        $tmp_length = 1;\n        while ($tmp_start\
    \ >= 0 && $i + $tmp_start < $string_length &&\n                $string[$tmp_start]\
    \ == $string[$i + $tmp_start]) {\n            $tmp_start--;\n            $tmp_length\
    \ += 2;\n        }\n        if ($tmp_length > $length) {\n            $start =\
    \ $tmp_start + 1;\n            $length = $tmp_length;\n        }\n        // Checking\
    \ for even length palindromes.\n        $tmp_start = $i - 1;\n        $tmp_length\
    \ = 0;\n        while ($tmp_start >= 0 && $i + $tmp_start < $string_length &&\n\
    \                $string[$tmp_start] == $string[$i + $tmp_start + 1]) {\n    \
    \        $tmp_start--;\n            $tmp_length += 2;\n        }\n        if ($tmp_length\
    \ > $length) {\n            $start = $tmp_start + 1;\n            $length = $tmp_length;\n\
    \        }\n    }\n    return substr($string, 0, $string_length - $length) .\n\
    \        strrev(substr($string, 0, $start)) . substr($string, $start);\n}\n",
  "    $length = strlen($string);\n    for ($i = $length; $i > 0; $i--) {\n      \
    \  $prefix = substr($string, 0, $i);\n        $postfix = substr($string, $length\
    \ - $i);\n        if ($prefix == strrev($postfix)) {\n            return $string\
    \ . strrev(substr($string, 0, $length - $i));\n        }\n    }\n    return $string;\n\
    }\n", "    $palindrome_idx = lps($string);\n    $palindrome_begin = substr($string,\
    \ 0, $palindrome_idx);\n    $palindrome_end = substr($string, $palindrome_idx);\n\
    \    return $string . strrev($palindrome_begin);\n}\n", "  if (strlen($string)\
    \ == 0) {\n    return $string;\n  }\n  $longest_postfix = find_longest_postfix($string);\n\
    \  $prefix = substr($string, 0, strlen($string) - strlen($longest_postfix));\n\
    \  return $string . strrev($prefix);\n}\n", "    $palindrome_suffix = find_palindrome_suffix($string);\n\
    \    $string_prefix = substr($string, 0, strlen($string) - strlen($palindrome_suffix));\n\
    \    return $string . strrev($string_prefix);\n}\n", "  $suffix = longest_palindromic_suffix($string);\n\
    \  $reverse_prefix = strrev(substr($string, 0, strlen($string) - strlen($suffix)));\n\
    \  return $string . $reverse_prefix;\n}\n", "    $len = strlen($string);\n   \
    \ for ($i = $len; $i > 0; $i--) {\n        if (substr($string, $len - $i) == strrev(substr($string,\
    \ 0, $i))) {\n            break;\n        }\n    }\n    return $string . strrev(substr($string,\
    \ 0, $len - $i));\n}", "    // Check if the string is empty\n    if (strlen($string)\
    \ == 0) {\n        return '';\n    }\n    // Find the suffix that is a palindrome\n\
    \    $length = strlen($string);\n    $suffix = '';\n    for ($l = $length; $l\
    \ > 0; $l--) {\n        if (is_palindrome(substr($string, $length - $l))) {\n\
    \            $suffix = substr($string, $length - $l);\n            break;\n  \
    \      }\n    }\n    $prefix = strrev(substr($string, 0, $length - strlen($suffix)));\n\
    \    return $string . $prefix;\n}\n", "    $length = strlen($string);\n    $longest_postfix\
    \ = '';\n    $longest_length = 0;\n    for ($i = 0; $i < $length; $i++) {\n  \
    \      $substring = substr($string, $i);\n        $substring_length = strlen($substring);\n\
    \        if ($substring_length <= $longest_length) {\n            continue;\n\
    \        }\n        if (is_palindrome($substring)) {\n            $longest_postfix\
    \ = $substring;\n            $longest_length = $substring_length;\n        }\n\
    \    }\n    $prefix = substr($string, 0, $length - $longest_length);\n    $reverse_prefix\
    \ = strrev($prefix);\n    return $string . $reverse_prefix;\n}\n", "    if (empty($string))\
    \ {\n        return '';\n    }\n    $suffix = longest_palindrome_suffix($string);\n\
    \    $prefix = substr($string, 0, strlen($string) - strlen($suffix));\n    return\
    \ $string . strrev($prefix);\n}", "  $len = strlen($string);\n  if ($len == 0)\
    \ return '';\n  if ($len == 1) return $string;\n  $palindrome_postfix = '';\n\
    \  $longest_postfix_len = 0;\n  for ($i = 1; $i <= $len; $i++) {\n    if (is_palindrome(substr($string,\
    \ 0, $i))) {\n      $palindrome_postfix = substr($string, 0, $i);\n      $longest_postfix_len\
    \ = $i;\n    }\n  }\n  $prefix = substr($string, $longest_postfix_len);\n  $reversed_prefix\
    \ = strrev($prefix);\n  return $string . $reversed_prefix;\n}\n", "    $n = strlen($string);\n\
    \    if ($n == 0) {\n        return $string;\n    }\n    $idx = $n;\n    while\
    \ ($idx > 0) {\n        $idx--;\n        $test_str = substr($string, $idx);\n\
    \        if (is_palindrome($test_str)) {\n            return $string . strrev(substr($string,\
    \ 0, $idx));\n        }\n    }\n    return $string;\n}\n", "    if (empty($string))\
    \ {\n        return '';\n    }\n    if (is_palindrome($string)) {\n        return\
    \ $string;\n    }\n    $longest_palindrome_suffix = longest_palindrome_suffix($string);\n\
    \    $reverse_of_prefix = strrev(substr($string, 0, strlen($string) - strlen($longest_palindrome_suffix)));\n\
    \    return $string . $reverse_of_prefix;\n}\n", "    $string_length = strlen($string);\n\
    \    $longest_palindrome_suffix_index = 0;\n    $longest_palindrome_suffix_length\
    \ = 0;\n    for ($i = $string_length - 1; $i >= 0; $i--) {\n        $string_prefix\
    \ = substr($string, 0, $i);\n        $string_suffix = substr($string, $i);\n \
    \       if (is_palindrome($string_suffix)) {\n            $longest_palindrome_suffix_index\
    \ = $i;\n            $longest_palindrome_suffix_length = strlen($string_suffix);\n\
    \            break;\n        }\n    }\n    $string_prefix = substr($string, 0,\
    \ $longest_palindrome_suffix_index);\n    $string_prefix_reversed = strrev($string_prefix);\n\
    \    return $string . $string_prefix_reversed;\n}", "    $rstring = strrev($string);\n\
    \    $max_length = 0;\n    $max_start = -1;\n    $last_position = strlen($string)\
    \ - 1;\n    for ($position = 0; $position < $last_position; $position++) {\n \
    \       $length = 0;\n        while (\n            $position + $length <= $last_position\
    \ &&\n            $string[$position + $length] == $rstring[$last_position - $position\
    \ - $length]\n        ) {\n            $length++;\n        }\n        if ($length\
    \ > $max_length) {\n            $max_length = $length;\n            $max_start\
    \ = $position;\n        }\n    }\n    return $string . substr($rstring, 0, $last_position\
    \ - $max_start - $max_length + 1);\n}\n", "  if (strlen($string) == 0) return\
    \ '';\n  $strlen = strlen($string);\n  $longest_suffix = '';\n  for ($i = $strlen\
    \ - 1; $i >= 0; $i--) {\n    $suffix = substr($string, $i);\n    if (is_palindrome($suffix))\
    \ {\n      $longest_suffix = $suffix;\n      break;\n    }\n  }\n  $prefix = substr($string,\
    \ 0, $strlen - strlen($longest_suffix));\n  return $string . strrev($prefix);\n\
    }\n", "    $string_len = strlen($string);\n    $reversed_string = strrev($string);\n\
    \    $result = '';\n    for ($i = $string_len; $i > 0; $i--) {\n        $suffix\
    \ = substr($string, $string_len - $i);\n        $prefix = substr($reversed_string,\
    \ 0, $i);\n        if ($suffix == $prefix) {\n            $result = $string .\
    \ substr($reversed_string, $i);\n            break;\n        }\n    }\n    return\
    \ $result;\n}\n", "    if (is_palindrome($string)) {\n        return $string;\n\
    \    }\n    $suffix = find_longest_palindromic_suffix($string);\n    $prefix =\
    \ substr($string, 0, strlen($string) - strlen($suffix));\n    return $string .\
    \ strrev($prefix);\n}\n", "    $string = (string) $string;\n    if (!strlen($string))\
    \ {\n        return '';\n    }\n    $string_length = strlen($string);\n    $longest_palindrome_suffix_index\
    \ = 0;\n    $longest_palindrome_suffix_length = 0;\n    for ($i = $string_length\
    \ - 1; $i >= 0; $i--) {\n        if (is_palindrome($string, $i)) {\n         \
    \   $longest_palindrome_suffix_index = $i;\n            $longest_palindrome_suffix_length\
    \ = $string_length - $i;\n            break;\n        }\n    }\n    $longest_palindrome_prefix_index\
    \ = $longest_palindrome_suffix_index - $longest_palindrome_suffix_length;\n  \
    \  $longest_palindrome_prefix = substr($string, 0, $longest_palindrome_prefix_index);\n\
    \    $longest_palindrome_prefix_reversed = strrev($longest_palindrome_prefix);\n\
    \    return $string . $longest_palindrome_prefix_reversed;\n}\n", "    $strlen\
    \ = strlen($string);\n    if ($strlen == 0) {\n        return '';\n    }\n   \
    \ $i = $strlen - 1;\n    for (; $i >= 0; $i--) {\n        $sub = substr($string,\
    \ $i);\n        if (is_palindrome($sub)) {\n            $sub2 = substr($string,\
    \ 0, $i);\n            $sub2 = strrev($sub2);\n            return $string . $sub2;\n\
    \        }\n    }\n}", "    if ($string == '') {\n        return '';\n    }\n\
    \    $palindrome_suffix = find_palindrome_suffix($string);\n    $string_prefix\
    \ = substr($string, 0, strlen($string) - strlen($palindrome_suffix));\n    return\
    \ $string . strrev($string_prefix);\n}\n", "    if (empty($string)) {\n      \
    \  return '';\n    }\n    // Longest palindromic suffix\n    $suffix = longest_palindrome_suffix($string);\n\
    \    $prefix = substr($string, 0, strlen($string) - strlen($suffix));\n    $reverse_prefix\
    \ = strrev($prefix);\n    return $string . $reverse_prefix;\n}\n", "    $length\
    \ = strlen($string);\n    $forward = $backward = '';\n    for ($i = $length -\
    \ 1; $i >= 0; $i--) {\n        $forward .= $string[$i];\n        $backward = $string[$i]\
    \ . $backward;\n        if ($forward == $backward) {\n            $string .= $forward;\n\
    \            break;\n        }\n    }\n    return $string;\n}\n", "    if (!$string)\
    \ return '';\n    $string_length = strlen($string);\n    $suffix_begin = floor($string_length\
    \ / 2);\n    for ($suffix_length = 1; $suffix_length <= $suffix_begin; $suffix_length++)\
    \ {\n        $suffix = substr($string, $suffix_begin, $suffix_length);\n     \
    \   $prefix = substr($string, 0, $suffix_begin);\n        if ($suffix == strrev($prefix))\
    \ {\n            return $string . strrev(substr($string, $suffix_begin + $suffix_length));\n\
    \        }\n    }\n    // If we are here, the whole string is a palindrome.\n\
    \    return $string;\n}\n\nassert(make_palindrome('') == '');\nassert(make_palindrome('cat')\
    \ == 'catac');\nassert(make_palindrome('cata') == 'catac');\nassert(make_palindrome('catac')\
    \ == 'catac');\nassert(make_palindrome('abba') == 'abba');\nassert(make_palindrome('abb')\
    \ == 'abba');\nassert(make_palindrome('aaa') == 'aaa');\nassert(make_palindrome('aa')\
    \ == 'aa');\nassert(make_palindrome('a') == 'a');\n\n/**\n * Custom PHPUnit test\
    \ runner.\n *\n * @param string $class_name\n * @param string $method_name\n *\
    \ @param string $message\n */", "    $string = (string) $string;\n    $len = strlen($string);\n\
    \    if ($len < 2) {\n        return $string;\n    }\n    $i = $len - 1;\n   \
    \ while ($i > 0) {\n        if (substr($string, $i) == strrev(substr($string,\
    \ 0, $i))) {\n            break;\n        }\n        $i--;\n    }\n    return\
    \ $string . strrev(substr($string, 0, $i));\n}\n\n$test_cases = [\n    [\n   \
    \     'input' => '',\n        'expected' => '',\n    ],\n    [\n        'input'\
    \ => 'cat',\n        'expected' => 'catac',\n    ],\n    [\n        'input' =>\
    \ 'cata',\n        'expected' => 'catac',\n    ],\n    [\n        'input' => 'cattac',\n\
    \        'expected' => 'cattac',\n    ],\n    [\n        'input' => 'ab',\n  \
    \      'expected' => 'aba',\n    ],\n    [\n        'input' => 'racecar',\n  \
    \      'expected' => 'racecar',\n    ],\n    [\n        'input' => 'raceecar',\n\
    \        'expected' => 'raceecar',\n    ],\n    [\n        'input' => 'abc',\n\
    \        'expected' => 'abcba',\n    ],\n    [\n        'input' => 'zzz',\n  \
    \      'expected' => 'zzzz',\n    ],\n    [\n        'input' => 'zz',\n      \
    \  'expected' => 'zz',\n    ],\n    [\n        'input' => 'aaa',\n        'expected'\
    \ => 'aaa',\n    ],\n    [\n        'input' => 'aa',\n        'expected' => 'aa',\n\
    \    ],\n    [\n        'input' => 'a',\n        'expected' => 'a',\n    ],\n\
    \    [\n        'input' => 'abcd',\n        'expected' => 'abcdcba',\n    ],\n\
    \    [\n        'input' => 'abcdz',\n        'expected' => 'abcdzzdcba',\n", " \
    \ $palindrome_prefix = get_longest_palindrome_suffix($string);\n  $palindrome_suffix\
    \ = strrev(substr($string, 0, strlen($string) - strlen($palindrome_prefix)));\n\
    \  return $string . $palindrome_suffix;\n}\n", "    $palindrome_suffix = longest_palindrome_suffix($string);\n\
    \    $prefix = substr($string, 0, strlen($string) - strlen($palindrome_suffix));\n\
    \    return $string . strrev($prefix);\n}\n", "  $len = strlen($string);\n  $i\
    \ = 0;\n  while ($i < $len) {\n    if ($string[$i] == $string[$len - 1]) {\n \
    \     $i++;\n      $len--;\n    } else {\n      $len--;\n    }\n  }\n  $prefix\
    \ = substr($string, 0, $i);\n  $suffix = strrev($prefix);\n  return $string .\
    \ $suffix;\n}\n\necho make_palindrome('cat'), \"\\n\";\necho make_palindrome('cata'),\
    \ \"\\n\";", "    $palindrome_suffix = longest_palindrome_suffix($string);\n \
    \   $palindrome_prefix = substr($string, 0, strlen($string) - strlen($palindrome_suffix));\n\
    \    return $string . strrev($palindrome_prefix);\n}\n", "    if (!strlen($string))\
    \ return '';\n    $prefix = substr($string, 0, strlen($string) - 1);\n    if (substr($string,\
    \ -1) == substr($prefix, 0, 1)) {\n        return $string . substr(strrev($prefix),\
    \ 1);\n    } else {\n        return $string . strrev($prefix);\n    }\n}\n", " \
    \ $palindrome_suffix = longest_palindrome_suffix($string);\n  return $string .\
    \ strrev(substr($string, 0, strlen($string) - strlen($palindrome_suffix)));\n\
    }\n", "    $length = strlen($string);\n    $string_rev = strrev($string);\n  \
    \  $palindrome_postfix = '';\n    for ($i = $length; $i > 0; $i--) {\n       \
    \ if (substr($string, 0, $i) == substr($string_rev, $length - $i)) {\n       \
    \     $palindrome_postfix = substr($string, $i);\n            break;\n       \
    \ }\n    }\n    return $string . strrev($palindrome_postfix);\n}\n\necho make_palindrome('cat')\
    \ . \"\\n\";\necho make_palindrome('cata') . \"\\n\";\necho make_palindrome('')\
    \ . \"\\n\";", "    $longest = '';\n    $length = strlen($string);\n    for ($i\
    \ = $length; $i > 0; $i--) {\n        $prefix = substr($string, 0, $i);\n    \
    \    $suffix = substr($string, $length - $i);\n        if ($prefix == $suffix)\
    \ {\n            $longest = $prefix;\n            break;\n        }\n    }\n \
    \   return $string . strrev(substr($string, strlen($longest)));\n}\necho make_palindrome('cat')\
    \ . \"\\n\";\necho make_palindrome('cata') . \"\\n\";\necho make_palindrome('tomato')\
    \ . \"\\n\";\necho make_palindrome('b') . \"\\n\";\necho make_palindrome('c')\
    \ . \"\\n\";\necho make_palindrome('hannah') . \"\\n\";\necho make_palindrome('gag')\
    \ . \"\\n\";\necho make_palindrome('a') . \"\\n\";\necho make_palindrome('word')\
    \ . \"\\n\";\necho make_palindrome('egge') . \"\\n\";\necho make_palindrome('tot')\
    \ . \"\\n\";\necho make_palindrome('rotor') . \"\\n\";\necho make_palindrome('racecar')\
    \ . \"\\n\";\necho make_palindrome('motor') . \"\\n\";\necho make_palindrome('deed')\
    \ . \"\\n\";\necho make_palindrome('rat') . \"\\n\";\necho make_palindrome('noon')\
    \ . \"\\n\";\necho make_palindrome('noonnoon') . \"\\n\";\necho make_palindrome('noonnoonnoon')\
    \ . \"\\n\";\necho make_palindrome('noonnoonnoonnoon') . \"\\n\";\necho make_palindrome('noonnoonnoonnoonnoon')\
    \ . \"\\n\";\necho make_palindrome('noonnoonnoonnoonnoonnoon') . \"\\n\";\necho\
    \ make_palindrome('noonnoonnoonnoonnoonnoonnoon') . \"\\n\";\necho make_palindrome('noonnoonnoonnoonnoonnoonnoonnoon')\
    \ . \"\\n\";\necho make_palindrome('noonnoonnoonnoonnoonnoonnoonnoonnoon')", " \
    \   if (strlen($string) < 2) {\n        return $string;\n    }\n    $s = strrev($string);\n\
    \    $sl = strlen($s);\n    $z = array_fill(0, $sl, 0);\n    for ($i = 1, $l =\
    \ 0, $r = 0; $i < $sl; ++$i) {\n        if ($i <= $r) {\n            $z[$i] =\
    \ min($r - $i + 1, $z[$i - $l]);\n        }\n        while ($i + $z[$i] < $sl\
    \ && $s[$z[$i]] == $s[$i + $z[$i]]) {\n            ++$z[$i];\n        }\n    \
    \    if ($i + $z[$i] - 1 > $r) {\n            $l = $i;\n            $r = $i +\
    \ $z[$i] - 1;\n        }\n    }\n    $max = max($z);\n    $prefix = substr($string,\
    \ 0, strlen($string) - $max);\n    return $string . strrev($prefix);\n}\n", " \
    \   $size = strlen($string);\n    $left = 0;\n    $right = $size - 1;\n    while\
    \ ($left < $right) {\n        if ($string[$left] == $string[$right]) {\n     \
    \       $left++;\n            $right--;\n        } else {\n            $right--;\n\
    \        }\n    }\n    if ($left == $right) {\n        return $string . substr(strrev($string),\
    \ 1);\n    } else {\n        return $string . strrev(substr($string, 0, $right));\n\
    \    }\n}", "    $palindrome_length = palindrome_length($string);\n    $suffix\
    \ = substr($string, -$palindrome_length);\n    $prefix = substr($string, 0, strlen($string)\
    \ - $palindrome_length);\n    return $string . strrev($prefix);\n}\n", "    $postfix\
    \ = find_longest_palindromic_postfix($string);\n    $prefix = get_string_prefix($string,\
    \ strlen($string) - strlen($postfix));\n    return $string . reverse_string($prefix);\n\
    }\n", "    $len = strlen($string);\n    $i = 0;\n    $r = '';\n    while ($i <\
    \ $len && !is_palindrome(substr($string, $i))) {\n        $i++;\n    }\n    if\
    \ ($i == $len) {\n        $i--;\n    }\n    $r = $string;\n    $r .= strrev(substr($string,\
    \ 0, $i));\n    return $r;\n}\n", "    $palindrome_suffix = find_palindrome_suffix($string);\n\
    \    $prefix = substr($string, 0, strlen($string) - strlen($palindrome_suffix));\n\
    \    return $string . strrev($prefix);\n}\n", "    // ...\n}\n", "  $palindrome_suffix\
    \ = '';\n  $prefix_length = 0;\n  for ($i = strlen($string) - 1; $i >= 0; $i--)\
    \ {\n    $palindrome_suffix .= $string[$i];\n    if (substr($string, 0, $i) ==\
    \ strrev(substr($palindrome_suffix, 0, strlen($palindrome_suffix) - 1))) {\n \
    \     $prefix_length = $i;\n      break;\n    }\n  }\n  return $string . strrev(substr($string,\
    \ 0, $prefix_length));\n}\n", "  if (strlen($string) <= 1) return $string;\n \
    \ if (substr($string, 0, 1) == substr($string, -1)) {\n    return $string . make_palindrome(substr($string,\
    \ 1, -1));\n  } else {\n    return substr($string, 1) . substr($string, 0, 1)\
    \ . make_palindrome(substr($string, 1));\n  }\n}\n", "    $n = strlen($string);\n\
    \    $suffix = '';\n    for ($i = $n; $i >= 0; $i--) {\n        if (strpos($string,\
    \ $suffix) === 0) {\n            return $string . strrev(substr($string, 0, $i));\n\
    \        }\n        $suffix = substr($string, $i, 1) . $suffix;\n    }\n    return\
    \ $string;\n}\n\n$testcases = [\n    ['', ''],\n    ['a', 'a'],\n    ['ab', 'bab'],\n\
    \    ['cat', 'catac'],\n    ['cata', 'catac'],\n    ['abcd', 'dcbabcd'],\n   \
    \ ['abcde', 'edcbabcde'],\n    ['abcdef', 'fedcbabcdef'],\n    ['abcdefg', 'gfedcbabcdefg'],\n\
    \    ['abcdefgh', 'hgfedcbabcdefgh'],\n    ['abcdefghi', 'ihgfedcbabcdefghi'],\n\
    \    ['abcdefghij', 'jihgfedcbabcdefghij'],\n    ['abcdefghijk', 'kjihgfedcbabcdefghijk'],\n\
    \    ['abcdefghijkl', 'lkjihgfedcbabcdefghijkl'],\n    ['abcdefghijklm', 'mlkjihgfedcbabcdefghijklm'],\n\
    \    ['abcdefghijklmn', 'nmlkjihgfedcbabcdefghijklmn'],\n    ['abcdefghijklmno',\
    \ 'onmlkjihgfedcbabcdefghijklmno'],\n    ['abcdefghijklmnop', 'ponmlkjihgfedcbabcdefghijklmnop'],\n\
    \    ['abcdefghijklmnopq', 'qponmlkjihgfedcbabcdefghijklmnopq'],\n    ['abcdefghijklmnopqr',\
    \ 'rqponmlkjihgfedcbabcdefghijklmnopqr'],\n    ['abcdefghijklmnopqrs', 'srqponmlkjihgfed",
  "  $string_rev = strrev($string);\n  $match = '';\n  $length = strlen($string);\n\
    \  for ($i = 0; $i < $length; $i++) {\n    if (substr($string, $i) == substr($string_rev,\
    \ 0, $length - $i)) {\n      $match = substr($string, $i);\n      break;\n   \
    \ }\n  }\n  return $string . strrev(substr($string, 0, $length - strlen($match)));\n\
    }\n\necho make_palindrome(''), \"\\n\";\necho make_palindrome('cat'), \"\\n\"\
    ;\necho make_palindrome('cata'), \"\\n\";", "    if ($string == '') {\n      \
    \  return '';\n    }\n\n    $longest_palindrome_length = longest_palindrome_length($string);\n\
    \    if ($longest_palindrome_length == strlen($string)) {\n        return $string;\n\
    \    }\n\n    $prefix = substr($string, 0, strlen($string) - $longest_palindrome_length);\n\
    \    $suffix = strrev($prefix);\n    return $string . $suffix;\n}\n", "    if\
    \ (empty($string)) {\n        return '';\n    }\n    $stringLength = strlen($string);\n\
    \    for ($i = $stringLength; $i > 0; $i--) {\n        if (is_palindrome($string,\
    \ $i)) {\n            $prefix = substr($string, 0, $stringLength - $i);\n    \
    \        $suffix = strrev($prefix);\n            return $string . $suffix;\n \
    \       }\n    }\n}\n", "    $length = strlen($string);\n    $palindrome_suffix\
    \ = '';\n    for ($i = $length - 1; $i >= 0; $i--) {\n        if (is_palindrome($string\
    \ . $palindrome_suffix)) {\n            return $string . $palindrome_suffix;\n\
    \        }\n        $palindrome_suffix = $string[$i] . $palindrome_suffix;\n \
    \   }\n    return null;\n}\n", "    $length = strlen($string);\n    if ($length\
    \ == 0) {\n        return '';\n    }\n    if ($length == 1) {\n        return\
    \ $string . $string;\n    }\n    $i = $length - 1;\n    $longest_suffix = '';\n\
    \    while ($i >= 0) {\n        $suffix = substr($string, $i);\n        if (is_palindrome($suffix))\
    \ {\n            $longest_suffix = $suffix;\n            break;\n        }\n \
    \       $i--;\n    }\n    $longest_suffix_length = strlen($longest_suffix);\n\
    \    $prefix = substr($string, 0, $length - $longest_suffix_length);\n    $prefix_reversed\
    \ = strrev($prefix);\n    return $string . $prefix_reversed;\n}\n", "    $longest_palindrome\
    \ = '';\n    $index = 0;\n    while ($index < strlen($string)) {\n        // Find\
    \ the longest palindrome that starts at specified index.\n        $longest_palindrome\
    \ = get_longest_palindrome($string, $index);\n        if ($longest_palindrome)\
    \ {\n            // If found, append reverse of substring before the palindrome\
    \ and return the whole string.\n            return $string . strrev(substr($string,\
    \ 0, $index));\n        }\n        $index += 1;\n    }\n    return '';\n}\n",
  "  // Start from the end of the string and find the first character that is not\
    \ a palindrome.\n  $first_non_palindrome_index = -1;\n  for ($i = strlen($string)\
    \ - 1; $i >= 0; $i--) {\n    if ($string[$i] !== $string[0]) {\n      $first_non_palindrome_index\
    \ = $i;\n      break;\n    }\n  }\n  if ($first_non_palindrome_index === -1) {\n\
    \    // If all characters are the same, it's already a palindrome.\n    return\
    \ $string;\n  }\n  // This is the prefix to be reversed and appended.\n  $prefix\
    \ = substr($string, 0, $first_non_palindrome_index + 1);\n  // This is the postfix\
    \ that we know is a palindrome.\n  $postfix = substr($string, $first_non_palindrome_index\
    \ + 1);\n  // Append the reverse of the prefix.\n  return $string . strrev($prefix);\n\
    }\n", "    // Longest palindromic suffix of the string is a suffix that is a palindrome\
    \ and has the longest length.\n    // >>> longest_palindromic_suffix('')\n   \
    \ // ''\n    // >>> longest_palindromic_suffix('cat')\n    // 't'\n    // >>>\
    \ longest_palindromic_suffix('cata')\n    // 'ata'\n    // >>> longest_palindromic_suffix('catac')\n\
    \    // 'catac'\n    // >>> longest_palindromic_suffix('catacata')\n    // 'ata'\n\
    \    function longest_palindromic_suffix($string) {\n        if (empty($string))\
    \ {\n            return '';\n        }\n        $p = array();\n        // $p[i]\
    \ represents longest palindromic suffix of $string[0 .. i] where $string[0 ..\
    \ i] is one less than\n        // palindromic. Note that each $p[i] is at most\
    \ $i.\n        $string_length = strlen($string);\n        $string = str_split($string);\n\
    \        for ($i = 0; $i < $string_length; $i++) {\n            $p[$i] = 0;\n\
    \        }\n        $c = 0;\n        $r = 0;\n        // The loop calculates $p[i]\
    \ for $i = 1 to $string_length - 1.\n        for ($i = 1; $i < $string_length;\
    \ $i++) {\n            // The loop finds a center of a longest palindromic suffix\
    \ of $string[0 .. i] where $string[0 .. i] is\n            // one less than palindromic.\
    \ Note that each $p[i] is at most $i.\n            // mirror_position is the center\
    \ of a longest palindromic suffix of $string[0 .. i - 1] where\n            //\
    \ $string[0 .. i - 1] is one less than palindromic.\n            $mirror_position\
    \ = 2 * $c - $i;\n            // Find the rightmost position such that there exists\
    \ a center of a longest palindromic suffix of\n            // $string[0 .. i]\
    \ where $string", "  $palindrome_suffix = longest_palindrome_suffix($string);\n\
    \  $prefix = substr($string, 0, strlen($string) - strlen($palindrome_suffix));\n\
    \  return $string . strrev($prefix);\n}\n", "    // Loop for every character in\
    \ the string.\n    for ($i = 0; $i < strlen($string); $i++) {\n        // Find\
    \ the longest suffix that is a palindrome and ends at this character.\n      \
    \  $suffix = find_palindrome($string, $i);\n        // If the remaining string\
    \ after the palindromic suffix is a palindrome too, we're done.\n        if (is_palindrome(substr($string,\
    \ 0, $i - strlen($suffix) + 1))) {\n            return $string . strrev(substr($string,\
    \ 0, $i - strlen($suffix) + 1));\n        }\n    }\n    // If there is no suffix\
    \ that is a palindrome, return the reversed string.\n    return $string . strrev($string);\n\
    }\n", "  $string_length = strlen($string);\n  if ($string_length <= 1) {\n   \
    \ return $string;\n  }\n  for ($i = 0; $i < $string_length; $i++) {\n    $prefix\
    \ = substr($string, 0, $string_length - $i);\n    $suffix = substr($string, $i);\n\
    \    if ($prefix == strrev($suffix)) {\n      return $string . strrev(substr($string,\
    \ 0, $i));\n    }\n  }\n}", "    $len = strlen($string);\n    $longest_suffix\
    \ = '';\n    for ($i = $len; $i > 0; $i--) {\n        if (is_palindrome(substr($string,\
    \ 0, $i))) {\n            $longest_suffix = substr($string, 0, $i);\n        \
    \    break;\n        }\n    }\n    return $string . strrev(substr($string, strlen($longest_suffix)));\n\
    }\n", "    $result = $string;\n    $string_reverse = strrev($string);\n    $len\
    \ = strlen($string);\n    for ($i = 0; $i < $len; $i++) {\n        $suffix = substr($string,\
    \ $i);\n        $prefix = substr($string_reverse, 0, $len - $i);\n        if ($suffix\
    \ == $prefix) {\n            $result .= substr($string_reverse, $len - $i);\n\
    \            break;\n        }\n    }\n    return $result;\n}\n", "  // Find the\
    \ longest palindromic postfix.\n  $i = 0;\n  while ($i < strlen($string) && is_palindrome($string,\
    \ $i)) {\n    $i++;\n  }\n  // The prefix that comes before palindromic postfix.\n\
    \  $prefix = substr($string, 0, strlen($string) - $i);\n  // Palindromic suffix.\n\
    \  $suffix = substr($string, strlen($string) - $i);\n  // Palindromic prefix is\
    \ a reverse of a prefix that comes before palindromic suffix.\n  $palindromic_prefix\
    \ = strrev($prefix);\n  return $palindromic_prefix . $suffix;\n}\n", "    if ($string\
    \ == '') {\n        return '';\n    }\n    $i = strlen($string);\n    $j = 0;\n\
    \    while (!is_palindrome(substr($string, $j, $i - $j))) {\n        $j++;\n \
    \   }\n    return $string . strrev(substr($string, 0, $j));\n}\n", "    if (strlen($string)\
    \ <= 1) {\n        return $string;\n    }\n    $result = '';\n    $found_palindrome\
    \ = false;\n    $max_palindrome_length = 0;\n    $max_palindrome_end = 0;\n  \
    \  for ($i = 0; $i < strlen($string); $i++) {\n        $j = 0;\n        while\
    \ ($i - $j >= 0 && $i + $j < strlen($string) && $string[$i - $j] == $string[$i\
    \ + $j]) {\n            $j++;\n        }\n        if ($i - $j >= 0 && $i + $j\
    \ < strlen($string)) {\n            $j--;\n        }\n        if ($max_palindrome_length\
    \ < $j) {\n            $max_palindrome_length = $j;\n            $max_palindrome_end\
    \ = $i;\n        }\n    }\n    $pre_palindrome_part = substr($string, 0, $max_palindrome_end\
    \ - $max_palindrome_length + 1);\n    $pre_palindrome_part_reversed = strrev($pre_palindrome_part);\n\
    \    $palindrome_part = substr($string, $max_palindrome_end - $max_palindrome_length\
    \ + 1, $max_palindrome_length * 2);\n    $post_palindrome_part = substr($string,\
    \ $max_palindrome_end + $max_palindrome_length + 1);\n    $result = $pre_palindrome_part_reversed\
    \ . $palindrome_part . $post_palindrome_part;\n    return $result;\n}", "  $palindrome_length\
    \ = palindrome_length($string);\n  $reverse_substring = substr(strrev($string),\
    \ 0, $palindrome_length);\n  return $string . $reverse_substring;\n}\n", "   \
    \ $len = strlen($string);\n    $longest_suffix = '';\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if (is_palindrome($string, $i)) {\n            $longest_suffix\
    \ = substr($string, $i);\n        }\n    }\n    return $string . strrev(substr($string,\
    \ 0, $len - strlen($longest_suffix)));\n}\n", "  $palindrome_suffix = palindrome_suffix($string);\n\
    \  $prefix = substr($string, 0, strlen($string) - strlen($palindrome_suffix));\n\
    \  return $string . strrev($prefix);\n}\n", "    $postfix = '';\n    $postfix_len\
    \ = 0;\n    while ($postfix_len < strlen($string)) {\n        $postfix_len++;\n\
    \        $postfix = substr($string, -$postfix_len);\n        if (strrev($postfix)\
    \ == $postfix) {\n            break;\n        }\n    }\n    return $string . strrev(substr($string,\
    \ 0, -$postfix_len));\n}\n\n$string = $_GET['str'];\necho make_palindrome($string);",
  "  if (strlen($string) == 0) return '';\n  $length = strlen($string);\n  for ($i\
    \ = $length; $i > 0; $i--) {\n    $part = substr($string, 0, $i);\n    if (is_palindrome($part))\
    \ {\n      $prefix = substr($string, $i);\n      return $prefix . strrev($prefix)\
    \ . $part;\n    }\n  }\n}\n", "    if (strlen($string) == 0) {\n        return\
    \ '';\n    }\n\n    // Find the palindromic suffix.\n    $max_length = 0;\n  \
    \  $suffix = '';\n    for ($i = 0; $i < strlen($string); $i++) {\n        $substring\
    \ = substr($string, $i);\n        if (is_palindrome($substring)) {\n         \
    \   $substring_length = strlen($substring);\n            if ($substring_length\
    \ > $max_length) {\n                $max_length = $substring_length;\n       \
    \         $suffix = $substring;\n            }\n        }\n    }\n\n    // Prepend\
    \ to the string reverse of the part before the palindromic suffix.\n    $prefix\
    \ = strrev(substr($string, 0, strlen($string) - strlen($suffix)));\n    return\
    \ $prefix . $string;\n}\n", "    $length = strlen($string);\n    $reversed = strrev($string);\n\
    \    $last_pos = strpos($string, $reversed);\n    return $string . substr($reversed,\
    \ $last_pos + 1);\n}\n\necho make_palindrome('');\necho \"\\n\";\necho make_palindrome('cat');\n\
    echo \"\\n\";\necho make_palindrome('cata');\necho \"\\n\";", "    $strlen = strlen($string);\n\
    \    for ($i = floor($strlen / 2); $i >= 0; $i--) {\n        if ($string[$i] ==\
    \ $string[$strlen - $i - 1]) {\n            $palindrome = $string . strrev(substr($string,\
    \ 0, $i));\n            break;\n        }\n    }\n    return $palindrome;\n}\n",
  "  if (!$string) {\n    return '';\n  }\n  $suffix = longest_palindrome_suffix($string);\n\
    \  $suffix_len = strlen($suffix);\n  $prefix = substr($string, 0, -$suffix_len);\n\
    \  return $string . strrev($prefix);\n}\n", "    // Find the longest palindromic\
    \ suffix of the string.\n    $palindrome_suffix = '';\n    for ($i = strlen($string)\
    \ - 1; $i >= 0; $i--) {\n        if (substr($string, 0, $i) == strrev(substr($string,\
    \ $i))) {\n            $palindrome_suffix = substr($string, $i);\n           \
    \ break;\n        }\n    }\n    // Append reverse of prefix + the suffix that\
    \ was found.\n    $palindrome_prefix = strrev(substr($string, 0, $i));\n    return\
    \ $palindrome_prefix . $string . $palindrome_suffix;\n}\n", "    $prefix = $string;\n\
    \    $postfix = strrev($string);\n    $max_length = 0;\n    $max_prefix = '';\n\
    \    $max_suffix = '';\n    for ($i = 0; $i < strlen($prefix); $i++) {\n     \
    \   $suffix = substr($postfix, 0, $i);\n        $length = strlen($suffix);\n \
    \       if ($length > $max_length && substr($prefix, -$length) == $suffix) {\n\
    \            $max_length = $length;\n            $max_prefix = substr($prefix,\
    \ 0, strlen($prefix) - $length);\n            $max_suffix = $suffix;\n       \
    \ }\n    }\n    return $prefix . strrev($max_prefix);\n}\n", "    $string_length\
    \ = strlen($string);\n    if ($string_length == 0) {\n        return '';\n   \
    \ }\n    for ($i = $string_length; $i > 0; $i--) {\n        $prefix = substr($string,\
    \ 0, $i);\n        $reverse_prefix = strrev($prefix);\n        if ($prefix ==\
    \ $reverse_prefix) {\n            return $string . substr($reverse_prefix, 0,\
    \ strlen($reverse_prefix) - $i);\n        }\n    }\n}\n", "    // Some trivial\
    \ cases.\n    if (empty($string)) return '';\n    if (substr($string, 0, 1) ==\
    \ substr($string, -1, 1)) return $string;\n\n    // First, find the longest postfix\
    \ of the string that is a palindrome.\n    $end = strlen($string) - 1;\n    $pos\
    \ = -1;\n    while ($end >= 0) {\n        if (substr($string, 0, $end) == strrev(substr($string,\
    \ -$end))) {\n            $pos = $end;\n            break;\n        }\n      \
    \  $end--;\n    }\n\n    // Add the reverse of the string prefix that comes before\
    \ the palindromic suffix.\n    return $string . strrev(substr($string, 0, strlen($string)\
    \ - $pos));\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
