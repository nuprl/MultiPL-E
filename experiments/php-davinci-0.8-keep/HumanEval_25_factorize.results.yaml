name: HumanEval_25_factorize
language: php
results:
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n  if ($n > 1) {\n    for ($x = 2; $x <= $n; $x++) {\n     \
    \ if ($n % $x == 0) {\n        return array_merge(array($x), factorize($n / $x));\n\
    \      }\n    }\n  } else {\n    return array();\n  }\n}\n\nprint_r(factorize(8));\n\
    print_r(factorize(25));\nprint_r(factorize(70));\nprint_r(factorize(100));\nprint_r(factorize(999));\n\
    print_r(factorize(1024));\nprint_r(factorize(3780));\nprint_r(factorize(66432));\n\
    print_r(factorize(452800));\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\nArray\n(\n    [0]\
    \ => 5\n    [1] => 5\n)\nArray\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n\
    )\nArray\n(\n    [0] => 2\n    [1] => 2\n    [2] => 5\n    [3] => 5\n)\nArray\n\
    (\n    [0] => 3\n    [1] => 3\n    [2] => 3\n    [3] => 37\n)\nArray\n(\n    [0]\
    \ => 2\n    [1] => 2\n    [2] => 2\n    [3] => 2\n    [4] => 2\n    [5] => 2\n\
    \    [6] => 2\n    [7] => 2\n    [8] => 2\n    [9] => 2\n)\nArray\n(\n    [0]\
    \ => 2\n    [1] => 2\n    [2] => 3\n    [3] => 3\n    [4] => 3\n    [5] => 5\n\
    \    [6] => 7\n)\nArray\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n    [3]\
    \ => 2\n    [4] => 2\n    [5] => 2\n    [6] => 2\n    [7] => 3\n    [8] => 173\n\
    )\nArray\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n    [3] => 2\n    [4] =>\
    \ 2\n    [5] => 2\n    [6] => 5\n    [7] => 5\n    [8] => 283\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t$factors = [];\n\twhile ($n > 1) {\n\t\tfor ($i = 2; $i <=\
    \ $n; $i++) {\n\t\t\tif ($n % $i == 0) {\n\t\t\t\t$factors[] = $i;\n\t\t\t\t$n\
    \ /= $i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn $factors;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n  $result = [];\n  $i = 2;\n  while ($n != 1) {\n    while\
    \ ($n % $i == 0) {\n      $result[] = $i;\n      $n /= $i;\n    }\n    $i++;\n\
    \  }\n  return $result;\n}\necho '<pre>';\nprint_r(factorize(8));\nprint_r(factorize(25));\n\
    print_r(factorize(70));\necho '</pre>';\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\nArray\n(\n\
    \    [0] => 5\n    [1] => 5\n)\nArray\n(\n    [0] => 2\n    [1] => 5\n    [2]\
    \ => 7\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    // Your solution here\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcyn4ky30.php:19\n\
    Stack trace:\n#0 /tmp/tmpcyn4ky30.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpcyn4ky30.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $res = [];\n    $prime = 2;\n    $max = sqrt($n);\n   \
    \ while ($n > 1 && $prime <= $max) {\n        while ($n % $prime == 0) {\n   \
    \         $res[] = $prime;\n            $n /= $prime;\n        }\n        $prime++;\n\
    \    }\n    if ($n > 1) {\n        $res[] = $n;\n    }\n    return $res;\n}\n\n\
    $factors = factorize(8);\necho \"[\";\nforeach ($factors as $v) {\n    echo \"\
    $v, \";\n}\necho \"]\";\n\necho \"<br>\";\n$factors = factorize(25);\necho \"\
    [\";\nforeach ($factors as $v) {\n    echo \"$v, \";\n}\necho \"]\";\n\necho \"\
    <br>\";\n$factors = factorize(70);\necho \"[\";\nforeach ($factors as $v) {\n\
    \    echo \"$v, \";\n}\necho \"]\";\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '[2, 2, 2, ]<br>[5, 5, ]<br>[2, 5, 7, ]'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t$ans = [];\n\tfor ($i = 2; $i <= $n; $i++) {\n\t\tif ($n\
    \ % $i == 0) {\n\t\t\tarray_push($ans, $i);\n\t\t\t$n /= $i;\n\t\t\t$i--;\n\t\t\
    }\n\t}\n\treturn $ans;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $divider = 2;\n    $result = [];\n    while ($n >= $divider)\
    \ {\n        if ($n % $divider === 0) {\n            $result[] = $divider;\n \
    \           $n /= $divider;\n        } else {\n            $divider++;\n     \
    \   }\n    }\n    return $result;\n}\nprint_r(factorize(8));\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $result = [];\n    $divider = 2;\n    while($n >= 2) {\n\
    \        while($n % $divider == 0) {\n            $result[] = $divider;\n    \
    \        $n /= $divider;\n        }\n        $divider++;\n    }\n    return $result;\n\
    }\nprint_r(factorize(70));\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factor = 2;\n    $factors = [];\n    if ($n < $factor)\
    \ {\n        return [];\n    }\n    while ($n > 1) {\n        while ($n % $factor\
    \ == 0) {\n            $factors[] = $factor;\n            $n /= $factor;\n   \
    \     }\n        $factor++;\n    }\n    return $factors;\n}\n$n = readline(\"\
    Enter the number n: \");\necho implode(\" \", factorize($n));\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function readline() in\
    \ /tmp/tmpxz39abc3.php:26\nStack trace:\n#0 {main}\n  thrown in /tmp/tmpxz39abc3.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $result = [];\n    for ($i = 2; $i <= $n; $i++) {\n   \
    \     while ($n % $i == 0) {\n            $result[] = $i;\n            $n /= $i;\n\
    \        }\n    }\n    return $result;\n}\n\necho implode(', ', factorize(8))\
    \ . \"\\n\";\necho implode(', ', factorize(25)) . \"\\n\";\necho implode(', ',\
    \ factorize(70)) . \"\\n\";\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "2, 2, 2\n5, 5\n2, 5, 7\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\tfor ($i = 2; $i <= $n; $i++) {\n\t\twhile (($n % $i) == 0)\
    \ {\n\t\t\techo $i . \", \";\n\t\t\t$n = $n / $i;\n\t\t}\n\t}\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2, \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpocmyhyfc.php:24\n\
    Stack trace:\n#0 /tmp/tmpocmyhyfc.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpocmyhyfc.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t$arr = [];\n\t$i = 2;\n\twhile ($n >= $i) {\n\t\tif ($n %\
    \ $i == 0) {\n\t\t\t$arr[] = $i;\n\t\t\t$n = $n / $i;\n\t\t} else {\n\t\t\t$i++;\n\
    \t\t}\n\t}\n\treturn $arr;\n}\n\necho \"<pre>\";\nvar_dump(factorize(8));\nvar_dump(factorize(25));\n\
    var_dump(factorize(70));\necho \"</pre>\";\nfunction candidate(...$args) {\n \
    \   return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(2)\n  [2]=>\n  int(2)\n\
    }\narray(2) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n}\narray(3) {\n  [0]=>\n\
    \  int(2)\n  [1]=>\n  int(5)\n  [2]=>\n  int(7)\n}\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $temp = 2;\n    $arr = [];\n    while ($n > 1) {\n    \
    \    if ($n % $temp === 0) {\n            $arr[] = $temp;\n            $n /= $temp;\n\
    \        } else {\n            $temp++;\n        }\n    }\n    return $arr;\n\
    }\n\necho json_encode(factorize(8));\necho \"<br>\";\necho json_encode(factorize(25));\n\
    echo \"<br>\";\necho json_encode(factorize(70));\necho \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '[2,2,2]<br>[5,5]<br>[2,5,7]<br>'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    if($n == 1) return [1];\n    $factors = [];\n    $i = 2;\n\
    \    while($n != 1) {\n        while(!($n % $i)) {\n            $factors[] = $i;\n\
    \            $n /= $i;\n        }\n        $i++;\n    }\n    return $factors;\n\
    }\necho \"### Factorization is: \" . implode(', ', factorize(70)) . PHP_EOL;\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "### Factorization is: 2, 5, 7\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t$prime_factors = [];\n\t// get the number of 2s that divide\
    \ n\n\twhile ($n % 2 == 0) {\n\t\t$prime_factors[] = 2;\n\t\t$n = $n / 2;\n\t\
    }\n\t// n must be odd at this point. So we can skip one element (Note i = i +2)\n\
    \tfor ($i = 3; $i <= sqrt($n); $i = $i + 2) {\n\t\t// While i divides n, print\
    \ i and divide n\n\t\twhile ($n % $i == 0) {\n\t\t\t$prime_factors[] = $i;\n\t\
    \t\t$n = $n / $i;\n\t\t}\n\t}\n\t// This condition is to handle the case when\
    \ n is a prime number greater than 2\n\tif ($n > 2) {\n\t\t$prime_factors[] =\
    \ $n;\n\t}\n\treturn $prime_factors;\n}\necho implode(' ', factorize(70)) . PHP_EOL;\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "2 5 7\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $primeFactors = [];\n    $primes =\
    \ [];\n    $maxDivisor = floor(sqrt($n));\n    for ($i = 2; $i <= $maxDivisor;\
    \ $i++) {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n       \
    \     $n /= $i;\n            $i = 1;\n        }\n    }\n    $factors[] = $n;\n\
    \    foreach ($factors as $factor) {\n        if (isPrime($factor, $primes)) {\n\
    \            $primeFactors[] = $factor;\n        }\n    }\n    return $primeFactors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpdchkz6w0.php:25\nStack trace:\n#0 /tmp/tmpdchkz6w0.php(33): factorize(2)\n\
    #1 /tmp/tmpdchkz6w0.php(37): candidate(2)\n#2 /tmp/tmpdchkz6w0.php(47): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdchkz6w0.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    for ($i = 2; $i < $n; $i++) {\n   \
    \     while ($n % $i == 0) {\n            $factors[] = $i;\n            $n /=\
    \ $i;\n        }\n    }\n    if ($n > 1) {\n        $factors[] = $n;\n    }\n\
    \    return $factors;\n}\n\necho implode(' ', factorize(25)), PHP_EOL;\necho implode('\
    \ ', factorize(70)), PHP_EOL;\necho implode(' ', factorize(10)), PHP_EOL;\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "5 5\n2 5 7\n2 5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    if ($n <= 0)\n        return \"Error\";\n    else if ($n\
    \ == 1)\n        return [];\n    else {\n        $factors = [];\n        for ($i\
    \ = 2; $i <= $n; $i++) {\n            if ($n % $i == 0) {\n                $n\
    \ /= $i;\n                $factors[] = $i;\n                $i--;\n          \
    \  }\n        }\n        return $factors;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $prime = [];\n    $factor = [];\n    for ($i = 2; $i <=\
    \ $n; $i++) {\n        if ($n % $i == 0) {\n            $n /= $i;\n          \
    \  $prime[] = $i;\n            $i--;\n        }\n    }\n    $c = array_count_values($prime);\n\
    \    foreach ($c as $key => $value) {\n        for ($i = 0; $i < $value; $i++)\
    \ {\n            $factor[] = $key;\n        }\n    }\n    return $factor;\n}\n\
    \necho '<pre>';\nprint_r(factorize(8));\necho '</pre>';\necho '<pre>';\nprint_r(factorize(25));\n\
    echo '</pre>';\necho '<pre>';\nprint_r(factorize(70));\necho '</pre>';\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\n</pre><pre>Array\n\
    (\n    [0] => 5\n    [1] => 5\n)\n</pre><pre>Array\n(\n    [0] => 2\n    [1] =>\
    \ 5\n    [2] => 7\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $f = [];\n    for ($i = 2; $i <= $n; $i++) {\n        while\
    \ ($n % $i == 0) {\n            $f[] = $i;\n            $n /= $i;\n        }\n\
    \    }\n    return $f;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $result = [];\n    if ($n === 1) {\n        $result[] =\
    \ 1;\n    } else {\n        while ($n > 1) {\n            $i = 2;\n          \
    \  while ($n % $i) {\n                $i++;\n            }\n            $result[]\
    \ = $i;\n            $n /= $i;\n        }\n    }\n    return $result;\n}\n\n/**\n\
    \ * @TODO: Delete this function and use PHP native one instead\n * Convert an\
    \ array to an object\n * http://php.net/manual/ru/function.json-decode.php#81420\n\
    \ * @param array $array\n * @return \\stdClass\n */\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n  $output_array = [];\n  $i = 2;\n  $j = 0;\n  while ($n !==\
    \ 1) {\n    if ($n % $i === 0) {\n      $output_array[$j] = $i;\n      $n = $n\
    \ / $i;\n      $j++;\n    } else {\n      $i++;\n    }\n  }\n  return $output_array;\n\
    }\necho implode(factorize(70), \",\");\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 2,5,7
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    if ($n <= 1) {\n        return [];\n    }\n\n    if ($n\
    \ % 2 == 0) {\n        $factors = array_merge([2], factorize($n / 2));\n    }\
    \ elseif ($n % 3 == 0) {\n        $factors = array_merge([3], factorize($n / 3));\n\
    \    } elseif ($n % 5 == 0) {\n        $factors = array_merge([5], factorize($n\
    \ / 5));\n    } elseif ($n % 7 == 0) {\n        $factors = array_merge([7], factorize($n\
    \ / 7));\n    } else {\n        $factors = [$n];\n    }\n\n    return $factors;\n\
    }\n\nvar_dump(factorize(8));\nvar_dump(factorize(25));\nvar_dump(factorize(70));\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(2)\n  [2]=>\n  int(2)\n}\n\
    array(2) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n}\narray(3) {\n  [0]=>\n  int(2)\n\
    \  [1]=>\n  int(5)\n  [2]=>\n  int(7)\n}\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpgpg_3_5l.php:43\nStack trace:\n#0 /tmp/tmpgpg_3_5l.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpgpg_3_5l.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $a=[];\n    for ($i=2; $i<=$n; $i++) {\n        if (is_prime($i))\
    \ {\n            while ($n%$i==0) {\n                $a[]=$i;\n              \
    \  $n=$n/$i;\n            }\n        }\n    }\n    return $a;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpag82lph1.php:14\nStack trace:\n#0 /tmp/tmpag82lph1.php(25): factorize(2)\n\
    #1 /tmp/tmpag82lph1.php(29): candidate(2)\n#2 /tmp/tmpag82lph1.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpag82lph1.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $list = [];\n    if ($n <= 0) {\n        return $list;\n\
    \    }\n\n    for ($i = 2; $i < $n; $i++) {\n        if ($n % $i == 0) {\n   \
    \         $n = $n / $i;\n            $list[] = $i;\n            $i = 1;\n    \
    \    }\n    }\n    $list[] = $n;\n    return $list;\n}\n\n$n = 70;\n\nprint_r(factorize($n));\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n  $result = [];\n  $i = 2;\n  while ($n > 1) {\n    if ($n\
    \ % $i == 0) {\n      $result[] = $i;\n      $n /= $i;\n    } else {\n      $i++;\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t$res = [];\n\tfor ($i = 2; $i <= $n; $i++) {\n\t\twhile ($n\
    \ % $i == 0) {\n\t\t\t$res[] = $i;\n\t\t\t$n /= $i;\n\t\t}\n\t}\n\treturn $res;\n\
    }\necho '<pre>';\nprint_r(factorize(8));\nprint_r(factorize(25));\nprint_r(factorize(70));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\nArray\n(\n\
    \    [0] => 5\n    [1] => 5\n)\nArray\n(\n    [0] => 2\n    [1] => 5\n    [2]\
    \ => 7\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\n}\n\nprint_r(factorize(8));\nprint_r(factorize(25));\nprint_r(factorize(70));\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5aick1gx.php:23\n\
    Stack trace:\n#0 /tmp/tmp5aick1gx.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp5aick1gx.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $prime = 1;\n    while ($n > 1) {\n\
    \        while ($n % $prime == 0) {\n            $factors[] = $prime;\n      \
    \      $n /= $prime;\n        }\n        $prime++;\n    }\n    return $factors;\n\
    }\n\necho '<pre>';\nvar_dump(factorize(8));\nvar_dump(factorize(25));\nvar_dump(factorize(70));\n\
    var_dump(factorize(111));\necho '</pre>';\nfunction candidate(...$args) {\n  \
    \  return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpbq21yg08.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $result = [];\n    $i = 2;\n    while ($n > 1) {\n    \
    \    while ($n % $i == 0) {\n            $result[] = $i;\n            $n /= $i;\n\
    \        }\n        $i++;\n    }\n    return $result;\n}\n\necho \"<pre>\";\n\
    echo implode(\"\\n\", factorize(8));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>2\n2\n2</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $counter = 2;\n    while ($n > 1) {\n\
    \        while ($n % $counter == 0) {\n            $factors[] = $counter;\n  \
    \          $n /= $counter;\n        }\n        $counter++;\n    }\n    return\
    \ $factors;\n}\n\n$result = factorize(8);\nvar_dump($result);\n$result = factorize(25);\n\
    var_dump($result);\n$result = factorize(70);\nvar_dump($result);\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(2)\n  [2]=>\n  int(2)\n}\n\
    array(2) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n}\narray(3) {\n  [0]=>\n  int(2)\n\
    \  [1]=>\n  int(5)\n  [2]=>\n  int(7)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $i = 2;\n    $count = 0;\n    while\
    \ ($n > 1) {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n       \
    \     $factors[] = $i;\n            $count++;\n        } else {\n            $i++;\n\
    \        }\n    }\n    return $factors;\n}\nfunction candidate(...$args) {\n \
    \   return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n  if ( $n == 1 ) {\n    return [1];\n  }\n  $factors = [];\n\
    \  $prime = 2;\n  while ( $n > 1 ) {\n    if ( $n % $prime == 0 ) {\n      $factors[]\
    \ = $prime;\n      $n /= $prime;\n    } else {\n      $prime += 1;\n    }\n  }\n\
    \  return $factors;\n}\n\nprint_r(factorize(8));\necho \"\\n\";\nprint_r(factorize(25));\n\
    echo \"\\n\";\nprint_r(factorize(70));\necho \"\\n\";\nprint_r(factorize(41));\n\
    echo \"\\n\";\nprint_r(factorize(1));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\n\nArray\n(\n   \
    \ [0] => 5\n    [1] => 5\n)\n\nArray\n(\n    [0] => 2\n    [1] => 5\n    [2] =>\
    \ 7\n)\n\nArray\n(\n    [0] => 41\n)\n\nArray\n(\n    [0] => 1\n)\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $f = [];\n    while ($n%2 === 0) {\n        $f[] = 2;\n\
    \        $n /= 2;\n    }\n    for ($i = 3; $i <= $n; $i += 2) {\n        while\
    \ ($n%$i === 0) {\n            $f[] = $i;\n            $n /= $i;\n        }\n\
    \    }\n    return $f;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t$result = [];\n\t$d = 2;\n\twhile ($n > 1) {\n\t\twhile ($n\
    \ % $d == 0) {\n\t\t\t$result[] = $d;\n\t\t\t$n /= $d;\n\t\t}\n\t\t$d += 1;\n\t\
    }\n\treturn $result;\n}\n\nvar_dump(factorize(8));\nvar_dump(factorize(25));\n\
    var_dump(factorize(70));\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(2)\n  [2]=>\n  int(2)\n}\n\
    array(2) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n}\narray(3) {\n  [0]=>\n  int(2)\n\
    \  [1]=>\n  int(5)\n  [2]=>\n  int(7)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $temp = $n;\n    for ($i = 2; $i <=\
    \ $temp; $i++) {\n        if ($temp % $i == 0) {\n            array_push($factors,\
    \ $i);\n            $temp /= $i;\n            $i--;\n        }\n    }\n    return\
    \ $factors;\n}\n\n$n = [8, 25, 70];\nfor ($i = 0; $i < count($n); $i++) {\n  \
    \  echo json_encode(factorize($n[$i])) . \"<br/>\";\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '[2,2,2]<br/>[5,5]<br/>[2,5,7]<br/>'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $divider = 2;\n    while ($n > 1) {\n\
    \        while ($n % $divider === 0) {\n            $factors[] = $divider;\n \
    \           $n /= $divider;\n        }\n        $divider++;\n    }\n    return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $result = [];\n    for ($i = 2; $i <= $n; $i++) {\n   \
    \     if ($n % $i == 0) {\n            $result[] = $i;\n            $n /= $i;\n\
    \            $i = 1;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    for ($i = 2; $i <= $n; $i++) {\n  \
    \      while ($n % $i == 0) {\n            $factors[] = $i;\n            $n /=\
    \ $i;\n        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    if (is_int($n) && $n >= 0) {\n        $factors = [];\n\
    \        if ($n == 0) {\n            $factors[] = 0;\n        } else {\n     \
    \       for ($i = 2; $i <= $n; $i++) {\n                if ($n % $i == 0) {\n\
    \                    $factors[] = $i;\n                    $n = $n / $i;\n   \
    \                 $i = 1;\n                }\n            }\n        }\n     \
    \   return $factors;\n    } else {\n        return false;\n    }\n}\n\n$result\
    \ = factorize(120);\necho '<pre>';\nprint_r($result);\necho '</pre>';\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n    [3] => 3\n\
    \    [4] => 5\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $d = 2;\n    while ($n > 1) {\n   \
    \     while ($n % $d == 0) {\n            $factors[] = $d;\n            $n /=\
    \ $d;\n        }\n        $d = $d + 1;\n    }\n    return $factors;\n}\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n  $factors = [];\n  $factor = 2;\n  while ($n > 1) {\n    if\
    \ ($n % $factor === 0) {\n      $factors[] = $factor;\n      $n /= $factor;\n\
    \    } else {\n      $factor += 1;\n    }\n  }\n  return $factors;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $divisor = 2;\n    while ($n > 1) {\n\
    \        while ($n % $divisor == 0) {\n            $factors[] = $divisor;\n  \
    \          $n /= $divisor;\n        }\n        $divisor++;\n    }\n    return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factor = 2;\n    $factors = [];\n    $limit = ceil(sqrt($n));\n\
    \    while ($n >= $factor && $factor <= $limit) {\n        if ($n % $factor ==\
    \ 0) {\n            $factors[] = $factor;\n            $n /= $factor;\n      \
    \  } else {\n            $factor++;\n        }\n    }\n    if ($n > 1) {\n   \
    \     $factors[] = $n;\n    }\n    return $factors;\n}\n\nprint_r(factorize(70));\n\
    \nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $factor = 2;\n    while ($n > 1) {\n\
    \        while (fmod($n, $factor) == 0) {\n            $factors[] = $factor;\n\
    \            $n /= $factor;\n        }\n        $factor++;\n    }\n    return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $d = 2;\n    while ($n > 1) {\n   \
    \     while ($n % $d == 0) {\n            $factors[] = $d;\n            $n /=\
    \ $d;\n        }\n        $d += 1;\n    }\n    return $factors;\n}\n\nvar_dump(factorize(8));\n\
    var_dump(factorize(25));\nvar_dump(factorize(70));\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(2)\n  [2]=>\n  int(2)\n}\n\
    array(2) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n}\narray(3) {\n  [0]=>\n  int(2)\n\
    \  [1]=>\n  int(5)\n  [2]=>\n  int(7)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $div = 2;\n    $factors = [];\n    while ($n != 1) {\n\
    \        if ($n % $div == 0) {\n            $factors[] = $div;\n            $n\
    \ /= $div;\n        } else {\n            $div++;\n        }\n    }\n    return\
    \ $factors;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    if ($n < 2) {\n        return [1];\n    }\n\n    $res =\
    \ [];\n    while ($n > 1) {\n        for ($d = 2; $d <= $n; $d++) {\n        \
    \    if ($n % $d == 0) {\n                $res[] = $d;\n                $n /=\
    \ $d;\n                break;\n            }\n        }\n    }\n\n    return $res;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n  $result = [];\n  for ($i = 2; $i < $n; $i++) {\n    while\
    \ ($n % $i == 0) {\n      $result[] = $i;\n      $n /= $i;\n    }\n  }\n  if ($n\
    \ > 1) {\n    $result[] = $n;\n  }\n  return $result;\n}\n\nvar_dump(factorize(8));\n\
    var_dump(factorize(25));\nvar_dump(factorize(70));\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(2)\n  [2]=>\n  int(2)\n}\n\
    array(2) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n}\narray(3) {\n  [0]=>\n  int(2)\n\
    \  [1]=>\n  int(5)\n  [2]=>\n  int(7)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    // write your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6tz031hc.php:20\n\
    Stack trace:\n#0 /tmp/tmp6tz031hc.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp6tz031hc.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $n = intval($n);\n    if ($n <= 0) {\n        throw new\
    \ Exception('\"n\" must be greater than 0');\n    }\n    $array = [];\n    $k\
    \ = 2;\n    while ($n > 1) {\n        if ($n % $k == 0) {\n            $array[]\
    \ = $k;\n            $n = $n / $k;\n        } else {\n            $k++;\n    \
    \    }\n    }\n    return $array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t$res = [];\n\twhile ($n%2 == 0) {\n\t\t$res[] = 2;\n\t\t\
    $n = $n/2;\n\t}\n\tfor ($i = 3; $i <= $n; $i = $i+2) {\n\t\twhile ($n%$i == 0)\
    \ {\n\t\t\t$res[] = $i;\n\t\t\t$n = $n/$i;\n\t\t}\n\t}\n\treturn $res;\n}\nprint_r(factorize(8));\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    if ($n < 2) {\n        return [];\n    }\n    if ($n ==\
    \ 2) {\n        return [2];\n    }\n    $d = 2;\n    $res = [];\n    while ($n\
    \ > 1) {\n        if (($n % $d) == 0) {\n            $res[] = $d;\n          \
    \  $n /= $d;\n        } else {\n            $d++;\n        }\n    }\n    return\
    \ $res;\n}\necho \"<pre>\";\nvar_dump(factorize(8));\nvar_dump(factorize(25));\n\
    var_dump(factorize(70));\necho \"</pre>\";\nfunction candidate(...$args) {\n \
    \   return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(2)\n  [2]=>\n  int(2)\n\
    }\narray(2) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n}\narray(3) {\n  [0]=>\n\
    \  int(2)\n  [1]=>\n  int(5)\n  [2]=>\n  int(7)\n}\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    if ($n < 2) {\n        return false;\n    }\n    $factors\
    \ = [];\n    $d = 2;\n    while ($n > 1) {\n        while ($n % $d == 0) {\n \
    \           $factors[] = $d;\n            $n /= $d;\n        }\n        $d +=\
    \ 1;\n        if ($d * $d > $n) {\n            if ($n > 1) {\n               \
    \ $factors[] = $n;\n                break;\n            }\n        }\n    }\n\
    \    return $factors;\n}\n\necho '<pre>';\nprint_r(factorize(11));\necho '</pre>';\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 11\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    for ($divisor = 2; $n > 1; $divisor++)\
    \ {\n        for (; $n % $divisor == 0; $n /= $divisor) {\n            $factors[]\
    \ = $divisor;\n        }\n    }\n    return $factors;\n}\n\nprint_r(factorize(8));\n\
    print_r(factorize(25));\nprint_r(factorize(70));\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\nArray\n(\n    [0]\
    \ => 5\n    [1] => 5\n)\nArray\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n\
    )\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    for ($i = 2; $i <= $n; $i++) {\n  \
    \      if ($n % $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n\
    \            $i--;\n        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    for ($i = 2; $i < $n; $i++) {\n   \
    \     while ($n % $i == 0) {\n            $factors[] = $i;\n            $n /=\
    \ $i;\n        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpclot6oxq.php:27\n\
    Stack trace:\n#0 /tmp/tmpclot6oxq.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpclot6oxq.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n  $primes = array();\n  for ($divisor = 2; $n > 1; $divisor++)\
    \ {\n    for (; $n % $divisor == 0; $n /= $divisor) {\n      $primes[] = $divisor;\n\
    \    }\n  }\n  return $primes;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $res = [];\n    $i = 2;\n    while ($n > 1) {\n       \
    \ if ($n % $i == 0) {\n            $res[] = $i;\n            $n /= $i;\n     \
    \   } else {\n            $i++;\n        }\n    }\n    return $res;\n}\nprint_r(factorize(70));\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $factor = 2;\n    while ($n != 1) {\n\
    \        if ($n % $factor == 0) {\n            $factors[] = $factor;\n       \
    \     $n /= $factor;\n        } else {\n            $factor++;\n        }\n  \
    \  }\n    return $factors;\n}\necho implode(\", \", factorize(70)) . PHP_EOL;\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "2, 5, 7\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $i = 2;\n    while ($n > 1) {\n   \
    \     while (fmod($n, $i) == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n        }\n        $i += 1;\n    }\n    return $factors;\n}\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbn4092od.php:20\n\
    Stack trace:\n#0 /tmp/tmpbn4092od.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpbn4092od.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t$result = [];\n\tif ($n > 1) {\n\t\t$result[] = 1;\n\t}\n\
    \tfor ($divisor = 2; $divisor <= $n; $divisor++) {\n\t\tif ($n % $divisor == 0)\
    \ {\n\t\t\twhile ($n % $divisor == 0) {\n\t\t\t\t$result[] = $divisor;\n\t\t\t\
    \t$n /= $divisor;\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp80d4itua.php:32\n\
    Stack trace:\n#0 /tmp/tmp80d4itua.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp80d4itua.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $n = (int)$n;\n    $primes = array();\n    if ($n < 2)\
    \ {\n        return array();\n    }\n    while ($n % 2 == 0) {\n        $primes[]\
    \ = 2;\n        $n /= 2;\n    }\n    if ($n == 1) {\n        return $primes;\n\
    \    }\n    $next = 3;\n    while ($n > 1) {\n        while ($n % $next == 0)\
    \ {\n            $primes[] = $next;\n            $n /= $next;\n        }\n   \
    \     $next += 2;\n    }\n    return $primes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n  $factors = [];\n  while ($n != 1) {\n    $start = 2;\n  \
    \  while (!is_int($n / $start)) {\n      $start++;\n    }\n    $factors[] = $start;\n\
    \    $n /= $start;\n  }\n  return $factors;\n}\n\nprint_r(factorize(8));\nprint_r(factorize(25));\n\
    print_r(factorize(70));\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\nArray\n(\n    [0]\
    \ => 5\n    [1] => 5\n)\nArray\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n\
    )\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    if ($n === 1) {\n        return $factors;\n\
    \    }\n\n    for ($i = 2; $i <= $n; $i++) {\n        while ($n % $i === 0) {\n\
    \            $factors[] = $i;\n            $n /= $i;\n        }\n    }\n\n   \
    \ return $factors;\n}\n\necho '<pre>';\necho implode(', ', factorize(8)) . PHP_EOL;\n\
    echo implode(', ', factorize(25)) . PHP_EOL;\necho implode(', ', factorize(70))\
    \ . PHP_EOL;\necho '</pre>';\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "<pre>2, 2, 2\n5, 5\n2, 5, 7\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $arr = [];\n    for ($i = 2; $i <= $n; $i++) {\n      \
    \  while ($n % $i == 0) {\n            $arr[] = $i;\n            $n /= $i;\n \
    \       }\n    }\n    return $arr;\n}\nvar_dump(factorize(25));\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(2) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t$a = [];\n\t$factor = 2;\n\twhile ($n > 1) {\n\t\tif ($n\
    \ % $factor == 0) {\n\t\t\t$a[] = $factor;\n\t\t\t$n /= $factor;\n\t\t} else {\n\
    \t\t\t$factor++;\n\t\t}\n\t}\n\treturn $a;\n}\nvar_dump(factorize(8));\nvar_dump(factorize(25));\n\
    var_dump(factorize(70));\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(2)\n  [2]=>\n  int(2)\n}\n\
    array(2) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n}\narray(3) {\n  [0]=>\n  int(2)\n\
    \  [1]=>\n  int(5)\n  [2]=>\n  int(7)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n  $factors = [];\n  if ($n <= 0) {\n    return $factors;\n\
    \  }\n  $i = 2;\n  while ($n > 1) {\n    if ($n % $i == 0) {\n      $factors[]\
    \ = $i;\n      $n /= $i;\n    } else {\n      $i++;\n    }\n  }\n  return $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $arr = [];\n    for ($i = 2; $i <= $n; $i++) {\n      \
    \  while ($n % $i == 0) {\n            $arr[] = $i;\n            $n /= $i;\n \
    \       }\n    }\n    return $arr;\n}\necho factorize(8);\necho factorize(25);\n\
    echo factorize(70);\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ArrayArrayArray
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    if ($n < 2) {\n        return null;\n    }\n    $factors\
    \ = [];\n    for ($i = 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n\
    \            $factors[] = $i;\n            $n /= $i;\n        }\n    }\n    return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t$factors = [];\n\t$divisor = 2;\n\twhile ($n >= $divisor)\
    \ {\n\t\tif ($n % $divisor === 0) {\n\t\t\t$factors[] = $divisor;\n\t\t\t$n /=\
    \ $divisor;\n\t\t} else {\n\t\t\t$divisor++;\n\t\t}\n\t}\n\treturn $factors;\n\
    }\n\necho '<pre>';\nprint_r(factorize(70));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n  $arr = [];\n  $i = 2;\n  while ($n != 1) {\n    if ($n %\
    \ $i == 0) {\n      $arr[] = $i;\n      $n /= $i;\n    } else {\n      $i++;\n\
    \    }\n  }\n  return $arr;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n  // put your code here\n}\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdjx3vo4k.php:19\n\
    Stack trace:\n#0 /tmp/tmpdjx3vo4k.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpdjx3vo4k.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $result = [];\n    $divisor = 2;\n    $num = $n;\n    while\
    \ ($num > 1) {\n        if ($num % $divisor == 0) {\n            $result[] = $divisor;\n\
    \            $num /= $divisor;\n        } else {\n            $divisor++;\n  \
    \      }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $arr = [];\n    if ($n > 0) {\n        $i = 2;\n      \
    \  while ($n >= $i) {\n            if ($n % $i == 0) {\n                $arr[]\
    \ = $i;\n                $n = $n / $i;\n            } else {\n               \
    \ $i++;\n            }\n        }\n    }\n    return $arr;\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    if($n > 0) {\n        $arr = [];\n        for($i = 2; $i\
    \ <= $n; $i++) {\n            if($n % $i == 0) {\n                array_push($arr,\
    \ $i);\n                $n = $n / $i;\n                $i = 2;\n            }\n\
    \        }\n        return $arr;\n    }\n    else {\n        return false;\n \
    \   }\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphy5thag0.php:33\n\
    Stack trace:\n#0 /tmp/tmphy5thag0.php(42): test()\n#1 {main}\n  thrown in /tmp/tmphy5thag0.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $result = [];\n    $primeFactor = 2;\n    while ($n > 1)\
    \ {\n        while ($n % $primeFactor == 0) {\n            $result[] = $primeFactor;\n\
    \            $n /= $primeFactor;\n        }\n        $primeFactor++;\n    }\n\
    \    return $result;\n}\necho '<pre>';\nprint_r(factorize(25));\necho '</pre>';\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 5\n    [1] => 5\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $divisor = 2;\n    while ($n > 1) {\n\
    \        while ($n % $divisor == 0) {\n            $factors[] = $divisor;\n  \
    \          $n /= $divisor;\n        }\n        $divisor += 1;\n    }\n    return\
    \ $factors;\n}\n\nprint_r(factorize(8));\nfunction candidate(...$args) {\n   \
    \ return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $arr = [];\n    for ($i = 2; $i <= $n; $i++) {\n      \
    \  while ($n % $i == 0) {\n            $arr[] = $i;\n            $n /= $i;\n \
    \       }\n    }\n    return $arr;\n}\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t$factors = [];\n\tfor ($i = 2; $i <= $n; $i++) {\n\t\tif\
    \ ($n % $i == 0) {\n\t\t\t$factors[] = $i;\n\t\t\t$n /= $i;\n\t\t\t$i--;\n\t\t\
    }\n\t}\n\treturn $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $divisor = 2;\n    while ($n > 1) {\n\
    \        while ($n % $divisor == 0) {\n            $factors[] = $divisor;\n  \
    \          $n /= $divisor;\n        }\n        $divisor += 1;\n    }\n    return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t$list = [];\n\t$number = $n;\n\twhile ($number != 1) {\n\t\
    \tfor ($i = 2; $i <= $number; $i++) {\n\t\t\tif ($number % $i == 0) {\n\t\t\t\t\
    $list[] = $i;\n\t\t\t\t$number = $number / $i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn $list;\n}\necho json_encode(factorize(8));\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '[2,2,2]'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t// TODO: Your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_afbnm4m.php:20\n\
    Stack trace:\n#0 /tmp/tmp_afbnm4m.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp_afbnm4m.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $result = [];\n    $i = 2;\n    while ($n > 1) {\n    \
    \    if ($n % $i == 0) {\n            $result[] = $i;\n            $n /= $i;\n\
    \        } else {\n            $i++;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $result = [];\n    $m = 2;\n    while ($n != 1) {\n   \
    \     while (isPrime($m) && $n % $m == 0) {\n            $result[] = $m;\n   \
    \         $n /= $m;\n        }\n        $m++;\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpr6o3bntm.php:15\nStack trace:\n#0 /tmp/tmpr6o3bntm.php(25): factorize(2)\n\
    #1 /tmp/tmpr6o3bntm.php(29): candidate(2)\n#2 /tmp/tmpr6o3bntm.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpr6o3bntm.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t$result = [];\n\twhile ($n%2==0) {\n\t\t$result[] = 2;\n\t\
    \t$n /= 2;\n\t}\n\t$counter = 3;\n\twhile ($n > 1) {\n\t\twhile ($n%$counter==0)\
    \ {\n\t\t\t$result[] = $counter;\n\t\t\t$n /= $counter;\n\t\t}\n\t\t$counter+=2;\n\
    \t}\n\treturn $result;\n}\nprint_r(factorize(8));\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n  if ($n < 2) {\n    return [];\n  }\n  $prime_factors = [];\n\
    \  $divider = 2;\n  while ($n > 1) {\n    while ($n % $divider == 0) {\n     \
    \ $prime_factors[] = $divider;\n      $n /= $divider;\n    }\n    $divider +=\
    \ 1;\n  }\n  return $prime_factors;\n}\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $result = [];\n    $i = 2;\n    while ($n > 1) {\n    \
    \    while ($n % $i == 0) {\n            $result[] = $i;\n            $n /= $i;\n\
    \        }\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $res = [];\n    for ($i = 2; $i <= $n; $i++) {\n      \
    \  while ($n % $i == 0) {\n            $res[] = $i;\n            $n /= $i;\n \
    \       }\n    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t$factors = [];\n\tfor ($i = 2; $i < $n; $i++) {\n\t\twhile\
    \ ($n % $i == 0) {\n\t\t\t$factors[] = $i;\n\t\t\t$n /= $i;\n\t\t}\n\t}\n\treturn\
    \ $factors;\n}\n\necho '<pre>';\nprint_r(factorize(944));\necho '</pre>';\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n    [3] => 2\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_yiswyyf.php:30\n\
    Stack trace:\n#0 /tmp/tmp_yiswyyf.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp_yiswyyf.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    if ($n == 1) {\n        return [];\n    }\n\n    $factor\
    \ = 2;\n    $factors = [];\n    while ($n > 1) {\n        while ($n % $factor\
    \ == 0) {\n            $factors[] = $factor;\n            $n /= $factor;\n   \
    \     }\n        $factor += 1;\n    }\n\n    return $factors;\n}\n\n$n = intval(fgets(STDIN));\n\
    \n$factors = factorize($n);\n\necho implode(' ', $factors);\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t$factors = [];\n\tfor ($divisor = 2; $n > 1; $divisor++)\
    \ {\n\t\tfor (; $n % $divisor == 0; $n /= $divisor) {\n\t\t\t$factors[] = $divisor;\n\
    \t\t}\n\t}\n\treturn $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $result = [];\n    for ($factor = 2; $factor <= $n; $factor++)\
    \ {\n        while ($n % $factor == 0) {\n            $result[] = $factor;\n \
    \           $n /= $factor;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $prime_factors = [];\n    for ($divider = 2; $n > 1; $divider++)\
    \ {\n        for (; $n % $divider == 0; $n /= $divider) {\n            $prime_factors[]\
    \ = $divider;\n        }\n    }\n    return $prime_factors;\n}\n\necho '<pre>';\n\
    print_r(factorize(70));\necho '</pre>';\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $divider = 2;\n    while ($n > 1) {\n\
    \        while ($n % $divider == 0) {\n            $factors[] = $divider;\n  \
    \          $n /= $divider;\n        }\n        $divider++;\n    }\n    return\
    \ $factors;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $result = [];\n    for ($i = 2; $i <= $n; $i++) {\n   \
    \     while ($n % $i == 0) {\n            $result[] = $i;\n            $n /= $i;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127,\
    \ 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211,\
    \ 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307,\
    \ 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401,\
    \ 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499,\
    \ 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\
    \ 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709,\
    \ 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823,\
    \ 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937,\
    \ 941, 947, 953, 967, 971, 977, 983, 991, 997];\n    $prime_factors = [];\n  \
    \  for ($i = 0; $i < count($prime); $i++) {\n        if ($n % $prime[$i] == 0)\
    \ {\n            $prime_factors[] = $prime[$i];\n            $n = $n / $prime[$i];\n\
    \            $i--;\n        }\n    }\n    return $prime_\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgh13ncdv.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $res = [];\n    $i = 2;\n    while ($n > 1) {\n       \
    \ while ($n % $i == 0) {\n            $res[] = $i;\n            $n /= $i;\n  \
    \      }\n        $i++;\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $result = [];\n    $prime = 2;\n    while ($n > 1) {\n\
    \        while ( $n % $prime == 0) {\n            $result[] = $prime;\n      \
    \      $n /= $prime;\n        }\n        $prime++;\n    }\n    return $result;\n\
    }\necho '<pre>';\nprint_r(factorize(70));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $res = [];\n    $d = 2;\n    while ($n > 1) {\n       \
    \ while ($n % $d == 0) {\n            $res[] = $d;\n            $n /= $d;\n  \
    \      }\n        $d++;\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $n = intval($n);\n    $result = [];\n    $count = 0;\n\
    \    if ($n === 0 || $n === 1) {\n        $result[] = $n;\n        return $result;\n\
    \    }\n    if ($n % 2 === 0) {\n        $count = 1;\n        $n = $n / 2;\n \
    \       while ($n % 2 === 0) {\n            $count++;\n            $n = $n / 2;\n\
    \        }\n        for ($i = 0; $i < $count; $i++) {\n            $result[] =\
    \ 2;\n        }\n    }\n    for ($i = 3; $i <= $n; $i += 2) {\n        if ($n\
    \ % $i === 0) {\n            $count = 1;\n            $n = $n / $i;\n        \
    \    while ($n % $i === 0) {\n                $count++;\n                $n =\
    \ $n / $i;\n            }\n            for ($j = 0; $j < $count; $j++) {\n   \
    \             $result[] = $i;\n            }\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $results = [];\n    $i = 2;\n    while ($n > 1) {\n   \
    \     while ($n % $i == 0) {\n            $results[] = $i;\n            $n /=\
    \ $i;\n        }\n        $i++;\n    }\n    return $results;\n}\n\nprint_r(factorize(8));\n\
    print_r(factorize(25));\nprint_r(factorize(70));\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\nArray\n(\n    [0]\
    \ => 5\n    [1] => 5\n)\nArray\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n\
    )\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t$factors = [];\n\t$p = 2;\n\twhile ($n > 1) {\n\t\twhile\
    \ ($n % $p == 0) {\n\t\t\t$factors[] = $p;\n\t\t\t$n /= $p;\n\t\t}\n\t\t$p +=\
    \ 1;\n\t}\n\treturn $factors;\n}\n\nprint_r(factorize(8));\nprint_r(factorize(25));\n\
    print_r(factorize(70));\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\nArray\n(\n    [0]\
    \ => 5\n    [1] => 5\n)\nArray\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n\
    )\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    for ($divisor = 2; $n > 1; $divisor++)\
    \ {\n        for (; $n % $divisor == 0; $n /= $divisor) {\n            $factors[]\
    \ = $divisor;\n        }\n    }\n    return $factors;\n}\nprint_r(factorize(25));\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => 5\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    while ($n > 1) {\n        for ($i =\
    \ 2; $i <= $n; $i++) {\n            if ($n % $i == 0) {\n                $factors[]\
    \ = $i;\n                $n /= $i;\n                break;\n            }\n  \
    \      }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n \
    \   return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $divisor = 2;\n    while ($n > 1) {\n\
    \        for (; $n % $divisor == 0; $n /= $divisor) {\n            $factors[]\
    \ = $divisor;\n        }\n        $divisor += 1;\n    }\n    return $factors;\n\
    }\nprint_r(factorize(70));\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n  $result = [];\n  $counter = 0;\n  while ($n % 2 == 0) {\n\
    \    $result[$counter] = 2;\n    $n = $n / 2;\n    $counter++;\n  }\n  $n = intval($n);\n\
    \  for ($i = 3; $i <= $n; $i++) {\n    while ($n % $i == 0) {\n      $result[$counter]\
    \ = $i;\n      $n = $n / $i;\n      $counter++;\n    }\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $primeFactors = [];\n    $i = 2;\n    while ($n > 1) {\n\
    \        while ($n % $i == 0) {\n            $primeFactors[] = $i;\n         \
    \   $n = $n / $i;\n        }\n        $i = $i + 1;\n    }\n    return $primeFactors;\n\
    }\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $divider = 2;\n    while ($n > 1) {\n\
    \        while ($n % $divider === 0) {\n            $factors[] = $divider;\n \
    \           $n /= $divider;\n        }\n        $divider++;\n    }\n    return\
    \ $factors;\n}\n\necho \"<pre>\";\nprint_r(factorize(8));\necho \"</pre>\";\n\n\
    echo \"<pre>\";\nprint_r(factorize(25));\necho \"</pre>\";\n\necho \"<pre>\";\n\
    print_r(factorize(70));\necho \"</pre>\";\nfunction candidate(...$args) {\n  \
    \  return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\n</pre><pre>Array\n\
    (\n    [0] => 5\n    [1] => 5\n)\n</pre><pre>Array\n(\n    [0] => 2\n    [1] =>\
    \ 5\n    [2] => 7\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    while ($n % 2 == 0) {\n        $factors[]\
    \ = 2;\n        $n /= 2;\n    }\n    for ($i = 3; $i <= sqrt($n); $i += 2) {\n\
    \        while ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ /= $i;\n        }\n    }\n    if ($n > 2) {\n        $factors[] = $n;\n    }\n\
    \    return $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    if (!is_int($n)) {\n        return null;\n    }\n\n   \
    \ $factors = [];\n    for ($i = 2; $i <= $n; $i++) {\n        while ($n % $i ==\
    \ 0) {\n            $factors[] = $i;\n            $n /= $i;\n        }\n    }\n\
    \n    return $factors;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporrsfyl2.php:20\n\
    Stack trace:\n#0 /tmp/tmporrsfyl2.php(30): test()\n#1 {main}\n  thrown in /tmp/tmporrsfyl2.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $list = [];\n    while ($n % 2 == 0) {\n        $list[]\
    \ = 2;\n        $n /= 2;\n    }\n    for ($i = 3; $i <= sqrt($n); $i += 2) {\n\
    \        while ($n % $i == 0) {\n            $list[] = $i;\n            $n /=\
    \ $i;\n        }\n    }\n    if ($n > 2) {\n        $list[] = $n;\n    }\n   \
    \ return $list;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n  $prime_factors = [];\n  $divider = 2;\n  while ($n > 1) {\n\
    \    if ($n % $divider === 0) {\n      $prime_factors[] = $divider;\n      $n\
    \ /= $divider;\n    } else {\n      $divider++;\n    }\n  }\n  return $prime_factors;\n\
    }\n\n$number = 70;\n$prime_factors = factorize($number);\n\necho \"Prime factors\
    \ of $number are:\\n\";\necho implode(', ', $prime_factors);\n\necho \"\\n\\n\"\
    ;\n\necho \"Factorization of $number is: \";\n$factorization = array_fill(0, count($prime_factors),\
    \ $number);\necho implode(' * ', $factorization);\n\necho \"\\n\\n\";\n\necho\
    \ \"Function test:\\n\";\necho \"Multiplication result: \" . array_product($prime_factors);\n\
    \necho \"\\n\\n\";\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "Prime factors of 70 are:\n2, 5, 7\n\nFactorization of 70 is: 70 * 70 *\
    \ 70\n\nFunction test:\nMultiplication result: 70\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t$factors = [];\n\tfor ($i = 2; $i <= $n; $i++) {\n\t\twhile\
    \ ($n % $i == 0) {\n\t\t\t$factors[] = $i;\n\t\t\t$n /= $i;\n\t\t}\n\t}\n\treturn\
    \ $factors;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $result = [];\n    $x = 2;\n    while ($n > 1) {\n    \
    \    while ($n % $x == 0) {\n            $result[] = $x;\n            $n /= $x;\n\
    \        }\n        $x++;\n    }\n    return $result;\n}\n\necho json_encode(factorize(8));\n\
    echo \"\\n\";\necho json_encode(factorize(25));\necho \"\\n\";\necho json_encode(factorize(70));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "[2,2,2]\n[5,5]\n[2,5,7]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $arr = [];\n    $d = 2;\n    while ($n > 1) {\n       \
    \ while ($n % $d == 0) {\n            $arr[] = $d;\n            $n /= $d;\n  \
    \      }\n        $d += 1;\n    }\n    return $arr;\n}\necho implode(\", \", factorize(70));\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: 2, 5, 7
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $array = [];\n    $i = 2;\n    while ($n > 1) {\n     \
    \   while ($n % $i == 0) {\n            $array[] = $i;\n            $n = $n /\
    \ $i;\n        }\n        $i++;\n    }\n    return $array;\n}\nvar_dump(factorize(70));\n\
    \nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(5)\n  [2]=>\n  int(7)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t$data = [];\n\tfor ($i = 2; $i <= $n; $i++) {\n\t\twhile\
    \ (($n % $i) == 0) {\n\t\t\t$data[] = $i;\n\t\t\t$n /= $i;\n\t\t}\n\t}\n\treturn\
    \ $data;\n}\necho json_encode(factorize(70)) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "[2,5,7]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $factor = 2;\n    while ($n > 1) {\n\
    \        while ($n % $factor == 0) {\n            $factors[] = $factor;\n    \
    \        $n /= $factor;\n        }\n        $factor++;\n    }\n    return $factors;\n\
    }\n\necho '<pre>';\nprint_r(factorize(8));\necho '</pre>';\necho '<pre>';\nprint_r(factorize(25));\n\
    echo '</pre>';\necho '<pre>';\nprint_r(factorize(70));\necho '</pre>';\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\n</pre><pre>Array\n\
    (\n    [0] => 5\n    [1] => 5\n)\n</pre><pre>Array\n(\n    [0] => 2\n    [1] =>\
    \ 5\n    [2] => 7\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $result = [];\n    $i = 2;\n    while ($n !== 1) {\n  \
    \      while ($n % $i === 0) {\n            $result[] = $i;\n            $n /=\
    \ $i;\n        }\n        $i++;\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $result = [];\n    $d = 2;\n    while ($n > 1) {\n    \
    \    while ($n % $d == 0) {\n            $result[] = $d;\n            $n /= $d;\n\
    \        }\n        $d++;\n    }\n    return $result;\n}\n\necho \"<pre>\";\n\
    var_dump(factorize(8));\nvar_dump(factorize(25));\nvar_dump(factorize(70));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "<pre>array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(2)\n  [2]=>\n  int(2)\n\
    }\narray(2) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n}\narray(3) {\n  [0]=>\n\
    \  int(2)\n  [1]=>\n  int(5)\n  [2]=>\n  int(7)\n}\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $divisor = 2;\n    while ($n > 1) {\n\
    \        if ($n % $divisor == 0) {\n            $factors[] = $divisor;\n     \
    \       $n /= $divisor;\n        } else {\n            $divisor++;\n        }\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n  $primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127,\
    \ 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211,\
    \ 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307,\
    \ 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401,\
    \ 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499,\
    \ 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\
    \ 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709,\
    \ 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823,\
    \ 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937,\
    \ 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  $p = 2;\n  $factors = [];\n\
    \  while ($n > 1) {\n    if ($n % $p == 0) {\n      $factors[] = $p;\n      $n\
    \ /= $p;\n    } else {\n      $p = $primes[array_search($p, $primes) + 1];\n \
    \   }\n  }\n  return\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpq3cg0xay.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $arr = range(2, (int)sqrt($n));\n \
    \   while ($n > 1) {\n        foreach ($arr as $num) {\n            if ($n % $num\
    \ == 0) {\n                $factors[] = $num;\n                $n /= $num;\n \
    \               break;\n            }\n        }\n    }\n    return $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n  $arr = [];\n  $i = 2;\n  while($n != 1) {\n    if($n % $i\
    \ == 0) {\n      $arr[] = $i;\n      $n = $n / $i;\n    } else {\n      $i++;\n\
    \    }\n  }\n  return $arr;\n}\nprint_r(factorize(8));\nprint_r(factorize(25));\n\
    print_r(factorize(70));\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\nArray\n(\n    [0]\
    \ => 5\n    [1] => 5\n)\nArray\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n\
    )\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    for ($i = 2; $i <= $n; $i++) {\n  \
    \      while ($n % $i == 0) {\n            $factors[] = $i;\n            $n /=\
    \ $i;\n        }\n    }\n    return $factors;\n}\n\necho \"<pre>\";\nprint_r(factorize(100));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 5\n    [3] => 5\n\
    )\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n  $factors = [];\n  $d = 2;\n  while ($n > 1) {\n    while\
    \ ($n % $d == 0) {\n      $factors[] = $d;\n      $n /= $d;\n    }\n    $d = $d\
    \ + 1;\n  }\n  return $factors;\n}\n\nvar_dump(factorize(8));\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(2)\n  [2]=>\n  int(2)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $result = [];\n    while($n % 2 == 0) {\n        $result[]\
    \ = 2;\n        $n /= 2;\n    }\n    for($i = 3; $i <= $n; $i+=2) {\n        while($n\
    \ % $i == 0) {\n            $result[] = $i;\n            $n /= $i;\n        }\n\
    \    }\n    return $result;\n}\necho \"factorize(8) = \";\nvar_dump(factorize(8));\n\
    echo \"factorize(25) = \";\nvar_dump(factorize(25));\necho \"factorize(70) = \"\
    ;\nvar_dump(factorize(70));\necho \"factorize(100) = \";\nvar_dump(factorize(100));\n\
    echo \"factorize(123) = \";\nvar_dump(factorize(123));\necho \"factorize(38290)\
    \ = \";\nvar_dump(factorize(38290));\necho \"factorize(10201) = \";\nvar_dump(factorize(10201));\n\
    echo \"factorize(100100) = \";\nvar_dump(factorize(100100));\necho \"factorize(100100100)\
    \ = \";\nvar_dump(factorize(100100100));\necho \"factorize(2090) = \";\nvar_dump(factorize(2090));\n\
    echo \"factorize(20900) = \";\nvar_dump(factorize(20900));\necho \"factorize(11346)\
    \ = \";\nvar_dump(factorize(11346));\necho \"factorize(50) = \";\nvar_dump(factorize(50));\n\
    echo \"factorize(141) = \";\nvar_dump(factorize(141));\necho \"factorize(490)\
    \ = \";\nvar_dump(factorize(490));\necho \"factorize(497) = \";\nvar_dump(factorize(497));\n\
    echo \"factorize(100100100100) = \";\nvar_dump(factorize(100100100100));\necho\
    \ \"factorize(100100100100100) = \";\nvar_dump(factorize(100100100100100));\n\
    echo \"factor\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0fe8zh_9.php on line 67\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t$result = [];\n\t$i = 2;\n\twhile ($n > 1) {\n\t\tif ($n\
    \ % $i === 0) {\n\t\t\t$result[] = $i;\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t\
    $i++;\n\t\t}\n\t}\n\treturn $result;\n}\necho implode(', ', factorize(8)) . \"\
    \\n\";\necho implode(', ', factorize(25)) . \"\\n\";\necho implode(', ', factorize(70))\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "2, 2, 2\n5, 5\n2, 5, 7\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    if ($n < 2) {\n        return $factors;\n\
    \    }\n    $divisor = 2;\n    while ($n > 1) {\n        while ($n % $divisor\
    \ == 0) {\n            $factors[] = $divisor;\n            $n /= $divisor;\n \
    \       }\n        $divisor++;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplmmjkjmg.php:20\n\
    Stack trace:\n#0 /tmp/tmplmmjkjmg.php(30): test()\n#1 {main}\n  thrown in /tmp/tmplmmjkjmg.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n  $result = [];\n  for ($i = 2; $i <= $n; $i++) {\n    while\
    \ ($n % $i == 0) {\n      $result[] = $i;\n      $n /= $i;\n    }\n  }\n  return\
    \ $result;\n}\necho factorize(70);\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: Array
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n$factors = [];\n$i = 2;\nwhile ($n > 1) {\n    if ($n % $i\
    \ == 0) {\n        $factors[] = $i;\n        $n = $n / $i;\n    } else {\n   \
    \     $i++;\n    }\n}\nreturn $factors;\n}\nprint_r(factorize(70));\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $result = [];\n    $i = 2;\n    while ($n > 1) {\n    \
    \    if ($n % $i == 0) {\n            $result[] = $i;\n            $n /= $i;\n\
    \        } else {\n            $i++;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t$factors = [];\n\t$divisor = 2;\n\t$factorsCount = 0;\n\t\
    \n\twhile ($n > 1) {\n\t\tif ($n % $divisor === 0) {\n\t\t\t$factorsCount++;\n\
    \t\t\t$n /= $divisor;\n\t\t} else {\n\t\t\t$factors[] = $divisor ** $factorsCount;\n\
    \t\t\t$factorsCount = 0;\n\t\t\t$divisor++;\n\t\t}\n\t}\n\t$factors[] = $divisor\
    \ ** $factorsCount;\n\treturn $factors;\n}\n\nprint_r(factorize(50));\nprint_r(factorize(70));\n\
    print_r(factorize(17));\nprint_r(factorize(15));\nprint_r(factorize(21));\nprint_r(factorize(18));\n\
    print_r(factorize(37));\nprint_r(factorize(18));\nprint_r(factorize(71));\nprint_r(factorize(23));\n\
    print_r(factorize(29));\nprint_r(factorize(27));\nprint_r(factorize(33));\nprint_r(factorize(45));\n\
    print_r(factorize(39));\nprint_r(factorize(31));\nprint_r(factorize(35));\nprint_r(factorize(22));\n\
    print_r(factorize(37));\nprint_r(factorize(38));\nprint_r(factorize(41));\nprint_r(factorize(36));\n\
    print_r(factorize(40));\nprint_r(factorize(19));\nprint_r(factorize(42));\nprint_r(factorize(47));\n\
    print_r(factorize(43));\nprint_r(factorize(26));\nprint_r(factorize(46));\nprint_r(factorize(49));\n\
    print_r(factorize(48));\nprint_r(factorize(24));\nprint_r(factorize(34));\nprint_r(factorize(32));\n\
    print_r(factorize(44));\nprint_r(factorize(30));\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n    [2] => 1\n    [3] => 25\n)\n\
    Array\n(\n    [0] => 2\n    [1] => 1\n    [2] => 1\n    [3] => 5\n    [4] => 1\n\
    \    [5] => 7\n)\nArray\n(\n    [0] => 1\n    [1] => 1\n    [2] => 1\n    [3]\
    \ => 1\n    [4] => 1\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n\
    \    [9] => 1\n    [10] => 1\n    [11] => 1\n    [12] => 1\n    [13] => 1\n  \
    \  [14] => 1\n    [15] => 17\n)\nArray\n(\n    [0] => 1\n    [1] => 3\n    [2]\
    \ => 1\n    [3] => 5\n)\nArray\n(\n    [0] => 1\n    [1] => 3\n    [2] => 1\n\
    \    [3] => 1\n    [4] => 1\n    [5] => 7\n)\nArray\n(\n    [0] => 2\n    [1]\
    \ => 9\n)\nArray\n(\n    [0] => 1\n    [1] => 1\n    [2] => 1\n    [3] => 1\n\
    \    [4] => 1\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n    [9]\
    \ => 1\n    [10] => 1\n    [11] => 1\n    [12] => 1\n    [13] => 1\n    [14] =>\
    \ 1\n    [15] => 1\n    [16] => 1\n    [17] => 1\n    [18] => 1\n    [19] => 1\n\
    \    [20] => 1\n    [21] => 1\n    [22] => 1\n    [23] => 1\n    [24] => 1\n \
    \   [25] => 1\n    [26] => 1\n    [27] => 1\n    [28] => 1\n    [29] => 1\n  \
    \  [30] => 1\n    [31] => 1\n    [32] => 1\n    [33] => 1\n    [34] => 1\n   \
    \ [35] => 37\n)\nArray\n(\n    [0] => 2\n    [1] => 9\n)\nArray\n(\n    [0] =>\
    \ 1\n    [1] => 1\n    [2] => 1\n    [3] => 1\n    [4] => 1\n    [5] => 1\n  \
    \  [6] => 1\n    [7] => 1\n    [8] => 1\n    [9] => 1\n    [10] => 1\n    [11]\
    \ => 1\n    [12] => 1\n    [13] => 1\n    [14] => 1\n    [15] => 1\n    [16] =>\
    \ 1\n    [17] => 1\n    [18] => 1\n    [19] => 1\n    [20] => 1\n    [21] => 1\n\
    \    [22] => 1\n    [23] => 1\n    [24] => 1\n    [25] => 1\n    [26] => 1\n \
    \   [27] => 1\n    [28] => 1\n    [29] => 1\n    [30] => 1\n    [31] => 1\n  \
    \  [32] => 1\n    [33] => 1\n    [34] => 1\n    [35] => 1\n    [36] => 1\n   \
    \ [37] => 1\n    [38] => 1\n    [39] => 1\n    [40] => 1\n    [41] => 1\n    [42]\
    \ => 1\n    [43] => 1\n    [44] => 1\n    [45] => 1\n    [46] => 1\n    [47] =>\
    \ 1\n    [48] => 1\n    [49] => 1\n    [50] => 1\n    [51] => 1\n    [52] => 1\n\
    \    [53] => 1\n    [54] => 1\n    [55] => 1\n    [56] => 1\n    [57] => 1\n \
    \   [58] => 1\n    [59] => 1\n    [60] => 1\n    [61] => 1\n    [62] => 1\n  \
    \  [63] => 1\n    [64] => 1\n    [65] => 1\n    [66] => 1\n    [67] "
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t$factors = [];\n\t$i = 2;\n\twhile ($n > 1) {\n\t\tif ($n\
    \ % $i == 0) {\n\t\t\t$factors[] = $i;\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t\
    $i++;\n\t\t}\n\t}\n\treturn $factors;\n}\n\nfunction candidate(...$args) {\n \
    \   return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t$factors = [];\n\twhile ($n % 2 == 0) {\n\t\t$factors[] =\
    \ 2;\n\t\t$n /= 2;\n\t}\n\t$n = (int)$n;\n\tfor ($i = 3; $i <= sqrt($n); $i +=\
    \ 2) {\n\t\twhile ($n % $i == 0) {\n\t\t\t$factors[] = $i;\n\t\t\t$n /= $i;\n\t\
    \t}\n\t}\n\tif ($n > 2) {\n\t\t$factors[] = $n;\n\t}\n\treturn $factors;\n}\n\n\
    echo '<pre>';\nvar_dump(factorize(8));\nvar_dump(factorize(25));\nvar_dump(factorize(70));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "<pre>array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(2)\n  [2]=>\n  int(2)\n\
    }\narray(2) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n}\narray(3) {\n  [0]=>\n\
    \  int(2)\n  [1]=>\n  int(5)\n  [2]=>\n  int(7)\n}\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n  $factors = [];\n  while ($n % 2 == 0) {\n    $factors[] =\
    \ 2;\n    $n /= 2;\n  }\n  while ($n % 3 == 0) {\n    $factors[] = 3;\n    $n\
    \ /= 3;\n  }\n  while ($n % 5 == 0) {\n    $factors[] = 5;\n    $n /= 5;\n  }\n\
    \  if ($n > 1) {\n    $factors[] = $n;\n  }\n  return $factors;\n}\nprint_r(factorize(8));\n\
    print_r(factorize(25));\nprint_r(factorize(70));\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\nArray\n(\n    [0]\
    \ => 5\n    [1] => 5\n)\nArray\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8kqxurac.php:43\n\
    Stack trace:\n#0 /tmp/tmp8kqxurac.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp8kqxurac.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    for ($divisor = 2; $n > 1; $divisor++)\
    \ {\n        for (; $n % $divisor == 0; $n /= $divisor) {\n            $factors[]\
    \ = $divisor;\n        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    while ($n > 1) {\n        $d = 2;\n\
    \        while ($n % $d != 0) {\n            $d++;\n        }\n        $factors[]\
    \ = $d;\n        $n /= $d;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    for ($i = 2; $i <= $n; $i++) {\n  \
    \      if ($n % $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n\
    \            $i--;\n        }\n    }\n    return $factors;\n}\necho print_r(factorize(70));\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\n1"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $primeFactors = array();\n    $d = 2;\n    while ($n >\
    \ 1) {\n        while ($n % $d == 0) {\n            $primeFactors[] = $d;\n  \
    \          $n /= $d;\n        }\n        $d += 1;\n    }\n    return $primeFactors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $result = [];\n    for ($i = 2; $i <= $n; $i++) {\n   \
    \     if (isPrime($i)) {\n            while ($n % $i == 0) {\n               \
    \ $result[] = $i;\n                $n /= $i;\n            }\n        }\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpatbq57iw.php:14\nStack trace:\n#0 /tmp/tmpatbq57iw.php(25): factorize(2)\n\
    #1 /tmp/tmpatbq57iw.php(29): candidate(2)\n#2 /tmp/tmpatbq57iw.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpatbq57iw.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $current = 2;\n    while ($n > 1) {\n\
    \        while ($n % $current == 0) {\n            $factors[] = $current;\n  \
    \          $n /= $current;\n        }\n        $current++;\n    }\n    return\
    \ $factors;\n}\n\necho '<pre>';\nvar_dump(factorize(8));\nvar_dump(factorize(25));\n\
    var_dump(factorize(70));\necho '</pre>';\nfunction candidate(...$args) {\n   \
    \ return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(2)\n  [2]=>\n  int(2)\n\
    }\narray(2) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n}\narray(3) {\n  [0]=>\n\
    \  int(2)\n  [1]=>\n  int(5)\n  [2]=>\n  int(7)\n}\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factor = 2;\n    $factors = [];\n    if ($n > 1) {\n \
    \       while ($n > 1) {\n            while ($n % $factor == 0) {\n          \
    \      $factors[] = $factor;\n                $n /= $factor;\n            }\n\
    \            $factor++;\n        }\n    }\n    return $factors;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    if ($n < 1) {\n        throw new InvalidArgumentException(\"\
    Input must be greater than 0!\");\n    }\n    $factors = [];\n    for ($i = 2;\
    \ $i <= $n; $i++) {\n        while ($n % $i == 0) {\n            $factors[] =\
    \ $i;\n            $n /= $i;\n        }\n    }\n    return $factors;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    for ($i = 2; $i <= $n; $i++) {\n  \
    \      while ($n % $i == 0) {\n            $factors[] = $i;\n            $n /=\
    \ $i;\n        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $prime_factors = [];\n    $i = 2;\n    while ($i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $prime_factors[] = $i;\n       \
    \     $n = $n / $i;\n        } else {\n            $i += 1;\n        }\n    }\n\
    \    return $prime_factors;\n}\necho json_encode(factorize(70));\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '[2,5,7]'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\tif($n <= 1) {\n\t\treturn false;\n\t}\n\tfor($i = 2; $i <=\
    \ $n; $i++) {\n\t\t$counter = 0;\n\t\twhile($n % $i == 0) {\n\t\t\t$counter++;\n\
    \t\t\t$n /= $i;\n\t\t}\n\t\tif($counter) {\n\t\t\t$factors[$i] = $counter;\n\t\
    \t}\n\t}\n\treturn $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv8y_pd38.php:33\n\
    Stack trace:\n#0 /tmp/tmpv8y_pd38.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpv8y_pd38.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n  $array_n=array();\n  $c=0;\n  for ($i=2; $i <= $n; $i++)\
    \ {\n    if ($n%$i==0) {\n      $c=$i;\n      $array_n[]=$c;\n      $n=$n/$c;\n\
    \      $i--;\n    }\n  }\n  return $array_n;\n}\nprint_r(factorize(70));\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    if ($n < 2) return [];\n    $factors = [];\n    $p = 2;\n\
    \    while ($n > 1) {\n        if ($n % $p === 0) {\n            $factors[] =\
    \ $p;\n            $n /= $p;\n        } else {\n            $p++;\n        }\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    for ($i = 2; $i <= $n; $i++) {\n  \
    \      while ($n % $i == 0) {\n            $factors[] = $i;\n            $n /=\
    \ $i;\n        }\n    }\n    return $factors;\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $arr = [];\n    for ($i = 2; $i <= $n; $i++) {\n      \
    \  if ($n % $i == 0) {\n            $arr[] = $i;\n            $n /= $i;\n    \
    \        $i = 1;\n        }\n    }\n    return $arr;\n}\necho implode(', ', factorize(70));\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: 2, 5, 7
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $sqrt = sqrt($n);\n    $res = [];\n    for ($i = 2; $i\
    \ <= $sqrt; $i++) {\n        if ($n % $i == 0) {\n            $res[] = $i;\n \
    \           $n /= $i;\n            $i--;\n        }\n    }\n    if ($n > 1) {\n\
    \        $res[] = $n;\n    }\n    return $res;\n}\necho implode(', ', factorize(8)).'<br>';\n\
    echo implode(', ', factorize(25)).'<br>';\necho implode(', ', factorize(70)).'<br>';\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: 2, 2, 2<br>5, 5<br>2, 5, 7<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t$list = [];\n\tfor ($i = 2; $i < $n; $i++) {\n\t\tif ($n\
    \ % $i == 0) {\n\t\t\tarray_push($list, $i);\n\t\t\t$n = $n / $i;\n\t\t\t$i =\
    \ 1;\n\t\t}\n\t}\n\treturn $list;\n}\n\nprint_r(factorize(8));\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp8wjjcg60.php:29\nStack trace:\n#0 /tmp/tmp8wjjcg60.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp8wjjcg60.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $prime_factors = [];\n    $primes = generatePrimes($n);\n\
    \    $i = 0;\n    while ($n > 1) {\n        if (($n % $primes[$i]) == 0) {\n \
    \           $prime_factors[] = $primes[$i];\n            $n = $n / $primes[$i];\n\
    \        } else {\n            $i++;\n        }\n    }\n    return $prime_factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function generatePrimes()\
    \ in /tmp/tmpeihfw76w.php:13\nStack trace:\n#0 /tmp/tmpeihfw76w.php(27): factorize(2)\n\
    #1 /tmp/tmpeihfw76w.php(31): candidate(2)\n#2 /tmp/tmpeihfw76w.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpeihfw76w.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $num = $n;\n    $factors = [];\n    for ($i = 2; $i <=\
    \ $num; $i++) {\n        while ($num % $i == 0) {\n            $factors[] = $i;\n\
    \            $num /= $i;\n        }\n    }\n    return $factors;\n}\necho factorize(8).\"\
    \\n\";\necho factorize(25).\"\\n\";\necho factorize(70).\"\\n\";\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\nArray\nArray\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $result = [];\n    $factors = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n \
    \   while ($n != 1) {\n        $factor = array_shift($factors);\n        while\
    \ ($n % $factor == 0) {\n            $result[] = $factor;\n            $n /= $factor;\n\
    \        }\n    }\n    return $result;\n}\necho implode(', ', factorize(8));\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: 2, 2, 2
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $result = [];\n    if ($n <= 1) {\n        return $result;\n\
    \    }\n    for ($i = 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n \
    \           $result[] = $i;\n            $n /= $i;\n        }\n    }\n    return\
    \ $result;\n}\nprint_r(factorize(8));\nprint_r(factorize(25));\nprint_r(factorize(70));\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\nArray\n(\n    [0]\
    \ => 5\n    [1] => 5\n)\nArray\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n\
    )\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    if ($n == 1) {\n        return [];\n    }\n\n    for ($i\
    \ = 2; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            $d = $i;\n\
    \            break;\n        }\n    }\n\n    $res = [];\n    while ($n > 1) {\n\
    \        if ($n % $d != 0) {\n            return [];\n        }\n        $res[]\
    \ = $d;\n        $n /= $d;\n    }\n\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4k4z67um.php:43\n\
    Stack trace:\n#0 /tmp/tmp4k4z67um.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp4k4z67um.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $divider = 2;\n    while ($n > 1) {\n\
    \        while ($n % $divider === 0) {\n            $factors[] = $divider;\n \
    \           $n /= $divider;\n        }\n        $divider++;\n    }\n    return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\tfor ($i = 2; $i <= $n; $i++) {\n\t\tif ($n % $i == 0) {\n\
    \t\t\t$factors[] = $i;\n\t\t\t$n = $n / $i;\n\t\t\t$i--;\n\t\t}\n\t}\n\treturn\
    \ $factors;\n}\necho \"<pre>\";\nprint_r(factorize(5));\necho \"</pre>\";\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 5\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    if ($n == 1) {\n        return [1];\n    }\n    $factors\
    \ = [];\n    for ($i = 2; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n   \
    \         $factors[] = $i;\n            $n /= $i;\n            $i = 1;\n     \
    \   }\n    }\n    return $factors;\n}\n\necho implode(\", \", factorize(70));\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: 2, 5, 7
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t$factors = [];\n\t// for ($divisor = 2; $divisor <= $n; $divisor++)\
    \ {\n\t// \twhile ($n % $divisor == 0) {\n\t// \t\t$factors[] = $divisor;\n\t\
    // \t\t$n /= $divisor;\n\t// \t}\n\t// }\n\tfor ($divisor = 2; $divisor <= $n;\
    \ $divisor++) {\n\t\tif ($n % $divisor == 0) {\n\t\t\t$factors[] = $divisor;\n\
    \t\t\t$n /= $divisor;\n\t\t\t$divisor = 1;\n\t\t}\n\t}\n\treturn $factors;\n}\n\
    echo \"<pre>\";\nprint_r(factorize(70));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $numbers = range(2, $n);\n    $i = 0;\n    $factors = [];\n\
    \    $primeNumbers = [];\n    $multiple = 0;\n    $primeFactor = 0;\n    do {\n\
    \        $multiple = $numbers[$i] * $numbers[$i + 1];\n        if ($multiple ==\
    \ $n) {\n            $primeFactor = $numbers[$i];\n            $i = count($numbers);\n\
    \        } else {\n            $primeFactor = 0;\n        }\n        $i++;\n \
    \   } while ($primeFactor == 0 && $i < count($numbers));\n    if ($primeFactor\
    \ > 0) {\n        array_push($primeNumbers, $primeFactor);\n        array_push($primeNumbers,\
    \ $primeFactor);\n    }\n    return $primeNumbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph8ax3caj.php:40\n\
    Stack trace:\n#0 /tmp/tmph8ax3caj.php(50): test()\n#1 {main}\n  thrown in /tmp/tmph8ax3caj.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $divisor = 2;\n    while ($n > 1) {\n\
    \        while ($n % $divisor == 0) {\n            $factors[] = $divisor;\n  \
    \          $n /= $divisor;\n        }\n        $divisor++;\n    }\n    return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $arr = [];\n    $sqrt = sqrt($n);\n    for ($i = 2; $i\
    \ <= $sqrt; $i++) {\n        while ($n % $i == 0) {\n            $arr[] = $i;\n\
    \            $n /= $i;\n        }\n    }\n    if ($n > 1) {\n        $arr[] =\
    \ $n;\n    }\n    return $arr;\n}\n\n$test = factorize(70);\necho \"<pre>\";\n\
    print_r($test);\necho \"</pre>\";\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t$arr = [];\n\t$divisor = 2;\n\tif ($n > 1) {\n\t\twhile ($n\
    \ > 1) {\n\t\t\tif ($n % $divisor == 0) {\n\t\t\t\t$arr[] = $divisor;\n\t\t\t\t\
    $n = $n / $divisor;\n\t\t\t} else {\n\t\t\t\t$divisor++;\n\t\t\t}\n\t\t}\n\t}\
    \ else {\n\t\t$arr[] = $n;\n\t}\n\treturn $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n  $factors = [];\n  $d = 2;\n  while ($n > 1) {\n    while\
    \ ($n % $d == 0) {\n      $factors[] = $d;\n      $n /= $d;\n    }\n    $d +=\
    \ 1;\n  }\n  return $factors;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $result = [];\n    $i = 2;\n    while ($n > 1) {\n    \
    \    while ($n % $i == 0) {\n            $result[] = $i;\n            $n /= $i;\n\
    \        }\n        $i++;\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $arr = [];\n    for ($i = 2; $i < $n; $i++) {\n       \
    \ if ($n % $i == 0) {\n            $arr[] = $i;\n            $n = $n / $i;\n \
    \           $i = 2;\n        }\n    }\n    return $arr;\n}\n\necho '<pre>';\n\
    print_r(factorize(70));\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 5\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpvlvjr9qa.php:31\nStack trace:\n#0 /tmp/tmpvlvjr9qa.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvlvjr9qa.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $prime_factors = [];\n    for ($i = 2; $i <= $n; $i++)\
    \ {\n        while ($n % $i == 0) {\n            $prime_factors[] = $i;\n    \
    \        $n /= $i;\n        }\n    }\n    return $prime_factors;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\tfor ($i = 2; $i <= $n; $i++) {\n\t\twhile ($n % $i == 0)\
    \ {\n\t\t\t$factors[] = $i;\n\t\t\t$n /= $i;\n\t\t}\n\t}\n\treturn $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t$result = [];\n\t$j = 2;\n\tfor($i = $n; $i >= 2;) {\n\t\t\
    if($i % $j == 0) {\n\t\t\t$result[] = $j;\n\t\t\t$i = $i / $j;\n\t\t} else {\n\
    \t\t\t$j++;\n\t\t}\n\t}\n\treturn $result;\n}\n\nvar_dump(factorize(8));\nvar_dump(factorize(25));\n\
    var_dump(factorize(70));\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(2)\n  [2]=>\n  int(2)\n}\n\
    array(2) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n}\narray(3) {\n  [0]=>\n  int(2)\n\
    \  [1]=>\n  int(5)\n  [2]=>\n  int(7)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t$result = [];\n\t$i = 2;\n\twhile ($n != 1) {\n\t\tif ($n\
    \ % $i == 0) {\n\t\t\t$result[] = $i;\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\
    \t\t}\n\t}\n\treturn $result;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t$factors = [];\n\t$check = 2;\n\twhile ($n > 1) {\n\t\tif\
    \ ($n % $check == 0) {\n\t\t\t$factors[] = $check;\n\t\t\t$n /= $check;\n\t\t\
    } else {\n\t\t\t$check++;\n\t\t}\n\t}\n\treturn $factors;\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t$factors = [];\n\t$i = 2;\n\twhile ($n != 1) {\n\t\twhile\
    \ ($n % $i == 0) {\n\t\t\t$factors[] = $i;\n\t\t\t$n /= $i;\n\t\t}\n\t\t$i++;\n\
    \t}\n\treturn $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n  $factors = [];\n  $divider = 2;\n  while ($n > 1) {\n   \
    \ if ($n % $divider === 0) {\n      $factors[] = $divider;\n      $n /= $divider;\n\
    \    } else {\n      $divider++;\n    }\n  }\n  return $factors;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t$res = [];\n\tfor ($i = 2; $i <= $n; $i++) {\n\t\twhile ($n\
    \ % $i == 0) {\n\t\t\t$res[] = $i;\n\t\t\t$n /= $i;\n\t\t}\n\t}\n\treturn $res;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    for ($i = 2; $i <= $n; $i++) {\n  \
    \      while ($n % $i == 0) {\n            $factors[] = $i;\n            $n /=\
    \ $i;\n        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n  if ($n == 1) {\n    return array();\n  }\n  for ($i = 2;\
    \ $i <= floor(sqrt($n)); $i++) {\n    if ($n % $i == 0) {\n      return array_merge(array($i),\
    \ factorize($n / $i));\n    }\n  }\n  return array($n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    if ($n <= 1) return [1];\n    $r = [];\n    for ($i = 2;\
    \ $i <= $n; $i++) {\n        while ($n % $i == 0) {\n            $r[] = $i;\n\
    \            $n /= $i;\n        }\n    }\n    return $r;\n}\n\nassert_options(ASSERT_BAIL,\
    \ true);\n\nassert(factorize(8) == [2, 2, 2]);\nassert(factorize(25) == [5, 5]);\n\
    assert(factorize(70) == [2, 5, 7]);\n\necho \"All tests passed.\";\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: All tests passed.
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $a = array();\n    for ($i = 2; $i <= $n; $i++) {\n   \
    \     if ($n % $i == 0) {\n            $a[] = $i;\n            $n /= $i;\n   \
    \         $i--;\n        }\n    }\n    return $a;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t$f = [];\n\t$s = $n;\n\tfor ($i = 2; $i <= $s; $i++) {\n\t\
    \tif ($s % $i == 0) {\n\t\t\tarray_push($f, $i);\n\t\t\t$s /= $i;\n\t\t\t$i--;\n\
    \t\t}\n\t}\n\treturn $f;\n}\nvar_dump(factorize(8));\nvar_dump(factorize(25));\n\
    var_dump(factorize(70));\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(2)\n  [2]=>\n  int(2)\n}\n\
    array(2) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n}\narray(3) {\n  [0]=>\n  int(2)\n\
    \  [1]=>\n  int(5)\n  [2]=>\n  int(7)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $primefactors = [];\n    for ($x = 2; $x <= $n; $x++) {\n\
    \        if ($n % $x == 0) {\n            array_push($primefactors, $x);\n   \
    \         $n = $n / $x;\n            $x = 1;\n        }\n    }\n    return $primefactors;\n\
    }\nprint_r(factorize(8));\nprint_r(factorize(25));\nprint_r(factorize(70));\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\nArray\n(\n    [0]\
    \ => 5\n    [1] => 5\n)\nArray\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n\
    )\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $arr = [];\n    for ($i = 2; $i <= $n; $i++) {\n      \
    \  $cnt = 0;\n        while ($n % $i == 0) {\n            $cnt++;\n          \
    \  $n /= $i;\n        }\n        if ($cnt) {\n            for ($j = 0; $j < $cnt;\
    \ $j++) {\n                $arr[] = $i;\n            }\n        }\n    }\n   \
    \ return $arr;\n}\n\n$n = 35;\nprint_r(factorize($n));\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => 7\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $arr = [];\n    for ($i = 2; $i <= $n; $i++) {\n      \
    \  if ($n % $i == 0) {\n            $arr[] = $i;\n            $n /= $i;\n    \
    \        $i--;\n        }\n    }\n    return $arr;\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $list = [];\n    $factor = 2;\n    while ($n > 1) {\n \
    \       while ($n % $factor == 0) {\n            $list[] = $factor;\n        \
    \    $n /= $factor;\n        }\n        $factor += 1;\n    }\n    return $list;\n\
    }\nprint_r(factorize(70));\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    for ($i = 2; $i <= $n; $i++) {\n  \
    \      if ($n % $i === 0) {\n            $factors[] = $i;\n            $n /= $i;\n\
    \            $i--;\n        }\n    }\n    return $factors;\n}\n\nprint_r(factorize(8));\n\
    print_r(factorize(25));\nprint_r(factorize(70));\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\nArray\n(\n    [0]\
    \ => 5\n    [1] => 5\n)\nArray\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n\
    )\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $result = [];\n    $i = 2;\n    while ($n > 1) {\n    \
    \    if ($n % $i == 0) {\n            $result[] = $i;\n            $n /= $i;\n\
    \        } else {\n            $i++;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $primfac = array();\n    for ($i = 2; $i <= $n; $i++) {\n\
    \        while (fmod($n, $i) == 0) {\n            $primfac[] = $i;\n         \
    \   $n = $n / $i;\n        }\n    }\n    return $primfac;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n\t$facts = array();\n\tif ($n == 1) {\n\t\treturn [1];\n\t\
    } elseif ($n <= 3) {\n\t\treturn [$n];\n\t}\n\tfor ($i = 2; $i <= $n; $i++) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$facts[] = $i;\n\t\t\t$n = $n / $i;\n\t\t\t$i =\
    \ 1;\n\t\t}\n\t}\n\treturn $facts;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    for ($i = 2; $i <= $n; $i++) {\n  \
    \      while ($n % $i == 0) {\n            $factors[] = $i;\n            $n /=\
    \ $i;\n        }\n    }\n    return $factors;\n}\n\necho \"Factorize 8:\\n\";\n\
    print_r(factorize(8));\necho \"Factorize 25:\\n\";\nprint_r(factorize(25));\n\
    echo \"Factorize 70:\\n\";\nprint_r(factorize(70));\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Factorize 8:\nArray\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\nFactorize\
    \ 25:\nArray\n(\n    [0] => 5\n    [1] => 5\n)\nFactorize 70:\nArray\n(\n    [0]\
    \ => 2\n    [1] => 5\n    [2] => 7\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $array = [];\n    for ($i = 2; $i <= $n; $i++) {\n    \
    \    while ($n % $i == 0) {\n            $array[] = $i;\n            $n /= $i;\n\
    \        }\n    }\n    return $array;\n}\nprint_r(factorize(70));\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $result = [];\n    for ($i = 2; $i <= $n; $i++) {\n   \
    \     if ($n % $i === 0) {\n            $result[] = $i;\n            $n /= $i;\n\
    \            $i = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    for ($i = 2; $i <= $n; $i++) {\n  \
    \      if ($n % $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n\
    \            $i = 1;\n        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    for ($divisor = 2; $n > 1; $divisor++)\
    \ {\n        for (; $n % $divisor == 0; $n /= $divisor) {\n            $factors[]\
    \ = $divisor;\n        }\n    }\n    return $factors;\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    for ($i = 2; $i <= $n; $i++) {\n  \
    \      while ($n % $i == 0) {\n            $factors[] = $i;\n            $n /=\
    \ $i;\n        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
