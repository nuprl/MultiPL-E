name: HumanEval_70_strange_sort_list
language: php
results:
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (empty($lst))\
    \ return $lst;\n    $min = min($lst);\n    $max = max($lst);\n    $result = [$min];\n\
    \    for ($i = 1; $i < count($lst); $i++) {\n        $result[] = $i % 2 == 0 ?\
    \ $min : $max;\n    }\n    return $result;\n}\n\nvar_dump(strange_sort_list([1,\
    \ 2, 3, 4])); // [1, 4, 2, 3]\nvar_dump(strange_sort_list([5, 5, 5, 5])); // [5,\
    \ 5, 5, 5]\nvar_dump(strange_sort_list([])); // []\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(4)\n  [2]=>\n  int(1)\n \
    \ [3]=>\n  int(4)\n}\narray(4) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n  [2]=>\n\
    \  int(5)\n  [3]=>\n  int(5)\n}\narray(0) {\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpxddoy6pk.php:28\nStack trace:\n#0 /tmp/tmpxddoy6pk.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxddoy6pk.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    $idx =\
    \ 0;\n    $m = max($lst);\n    $l = count($lst);\n    $res = [];\n    while ($idx\
    \ < $l) {\n        if ($idx % 2 == 0) {\n            $m = min($lst);\n       \
    \     $res[] = $m;\n            $key = array_search($m, $lst);\n            unset($lst[$key]);\n\
    \        } else {\n            $m = max($lst);\n            $res[] = $m;\n   \
    \         $key = array_search($m, $lst);\n            unset($lst[$key]);\n   \
    \     }\n        $idx++;\n    }\n    return $res;\n}\necho print_r(strange_sort_list([1,\
    \ 2, 3, 4]), true);\necho print_r(strange_sort_list([5, 5, 5, 5]), true);\necho\
    \ print_r(strange_sort_list([]), true);\nfunction candidate(...$args) {\n    return\
    \ strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\n\nWarning: max():\
    \ Array must contain at least one element in /tmp/tmpnil8x4u8.php on line 11\n\
    Array\n(\n)\n\nWarning: max(): Array must contain at least one element in /tmp/tmpnil8x4u8.php\
    \ on line 11\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  $odds =\
    \ $evens = [];\n  $r = [];\n  $i = 0;\n  sort($lst);\n  foreach ($lst as $k =>\
    \ $v) {\n    if ($k % 2) {\n      $odds[] = $v;\n    } else {\n      $evens[]\
    \ = $v;\n    }\n  }\n  rsort($odds);\n  rsort($evens);\n  while (count($evens)\
    \ && count($odds)) {\n    $r[] = $evens[$i];\n    $r[] = $odds[$i];\n    unset($evens[$i]);\n\
    \    unset($odds[$i]);\n    $i++;\n  }\n  if (count($evens)) {\n    foreach ($evens\
    \ as $v) {\n      $r[] = $v;\n    }\n  }\n  if (count($odds)) {\n    foreach ($odds\
    \ as $v) {\n      $r[] = $v;\n    }\n  }\n  return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv_od79x3.php:48\n\
    Stack trace:\n#0 /tmp/tmpv_od79x3.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpv_od79x3.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  if (count($lst)\
    \ == 0) return [];\n  $result = [];\n  sort($lst);\n  $i = 0;\n  $count = count($lst);\n\
    \  while ($i < $count) {\n    $result[] = $lst[$i];\n    if ($i == $count - 1)\
    \ break;\n    $result[] = $lst[$count - $i - 1];\n    $i++;\n  }\n  return $result;\n\
    }\n\n$f = strange_sort_list([1, 2, 3, 4]);\n$f = strange_sort_list([5, 5, 5, 5]);\n\
    $f = strange_sort_list([]);\n\nvar_dump($f);\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(0) {\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpms7qr8gf.php:34\n\
    Stack trace:\n#0 /tmp/tmpms7qr8gf.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpms7qr8gf.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    $pivot\
    \ = null;\n    $min_num = $lst[0];\n    $max_num = $lst[0];\n    for ($i = 0;\
    \ $i < count($lst); $i++) {\n        if ($lst[$i] < $min_num) {\n            $min_num\
    \ = $lst[$i];\n        }\n        if ($lst[$i] > $max_num) {\n            $max_num\
    \ = $lst[$i];\n        }\n    }\n    $pivot = ($min_num + $max_num) / 2;\n   \
    \ $lst_left = [];\n    $lst_right = [];\n    for ($i = 0; $i < count($lst); $i++)\
    \ {\n        if ($lst[$i] <= $pivot) {\n            $lst_left[] = $lst[$i];\n\
    \        } else {\n            $lst_right[] = $lst[$i];\n        }\n    }\n  \
    \  $result = [];\n    for ($i = 0; $i < count($lst_left); $i++) {\n        $result[]\
    \ = $lst_left[$i];\n        if ($i < count($lst_right)) {\n            $result[]\
    \ = $lst_right[$i];\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb1m1t9_6.php:46\n\
    Stack trace:\n#0 /tmp/tmpb1m1t9_6.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpb1m1t9_6.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  $ret = [];\n\
    \  $cnt = count($lst);\n  $min = min($lst);\n  $max = max($lst);\n  $index = 0;\n\
    \  $step = 1;\n  while($cnt > 0) {\n    if($cnt % 2 == 0) {\n      if($step ==\
    \ 1) {\n        $ret[] = $min;\n        $index = array_search($min, $lst);\n \
    \       unset($lst[$index]);\n        $cnt--;\n        $step = -1;\n      } else\
    \ {\n        $ret[] = $max;\n        $index = array_search($max, $lst);\n    \
    \    unset($lst[$index]);\n        $cnt--;\n        $step = 1;\n      }\n    }\
    \ else {\n      if($step == 1) {\n        $ret[] = $max;\n        $index = array_search($max,\
    \ $lst);\n        unset($lst[$index]);\n        $cnt--;\n        $step = -1;\n\
    \      } else {\n        $ret[] = $min;\n        $index = array_search($min, $lst);\n\
    \        unset($lst[$index]);\n        $cnt--;\n        $step = 1;\n      }\n\
    \    }\n  }\n  return $ret;\n}\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 1\n    [2] => 1\n    [3] => 1\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\n\nWarning: min():\
    \ Array must contain at least one element in /tmp/tmp2xcqk6s7.php on line 12\n\
    \nWarning: max(): Array must contain at least one element in /tmp/tmp2xcqk6s7.php\
    \ on line 13\nArray\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp2xcqk6s7.php:57\nStack trace:\n#0 /tmp/tmp2xcqk6s7.php(68): test()\n\
    #1 {main}\n  thrown in /tmp/tmp2xcqk6s7.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n\tif (count($lst)\
    \ == 0) {\n\t\treturn $lst;\n\t}\n\n\tasort($lst);\n\t$left = $lst;\n\t$right\
    \ = [];\n\t$r = [];\n\twhile (count($left) > 0 || count($right) > 0) {\n\t\t$min\
    \ = array_shift($left);\n\t\tif (is_null($min)) {\n\t\t\t$min = array_shift($right);\n\
    \t\t}\n\t\t$r[] = $min;\n\n\t\t$max = array_pop($left);\n\t\tif (is_null($max))\
    \ {\n\t\t\t$max = array_pop($right);\n\t\t}\n\t\t$r[] = $max;\n\t}\n\treturn $r;\n\
    }\n\nassert(1 == 1);\nassert(strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]);\n\
    assert(strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]);\nassert(strange_sort_list([])\
    \ == []);\nassert(strange_sort_list([7, 9, 1, 3, 2, 4, 2, 1, 2, 4, 5, 6, 8, 9,\
    \ 0, 8, 7, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1,\
    \ 2, 3\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxg7t_vpo.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  if (count($lst)\
    \ == 0) {\n    return $lst;\n  }\n\n  sort($lst);\n  $min = 0;\n  $max = count($lst)\
    \ - 1;\n  $out = array();\n  $i = 0;\n  while ($i < count($lst)) {\n    if (($i\
    \ % 2) == 0) {\n      $out[] = $lst[$min];\n      $min++;\n    } else {\n    \
    \  $out[] = $lst[$max];\n      $max--;\n    }\n    $i++;\n  }\n  return $out;\n\
    }\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));\nprint_r(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nprint_r(strange_sort_list([10, 9, 8, 7, 6, 5,\
    \ 4, 3, 2, 1]));\nprint_r(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n(\n)\nArray\n\
    (\n    [0] => 1\n    [1] => 10\n    [2] => 2\n    [3] => 9\n    [4] => 3\n   \
    \ [5] => 8\n    [6] => 4\n    [7] => 7\n    [8] => 5\n    [9] => 6\n)\nArray\n\
    (\n    [0] => 1\n    [1] => 10\n    [2] => 2\n    [3] => 9\n    [4] => 3\n   \
    \ [5] => 8\n    [6] => 4\n    [7] => 7\n    [8] => 5\n    [9] => 6\n)\nArray\n\
    (\n    [0] => 0\n    [1] => 10\n    [2] => 1\n    [3] => 9\n    [4] => 2\n   \
    \ [5] => 8\n    [6] => 3\n    [7] => 7\n    [8] => 4\n    [9] => 6\n    [10] =>\
    \ 5\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    $strange_lst\
    \ = [];\n    sort($lst);\n    while (count($lst) > 0) {\n        $strange_lst[]\
    \ = array_shift($lst);\n        if (count($lst) > 0) {\n            $strange_lst[]\
    \ = array_pop($lst);\n        }\n    }\n    return $strange_lst;\n}\n\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  if (empty($lst))\
    \ return [];\n  $length = count($lst);\n  sort($lst);\n  $arr = [];\n  while ($length\
    \ > 0) {\n    array_push($arr, array_shift($lst));\n    array_push($arr, array_pop($lst));\n\
    \    $length -= 2;\n  }\n  return $arr;\n}\nprint_r(strange_sort_list([]));\n\
    print_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5, 5, 5,\
    \ 5]));\nprint_r(strange_sort_list([2, 3, 1, 4]));\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\nArray\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3]\
    \ => 3\n)\nArray\n(\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n\
    )\nArray\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp12kbuoaj.php:31\nStack trace:\n\
    #0 /tmp/tmp12kbuoaj.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp12kbuoaj.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  $min_max\
    \ = [];\n  if(count($lst) == 0){\n    return [];\n  }\n  if(count($lst) == 1){\n\
    \    return $lst;\n  }\n  $min = min($lst);\n  $max = max($lst);\n  $min_max[]\
    \ = $min;\n  $min_max[] = $max;\n  $key_min = array_search($min, $lst);\n  $key_max\
    \ = array_search($max, $lst);\n  unset($lst[$key_min]);\n  unset($lst[$key_max]);\n\
    \  return array_merge($min_max, strange_sort_list($lst));\n}\nprint_r(strange_sort_list([1,\
    \ 2, 3, 4]));\nprint_r(strange_sort_list([]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n    [4]\
    \ => 5\n    [5] => 5\n    [6] => 5\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp_ztyexlr.php:39\nStack trace:\n#0 /tmp/tmp_ztyexlr.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_ztyexlr.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if(count($lst)==0)\
    \ return [];\n    $y=[];\n    $x=array_unique($lst);\n    sort($x);\n    $c=count($x);\n\
    \    for($i=0;$i<$c;$i++){\n        if($i%2==0){\n            $y[]=$x[$i];\n \
    \       }\n        else $y[]=$x[$c-$i-1];\n    }\n    $cnt=0;\n    for($i=0;$i<count($lst);$i++){\n\
    \        if($lst[$i]==$y[$cnt]) $cnt++;\n        else {\n            array_splice($y,$cnt,0,$lst[$i]);\n\
    \            $cnt++;\n        }\n    }\n    return $y;\n}\n\n/*\n\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Unterminated comment starting line 32 in /tmp/tmpmdn2z3g7.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  if (!$lst)\
    \ return [];\n  $length = count($lst);\n  $i = 0;\n  $min = $lst[0];\n  $min_i\
    \ = 0;\n  while ($i < $length) {\n    if ($lst[$i] < $min) {\n      $min = $lst[$i];\n\
    \      $min_i = $i;\n    }\n    $i++;\n  }\n  $i = $min_i + 1;\n  $res = [];\n\
    \  while ($i != $min_i) {\n    if ($i == $length) $i = 0;\n    $res[] = $lst[$i];\n\
    \    $i++;\n  }\n  return $res;\n}\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\n\
    echo \"\\n\";\nprint_r(strange_sort_list([5, 5, 5, 5]));\necho \"\\n\";\nprint_r(strange_sort_list([]));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmp0puqsr4d.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (count($lst)\
    \ < 1) {\n        return $lst;\n    }\n    $lst_2 = [];\n    $min = min($lst);\n\
    \    $key = array_search($min, $lst);\n    $lst_2[] = $min;\n    unset($lst[$key]);\n\
    \    if (count($lst) > 0) {\n        $lst = array_values($lst);\n        $max\
    \ = max($lst);\n        $key = array_search($max, $lst);\n        $lst_2[] = $max;\n\
    \        unset($lst[$key]);\n        if (count($lst) > 0) {\n            $lst\
    \ = array_values($lst);\n            return array_merge($lst_2, strange_sort_list($lst));\n\
    \        }\n    }\n    return $lst_2;\n}\nfunction candidate(...$args) {\n   \
    \ return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    sort($lst);\n\
    \    $res = [];\n    $i = 0;\n    while (count($lst) > 0) {\n        if ($i %\
    \ 2 == 0) {\n            $res[] = array_shift($lst);\n        } else {\n     \
    \       $res[] = array_pop($lst);\n        }\n        $i++;\n    }\n    return\
    \ $res;\n}\n\n$test_data = [\n    [1, 2, 3, 4],\n    [5, 5, 5, 5],\n    [],\n\
    \    [1],\n    [2, 7, 3, 1, 5],\n    [1, 2, 7, 3, 5],\n    [2, 3, 5, 1, 7],\n\
    \    [2, 7, 3, 5, 1],\n    [1, 2, 3, 4, 5],\n    [5, 4, 3, 2, 1],\n    [1, 5,\
    \ 2, 4, 3],\n    [5, 1, 4, 2, 3],\n    [1, 3, 5, 2, 4],\n    [3, 1, 2, 4, 5],\n\
    \    [3, 1, 2, 5, 4],\n    [3, 1, 4, 2, 5],\n    [3, 1, 4, 5, 2],\n    [3, 1,\
    \ 5, 2, 4],\n    [3, 1, 5, 4, 2],\n    [1, 3, 2, 4, 5],\n    [1, 3, 2, 5, 4],\n\
    \    [1, 3, 4, 2, 5],\n    [1, 3, 4, 5, 2],\n    [1, 3, 5, 2, 4],\n    [1, 3,\
    \ 5, 4, 2],\n    [1, 2, 3, 5, 4],\n    [1, 2, 3, 4, 5],\n    [1, 2, 5, 3, 4],\n\
    \    [1, 2, 5, 4, 3],\n    [1, 2, 4, 3, 5],\n    [1, 2, 4, 5, 3],\n    [1, 5,\
    \ 3, 2, 4],\n    [1, 5, 3, 4, 2],\n   \nfunction candidate(...$args) {\n    return\
    \ strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9mmi3am7.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  // Your\
    \ code here.\n}\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp57axq8on.php:17\n\
    Stack trace:\n#0 /tmp/tmp57axq8on.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp57axq8on.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n\t$size =\
    \ count($lst);\n\t$result = array();\n\tfor ($i = 0; $i < $size; $i++) {\n\t\t\
    if ($i % 2 == 0) {\n\t\t\t$result[] = min($lst);\n\t\t} else {\n\t\t\t$result[]\
    \ = max($lst);\n\t\t}\n\t\tunset($lst[array_search($result[$i], $lst)]);\n\t}\n\
    \treturn $result;\n}\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    $temp\
    \ = $lst;\n    $result = [];\n    $left = [];\n    $right = [];\n    foreach($temp\
    \ as $value) {\n        if($value < $temp[count($temp)-1]) {\n            $left[]\
    \ = $value;\n        } else {\n            $right[] = $value;\n        }\n   \
    \ }\n    $result[] = min($temp);\n    $result[] = max($temp);\n    $temp = array_unique(array_merge($left,\
    \ $right));\n    if(count($temp) > 0) {\n        $result = array_merge($result,\
    \ strange_sort_list($temp));\n    }\n    return $result;\n}\n\n$result = strange_sort_list([1,\
    \ 2, 3, 4]);\nvar_dump($result);\n\n$result = strange_sort_list([5, 5, 5, 5]);\n\
    var_dump($result);\n\n$result = strange_sort_list([]);\nvar_dump($result);\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 20480 bytes) in /tmp/tmpktc62wkz.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  rsort($lst);\n\
    \  $result = [];\n  while(count($lst)>0) {\n    $result[] = array_shift($lst);\n\
    \    $result[] = array_pop($lst);\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw0_zar83.php:24\n\
    Stack trace:\n#0 /tmp/tmpw0_zar83.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpw0_zar83.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  if (!$lst)\
    \ return [];\n  $max = max($lst);\n  $min = min($lst);\n  $mid = [];\n  $result\
    \ = [];\n  for ($i = 0; $i < count($lst); $i++) {\n    if ($lst[$i] == $max) continue;\n\
    \    if ($lst[$i] == $min) continue;\n    $mid[] = $lst[$i];\n  }\n  $midCount\
    \ = count($mid);\n  for ($i = 0; $i < $midCount; $i++) {\n    if ($i % 2 == 0)\
    \ {\n      $result[] = $mid[$i];\n    } else {\n      $result[] = $mid[$midCount\
    \ - $i - 1];\n    }\n  }\n  $result[] = $min;\n  $result[] = $max;\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqyhs_3lg.php:38\n\
    Stack trace:\n#0 /tmp/tmpqyhs_3lg.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpqyhs_3lg.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  // your\
    \ code here\n}\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuqkzk3b2.php:18\n\
    Stack trace:\n#0 /tmp/tmpuqkzk3b2.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpuqkzk3b2.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    $res =\
    \ array();\n    while(!empty($lst)) {\n        $min = min($lst);\n        $max\
    \ = max($lst);\n        $res[] = $min;\n        $lst = array_diff($lst, array($min));\n\
    \        if(!empty($lst)) {\n            $res[] = $max;\n            $lst = array_diff($lst,\
    \ array($max));\n        }\n    }\n    return $res;\n}\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbbtbromt.php:32\n\
    Stack trace:\n#0 /tmp/tmpbbtbromt.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbbtbromt.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  $length\
    \ = count($lst);\n  if($length <= 1) return $lst;\n  usort($lst, function($a,\
    \ $b) {\n    return $a > $b;\n  });\n  $odd = [];\n  $even = [];\n  for($i = 0;\
    \ $i < $length; $i++) {\n    if($i % 2 == 0) {\n      $even[] = $lst[$i];\n  \
    \  } else {\n      $odd[] = $lst[$i];\n    }\n  }\n  return array_merge($even,\
    \ $odd);\n}\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaxyo3t3s.php:32\n\
    Stack trace:\n#0 /tmp/tmpaxyo3t3s.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpaxyo3t3s.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (count($lst)\
    \ == 0) {\n        return [];\n    }\n    else if (count($lst) == 1) {\n     \
    \   return $lst;\n    }\n    else {\n        // ensure length of $lst is at least\
    \ 2\n        $max_idx = array_search(max($lst), $lst);\n        $min_idx = array_search(min($lst),\
    \ $lst);\n        // remove the min and max values and\n        // store them\
    \ into the new list\n        $new_lst = [$lst[$min_idx], $lst[$max_idx]];\n  \
    \      unset($lst[$min_idx]);\n        unset($lst[$max_idx]);\n        // take\
    \ the remainder of $lst, and recursively\n        // process it until it is of\
    \ length one or two\n        $remainder = strange_sort_list(array_values($lst));\n\
    \        // insert the remainder into the list that\n        // contains the min\
    \ and max\n        for ($i = 0; $i < count($remainder); $i++) {\n            $new_lst[]\
    \ = $remainder[$i];\n        }\n        return $new_lst;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz735v5t_.php:46\n\
    Stack trace:\n#0 /tmp/tmpz735v5t_.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpz735v5t_.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    $sorted\
    \ = [];\n    $min = min($lst);\n    $max = max($lst);\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($i % 2 == 0) {\n            $min++;\n            $sorted[]\
    \ = $min;\n        } else {\n            $max--;\n            $sorted[] = $max;\n\
    \        }\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ow9vsk_.php:30\n\
    Stack trace:\n#0 /tmp/tmp5ow9vsk_.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp5ow9vsk_.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (empty($lst))\
    \ {\n        return $lst;\n    }\n    else {\n        sort($lst);\n        $final\
    \ = array();\n        $max = count($lst) - 1;\n        for ($i = 0; $i <= $max;\
    \ $i++) {\n            if ($i % 2 == 0) {\n                $final[] = $lst[$i];\n\
    \            }\n            else {\n                $final[] = $lst[$max - $i];\n\
    \            }\n        }\n        return $final;\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpekp6rw7f.php:33\n\
    Stack trace:\n#0 /tmp/tmpekp6rw7f.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpekp6rw7f.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n\tsort($lst);\n\
    \t$res = [];\n\t$len = count($lst);\n\t$min_index = 0;\n\t$max_index = $len -\
    \ 1;\n\twhile($min_index < $max_index) {\n\t\t$res[] = $lst[$min_index];\n\t\t\
    $res[] = $lst[$max_index];\n\t\t$min_index++;\n\t\t$max_index--;\n\t}\n\tif($min_index\
    \ == $max_index) {\n\t\t$res[] = $lst[$min_index];\n\t}\n\treturn $res;\n}\n\n\
    print_r(strange_sort_list([1, 2, 3, 4]));\necho \"\\n\";\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\necho \"\\n\";\nprint_r(strange_sort_list([]));\necho \"\\n\";\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n\n\
    Array\n(\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\n\nArray\n\
    (\n)\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    $rv =\
    \ [];\n    $len = count($lst);\n    sort($lst);\n    for ($i = 0; $i < $len; $i\
    \ += 2) {\n        $rv[] = $lst[$i];\n    }\n    for ($i = $len - ($len % 2) -\
    \ 1; $i > 0; $i -= 2) {\n        $rv[] = $lst[$i];\n    }\n    return $rv;\n}\n\
    \nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ej418v2.php:27\n\
    Stack trace:\n#0 /tmp/tmp2ej418v2.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp2ej418v2.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  if (count($lst)\
    \ == 0) {\n    return [];\n  }\n  sort($lst);\n  $result = [];\n  $max = count($lst)\
    \ - 1;\n  $min = 0;\n  for ($i = 0; $i < count($lst); $i++) {\n    if ($i % 2\
    \ == 0) {\n      $result[] = $lst[$min];\n      $min++;\n    } else {\n      $result[]\
    \ = $lst[$max];\n      $max--;\n    }\n  }\n  return $result;\n}\nprint_r(strange_sort_list([1,\
    \ 2, 3, 4]));\necho \"\\n\";\nprint_r(strange_sort_list([]));\necho \"\\n\";\n\
    print_r(strange_sort_list([5, 5, 5, 5]));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n\n\
    Array\n(\n)\n\nArray\n(\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] =>\
    \ 5\n)\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    $lst =\
    \ array_unique($lst);\n    sort($lst);\n    if (count($lst) == 1 || count($lst)\
    \ == 0) {\n        return $lst;\n    } elseif (count($lst) == 2) {\n        return\
    \ [$lst[0], $lst[1]];\n    } else {\n        $len = count($lst);\n        for\
    \ ($i = 0; $i < $len; $i++) {\n            if ($i % 2 == 0) {\n              \
    \  $res[] = $lst[$i];\n            } else {\n                $res[] = $lst[$len\
    \ - 1 - $i];\n            }\n        }\n        return $res;\n    }\n}\n\nprint_r(strange_sort_list([1,\
    \ 2, 3, 4]));\nprint_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 3\n    [3] => 1\n)\nArray\n\
    (\n    [0] => 5\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpdj1w32ho.php:37\nStack trace:\n#0 /tmp/tmpdj1w32ho.php(48): test()\n\
    #1 {main}\n  thrown in /tmp/tmpdj1w32ho.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  if (count($lst)\
    \ == 0) {\n    return $lst;\n  }\n  if (count($lst) == 1) {\n    return $lst;\n\
    \  }\n  $temp = max($lst);\n  $max = $temp;\n  $max_index = array_search($temp,\
    \ $lst);\n  while (1) {\n    $temp = min($lst);\n    $min = $temp;\n    $min_index\
    \ = array_search($temp, $lst);\n    $lst[$min_index] = $max;\n    if (count($lst)\
    \ == 2) {\n      $lst[array_search($max, $lst)] = $min;\n      return $lst;\n\
    \    }\n    $temp = max($lst);\n    $max = $temp;\n    $max_index = array_search($temp,\
    \ $lst);\n    $lst[$max_index] = $min;\n    if (count($lst) == 2) {\n      $lst[array_search($min,\
    \ $lst)] = $max;\n      return $lst;\n    }\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  $length\
    \ = count($lst);\n  if ($length <= 0) {\n    return $lst;\n  }\n  $res = [];\n\
    \  for ($i = 0; $i < $length; $i++) {\n    if ($i % 2 == 0) {\n      $res[] =\
    \ array_shift($lst);\n    } else {\n      $res[] = array_pop($lst);\n    }\n \
    \ }\n  return $res;\n}\necho implode(\", \", strange_sort_list([1, 2, 3, 4]))\
    \ . \"\\n\";\necho implode(\", \", strange_sort_list([5, 5, 5, 5])) . \"\\n\"\
    ;\necho implode(\", \", strange_sort_list([])) . \"\\n\";\necho implode(\", \"\
    , strange_sort_list([9, 3, 5, 4, 1, 5, 4, 3, 9])) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1, 4, 2, 3\n5, 5, 5, 5\n\n9, 9, 3, 3, 5, 4, 4, 5, 1\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpz0qg3tjd.php:36\nStack trace:\n#0 /tmp/tmpz0qg3tjd.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpz0qg3tjd.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  if (count($lst)\
    \ <= 1) return $lst;\n  // sort the array\n  sort($lst);\n  // check if the list\
    \ is all identical elements\n  $first = reset($lst);\n  $last = end($lst);\n \
    \ if ($first == $last) return $lst;\n  // split the list into two seperate lists\n\
    \  $mid = round(count($lst) / 2);\n  $first_half = array_slice($lst, 0, $mid);\n\
    \  $second_half = array_slice($lst, $mid);\n  // reverse the second half of the\
    \ list\n  $second_half = array_reverse($second_half);\n  // combine the two lists\
    \ into one\n  return array_merge($first_half, $second_half);\n}\n\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxyxo1zmg.php:32\n\
    Stack trace:\n#0 /tmp/tmpxyxo1zmg.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpxyxo1zmg.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  if (empty($lst))\
    \ return $lst;\n  $res = [min($lst)];\n  $lst = array_diff($lst, [min($lst)]);\n\
    \  $min = true;\n  while (!empty($lst)) {\n    if ($min) {\n      $res[] = min($lst);\n\
    \      $lst = array_diff($lst, [min($lst)]);\n      $min = false;\n    } else\
    \ {\n      $res[] = max($lst);\n      $lst = array_diff($lst, [max($lst)]);\n\
    \      $min = true;\n    }\n  }\n  return $res;\n}\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0le0sfxh.php:32\n\
    Stack trace:\n#0 /tmp/tmp0le0sfxh.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp0le0sfxh.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    // Sort\
    \ list in normal order\n    sort($lst);\n    // Decrementing counter\n    $cnt\
    \ = count($lst) - 1;\n    // Iterate over half of array (rounded up)\n    for\
    \ ($i = ceil(count($lst) / 2) - 1; $i >= 0; $i--) {\n        // Move largest remaining\
    \ element to the end of the list\n        $lst[] = $lst[$cnt];\n        // Remove\
    \ largest remaining element from the beginning of the list\n        array_shift($lst);\n\
    \        // Decrement counter\n        $cnt--;\n    }\n    // Return list\n  \
    \  return $lst;\n}\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_2lopex4.php:31\n\
    Stack trace:\n#0 /tmp/tmp_2lopex4.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp_2lopex4.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    $i = 0;\n\
    \    $j = count($lst) - 1;\n    $result = [];\n    while ($i <= $j) {\n      \
    \  $result[] = $lst[$i];\n        if ($i != $j) $result[] = $lst[$j];\n      \
    \  $i++;\n        $j--;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcp25gc9c.php:30\n\
    Stack trace:\n#0 /tmp/tmpcp25gc9c.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpcp25gc9c.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (empty($lst))\
    \ {\n        return [];\n    }\n    sort($lst);\n    $res = [];\n    $count =\
    \ count($lst);\n    $mid = ceil($count / 2);\n    for ($i = 0; $i < $mid; $i++)\
    \ {\n        $res[] = $lst[$i];\n        if ($i + $mid < $count) {\n         \
    \   $res[] = $lst[$i + $mid];\n        }\n    }\n    return $res;\n}\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp_lo5wmj.php:30\n\
    Stack trace:\n#0 /tmp/tmpp_lo5wmj.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpp_lo5wmj.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    $min =\
    \ min($lst);\n    $max = max($lst);\n    $list = [];\n    while ($min <= $max)\
    \ {\n        $list[] = $min;\n        $list[] = $max;\n        $min++;\n     \
    \   $max--;\n    }\n    return $list;\n}\nfunction candidate(...$args) {\n   \
    \ return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptdtw2h0r.php:27\n\
    Stack trace:\n#0 /tmp/tmptdtw2h0r.php(37): test()\n#1 {main}\n  thrown in /tmp/tmptdtw2h0r.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  $list =\
    \ [];\n  sort($lst);\n  for ($i = 0; $i < ceil(count($lst) / 2); $i++) {\n   \
    \ $list[] = $lst[$i];\n    if ($i != (count($lst) - 1 - $i)) {\n      $list[]\
    \ = $lst[count($lst) - 1 - $i];\n    }\n  }\n  return $list;\n}\n\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  sort($lst);\n\
    \  $ret = [];\n  $i = 0;\n  $j = count($lst) - 1;\n  while ($i <= $j) {\n    if\
    \ ($i == $j) {\n      $ret[] = $lst[$i];\n      break;\n    }\n    $ret[] = $lst[$i];\n\
    \    $ret[] = $lst[$j];\n    $i++;\n    $j--;\n  }\n  return $ret;\n}\n\necho\
    \ '<pre>';\nprint_r(strange_sort_list([1, 2, 3, 4]));\necho '</pre>';\n\necho\
    \ '<pre>';\nprint_r(strange_sort_list([5, 5, 5, 5]));\necho '</pre>';\n\necho\
    \ '<pre>';\nprint_r(strange_sort_list([]));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n\
    )\n</pre><pre>Array\n(\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n\
    )\n</pre><pre>Array\n(\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  $rest =\
    \ $lst;\n  $order = [];\n  while (count($rest) > 0) {\n    $min = min($rest);\n\
    \    $max = max($rest);\n    $order[] = $min;\n    $rest = array_diff($rest, [$min]);\n\
    \    if (count($rest) > 0) {\n      $order[] = $max;\n      $rest = array_diff($rest,\
    \ [$max]);\n    }\n  }\n  return $order;\n}\n\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuvm8jwdt.php:34\n\
    Stack trace:\n#0 /tmp/tmpuvm8jwdt.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpuvm8jwdt.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    $result\
    \ = [];\n    $count = count($lst);\n    if ($count == 0) {\n        return $result;\n\
    \    }\n    sort($lst);\n    $counter = 0;\n    $min = 0;\n    $max = $count -\
    \ 1;\n    for ($i = 0; $i < $count; $i++) {\n        if ($counter % 2 == 0) {\n\
    \            $result[] = $lst[$min];\n            $min++;\n        } else {\n\
    \            $result[] = $lst[$max];\n            $max--;\n        }\n       \
    \ $counter++;\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n\t$result\
    \ = [];\n\t$max = count($lst) - 1;\n\t$i = 0;\n\t$start = $min = 0;\n\t$end =\
    \ $max;\n\t$cycle = 1;\n\tfor ($i = 0; $i <= $max; $i++) {\n\t\tif ($cycle % 2\
    \ == 1) {\n\t\t\t$result[$i] = $lst[$min];\n\t\t\t$min++;\n\t\t} else {\n\t\t\t\
    $result[$i] = $lst[$end];\n\t\t\t$end--;\n\t\t}\n\t\tif ($min == $end) {\n\t\t\
    \t$cycle++;\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo1q7c842.php:36\n\
    Stack trace:\n#0 /tmp/tmpo1q7c842.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpo1q7c842.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  $sorted_list\
    \ = [];\n  sort($lst);\n  $n = count($lst);\n  for ($i = 0; $i < $n; $i++) {\n\
    \    if ($i % 2 === 0) {\n      $sorted_list[] = array_shift($lst);\n    } else\
    \ {\n      $sorted_list[] = array_pop($lst);\n    }\n  }\n  return $sorted_list;\n\
    }\n\necho var_dump(strange_sort_list([1, 2, 3, 4])) . PHP_EOL; // [1, 4, 2, 3]\n\
    echo var_dump(strange_sort_list([5, 5, 5, 5])) . PHP_EOL; // [5, 5, 5, 5]\necho\
    \ var_dump(strange_sort_list([])) . PHP_EOL; // []\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(4)\n  [2]=>\n  int(2)\n \
    \ [3]=>\n  int(3)\n}\n\narray(4) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n  [2]=>\n\
    \  int(5)\n  [3]=>\n  int(5)\n}\n\narray(0) {\n}\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (count($lst)\
    \ == 0) {\n        return $lst;\n    }\n    $result = array_slice($lst, 0, 1);\n\
    \    $remaining = array_slice($lst, 1);\n    while (count($remaining) > 0) {\n\
    \        if (count($remaining) % 2 == 0) {\n            $result[] = min($remaining);\n\
    \            $remaining = array_diff($remaining, [min($remaining)]);\n       \
    \ } else {\n            $result[] = max($remaining);\n            $remaining =\
    \ array_diff($remaining, [max($remaining)]);\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6vv1b0yn.php:32\n\
    Stack trace:\n#0 /tmp/tmp6vv1b0yn.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp6vv1b0yn.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  $max = count($lst);\n\
    \  $result = [];\n  $direction = true;\n  for ($i = 0; $i < $max; $i++) {\n  \
    \  if ($direction) {\n      $pos = array_search(min($lst), $lst);\n    } else\
    \ {\n      $pos = array_search(max($lst), $lst);\n    }\n    $result[] = $lst[$pos];\n\
    \    unset($lst[$pos]);\n    $lst = array_values($lst);\n    $direction = !$direction;\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (empty($lst))\
    \ return $lst;\n    $lst = array_unique($lst);\n    $sorted = [];\n    while (count($lst)\
    \ > 0) {\n        $min = min($lst);\n        $max = max($lst);\n        $sorted[]\
    \ = $min;\n        $sorted[] = $max;\n        unset($lst[array_search($min, $lst)]);\n\
    \        unset($lst[array_search($max, $lst)]);\n    }\n    return $sorted;\n\
    }\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw9gy6its.php:29\n\
    Stack trace:\n#0 /tmp/tmpw9gy6its.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpw9gy6its.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  $result\
    \ = [];\n  while (count($lst) > 0) {\n    $result[] = min($lst);\n    $lst = array_diff($lst,\
    \ [min($lst)]);\n    if (count($lst) > 0) {\n      $result[] = max($lst);\n  \
    \    $lst = array_diff($lst, [max($lst)]);\n    }\n  }\n  return $result;\n}\n\
    print_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5, 5, 5,\
    \ 5]));\nprint_r(strange_sort_list([]));\nprint_r(strange_sort_list([1, 1, 1,\
    \ 1]));\nprint_r(strange_sort_list([1, 2, 1, 2]));\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n)\nArray\n(\n)\nArray\n(\n    [0] => 1\n)\nArray\n(\n    [0]\
    \ => 1\n    [1] => 2\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp42kazwk7.php:35\n\
    Stack trace:\n#0 /tmp/tmp42kazwk7.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp42kazwk7.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  if (empty($lst))\
    \ return [];\n  $cnt = count($lst);\n  $res = [];\n  $i = 0;\n  while ($i < $cnt)\
    \ {\n    $res[] = min($lst);\n    $lst = array_diff($lst, [min($lst)]);\n    $res[]\
    \ = max($lst);\n    $lst = array_diff($lst, [max($lst)]);\n    $i += 2;\n  }\n\
    \  return $res;\n}\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: max(): Array must contain at least one element in /tmp/tmpby2szr1n.php\
    \ on line 17\n\nWarning: max(): Array must contain at least one element in /tmp/tmpby2szr1n.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpby2szr1n.php:29\n\
    Stack trace:\n#0 /tmp/tmpby2szr1n.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpby2szr1n.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n\tif (count($lst)\
    \ == 0) {\n\t\treturn $lst;\n\t}\n\tsort($lst);\n\t$count = count($lst);\n\t$start\
    \ = 0;\n\t$end = $count - 1;\n\t$rst = [];\n\twhile ($start <= $end) {\n\t\t$rst[]\
    \ = $lst[$start];\n\t\t$start++;\n\t\tif ($start <= $end) {\n\t\t\t$rst[] = $lst[$end];\n\
    \t\t\t$end--;\n\t\t}\n\t}\n\treturn $rst;\n}\n\nprint_r(strange_sort_list([1,\
    \ 2, 3, 4]));\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  rsort($lst);\n\
    \  $ret = [];\n  $cnt = count($lst);\n  while ($cnt > 0) {\n    $ret[] = array_shift($lst);\n\
    \    if ($cnt != 1) {\n      $ret[] = array_pop($lst);\n    }\n    $cnt -= 2;\n\
    \  }\n  return $ret;\n}\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 4\n    [1] => 1\n    [2] => 3\n    [3] => 2\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n(\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpk1qzn11b.php:30\nStack\
    \ trace:\n#0 /tmp/tmpk1qzn11b.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpk1qzn11b.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    $n = count($lst);\n\
    \    $ans = [];\n    $i = 0;\n    while ($i < $n) {\n        $minIdx = 0;\n  \
    \      $maxIdx = 0;\n        for ($j = 1; $j < $n; $j++) {\n            if ($lst[$j]\
    \ < $lst[$minIdx]) {\n                $minIdx = $j;\n            }\n         \
    \   if ($lst[$j] > $lst[$maxIdx]) {\n                $maxIdx = $j;\n         \
    \   }\n        }\n        if ($i % 2 == 0) {\n            $ans[] = $lst[$minIdx];\n\
    \            $lst[$minIdx] = 99999999999999999;\n        } else {\n          \
    \  $ans[] = $lst[$maxIdx];\n            $lst[$maxIdx] = -99999999999999999;\n\
    \        }\n        $i++;\n    }\n    return $ans;\n}\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmwgnxckf.php:40\n\
    Stack trace:\n#0 /tmp/tmpmwgnxckf.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpmwgnxckf.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (count($lst)\
    \ === 0) {\n        return [];\n    }\n\n    sort($lst);\n    $result = [];\n\
    \    $i = 0;\n    $j = count($lst) - 1;\n    while ($i <= $j) {\n        if ($i\
    \ == $j) {\n            $result[] = $lst[$i];\n            break;\n        }\n\
    \        $result[] = $lst[$i];\n        $result[] = $lst[$j];\n        $i++;\n\
    \        $j--;\n    }\n    return $result;\n}\n\nvar_dump(strange_sort_list([1,\
    \ 2, 3, 4])); // [1, 4, 2, 3]\nvar_dump(strange_sort_list([5, 5, 5, 5])); // [5,\
    \ 5, 5, 5]\nvar_dump(strange_sort_list([])); // []\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(4)\n  [2]=>\n  int(2)\n \
    \ [3]=>\n  int(3)\n}\narray(4) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n  [2]=>\n\
    \  int(5)\n  [3]=>\n  int(5)\n}\narray(0) {\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n\tif (empty($lst))\
    \ return $lst;\n\t\n\t$len = count($lst);\n\t$left = array_slice($lst, 0, $len\
    \ / 2);\n\t$right = array_slice($lst, $len / 2);\n\t\n\t$left_result = strange_sort_list($left);\n\
    \t$right_result = strange_sort_list($right);\n\t\n\t$merged = [];\n\t\n\twhile\
    \ (count($left_result) && count($right_result)) {\n\t\tif (min($left_result) <\
    \ min($right_result)) {\n\t\t\t$merged[] = array_shift($left_result);\n\t\t} else\
    \ {\n\t\t\t$merged[] = array_shift($right_result);\n\t\t}\n\t}\n\t\n\treturn array_merge($merged,\
    \ $left_result, $right_result);\n}\nfunction candidate(...$args) {\n    return\
    \ strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpd67185s0.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  if (empty($lst))\
    \ return $lst;\n  $c = count($lst);\n  $i = 0;\n  $arr = [];\n  while ($i < $c)\
    \ {\n    if (min($lst) !== max($lst)) {\n      $arr[] = min($lst);\n      $arr[]\
    \ = max($lst);\n    } else {\n      $arr[] = $lst[0];\n    }\n    $i += 2;\n \
    \ }\n  return $arr;\n}\nprint_r(strange_sort_list([1, 2, 3, 4])); // [1, 4, 2,\
    \ 3]\nprint_r(strange_sort_list([5, 5, 5, 5])); // [5, 5, 5, 5]\nprint_r(strange_sort_list([]));\
    \ // []\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 1\n    [3] => 4\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmps2n5hjfo.php:33\nStack trace:\n#0 /tmp/tmps2n5hjfo.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmps2n5hjfo.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (!$lst)\
    \ {\n        return [];\n    }\n\n    $newList = [];\n    $listSize = count($lst);\n\
    \    $maxValueIndex = array_search(max($lst), $lst);\n    $minValueIndex = array_search(min($lst),\
    \ $lst);\n\n    $minAndMaxIndexes = [$minValueIndex, $maxValueIndex];\n    sort($minAndMaxIndexes);\n\
    \n    $maxValue = $lst[$maxValueIndex];\n    $minValue = $lst[$minValueIndex];\n\
    \n    $newList[] = $minValue;\n    $newList[] = $maxValue;\n\n    $i = 1;\n  \
    \  for ($j = $minAndMaxIndexes[1] + 1; $j < $listSize; $j++) {\n        $newList[]\
    \ = $lst[$j];\n        $i++;\n    }\n\n    for ($j = $minAndMaxIndexes[0] + 1;\
    \ $j < $minAndMaxIndexes[1]; $j++) {\n        $newList[] = $lst[$j];\n       \
    \ $i++;\n    }\n\n    return $newList;\n}\n\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdf2sairr.php:48\n\
    Stack trace:\n#0 /tmp/tmpdf2sairr.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpdf2sairr.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n\t$lst = array_unique($lst);\n\
    \t$len = count($lst);\n\t$sorted_list = [];\n\tif ($len < 1) {\n\t\treturn $sorted_list;\n\
    \t}\n\twhile ($len > 0) {\n\t\tsort($lst);\n\t\t$sorted_list[] = array_shift($lst);\n\
    \t\t$len = count($lst);\n\t\tif ($len < 1) {\n\t\t\treturn $sorted_list;\n\t\t\
    }\n\t\trsort($lst);\n\t\t$sorted_list[] = array_shift($lst);\n\t\t$len = count($lst);\n\
    \t}\n\treturn $sorted_list;\n}\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp72h2zkez.php:38\n\
    Stack trace:\n#0 /tmp/tmp72h2zkez.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp72h2zkez.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    $even\
    \ = $odd = [];\n    if(!empty($lst)){\n        sort($lst);\n        foreach ($lst\
    \ as $key => $value) {\n            if($key % 2 == 0){\n                $even[]\
    \ = $value;\n            } else {\n                $odd[] = $value;\n        \
    \    }\n        }\n        return array_merge($even, array_reverse($odd));\n \
    \   } else {\n        return [];\n    }\n}\necho '<pre>';\nprint_r(strange_sort_list([1,\
    \ 2, 3, 4]));\nprint_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));\n\
    echo '</pre>';\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 4\n    [3] => 2\n\
    )\nArray\n(\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n\
    (\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprhbssebh.php:36\n\
    Stack trace:\n#0 /tmp/tmprhbssebh.php(47): test()\n#1 {main}\n  thrown in /tmp/tmprhbssebh.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (count($lst)\
    \ % 2 == 0) {\n        $lst = array_merge(array_slice($lst, 0, count($lst) / 2),\
    \ array_reverse(array_slice($lst, count($lst) / 2)));\n    } else {\n        $lst\
    \ = array_merge(array_slice($lst, 0, count($lst) / 2 + 1), array_reverse(array_slice($lst,\
    \ count($lst) / 2 + 1)));\n    }\n    return $lst;\n}\n\necho \"\\n\";\nvar_dump(strange_sort_list([1,\
    \ 2, 3, 4]));\nvar_dump(strange_sort_list([1, 2, 3, 4, 5]));\nvar_dump(strange_sort_list([5,\
    \ 5, 5, 5]));\nvar_dump(strange_sort_list([]));\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\narray(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(4)\n\
    \  [3]=>\n  int(3)\n}\narray(5) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n\
    \  int(3)\n  [3]=>\n  int(5)\n  [4]=>\n  int(4)\n}\narray(4) {\n  [0]=>\n  int(5)\n\
    \  [1]=>\n  int(5)\n  [2]=>\n  int(5)\n  [3]=>\n  int(5)\n}\narray(0) {\n}\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmptjl3zq2g.php:28\nStack\
    \ trace:\n#0 /tmp/tmptjl3zq2g.php(39): test()\n#1 {main}\n  thrown in /tmp/tmptjl3zq2g.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  if (!$lst)\
    \ {\n    return [];\n  }\n  sort($lst);\n  $result = [];\n  $index = 0;\n  while\
    \ (count($lst) > 0) {\n    $index++;\n    $result[] = array_shift($lst);\n   \
    \ if ($index % 2 === 0) {\n      $result[] = array_pop($lst);\n    }\n  }\n  return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5jep68vz.php:30\n\
    Stack trace:\n#0 /tmp/tmp5jep68vz.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp5jep68vz.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n\tif (!count($lst))\
    \ return [];\n\t$res = [];\n\t$min = min($lst);\n\t$idx = array_search($min, $lst);\n\
    \tunset($lst[$idx]);\n\t$res[] = $min;\n\twhile (count($lst)) {\n\t\t$max = max($lst);\n\
    \t\t$idx = array_search($max, $lst);\n\t\tunset($lst[$idx]);\n\t\t$res[] = $max;\n\
    \t\tif (!count($lst)) break;\n\t\t$min = min($lst);\n\t\t$idx = array_search($min,\
    \ $lst);\n\t\tunset($lst[$idx]);\n\t\t$res[] = $min;\n\t}\n\treturn $res;\n}\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    sort($lst);\n\
    \    $result = array();\n    $lst_len = count($lst);\n    $lst_len_half = floor($lst_len\
    \ / 2);\n    for ($i = 0; $i < $lst_len_half; $i++) {\n        $result[] = $lst[$i];\n\
    \        $result[] = $lst[$lst_len - 1 - $i];\n    }\n    if ($lst_len % 2 !=\
    \ 0) {\n        $result[] = $lst[$lst_len_half];\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    sort($lst);\n\
    \    $res = array();\n    $i = 0;\n    $k = 0;\n    $m = 0;\n    $n = count($lst)\
    \ - 1;\n    while ($i < count($lst)) {\n        if ($i % 2 === 0) {\n        \
    \    $res[$i] = $lst[$k];\n            $k++;\n        } else {\n            $res[$i]\
    \ = $lst[$n];\n            $n--;\n        }\n        $i++;\n    }\n    return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (!$lst)\
    \ {\n        return [];\n    }\n\n    $copy = $lst;\n    sort($copy);\n    $result\
    \ = [];\n    $i = 0;\n    $j = count($copy) - 1;\n    while ($i <= $j) {\n   \
    \     $result[] = $copy[$i];\n        $i++;\n        if ($i <= $j) {\n       \
    \     $result[] = $copy[$j];\n            $j--;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    $arr_odd\
    \ = [];\n    $arr_even = [];\n    sort($lst);\n    $new_arr = [];\n    foreach\
    \ ($lst as $key => $val) {\n        if ($key % 2 == 0) {\n            $arr_even[]\
    \ = $val;\n        } else {\n            $arr_odd[] = $val;\n        }\n    }\n\
    \    for ($i = 0; $i < count($arr_even); $i++) {\n        $new_arr[] = $arr_even[$i];\n\
    \        $new_arr[] = $arr_odd[$i];\n    }\n    return $new_arr;\n}\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnz21tnuq.php:32\n\
    Stack trace:\n#0 /tmp/tmpnz21tnuq.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpnz21tnuq.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n\tif (count($lst)\
    \ < 2) return $lst;\n\tsort($lst);\n\t$len = count($lst);\n\t$mid = (int) ($len\
    \ / 2);\n\t$left = array_slice($lst, 0, $mid);\n\t$right = array_slice($lst, $mid);\n\
    \t$left = array_reverse($left);\n\t$res = [];\n\twhile (count($left) > 0 || count($right)\
    \ > 0) {\n\t\tif (count($left) > 0) {\n\t\t\t$res[] = array_pop($left);\n\t\t\
    }\n\t\tif (count($right) > 0) {\n\t\t\t$res[] = array_pop($right);\n\t\t}\n\t\
    }\n\treturn $res;\n}\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (count($lst)\
    \ <= 1) return $lst;\n    $result = [];\n    sort($lst);\n    $min = $lst[0];\n\
    \    $max = $lst[count($lst) - 1];\n    $result[] = $min;\n    unset($lst[0]);\n\
    \    $flag = false;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($flag)\
    \ {\n            $result[] = min($lst);\n            unset($lst[array_search(min($lst),\
    \ $lst)]);\n            $flag = false;\n        } else {\n            $result[]\
    \ = max($lst);\n            unset($lst[array_search(max($lst), $lst)]);\n    \
    \        $flag = true;\n        }\n    }\n    return $result;\n}\necho '<pre>';\n\
    print_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([1, 2, 3,\
    \ 4, 5]));\nprint_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n)\nArray\n(\n\
    \    [0] => 1\n    [1] => 5\n    [2] => 2\n)\nArray\n(\n    [0] => 5\n    [1]\
    \ => 5\n    [2] => 5\n)\nArray\n(\n)\n</pre>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpea_kjm_p.php:42\nStack trace:\n#0 /tmp/tmpea_kjm_p.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpea_kjm_p.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (!$lst)\
    \ return [];\n    $n = count($lst);\n    $even = $odd = [];\n    $max = $lst[0];\n\
    \    $max_index = 0;\n    for ($i = 1; $i < $n; $i++) {\n        if ($lst[$i]\
    \ > $max) {\n            $max = $lst[$i];\n            $max_index = $i;\n    \
    \    }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        if ($i % 2 == 0) {\n\
    \            $even[] = $lst[$i];\n        } else {\n            $odd[] = $lst[$i];\n\
    \        }\n    }\n    if ($max_index % 2 == 0) {\n        $tmp = $even[$max_index];\n\
    \        $even[$max_index] = $even[$max_index+1];\n        $even[$max_index+1]\
    \ = $tmp;\n    } else {\n        $tmp = $odd[$max_index];\n        $odd[$max_index]\
    \ = $odd[$max_index+1];\n        $odd[$max_index+1] = $tmp;\n    }\n    return\
    \ array_merge($even, $odd);\n}\n\necho \"Test 1: \" . (strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3] ? \"pass\" : \"fail\") . \"\\n\";\necho \"Test 2: \"\
    \ . (strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5] ? \"pass\" : \"fail\") .\
    \ \"\\n\";\necho \"Test 3: \" . (strange_sort_list([]) == [] ? \"pass\" : \"fail\"\
    ) . \"\\n\";\necho \"Test 4: \" . (strange_sort_list([1, 3, 2, 4]) == [1, 4, 3,\
    \ 2] ? \"pass\" : \"fail\") . \"\\n\";\necho \"Test 5: \" . (strange_sort_list([2,\
    \ 3, 1, 4]) == [1, 4,\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4i1hywyt.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  $res = [];\n\
    \  $index = 0;\n  sort($lst);\n  for ($i = 0; $i < ceil(count($lst) / 2); $i++)\
    \ {\n    if ($i + 1 == count($lst) - $i) {\n      $res[$index] = $lst[$i];\n \
    \     $index++;\n    } else {\n      $res[$index] = $lst[$i];\n      $index++;\n\
    \      $res[$index] = $lst[count($lst) - $i - 1];\n      $index++;\n    }\n  }\n\
    \  return $res;\n}\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (count($lst)\
    \ < 1) {\n        return $lst;\n    }\n    $min = min($lst);\n    $max = max($lst);\n\
    \    $sublst = array_diff($lst, [$min, $max]);\n    $sublst = strange_sort_list($sublst);\n\
    \    $lst = array_merge([$min], $sublst, [$max]);\n    return $lst;\n}\n\n$lst\
    \ = strange_sort_list([1, 2, 3, 4]);\necho implode(\", \", $lst), \"\\n\";\n$lst\
    \ = strange_sort_list([5, 5, 5, 5]);\necho implode(\", \", $lst), \"\\n\";\n$lst\
    \ = strange_sort_list([]);\necho implode(\", \", $lst), \"\\n\";\n$lst = strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]);\necho implode(\", \", $lst), \"\\n\";\n$lst =\
    \ strange_sort_list([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]);\necho implode(\"\
    , \", $lst), \"\\n\";\n$lst = strange_sort_list([-5, -4, -3, -2, -1, 0, 1, 2,\
    \ 3, 4, 5]);\necho implode(\", \", $lst), \"\\n\";\n$lst = strange_sort_list([-5,\
    \ -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\necho implode(\", \", $lst),\
    \ \"\\n\";\n$lst = strange_sort_list([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]);\necho implode(\", \"\
    , $lst), \"\\n\";\n$lst = strange_sort_\nfunction candidate(...$args) {\n    return\
    \ strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsp5xjtwz.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  $result\
    \ = [];\n  $max = max($lst);\n  $min = min($lst);\n  $temp = 0;\n  $i = 0;\n \
    \ $j = count($lst) - 1;\n  if ($lst == null) {\n    return [];\n  }\n  if ($lst\
    \ == 0) {\n    return $lst;\n  }\n  do {\n    if ($i < $j) {\n      $result[$i]\
    \ = $min;\n      $result[$j] = $max;\n      $i++;\n      $j--;\n    } else if\
    \ ($i == $j) {\n      $result[$i] = $min;\n    }\n    $lst = array_diff($lst,\
    \ [$min, $max]);\n    $min = min($lst);\n    $max = max($lst);\n  } while (!empty($lst));\n\
    \  return $result;\n}\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: min(): Array must contain at least one element in /tmp/tmp946dqxb4.php\
    \ on line 32\n\nWarning: max(): Array must contain at least one element in /tmp/tmp946dqxb4.php\
    \ on line 33\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp946dqxb4.php:42\n\
    Stack trace:\n#0 /tmp/tmp946dqxb4.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp946dqxb4.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    sort($lst);\n\
    \    $res = [];\n    $c = count($lst);\n    for ($i = 0; $i < $c; $i++) {\n  \
    \      if ($i % 2 === 0) {\n            $res[] = array_shift($lst);\n        }\
    \ else {\n            $res[] = array_pop($lst);\n        }\n    }\n    return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (empty($lst))\
    \ {\n        return [];\n    }\n    if (count($lst) == 1) {\n        return $lst;\n\
    \    }\n    sort($lst);\n    $result = [];\n    $i = 0;\n    while (count($lst)\
    \ > 0) {\n        if ($i % 2 == 0) {\n            $result[] = array_shift($lst);\n\
    \        } else {\n            $result[] = array_pop($lst);\n        }\n     \
    \   $i++;\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n   \
    \ return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (empty($lst))\
    \ {\n        return $lst;\n    }\n    sort($lst);\n    $sorted_list = array();\n\
    \    $list_size = count($lst);\n    $list_front = 0;\n    $list_back = $list_size\
    \ - 1;\n    while ($list_front <= $list_back) {\n        if ($list_front != $list_back)\
    \ {\n            $sorted_list[] = $lst[$list_front];\n            $sorted_list[]\
    \ = $lst[$list_back];\n        } else {\n            $sorted_list[] = $lst[$list_front];\n\
    \        }\n        $list_front++;\n        $list_back--;\n    }\n    return $sorted_list;\n\
    }\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  $start =\
    \ 0;\n  $end = count($lst) - 1;\n  $ans = [];\n  $sorted = false;\n  while (!$sorted)\
    \ {\n    $sorted = true;\n    for ($i = $start; $i <= $end; $i++) {\n      if\
    \ ($i == $start) {\n        $ans[] = $lst[$i];\n      } else if ($i % 2 == 0)\
    \ {\n        $max = $lst[$i];\n        $max_ind = $i;\n        for ($j = $i +\
    \ 1; $j <= $end; $j++) {\n          if ($lst[$j] > $max) {\n            $max =\
    \ $lst[$j];\n            $max_ind = $j;\n          }\n        }\n        $ans[]\
    \ = $max;\n        array_splice($lst, $max_ind, 1);\n        $end--;\n       \
    \ $sorted = false;\n      } else {\n        $min = $lst[$i];\n        $min_ind\
    \ = $i;\n        for ($j = $i + 1; $j <= $end; $j++) {\n          if ($lst[$j]\
    \ < $min) {\n            $min = $lst[$j];\n            $min_ind = $j;\n      \
    \    }\n        }\n        $ans[] = $min;\n        array_splice($lst, $min_ind,\
    \ 1);\n        $end--;\n        $sorted = false;\n      }\n    }\n  }\n  return\
    \ $ans;\n}\necho \"strange_sort_list([1, 2, 3, 4]) = \";\nvar_dump(strange_sort_list([1,\
    \ 2, 3, 4]));\necho \"strange_sort_list([5, 5, 5, 5]) = \";\nvar_dump(strange_sort_list([5,\
    \ 5, 5, 5]));\necho \"strange_sort_list([]) = \";\nvar_dump(strange_sort_list([]));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "strange_sort_list([1, 2, 3, 4]) = array(6) {\n  [0]=>\n  int(1)\n  [1]=>\n\
    \  int(2)\n  [2]=>\n  int(4)\n  [3]=>\n  int(1)\n  [4]=>\n  int(3)\n  [5]=>\n\
    \  int(1)\n}\nstrange_sort_list([5, 5, 5, 5]) = array(6) {\n  [0]=>\n  int(5)\n\
    \  [1]=>\n  int(5)\n  [2]=>\n  int(5)\n  [3]=>\n  int(5)\n  [4]=>\n  int(5)\n\
    \  [5]=>\n  int(5)\n}\nstrange_sort_list([]) = array(0) {\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpttkfvn7a.php:61\nStack trace:\n#0 /tmp/tmpttkfvn7a.php(72):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpttkfvn7a.php on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (count($lst)\
    \ == 0) {\n        return [];\n    }\n    $ret = [];\n    $min = min($lst);\n\
    \    $max = max($lst);\n    if ($min == $max) {\n        return $lst;\n    }\n\
    \    $ret[] = $min;\n    $ret[] = $max;\n    foreach ($lst as $val) {\n      \
    \  if ($val != $min && $val != $max) {\n            $ret[] = $val;\n        }\n\
    \    }\n    return $ret;\n}\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr143btlf.php:35\n\
    Stack trace:\n#0 /tmp/tmpr143btlf.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpr143btlf.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    $r = [];\n\
    \    $c = count($lst);\n    $i = 0;\n    $asc = true;\n    while($i < $c) {\n\
    \        if ($asc) {\n            $j = min($lst);\n        } else {\n        \
    \    $j = max($lst);\n        }\n        $r[] = $j;\n        $i++;\n        $asc\
    \ = !$asc;\n        unset($lst[array_search($j, $lst)]);\n    }\n    return $r;\n\
    }\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5, 5,\
    \ 5, 5]));\nprint_r(strange_sort_list([]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n(\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    return\
    \ [];\n}\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp36dlopb4.php:17\n\
    Stack trace:\n#0 /tmp/tmp36dlopb4.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp36dlopb4.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  // Note:\
    \ is_array will return true if $lst is an array and\n  //    false if it is not\
    \ an array.\n  if (is_array($lst)) {\n    // We have an array! Sort it using bubble\
    \ sort.\n    $max = count($lst);\n    $j = 0;\n    while ($j < $max) {\n     \
    \ $i = 0;\n      while ($i < $max) {\n        if ($lst[$i] > $lst[$i + 1]) {\n\
    \          $temp = $lst[$i];\n          $lst[$i] = $lst[$i + 1];\n          $lst[$i\
    \ + 1] = $temp;\n        }\n        $i = $i + 1;\n      }\n      $j = $j + 1;\n\
    \    }\n    // Now, we have a sorted list.\n    // Get the even elements of the\
    \ list, then the odd elements.\n    $even = [];\n    $odd = [];\n    $i = 0;\n\
    \    while ($i < $max) {\n      if ($i % 2 == 0) {\n        $even[] = $lst[$i];\n\
    \      } else {\n        $odd[] = $lst[$i];\n      }\n      $i = $i + 1;\n   \
    \ }\n    $result = [];\n    $i = 0;\n    while ($i < count($even)) {\n      $result[]\
    \ = $even[$i];\n      $result[] = $odd[$i];\n      $i = $i + 1;\n    }\n    return\
    \ $result;\n  } else {\n    // Not an array! Return the same value.\n    return\
    \ $lst;\n  }\n}\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpne848k5q.php:60\n\
    Stack trace:\n#0 /tmp/tmpne848k5q.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpne848k5q.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n\tsort($lst);\n\
    \t$count = count($lst);\n\tif ($count % 2 == 0) {\n\t\t$odd = array_slice($lst,\
    \ 0, $count / 2);\n\t\t$even = array_slice($lst, $count / 2);\n\t} else {\n\t\t\
    $odd = array_slice($lst, 0, $count / 2 + 1);\n\t\t$even = array_slice($lst, $count\
    \ / 2 + 1);\n\t}\n\t$even = array_reverse($even);\n\t$result = [];\n\tfor ($i\
    \ = 0; $i < $count; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$result[] = array_shift($odd);\n\
    \t\t} else {\n\t\t\t$result[] = array_shift($even);\n\t\t}\n\t}\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    $sortedList\
    \ = [];\n    $n = count($lst);\n    if ($n < 1) {\n        return $sortedList;\n\
    \    }\n    while (count($lst) > 0) {\n        $min = min($lst);\n        array_push($sortedList,\
    \ $min);\n        $key = array_search($min, $lst);\n        unset($lst[$key]);\n\
    \        if (count($lst) > 0) {\n            $max = max($lst);\n            array_push($sortedList,\
    \ $max);\n            $key = array_search($max, $lst);\n            unset($lst[$key]);\n\
    \        }\n    }\n    return $sortedList;\n}\n\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (count($lst)\
    \ <= 1) {\n        return $lst;\n    }\n\n    $min = [min($lst)];\n    $rest =\
    \ array_diff($lst, $min);\n    $max = [max($rest)];\n    $rest = array_diff($rest,\
    \ $max);\n\n    return array_merge($min, strange_sort_list($rest), $max);\n}\n\
    \n$test1 = strange_sort_list([1, 2, 3, 4]);\n$test2 = strange_sort_list([5, 5,\
    \ 5, 5]);\n$test3 = strange_sort_list([]);\n\necho json_encode($test1) . \"\\\
    n\";\necho json_encode($test2) . \"\\n\";\necho json_encode($test3) . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: max(): Array must contain at least one element in /tmp/tmpr2to1ex5.php\
    \ on line 16\n[1,2,3,4]\n[5,false]\n[]\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpr2to1ex5.php:34\nStack trace:\n#0 /tmp/tmpr2to1ex5.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpr2to1ex5.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst_len = count($lst);\n\tsort($lst);\n\t$strange_lst = [];\n\t$max_min = $lst_len\
    \ - 1;\n\tfor ($i = 0; $i < $lst_len; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t\
    $strange_lst[] = $lst[$i];\n\t\t} else {\n\t\t\t$strange_lst[] = $lst[$max_min\
    \ - $i];\n\t\t}\n\t}\n\treturn $strange_lst;\n}\n\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1yo09asf.php:30\n\
    Stack trace:\n#0 /tmp/tmp1yo09asf.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp1yo09asf.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n\tif (empty($lst))\
    \ {\n\t\treturn [];\n\t}\n\n\tsort($lst);\n\t$res = [];\n\t$i = 0;\n\t$j = count($lst)\
    \ - 1;\n\t$count = 0;\n\twhile ($count < count($lst)) {\n\t\tif ($count % 2 ==\
    \ 0) {\n\t\t\t$res[] = $lst[$i];\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$res[] = $lst[$j];\n\
    \t\t\t$j--;\n\t\t}\n\t\t$count++;\n\t}\n\treturn $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  $s = array_unique($lst);\n\
    \  $s = sort($s);\n  $s = array_values($s);\n  $len = count($s);\n  $i = 0;\n\
    \  $c = 0;\n  $max = 0;\n  $max_i = 0;\n  $min = 0;\n  $min_i = 0;\n  $order =\
    \ array();\n  while($c < $len) {\n    if ($min_i > $max_i) {\n      $o[] = $min;\n\
    \      $order[] = $min_i;\n      $min = 0;\n      $min_i = -1;\n      $c++;\n\
    \    } else {\n      $o[] = $max;\n      $order[] = $max_i;\n      $max = 0;\n\
    \      $max_i = -1;\n      $c++;\n    }\n    if ($c == $len) {\n      break;\n\
    \    }\n    if ($i >= $len) {\n      $i = 0;\n    }\n    $si = $s[$i];\n    if\
    \ (!in_array($i, $order)) {\n      if ($si > $max) {\n        $max = $si;\n  \
    \      $max_i = $i;\n      }\n      if ($si < $min) {\n        $min = $si;\n \
    \       $min_i = $i;\n      }\n    }\n    $i++;\n  }\n  $i = 0;\n  $n = array();\n\
    \  foreach($lst as $v) {\n    if ($v == $o[$i]) {\n      $n[] = $v;\n      $i++;\n\
    \    }\n  }\n  return $n;\n}\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_values() expects parameter 1 to be array, bool given in\
    \ /tmp/tmpm07gksrv.php on line 12\n\nWarning: count(): Parameter must be an array\
    \ or an object that implements Countable in /tmp/tmpm07gksrv.php on line 13\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpm07gksrv.php:70\nStack\
    \ trace:\n#0 /tmp/tmpm07gksrv.php(81): test()\n#1 {main}\n  thrown in /tmp/tmpm07gksrv.php\
    \ on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if(empty($lst))\
    \ {\n        return [];\n    }\n    sort($lst);\n    $result = [];\n    while(count($lst)\
    \ >= 2) {\n        $result[] = array_shift($lst);\n        $result[] = array_pop($lst);\n\
    \    }\n    $result[] = array_pop($lst);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnj366s_v.php:28\n\
    Stack trace:\n#0 /tmp/tmpnj366s_v.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpnj366s_v.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    $out =\
    \ [];\n    $len = count($lst);\n    if ($len == 0) {\n        return $out;\n \
    \   }\n    sort($lst);\n    for ($i = 0; $i < $len / 2; $i++) {\n        $out[]\
    \ = $lst[$i];\n        $out[] = $lst[$len - $i - 1];\n    }\n    if ($len % 2\
    \ == 1) {\n        $out[] = $lst[$len / 2];\n    }\n    return $out;\n}\n\nassert(strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]);\nassert(strange_sort_list([5, 5, 5, 5]) == [5, 5,\
    \ 5, 5]);\nassert(strange_sort_list([]) == []);\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp202l7zj3.php:35\n\
    Stack trace:\n#0 /tmp/tmp202l7zj3.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp202l7zj3.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (empty($lst))\
    \ {\n        return [];\n    }\n\n    sort($lst);\n    $min = $lst[0];\n    $max\
    \ = end($lst);\n    $end = count($lst);\n    $len = count($lst);\n    $step =\
    \ 2;\n    $arr = [];\n    $arr[] = $min;\n    for ($i = $step; $i <= $len; $i\
    \ += $step) {\n        $arr[] = $lst[$end-$i+1];\n    }\n    return $arr;\n}\n\
    \nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptdli62sm.php:33\n\
    Stack trace:\n#0 /tmp/tmptdli62sm.php(44): test()\n#1 {main}\n  thrown in /tmp/tmptdli62sm.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  if (empty($lst))\
    \ return [];\n  $r = [];\n  $min = min($lst);\n  $max = max($lst);\n  $lst = array_diff($lst,\
    \ [$min, $max]);\n  $r[] = $min;\n  $r[] = $max;\n  while(!empty($lst)) {\n  \
    \  $min = min($lst);\n    $max = max($lst);\n    $lst = array_diff($lst, [$min,\
    \ $max]);\n    $r[] = $min;\n    $r[] = $max;\n  }\n  return $r;\n}\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6uxbe7ph.php:32\n\
    Stack trace:\n#0 /tmp/tmp6uxbe7ph.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp6uxbe7ph.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n\tif(!$lst)\
    \ {\n\t\treturn [];\n\t}\n\t$length = count($lst);\n\t$result = [];\n\tfor($i\
    \ = 0; $i < $length; $i++) {\n\t\tif($i % 2 === 0) {\n\t\t\t$result[] = min($lst);\n\
    \t\t} else {\n\t\t\t$result[] = max($lst);\n\t\t}\n\t\tunset($lst[array_search($result[$i],\
    \ $lst)]);\n\t}\n\treturn $result;\n}\n\nassert(strange_sort_list([1, 2, 3, 4])\
    \ == [1, 4, 2, 3]);\nassert(strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]);\n\
    assert(strange_sort_list([]) == []);\n\necho \"OK\";\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if(!$lst)\
    \ return [];\n    $result = [min($lst)];\n    array_splice($lst, array_search(min($lst),\
    \ $lst), 1);\n    while(!empty($lst)) {\n        $result[] = max($lst);\n    \
    \    array_splice($lst, array_search(max($lst), $lst), 1);\n        if(!empty($lst))\
    \ {\n            $result[] = min($lst);\n            array_splice($lst, array_search(min($lst),\
    \ $lst), 1);\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  $result\
    \ = [];\n  $len = count($lst);\n  $limit = ceil($len / 2);\n  $min = min($lst);\n\
    \  $result[] = $min;\n  $max = max($lst);\n  $result[] = $max;\n  $total = array_count_values($lst);\n\
    \  $max_count = $total[$max];\n  $min_count = $total[$min];\n  $i = 0;\n  while\
    \ (count($result) != $len) {\n    $i++;\n    if ($i % 2 == 0) {\n      $result[]\
    \ = $max;\n      $max_count--;\n      if ($max_count == 0) {\n        $max = max(array_diff($lst,\
    \ $result));\n        $result[] = $max;\n        $max_count = $total[$max];\n\
    \      }\n    } else {\n      $result[] = $min;\n      $min_count--;\n      if\
    \ ($min_count == 0) {\n        $min = min(array_diff($lst, $result));\n      \
    \  $result[] = $min;\n        $min_count = $total[$min];\n      }\n    }\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxvnk2zlx.php:49\n\
    Stack trace:\n#0 /tmp/tmpxvnk2zlx.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpxvnk2zlx.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (count($lst)\
    \ <= 1) return $lst;\n    sort($lst);\n    $result = [];\n    for ($i = 0; $i\
    \ < count($lst); $i++) {\n        if ($i % 2 == 0) {\n            $result[] =\
    \ array_shift($lst);\n        } else {\n            $result[] = array_pop($lst);\n\
    \        }\n    }\n    return $result;\n}\n\nprint_r(strange_sort_list([1, 2,\
    \ 3, 4]));\nprint_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n)\nArray\n(\n    [0] => 5\n    [1]\
    \ => 5\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkfnn_yez.php:31\n\
    Stack trace:\n#0 /tmp/tmpkfnn_yez.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpkfnn_yez.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    sort($lst);\n\
    \    $res = [];\n    $i = 0;\n    $j = count($lst) - 1;\n    while ($i <= $j)\
    \ {\n        $res[] = $lst[$i];\n        $i++;\n        if ($i <= $j) {\n    \
    \        $res[] = $lst[$j];\n            $j--;\n        }\n    }\n    return $res;\n\
    }\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    $new_list\
    \ = array();\n    $length = count($lst);\n    if ($length == 0) {\n        return\
    \ $new_list;\n    }\n    if ($length == 1) {\n        return $lst;\n    }\n  \
    \  sort($lst);\n    for ($i = 0; $i < $length; $i++) {\n        if ($i % 2 ==\
    \ 0) {\n            $new_list[] = $lst[$i];\n        } else {\n            $new_list[]\
    \ = $lst[$length - 1 - $i];\n        }\n    }\n    return $new_list;\n}\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaihw4rnn.php:33\n\
    Stack trace:\n#0 /tmp/tmpaihw4rnn.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpaihw4rnn.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    sort($lst);\n\
    \    $len = count($lst);\n    $res = [];\n    $index = 0;\n    $reverse = false;\n\
    \    for ($i = 0; $i < $len; $i++) {\n        $res[$index] = $lst[$i];\n     \
    \   if ($reverse) {\n            $index--;\n        } else {\n            $index++;\n\
    \        }\n        if ($index === $len - 1 || $index === 0) {\n            $reverse\
    \ = !$reverse;\n        }\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv2of95zx.php:34\n\
    Stack trace:\n#0 /tmp/tmpv2of95zx.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpv2of95zx.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (empty($lst))\
    \ {\n        return $lst;\n    }\n    $result = [];\n    $min = min($lst);\n \
    \   $max = max($lst);\n    $start = $min;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($i % 2 == 0) {\n            $next = $min;\n           \
    \ if ($next != $start) {\n                $min++;\n            }\n        } else\
    \ {\n            $next = $max;\n            if ($next != $start) {\n         \
    \       $max--;\n            }\n        }\n        $result[] = $next;\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsleec5gr.php:39\n\
    Stack trace:\n#0 /tmp/tmpsleec5gr.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpsleec5gr.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (empty($lst))\
    \ {\n        return $lst;\n    }\n    $new_lst = [];\n    $max_lst = max($lst);\n\
    \    $new_lst[] = min($lst);\n    while (count($new_lst) < count($lst)) {\n  \
    \      $k = ($new_lst[count($new_lst) - 1] == $max_lst) ? $max_lst - 1 : $max_lst;\n\
    \        $new_lst[] = $k;\n        $lst = array_diff($lst, [$k]);\n    }\n   \
    \ return $new_lst;\n}\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz687watv.php:29\n\
    Stack trace:\n#0 /tmp/tmpz687watv.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpz687watv.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  if (empty($lst))\
    \ return [];\n  $lst = sort($lst);\n  $half = count($lst) / 2;\n  $first = array_slice($lst,\
    \ 0, $half);\n  $last = array_slice($lst, $half);\n  $result = [];\n  for ($i\
    \ = 0; $i < $half; $i++) {\n    $result[] = $first[$i];\n    $result[] = $last[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpwbu7fbad.php on line 12\n\nWarning: array_slice() expects\
    \ parameter 1 to be array, bool given in /tmp/tmpwbu7fbad.php on line 13\n\nWarning:\
    \ array_slice() expects parameter 1 to be array, bool given in /tmp/tmpwbu7fbad.php\
    \ on line 14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwbu7fbad.php:28\n\
    Stack trace:\n#0 /tmp/tmpwbu7fbad.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpwbu7fbad.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    $result\
    \ = [];\n    while (count($lst) > 0) {\n        $lst = array_values($lst);\n \
    \       $result[] = min($lst);\n        $lst = array_diff($lst, [min($lst)]);\n\
    \        if (count($lst) > 0) {\n            $result[] = max($lst);\n        \
    \    $lst = array_diff($lst, [max($lst)]);\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa5buefb9.php:32\n\
    Stack trace:\n#0 /tmp/tmpa5buefb9.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpa5buefb9.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    sort($lst);\n\
    \    $res = [];\n    while(!empty($lst)) {\n        $res[] = array_shift($lst);\n\
    \        $res[] = array_pop($lst);\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyyek5rss.php:25\n\
    Stack trace:\n#0 /tmp/tmpyyek5rss.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpyyek5rss.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (count($lst)\
    \ === 0) return [];\n    $max = max($lst);\n    $min = min($lst);\n    $res =\
    \ [$min];\n    while (count($lst) > 1) {\n        $pos = array_search($max, $lst);\n\
    \        $remain = array_splice($lst, $pos, 1);\n        $max = max($lst);\n \
    \       $pos = array_search($min, $lst);\n        $remain = array_splice($lst,\
    \ $pos, 1);\n        $min = min($lst);\n        $res[] = $max;\n        $res[]\
    \ = $min;\n    }\n    if (count($lst) === 1) $res[] = $lst[0];\n    return $res;\n\
    }\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: min(): Array must contain at least one element in /tmp/tmp553404wv.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp553404wv.php:33\n\
    Stack trace:\n#0 /tmp/tmp553404wv.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp553404wv.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (empty($lst))\
    \ return [];\n    sort($lst);\n    $max = count($lst) - 1;\n    $i = 0;\n    $result\
    \ = [];\n    while ($i <= $max) {\n        $result[] = $lst[$i];\n        if ($i\
    \ < $max) $result[] = $lst[$max];\n        $i++;\n        $max--;\n    }\n   \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  if (empty($lst))\
    \ return $lst;\n  sort($lst);\n  $result = [$lst[0]];\n  $maxs = $lst;\n  $mins\
    \ = [];\n  while (count($maxs) > 1) {\n    $max = array_pop($maxs);\n    $min\
    \ = array_shift($maxs);\n    array_push($mins, $min);\n    array_push($result,\
    \ $max);\n  }\n  array_push($result, array_pop($maxs));\n  $result = array_merge($result,\
    \ array_reverse($mins));\n  return $result;\n}\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0ftkr8y.php:30\n\
    Stack trace:\n#0 /tmp/tmpz0ftkr8y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpz0ftkr8y.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  if (count($lst)\
    \ > 0) {\n    $min = min($lst);\n    $max = max($lst);\n    $result = [$min];\n\
    \    $removed = [$min];\n    while (count($result) < count($lst)) {\n      $remaining\
    \ = array_diff($lst, $removed);\n      if (count($remaining) > 0) {\n        $result[]\
    \ = max($remaining);\n        $removed[] = max($remaining);\n      }\n      $remaining\
    \ = array_diff($lst, $removed);\n      if (count($remaining) > 0) {\n        $result[]\
    \ = min($remaining);\n        $removed[] = min($remaining);\n      }\n    }\n\
    \    return $result;\n  } else {\n    return $lst;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  if (empty($lst))\
    \ {\n    return [];\n  }\n  $sorted = [];\n  $current_idx = 0;\n  $current_min\
    \ = $lst[0];\n  $current_max = $lst[0];\n  for ($i = 0; $i < count($lst); $i++)\
    \ {\n    if ($lst[$i] < $current_min) {\n      $current_min = $lst[$i];\n    \
    \  $current_idx = $i;\n    }\n    if ($lst[$i] > $current_max) {\n      $current_max\
    \ = $lst[$i];\n    }\n  }\n  array_push($sorted, $current_min);\n  array_splice($lst,\
    \ $current_idx, 1);\n  while (!empty($lst)) {\n    $current_min = $current_max;\n\
    \    $current_max = $lst[0];\n    $current_idx = 0;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n      if ($lst[$i] < $current_min) {\n        $current_min = $lst[$i];\n\
    \        $current_idx = $i;\n      }\n      if ($lst[$i] > $current_max) {\n \
    \       $current_max = $lst[$i];\n      }\n    }\n    array_push($sorted, $current_max);\n\
    \    array_splice($lst, $current_idx, 1);\n  }\n  return $sorted;\n}\n\nvar_dump(strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]);\nvar_dump(strange_sort_list([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5]);\nvar_dump(strange_sort_list([]) == []);\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "bool(false)\nbool(true)\nbool(true)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpq52e3gvb.php:55\nStack trace:\n#0 /tmp/tmpq52e3gvb.php(66):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpq52e3gvb.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n\tsort($lst);\n\
    \t$arr = [];\n\t$len = count($lst);\n\tfor ($i = 0; $i < $len / 2; $i++) {\n\t\
    \t$arr[] = $lst[$i];\n\t\t$arr[] = $lst[$len - $i - 1];\n\t}\n\treturn $arr;\n\
    }\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ffh6hv9.php:25\n\
    Stack trace:\n#0 /tmp/tmp6ffh6hv9.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp6ffh6hv9.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if(empty($lst))\
    \ {\n        return [];\n    }\n    sort($lst);\n    $lst_len = count($lst);\n\
    \    $answer = [];\n    $isMin = true;\n    while($lst_len > 0) {\n        if($isMin)\
    \ {\n            $answer[] = array_shift($lst);\n            $isMin = false;\n\
    \        } else {\n            $answer[] = array_pop($lst);\n            $isMin\
    \ = true;\n        }\n        $lst_len--;\n    }\n    return $answer;\n}\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (!$lst)\
    \ {\n        return [];\n    }\n    $min = null;\n    $max = null;\n    foreach\
    \ ($lst as $k => $v) {\n        if ($min === null || $v < $min) {\n          \
    \  $min = $v;\n        }\n        if ($max === null || $v > $max) {\n        \
    \    $max = $v;\n        }\n    }\n    $lst = array_diff($lst, [$min, $max]);\n\
    \    return array_merge([$min, $max], strange_sort_list($lst));\n}\n\nprint_r(strange_sort_list([1,\
    \ 2, 3, 4]));\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpdpkixgep.php:34\nStack\
    \ trace:\n#0 /tmp/tmpdpkixgep.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpdpkixgep.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    return\
    \ $lst;\n}\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplmzpqsko.php:17\n\
    Stack trace:\n#0 /tmp/tmplmzpqsko.php(28): test()\n#1 {main}\n  thrown in /tmp/tmplmzpqsko.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  $res = [];\n\
    \  while (!empty($lst)) {\n    $min = min($lst);\n    $res[] = $min;\n    unset($lst[array_search($min,\
    \ $lst)]);\n    if (empty($lst)) break;\n    $max = max($lst);\n    $res[] = $max;\n\
    \    unset($lst[array_search($max, $lst)]);\n  }\n  return $res;\n}\n\n$test =\
    \ strange_sort_list([1, 2, 3, 4]);\nvar_dump($test);\n$test = strange_sort_list([5,\
    \ 5, 5, 5]);\nvar_dump($test);\n$test = strange_sort_list([]);\nvar_dump($test);\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(4)\n  [2]=>\n  int(2)\n \
    \ [3]=>\n  int(3)\n}\narray(4) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n  [2]=>\n\
    \  int(5)\n  [3]=>\n  int(5)\n}\narray(0) {\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  if (count($lst)\
    \ == 0) return $lst;\n  $result = [];\n  $count = count($lst);\n  $i = 1;\n  $max_idx\
    \ = max($lst);\n  $max_pos = array_search($max_idx, $lst);\n  $result[] = $max_idx;\n\
    \  $lst[$max_pos] = -1;\n  while ($i < $count) {\n    $max_idx = max($lst);\n\
    \    $max_pos = array_search($max_idx, $lst);\n    $min_idx = min($lst);\n   \
    \ $min_pos = array_search($min_idx, $lst);\n    $result[] = $max_idx;\n    $result[]\
    \ = $min_idx;\n    $lst[$max_pos] = -1;\n    $lst[$min_pos] = -1;\n    $i += 2;\n\
    \  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdn9mk7eg.php:36\n\
    Stack trace:\n#0 /tmp/tmpdn9mk7eg.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpdn9mk7eg.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (!$lst)\
    \ {\n        return [];\n    }\n\n    $lst = sort_list($lst);\n    $size = count($lst);\n\
    \    $result = [];\n    $reversed = false;\n    for ($i = 0; $i < $size; $i++)\
    \ {\n        if ($reversed) {\n            $result[] = array_pop($lst);\n    \
    \    } else {\n            $result[] = array_shift($lst);\n        }\n       \
    \ $reversed = !$reversed;\n    }\n\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_list() in\
    \ /tmp/tmpadj6zimc.php:14\nStack trace:\n#0 /tmp/tmpadj6zimc.php(31): strange_sort_list(Array)\n\
    #1 /tmp/tmpadj6zimc.php(35): candidate(Array)\n#2 /tmp/tmpadj6zimc.php(46): test()\n\
    #3 {main}\n  thrown in /tmp/tmpadj6zimc.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (empty($lst))\
    \ {\n        return $lst;\n    }\n\n    sort($lst);\n    $even_lst = [];\n   \
    \ $odd_lst = [];\n    $result = [];\n\n    foreach ($lst as $i => $val) {\n  \
    \      if ($i % 2 == 0) {\n            $even_lst[] = $val;\n        } else {\n\
    \            $odd_lst[] = $val;\n        }\n    }\n\n    foreach ($even_lst as\
    \ $i => $val) {\n        $result[] = $val;\n        if (isset($odd_lst[$i])) {\n\
    \            $result[] = $odd_lst[$i];\n        }\n    }\n\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxj4i4t7f.php:41\n\
    Stack trace:\n#0 /tmp/tmpxj4i4t7f.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpxj4i4t7f.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n\t$len = count($lst);\n\
    \t$sorted_lst = [];\n\t$i = 0;\n\twhile($i < $len){\n\t\tif($i % 2 == 0){\n\t\t\
    \t$min = min($lst);\n\t\t\t$index = array_search($min, $lst);\n\t\t\tarray_push($sorted_lst,\
    \ $min);\n\t\t\tunset($lst[$index]);\n\t\t} else {\n\t\t\t$max = max($lst);\n\t\
    \t\t$index = array_search($max, $lst);\n\t\t\tarray_push($sorted_lst, $max);\n\
    \t\t\tunset($lst[$index]);\n\t\t}\n\t\t$i++;\n\t}\n\treturn $sorted_lst;\n}\n\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    sort($lst);\n\
    \    $len = count($lst);\n    $front = array_splice($lst, 0, floor($len / 2));\n\
    \    $back = array_splice($lst, 0, $len);\n    $return = [];\n    for ($i = 0;\
    \ $i < count($front); $i++) {\n        $return[] = $front[$i];\n        if (isset($back[$i]))\
    \ {\n            $return[] = $back[$i];\n        }\n    }\n    return $return;\n\
    }\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp72zsph8z.php:29\n\
    Stack trace:\n#0 /tmp/tmp72zsph8z.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp72zsph8z.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    sort($lst);\n\
    \    $first = $lst[0];\n    array_shift($lst);\n    $last = array_pop($lst);\n\
    \    $lst[] = $first;\n    array_unshift($lst, $last);\n    return $lst;\n}\n\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpquwqhhmn.php:24\n\
    Stack trace:\n#0 /tmp/tmpquwqhhmn.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpquwqhhmn.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n\t$result\
    \ = [];\n\t$minVal = min($lst);\n\t$remain = array_filter($lst, function($item)\
    \ use ($minVal) {\n\t\treturn $item !== $minVal;\n\t});\n\t$maxVal = max($remain);\n\
    \t$remain = array_filter($remain, function($item) use ($maxVal) {\n\t\treturn\
    \ $item !== $maxVal;\n\t});\n\t$result[] = $minVal;\n\t$result[] = $maxVal;\n\t\
    $result = array_merge($result, strange_sort_list($remain));\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: min(): Array must contain at least one element in /tmp/tmpil2yqgfr.php\
    \ on line 11\n\nWarning: max(): Array must contain at least one element in /tmp/tmpil2yqgfr.php\
    \ on line 15\n\nWarning: min(): Array must contain at least one element in /tmp/tmpil2yqgfr.php\
    \ on line 11\n\nWarning: max(): Array must contain at least one element in /tmp/tmpil2yqgfr.php\
    \ on line 15\n\nWarning: min(): Array must contain at least one element in /tmp/tmpil2yqgfr.php\
    \ on line 11\n\nWarning: max(): Array must contain at least one element in /tmp/tmpil2yqgfr.php\
    \ on line 15\n\nWarning: min(): Array must contain at least one element in /tmp/tmpil2yqgfr.php\
    \ on line 11\n\nWarning: max(): Array must contain at least one element in /tmp/tmpil2yqgfr.php\
    \ on line 15\n\nWarning: min(): Array must contain at least one element in /tmp/tmpil2yqgfr.php\
    \ on line 11\n\nWarning: max(): Array must contain at least one element in /tmp/tmpil2yqgfr.php\
    \ on line 15\n\nWarning: min(): Array must contain at least one element in /tmp/tmpil2yqgfr.php\
    \ on line 11\n\nWarning: max(): Array must contain at least one element in /tmp/tmpil2yqgfr.php\
    \ on line 15\n\nWarning: min(): Array must contain at least one element in /tmp/tmpil2yqgfr.php\
    \ on line 11\n\nWarning: max(): Array must contain at least one element in /tmp/tmpil2yqgfr.php\
    \ on line 15\n\nWarning: min(): Array must contain at least one element in /tmp/tmpil2yqgfr.php\
    \ on line 11\n\nWarning: max(): Array must contain at least one element in /tmp/tmpil2yqgfr.php\
    \ on line 15\n\nWarning: min(): Array must contain at least one element in /tmp/tmpil2yqgfr.php\
    \ on line 11\n\nWarning: max(): Array must contain at least one element in /tmp/tmpil2yqgfr.php\
    \ on line 15\n\nWarning: min(): Array must contain at least one element in /tmp/tmpil2yqgfr.php\
    \ on line 11\n\nWarning: max(): Array must contain at least one element in /tmp/tmpil2yqgfr.php\
    \ on line 15\n\nWarning: min(): Array must contain at least one element in /tmp/tmpil2yqgfr.php\
    \ on line 11\n\nWarning: max(): Array must contain at least one element in /tmp/tmpil2yqgfr.php\
    \ on line 15\n\nWarning: min(): Array m"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    $n = count($lst);\n\
    \    if ($n == 0) return $lst;\n    sort($lst);\n    $res = [];\n    $i = 0;\n\
    \    $j = $n - 1;\n    while ($i <= $j) {\n        $res[] = $lst[$i];\n      \
    \  if ($i < $j) $res[] = $lst[$j];\n        $i++;\n        $j--;\n    }\n    return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (count($lst)\
    \ < 1) {\n        return [];\n    }\n    $sorted = [];\n    $count = count($lst);\n\
    \    $max_value = max($lst);\n    $min_value = min($lst);\n    $max_found = false;\n\
    \    $min_found = false;\n    for ($i = 0; $i < $count; $i++) {\n        if ($lst[$i]\
    \ == $max_value) {\n            $max_found = true;\n        }\n        if ($lst[$i]\
    \ == $min_value) {\n            $min_found = true;\n        }\n        if ($max_found\
    \ && $min_found) {\n            break;\n        }\n    }\n    $min_index = 0;\n\
    \    $max_index = $count - 1;\n    $j = 0;\n    while ($j < $count) {\n      \
    \  if ($lst[$min_index] < $lst[$max_index]) {\n            $sorted[] = $lst[$min_index];\n\
    \            $min_index++;\n        } else {\n            $sorted[] = $lst[$max_index];\n\
    \            $max_index--;\n        }\n        $j++;\n    }\n    return $sorted;\n\
    }\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwqhj6nbc.php:51\n\
    Stack trace:\n#0 /tmp/tmpwqhj6nbc.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpwqhj6nbc.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    sort($lst);\n\
    \    $cnt = count($lst);\n    $res = array();\n    for ($i = 0; $i < $cnt; $i++)\
    \ {\n        $pos = $i % 2 ? $cnt - 1 - $i / 2 : $i / 2;\n        $res[] = $lst[$pos];\n\
    \    }\n    return $res;\n}\n\necho implode(\", \", strange_sort_list([1, 2, 3,\
    \ 4]));\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1, 3, 2, 2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphpj4_8z9.php:26\n\
    Stack trace:\n#0 /tmp/tmphpj4_8z9.php(37): test()\n#1 {main}\n  thrown in /tmp/tmphpj4_8z9.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    $sort\
    \ = array();\n    sort($lst);\n    $len = count($lst);\n    $counter = 0;\n  \
    \  for ($i = 0; $i < $len; $i++) {\n        $sort[$counter] = $lst[$i];\n    \
    \    $counter += 2;\n        if ($counter >= $len) {\n            $counter = 1;\n\
    \        }\n    }\n    return $sort;\n}\n\nfunction candidate(...$args) {\n  \
    \  return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvpp77xjo.php:29\n\
    Stack trace:\n#0 /tmp/tmpvpp77xjo.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpvpp77xjo.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  if (count($lst)\
    \ <= 1) {\n    return $lst;\n  }\n  $ret = [];\n  $min = min($lst);\n  array_push($ret,\
    \ $min);\n  $lst = array_diff($lst, [$min]);\n  if (count($lst) === 0) {\n   \
    \ return $ret;\n  }\n  $max = max($lst);\n  array_push($ret, $max);\n  $lst =\
    \ array_diff($lst, [$max]);\n  return array_merge($ret, strange_sort_list($lst));\n\
    }\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2nxyepdp.php:35\n\
    Stack trace:\n#0 /tmp/tmp2nxyepdp.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp2nxyepdp.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  $lst = $lst;\n\
    \  $result = [];\n  $min = min($lst);\n  $max = max($lst);\n  $count = count($lst);\n\
    \  for ($i = 0; $i < $count; $i++) {\n    if ($i % 2 == 0) {\n      array_push($result,\
    \ $min);\n      $lst = array_diff($lst, [$min]);\n      $min = min($lst);\n  \
    \  } else {\n      array_push($result, $max);\n      $lst = array_diff($lst, [$max]);\n\
    \      $max = max($lst);\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: max(): Array must contain at least one element in /tmp/tmpjhlokp06.php\
    \ on line 23\n\nWarning: min(): Array must contain at least one element in /tmp/tmpjhlokp06.php\
    \ on line 19\n\nWarning: min(): Array must contain at least one element in /tmp/tmpjhlokp06.php\
    \ on line 19\n\nWarning: max(): Array must contain at least one element in /tmp/tmpjhlokp06.php\
    \ on line 23\n\nWarning: min(): Array must contain at least one element in /tmp/tmpjhlokp06.php\
    \ on line 19\n\nWarning: max(): Array must contain at least one element in /tmp/tmpjhlokp06.php\
    \ on line 23\n\nWarning: min(): Array must contain at least one element in /tmp/tmpjhlokp06.php\
    \ on line 19\n\nWarning: max(): Array must contain at least one element in /tmp/tmpjhlokp06.php\
    \ on line 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjhlokp06.php:38\n\
    Stack trace:\n#0 /tmp/tmpjhlokp06.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjhlokp06.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  $new_lst\
    \ = [];\n  $max = max($lst);\n  $n = count($lst);\n  for ($i = 0; $i < $n; $i++)\
    \ {\n    $min = min($lst);\n    $max = max($lst);\n    if ($i % 2 == 0) {\n  \
    \    $new_lst[] = $min;\n      array_splice($lst, array_search($min, $lst), 1);\n\
    \    } else {\n      $new_lst[] = $max;\n      array_splice($lst, array_search($max,\
    \ $lst), 1);\n    }\n  }\n  return $new_lst;\n}\n\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: max(): Array must contain at least one element in /tmp/tmp3a05ptav.php\
    \ on line 11\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  sort($lst);\n\
    \  $n = count($lst);\n  $n_new = ceil($n / 2);\n  $lst_new = [];\n  $lst_a = array_splice($lst,\
    \ 0, $n_new);\n  $lst_b = array_splice($lst, 0, $n_new);\n  for ($i = 0; $i <\
    \ $n_new; $i++) {\n    if ($i % 2 == 0) {\n      array_push($lst_new, $lst_a[$i]);\n\
    \      if ($i < $n_new - 1) {\n        array_push($lst_new, $lst_b[$i]);\n   \
    \   }\n    } else {\n      array_push($lst_new, $lst_b[$i]);\n      if ($i < $n_new\
    \ - 1) {\n        array_push($lst_new, $lst_a[$i]);\n      }\n    }\n  }\n  return\
    \ $lst_new;\n}\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_8cvu4ra.php:36\n\
    Stack trace:\n#0 /tmp/tmp_8cvu4ra.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp_8cvu4ra.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (!$lst)\
    \ return [];\n    $odd = $even = [];\n    $pivot = min($lst);\n    $rest = array_diff($lst,\
    \ [$pivot]);\n    for ($i = 0; $i < count($rest); $i++) {\n        if ($i % 2)\
    \ {\n            $even[] = $rest[$i];\n        } else {\n            $odd[] =\
    \ $rest[$i];\n        }\n    }\n    $even = array_reverse($even);\n    return\
    \ array_merge([$pivot], $odd, $even);\n}\n\nfunction candidate(...$args) {\n \
    \   return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn8n3_mh2.php:30\n\
    Stack trace:\n#0 /tmp/tmpn8n3_mh2.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpn8n3_mh2.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n}\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc_ow99oi.php:16\n\
    Stack trace:\n#0 /tmp/tmpc_ow99oi.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpc_ow99oi.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    sort($lst);\n\
    \    $strangeList = [];\n    while(!empty($lst)) {\n        $strangeList[] = array_shift($lst);\n\
    \        $strangeList[] = array_pop($lst);\n    }\n    return $strangeList;\n\
    }\nprint_r(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 10\n    [2] => 2\n    [3] => 9\n   \
    \ [4] => 3\n    [5] => 8\n    [6] => 4\n    [7] => 7\n    [8] => 5\n    [9] =>\
    \ 6\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp20cvpt5s.php:26\n\
    Stack trace:\n#0 /tmp/tmp20cvpt5s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp20cvpt5s.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  $step =\
    \ \"min\";\n  $result = [];\n  while (count($lst) > 0) {\n    if ($step == \"\
    min\") {\n      $min = min($lst);\n      $result[] = $min;\n      $lst = array_diff($lst,\
    \ [$min]);\n      $step = \"max\";\n    } elseif ($step == \"max\") {\n      $max\
    \ = max($lst);\n      $result[] = $max;\n      $lst = array_diff($lst, [$max]);\n\
    \      $step = \"min\";\n    }\n  }\n  return $result;\n}\n\necho implode(\",\
    \ \", strange_sort_list([1, 2, 3, 4])) . \"\\n\";\necho implode(\", \", strange_sort_list([5,\
    \ 5, 5, 5])) . \"\\n\";\necho implode(\", \", strange_sort_list([])) . \"\\n\"\
    ;\necho implode(\", \", strange_sort_list([1, 2, 3, 4, 3, 5, 4, 2, 3, 5, 6, 2,\
    \ 3, 5, 6, 2, 3, 5, 6, 2, 3, 5, 6, 2, 3, 5, 6, 2, 3, 5, 6, 2, 3, 5, 6, 2, 3, 5,\
    \ 6, 2, 3, 5, 6, 2, 3, 5, 6, 2, 3, 5, 6, 2, 3, 5, 6, 2, 3, 5, 6, 2, 3, 5, 6, 2,\
    \ 3, 5, 6, 2, 3, 5, 6, 2, 3, 5, 6, 2, 3, 5, 6, 2, 3, 5, 6, 2, 3, 5, 6, 2, 3, 5,\
    \ 6, 2, 3, 5, 6, 2, 3, 5, 6, 2, 3, 5, 6, 2, 3, 5, 6, 2, 3, 5, 6, 2, 3, 5, 6, 2,\
    \ 3, 5, 6, 2, 3, 5, 6, 2, 3, 5, 6, 2, 3, 5, 6, 2, 3, 5, 6, 2, 3, 5,\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7bi7cgif.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    sort($lst);\n\
    \    $res = [];\n    $even = true;\n    while(!empty($lst)) {\n        if($even)\
    \ {\n            $res[] = array_shift($lst);\n        } else {\n            $res[]\
    \ = array_pop($lst);\n        }\n        $even = !$even;\n    }\n    return $res;\n\
    }\n\nassert(strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]);\nassert(strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]);\nassert(strange_sort_list([]) == []);\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  if (count($lst)\
    \ <= 1) {\n    return $lst;\n  }\n\n  $asc = array_slice($lst, 0);\n  $desc =\
    \ array_slice($lst, 0);\n  sort($asc);\n  rsort($desc);\n\n  $result = [];\n \
    \ while (count($asc) > 0) {\n    $result[] = array_shift($asc);\n    if (count($desc)\
    \ > 0) {\n      $result[] = array_shift($desc);\n    }\n  }\n\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1z08fyjl.php:35\n\
    Stack trace:\n#0 /tmp/tmp1z08fyjl.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp1z08fyjl.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    return\
    \ $lst;\n}\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvncv7g34.php:17\n\
    Stack trace:\n#0 /tmp/tmpvncv7g34.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpvncv7g34.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    sort($lst);\n\
    \    $result = [];\n    $is_forward = true;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($is_forward) {\n            $result[] = array_shift($lst);\n\
    \        } else {\n            $result[] = array_pop($lst);\n        }\n     \
    \   $is_forward = !$is_forward;\n    }\n    return $result;\n}\necho \"strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\\n\";\necho 'Result: ';\nvar_dump(strange_sort_list([1,\
    \ 2, 3, 4]));\necho \"strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\\n\";\n\
    echo 'Result: ';\nvar_dump(strange_sort_list([5, 5, 5, 5]));\necho \"strange_sort_list([])\
    \ == []\\n\";\necho 'Result: ';\nvar_dump(strange_sort_list([]));\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\nResult: array(2) {\n \
    \ [0]=>\n  int(1)\n  [1]=>\n  int(4)\n}\nstrange_sort_list([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5]\nResult: array(2) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n}\nstrange_sort_list([])\
    \ == []\nResult: array(0) {\n}\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpijtje25r.php:37\nStack trace:\n#0 /tmp/tmpijtje25r.php(48): test()\n\
    #1 {main}\n  thrown in /tmp/tmpijtje25r.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (count($lst)\
    \ == 0) return [];\n    if (count($lst) == 1) return $lst;\n    $res = [];\n \
    \   $min = min($lst);\n    $max = max($lst);\n    $res[] = $min;\n    $res[] =\
    \ $max;\n    $key = array_search($min, $lst);\n    unset($lst[$key]);\n    $key\
    \ = array_search($max, $lst);\n    unset($lst[$key]);\n    return array_merge($res,\
    \ strange_sort_list($lst));\n}\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (!$lst)\
    \ return [];\n    $min = min($lst);\n    $out = [$min];\n    $lst = array_diff($lst,\
    \ [$min]);\n    while ($lst) {\n        $max = max($lst);\n        $out[] = $max;\n\
    \        $lst = array_diff($lst, [$max]);\n        if (!$lst) break;\n       \
    \ $min = min($lst);\n        $out[] = $min;\n        $lst = array_diff($lst, [$min]);\n\
    \    }\n    return $out;\n}\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4no059jc.php:35\n\
    Stack trace:\n#0 /tmp/tmp4no059jc.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp4no059jc.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  $count =\
    \ count($lst);\n  if ($count == 0) return $lst;\n  $sorted_lst = array();\n  if\
    \ ($count % 2 == 0) {\n    $sorted_lst[] = $lst[0];\n    $sorted_lst[] = $lst[count($lst)\
    \ - 1];\n    $lst = array_slice($lst, 1, -1);\n  } else {\n    $sorted_lst[] =\
    \ $lst[0];\n    $lst = array_slice($lst, 1);\n  }\n  return array_merge($sorted_lst,\
    \ strange_sort_list($lst));\n}\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd2fq40um.php:29\n\
    Stack trace:\n#0 /tmp/tmpd2fq40um.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpd2fq40um.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  if (count($lst)\
    \ % 2 != 0) {\n    return null;\n  }\n  sort($lst);\n  $result = [];\n  for ($i\
    \ = 0; $i < count($lst) / 2; $i++) {\n    $result[] = $lst[$i];\n    $result[]\
    \ = $lst[count($lst) - $i - 1];\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpctpn3bog.php:27\n\
    Stack trace:\n#0 /tmp/tmpctpn3bog.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpctpn3bog.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (count($lst)\
    \ < 1) return [];\n    sort($lst);\n    $res = [];\n    $len = count($lst);\n\
    \    $i = 0;\n    while (count($res) < $len) {\n        $min = array_shift($lst);\n\
    \        if ($min) {\n            $res[] = $min;\n        }\n        $max = array_pop($lst);\n\
    \        if ($max) {\n            $res[] = $max;\n        }\n    }\n    return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (empty($lst))\
    \ return [];\n    $max = max($lst);\n    $min = min($lst);\n    $res = [];\n \
    \   for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 2 == 0) {\n     \
    \       array_push($res, $min);\n            $lst = array_diff($lst, [$min]);\n\
    \            $min = min($lst);\n        } else {\n            array_push($res,\
    \ $max);\n            $lst = array_diff($lst, [$max]);\n            $max = max($lst);\n\
    \        }\n    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n   \
    \ return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmw_vu03k.php:33\n\
    Stack trace:\n#0 /tmp/tmpmw_vu03k.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpmw_vu03k.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  if (!$lst)\
    \ return $lst;\n  sort($lst);\n  $n = count($lst);\n  $res = [];\n  for ($i =\
    \ 0; $i < $n; $i++) {\n    if ($i % 2 == 0) {\n      $res[] = array_shift($lst);\n\
    \    } else {\n      $res[] = array_pop($lst);\n    }\n  }\n  return $res;\n}\n\
    \nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (!is_array($lst))\n\
    \        return [];\n    if (empty($lst))\n        return [];\n    $res = [];\n\
    \    $lst_copy = $lst;\n    $len = count($lst);\n    if ($len == 1)\n        return\
    \ $lst;\n    while (count($res) < $len) {\n        sort($lst_copy);\n        $res[]\
    \ = array_shift($lst_copy);\n        if (empty($lst_copy))\n            break;\n\
    \        rsort($lst_copy);\n        $res[] = array_shift($lst_copy);\n    }\n\
    \    return $res;\n}\necho \"<pre>strange_sort_list: \";\nvar_dump(strange_sort_list([]));\n\
    var_dump(strange_sort_list([1, 2, 3, 4]));\nvar_dump(strange_sort_list([5, 5,\
    \ 5, 5]));\nvar_dump(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nvar_dump(strange_sort_list([9,\
    \ 5, 8, 4, 2, 5, 10, 4, 6, 5, 7, 10, 6, 5, 3, 10, 1, 8, 9, 8, 8, 5, 9, 10, 10,\
    \ 4, 4, 3, 3, 3, 9, 1, 4, 5, 9, 9, 1, 8, 8, 9, 5, 8, 10, 8, 8, 10, 10, 9, 5, 10,\
    \ 1, 9, 10, 8, 9, 9, 5, 5, 3, 3, 4, 3, 4, 9, 5, 5, 4, 9, 5, 6, 4, 9, 5, 5, 9,\
    \ 9, 5, 4, 10, 9, 5, 5, 3, 9, 4, 6, 3, 3, 5, 1, 8, 9, 5, 8, 8, 9, 5, 8, 10, 9,\
    \ 5, 10, 1, 9, 5, 10, 9, 9, 5, 5, 4, 9, 5, 5, 9, 9, 5, 4, 9,\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpp1d13b7b.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if(empty($lst))\
    \ return [];\n    $min = min($lst);\n    $max = max($lst);\n    $max_index = array_search($max,\
    \ $lst);\n    unset($lst[$max_index]);\n    $min_index = array_search($min, $lst);\n\
    \    unset($lst[$min_index]);\n    return [$min, $max] + strange_sort_list($lst);\n\
    }\n\necho \"Test #1\" . PHP_EOL;\nprint_r(strange_sort_list([1, 2, 3, 4]));\n\
    echo PHP_EOL;\n\necho \"Test #2\" . PHP_EOL;\nprint_r(strange_sort_list([5, 5,\
    \ 5, 5]));\necho PHP_EOL;\n\necho \"Test #3\" . PHP_EOL;\nprint_r(strange_sort_list([]));\n\
    echo PHP_EOL;\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Test #1\nArray\n(\n    [0] => 1\n    [1] => 4\n)\n\nTest #2\nArray\n(\n\
    \    [0] => 5\n    [1] => 5\n)\n\nTest #3\nArray\n(\n)\n\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpd8rog9xn.php:36\nStack trace:\n#0 /tmp/tmpd8rog9xn.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpd8rog9xn.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    // TODO\
    \ implement me!\n}\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgz2ryj28.php:17\n\
    Stack trace:\n#0 /tmp/tmpgz2ryj28.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpgz2ryj28.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if(empty($lst))\
    \ return $lst;\n    $sorted = false;\n    while(!$sorted) {\n        $sorted =\
    \ true;\n        for($i = 0; $i < count($lst) - 1; $i += 2) {\n            if($lst[$i]\
    \ > $lst[$i + 1]) {\n                $tmp = $lst[$i];\n                $lst[$i]\
    \ = $lst[$i + 1];\n                $lst[$i + 1] = $tmp;\n                $sorted\
    \ = false;\n            }\n        }\n        for($i = 1; $i < count($lst) - 1;\
    \ $i += 2) {\n            if($lst[$i] < $lst[$i + 1]) {\n                $tmp\
    \ = $lst[$i];\n                $lst[$i] = $lst[$i + 1];\n                $lst[$i\
    \ + 1] = $tmp;\n                $sorted = false;\n            }\n        }\n \
    \   }\n    return $lst;\n}\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuq_8h_mj.php:39\n\
    Stack trace:\n#0 /tmp/tmpuq_8h_mj.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpuq_8h_mj.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    $res =\
    \ [];\n    $len = count($lst);\n    $min = PHP_INT_MAX;\n    $max = -PHP_INT_MAX;\n\
    \    while ($len > 0) {\n        foreach ($lst as $value) {\n            if ($value\
    \ > $max) {\n                $max = $value;\n            }\n            if ($value\
    \ < $min) {\n                $min = $value;\n            }\n        }\n      \
    \  $res[] = $min;\n        if ($min != $max) {\n            $res[] = $max;\n \
    \       }\n        $lst = array_diff($lst, [$min, $max]);\n        $len = count($lst);\n\
    \        $min = PHP_INT_MAX;\n        $max = -PHP_INT_MAX;\n    }\n    return\
    \ $res;\n}\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfpew10cp.php:43\n\
    Stack trace:\n#0 /tmp/tmpfpew10cp.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpfpew10cp.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    $result\
    \ = [];\n    $i = 0;\n    while (count($lst) > 0) {\n        $result[] = ($i %\
    \ 2 == 0) ? min($lst) : max($lst);\n        $lst = array_diff($lst, [$result[$i]]);\n\
    \        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfa7rpaqp.php:29\n\
    Stack trace:\n#0 /tmp/tmpfa7rpaqp.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpfa7rpaqp.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n\tif (count($lst)\
    \ < 2) return $lst;\n\t$i = 0;\n\twhile (count($lst) > 0) {\n\t\tif ($i % 2 ==\
    \ 0) {\n\t\t\t$tmp = min($lst);\n\t\t} else {\n\t\t\t$tmp = max($lst);\n\t\t}\n\
    \t\t$lst = array_diff($lst, [$tmp]);\n\t\t$result[] = $tmp;\n\t\t$i++;\n\t}\n\t\
    return $result;\n}\n\nclass RandomStringGenerator\n{\n\tprotected $length;\n\t\
    protected $alphabet;\n\n\tpublic function __construct($length, $alphabet)\n\t\
    {\n\t\t$this->length = $length;\n\t\t$this->alphabet = $alphabet;\n\t}\n\n\tpublic\
    \ function generate()\n\t{\n\t\t$result = '';\n\t\tfor ($i = 0; $i < $this->length;\
    \ $i++) {\n\t\t\t$result .= $this->alphabet[rand(0, strlen($this->alphabet) -\
    \ 1)];\n\t\t}\n\t\treturn $result;\n\t}\n}\nfunction candidate(...$args) {\n \
    \   return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4qrja9ik.php:54\n\
    Stack trace:\n#0 /tmp/tmp4qrja9ik.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp4qrja9ik.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (empty($lst))\
    \ {\n        return $lst;\n    }\n    sort($lst);\n    $n = count($lst);\n   \
    \ $temp = [];\n    $i = 0;\n    $j = $n - 1;\n    while (true) {\n        $temp[]\
    \ = $lst[$i];\n        $i++;\n        if ($i >= $n) {\n            break;\n  \
    \      }\n        $temp[] = $lst[$j];\n        $j--;\n        if ($j < 0) {\n\
    \            break;\n        }\n    }\n    return $temp;\n}\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjg6s9viu.php:37\n\
    Stack trace:\n#0 /tmp/tmpjg6s9viu.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpjg6s9viu.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  sort($lst);\n\
    \  if(count($lst) < 2) {\n    return $lst;\n  }\n  $result = [];\n  $i = 0;\n\
    \  $j = count($lst) - 1;\n  $result[] = $lst[$i];\n  while($i < $j) {\n    $result[]\
    \ = $lst[$j];\n    $result[] = $lst[$i];\n    $i++;\n    $j--;\n  }\n  if($i ==\
    \ $j) {\n    $result[] = $lst[$i];\n  }\n  return $result;\n}\n$lst = [1, 2, 3,\
    \ 4];\nvar_dump(strange_sort_list($lst));\n$lst = [5, 5, 5, 5];\nvar_dump(strange_sort_list($lst));\n\
    $lst = [];\nvar_dump(strange_sort_list($lst));\n$lst = [1, 2, 3, 4, 5];\nvar_dump(strange_sort_list($lst));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(5) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(4)\n  [2]=>\n  int(1)\n \
    \ [3]=>\n  int(3)\n  [4]=>\n  int(2)\n}\narray(5) {\n  [0]=>\n  int(5)\n  [1]=>\n\
    \  int(5)\n  [2]=>\n  int(5)\n  [3]=>\n  int(5)\n  [4]=>\n  int(5)\n}\narray(0)\
    \ {\n}\narray(6) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(5)\n  [2]=>\n  int(1)\n\
    \  [3]=>\n  int(4)\n  [4]=>\n  int(2)\n  [5]=>\n  int(3)\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpg6y6f0q0.php:42\nStack trace:\n#0 /tmp/tmpg6y6f0q0.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpg6y6f0q0.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  if (empty($lst))\
    \ {\n    return [];\n  }\n  sort($lst);\n  $left = [];\n  $right = [];\n  while(!empty($lst))\
    \ {\n    if (count($lst) === 1) {\n      $left[] = array_pop($lst);\n    } else\
    \ {\n      $left[] = array_shift($lst);\n      $right[] = array_pop($lst);\n \
    \   }\n  }\n  return array_merge($left, array_reverse($right));\n}\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgrav99o5.php:31\n\
    Stack trace:\n#0 /tmp/tmpgrav99o5.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpgrav99o5.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    $min =\
    \ min($lst);\n    $max = max($lst);\n    $idx = array_search($min, $lst);\n  \
    \  unset($lst[$idx]);\n    $newLst = [$min];\n    $reverseLst = array_reverse($lst);\n\
    \    $origLength = count($lst);\n    $revLength = count($reverseLst);\n    $length\
    \ = ($origLength > $revLength) ? $origLength : $revLength;\n    for ($i = 0; $i\
    \ < $length; $i++) {\n        if ($i < $revLength) {\n            $newLst[] =\
    \ $reverseLst[$i];\n        }\n        if ($i < $origLength) {\n            $newLst[]\
    \ = $lst[$i];\n        }\n    }\n    return $newLst;\n}\n\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd0pzt33o.php:35\n\
    Stack trace:\n#0 /tmp/tmpd0pzt33o.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpd0pzt33o.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  $first_min\
    \ = 0;\n  $last_max = 0;\n  $min = 0;\n  $max = 0;\n  $count = 0;\n  $numbers\
    \ = [];\n  $result = [];\n  $f = true;\n  foreach ($lst as $k => $v) {\n    if\
    \ ($f) {\n      $min = $v;\n      $max = $v;\n      $f = false;\n    }\n    if\
    \ ($v < $min) {\n      $min = $v;\n      $first_min = $k;\n    }\n    if ($v >\
    \ $max) {\n      $max = $v;\n      $last_max = $k;\n    }\n    $numbers[$k] =\
    \ $v;\n  }\n  if ($min == $max) {\n    return $lst;\n  }\n  foreach ($numbers\
    \ as $k => $v) {\n    if ($count % 2) {\n      $result[] = $max;\n      unset($numbers[$last_max]);\n\
    \      $max = 0;\n      foreach ($numbers as $k => $v) {\n        if ($v > $max)\
    \ {\n          $max = $v;\n          $last_max = $k;\n        }\n      }\n   \
    \ } else {\n      $result[] = $min;\n      unset($numbers[$first_min]);\n    \
    \  $min = max($numbers);\n      foreach ($numbers as $k => $v) {\n        if ($v\
    \ < $min) {\n          $min = $v;\n          $first_min = $k;\n        }\n   \
    \   }\n    }\n    $count++;\n  }\n  return $result;\n}\necho \"<pre>strange_sort_list([1,\
    \ 2, 3, 4])\\r\\n\";\nvar_dump(strange_sort_list([1, 2, 3, 4]));\necho \"</pre>\"\
    ;\necho \"<pre>strange_sort_list([5, 5, 5, 5])\\r\\n\";\nvar_dump(strange_sort_list([5,\
    \ 5, 5, 5]));\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>strange_sort_list([1, 2, 3, 4])\narray(4) {\n  [0]=>\n  int(1)\n \
    \ [1]=>\n  int(4)\n  [2]=>\n  int(2)\n  [3]=>\n  int(3)\n}\n</pre><pre>strange_sort_list([5,\
    \ 5, 5, 5])\narray(4) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n  [2]=>\n  int(5)\n\
    \  [3]=>\n  int(5)\n}\n\nWarning: max(): Array must contain at least one element\
    \ in /tmp/tmplo9v7gjh.php on line 51\n\nWarning: max(): Array must contain at\
    \ least one element in /tmp/tmplo9v7gjh.php on line 51\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  $result\
    \ = [];\n  $new = array_unique($lst);\n  sort($new);\n  $min = min($new);\n  $max\
    \ = max($new);\n  while (count($new) > 0) {\n    if (count($new) == 1) {\n   \
    \   $result[] = $new[0];\n      return $result;\n    }\n    $result[] = $min;\n\
    \    $result[] = $max;\n    unset($new[array_search($min, $new)]);\n    unset($new[array_search($max,\
    \ $new)]);\n    $min = min($new);\n    $max = max($new);\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: min(): Array must contain at least one element in /tmp/tmpp359u097.php\
    \ on line 24\n\nWarning: max(): Array must contain at least one element in /tmp/tmpp359u097.php\
    \ on line 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp359u097.php:35\n\
    Stack trace:\n#0 /tmp/tmpp359u097.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpp359u097.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  $sort_lst\
    \ = sort_lst($lst);\n  $result = [];\n  $max_i = count($sort_lst) - 1;\n  for\
    \ ($i = 0; $i <= $max_i; $i++) {\n    $result[] = $sort_lst[$i];\n    if ($i <\
    \ $max_i) {\n      $result[] = $sort_lst[$max_i];\n      $max_i--;\n    }\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_lst() in\
    \ /tmp/tmpjy5lhih4.php:10\nStack trace:\n#0 /tmp/tmpjy5lhih4.php(24): strange_sort_list(Array)\n\
    #1 /tmp/tmpjy5lhih4.php(28): candidate(Array)\n#2 /tmp/tmpjy5lhih4.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpjy5lhih4.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    $copy\
    \ = $lst;\n    $lst_len = count($lst);\n    $new_lst = [];\n    if ($lst_len >\
    \ 0) {\n        sort($copy);\n        $min = array_shift($copy);\n        $max\
    \ = array_pop($copy);\n        $new_lst[] = $min;\n        $new_lst[] = $max;\n\
    \        $n = $lst_len - 2;\n        $count = 0;\n        $start = 1;\n      \
    \  $end = $lst_len - 2;\n        for ($i = 0; $i < $n; $i++) {\n            if\
    \ ($start === $end) {\n                $new_lst[] = $copy[$start];\n         \
    \       break;\n            }\n            if ($count === 0) {\n             \
    \   $new_lst[] = $copy[$start];\n                $start++;\n                $count\
    \ = 1;\n            } else {\n                $new_lst[] = $copy[$end];\n    \
    \            $end--;\n                $count = 0;\n            }\n        }\n\
    \    }\n    return $new_lst;\n}\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzcpxwe57.php:46\n\
    Stack trace:\n#0 /tmp/tmpzcpxwe57.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpzcpxwe57.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (empty($lst))\
    \ return [];\n    $even = [];\n    $odd = [];\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($i % 2 === 0) {\n            $even[] = $lst[$i];\n    \
    \    } else {\n            $odd[] = $lst[$i];\n        }\n    }\n    sort($even);\n\
    \    rsort($odd);\n    return array_merge($even, $odd);\n}\n\nvar_dump(strange_sort_list([1,\
    \ 2, 3, 4]));\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(3)\n  [2]=>\n  int(4)\n \
    \ [3]=>\n  int(2)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp76lco_i0.php:31\n\
    Stack trace:\n#0 /tmp/tmp76lco_i0.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp76lco_i0.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    $min =\
    \ $lst[0];\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] <\
    \ $min) {\n            $min = $lst[$i];\n        }\n    }\n    echo $min;\n}\n\
    \nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqp6n716q.php:24\n\
    Stack trace:\n#0 /tmp/tmpqp6n716q.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpqp6n716q.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if(sizeof($lst)\
    \ == 0) return $lst;\n    if(sizeof($lst) == 1) return $lst;\n    $len = sizeof($lst);\n\
    \    $newlst = [];\n    $l = 0;\n    $r = $len - 1;\n    while($l <= $r) {\n \
    \       if($l == $r) {\n            $newlst[] = $lst[$l];\n            break;\n\
    \        }\n        $newlst[] = $lst[$l];\n        $newlst[] = $lst[$r];\n   \
    \     $l++;\n        $r--;\n    }\n    return $newlst;\n}\n\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmhtvk9yg.php:37\n\
    Stack trace:\n#0 /tmp/tmpmhtvk9yg.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpmhtvk9yg.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (!$lst)\
    \ return $lst;\n    $count = count($lst);\n    $low = min($lst);\n    $high =\
    \ max($lst);\n    $min = -1;\n    $max = -1;\n    $new = [];\n    while ($count\
    \ > 0) {\n        $min = $max = -1;\n        foreach ($lst as $i => $val) {\n\
    \            if ($val === $low) {\n                $min = $i;\n              \
    \  $low++;\n            }\n            if ($val === $high) {\n               \
    \ $max = $i;\n                $high--;\n            }\n        }\n        if ($min\
    \ > -1) {\n            array_push($new, $lst[$min]);\n            array_splice($lst,\
    \ $min, 1);\n            $count--;\n        }\n        if ($max > -1) {\n    \
    \        array_push($new, $lst[$max]);\n            array_splice($lst, $max, 1);\n\
    \            $count--;\n        }\n    }\n    return $new;\n}\n\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2dvbq4eu.php:48\n\
    Stack trace:\n#0 /tmp/tmp2dvbq4eu.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp2dvbq4eu.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n\tif (empty($lst))\
    \ return $lst;\n\t$lst = array_values($lst);\n\tsort($lst);\n\tfor ($i = 0; $i\
    \ < count($lst); $i++) {\n\t\t$m = max($lst);\n\t\t$j = array_search($m, $lst);\n\
    \t\t$next = $lst[$i];\n\t\t$lst[$i] = $m;\n\t\t$lst[$j] = $next;\n\t}\n\treturn\
    \ $lst;\n}\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn041rgb1.php:28\n\
    Stack trace:\n#0 /tmp/tmpn041rgb1.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpn041rgb1.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  $sorted\
    \ = sort($lst);\n  var_dump($sorted);\n  $len = count($lst);\n  if($len % 2 ==\
    \ 0) {\n    for($i = 0; $i < $len; $i+=2) {\n      $small[] = $lst[$i];\n    \
    \  $large[] = $lst[$i+1];\n    }\n  } else {\n    for($i = 0; $i < $len-1; $i+=2)\
    \ {\n      $small[] = $lst[$i];\n      $large[] = $lst[$i+1];\n    }\n    $small[]\
    \ = $lst[$len-1];\n  }\n  var_dump($small);\n  var_dump($large);\n  return array_merge($small,\
    \ array_reverse($large));\n}\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "bool(true)\narray(2) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(3)\n}\narray(2)\
    \ {\n  [0]=>\n  int(2)\n  [1]=>\n  int(4)\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmph3whxd3b.php:35\nStack trace:\n#0 /tmp/tmph3whxd3b.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmph3whxd3b.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (!empty($lst))\
    \ {\n        sort($lst);\n        $new_lst = [];\n        while (count($lst) >\
    \ 0) {\n            $new_lst[] = array_shift($lst);\n            if (count($lst)\
    \ > 0) {\n                $new_lst[] = array_pop($lst);\n            }\n     \
    \   }\n        return $new_lst;\n    }\n    return $lst;\n}\n\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n\t$count =\
    \ count($lst);\n\tif($count == 0) return $lst;\n\t$res = array();\n\t$minPos =\
    \ 0;\n\tfor($i = 0; $i < $count; $i++) {\n\t\tif($lst[$i] < $lst[$minPos]) $minPos\
    \ = $i;\n\t}\n\t$res[] = $lst[$minPos];\n\tarray_splice($lst, $minPos, 1);\n\t\
    $maxPos = 0;\n\t$count = count($lst);\n\tfor($i = 0; $i < $count; $i++) {\n\t\t\
    if($lst[$i] > $lst[$maxPos]) $maxPos = $i;\n\t}\n\t$res[] = $lst[$maxPos];\n\t\
    array_splice($lst, $maxPos, 1);\n\twhile(!empty($lst)) {\n\t\t$minPos = 0;\n\t\
    \t$count = count($lst);\n\t\tfor($i = 0; $i < $count; $i++) {\n\t\t\tif($lst[$i]\
    \ < $lst[$minPos]) $minPos = $i;\n\t\t}\n\t\t$res[] = $lst[$minPos];\n\t\tarray_splice($lst,\
    \ $minPos, 1);\n\t\tif(empty($lst)) break;\n\t\t$maxPos = 0;\n\t\t$count = count($lst);\n\
    \t\tfor($i = 0; $i < $count; $i++) {\n\t\t\tif($lst[$i] > $lst[$maxPos]) $maxPos\
    \ = $i;\n\t\t}\n\t\t$res[] = $lst[$maxPos];\n\t\tarray_splice($lst, $maxPos, 1);\n\
    \t}\n\treturn $res;\n}\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpie8f22f9.php:59\n\
    Stack trace:\n#0 /tmp/tmpie8f22f9.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpie8f22f9.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if(!$lst)\
    \ return [];\n    $lst = sort_list($lst);\n    $min = array_shift($lst);\n   \
    \ $max = array_pop($lst);\n    $res = [$min];\n    $new_list = [];\n    for($i\
    \ = 0; $i < count($lst); $i++){\n        if($i % 2 == 0){\n            array_push($new_list,\
    \ $lst[$i]);\n        } else {\n            array_unshift($new_list, $lst[$i]);\n\
    \        }\n    }\n    return array_merge($res, $new_list, [$max]);\n}\n\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_list() in\
    \ /tmp/tmp3tnymzok.php:11\nStack trace:\n#0 /tmp/tmp3tnymzok.php(27): strange_sort_list(Array)\n\
    #1 /tmp/tmp3tnymzok.php(31): candidate(Array)\n#2 /tmp/tmp3tnymzok.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3tnymzok.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  if (count($lst)\
    \ == 0) return [];\n  $evens = [];\n  $odds = [];\n  foreach ($lst as $n) {\n\
    \    if ($n % 2 == 0) $evens[] = $n;\n    else $odds[] = $n;\n  }\n  sort($evens);\n\
    \  sort($odds);\n  $evens = array_reverse($evens);\n  $odds = array_reverse($odds);\n\
    \  $ret = [];\n  for ($i = 0; $i < count($lst); $i++) {\n    if ($i % 2 == 0)\
    \ $ret[] = array_pop($evens);\n    else $ret[] = array_pop($odds);\n  }\n  return\
    \ $ret;\n}\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n    [2] => 4\n    [3] => 3\n)\nArray\n\
    (\n    [0] => \n    [1] => 5\n    [2] => \n    [3] => 5\n)\nArray\n(\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpa4fcqv45.php:37\nStack trace:\n\
    #0 /tmp/tmpa4fcqv45.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpa4fcqv45.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  if (count($lst)\
    \ % 2) {\n    $res = array_reverse($lst);\n    $res_temp = [];\n    $res_temp[]\
    \ = $res[0];\n    $res_temp[] = $res[count($res) - 1];\n    array_splice($res,\
    \ 0, 1);\n    array_splice($res, count($res) - 1, 1);\n    $res = array_merge($res_temp,\
    \ $res);\n    return $res;\n  } else {\n    return $lst;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj8_qut8b.php:29\n\
    Stack trace:\n#0 /tmp/tmpj8_qut8b.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpj8_qut8b.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (count($lst)\
    \ < 2) {\n        return $lst;\n    }\n    $sorted = [];\n    $min = $lst[0];\n\
    \    $max = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $min) {\n            $min = $lst[$i];\n        }\n        if ($lst[$i] > $max)\
    \ {\n            $max = $lst[$i];\n        }\n    }\n    $sorted[] = $min;\n \
    \   $remaining = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ !== $min) {\n            $remaining[] = $lst[$i];\n        }\n    }\n    $remaining\
    \ = strange_sort_list($remaining);\n    if (count($remaining) % 2 === 0) {\n \
    \       for ($i = 0; $i < count($remaining); $i += 2) {\n            $sorted[]\
    \ = $remaining[$i];\n            $sorted[] = $remaining[$i + 1];\n        }\n\
    \    } else {\n        for ($i = 0; $i < count($remaining) - 1; $i += 2) {\n \
    \           $sorted[] = $remaining[$i];\n            $sorted[] = $remaining[$i\
    \ + 1];\n        }\n        $sorted[] = $remaining[count($remaining) - 1];\n \
    \   }\n    return $sorted;\n}\necho implode(\", \", strange_sort_list([1, 2, 3,\
    \ 4]));\necho PHP_EOL;\necho implode(\", \", strange_sort_list([5, 5, 5, 5]));\n\
    echo PHP_EOL;\necho implode(\", \", strange_sort_list([]));\necho PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1, 2, 3, 4\n5\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjaoow0_h.php:57\n\
    Stack trace:\n#0 /tmp/tmpjaoow0_h.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpjaoow0_h.php\
    \ on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  // Write\
    \ code here\n  // return $lst;\n  $order = [];\n  $length = count($lst);\n  while(count($lst)\
    \ > 0) {\n    $min = min($lst);\n    $lst = array_diff($lst, [$min]);\n    $order[]\
    \ = $min;\n    if (count($lst) > 0) {\n      $max = max($lst);\n      $lst = array_diff($lst,\
    \ [$max]);\n      $order[] = $max;\n    }\n  }\n  return $order;\n}\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0c814rb4.php:35\n\
    Stack trace:\n#0 /tmp/tmp0c814rb4.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0c814rb4.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (empty($lst))\
    \ {\n        return [];\n    }\n    sort($lst);\n    $n = count($lst);\n    $new_arr\
    \ = [];\n    $i = 0;\n    $j = $n - 1;\n    $new_arr[] = $lst[$i];\n    $i++;\n\
    \    while ($i < $n) {\n        $new_arr[] = $lst[$j];\n        $j--;\n      \
    \  $new_arr[] = $lst[$i];\n        $i++;\n    }\n    return $new_arr;\n}\n\necho\
    \ '<pre>';\nvar_dump(strange_sort_list([1, 2, 3, 4]));\necho '</pre>';\n\necho\
    \ '<pre>';\nvar_dump(strange_sort_list([5, 5, 5, 5]));\necho '</pre>';\n\necho\
    \ '<pre>';\nvar_dump(strange_sort_list([]));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>array(7) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(4)\n  [2]=>\n  int(2)\n\
    \  [3]=>\n  int(3)\n  [4]=>\n  int(3)\n  [5]=>\n  int(2)\n  [6]=>\n  int(4)\n\
    }\n</pre><pre>array(7) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n  [2]=>\n  int(5)\n\
    \  [3]=>\n  int(5)\n  [4]=>\n  int(5)\n  [5]=>\n  int(5)\n  [6]=>\n  int(5)\n\
    }\n</pre><pre>array(0) {\n}\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp4wfmrac3.php:45\nStack trace:\n#0 /tmp/tmp4wfmrac3.php(56): test()\n\
    #1 {main}\n  thrown in /tmp/tmp4wfmrac3.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  $lst = array_unique($lst);\n\
    \  sort($lst);\n  $count = count($lst);\n  $max = $count;\n  if ($count < 2) {\n\
    \    return $lst;\n  }\n  $answer = [];\n  $flag = false;\n  while (count($answer)\
    \ < $count) {\n    if ($flag) {\n      $answer[] = array_pop($lst);\n    } else\
    \ {\n      $answer[] = array_shift($lst);\n    }\n    $flag = !$flag;\n  }\n \
    \ return $answer;\n}\n\nprint_r(strange_sort_list([1, 2, 3, 4])); // [1, 4, 2,\
    \ 3]\nprint_r(strange_sort_list([5, 5, 5, 5])); // [5, 5, 5, 5]\nprint_r(strange_sort_list([]));\
    \ // []\nprint_r(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [1, 10,\
    \ 2, 9, 3, 8, 4, 7, 5, 6]\nprint_r(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11])); // [1, 11, 2, 10, 3, 9, 4, 8, 5, 7, 6]\nprint_r(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // [1, 12, 2, 11, 3, 10, 4, 9, 5, 8,\
    \ 6, 7]\nprint_r(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\
    \ // [1, 13, 2, 12, 3, 11, 4, 10, 5, 9, 6, 8, 7]\nprint_r(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])); // [1,\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n)\nArray\n(\n)\nArray\n(\n    [0] => 1\n    [1] => 10\n    [2]\
    \ => 2\n    [3] => 9\n    [4] => 3\n    [5] => 8\n    [6] => 4\n    [7] => 7\n\
    \    [8] => 5\n    [9] => 6\n)\nArray\n(\n    [0] => 1\n    [1] => 11\n    [2]\
    \ => 2\n    [3] => 10\n    [4] => 3\n    [5] => 9\n    [6] => 4\n    [7] => 8\n\
    \    [8] => 5\n    [9] => 7\n    [10] => 6\n)\nArray\n(\n    [0] => 1\n    [1]\
    \ => 12\n    [2] => 2\n    [3] => 11\n    [4] => 3\n    [5] => 10\n    [6] =>\
    \ 4\n    [7] => 9\n    [8] => 5\n    [9] => 8\n    [10] => 6\n    [11] => 7\n\
    )\nArray\n(\n    [0] => 1\n    [1] => 13\n    [2] => 2\n    [3] => 12\n    [4]\
    \ => 3\n    [5] => 11\n    [6] => 4\n    [7] => 10\n    [8] => 5\n    [9] => 9\n\
    \    [10] => 6\n    [11] => 8\n    [12] => 7\n)\nArray\n(\n    [0] => 1\n    [1]\
    \ => 14\n    [2] => 2\n    [3] => 13\n    [4] => 3\n    [5] => 12\n    [6] =>\
    \ 4\n    [7] => 11\n    [8] => 5\n    [9] => 10\n    [10] => 6\n    [11] => 9\n\
    \    [12] => 7\n    [13] => 8\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpadfvuq4c.php:47\nStack trace:\n#0 /tmp/tmpadfvuq4c.php(54): test()\n\
    #1 {main}\n  thrown in /tmp/tmpadfvuq4c.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (empty($lst))\
    \ return [];\n    sort($lst);\n    for ($i = 0; $i < count($lst); $i++) {\n  \
    \      if ($i % 2 == 0) $res[] = $lst[$i];\n        else $res[] = $lst[count($lst)\
    \ - 1 - $i];\n    }\n    return $res;\n}\n\n$lst = [1, 2, 3, 4];\necho implode(',\
    \ ', strange_sort_list($lst)) . \"\\n\";\n$lst = [5, 5, 5, 5];\necho implode(',\
    \ ', strange_sort_list($lst)) . \"\\n\";\n$lst = [];\necho implode(', ', strange_sort_list($lst))\
    \ . \"\\n\";\n\necho \"Test\\n\";\n\nfunction candidate(...$args) {\n    return\
    \ strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1, 3, 3, 1\n5, 5, 5, 5\n\nTest\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpaxwaqdso.php:33\nStack trace:\n#0 /tmp/tmpaxwaqdso.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpaxwaqdso.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    $strange_sort_list\
    \ = [];\n    $lst_sorted = [];\n    $lst_sorted_rev = [];\n    $i = 0;\n    $k\
    \ = 0;\n    $j = 0;\n    $lst_size = count($lst);\n    if (empty($lst)) {\n  \
    \      return $lst;\n    }\n    $lst_sorted = array_unique($lst);\n    sort($lst_sorted);\n\
    \    for ($i = 0; $i < $lst_size; $i++) {\n        if ($i % 2 == 0) {\n      \
    \      $strange_sort_list[$k] = $lst_sorted[$j];\n            $k++;\n        }\
    \ else {\n            $lst_sorted_rev = array_reverse($lst_sorted);\n        \
    \    $strange_sort_list[$k] = $lst_sorted_rev[$j];\n            $k++;\n      \
    \  }\n        $j++;\n    }\n    return $strange_sort_list;\n}\n\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_m4mp4lc.php:41\n\
    Stack trace:\n#0 /tmp/tmp_m4mp4lc.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp_m4mp4lc.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (empty($lst))\
    \ {\n        return [];\n    }\n    sort($lst);\n    $odds = array_slice($lst,\
    \ 0, ceil(count($lst) / 2));\n    $evens = array_slice($lst, ceil(count($lst)\
    \ / 2));\n    while (count($odds) > 0 && count($evens) > 0) {\n        $result[]\
    \ = array_shift($odds);\n        $result[] = array_pop($evens);\n    }\n    return\
    \ array_merge($result, $odds, $evens);\n}\nfunction candidate(...$args) {\n  \
    \  return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_merge(): Expected parameter 1 to be an array, null given\
    \ in /tmp/tmpign6v_0d.php on line 20\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpign6v_0d.php:35\nStack trace:\n#0 /tmp/tmpign6v_0d.php(38):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpign6v_0d.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  $result\
    \ = [];\n  $arr = $lst;\n  while (count($arr) > 0) {\n    sort($arr);\n    $first\
    \ = array_shift($arr);\n    $last = array_pop($arr);\n    array_push($result,\
    \ $first);\n    if (count($arr) > 0) {\n      array_push($result, $last);\n  \
    \  }\n  }\n  return $result;\n}\n\necho \"<pre>\";\nvar_dump(strange_sort_list([1,\
    \ 2, 3, 4]));\necho \"</pre>\";\n\necho \"<pre>\";\nvar_dump(strange_sort_list([5,\
    \ 5, 5, 5]));\necho \"</pre>\";\n\necho \"<pre>\";\nvar_dump(strange_sort_list([]));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nvar_dump(strange_sort_list([1, 5, 2, 7, 9,\
    \ 5, 0, 1, 9, 5, 2, 0, 9, 5, 3, 6, 8, 5, 4, 9, 5, 2, 0, 9, 5, 3, 6, 8, 5, 4, 9,\
    \ 5, 2, 0, 9, 5, 3, 6, 8, 5, 4, 9, 5, 2, 0, 9, 5, 3, 6, 8, 5, 4, 9, 5, 2, 0, 9,\
    \ 5, 3, 6, 8, 5, 4, 9, 5, 2, 0, 9, 5, 3, 6, 8, 5, 4, 9, 5, 2, 0, 9, 5, 3, 6, 8,\
    \ 5, 4, 9, 5, 2, 0, 9, 5, 3, 6, 8, 5, 4, 9, 5, 2, 0, 9, 5, 3, 6, 8, 5, 4, 9, 5,\
    \ 2, 0, 9, 5, 3, 6, 8, 5, 4, 9, 5, 2, 0, 9, 5, 3, 6, 8, 5, 4, 9, 5, 2, 0, 9, 5,\
    \ 3, 6, 8, 5, 4, 9, 5, 2, 0, 9, 5,\nfunction candidate(...$args) {\n    return\
    \ strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpayvmuazm.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n\t// Sort\
    \ list, but with a custom callback function\n\tusort($lst, function($a, $b) {\n\
    \t\t// Check if $a and $b are odd or even. The first to sort will have\n\t\t//\
    \ highest priority.\n\t\tif ($a % 2 && !$b % 2) return -1;\n\t\tif (!$a % 2 &&\
    \ $b % 2) return 1;\n\t\t// If same parity, return 1 if $a is greater than $b\
    \ and -1 if $a is\n\t\t// less than $b\n\t\treturn $a > $b ? 1 : -1;\n\t});\n\t\
    return $lst;\n}\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwst1ahlz.php:28\n\
    Stack trace:\n#0 /tmp/tmpwst1ahlz.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpwst1ahlz.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  // start\
    \ with the minimum value, then maximum of the remaining integers, then minimum\
    \ and so on.\n  sort($lst);\n  $lst_sorted = [];\n  for ($i = 0; $i < count($lst)\
    \ / 2; $i++) {\n    $lst_sorted[] = $lst[$i];\n    $lst_sorted[] = $lst[count($lst)\
    \ - $i - 1];\n  }\n  if (count($lst) % 2 !== 0) {\n    $lst_sorted[] = $lst[count($lst)\
    \ / 2];\n  }\n  return $lst_sorted;\n}\n\nfunction candidate(...$args) {\n   \
    \ return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv74s5wya.php:29\n\
    Stack trace:\n#0 /tmp/tmpv74s5wya.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpv74s5wya.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  if (count($lst)\
    \ == 0) {\n    return [];\n  }\n  sort($lst);\n  $lst_len = count($lst);\n  if\
    \ ($lst_len <= 2) {\n    return $lst;\n  }\n  $ret_lst = [];\n  for ($i = 0; $i\
    \ < $lst_len / 2; $i++) {\n    $ret_lst[] = $lst[$i];\n    $ret_lst[] = $lst[$lst_len\
    \ - $i - 1];\n  }\n  if ($lst_len % 2) {\n    $ret_lst[] = $lst[$lst_len / 2];\n\
    \  }\n  return $ret_lst;\n}\nprint_r(strange_sort_list([1, 2, 3, 4])); // 1, 4,\
    \ 2, 3\nprint_r(strange_sort_list([5, 5, 5, 5])); // 5, 5, 5, 5\nprint_r(strange_sort_list([]));\
    \ // []\nprint_r(strange_sort_list([1, 2, 3, 4, 5])); // 1, 5, 2, 4, 3\nprint_r(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6])); // 1, 6, 2, 5, 3, 4\nprint_r(strange_sort_list([1, 2, 3, 4,\
    \ 5, 6, 7])); // 1, 7, 2, 6, 3, 5, 4\nprint_r(strange_sort_list([1, 2, 3, 4, 5,\
    \ 6, 7, 8])); // 1, 8, 2, 7, 3, 6, 4, 5\n\nfunction candidate(...$args) {\n  \
    \  return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n(\n)\nArray\n\
    (\n    [0] => 1\n    [1] => 5\n    [2] => 2\n    [3] => 4\n    [4] => 3\n    [5]\
    \ => 3\n    [6] => 3\n)\nArray\n(\n    [0] => 1\n    [1] => 6\n    [2] => 2\n\
    \    [3] => 5\n    [4] => 3\n    [5] => 4\n)\nArray\n(\n    [0] => 1\n    [1]\
    \ => 7\n    [2] => 2\n    [3] => 6\n    [4] => 3\n    [5] => 5\n    [6] => 4\n\
    \    [7] => 4\n    [8] => 4\n)\nArray\n(\n    [0] => 1\n    [1] => 8\n    [2]\
    \ => 2\n    [3] => 7\n    [4] => 3\n    [5] => 6\n    [6] => 4\n    [7] => 5\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo4yzij88.php:42\n\
    Stack trace:\n#0 /tmp/tmpo4yzij88.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpo4yzij88.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    sort($lst);\n\
    \    $min = array_shift($lst);\n    $max = array_pop($lst);\n    $res = [$min];\n\
    \    while (count($lst) > 0) {\n        $res[] = $max;\n        $max = array_pop($lst);\n\
    \        $res[] = $min;\n        $min = array_shift($lst);\n    }\n    $res[]\
    \ = $max;\n    return $res;\n}\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8amlb3ng.php:29\n\
    Stack trace:\n#0 /tmp/tmp8amlb3ng.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp8amlb3ng.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  $returnList\
    \ = [];\n  sort($lst);\n  $count = count($lst);\n  $midpoint = floor($count /\
    \ 2);\n  if ($count % 2 == 0) {\n    $lst = array_reverse($lst);\n    $returnList\
    \ = array_merge(strange_sort_list(array_slice($lst, 0, $midpoint)), strange_sort_list(array_slice($lst,\
    \ $midpoint)));\n  } else {\n    $returnList = array_merge(strange_sort_list(array_slice($lst,\
    \ 0, $midpoint)), strange_sort_list(array_slice($lst, $midpoint + 1)));\n    array_push($returnList,\
    \ $lst[$midpoint]);\n  }\n  return $returnList;\n}\n\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmp467ro1_a.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    $sort\
    \ = $lst;\n    $result = [];\n    while (count($sort) > 0) {\n        sort($sort);\n\
    \        array_push($result, array_shift($sort));\n        if (count($sort) >\
    \ 0) {\n            rsort($sort);\n            array_push($result, array_shift($sort));\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    $lst =\
    \ sort($lst);\n    $length = count($lst);\n    $start = 0;\n    $end = $length\
    \ - 1;\n    $result = [];\n    while ($start <= $end) {\n        if ($start <\
    \ $end) {\n            $result[] = $lst[$start];\n            $result[] = $lst[$end];\n\
    \        } else {\n            $result[] = $lst[$start];\n        }\n        $start++;\n\
    \        $end--;\n    }\n    return $result;\n}\n\necho \"Strange sorting, is\
    \ when you start with the minimum value, then maximum of the remaining integers,\
    \ then minimum and so on.<br>\";\necho \"Strange sorting: \", strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3], \" => [1, 4, 2, 3]<br>\";\necho \"Strange sorting:\
    \ \", strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5], \" => [5, 5, 5, 5]<br>\"\
    ;\necho \"Strange sorting: \", strange_sort_list([]) == [], \" => []<br>\";\n\
    echo \"Strange sorting: \", strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\
    \ == [1, 10, 2, 9, 3, 8, 4, 7, 5, 6], \" => [1, 10, 2, 9, 3, 8, 4, 7, 5, 6]<br>\"\
    ;\necho \"Strange sorting: \", strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 11, 2, 10, 3, 9, 4, 8, 5, 7, 6], \" => [1, 11, 2, 10, 3, 9, 4, 8,\
    \ 5, 7, 6]<br>\";\necho \"Strange sorting: \", strange_sort_list([1, -2, 3, -4,\
    \ 5, -6, 7, -8, 9, -10, 11]) == [1, 11, -2, -10, 3, -8, 5, -6\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvmnp16sg.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  sort($lst);\n\
    \  $new_lst = [];\n  $small_lst = [];\n  $big_lst = [];\n  for ($i = 0; $i < count($lst);\
    \ $i++) {\n    if ($i % 2 == 0) {\n      $small_lst[] = $lst[$i];\n    } else\
    \ {\n      $big_lst[] = $lst[$i];\n    }\n  }\n  $big_lst = array_reverse($big_lst);\n\
    \  for ($i = 0; $i < count($small_lst); $i++) {\n    $new_lst[] = $small_lst[$i];\n\
    \    $new_lst[] = $big_lst[$i];\n  }\n  return $new_lst;\n}\n\n$lst = [1, 2, 3,\
    \ 4];\nprint_r(strange_sort_list($lst));\n$lst = [5, 5, 5, 5];\nprint_r(strange_sort_list($lst));\n\
    $lst = [];\nprint_r(strange_sort_list($lst));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 3\n    [3] => 2\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n(\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpfd_0k0q4.php:40\nStack\
    \ trace:\n#0 /tmp/tmpfd_0k0q4.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpfd_0k0q4.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n\tif (empty($lst))\
    \ return [];\n\tsort($lst);\n\t$n = count($lst);\n\t$result = [];\n\tfor ($i =\
    \ 0; $i < $n / 2; $i++) {\n\t\t$result[] = $lst[$i];\n\t\t$result[] = $lst[$n\
    \ - $i - 1];\n\t}\n\tif ($n % 2 == 1) $result[] = $lst[$n / 2];\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8jyg5ind.php:28\n\
    Stack trace:\n#0 /tmp/tmp8jyg5ind.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8jyg5ind.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n\t$result\
    \ = [];\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 2 === 0) {\n\t\
    \t\t$result[] = min($lst);\n\t\t} else {\n\t\t\t$result[] = max($lst);\n\t\t}\n\
    \t\tunset($lst[array_search($result[$i], $lst)]);\n\t}\n\treturn $result;\n}\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcqf9wcjk.php:26\n\
    Stack trace:\n#0 /tmp/tmpcqf9wcjk.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpcqf9wcjk.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    sort($lst);\n\
    \    $r = array();\n    $reverse = false;\n    while(count($lst) > 0) {\n    \
    \    if(!$reverse) {\n            $r[] = array_shift($lst);\n        } else {\n\
    \            $r[] = array_pop($lst);\n        }\n        $reverse = !$reverse;\n\
    \    }\n    return $r;\n}\n\n$tests = array(\n    array(\n        'input' => array(1,\
    \ 2, 3, 4),\n        'expected' => array(1, 4, 2, 3)\n    ),\n    array(\n   \
    \     'input' => array(5, 5, 5, 5),\n        'expected' => array(5, 5, 5, 5)\n\
    \    ),\n    array(\n        'input' => array(),\n        'expected' => array()\n\
    \    ),\n    array(\n        'input' => array(1, 2, 2, 3, 2, 4, 2, 5, 2, 6, 2,\
    \ 7, 2, 8, 2, 9, 2, 10, 2, 11, 2, 12, 2, 13, 2, 14, 2, 15, 2, 16, 2, 17, 2, 18,\
    \ 2, 19, 2, 20, 2, 21, 2, 22, 2, 23, 2, 24, 2, 25, 2, 26, 2, 27, 2, 28, 2, 29,\
    \ 2, 30, 2, 31, 2, 32, 2, 33, 2, 34, 2, 35, 2, 36, 2, 37, 2, 38, 2, 39, 2, 40,\
    \ 2, 41, 2, 42, 2, 43, 2, 44, 2, 45, 2, 46, 2, 47, 2, 48, 2, 49, 2, 50, 2, 51,\
    \ 2, 52, 2, 53, 2, 54, 2, 55, 2, 56, 2, 57, 2, 58, 2, 59, 2, 60, 2, 61, 2, 62,\
    \ 2, 63, 2, 64, 2, 65, 2, 66, 2, 67, 2, 68, 2, 69, 2, 70, 2, 71, 2, 72, 2, 73,\
    \ 2, 74, 2, 75\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9b_c1q90.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  return $lst;\n\
    }\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphz7vpw4z.php:17\n\
    Stack trace:\n#0 /tmp/tmphz7vpw4z.php(28): test()\n#1 {main}\n  thrown in /tmp/tmphz7vpw4z.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (empty($lst))\
    \ return $lst;\n    sort($lst);\n    $output = [];\n    $middle = floor(count($lst)\
    \ / 2);\n    $i = 0;\n    $j = 1;\n    while (count($output) != count($lst)) {\n\
    \        if ($i == $middle) {\n            array_push($output, $lst[$middle]);\n\
    \            $i++;\n        } else {\n            array_push($output, $lst[$i]);\n\
    \            $i++;\n            array_push($output, $lst[count($lst) - $j]);\n\
    \            $j++;\n        }\n    }\n    return $output;\n}\nprint_r(strange_sort_list([1,\
    \ 2, 3, 4]));\nprint_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n(\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n\t$lst_cnt\
    \ = count($lst);\n\tif($lst_cnt <= 0) return $lst;\n\tif($lst_cnt == 1) return\
    \ $lst;\n\t$min = min($lst);\n\t$new_lst = array();\n\t$new_lst[] = $min;\n\t\
    $min_pos = array_search($min, $lst);\n\tunset($lst[$min_pos]);\n\t$lst = array_values($lst);\n\
    \t// if($lst_cnt == 2) return $new_lst;\n\t$max = max($lst);\n\t$new_lst[] = $max;\n\
    \t$max_pos = array_search($max, $lst);\n\tunset($lst[$max_pos]);\n\t$lst = array_values($lst);\n\
    \twhile(count($lst)>1) {\n\t\t$min = min($lst);\n\t\t$new_lst[] = $min;\n\t\t\
    $min_pos = array_search($min, $lst);\n\t\tunset($lst[$min_pos]);\n\t\t$lst = array_values($lst);\n\
    \t\t$max = max($lst);\n\t\t$new_lst[] = $max;\n\t\t$max_pos = array_search($max,\
    \ $lst);\n\t\tunset($lst[$max_pos]);\n\t\t$lst = array_values($lst);\n\t}\n\t\
    if(count($lst) == 1) {\n\t\t$new_lst[] = $lst[0];\n\t}\n\treturn $new_lst;\n}\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (count($lst)\
    \ == 0) {\n        return [];\n    }\n\n    sort($lst);\n    $min = array_shift($lst);\n\
    \    rsort($lst);\n    $max = array_shift($lst);\n\n    return array_merge([$min],\
    \ strange_sort_list($lst), [$max]);\n}\n\nprint_r(strange_sort_list([1, 2, 3,\
    \ 4]));\nprint_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n(\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpd_jp9cfo.php:30\nStack\
    \ trace:\n#0 /tmp/tmpd_jp9cfo.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpd_jp9cfo.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  if(empty($lst))\
    \ return [];\n  $min = min($lst);\n  $lst = array_diff($lst, [$min]);\n  $strange_lst\
    \ = [$min];\n  while(!empty($lst)) {\n    $max = max($lst);\n    $lst = array_diff($lst,\
    \ [$max]);\n    $strange_lst[] = $max;\n    if(empty($lst)) break;\n    $min =\
    \ min($lst);\n    $lst = array_diff($lst, [$min]);\n    $strange_lst[] = $min;\n\
    \  }\n  return $strange_lst;\n}\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkez_0x9j.php:34\n\
    Stack trace:\n#0 /tmp/tmpkez_0x9j.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpkez_0x9j.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    $arr =\
    \ [];\n    $res = [];\n    if (!empty($lst)) {\n        sort($lst);\n        $arr[]\
    \ = array_shift($lst);\n        while (!empty($lst)) {\n            $arr[] = array_pop($lst);\n\
    \            if (!empty($lst)) {\n                $arr[] = array_shift($lst);\n\
    \            }\n        }\n        foreach ($arr as $key => $value) {\n      \
    \      if ($key % 2 == 0) {\n                $res[] = $value;\n            } else\
    \ {\n                array_unshift($res, $value);\n            }\n        }\n\
    \    }\n    return $res;\n}\n\necho '<pre>';\nprint_r(strange_sort_list([1, 2,\
    \ 3, 4]));\necho '</pre>';\necho '<pre>';\nprint_r(strange_sort_list([5, 5, 5,\
    \ 5]));\necho '</pre>';\necho '<pre>';\nprint_r(strange_sort_list([]));\necho\
    \ '</pre>';\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 3\n    [1] => 4\n    [2] => 1\n    [3] => 2\n\
    )\n</pre><pre>Array\n(\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n\
    )\n</pre><pre>Array\n(\n)\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpddt43o_k.php:46\nStack trace:\n#0 /tmp/tmpddt43o_k.php(57): test()\n\
    #1 {main}\n  thrown in /tmp/tmpddt43o_k.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if (empty($lst))\
    \ return $lst;\n    $res = [];\n    sort($lst);\n    $i = 0;\n    $j = count($lst)\
    \ - 1;\n    while ($i < $j) {\n        $res[] = $lst[$i];\n        $res[] = $lst[$j];\n\
    \        $i++;\n        $j--;\n    }\n    if ($i == $j) $res[] = $lst[$i];\n \
    \   return $res;\n}\n\necho '[[1, 2, 3, 4], [1, 4, 2, 3]]=>' . (strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3] ? 'OK' : 'FAIL') . PHP_EOL;\necho '[[1, 2, 3, 4, 5],\
    \ [1, 5, 2, 4, 3]]=>' . (strange_sort_list([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\
    \ ? 'OK' : 'FAIL') . PHP_EOL;\necho '[[5, 5, 5, 5], [5, 5, 5, 5]]=>' . (strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5] ? 'OK' : 'FAIL') . PHP_EOL;\necho '[[], []]=>' . (strange_sort_list([])\
    \ == [] ? 'OK' : 'FAIL') . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "[[1, 2, 3, 4], [1, 4, 2, 3]]=>OK\n[[1, 2, 3, 4, 5], [1, 5, 2, 4, 3]]=>OK\n\
    [[5, 5, 5, 5], [5, 5, 5, 5]]=>OK\n[[], []]=>OK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    $is_even\
    \ = true;\n    $odd_list = array();\n    $even_list = array();\n    $sorted_list\
    \ = array();\n    // sort even list first, then odd\n    sort($lst);\n    foreach\
    \ ($lst as $num) {\n        if ($num % 2 == 0) {\n            $even_list[] = $num;\n\
    \        } else {\n            $odd_list[] = $num;\n        }\n    }\n    sort($even_list);\n\
    \    sort($odd_list);\n    // now interleave the lists\n    foreach ($even_list\
    \ as $num) {\n        $sorted_list[] = $num;\n        if ($is_even) {\n      \
    \      $is_even = false;\n        } else {\n            $sorted_list[] = array_pop($odd_list);\n\
    \            $is_even = true;\n        }\n    }\n    if (!empty($odd_list)) {\n\
    \        foreach ($odd_list as $num) {\n            $sorted_list[] = $num;\n \
    \       }\n    }\n    return $sorted_list;\n}\n\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk_sdzmd5.php:48\n\
    Stack trace:\n#0 /tmp/tmpk_sdzmd5.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpk_sdzmd5.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  if (count($lst)\
    \ == 0) {\n    return [];\n  }\n  sort($lst);\n  $lst = array_values($lst);\n\
    \  $return = [];\n  for ($i = 0; $i < count($lst); $i++) {\n    if ($i % 2 ==\
    \ 0) {\n      $return[] = $lst[$i];\n    } else {\n      $return[] = $lst[count($lst)\
    \ - $i];\n    }\n  }\n  return $return;\n}\n\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvwwwt03z.php:31\n\
    Stack trace:\n#0 /tmp/tmpvwwwt03z.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpvwwwt03z.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  if(count($lst)\
    \ <= 1) return $lst;\n  $min = min($lst);\n  $max = max($lst);\n  $mid = ($min\
    \ + $max) / 2;\n  $mid_arr = [$min, $max];\n  $min_lst = $max_lst = [];\n  foreach($lst\
    \ as $elem) {\n    if($elem < $mid) {\n      $min_lst[] = $elem;\n    } elseif($elem\
    \ > $mid) {\n      $max_lst[] = $elem;\n    }\n  }\n  return array_merge(strange_sort_list($min_lst),\
    \ $mid_arr, strange_sort_list($max_lst));\n}\n\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpavn4yhlo.php:31\n\
    Stack trace:\n#0 /tmp/tmpavn4yhlo.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpavn4yhlo.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    $even\
    \ = [];\n    $odd = [];\n    $len = count($lst);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if ($i % 2 === 0) {\n            $even[] = $lst[$i];\n    \
    \    } else {\n            $odd[] = $lst[$i];\n        }\n    }\n    return implode('',\
    \ $even) . implode('', $odd);\n}\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkv9dxhr3.php:27\n\
    Stack trace:\n#0 /tmp/tmpkv9dxhr3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpkv9dxhr3.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  if (empty($lst))\
    \ return [];\n  sort($lst);\n  $result = [];\n  while (count($lst) > 0) {\n  \
    \  $result[] = array_shift($lst);\n    if (count($lst) > 0) {\n      $result[]\
    \ = array_pop($lst);\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n  if (count($lst)\
    \ < 1) {\n    return [];\n  }\n  $odds = [];\n  $evens = [];\n  for ($i = 0; $i\
    \ < count($lst); $i++) {\n    if ($i % 2 == 0) {\n      $odds[] = $lst[$i];\n\
    \    } else {\n      $evens[] = $lst[$i];\n    }\n  }\n  if (count($odds) < count($evens))\
    \ {\n    $last = array_pop($evens);\n    array_push($odds, $last);\n  }\n  $odds\
    \ = array_reverse($odds);\n  sort($odds);\n  sort($evens);\n  $result = [];\n\
    \  for ($i = 0; $i < count($lst); $i++) {\n    if ($i % 2 == 0) {\n      $result[]\
    \ = array_shift($odds);\n    } else {\n      $result[] = array_shift($evens);\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpogf70651.php:45\n\
    Stack trace:\n#0 /tmp/tmpogf70651.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpogf70651.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of integers, return list in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list($lst) {\n    if(empty($lst)){\n\
    \        return $lst;\n    }\n    sort($lst);\n    $a = array_slice($lst, 0, count($lst)/2);\n\
    \    $b = array_slice($lst, count($lst)/2);\n    $c = [];\n    while(count($a)\
    \ > 0 || count($b) > 0){\n        if(count($a) > 0){\n            $c[] = array_shift($a);\n\
    \        }\n        if(count($b) > 0){\n            $c[] = array_pop($b);\n  \
    \      }\n    }\n    return $c;\n}\necho \"<pre>strange_sort_list([1, 2, 3, 4])\\\
    r\\n\";\nvar_dump(strange_sort_list([1, 2, 3, 4]));\necho \"</pre>\";\n\necho\
    \ \"<pre>strange_sort_list([5, 5, 5, 5])\\r\\n\";\nvar_dump(strange_sort_list([5,\
    \ 5, 5, 5]));\necho \"</pre>\";\n\necho \"<pre>strange_sort_list([])\\r\\n\";\n\
    var_dump(strange_sort_list([]));\necho \"</pre>\";\n\necho \"<pre>strange_sort_list([5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprkcj9wua.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
