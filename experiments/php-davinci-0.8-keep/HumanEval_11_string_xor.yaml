name: HumanEval_11_string_xor
language: php
prompt: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n//\
  \ Perform binary XOR on these inputs and return result also as a string.\n// >>>\
  \ string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n"
tests: "function candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\"\
  ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
  ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n    \
    \    $result .= $a[$i] ^ $b[$i];\n    }\n    return $result;\n}", "  $a = str_split($a);\n\
    \  $b = str_split($b);\n  if (count($a) > count($b)) {\n    while (count($a) >\
    \ count($b))\n      array_unshift($b, 0);\n  } else {\n    while (count($b) >\
    \ count($a))\n      array_unshift($a, 0);\n  }\n  $i = count($a) - 1;\n  $r =\
    \ [];\n  while ($i >= 0) {\n    if ($a[$i] == $b[$i]) {\n      $r[] = 0;\n   \
    \ } else {\n      $r[] = 1;\n    }\n    $i--;\n  }\n  return implode($r);\n}\n\
    echo string_xor('010', '110');", "  $xor = '';\n  for ($i = 0; $i < strlen($a);\
    \ $i++) {\n    $xor .= $a[$i] ^ $b[$i];\n  }\n  return $xor;\n}\n", "\tif ( strlen($a)\
    \ != strlen($b) ) {\n\t\treturn \"Strings must be equal length\";\n\t}\n\t$len\
    \ = strlen($a);\n\t$result = '';\n\tfor ( $i = 0; $i < $len; $i++ ) {\n\t\t$one\
    \ = substr($a, $i, 1);\n\t\t$two = substr($b, $i, 1);\n\t\tif ( $one == $two )\
    \ {\n\t\t\t$result .= \"0\";\n\t\t} else {\n\t\t\t$result .= \"1\";\n\t\t}\n\t\
    }\n\treturn $result;\n}\n", "  $aBin = str_split($a);\n  $bBin = str_split($b);\n\
    \  $binaryXor = \"\";\n  for ($i = 0; $i < count($aBin); $i++) {\n    if ($aBin[$i]\
    \ == $bBin[$i]) {\n      $binaryXor .= \"0\";\n    } else {\n      $binaryXor\
    \ .= \"1\";\n    }\n  }\n  return $binaryXor;\n}\n", "  // Test length of strings\n\
    \  if (strlen($a) != strlen($b)) {\n    throw new Exception('Strings have different\
    \ length!');\n  }\n  // Split strings into arrays, convert to binary format, perform\
    \ XOR on each\n  // element, convert back to string and return.\n  return implode('',\
    \ array_map(function($char) {\n    return $char[0] ^ $char[1];\n  }, array_map('bindec',\
    \ str_split($a)), str_split($b)));\n}", "\t$s = '';\n\tfor($i = 0; $i < strlen($a);\
    \ $i++) {\n\t\t$s .= $a[$i] ^ $b[$i];\n\t}\n\treturn $s;\n}", "    $stringXor\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $stringXor .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $stringXor;\n}\n", "  return implode(array_map(function($x,\
    \ $y) {\n    return ($x == $y) ? '0' : '1';\n  }, str_split($a), str_split($b)));\n\
    }\necho string_xor('010', '110') . \"\\n\";\necho string_xor('000', '001') . \"\
    \\n\";\necho string_xor('1010101', '0010101') . \"\\n\";", "  $result = \"\";\n\
    \  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n  }\n\
    \  return $result;\n}\n", "\t$a = str_split($a);\n\t$b = str_split($b);\n\t$output\
    \ = \"\";\n\tfor ($i = 0; $i < sizeof($a); $i++) {\n\t\tif ($a[$i] == $b[$i])\
    \ {\n\t\t\t$output .= \"0\";\n\t\t} else {\n\t\t\t$output .= \"1\";\n\t\t}\n\t\
    }\n\treturn $output;\n}\n\necho(string_xor('010', '110') . \"\\n\");", "    return\
    \ implode('', array_map(function($x, $y) { return $x ^ $y; }, str_split($a), str_split($b)));\n\
    }", "  $l = strlen($a);\n  $xorString = '';\n  for ($i = 0; $i < $l; $i++) {\n\
    \    $xorString .= (intval($a[$i]) ^ intval($b[$i])) ? '1' : '0';\n  }\n  return\
    \ $xorString;\n}\n", "  $len = max(strlen($a), strlen($b));\n  $a = str_pad($a,\
    \ $len, \"0\", STR_PAD_LEFT);\n  $b = str_pad($b, $len, \"0\", STR_PAD_LEFT);\n\
    \  $result = \"\";\n  for ($i = 0; $i < $len; $i++) {\n    $result .= ($a[$i]\
    \ == $b[$i]) ? \"0\" : \"1\";\n  }\n  return $result;\n}\n", "    $result = array();\n\
    \    $a = str_split($a);\n    $b = str_split($b);\n    foreach ($a as $key =>\
    \ $char) {\n        $result[] = $char ^ $b[$key];\n    }\n    return implode($result);\n\
    }\n", "    $res = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $res\
    \ .= $a[$i] ^ $b[$i];\n    }\n    return $res;\n}", "  $result = '';\n  $len =\
    \ strlen($a);\n  for ($i = 0; $i < $len; $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n", "  $a = str_split($a);\n  $b = str_split($b);\n\
    \  $ret = \"\";\n  for ($i = 0; $i < count($a); $i++) {\n    $ret .= ($a[$i] ^\
    \ $b[$i]);\n  }\n  return $ret;\n}", "  $a = str_split($a);\n  $b = str_split($b);\n\
    \  $res = '';\n  $len = max(count($a), count($b));\n  for ($i = 0; $i < $len;\
    \ $i++) {\n    $aa = (isset($a[$i])) ? $a[$i] : 0;\n    $bb = (isset($b[$i]))\
    \ ? $b[$i] : 0;\n    $res .= $aa ^ $bb;\n  }\n  return $res;\n}\n", "    $result\
    \ = \"\";\n    $a = str_split($a);\n    $b = str_split($b);\n    $i = 0;\n   \
    \ $j = 0;\n    while($i < count($a) && $j < count($b)){\n        if($a[$i] ==\
    \ $b[$j]){\n            $result .= \"0\";\n        } else {\n            $result\
    \ .= \"1\";\n        }\n        $i++;\n        $j++;\n    }\n    return $result;\n\
    }", "  $xor_result = array();\n  for ($i = 0; $i < strlen($a); $i++) {\n    $xor_result[]\
    \ = (int)$a[$i] ^ (int)$b[$i];\n  }\n  return implode('', $xor_result);\n}\necho\
    \ string_xor('0101', '0111');\n", "\t$c = '';\n\tfor ($i = 0; $i < strlen($a);\
    \ $i++) {\n\t\t$c .= ((int)$a[$i] ^ (int)$b[$i]);\n\t}\n\treturn $c;\n}\n", " \
    \ // Convert strings to an array of bits\n  $a = str_split($a);\n  $b = str_split($b);\n\
    \  // Perform XOR operation on bits\n  $r = array();\n  foreach ($a as $i => $v)\
    \ {\n    $r[] = $v == $b[$i] ? '0' : '1';\n  }\n  // Return result as a string\n\
    \  return implode('', $r);\n}", "    $a = str_split($a);\n    $b = str_split($b);\n\
    \    $r = '';\n    foreach($a as $i => $v) {\n        $r .= ($v xor $b[$i]);\n\
    \    }\n    return $r;\n}\n$a = \"10010010\";\n$b = \"10111001\";\necho \"Result\
    \ of XOR: \".string_xor($a, $b);", "\t$result = array();\n\tfor ($i = 0; $i <\
    \ strlen($a); $i++) {\n\t\t$result[] = ($a[$i] == $b[$i]) ? '0' : '1';\n\t}\n\t\
    return implode($result);\n}", "  // Your code here\n  $max = max(strlen($a), strlen($b));\n\
    \  $a = str_pad($a, $max, '0', STR_PAD_LEFT);\n  $b = str_pad($b, $max, '0', STR_PAD_LEFT);\n\
    \  $result = '';\n  for ($i = 0; $i < $max; $i++) {\n    $result .= $a[$i] ==\
    \ $b[$i] ? '0' : '1';\n  }\n  return $result;\n}\n", "\treturn implode(array_map(function($a,\
    \ $b) {\n\t\treturn $a ^ $b;\n\t}, str_split($a), str_split($b)));\n}\n", "  $result\
    \ = '';\n  $longer = strlen($a) > strlen($b) ? $a : $b;\n  $shorter = strlen($a)\
    \ > strlen($b) ? $b : $a;\n  for ($i = 0; $i < strlen($longer); $i++) {\n    $result\
    \ .= $i < strlen($shorter) ? $longer[$i] == $shorter[$i] ? '0' : '1' : $longer[$i];\n\
    \  }\n  return $result;\n}", "  $xor = [];\n  $a = str_split($a);\n  $b = str_split($b);\n\
    \  foreach($a as $key => $value) {\n    if ($a[$key] == $b[$key]) {\n      $xor[]\
    \ = 0;\n    } else {\n      $xor[] = 1;\n    }\n  }\n  return implode($xor);\n\
    }\n\necho string_xor('010', '110');", "  $result = '';\n  for ($i = 0; $i < strlen($a);\
    \ $i++) {\n    $result .= ($a[$i] ^ $b[$i]) ? '1' : '0';\n  }\n  return $result;\n\
    }\n", "  // Your code here\n}\n", "  $r = '';\n  $l = max(strlen($a), strlen($b));\n\
    \  $a = str_pad($a, $l, '0', STR_PAD_LEFT);\n  $b = str_pad($b, $l, '0', STR_PAD_LEFT);\n\
    \  for ($i = 0; $i < $l; $i++)\n    $r .= ((int)$a[$i] ^ (int)$b[$i]);\n  return\
    \ $r;\n}\n", "    return implode(array_map(function($i, $j) {\n        return\
    \ ((int)$i)^((int)$j);\n    }, str_split($a), str_split($b)));\n}\n\necho string_xor('010',\
    \ '110');\necho \"\\n\";\n", "  $result = \"\";\n  for ($i = 0; $i < strlen($a);\
    \ $i++) {\n    $a_digit = substr($a, $i, 1);\n    $b_digit = substr($b, $i, 1);\n\
    \    if ($a_digit == $b_digit) {\n      $result .= \"0\";\n    } else {\n    \
    \  $result .= \"1\";\n    }\n  }\n  return $result;\n}\n", "  $binString = '';\n\
    \  for ($i = 0; $i < strlen($a); $i++) {\n    $binString .= (bool) $a[$i] ^ (bool)\
    \ $b[$i] ? '1' : '0';\n  }\n  return $binString;\n}\n", "    $result = '';\n \
    \   for ($i = 0; $i < strlen($a); $i++) {\n        $result .= (int)$a[$i] ^ (int)$b[$i];\n\
    \    }\n    return $result;\n}\n", "  $out = '';\n  for ($i = 0; $i < strlen($a);\
    \ $i++) {\n    $out .= $a[$i] ^ $b[$i];\n  }\n  return $out;\n}", "  $result =\
    \ '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}", "    $len = max(strlen($a), strlen($b));\n    $max\
    \ = max($a, $b);\n    $a = str_pad($a, $len, $max[0], STR_PAD_LEFT);\n    $b =\
    \ str_pad($b, $len, $max[0], STR_PAD_LEFT);\n    $result = '';\n    for ($i =\
    \ 0; $i < $len; $i++) {\n        $result .= ($a[$i] ^ $b[$i]);\n    }\n    return\
    \ $result;\n}\n\necho string_xor('010', '110');\necho string_xor
  "    // convert the strings to an array of characters\n    $a_array = str_split($a);\n\
    \    $b_array = str_split($b);\n    // count the length of the arrays\n    $a_length\
    \ = count($a_array);\n    $b_length = count($b_array);\n    // compare length\
    \ of $a and $b\n    if ($a_length !== $b_length) {\n        return \"Strings are\
    \ not equal in length.\";\n    }\n    // $result is a string that starts with\
    \ empty string\n    $result = \"\";\n    // loop through the arrays\n    for ($i\
    \ = 0; $i < $a_length; $i++) {\n        // check if $a_array[$i] is equal to $b_array[$i]\n\
    \        if ($a_array[$i] == $b_array[$i]) {\n            // if true, add 0 to\
    \ $result\n            $result .= \"0\";\n        } else {\n            // if\
    \ false, add 1 to $result\n            $result .= \"1\";\n        }\n    }\n \
    \   // return $result\n    return $result;\n}\necho string_xor('010', '110');\n\
    echo \"\\n\";", "    $res = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n \
    \       $a_i = substr($a, $i, 1);\n        $b_i = substr($b, $i, 1);\n       \
    \ $res .= ($a_i == $b_i) ? '0' : '1';\n    }\n    return $res;\n}\n", "\t$a =\
    \ str_split($a);\n\t$b = str_split($b);\n\t$xor = array();\n\tfor ($i = 0; $i\
    \ < count($a); $i++) {\n\t\tif ($a[$i] == $b[$i]) {\n\t\t\t$xor[] = '0';\n\t\t\
    } else {\n\t\t\t$xor[] = '1';\n\t\t}\n\t}\n\treturn implode($xor);\n}", "\t$a\
    \ = str_split($a);\n\t$b = str_split($b);\n\t$c = [];\n\tforeach ($a as $key =>\
    \ $value) {\n\t\tif ($value == 1 && $b[$key] == 1) {\n\t\t\t$c[] = 0;\n\t\t} elseif\
    \ ($value == 0 && $b[$key] == 0) {\n\t\t\t$c[] = 0;\n\t\t} else {\n\t\t\t$c[]\
    \ = 1;\n\t\t}\n\t}\n\treturn implode('', $c);\n}\necho string_xor('010', '110')\
    \ . \"\\n\";\n", "  $r = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $r\
    \ .= $a[$i] ^ $b[$i];\n  }\n  return $r;\n}\n", "  $result = '';\n  for ($i =\
    \ 0; $i < strlen($a); $i++) {\n    $result .= ($a[$i] ^ $b[$i]) ? '1' : '0';\n\
    \  }\n  return $result;\n}\n", "  $a = str_split($a);\n  $b = str_split($b);\n\
    \  $result = '';\n  for ($i = 0; $i < count($a); $i++) {\n    $result .= ($a[$i]\
    \ ^ $b[$i]);\n  }\n  return $result;\n}\n", "\t$result = \"\";\n\t$strlen = strlen($a);\n\
    \tfor ($i = 0; $i < $strlen; $i++) {\n\t\t$result .= ($a[$i] != $b[$i]) ? \"1\"\
    \ : \"0\";\n\t}\n\treturn $result;\n}\n", "\t$result = \"\";\n\t$i = 0;\n\twhile\
    \ ($i < strlen($a)) {\n\t\tif (substr($a, $i, 1) == substr($b, $i, 1)) {\n\t\t\
    \t$result .= \"0\";\n\t\t} else {\n\t\t\t$result .= \"1\";\n\t\t}\n\t\t$i++;\n\
    \t}\n\treturn $result;\n}\n", "  $c = '';\n  for ($i = 0; $i < strlen($a); $i++)\
    \ {\n    $c .= ($a[$i] ^ $b[$i]) ? '1' : '0';\n  }\n  return $c;\n}", "    //\
    \ your code\n    $result = '';\n    $a = str_split($a);\n    $b = str_split($b);\n\
    \    for ($i = 0; $i < strlen($a); $i++) {\n        if ((int)$a[$i] ^ (int)$b[$i])\
    \ {\n            $result .= '1';\n        } else {\n            $result .= '0';\n\
    \        }\n    }\n    return $result;\n}", "\t$r = '';\n\tfor ($i = 0; $i < strlen($a);\
    \ $i++) {\n\t\t$r .= $a[$i] ^ $b[$i];\n\t}\n\treturn $r;\n}", "    $a = str_split($a);\n\
    \    $b = str_split($b);\n    $c = [];\n    foreach ($a as $key => $value) {\n\
    \        if ($value == $b[$key]) {\n            $c[] = 0;\n        } else {\n\
    \            $c[] = 1;\n        }\n    }\n    return implode('', $c);\n}\n", " \
    \ $a = str_split($a);\n  $b = str_split($b);\n  $result = [];\n  for ($i = 0;\
    \ $i < count($a); $i++) {\n    $result[] = $a[$i] ^ $b[$i];\n  }\n  return implode($result);\n\
    }\n", "  $temp = str_split($a);\n  $temp2 = str_split($b);\n  $count = 0;\n  $xor\
    \ = [];\n  while ($count < count($temp)) {\n    if ($temp[$count] == $temp2[$count])\
    \ {\n      $xor[] = '0';\n    } else {\n      $xor[] = '1';\n    }\n    $count++;\n\
    \  }\n  return implode($xor);\n}", "    $c = \"\";\n    for ($i = 0; $i < strlen($a);\
    \ $i++) {\n        $c .= intval($a[$i]) ^ intval($b[$i]);\n    }\n    return $c;\n\
    }\n", "    $xor = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $xor\
    \ .= $a[$i] ^ $b[$i];\n    }\n    return $xor;\n}\necho string_xor('010', '110');\n\
    echo PHP_EOL;\n", "  $res = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n \
    \   $res .= ($a[$i] ^ $b[$i]);\n  }\n  return $res;\n}\n\necho string_xor('010',\
    \ '110');", "  $c = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n      $c .=\
    \ $a[$i] == $b[$i] ? \"0\" : \"1\";\n  }\n  return $c;\n}\n$string1 = \"101101\"\
    ;\n$string2 = \"110101\";\necho string_xor($string1, $string2);", "    $res =\
    \ '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $res .= ($a[$i] ^ $b[$i]);\n\
    \    }\n    return $res;\n}\n", "  $result = '';\n  $a_len = strlen($a);\n  $b_len\
    \ = strlen($b);\n  $len = max($a_len, $b_len);\n  for ($i = 0; $i < $len; $i++)\
    \ {\n    $result .= ((isset($a[$i]) ? $a[$i] : '0') ^ (isset($b[$i]) ? $b[$i]\
    \ : '0'));\n  }\n  return $result;\n}\n\n$s1 = '010';\n$s2 = '110';\n\necho string_xor($s1,\
    \ $s2);", "   $a = str_split($a);\n   $b = str_split($b);\n   $res = \"\";\n \
    \  for ($i = 0; $i < count($a); $i++) {\n     $res .= ($a[$i] xor $b[$i]);\n \
    \  }\n   return $res;\n}\n\necho string_xor('010', '110') . \"<br>\";\n", "  $xorResult\
    \ = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $xorResult .= $a[$i] ^\
    \ $b[$i];\n  }\n  return $xorResult;\n}\n\necho string_xor('010', '110');", " \
    \ // Your code here\n}", "  $result = '';\n  for ($i = 0; $i < strlen($a); $i++)\
    \ {\n    $result .= $a[$i] ^ $b[$i];\n  }\n  return $result;\n}\n", "  $c = '';\n\
    \  for ($i = 0; $i < strlen($a); $i++) {\n    $c .= $a[$i] === $b[$i] ? '0' :\
    \ '1';\n  }\n  return $c;\n}\necho string_xor('010', '110');", "  $xor = $a ^\
    \ $b;\n  return sprintf(\"%b\", $xor);\n}\n", "    $ans = '';\n    for ($i = 0;\
    \ $i < strlen($a); $i++) {\n        $ans .= ($a[$i] == $b[$i]) ? '0' : '1';\n\
    \    }\n    return $ans;\n}\n", "\treturn decbin(bindec($a) ^ bindec($b));\n}\n",
  "  // Your code here\n  \n}\n```\n\n```html\n<!-- For example: -->\n<p>\n  <b>Input:</b>\
    \ 010 and 110\n  <br>\n  <b>Output:</b> 100\n</p>\n```", "    $result = '';\n\
    \    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i] ^ $b[$i];\n\
    \    }\n    return $result;\n}", "    // convert string to array\n    $a = str_split($a);\n\
    \    $b = str_split($b);\n    // loop over the array\n    for ($i = 0; $i < count($a);\
    \ $i++) {\n        // convert to integers\n        $a[$i] = (int) $a[$i];\n  \
    \      $b[$i] = (int) $b[$i];\n        // if $a and $b are equal then xor = 0\
    \ else 1\n        $c[] = $a[$i] == $b[$i] ? 0 : 1;\n    }\n    // return string\
    \ converted from array\n    return implode('', $c);\n}\n", "  $result = '';\n\
    \  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n  }\n\
    \  return $result;\n}\n", "    $r = '';\n    for ($i = 0; $i < strlen($a); $i++)\
    \ {\n        $r .= $a[$i] ^ $b[$i];\n    }\n    return $r;\n}\n", "  // Get the\
    \ length of string b\n  $b_length = strlen($b);\n  // Initialize a new string\
    \ with the same length as string b\n  $result = str_repeat(' ', $b_length);\n\
    \  // For every character in string a and string b\n  for ($i = 0; $i < $b_length;\
    \ $i++) {\n    // If they are equal to each other\n    if ($a[$i] == $b[$i]) {\n\
    \      // Output a 0\n      $result[$i] = '0';\n    } else {\n      // Otherwise\
    \ output a 1\n      $result[$i] = '1';\n    }\n  }\n  // Convert the string to\
    \ an integer and return the result\n  return (int) $result;\n}\n", "  $res = \"\
    \";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $res .= $a[$i] ^ $b[$i];\n \
    \ }\n  return $res;\n}", "  $result = '';\n  for ($i = 0; $i < strlen($a); $i++)\
    \ {\n    $result .= $a[$i] == $b[$i] ? '0' : '1';\n  }\n  return $result;\n}\n",
  "  // Your code here\n  // get the number of bits of the longest string.\n  $len\
    \ = max(strlen($a), strlen($b));\n  // create an array to store the result.\n\
    \  $result = array();\n  // convert each string to binary number.\n  $bin_a =\
    \ intval($a, 2);\n  $bin_b = intval($b, 2);\n  // calculate the bitwise xor of\
    \ the two binary numbers.\n  $xor = $bin_a ^ $bin_b;\n  // convert the xor result\
    \ back to a string of bits.\n  $xor_bin = str_pad(decbin($xor), $len, '0', STR_PAD_LEFT);\n\
    \  // return the result.\n  return $xor_bin;\n}", "  $str = \"\";\n  for ($i =\
    \ 0; $i < strlen($a); $i++) {\n    $str .= ($a[$i] == $b[$i]) ? \"0\" : \"1\"\
    ;\n  }\n  return $str;\n}", "  $res = \"\";\n  for ($i = 0; $i < strlen($a); $i++)\
    \ {\n    $c = $a[$i] ^ $b[$i];\n    $res .= $c;\n  }\n  return $res;\n}", "\t\
    $result = '';\n\tif (strlen($a) == strlen($b)) {\n\t\tfor ($i = 0; $i < strlen($a);\
    \ $i++) {\n\t\t\t$result .= $a[$i] == $b[$i] ? '0' : '1';\n\t\t}\n\t}\n\treturn\
    \ $result;\n}", "   $return = '';\n   $len = strlen($a);\n   for ($i = 0; $i <\
    \ $len; $i++) {\n     $return .= $a[$i] ^ $b[$i];\n   }\n   return $return;\n\
    }\n\necho string_xor('010', '110') . \"\\n\";\necho string_xor('101', '101') .\
    \ \"\\n\";\necho string_xor('101', '111') . \"\\n\";\n", "    $aBin = bindec($a);\n\
    \    $bBin = bindec($b);\n    $xor = $aBin ^ $bBin;\n    return decbin($xor);\n\
    }\n", "  $result = '';\n  $xored = $a ^ $b;\n  // Converts decimal to binary and\
    \ get it's length.\n  $length = strlen(decbin($xored));\n  // Loops through binary\
    \ representation and add string of 1 or 0 to result variable.\n  for ($i = 0;\
    \ $i < $length; $i++) {\n    $result .= ($xored >> $i) & 1;\n  }\n  return $result;\n\
    }\n\necho string_xor('010', '110');", "  $result = '';\n  $a_len = strlen($a);\n\
    \  $b_len = strlen($b);\n  $longest = ($a_len > $b_len) ? $a_len : $b_len;\n \
    \ for ($i = 0; $i < $longest; $i++) {\n    $result .= (($a[$i] ^ $b[$i]) ? '1'\
    \ : '0');\n  }\n  return $result;\n}\n", "  $xor = '';\n  for ($i = 0; $i < strlen($a);\
    \ $i++) {\n    $xor .= ($a[$i] == $b[$i]) ? '0' : '1';\n  }\n  return $xor;\n\
    }\n", "  // your code here\n  $result = '';\n  for ($i = 0; $i < strlen($a); $i++)\
    \ {\n    if ($a[$i] === $b[$i]) {\n      $result .= '0';\n    } else {\n     \
    \ $result .= '1';\n    }\n  }\n  return $result;\n}", "    $result = '';\n   \
    \ $len = max(strlen($a), strlen($b));\n    $a = str_pad($a, $len, '0', STR_PAD_LEFT);\n\
    \    $b = str_pad($b, $len, '0', STR_PAD_LEFT);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        $result .= ($a[$i] xor $b[$i]) ? '1' : '0';\n    }\n    return $result;\n\
    }\n\necho string_xor('010', '110');", "  return implode(array_map(function($x,\
    \ $y) {\n    return (int)$x ^ (int)$y;\n  }, str_split($a), str_split($b)));\n\
    }\n\necho string_xor('010', '110');\necho \"\\n\";\n", "    $out = '';\n    for\
    \ ($i = 0; $i < strlen($a); $i++) {\n        $out .= $a[$i]^$b[$i];\n    }\n \
    \   return $out;\n}", "    $result = '';\n    for ($i = 0; $i < strlen($a); $i++)\
    \ {\n        $result .= $a[$i] ^ $b[$i];\n    }\n    return $result;\n}\n", " \
    \ $output = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $output .= $a[$i]\
    \ == $b[$i] ? '0' : '1';\n  }\n  return $output;\n}", "  $xor = '';\n  for ($i\
    \ = 0; $i < strlen($a); $i++) {\n    $xor .= ((int)$a[$i] ^ (int)$b[$i]);\n  }\n\
    \  return $xor;\n}", "  $str = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $str .= ($a[$i] ^ $b[$i]);\n  }\n  return $str;\n}", "    $n = strlen($a);\n\
    \    $c = \"\";\n    for ($i = 0; $i < $n; $i++) {\n        $c .= $a[$i] == $b[$i]\
    \ ? '0' : '1';\n    }\n    return $c;\n}", "  $result = '';\n  $i = 0;\n  while\
    \ ($i < strlen($a)) {\n    $result .= $a[$i] ^ $b[$i];\n    $i++;\n  }\n  return\
    \ $result;\n}\n", "  $res = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n   \
    \ $res .= $a[$i] ^ $b[$i];\n  }\n  return $res;\n}", "  return str_repeat(\"0\"\
    , (strlen($a) - strlen($b)) % strlen($a)) . $b ^ $a;\n}\necho string_xor('010',\
    \ '110') . \"<br>\";\necho string_xor('111', '111') . \"<br>\";\necho string_xor('1100',\
    \ '1010') . \"<br>\";\necho string_xor('11', '01') . \"<br>\";\n", "  // Here\
    \ we use str_split to convert string to array of characters.\n  // This is needed\
    \ to access individual characters in string in array format.\n  $a = str_split($a);\n\
    \  $b = str_split($b);\n  $r = array();\n\n  // Loop through each character in\
    \ string and perform XOR operation on it.\n  for ($i = 0; $i < count($a); $i++)\
    \ {\n    $r[] = $a[$i] ^ $b[$i];\n  }\n\n  // Return the result as a string.\n\
    \  return implode($r);\n}\n\necho string_xor('010', '110');", "    $length = strlen($a);\n\
    \    $out = '';\n    for ($i = 0; $i < $length; $i++) {\n        $out .= (int)\
    \ ($a[$i] !== $b[$i]);\n    }\n    return $out;\n}", "  $c = \"\";\n  for ($i\
    \ = 0; $i < strlen($a); $i++) {\n    $c .= $a[$i] == $b[$i] ? \"0\" : \"1\";\n\
    \  }\n  return $c;\n}\necho string_xor('010', '110');\necho \"\\n\";\n", "   \
    \ $r = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $r .= ($a[$i] ==\
    \ $b[$i]) ? '0' : '1';\n    }\n    return $r;\n}", "  $result = '';\n  for ($i\
    \ = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] xor $b[$i];\n  }\n  return\
    \ $result;\n}\n\n/* From: http://www.php.net/manual/en/function.str-split.php#107658\
    \ */", "  // Your code here\n  \n}\n", "  $a = str_split($a);\n  $b = str_split($b);\n\
    \  $result = '';\n  for ($i = 0; $i < count($a); $i++) {\n    $result .= $a[$i]\
    \ ^ $b[$i];\n  }\n  return $result;\n}\n", "  $a = str_split($a);\n  $b = str_split($b);\n\
    \  $result = '';\n  for ($i = 0; $i < count($a); $i++) {\n    $result .= ($a[$i]\
    \ ^ $b[$i]);\n  }\n  return $result;\n}\n\necho string_xor('010', '110') . PHP_EOL;",
  "  $r = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $r .= ($a[$i] ^ $b[$i])\
    \ ? '1' : '0';\n  }\n  return $r;\n}\n", "    $r = '';\n    for ($i = 0; $i <\
    \ strlen($a); $i++) {\n        $r .= $a[$i] ^ $b[$i];\n    }\n    return $r;\n\
    }\n", "  $o = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $o .= substr($a,\
    \ $i, 1) ^ substr($b, $i, 1);\n  }\n  return $o;\n}", "  $xor = array();\n  $split_a\
    \ = str_split($a);\n  $split_b = str_split($b);\n  $diff = abs(strlen($a) - strlen($b));\n\
    \  if (strlen($a) < strlen($b)) {\n    while ($diff--) {\n      array_unshift($split_a,\
    \ '0');\n    }\n  } else if (strlen($a) > strlen($b)) {\n    while ($diff--) {\n\
    \      array_unshift($split_b, '0');\n    }\n  }\n  for ($i = 0; $i < count($split_a);\
    \ $i++) {\n    $xor[] = (int)$split_a[$i] xor (int)$split_b[$i];\n  }\n  return\
    \ implode('', $xor);\n}\n\necho string_xor('010', '110') . \"\\n\";\necho string_xor('00',\
    \ '0') . \"\\n\";", "\t$a = (string)$a;\n\t$b = (string)$b;\n\t$xor = '';\n\t\
    for ($i = 0; $i < max(strlen($a), strlen($b)); $i++) {\n\t\t$xor .= $a[$i] ==\
    \ $b[$i] ? '0' : '1';\n\t}\n\treturn $xor;\n}\necho string_xor('101', '110');\n\
    echo '<br>';\n", "  $a = str_split($a);\n  $b = str_split($b);\n  $c = '';\n \
    \ for ($i = 0; $i < count($a); $i++) {\n    $c = $c . (($a[$i] + $b[$i]) % 2);\n\
    \  }\n  return $c;\n}\n\necho string_xor('010', '110') . PHP_EOL;\n", "  return\
    \ decbin(bindec($a) ^ bindec($b));\n}", "    // my solution\n    $a = str_split($a);\n\
    \    $b = str_split($b);\n    $result = [];\n    foreach ($a as $i => $char) {\n\
    \        if ($char == $b[$i]) {\n            $result[] = 0;\n        } else {\n\
    \            $result[] = 1;\n        }\n    }\n    return implode($result);\n\
    }\n", "    $result = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n      \
    \  $result .= ($a[$i] ^ $b[$i]);\n    }\n    return $result;\n}\n", "  // Your\
    \ code here\n}", "    $output = '';\n    $a = str_split($a);\n    $b = str_split($b);\n\
    \    for ($i = 0; $i < count($a); $i++) {\n        $output .= $a[$i] ^ $b[$i];\n\
    \    }\n    return $output;\n}\n", "  $length = max(strlen($a), strlen($b));\n\
    \  $a = str_pad($a, $length, \"0\", STR_PAD_LEFT);\n  $b = str_pad($b, $length,\
    \ \"0\", STR_PAD_LEFT);\n  $result = \"\";\n  for ($i = 0; $i < $length; $i++)\
    \ {\n    $result .= (intval($a[$i]) ^ intval($b[$i]));\n  }\n  return $result;\n\
    }", "    $a_bin = bin2hex($a);\n    $b_bin = bin2hex($b);\n    $result = '';\n\
    \    for ($i = 0; $i < strlen($a_bin); $i++) {\n        $result .= (hexdec($a_bin[$i])\
    \ ^ hexdec($b_bin[$i]));\n    }\n    return hex2bin($result);\n}", "  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= (($a[$i] == '1')\
    \ != ($b[$i] == '1')) ? '1' : '0';\n  }\n  return $result;\n}", "  $result = '';\n\
    \  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n  }\n\
    \  return $result;\n}\n\necho string_xor('010', '110');", "  // Your code here\n\
    }\n```\n", "\t$a = str_split($a);\n\t$b = str_split($b);\n\t$result = '';\n\t\
    for ($i = 0; $i < count($a); $i++) {\n\t\t$result .= $a[$i] ^ $b[$i];\n\t}\n\t\
    return $result;\n}\n", "  $a = str_split($a);\n  $b = str_split($b);\n  $result\
    \ = [];\n  foreach ($a as $key => $value) {\n    if ($a[$key] == $b[$key]) {\n\
    \      $result[] = 0;\n    } else {\n      $result[] = 1;\n    }\n  }\n  return\
    \ implode('', $result);\n}\n", "  // Your code here\n}\n", "    return implode(array_map(function($x,\
    \ $y) {\n      return $x ^ $y;\n    }, str_split($a), str_split($b)));\n}", " \
    \ $out = \"\";\n  $strlen = strlen($a);\n  for ($i = 0; $i < $strlen; $i++) {\n\
    \    $out .= $a[$i] ^ $b[$i];\n  }\n  return $out;\n}\n", "  // Your code here!\n\
    \  $output = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    if ($a[$i] ===\
    \ $b[$i]) {\n      $output .= '0';\n    } else {\n      $output .= '1';\n    }\n\
    \  }\n  return $output;\n}", "    $aArr = str_split($a);\n    $bArr = str_split($b);\n\
    \    $res = '';\n    for ($i = 0; $i < count($aArr); $i++) {\n        $res .=\
    \ $aArr[$i] == $bArr[$i] ? '0' : '1';\n    }\n    return $res;\n}\n", "    $result\
    \ = '';\n    // your code here\n    for ($i = 0; $i < strlen($a); $i++) {\n  \
    \      $result .= ($a[$i] == $b[$i]) ? '0' : '1';\n    }\n    return $result;\n\
    }", "  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .=\
    \ ($a[$i] == $b[$i]) ? \"0\" : \"1\";\n  }\n  return $result;\n}\n", "  $len =\
    \ max(strlen($a), strlen($b));\n  $a = str_pad($a, $len, '0', STR_PAD_LEFT);\n\
    \  $b = str_pad($b, $len, '0', STR_PAD_LEFT);\n  $result = \"\";\n  for ($i =\
    \ 0; $i < $len; $i++) {\n    $result .= $a[$i] ^ $b[$i];\n  }\n  return $result;\n\
    }\n", "    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result\
    \ .= $a[$i] ^ $b[$i];\n    }\n    return $result;\n}", "    $a = str_split($a);\n\
    \    $b = str_split($b);\n    $res = [];\n    for ($i = 0; $i < count($a); $i++)\
    \ {\n        $res[] = $a[$i] ^ $b[$i];\n    }\n    return implode('', $res);\n\
    }\necho string_xor('010', '110');", "  $aLen = strlen($a);\n  $bLen = strlen($b);\n\
    \  $i = 0;\n  $result = '';\n  if ($aLen < $bLen) {\n    $a = str_pad($a, $bLen,\
    \ '0', STR_PAD_LEFT);\n  } else {\n    $b = str_pad($b, $aLen, '0', STR_PAD_LEFT);\n\
    \  }\n  while ($i < $aLen) {\n    $result .= $a[$i] ^ $b[$i];\n    $i++;\n  }\n\
    \  return $result;\n}\n", "  return implode(array_map(function($x, $y) {\n   \
    \ return $x ^ $y;\n  }, str_split($a), str_split($b)));\n}\n", "  $result = '';\n\
    \  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n  }\n\
    \  return $result;\n}\n", "  $result = '';\n  for ($i = 0; $i < strlen($a); $i++)\
    \ {\n    $result .= (int)$a[$i] ^ (int)$b[$i];\n  }\n  return $result;\n}\n",
  "  $str = '';\n  $a = str_split($a);\n  $b = str_split($b);\n  for ($i = 0; $i <\
    \ count($a); $i++) {\n    $str .= $a[$i] ^ $b[$i];\n  }\n  return $str;\n}\n",
  "\t$a = str_split($a);\n\t$b = str_split($b);\n\t$output = '';\n\tfor ($i = 0; $i\
    \ < count($a); $i++) {\n\t\t$output .= $a[$i] ^ $b[$i];\n\t}\n\treturn $output;\n\
    }\n", "  //convert to numbers\n  $aNum = bindec($a);\n  $bNum = bindec($b);\n\
    \  //perform bitwise xor\n  $xor = $aNum ^ $bNum;\n  //convert back to binary\n\
    \  $xor = decbin($xor);\n  //return as string\n  return (string)$xor;\n}", " \
    \   $r = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $r .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $r;\n}\necho string_xor('010', '110');\necho \"\
    \\n\";\n", "  $a = (string) $a;\n  $b = (string) $b;\n  $len = max(strlen($a),\
    \ strlen($b));\n  $res = '';\n  for ($i = 0; $i < $len; $i++) {\n    $l = isset($a[$i])\
    \ ? $a[$i] : '0';\n    $r = isset($b[$i]) ? $b[$i] : '0';\n    $res .= $l ^ $r;\n\
    \  }\n  return $res;\n}\n\necho string_xor('010', '110');", "  $result = '';\n\
    \  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] != $b[$i] ? '1'\
    \ : '0';\n  }\n  return $result;\n}\n\n$tests = array(\n    array('010', '110',\
    \ '100'),\n    array('000', '111', '111'),\n    array('1101', '101', '1000'),\n\
    \    array('110', '110', '000'),\n    array('11101', '101', '11000'),\n    array('1010101010101010101010101010101010101010101010101010101010101010',\
    \ '1010101010101010101010101010101010101010101010101010101010101010', '0'),\n\
    \    array('11', '1', '10'),\n    array('110101', '1111', '110000'),\n    array('101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
  "    $r = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $r .= $a[$i] ^\
    \ $b[$i];\n    }\n    return $r;\n}\n", "  $aLength = strlen($a);\n  $bLength\
    \ = strlen($b);\n  $result = '';\n  if ($aLength > $bLength) {\n    $b = str_pad($b,\
    \ $aLength, '0', STR_PAD_LEFT);\n  } else if ($bLength > $aLength) {\n    $a =\
    \ str_pad($a, $bLength, '0', STR_PAD_LEFT);\n  }\n  for ($i = 0; $i < strlen($a);\
    \ $i++) {\n    $result .= ($a[$i] xor $b[$i]) ? '1' : '0';\n  }\n  return $result;\n\
    }\necho string_xor('010', '110') . PHP_EOL;", "\t//split strings into arrays and\
    \ XOR the corresponding bits\n\t$a = str_split($a);\n\t$b = str_split($b);\n\t\
    $c = array();\n\tforeach ($a as $key => $val) {\n\t\t$c[] = $val^$b[$key];\n\t\
    }\n\treturn implode($c);\n}\n", "    $len = strlen($a);\n    if ($len === strlen($b))\
    \ {\n        $result = '';\n        for ($i = 0; $i < $len; $i++) {\n        \
    \    $result .= (string) ((int) $a[$i] ^ (int) $b[$i]);\n        }\n        return\
    \ $result;\n    }\n    return false;\n}", "\t$out = '';\n\tfor ($i = 0; $i < strlen($a);\
    \ $i++) {\n\t\t$out .= $a[$i] == $b[$i] ? '0' : '1';\n\t}\n\treturn $out;\n}\n",
  "  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= (int)$a[$i]\
    \ ^ (int)$b[$i];\n  }\n  return $result;\n}\n", "  $output = \"\";\n  $a = str_split($a);\n\
    \  $b = str_split($b);\n  for ($i = 0; $i < count($a); $i++) {\n    if ($a[$i]\
    \ === \"1\" && $b[$i] === \"1\") {\n      $output .= \"0\";\n    } else if ($a[$i]\
    \ === \"0\" && $b[$i] === \"0\") {\n      $output .= \"0\";\n    } else {\n  \
    \    $output .= \"1\";\n    }\n  }\n  return $output;\n}", "  $c = '';\n  for\
    \ ($i = 0; $i < strlen($a); $i++) {\n    $c .= (int)$a[$i] ^ (int)$b[$i];\n  }\n\
    \  return $c;\n}\n", "    $length = max(strlen($a), strlen($b));\n    $a = str_pad($a,\
    \ $length, \"0\", STR_PAD_LEFT);\n    $b = str_pad($b, $length, \"0\", STR_PAD_LEFT);\n\
    \    $result = '';\n    for ($i = 0; $i < $length; $i++) {\n        $result .=\
    \ ((int)$a[$i] ^ (int)$b[$i]);\n    }\n    return $result;\n}", "    $aArr = str_split($a);\n\
    \    $bArr = str_split($b);\n    $arr = [];\n    for ($i = 0; $i < count($aArr);\
    \ $i++) {\n        if ($aArr[$i] == $bArr[$i]) {\n            $arr[] = 0;\n  \
    \      } else {\n            $arr[] = 1;\n        }\n    }\n    return implode('',\
    \ $arr);\n}", "  $a = str_split($a);\n  $b = str_split($b);\n  $c = [];\n  foreach\
    \ (range(0, count($a)-1) as $i) {\n    $c[] = $a[$i] xor $b[$i];\n  }\n  return\
    \ implode('', $c);\n}", "  $c = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $c .= $a[$i] == $b[$i] ? '0' : '1';\n  }\n  return $c;\n}\n", "   $result\
    \ = '';\n   for ($i = 0; $i < strlen($a); $i++) {\n       $result .= (((int)$a[$i])^((int)$b[$i]))\
    \ ? '1' : '0';\n   }\n   return $result;\n}", "  $a = (string) $a;\n  $b = (string)\
    \ $b;\n  $result = '';\n  for ($i = 0; $i < max(strlen($a), strlen($b)); $i++)\
    \ {\n    $result .= ($a[$i] xor $b[$i]) ? '1' : '0';\n  }\n  return $result;\n\
    }\n", "  return array_reduce(str_split($a), function($acc, $val) use ($b) {\n\
    \    $i = $acc[1];\n    $acc[0] .= ($val != $b[$i]) ? '1' : '0';\n    $acc[1]\
    \ += 1;\n    return $acc;\n  }, ['', 0])[0];\n}\n", "    $b1 = decbin(hexdec($a));\n\
    \    $b2 = decbin(hexdec($b));\n    $b1 = str_pad($b1, 8, \"0\", STR_PAD_LEFT);\n\
    \    $b2 = str_pad($b2, 8, \"0\", STR_PAD_LEFT);\n    echo \"$b1\\n\";\n    echo\
    \ \"$b2\\n\";\n    $xor = \"\";\n    for ($i = 0; $i < strlen($b1); $i++) {\n\
    \        $xor .= $b1[$i] == $b2[$i] ? \"0\" : \"1\";\n    }\n    return dechex(bindec($xor));\n\
    }\necho \"$a ^ $b = \".string_xor($a, $b).\"\\n\";", "    $aBinStr = decbin(hexdec($a));\n\
    \    $bBinStr = decbin(hexdec($b));\n    return dechex(bindec($aBinStr ^ $bBinStr));\n\
    }", "  $result = '';\n  $length = max(strlen($a), strlen($b));\n  for ($i = 0;\
    \ $i < $length; $i++) {\n    $a_bit = strlen($a) - $i - 1 >= 0 ? $a[strlen($a)\
    \ - $i - 1] : '0';\n    $b_bit = strlen($b) - $i - 1 >= 0 ? $b[strlen($b) - $i\
    \ - 1] : '0';\n    $result = (string)((int)$a_bit ^ (int)$b_bit) . $result;\n\
    \  }\n  return $result;\n}\n", "  $result = '';\n  $length = strlen($a);\n  for\
    \ ($i = 0; $i < $length; $i++) {\n    $result .= (intval($a[$i]) ^ intval($b[$i]))\
    \ ? '1' : '0';\n  }\n  return $result;\n}\n\nprint string_xor('110', '010');\n\
    print string_xor('10', '10');\nprint string_xor('1010', '1010');\nprint string_xor('1010',\
    \ '111');", "  $length = max(strlen($a), strlen($b));\n  $res = '';\n  for ($i\
    \ = 0; $i < $length; $i++) {\n    $res .= $a[$i] ^ $b[$i];\n  }\n  return $res;\n\
    }\n", "  // TODO\n}", "  return array_reduce(str_split($a), function($res, $val)\
    \ use ($b) {\n    return $res .= $val ^ $b[$res->key()];\n  }, '');\n}", "   \
    \ $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .=\
    \ ($a[$i] == $b[$i]) ? '0' : '1';\n    }\n    return $result;\n}", "  $result\
    \ = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n", "  $len = strlen($a);\n  $r = '';\n  for ($i =\
    \ 0; $i < $len; $i++) {\n    $r .= $a[$i] ^ $b[$i];\n  }\n  return $r;\n}\n\n\
    print string_xor('010', '110') . \"\\n\";\nprint string_xor('1010101', '0101010')\
    \ . \"\\n\";\n", "    return \"\";\n}", "  $r = '';\n  for ($i = 0; $i < strlen($a);\
    \ $i++) {\n    $r .= ($a[$i] ^ $b[$i]) ? '1' : '0';\n  }\n  return $r;\n}\n",
  "    $str = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $str .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $str;\n}\n", "\t$xor = array();\n\tfor ($i = 0;\
    \ $i < strlen($a); $i++) {\n\t\tif ($a[$i] != $b[$i]) {\n\t\t\t$xor[] = '1';\n\
    \t\t} else {\n\t\t\t$xor[] = '0';\n\t\t}\n\t}\n\treturn implode('', $xor);\n}\n\
    echo string_xor('010', '110');", "    $an = strlen($a);\n    $bn = strlen($b);\n\
    \    if ($an > $bn) {\n        $b = str_pad($b, $an, '0', STR_PAD_LEFT);\n   \
    \ } elseif ($bn > $an) {\n        $a = str_pad($a, $bn, '0', STR_PAD_LEFT);\n\
    \    }\n    $output = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n     \
    \   $output .= ($a[$i] == $b[$i]) ? '0' : '1';\n    }\n    return $output;\n}",
  "    $res = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $res .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $res;\n}", "  $len = max(strlen($a), strlen($b));\n\
    \  $binA = str_pad($a, $len, \"0\", STR_PAD_LEFT);\n  $binB = str_pad($b, $len,\
    \ \"0\", STR_PAD_LEFT);\n  $result = \"\";\n  for ($i = 0; $i < $len; $i++) {\n\
    \    $result .= $binA[$i] ^ $binB[$i];\n  }\n  return $result;\n}\n", "   return\
    \ substr(trim(base_convert(base_convert($a, 2, 10) ^ base_convert($b, 2, 10),\
    \ 10, 2)), -strlen($a));\n}", "  // Your code here\n}", "    $c = '';\n    for\
    \ ($i = 0; $i < strlen($a); $i++) {\n        $c .= $a[$i] == $b[$i] ? '0' : '1';\n\
    \    }\n    return $c;\n}\n\necho string_xor('010', '110') . \"\\n\";\n", "  \
    \  $len = max(strlen($a), strlen($b));\n    $a = str_pad($a, $len, '0', STR_PAD_LEFT);\n\
    \    $b = str_pad($b, $len, '0', STR_PAD_LEFT);\n    $c = '';\n    for ($i = 0;\
    \ $i < $len; $i++) {\n        $c .= ($a[$i] != $b[$i]) ? '1' : '0';\n    }\n \
    \   return $c;\n}", "\t$xor = strlen($a) > strlen($b) ? $a : $b;\n\t$and = strlen($a)\
    \ < strlen($b) ? $a : $b;\n\t$result = '';\n\t\n\tfor ($i = 0; $i < strlen($xor);\
    \ $i++) {\n\t\t$r = isset($and[$i]) ? $xor[$i] xor $and[$i] : $xor[$i];\n\t\t\
    $result .= $r;\n\t}\n\t\n\treturn $result;\n}", "  $aBin = str_split($a);\n  $bBin\
    \ = str_split($b);\n  $len = max(strlen($a), strlen($b));\n  $result = '';\n \
    \ for ($i = 0; $i < $len; $i++) {\n    $result .= $aBin[$i] ^ $bBin[$i];\n  }\n\
    \  return $result;\n}\n\necho string_xor('010', '110') . \"\\n\";\necho string_xor('1010',\
    \ '1011') . \"\\n\";\necho string_xor('1010', '11') . \"\\n\";\necho string_xor('0',\
    \ '1') . \"\\n\";\necho string_xor('1', '0') . \"\\n\";\necho string_xor('1',\
    \ '1') . \"\\n\";\necho string_xor('0', '0') . \"\\n\";\necho string_xor('00',\
    \ '00') . \"\\n\";\necho string_xor('01', '01') . \"\\n\";\necho string_xor('01',\
    \ '00') . \"\\n\";\necho string_xor('10', '00') . \"\\n\";\necho string_xor('1',\
    \ '0') . \"\\n\";\necho string_xor('0', '1') . \"\\n\";\necho string_xor('10',\
    \ '10') . \"\\n\";\necho string_xor('01', '10') . \"\\n\";\necho string_xor('01',\
    \ '10') . \"\\n\";\necho string_xor('01', '10') . \"\\n\";\necho string_xor('01',\
    \ '10') . \"\\n\";\necho string_xor('01', '10') . \"\\n\";\necho string_xor('01',\
    \ '10') . \"\\n\";\necho string_xor('01', '10') . \"\\n\";\necho string_xor('01',\
    \ '10') . \"\\n\";\necho string_xor('01', '10') . \"\\n\";\necho string_xor('01',\
    \ '10') . \"\\n\";\necho string_xor('01', '10') . \"\\n\";\necho string_xor",
  "    $xor = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $xor .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $xor;\n}\n", "    return array_reduce(range(0,\
    \ strlen($a) - 1), function($r, $i) use ($a, $b) {\n        return $r . ($a[$i]\
    \ ^ $b[$i]);\n    }, '');\n}", "    // Your code here\n}", "    $output = \"\"\
    ;\n    for ($i = 0; $i < strlen($a); $i++) {\n        $temp = (((int)$a[$i]) ^\
    \ ((int)$b[$i]));\n        $output .= $temp;\n    }\n    return $output;\n}\n\
    echo(string_xor('010', '110'));", "}\necho string_xor('010', '110');\necho \"\\\
    n\";\n", "    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c\
    \ .= $a[$i] ^ $b[$i];\n    }\n    return $c;\n}\n", "  return sprintf(\"%0\".(max(strlen($a),\
    \ strlen($b))).\"b\", $a ^ $b);\n}\n", "  $aBin = str_split($a);\n  $bBin = str_split($b);\n\
    \  $res = '';\n  for ($i = 0; $i < count($aBin); $i++) {\n    $res .= $aBin[$i]\
    \ ^ $bBin[$i];\n  }\n  return $res;\n}\n\necho string_xor('010', '110');\necho\
    \ '<br>';\necho string_xor('10', '11');\necho '<br>';\necho string_xor('10', '10');\n\
    echo '<br>';\necho string_xor('101', '111');\necho '<br>';\necho string_xor('101',\
    \ '101');\necho '<br>';\necho string_xor('101', '100');", "  $a = str_split($a);\n\
    \  $b = str_split($b);\n  $result = array();\n  for ($i = 0; $i < count($a); $i++)\
    \ {\n    $result[] = $a[$i] == $b[$i] ? '0' : '1';\n  }\n  return implode($result);\n\
    }\n\n/* Test cases\nassert(string_xor('010', '110') == '100');\nassert(string_xor('000',\
    \ '101') == '101');\nassert(string_xor('111', '111') == '000');\nassert(string_xor('001',\
    \ '111') == '110');\n*/", "    $res = '';\n    for ($i = 0; $i < strlen($a); $i++)\
    \ {\n        $a_num = $a[$i];\n        $b_num = $b[$i];\n        $res .= $a_num\
    \ ^ $b_num;\n    }\n    return $res;\n}\n", "  //\n  // Your code here\n  //\n\
    \  $res = \"\";\n  for($i = 0; $i < strlen($a); $i++){\n    if($a[$i] == $b[$i]){\n\
    \      $res .= \"0\";\n    }else{\n      $res .= \"1\";\n    }\n  }\n  return\
    \ $res;\n}\n", "\treturn array_reduce(\n\t\tarray_map(\n\t\t\tfunction($n, $m)\
    \ {\n\t\t\t\treturn $n ^ $m;\n\t\t\t}, \n\t\t\tstr_split($a), \n\t\t\tstr_split($b)\n\
    \t\t),\n\t\tfunction($c, $n) {\n\t\t\treturn $c . $n;\n\t\t},\n\t\t''\n\t);\n\
    }\necho string_xor('010', '110');\necho \"\\n\";\n", "  $a = str_split($a);\n\
    \  $b = str_split($b);\n  $xor = [];\n  for ($i = 0; $i < count($a); $i++) {\n\
    \    $xor[] = $a[$i] ^ $b[$i];\n  }\n  return implode('', $xor);\n}\n\necho string_xor('010',\
    \ '110');", "  $result = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $aChar\
    \ = $a[$i];\n    $bChar = $b[$i];\n    $result .= ($aChar == $bChar) ? 0 : 1;\n\
    \  }\n  return $result;\n}\n\nprint_r(string_xor('010', '110'));", "    return\
    \ implode(array_map(function($x, $y) {\n        return $x ^ $y;\n    }, str_split($a),\
    \ str_split($b)));\n}", "  $result = '';\n  $length = strlen($a);\n  for ($i =\
    \ 0; $i < $length; $i++) {\n    $result .= $a[$i] ^ $b[$i];\n  }\n  return $result;\n\
    }\n", "  // Your code here\n  \n}\n```\n", "    $a_binary = decbin(octdec($a));\n\
    \    $b_binary = decbin(octdec($b));\n    $result = '';\n    for ($i = 0; $i <\
    \ strlen($a_binary); $i++) {\n        $result .= $a_binary[$i] ^ $b_binary[$i];\n\
    \    }\n    return $result;\n}\n", "  $o = '';\n  for ($i = 0; $i < strlen($a);\
    \ $i++) {\n    $o .= ($a[$i] == $b[$i]) ? '0' : '1';\n  }\n  return $o;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
