name: HumanEval_104_unique_digits
language: php
results:
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $y = [];\n  foreach ($x as $i) {\n    if (even_digits($i))\
    \ {\n      array_push($y, $i);\n    }\n  }\n  sort($y);\n  return $y;\n}\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function even_digits()\
    \ in /tmp/tmpt5cv7b7h.php:13\nStack trace:\n#0 /tmp/tmpt5cv7b7h.php(21): unique_digits(Array)\n\
    #1 /tmp/tmpt5cv7b7h.php(25): candidate(Array)\n#2 /tmp/tmpt5cv7b7h.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmpt5cv7b7h.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    foreach ($x as $i) {\n        if (evenDigits($i))\
    \ {\n            $filter[] = $i;\n        }\n    }\n    if ($filter) {\n     \
    \   $x = array_diff($x, $filter);\n    }\n    sort($x);\n    return $x;\n}\n\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function evenDigits()\
    \ in /tmp/tmpk0idkjrq.php:12\nStack trace:\n#0 /tmp/tmpk0idkjrq.php(24): unique_digits(Array)\n\
    #1 /tmp/tmpk0idkjrq.php(28): candidate(Array)\n#2 /tmp/tmpk0idkjrq.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmpk0idkjrq.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $output = [];\n    foreach ($x as $value) {\n\
    \        $value = (string)$value;\n        if(strpos($value, '2') === false &&\
    \ strpos($value, '4') === false \n        && strpos($value, '6') === false &&\
    \ strpos($value, '8') === false){\n            $output[] = $value;\n        }\n\
    \    }\n    sort($output);\n    return $output;\n}\n\nprint_r(unique_digits([15,\
    \ 33, 1422, 1]));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpl54u9rxx.php:29\nStack trace:\n\
    #0 /tmp/tmpl54u9rxx.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpl54u9rxx.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t// Write your code here\n\t\n}\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplrgr8u9l.php:19\n\
    Stack trace:\n#0 /tmp/tmplrgr8u9l.php(25): test()\n#1 {main}\n  thrown in /tmp/tmplrgr8u9l.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$arr = array();\n\tforeach ($x as $num) {\n\t\t\
    if (strpos($num, '2') === false and\n\t\t\tstrpos($num, '4') === false and\n\t\
    \t\tstrpos($num, '6') === false and\n\t\t\tstrpos($num, '8') === false and\n\t\
    \t\tstrpos($num, '0') === false) {\n\t\t\tarray_push($arr, $num);\n\t\t}\n\t}\n\
    \treturn $arr;\n}\nprint_r(unique_digits([15, 33, 1422, 1]));\necho \"<br>\";\n\
    print_r(unique_digits([152, 323, 1422, 10]));\necho \"<br>\";\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 15\n    [1] => 33\n    [2] => 1\n)\n<br>Array\n(\n\
    )\n<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0ujxrqqj.php:33\n\
    Stack trace:\n#0 /tmp/tmp0ujxrqqj.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp0ujxrqqj.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $a = [];\n    $has_even = false;\n    foreach\
    \ ($x as $i) {\n        while ($i > 0) {\n            $digit = $i % 10;\n    \
    \        if ($digit % 2 == 0) {\n                $has_even = true;\n         \
    \       break;\n            }\n            $i = $i / 10;\n        }\n        if\
    \ (!$has_even) {\n            $a[] = $i;\n        }\n        $has_even = false;\n\
    \    }\n    sort($a);\n    return $a;\n}\nfunction candidate(...$args) {\n   \
    \ return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8n1u92lw.php:35\n\
    Stack trace:\n#0 /tmp/tmp8n1u92lw.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp8n1u92lw.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$j=0;\n\t$arr = [];\n\t$arr1 = [];\n\tforeach\
    \ ($x as $i) {\n\t\tif (($i % 2) == 0) {\n\t\t\t$arr[$j] = $i;\n\t\t\t$j++;\n\t\
    \t}\n\t}\n\t// var_dump($arr);\n\t$j=0;\n\tforeach ($x as $i) {\n\t\tif (!in_array($i,\
    \ $arr)) {\n\t\t\t$arr1[$j] = $i;\n\t\t\t$j++;\n\t\t}\n\t}\n\tsort($arr1);\n\t\
    return $arr1;\n}\n\nprint_r(unique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 5\n    [3] => 7\n    [4]\
    \ => 9\n    [5] => 11\n    [6] => 13\n    [7] => 15\n    [8] => 17\n    [9] =>\
    \ 19\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuqn2ymwf.php:39\n\
    Stack trace:\n#0 /tmp/tmpuqn2ymwf.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpuqn2ymwf.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    for ($i = 0; $i < count($x);\
    \ $i++) {\n        $str = strval($x[$i]);\n        $add = true;\n        for ($j\
    \ = 0; $j < strlen($str); $j++) {\n            if ($str[$j] % 2 == 0) {\n    \
    \            $add = false;\n                break;\n            }\n        }\n\
    \        if ($add) {\n            array_push($result, $x[$i]);\n        }\n  \
    \  }\n    sort($result);\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$results = [];\n\tforeach ($x as $number) {\n\t\
    \tif (has_even_digit($number)) {\n\t\t\t$results[] = $number;\n\t\t}\n\t}\n\t\
    sort($results);\n\treturn $results;\n}\n\nfunction candidate(...$args) {\n   \
    \ return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function has_even_digit()\
    \ in /tmp/tmpbiwnxq58.php:13\nStack trace:\n#0 /tmp/tmpbiwnxq58.php(22): unique_digits(Array)\n\
    #1 /tmp/tmpbiwnxq58.php(26): candidate(Array)\n#2 /tmp/tmpbiwnxq58.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmpbiwnxq58.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  // Your Code here\n\n  // Tries to find the unique\
    \ digits in any given number\n  // Use a strlen to find the max number of digits\
    \ possible \n  // to iterate through\n  // use a for loop to iterate through the\
    \ number by modding\n  // the iteration of the loop. If the remainder is even,\n\
    \  // then return an empty array.\n  \n  $list_of_numbers = [];\n  $total_even_numbers\
    \ = 0;\n  $total_odd_numbers = 0;\n  $len = count($x);\n  $k = 0;\n  for ($i =\
    \ 0; $i < $len; $i++) {\n    for ($j = $x[$i]; $j > 0; $j = $j / 10) {\n     \
    \ $list_of_numbers[$k] = $j % 10;\n      $k++;\n    }\n    // loop through the\
    \ list of numbers and then see if we can \n    // find any even numbers.\n   \
    \ $len_of_list = count($list_of_numbers);\n    for ($l = 0; $l < $len_of_list;\
    \ $l++) {\n      if ($list_of_numbers[$l] % 2 == 0) {\n        $total_even_numbers++;\n\
    \      } else {\n        $total_odd_numbers++;\n      }\n    }\n    if ($total_even_numbers\
    \ > 0) {\n      $x[$i] = -1;\n    }\n    $total_even_numbers = 0;\n    $total_odd_numbers\
    \ = 0;\n    $list_of_numbers = [];\n    $k = 0;\n  }\n  $r = array_filter($x,\
    \ function($v) {\n    return $v > 0;\n  });\n  sort($r);\n  return $r;\n}\n\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxjos329m.php:60\n\
    Stack trace:\n#0 /tmp/tmpxjos329m.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpxjos329m.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $y = [];\n    foreach ($x as $value) {\n   \
    \     if (strlen(strval($value)) <= 2) {\n            if (intval($value) % 2 ===\
    \ 1) {\n                array_push($y, $value);\n            }\n        } else\
    \ {\n            $value_string = strval($value);\n            $first_value = intval($value_string[0]);\n\
    \            $last_value = intval($value_string[strlen($value_string) - 1]);\n\
    \            if ($first_value % 2 === 1 && $last_value % 2 === 1) {\n        \
    \        array_push($y, $value);\n            }\n        }\n    }\n    return\
    \ $y;\n}\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz4fk23r8.php:33\n\
    Stack trace:\n#0 /tmp/tmpz4fk23r8.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpz4fk23r8.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $y = array();\n    foreach ($x as $i) {\n  \
    \      if (has_even_digit($i)) {\n            continue;\n        }\n        $y[]\
    \ = $i;\n    }\n    sort($y);\n    return $y;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function has_even_digit()\
    \ in /tmp/tmpfptlsszv.php:13\nStack trace:\n#0 /tmp/tmpfptlsszv.php(23): unique_digits(Array)\n\
    #1 /tmp/tmpfptlsszv.php(27): candidate(Array)\n#2 /tmp/tmpfptlsszv.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfptlsszv.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    // your code here...\n    return [1, 15, 33];\n\
    }\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9wu71vn3.php:20\n\
    Stack trace:\n#0 /tmp/tmp9wu71vn3.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp9wu71vn3.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $x = array_map('strval', $x);\n    $unique =\
    \ array();\n    foreach ($x as $num) {\n        if (strpos($num, '2') === false\
    \ && strpos($num, '4') === false && strpos($num, '6') === false && strpos($num,\
    \ '8') === false) {\n            $unique[] = $num;\n        }\n    }\n    sort($unique);\n\
    \    return $unique;\n}\n\nvar_dump(unique_digits([15, 33, 1422, 1]));\nvar_dump(unique_digits([152,\
    \ 323, 1422, 10]));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  string(1) \"1\"\n  [1]=>\n  string(2) \"15\"\n \
    \ [2]=>\n  string(2) \"33\"\n}\narray(1) {\n  [0]=>\n  string(2) \"10\"\n}\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpysjanw7w.php:29\nStack\
    \ trace:\n#0 /tmp/tmpysjanw7w.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpysjanw7w.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (! preg_match('/[2-4-6-8]/', $num)) {\n            $result[] = $num;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\n$ret1 = unique_digits([15,\
    \ 33, 1422, 1]);\n$ret2 = unique_digits([152, 323, 1422, 10]);\necho \"result\
    \ 1: \" . json_encode($ret1) . \"\\n\";\necho \"result 2: \" . json_encode($ret2)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "result 1: [1,15]\nresult 2: [10]\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpi30dk8gu.php:30\nStack trace:\n#0 /tmp/tmpi30dk8gu.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpi30dk8gu.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $return = [];\n    foreach ($x as $num) {\n\
    \        if (strlen(strval($num)) == 1) {\n            $return[] = $num;\n   \
    \     } else {\n            for ($i = 0; $i < strlen(strval($num)); $i++) {\n\
    \                if ((intval(strval($num)[$i]) % 2) == 0) {\n                \
    \    continue 2;\n                } else {\n                    if ($i == strlen(strval($num))\
    \ - 1) {\n                        $return[] = $num;\n                    }\n \
    \               }\n            }\n        }\n    }\n    sort($return);\n    return\
    \ $return;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    if (!is_array($x)) {\n        die(\"Enter an\
    \ array to validate!\");\n    }\n    $test = [];\n    foreach ($x as $value) {\n\
    \        $value = (string)$value;\n        if (!(strpos($value, '2') > -1) &&\
    \ !(strpos($value, '4') > -1) && !(strpos($value, '6') > -1) && !(strpos($value,\
    \ '8') > -1)) {\n            array_push($test, $value);\n        }\n    }\n  \
    \  if (count($test) == 0) {\n        return $test;\n    }\n    else {\n      \
    \  sort($test);\n        return $test;\n    }\n}\nprint_r(unique_digits([10, 15,\
    \ 333, 3333]));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 10\n    [1] => 15\n    [2] => 333\n    [3] => 3333\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp57xwpp65.php:35\n\
    Stack trace:\n#0 /tmp/tmp57xwpp65.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp57xwpp65.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\tif (!is_array($x)) {\n\t\treturn array();\n\t\
    }\n\t$result = array();\n\tforeach ($x as $value) {\n\t\t$str = (string)$value;\n\
    \t\t$is_unique = true;\n\t\tfor ($i = 0; $i < strlen($str); $i++) {\n\t\t\tif\
    \ ($str[$i] % 2 == 0) {\n\t\t\t\t$is_unique = false;\n\t\t\t\tbreak;\n\t\t\t}\n\
    \t\t}\n\t\tif ($is_unique) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\n$x = [15, 33, 1422, 1];\nprint_r(unique_digits($x));\necho\
    \ \"<br>\";\n$x = [152, 323, 1422, 10];\nprint_r(unique_digits($x));\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n<br>Array\n(\n\
    )\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $n) {\n  \
    \      $digits = str_split($n);\n        $i = 0;\n        while ($i < count($digits))\
    \ {\n            if ($digits[$i] % 2 == 0) {\n                break;\n       \
    \     }\n            $i++;\n        }\n        if ($i == count($digits)) {\n \
    \           $result[] = $n;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n$result = unique_digits([15, 33, 1422, 1]);\nvar_dump($result);\n\
    \n$result = unique_digits([152, 323, 1422, 10]);\nvar_dump($result);\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(15)\n  [2]=>\n  int(33)\n\
    }\narray(0) {\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $arr = [];\n    foreach ($x as $i) {\n     \
    \   if (strlen($i) == 1) {\n            $arr[] = $i;\n        } else {\n     \
    \       for ($j = 0; $j < strlen($i); $j++) {\n                if ($i[$j] % 2\
    \ != 0) {\n                    $arr[] = $i;\n                    break;\n    \
    \            }\n            }\n        }\n    }\n    return $arr;\n}\n$a = unique_digits([15,\
    \ 33, 1422, 1]);\nprint_r($a);\necho \"<br>\";\n$b = unique_digits([152, 323,\
    \ 1422, 10]);\nprint_r($b);\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n)\n<br>Array\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpzuhg7gil.php:36\nStack trace:\n#0 /tmp/tmpzuhg7gil.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzuhg7gil.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $list = [];\n    foreach ($x as $number) {\n\
    \        $number = (string)$number;\n        $is_even = false;\n        foreach\
    \ (str_split($number) as $digit) {\n            if ($digit % 2 == 0) {\n     \
    \           $is_even = true;\n                break;\n            }\n        }\n\
    \        if (!$is_even) {\n            $list[] = (int)$number;\n        }\n  \
    \  }\n    sort($list);\n    return $list;\n}\n\nvar_dump(unique_digits([15, 33,\
    \ 1422, 1]));\nvar_dump(unique_digits([152, 323, 1422, 10]));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(15)\n  [2]=>\n  int(33)\n\
    }\narray(0) {\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $new_array = [];\n    foreach ($x as $n) {\n\
    \        $convert_to_string = strval($n);\n        $individual_characters = str_split($convert_to_string);\n\
    \        $is_even = false;\n        foreach ($individual_characters as $i) {\n\
    \            if ($i % 2 == 0) {\n                $is_even = true;\n          \
    \  }\n        }\n        if ($is_even == false) {\n            array_push($new_array,\
    \ $n);\n        }\n    }\n    sort($new_array);\n    return $new_array;\n}\nprint_r(unique_digits([15,\
    \ 33, 1422, 1]));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $result = [];\n  foreach ($x as $value) {\n  \
    \  $contains_even_digit = false;\n    foreach (str_split($value) as $char) {\n\
    \      if ($char % 2 == 0) {\n        $contains_even_digit = true;\n        break;\n\
    \      }\n    }\n    if (!$contains_even_digit) {\n      $result[] = $value;\n\
    \    }\n  }\n  sort($result);\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$is_odd_digits = function($num) {\n\t\t$digits\
    \ = str_split($num);\n\t\t$is_odd = true;\n\t\tforeach ($digits as $key => $digit)\
    \ {\n\t\t\tif ($digit % 2 == 0) {\n\t\t\t\t$is_odd = false;\n\t\t\t\tbreak;\n\t\
    \t\t}\n\t\t}\n\t\treturn $is_odd;\n\t};\n\t$filtered_nums = array_filter($x, $is_odd_digits);\n\
    \tsort($filtered_nums);\n\treturn $filtered_nums;\n}\n\necho implode(\"\\n\",\
    \ unique_digits([15, 33, 1422, 1]));\necho \"\\n\";\necho implode(\"\\n\", unique_digits([152,\
    \ 323, 1422, 10]));\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "1\n15\n33\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $key => $value)\
    \ {\n\t\tif (has_even_digit($value)) {\n\t\t\tcontinue;\n\t\t}\n\t\t$result[]\
    \ = $value;\n\t}\n\tsort($result);\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function has_even_digit()\
    \ in /tmp/tmppfxkxer2.php:13\nStack trace:\n#0 /tmp/tmppfxkxer2.php(23): unique_digits(Array)\n\
    #1 /tmp/tmppfxkxer2.php(27): candidate(Array)\n#2 /tmp/tmppfxkxer2.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmppfxkxer2.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $n) {\n  \
    \      if (preg_match('/^[13579]+$/', $n)) {\n            $result[] = $n;\n  \
    \      }\n    }\n    sort($result);\n    return $result;\n}\n\nvar_dump(unique_digits([15,\
    \ 33, 1422, 1]));\nvar_dump(unique_digits([152, 323, 1422, 10]));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(15)\n  [2]=>\n  int(33)\n\
    }\narray(0) {\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $result = [];\n  for ($i = 0; $i < count($x);\
    \ $i++) {\n    $is_even = false;\n    for ($j = 0; $j < strlen($x[$i]); $j++)\
    \ {\n      if ($x[$i][$j] % 2 == 0) {\n        $is_even = true;\n        break;\n\
    \      }\n    }\n    if (!$is_even) {\n      array_push($result, $x[$i]);\n  \
    \  }\n  }\n  sort($result);\n  return $result;\n}\n\necho 'unique_digits([15,\
    \ 33, 1422, 1]) ';\nvar_dump(unique_digits([15, 33, 1422, 1]));\necho 'unique_digits([152,\
    \ 323, 1422, 10]) ';\nvar_dump(unique_digits([152, 323, 1422, 10]));\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "unique_digits([15, 33, 1422, 1]) array(0) {\n}\nunique_digits([152, 323,\
    \ 1422, 10]) array(0) {\n}\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpyfasbbff.php:37\nStack trace:\n#0 /tmp/tmpyfasbbff.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmpyfasbbff.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $n) {\n  \
    \      $digits = str_split($n);\n        $unique = true;\n        foreach ($digits\
    \ as $digit) {\n            if ($digit % 2 == 0) {\n                $unique =\
    \ false;\n                break;\n            }\n        }\n        if ($unique)\
    \ {\n            $result[] = $n;\n        }\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp535lk7q4.php:32\n\
    Stack trace:\n#0 /tmp/tmp535lk7q4.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp535lk7q4.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  for ($i = 0; $i < count($x); $i++) {\n    $current\
    \ = $x[$i];\n    $found = false;\n    $even = false;\n    while ($current > 0)\
    \ {\n      $remainder = $current % 10;\n      if ($remainder % 2 == 0) {\n   \
    \     $even = true;\n      }\n      $current = floor($current / 10);\n    }\n\
    \    if ($even) {\n      unset($x[$i]);\n    }\n  }\n  sort($x);\n  return $x;\n\
    }\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7gquktrj.php:36\n\
    Stack trace:\n#0 /tmp/tmp7gquktrj.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp7gquktrj.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$t = [];\n\tforeach ($x as $e) {\n\t\t$ss = str_split($e);\n\
    \t\t$found = false;\n\t\tforeach ($ss as $s) {\n\t\t\tif ($s % 2 == 0) {\n\t\t\
    \t\t$found = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!$found) {\n\t\t\t\
    $t[] = $e;\n\t\t}\n\t}\n\tsort($t);\n\treturn $t;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    // your code here\n}\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0dxjfxt9.php:18\n\
    Stack trace:\n#0 /tmp/tmp0dxjfxt9.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp0dxjfxt9.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (!contains_even_digit($num)) {\n            $result[] = $num;\n  \
    \      }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function contains_even_digit()\
    \ in /tmp/tmplkjnrk1u.php:13\nStack trace:\n#0 /tmp/tmplkjnrk1u.php(22): unique_digits(Array)\n\
    #1 /tmp/tmplkjnrk1u.php(26): candidate(Array)\n#2 /tmp/tmplkjnrk1u.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmplkjnrk1u.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$array = array();\n\t$x = array_unique($x);\n\t\
    foreach ($x as $value) {\n\t\t$str_value = strval($value);\n\t\t$has_even = false;\n\
    \t\tfor ($i = 0; $i < strlen($str_value); $i++) {\n\t\t\tif ($str_value[$i] %\
    \ 2 == 0) {\n\t\t\t\t$has_even = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif\
    \ (!$has_even) {\n\t\t\tarray_push($array, $value);\n\t\t}\n\t}\n\tsort($array);\n\
    \treturn $array;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $result = [];\n  foreach ($x as $num) {\n    $num_string\
    \ = (string)$num;\n    $num_string_length = strlen($num_string);\n    $has_even_digit\
    \ = false;\n    for ($i = 0; $i < $num_string_length; $i++) {\n      if ($num_string[$i]\
    \ % 2 == 0) {\n        $has_even_digit = true;\n        break;\n      }\n    }\n\
    \    if (!$has_even_digit) {\n      $result[] = $num;\n    }\n  }\n  sort($result);\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$new = array();\n\t$count = 0;\n\tforeach ($x\
    \ as $i) {\n\t\t$y = str_split($i);\n\t\t$num = 0;\n\t\tforeach ($y as $j) {\n\
    \t\t\tif ($j % 2 == 0) {\n\t\t\t\t$num++;\n\t\t\t}\n\t\t}\n\t\tif ($num == 0)\
    \ {\n\t\t\t$new[$count] = $i;\n\t\t\t$count++;\n\t\t}\n\t}\n\tsort($new);\n\t\
    return $new;\n}\nprint_r(unique_digits([152, 323, 1422, 10]));\nprint_r(unique_digits([15,\
    \ 33, 1422, 1]));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\nArray\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $item) {\n\
    \        if (!contains_even_digit($item)) {\n            $result[] = $item;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function contains_even_digit()\
    \ in /tmp/tmpslzqh9sz.php:13\nStack trace:\n#0 /tmp/tmpslzqh9sz.php(22): unique_digits(Array)\n\
    #1 /tmp/tmpslzqh9sz.php(26): candidate(Array)\n#2 /tmp/tmpslzqh9sz.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmpslzqh9sz.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $arr = str_split($num);\n        if (in_array(\"2\", $arr) || in_array(\"\
    4\", $arr) || in_array(\"6\", $arr) || in_array(\"8\", $arr) || in_array(\"0\"\
    , $arr)) {\n            continue;\n        } else {\n            array_push($result,\
    \ $num);\n        }\n    }\n    sort($result);\n    return $result;\n}\n\necho\
    \ '<pre>';\nvar_dump(unique_digits([15, 33, 1422, 1]));\nvar_dump(unique_digits([152,\
    \ 323, 1422, 10]));\necho '</pre>';\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "<pre>array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(15)\n  [2]=>\n  int(33)\n\
    }\narray(0) {\n}\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $out = [];\n    $n = count($x);\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        $t = $x[$i];\n        $even = false;\n      \
    \  while ($t > 0) {\n            $d = $t % 10;\n            if ($d % 2 == 0) {\n\
    \                $even = true;\n                break;\n            }\n      \
    \      $t = (int)($t / 10);\n        }\n        if (!$even) {\n            $out[]\
    \ = $x[$i];\n        }\n    }\n    sort($out);\n    return $out;\n}\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    \n    $list = array();\n    $i = 0;\n    $x_length\
    \ = count($x);\n    while ($i < $x_length) {\n        $counter = 0;\n        $number\
    \ = $x[$i];\n        if ($number < 10) {\n            $list[] = $number;\n   \
    \     } else {\n            $number_length = strlen($number);\n            $j\
    \ = 0;\n            while ($j < $number_length) {\n                $num = $number[$j];\n\
    \                if ($num == 0 || $num == 2 || $num == 4 || $num == 6 || $num\
    \ == 8) {\n                    $counter += 1;\n                }\n           \
    \     $j += 1;\n            }\n            if ($counter == 0) {\n            \
    \    $list[] = $number;\n            }\n        }\n        $i += 1;\n    }\n \
    \   sort($list);\n    return $list;\n}\n\n$numbers = array(152, 323, 1422, 10);\n\
    print_r(unique_digits($numbers));\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf4zhug42.php:47\n\
    Stack trace:\n#0 /tmp/tmpf4zhug42.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpf4zhug42.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $values = [];\n  foreach ($x as $element) {\n\
    \    $hasEvenDigit = false;\n    while ($element > 0) {\n      $remainder = $element\
    \ % 10;\n      if ($remainder % 2 == 0) {\n        $hasEvenDigit = true;\n   \
    \     break;\n      }\n      $element = floor($element / 10);\n    }\n    if (!$hasEvenDigit)\
    \ {\n      $values[] = $element;\n    }\n  }\n  return $values;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1a9poval.php:34\n\
    Stack trace:\n#0 /tmp/tmp1a9poval.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp1a9poval.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $num) {\n\t\t\
    if (unique_digit($num))\n\t\t\t$result[] = $num;\n\t}\n\treturn $result;\n}\n\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function unique_digit()\
    \ in /tmp/tmpv1a8n7ki.php:13\nStack trace:\n#0 /tmp/tmpv1a8n7ki.php(20): unique_digits(Array)\n\
    #1 /tmp/tmpv1a8n7ki.php(24): candidate(Array)\n#2 /tmp/tmpv1a8n7ki.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpv1a8n7ki.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $y = [];\n  foreach ($x as $v) {\n    $v_string\
    \ = (string)$v;\n    $has_even = false;\n    for ($i = 0; $i < strlen($v_string);\
    \ $i++) {\n      if (($v_string[$i] % 2) == 0) {\n        $has_even = true;\n\
    \        break;\n      }\n    }\n    if (!$has_even) $y[] = $v;\n  }\n  sort($y);\n\
    \  return $y;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$output = [];\n\tforeach ($x as $value) {\n\t\t\
    $str = strval($value);\n\t\t$found_even = false;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif (intval($str[$i]) % 2 == 0) {\n\t\t\t\t$found_even = true;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!$found_even) {\n\t\t\tarray_push($output,\
    \ $value);\n\t\t}\n\t}\n\tsort($output);\n\treturn $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num = strval($num);\n        if (!strpbrk($num, '02468')) {\n      \
    \      $result[] = intval($num);\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n$x = [15, 33, 1422, 1];\n$result = unique_digits($x);\nvar_dump($result);\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(15)\n  [2]=>\n  int(33)\n\
    }\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2vmsuv8l.php:30\n\
    Stack trace:\n#0 /tmp/tmp2vmsuv8l.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2vmsuv8l.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $nums = [];\n    foreach ($x as $n) {\n    \
    \    if (!preg_match('/[02468]/', $n)) {\n            $nums[] = $n;\n        }\n\
    \    }\n    sort($nums);\n    return $nums;\n}\nprint_r(unique_digits([15, 33,\
    \ 1422, 1]));\nprint_r(unique_digits([152, 323, 1422, 10]));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $count = count($x);\n  $y = [];\n  for ($i = 0;\
    \ $i < $count; $i++) {\n    $number = strval($x[$i]);\n    $length = strlen($number);\n\
    \    $flag = false;\n    for ($j = 0; $j < $length; $j++) {\n      if ($number[$j]\
    \ % 2 == 0) {\n        $flag = true;\n        break;\n      }\n    }\n    if (!$flag)\
    \ {\n      array_push($y, $x[$i]);\n    }\n  }\n  sort($y);\n  return $y;\n}\n\
    \nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $unique = [];\n  $evens = [0, 2, 4, 6, 8];\n \
    \ foreach ($x as $i) {\n    $unique_found = true;\n    foreach (str_split($i)\
    \ as $j) {\n      if (in_array($j, $evens)) {\n        $unique_found = false;\n\
    \        break;\n      }\n    }\n    if ($unique_found) {\n      $unique[] = $i;\n\
    \    }\n  }\n  sort($unique);\n  return $unique;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    // Write code here.\n    $s = [];\n    foreach\
    \ ($x as $value) {\n        if (!strpos($value, '2') && !strpos($value, '4') &&\
    \ !strpos($value, '6') && !strpos($value, '8')) {\n            $s[] = $value;\n\
    \        }\n    }\n    sort($s);\n    return $s;\n}\n\necho '<h1> Test for unique_digits\
    \ </h1>';\necho '<pre>';\n$x = [15, 33, 1422, 1];\necho 'Input: $x = [15, 33,\
    \ 1422, 1]';\necho '<br>';\necho 'Expected Output: [1, 15, 33]';\necho '<br>';\n\
    echo 'Actual Output: ';\necho '<br>';\nprint_r(unique_digits($x));\necho '</pre>';\n\
    echo '<hr>';\n\necho '<pre>';\n$x = [152, 323, 1422, 10];\necho 'Input: $x = [152,\
    \ 323, 1422, 10]';\necho '<br>';\necho 'Expected Output: []';\necho '<br>';\n\
    echo 'Actual Output: ';\necho '<br>';\nprint_r(unique_digits($x));\necho '</pre>';\n\
    echo '<hr>';\n\necho '<pre>';\n$x = [152, 323, 1422, 101];\necho 'Input: $x =\
    \ [152, 323, 1422, 101]';\necho '<br>';\necho 'Expected Output: [101]';\necho\
    \ '<br>';\necho 'Actual Output: ';\necho '<br>';\nprint_r(unique_digits($x));\n\
    echo '</pre>';\necho '<hr>';\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<h1> Test for unique_digits </h1><pre>Input: $x = [15, 33, 1422, 1]<br>Expected\
    \ Output: [1, 15, 33]<br>Actual Output: <br>Array\n(\n    [0] => 1\n    [1] =>\
    \ 15\n    [2] => 33\n)\n</pre><hr><pre>Input: $x = [152, 323, 1422, 10]<br>Expected\
    \ Output: []<br>Actual Output: <br>Array\n(\n    [0] => 10\n)\n</pre><hr><pre>Input:\
    \ $x = [152, 323, 1422, 101]<br>Expected Output: [101]<br>Actual Output: <br>Array\n\
    (\n    [0] => 101\n)\n</pre><hr>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpzcv4nki0.php:64\nStack trace:\n#0 /tmp/tmpzcv4nki0.php(69): test()\n\
    #1 {main}\n  thrown in /tmp/tmpzcv4nki0.php on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $result = [];\n  foreach ($x as $x_element) {\n\
    \    if (strlen(strval($x_element)) == 1) {\n      $result[] = $x_element;\n \
    \   } else {\n      $has_even_digit = false;\n      for ($i = 0; $i < strlen(strval($x_element));\
    \ $i++) {\n        if (intval(strval($x_element)[$i]) % 2 == 0) {\n          $has_even_digit\
    \ = true;\n          break;\n        }\n      }\n      if (!$has_even_digit) {\n\
    \        $result[] = $x_element;\n      }\n    }\n  }\n  sort($result);\n  return\
    \ $result;\n}\n\n$test_data = [\n  ['input' => [15, 33, 1422, 1], 'expected' =>\
    \ [1, 15, 33]],\n  ['input' => [152, 323, 1422, 10], 'expected' => []],\n  ['input'\
    \ => [15, 33, 14221, 1], 'expected' => [1, 15, 33]],\n  ['input' => [15, 333,\
    \ 1422, 1], 'expected' => [1, 15, 333]],\n  ['input' => [10], 'expected' => []],\n\
    \  ['input' => [1], 'expected' => [1]],\n  ['input' => [0], 'expected' => []],\n\
    \  ['input' => [], 'expected' => []],\n];\n\nforeach ($test_data as $data) {\n\
    \  $result = unique_digits($data['input']);\n  $passed = $result == $data['expected'];\n\
    \  printf(\"Test with input %s: %s\\n\", json_encode($data['input']), $passed\
    \ ? 'passed' : 'failed');\n}\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Test with input [15,33,1422,1]: passed\nTest with input [152,323,1422,10]:\
    \ passed\nTest with input [15,33,14221,1]: passed\nTest with input [15,333,1422,1]:\
    \ passed\nTest with input [10]: passed\nTest with input [1]: passed\nTest with\
    \ input [0]: failed\nTest with input []: passed\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\tforeach ($x as $key => $value) {\n\t\tif (even_digit($value))\
    \ {\n\t\t\tunset($x[$key]);\n\t\t}\n\t}\n\tsort($x);\n\treturn $x;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function even_digit()\
    \ in /tmp/tmp93p_1l84.php:12\nStack trace:\n#0 /tmp/tmp93p_1l84.php(21): unique_digits(Array)\n\
    #1 /tmp/tmp93p_1l84.php(25): candidate(Array)\n#2 /tmp/tmp93p_1l84.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmp93p_1l84.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  // Write your code here...\n  return $x;\n}\n\n\
    print_r(unique_digits([15, 33, 1422, 1]));\nprint_r(unique_digits([152, 323, 1422,\
    \ 10]));\nprint_r(unique_digits([154, 323, 1422, 10]));\nprint_r(unique_digits([1545,\
    \ 323, 1422, 10]));\nprint_r(unique_digits([1544, 323, 1422, 10]));\nprint_r(unique_digits([1544,\
    \ 3223, 1422, 10]));\nprint_r(unique_digits([15444, 3223, 1422, 10]));\nprint_r(unique_digits([15444,\
    \ 3223, 14222, 10]));\nprint_r(unique_digits([1, 3, 5, 7, 9]));\nprint_r(unique_digits([]));\n\
    print_r(unique_digits([1]));\nprint_r(unique_digits([2]));\nprint_r(unique_digits([0]));\n\
    print_r(unique_digits([-1]));\nprint_r(unique_digits([-1,0,1]));\nprint_r(unique_digits([100,1000,10000]));\n\
    print_r(unique_digits([-100,-1000,-10000]));\nfunction candidate(...$args) {\n\
    \    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "Array\n(\n    [0] => 15\n    [1] => 33\n    [2] => 1422\n    [3] => 1\n\
    )\nArray\n(\n    [0] => 152\n    [1] => 323\n    [2] => 1422\n    [3] => 10\n\
    )\nArray\n(\n    [0] => 154\n    [1] => 323\n    [2] => 1422\n    [3] => 10\n\
    )\nArray\n(\n    [0] => 1545\n    [1] => 323\n    [2] => 1422\n    [3] => 10\n\
    )\nArray\n(\n    [0] => 1544\n    [1] => 323\n    [2] => 1422\n    [3] => 10\n\
    )\nArray\n(\n    [0] => 1544\n    [1] => 3223\n    [2] => 1422\n    [3] => 10\n\
    )\nArray\n(\n    [0] => 15444\n    [1] => 3223\n    [2] => 1422\n    [3] => 10\n\
    )\nArray\n(\n    [0] => 15444\n    [1] => 3223\n    [2] => 14222\n    [3] => 10\n\
    )\nArray\n(\n    [0] => 1\n    [1] => 3\n    [2] => 5\n    [3] => 7\n    [4] =>\
    \ 9\n)\nArray\n(\n)\nArray\n(\n    [0] => 1\n)\nArray\n(\n    [0] => 2\n)\nArray\n\
    (\n    [0] => 0\n)\nArray\n(\n    [0] => -1\n)\nArray\n(\n    [0] => -1\n    [1]\
    \ => 0\n    [2] => 1\n)\nArray\n(\n    [0] => 100\n    [1] => 1000\n    [2] =>\
    \ 10000\n)\nArray\n(\n    [0] => -100\n    [1] => -1000\n    [2] => -10000\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8gkh05jl.php:37\nStack\
    \ trace:\n#0 /tmp/tmp8gkh05jl.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp8gkh05jl.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    // Insert your code here\n}\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy6j9csjo.php:18\n\
    Stack trace:\n#0 /tmp/tmpy6j9csjo.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpy6j9csjo.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  // @author: Slava Raskovan\n  // @date: May 29,\
    \ 2018\n  $myArr = [];\n  foreach ($x as $num) {\n    $arr = str_split((string)$num);\n\
    \    $hasEven = 0;\n    foreach ($arr as $digit) {\n      if ($digit % 2 == 0)\
    \ {\n        $hasEven = 1;\n        break;\n      }\n    }\n    if ($hasEven ==\
    \ 0) {\n      $myArr[] = $num;\n    }\n  }\n  if (empty($myArr)) {\n    return\
    \ $myArr;\n  }\n  else {\n    sort($myArr);\n    return $myArr;\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $number) {\n\t\
    \t$number = abs($number);\n\t\t$temp = null;\n\t\twhile ($number > 0) {\n\t\t\t\
    $digit = $number % 10;\n\t\t\tif ($digit % 2 == 0) {\n\t\t\t\t$temp = true;\n\t\
    \t\t\tbreak;\n\t\t\t}\n\t\t\t$number = floor($number / 10);\n\t\t}\n\t\tif (!$temp)\
    \ {\n\t\t\t$result[] = $number;\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjnd769lf.php:35\n\
    Stack trace:\n#0 /tmp/tmpjnd769lf.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpjnd769lf.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $num) {\n\t\t\
    if (isUniqueDigits($num)) {\n\t\t\t$result[] = $num;\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isUniqueDigits()\
    \ in /tmp/tmp4mws_ihv.php:13\nStack trace:\n#0 /tmp/tmp4mws_ihv.php(22): unique_digits(Array)\n\
    #1 /tmp/tmp4mws_ihv.php(26): candidate(Array)\n#2 /tmp/tmp4mws_ihv.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4mws_ihv.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $new = [];\n    foreach ($x as $x_int) {\n \
    \       $int_to_str = strval($x_int);\n        $even_flag = False;\n        for\
    \ ($i = 0; $i < strlen($int_to_str); $i++) {\n            if (intval($int_to_str[$i])\
    \ % 2 == 0) {\n                $even_flag = True;\n                break;\n  \
    \          }\n        }\n        if (!$even_flag) {\n            array_push($new,\
    \ $x_int);\n        }\n    }\n    sort($new);\n    return $new;\n}\n\nprint_r(unique_digits([15,\
    \ 33, 1422, 1]));\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $arr = [];\n    foreach ($x as $i) {\n     \
    \   $is_unique = true;\n        $div = 10000;\n        while ($div >= 1) {\n \
    \           $digit = (int)($i / $div);\n            if ($digit % 2 == 0) {\n \
    \               $is_unique = false;\n                break;\n            }\n \
    \           $i = $i % $div;\n            $div = $div / 10;\n        }\n      \
    \  if ($is_unique) {\n            $arr[] = $i;\n        }\n    }\n    return $arr;\n\
    }\necho json_encode(unique_digits([15, 33, 1422, 1]));\necho \"\\n\";\necho json_encode(unique_digits([152,\
    \ 323, 1422, 10]));\necho \"\\n\";\n\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "[]\n[]\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpac1z_lz3.php:40\n\
    Stack trace:\n#0 /tmp/tmpac1z_lz3.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpac1z_lz3.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$arr = array();\n\t$ans = array();\n\tforeach\
    \ ($x as $v) {\n\t\tif (strpos($v, \"2\") === false && strpos($v, \"4\") === false\
    \ && strpos($v, \"6\") === false && strpos($v, \"8\") === false && strpos($v,\
    \ \"0\") === false) {\n\t\t\tarray_push($arr, $v);\n\t\t}\n\t}\n\tif (count($arr)\
    \ > 0) {\n\t\tsort($arr);\n\t\tforeach ($arr as $v) {\n\t\t\tarray_push($ans,\
    \ $v);\n\t\t}\n\t}\n\treturn $ans;\n}\necho implode(\", \", unique_digits([15,\
    \ 33, 1422, 1])) . \"\\n\";\necho implode(\", \", unique_digits([152, 323, 1422,\
    \ 10])) . \"\\n\";\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1, 15, 33\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $x1 = array_filter($x, function($n) {\n    \
    \    return !preg_match('/[0-9]/', $n);\n    });\n    return array_values($x1);\n\
    }\n$list = [15, 33, 1422, 1];\nprint_r(unique_digits($list));\necho \"\\n\";\n\
    $list = [152, 323, 1422, 10];\nprint_r(unique_digits($list));\necho \"\\n\";\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\n\nArray\n(\n)\n\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp21y6ow5m.php:27\nStack trace:\n#0 /tmp/tmp21y6ow5m.php(33): test()\n\
    #1 {main}\n  thrown in /tmp/tmp21y6ow5m.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $num) {\n\t\t\
    if (!(strpos($num, '2') !== false || strpos($num, '4') !== false || strpos($num,\
    \ '6') !== false || strpos($num, '8') !== false)) {\n\t\t\tarray_push($result,\
    \ $num);\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\necho '<pre>';\n\
    print_r(unique_digits([15, 33, 1422, 1]));\necho '</pre>';\n\necho '<pre>';\n\
    print_r(unique_digits([152, 323, 1422, 10]));\necho '</pre>';\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n</pre><pre>Array\n\
    (\n    [0] => 10\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp6k86_5bh.php:35\nStack trace:\n#0 /tmp/tmp6k86_5bh.php(40): test()\n\
    #1 {main}\n  thrown in /tmp/tmp6k86_5bh.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\treturn array_filter($x, function($y) {\n\t\treturn\
    \ !preg_match('/[02468]/', $y);\n\t});\n}\n\nprint_r(unique_digits([15, 33, 1422,\
    \ 1]));\nprint_r(unique_digits([152, 323, 1422, 10]));\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 15\n    [1] => 33\n    [3] => 1\n)\nArray\n(\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmphlzkpdde.php:24\nStack\
    \ trace:\n#0 /tmp/tmphlzkpdde.php(30): test()\n#1 {main}\n  thrown in /tmp/tmphlzkpdde.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\tforeach ($x as $key => $value) {\n\t\t$x[$key]\
    \ = str_split($value);\n\t}\n\tforeach ($x as $key => $value) {\n\t\tforeach ($value\
    \ as $k => $v) {\n\t\t\tif ($v%2 == 0) {\n\t\t\t\tunset($x[$key]);\n\t\t\t}\n\t\
    \t}\n\t}\n\tforeach ($x as $key => $value) {\n\t\t$x[$key] = (int)implode('',\
    \ $value);\n\t}\n\tsort($x);\n\treturn $x;\n}\n\nvar_dump(unique_digits([15, 33,\
    \ 1422, 1]));\nvar_dump(unique_digits([152, 323, 1422, 10]));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(15)\n  [2]=>\n  int(33)\n\
    }\narray(0) {\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    $evens = [0, 2, 4, 6, 8];\n\
    \    foreach ($x as $num) {\n        $has_evens = false;\n        foreach (str_split($num)\
    \ as $digit) {\n            if (in_array($digit, $evens)) {\n                $has_evens\
    \ = true;\n                break;\n            }\n        }\n        if (!$has_evens)\
    \ {\n            $result[] = $num;\n        }\n    }\n    sort($result);\n   \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $a = array();\n  foreach ($x as $n) {\n    if\
    \ (strpos((string)$n, '2') === false &&\n        strpos((string)$n, '4') === false\
    \ &&\n        strpos((string)$n, '6') === false &&\n        strpos((string)$n,\
    \ '8') === false) {\n      $a[] = $n;\n    }\n  }\n  sort($a);\n  return $a;\n\
    }\n\nassert(unique_digits([15, 33, 1422, 1]) == [1, 15, 33]);\nassert(unique_digits([152,\
    \ 323, 1422, 10]) == []);\nassert(unique_digits([2, 8, 10, 12, 16, 18, 20, 22,\
    \ 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60,\
    \ 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98,\
    \ 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130,\
    \ 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162,\
    \ 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194,\
    \ 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226,\
    \ 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258,\
    \ 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290,\
    \ 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322,\
    \ 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350,\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpntv26hll.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\treturn array_unique($x);\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqf9ajo12.php:19\n\
    Stack trace:\n#0 /tmp/tmpqf9ajo12.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpqf9ajo12.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $odd_array = [];\n  foreach ($x as $num) {\n \
    \   $string_num = strval($num);\n    $odd_digits = 0;\n    for ($i = 0; $i < strlen($string_num);\
    \ $i++) {\n      if ($string_num[$i] % 2 == 1) {\n        $odd_digits++;\n   \
    \   }\n    }\n    if ($odd_digits == strlen($string_num)) {\n      array_push($odd_array,\
    \ $num);\n    }\n  }\n  sort($odd_array);\n  return $odd_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $ret = [];\n    foreach ($x as $value) {\n \
    \       if (preg_match('/[02468]/', $value)) {\n            continue;\n      \
    \  }\n        $ret[] = $value;\n    }\n    sort($ret);\n    return $ret;\n}\n\n\
    $x = [15, 33, 1422, 1];\n$ret = unique_digits($x);\nprint_r($ret);\necho \"\\\
    n\";\n\n$x = [152, 323, 1422, 10];\n$ret = unique_digits($x);\nprint_r($ret);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n\nArray\n(\n)\n\
    \n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $i) {\n  \
    \      if (strpos($i, \"2\") === false && strpos($i, \"4\") === false && strpos($i,\
    \ \"6\") === false && strpos($i, \"8\") === false) {\n            $result[] =\
    \ $i;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgm28z6xw.php:27\n\
    Stack trace:\n#0 /tmp/tmpgm28z6xw.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpgm28z6xw.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t// Your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpna051egl.php:19\n\
    Stack trace:\n#0 /tmp/tmpna051egl.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpna051egl.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    $evenDigits = [0, 2, 4, 6,\
    \ 8];\n    foreach ($x as $number) {\n        $hasEvenDigit = false;\n       \
    \ while ($number > 0) {\n            $digit = $number % 10;\n            if (in_array($digit,\
    \ $evenDigits)) {\n                $hasEvenDigit = true;\n                break;\n\
    \            }\n            $number = (int)($number / 10);\n        }\n      \
    \  if (!$hasEvenDigit) {\n            $result[] = $number;\n        }\n    }\n\
    \    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsyekf4ah.php:36\n\
    Stack trace:\n#0 /tmp/tmpsyekf4ah.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpsyekf4ah.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    $even = ['0', '2', '4', '6',\
    \ '8'];\n    $unique = array_unique($x);\n    foreach ($unique as $value) {\n\
    \        $digits = str_split($value);\n        $found = false;\n        foreach\
    \ ($digits as $digit) {\n            if (in_array($digit, $even)) {\n        \
    \        $found = true;\n                break;\n            }\n        }\n  \
    \      if (!$found) {\n            $result[] = $value;\n        }\n    }\n   \
    \ sort($result);\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $result = [];\n  foreach ($x as $num) {\n    if\
    \ ($num === 0) {\n      continue;\n    }\n    $c = 0;\n    while ($num > 0) {\n\
    \      $digit = $num % 10;\n      if ($digit % 2 === 0) {\n        $c++;\n   \
    \   }\n      $num = floor($num / 10);\n    }\n    if ($c === 0) {\n      $result[]\
    \ = $num;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4sa16137.php:36\n\
    Stack trace:\n#0 /tmp/tmp4sa16137.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp4sa16137.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $y = array();\n    foreach ($x as $number) {\n\
    \        if(($number % 2) == 1) {\n            $y[] = $number;\n        }\n  \
    \  }\n    sort($y);\n    return $y;\n}\nprint_r(unique_digits([15, 33, 1422, 1]));\n\
    echo \"\\n\";\nprint_r(unique_digits([152, 323, 1422, 10]));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n\nArray\n(\n \
    \   [0] => 323\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3a4h77t.php:29\n\
    Stack trace:\n#0 /tmp/tmpb3a4h77t.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpb3a4h77t.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $temp = $value;\n        while ($temp > 0) {\n            if ($temp %\
    \ 2 == 0) {\n                continue 2;\n            }\n            $temp = floor($temp\
    \ / 10);\n        }\n        $result[] = $value;\n    }\n    return $result;\n\
    }\n\nprint_r(unique_digits([15, 33, 1422, 1]));\nprint_r(unique_digits([152, 323,\
    \ 1422, 10]));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 15\n    [1] => 33\n    [2] => 1\n)\nArray\n(\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpwjmjstse.php:32\nStack\
    \ trace:\n#0 /tmp/tmpwjmjstse.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpwjmjstse.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $r = [];\n    $even_digits = [0, 2, 4, 6, 8];\n\
    \    foreach ($x as $n) {\n        $is_unique = true;\n        while ($n > 0)\
    \ {\n            $d = $n % 10;\n            if (in_array($d, $even_digits)) {\n\
    \                $is_unique = false;\n                break;\n            }\n\
    \            $n = (int)($n / 10);\n        }\n        if ($is_unique) {\n    \
    \        $r[] = $n;\n        }\n    }\n    sort($r);\n    return $r;\n}\n\necho\
    \ json_encode(unique_digits([15, 33, 1422, 1])) . \"\\n\";\necho json_encode(unique_digits([152,\
    \ 323, 1422, 10])) . \"\\n\";\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "[0,0,0]\n[]\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ob_fmq3.php:38\n\
    Stack trace:\n#0 /tmp/tmp4ob_fmq3.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp4ob_fmq3.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t// TODO: Write your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn_dwb9xg.php:19\n\
    Stack trace:\n#0 /tmp/tmpn_dwb9xg.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpn_dwb9xg.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $odd = array();\n  foreach ($x as $num) {\n  \
    \  $digit = digit_split($num);\n    $is_odd = is_odd($digit);\n    if ($is_odd)\
    \ {\n      array_push($odd, $num);\n    }\n  }\n  sort($odd);\n  return $odd;\n\
    }\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function digit_split()\
    \ in /tmp/tmpdeye89i8.php:13\nStack trace:\n#0 /tmp/tmpdeye89i8.php(23): unique_digits(Array)\n\
    #1 /tmp/tmpdeye89i8.php(27): candidate(Array)\n#2 /tmp/tmpdeye89i8.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdeye89i8.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\n}\n\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp07kxv92z.php:19\n\
    Stack trace:\n#0 /tmp/tmp07kxv92z.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp07kxv92z.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n   $res = [];\n   foreach ($x as $n) {\n       $str_n\
    \ = (string)$n;\n       $num_digits = strlen($str_n);\n       $i = 0;\n      \
    \ while ($i < $num_digits) {\n           if ($str_n[$i] % 2 == 0) {\n        \
    \       break;\n           }\n           $i++;\n       }\n       if ($i === $num_digits)\
    \ {\n           $res[] = $n;\n       }\n   }\n   sort($res);\n   return $res;\n\
    }\nprint_r(unique_digits([15, 33, 1422, 1]));\nprint_r(unique_digits([152, 323,\
    \ 1422, 10]));\nprint_r(unique_digits([]));\nprint_r(unique_digits([13, 12, 11,\
    \ 10]));\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n\
    Array\n(\n)\nArray\n(\n    [0] => 11\n    [1] => 13\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $array = [];\n    for ($i = 0; $i < count($x);\
    \ $i++) {\n        $number = $x[$i];\n        $stringNumber = (string)$number;\n\
    \        $arrayOfCharacters = str_split($stringNumber);\n        $hasEvenDigit\
    \ = false;\n        for ($j = 0; $j < count($arrayOfCharacters); $j++) {\n   \
    \         $currentCharacter = $arrayOfCharacters[$j];\n            if ($currentCharacter\
    \ % 2 == 0) {\n                $hasEvenDigit = true;\n                break;\n\
    \            }\n        }\n        if (!$hasEvenDigit) {\n            array_push($array,\
    \ $number);\n        }\n    }\n    sort($array);\n    return $array;\n}\n\necho\
    \ \"<pre>\";\nprint_r(unique_digits([15, 33, 1422, 1]));\necho \"</pre>\";\n\n\
    echo \"<pre>\";\nprint_r(unique_digits([152, 323, 1422, 10]));\necho \"</pre>\"\
    ;\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n</pre><pre>Array\n\
    (\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\n}\n\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwx5am695.php:19\n\
    Stack trace:\n#0 /tmp/tmpwx5am695.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpwx5am695.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $number) {\n\
    \        $number = strval($number);\n        $len = strlen($number);\n       \
    \ $flag = true;\n        for ($i = 0; $i < $len; $i++) {\n            if ($number[$i]\
    \ % 2 == 0) {\n                $flag = false;\n                break;\n      \
    \      }\n        }\n        if ($flag) {\n            $result[] = intval($number);\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n$result = unique_digits([15,\
    \ 33, 1422, 1]);\nvar_dump($result);\n$result = unique_digits([152, 323, 1422,\
    \ 10]);\nvar_dump($result);\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(15)\n  [2]=>\n  int(33)\n\
    }\narray(0) {\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tfor ($i = 0; $i < count($x);\
    \ $i++) {\n\t\t$has_even = false;\n\t\t$digits = $x[$i];\n\t\twhile ($digits >\
    \ 0) {\n\t\t\t$current_digit = $digits % 10;\n\t\t\tif ($current_digit % 2 ==\
    \ 0) {\n\t\t\t\t$has_even = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$digits = (int)($digits\
    \ / 10);\n\t\t}\n\t\tif (!$has_even) {\n\t\t\tarray_push($result, $x[$i]);\n\t\
    \t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$x = [15, 33, 1422, 1];\n\
    echo \">>> unique_digits([15, 33, 1422, 1])\\n\";\nprint_r(unique_digits($x));\n\
    \n$x = [152, 323, 1422, 10];\necho \">>> unique_digits([152, 323, 1422, 10])\\\
    n\";\nprint_r(unique_digits($x));\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ">>> unique_digits([15, 33, 1422, 1])\nArray\n(\n    [0] => 1\n    [1] =>\
    \ 15\n    [2] => 33\n)\n>>> unique_digits([152, 323, 1422, 10])\nArray\n(\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $evens = [0, 2, 4, 6, 8];\n    $f = function($n)\
    \ use ($evens) {\n        while ($n) {\n            $d = $n % 10;\n          \
    \  if (in_array($d, $evens)) return false;\n            $n = (int)($n / 10);\n\
    \        }\n        return true;\n    };\n    return array_filter($x, $f);\n}\n\
    \nprint_r(unique_digits([15, 33, 1422, 1]));\nprint_r(unique_digits([152, 323,\
    \ 1422, 10]));\nprint_r(unique_digits([]));\nprint_r(unique_digits([0]));\nprint_r(unique_digits([1]));\n\
    print_r(unique_digits([2]));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 15\n    [1] => 33\n    [3] => 1\n)\nArray\n(\n)\n\
    Array\n(\n)\nArray\n(\n    [0] => 0\n)\nArray\n(\n    [0] => 1\n)\nArray\n(\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmjq2t9x4.php:34\n\
    Stack trace:\n#0 /tmp/tmpmjq2t9x4.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpmjq2t9x4.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $y = [];\n    for ($i = 0; $i < count($x); $i++)\
    \ {\n        $y[$i] = $x[$i];\n        $s = (string)$x[$i];\n        for ($j =\
    \ 0; $j < strlen($s); $j++) {\n            if ($s[$j] % 2 == 0) {\n          \
    \      $y[$i] = 0;\n                break;\n            }\n        }\n    }\n\
    \    $y = array_filter($y);\n    sort($y);\n    return $y;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num_to_str = strval($num);\n        $even_digit = false;\n        for\
    \ ($i = 0; $i < strlen($num_to_str); $i++) {\n            if (strval($num_to_str[$i])\
    \ % 2 == 0) {\n                $even_digit = true;\n                break;\n \
    \           }\n        }\n        if (!$even_digit) {\n            array_push($result,\
    \ $num);\n        }\n    }\n    sort($result);\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strlen($value) == 1) {\n            $result[] = $value;\n       \
    \ } else {\n            $num = (string)$value;\n            $found = false;\n\
    \            foreach (str_split($num) as $char) {\n                if ($char %\
    \ 2 == 0) {\n                    $found = true;\n                    break;\n\
    \                }\n            }\n            if (!$found) {\n              \
    \  $result[] = $value;\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\n}\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnhbuergv.php:18\n\
    Stack trace:\n#0 /tmp/tmpnhbuergv.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpnhbuergv.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  // Your code here.\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwe8lbuke.php:19\n\
    Stack trace:\n#0 /tmp/tmpwe8lbuke.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpwe8lbuke.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$has_even_digit = function($i) {\n\t\t$i = (string)$i;\n\
    \t\tforeach (str_split($i) as $c) {\n\t\t\tif (ord($c) % 2 == 0) {\n\t\t\t\treturn\
    \ true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t};\n\t$only_odd_digits = function($i)\
    \ use ($has_even_digit) {\n\t\treturn !$has_even_digit($i);\n\t};\n\treturn array_filter($x,\
    \ $only_odd_digits);\n}\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6webeph8.php:30\n\
    Stack trace:\n#0 /tmp/tmp6webeph8.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6webeph8.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t// your code here\n}\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzx5ca748.php:18\n\
    Stack trace:\n#0 /tmp/tmpzx5ca748.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpzx5ca748.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $odds = array();\n    foreach ($x as $n) {\n\
    \        $digits = str_split($n);\n        $is_odd = true;\n        foreach ($digits\
    \ as $d) {\n            if ($d % 2 == 0) {\n                $is_odd = false;\n\
    \                break;\n            }\n        }\n        if ($is_odd) {\n  \
    \          $odds[] = $n;\n        }\n    }\n    sort($odds);\n    return $odds;\n\
    }\n\nprint_r(unique_digits([15, 33, 1422, 1]));\nprint_r(unique_digits([152, 323,\
    \ 1422, 10]));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$oddDigits = ['1', '3', '5', '7', '9'];\n\t$unsortedDigits\
    \ = [];\n\tfor ($i = 0; $i < count($x); $i++) {\n\t\t$arr = str_split($x[$i]);\n\
    \t\t$intersect = array_intersect($arr, $oddDigits);\n\t\tif (count($intersect)\
    \ == count($arr)) {\n\t\t\tarray_push($unsortedDigits, $x[$i]);\n\t\t}\n\t}\n\t\
    sort($unsortedDigits);\n\treturn $unsortedDigits;\n}\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $y = [];\n    $z = [];\n    $evens = array(2,\
    \ 4, 6, 8, 0);\n    foreach ($x as $value) {\n        $y[] = (string)$value;\n\
    \    }\n    foreach ($y as $value) {\n        $count = 0;\n        for ($i = 0;\
    \ $i < strlen($value); $i++) {\n            if (in_array(intval($value[$i]), $evens))\
    \ {\n                $count++;\n            }\n        }\n        if ($count ==\
    \ 0) {\n            $z[] = intval($value);\n        }\n    }\n    sort($z);\n\
    \    return $z;\n}\n\nprint_r(unique_digits([15, 33, 1422, 1]));\nprint_r(unique_digits([152,\
    \ 323, 1422, 10]));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $v) {\n  \
    \      $isEven = false;\n        $a = str_split($v);\n        foreach ($a as $v2)\
    \ {\n            if ($v2 % 2 == 0) {\n                $isEven = true;\n      \
    \          break;\n            }\n        }\n        if (!$isEven) {\n       \
    \     $result[] = $v;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $evens = array(0, 2, 4, 6, 8);\n    $result\
    \ = array();\n    foreach ($x as $number) {\n        $has_evens = false;\n   \
    \     $number_array = str_split($number);\n        foreach ($number_array as $digit)\
    \ {\n            if (in_array($digit, $evens)) {\n                $has_evens =\
    \ true;\n                break;\n            }\n        }\n        if (!$has_evens)\
    \ {\n            $result[] = $number;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $s = array();\n  foreach ($x as $n) {\n    if\
    \ ($n == 0) { continue; }\n    $has_even = FALSE;\n    while ($n > 0) {\n    \
    \  $d = $n % 10;\n      if ($d % 2 == 0) {\n        $has_even = TRUE;\n      \
    \  break;\n      }\n      $n = $n / 10;\n    }\n    if (!$has_even) {\n      $s[]\
    \ = $n;\n    }\n  }\n  sort($s);\n  return $s;\n}\n\nrequire_once 'test/test_interface.php';\n\
    Test::assert_equals(unique_digits([15, 33, 1422, 1]), [1, 15, 33]);\nTest::assert_equals(unique_digits([152,\
    \ 323, 1422, 10]), []);\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: require_once(test/test_interface.php): failed to open stream:\
    \ No such file or directory in /tmp/tmp2yov42gb.php on line 31\n\nFatal error:\
    \ require_once(): Failed opening required 'test/test_interface.php' (include_path='.:')\
    \ in /tmp/tmp2yov42gb.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$first_array = [];\n\t$second_array = [];\n\t\
    foreach ($x as $value) {\n\t\t$value = (string)$value;\n\t\tfor ($i=0; $i < strlen($value);\
    \ $i++) { \n\t\t\tif ((int)$value[$i] % 2 === 0) {\n\t\t\t\t$first_array[] = $value;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tforeach ($x as $value) {\n\t\tif (!in_array($value,\
    \ $first_array)) {\n\t\t\t$second_array[] = $value;\n\t\t}\n\t}\n\tasort($second_array);\n\
    \treturn $second_array;\n}\n$x = [15, 33, 1422, 1];\nvar_dump(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [2]=>\n  int(1)\n  [0]=>\n  int(15)\n  [1]=>\n  int(33)\n\
    }\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcjme38ff.php:37\n\
    Stack trace:\n#0 /tmp/tmpcjme38ff.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpcjme38ff.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $numbers = array();\n  $even = array(0, 2, 4,\
    \ 6, 8);\n  foreach ($x as $num) {\n    $found = false;\n    while ($num > 0)\
    \ {\n      $last = $num % 10;\n      if (in_array($last, $even)) {\n        $found\
    \ = true;\n        break;\n      }\n      $num = (int)($num / 10);\n    }\n  \
    \  if (!$found) {\n      $numbers[] = $num;\n    }\n  }\n  return $numbers;\n\
    }\n\necho '<pre>';\nprint_r(unique_digits([15, 33, 1422, 1]));\nprint_r(unique_digits([152,\
    \ 323, 1422, 10]));\necho '</pre>';\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "<pre>Array\n(\n    [0] => 0\n    [1] => 0\n    [2] => 0\n)\nArray\n(\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5gwbykem.php:39\n\
    Stack trace:\n#0 /tmp/tmp5gwbykem.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp5gwbykem.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $results = [];\n    foreach ($x as $item) {\n\
    \        if (isUnique($item)) {\n            $results[] = $item;\n        }\n\
    \    }\n    asort($results);\n    return $results;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isUnique() in\
    \ /tmp/tmp0nj7kscr.php:13\nStack trace:\n#0 /tmp/tmp0nj7kscr.php(22): unique_digits(Array)\n\
    #1 /tmp/tmp0nj7kscr.php(26): candidate(Array)\n#2 /tmp/tmp0nj7kscr.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmp0nj7kscr.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $i) {\n  \
    \      if (isUnique($i)) {\n            $result[] = $i;\n        }\n    }\n  \
    \  sort($result);\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isUnique() in\
    \ /tmp/tmpv9kazshk.php:13\nStack trace:\n#0 /tmp/tmpv9kazshk.php(22): unique_digits(Array)\n\
    #1 /tmp/tmpv9kazshk.php(26): candidate(Array)\n#2 /tmp/tmpv9kazshk.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmpv9kazshk.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $digits = [];\n    $result = [];\n    foreach\
    \ ($x as $number) {\n        $digits[] = get_digits($number);\n    }\n    for\
    \ ($i = 0; $i < count($digits); $i++) {\n        $are_all_digits_odd = true;\n\
    \        foreach ($digits[$i] as $digit) {\n            if ($digit % 2 == 0) {\n\
    \                $are_all_digits_odd = false;\n            }\n        }\n    \
    \    if ($are_all_digits_odd) {\n            $result[] = $x[$i];\n        }\n\
    \    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_digits()\
    \ in /tmp/tmpli5o1rok.php:14\nStack trace:\n#0 /tmp/tmpli5o1rok.php(32): unique_digits(Array)\n\
    #1 /tmp/tmpli5o1rok.php(36): candidate(Array)\n#2 /tmp/tmpli5o1rok.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpli5o1rok.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $even = array(0, 2, 4, 6, 8);\n    $unique =\
    \ array();\n    foreach ($x as $value) {\n        if (!has_even_digit($value,\
    \ $even)) {\n            $unique[] = $value;\n        }\n    }\n    sort($unique);\n\
    \    return $unique;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function has_even_digit()\
    \ in /tmp/tmpz26mfwq2.php:14\nStack trace:\n#0 /tmp/tmpz26mfwq2.php(23): unique_digits(Array)\n\
    #1 /tmp/tmpz26mfwq2.php(27): candidate(Array)\n#2 /tmp/tmpz26mfwq2.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmpz26mfwq2.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  // write your code here!\n  return null;\n}\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfh7b4osr.php:19\n\
    Stack trace:\n#0 /tmp/tmpfh7b4osr.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpfh7b4osr.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $u = [];\n    foreach ($x as $n) {\n       \
    \ // convert $n to string and check each char\n        $has_even = false;\n  \
    \      $s = (string)$n;\n        for ($i = 0; $i < strlen($s); $i++) {\n     \
    \       if ($s[$i] % 2 == 0) {\n                $has_even = true;\n          \
    \      break;\n            }\n        }\n        if (!$has_even) {\n         \
    \   $u[] = $n;\n        }\n    }\n    sort($u);\n    return $u;\n}\necho \"Should\
    \ be [1, 15, 33]: \", json_encode(unique_digits([15, 33, 1422, 1])), \"\\n\";\n\
    echo \"Should be []: \", json_encode(unique_digits([152, 323, 1422, 10])), \"\\\
    n\";\necho \"Should be [3, 5, 7]: \", json_encode(unique_digits([3, 5, 7])), \"\
    \\n\";\necho \"Should be [3, 5, 7]: \", json_encode(unique_digits([3, 5, 7, 11])),\
    \ \"\\n\";\necho \"Should be []: \", json_encode(unique_digits([112, 234, 566,\
    \ 780])), \"\\n\";\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Should be [1, 15, 33]: [1,15,33]\nShould be []: []\nShould be [3, 5, 7]:\
    \ [3,5,7]\nShould be [3, 5, 7]: [3,5,7,11]\nShould be []: []\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$response = [];\n\tforeach ($x as $key => $number)\
    \ {\n\t\t$all_even = true;\n\t\t$chars = str_split($number);\n\t\tforeach ($chars\
    \ as $key => $char) {\n\t\t\tif ($char % 2 !== 0) {\n\t\t\t\t$all_even = false;\n\
    \t\t\t}\n\t\t}\n\t\tif (!$all_even) {\n\t\t\t$response[] = $number;\n\t\t}\n\t\
    }\n\tsort($response);\n\treturn $response;\n}\n\n$test_case_1 = [15, 33, 1422,\
    \ 1];\n$test_case_2 = [152, 323, 1422, 10];\necho json_encode(unique_digits($test_case_1)).PHP_EOL;\n\
    echo json_encode(unique_digits($test_case_2)).PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "[1,15,33,1422]\n[10,152,323,1422]\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpx8tbajp1.php:37\nStack trace:\n#0 /tmp/tmpx8tbajp1.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpx8tbajp1.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t// See if any of the number is even by checking\
    \ the last digit of the number\n\t$result = array();\n\t$counter = 0;\n\twhile($counter\
    \ < count($x)) {\n\t\tif($x[$counter] % 2 != 0) {\n\t\t\tarray_push($result, $x[$counter]);\n\
    \t\t}\n\t\t$counter++;\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn6ctbj_i.php:28\n\
    Stack trace:\n#0 /tmp/tmpn6ctbj_i.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpn6ctbj_i.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\tforeach ($x as $key => $value) {\n\t\t$arr = str_split($value);\n\
    \t\tforeach ($arr as $key2 => $value2) {\n\t\t\tif ($value2 % 2 == 0) {\n\t\t\t\
    \tunset($x[$key]);\n\t\t\t}\n\t\t}\n\t}\n\tsort($x);\n\treturn $x;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n   foreach ($x as $key => $value) {\n      $even_digit\
    \ = false;\n      for ($i = 0; $i < strlen($value); $i++) {\n         if (is_int($value[$i])\
    \ && $value[$i] % 2 == 0) {\n            $even_digit = true;\n            break;\n\
    \         }\n      }\n      if ($even_digit) {\n         unset($x[$key]);\n  \
    \    }\n   }\n   sort($x);\n   return $x;\n}\n\nfunction candidate(...$args) {\n\
    \    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0ldy3rw.php:32\n\
    Stack trace:\n#0 /tmp/tmpp0ldy3rw.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpp0ldy3rw.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $uniques = [];\n    $evens = [0, 2, 4, 6, 8];\n\
    \    foreach ($x as $num) {\n        $uniq = true;\n        while ($num > 0) {\n\
    \            $last_digit = $num % 10;\n            if (in_array($last_digit, $evens))\
    \ {\n                $uniq = false;\n                break;\n            }\n \
    \           $num = floor($num / 10);\n        }\n        if ($uniq) {\n      \
    \      $uniques[] = $num;\n        }\n    }\n    sort($uniques);\n    return $uniques;\n\
    }\necho implode(', ', unique_digits([15, 33, 1422, 1])) . \"\\n\";\necho implode(',\
    \ ', unique_digits([152, 323, 1422, 10])) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "0, 0, 0\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl0p9garj.php:37\n\
    Stack trace:\n#0 /tmp/tmpl0p9garj.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpl0p9garj.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$y = [];\n\tforeach ($x as $i) {\n\t\tif ($i <\
    \ 10) {\n\t\t\t$y[] = $i;\n\t\t} else {\n\t\t\t$digits = get_digits($i);\n\t\t\
    \tif (!in_array(0, $digits) && !in_array(2, $digits) && !in_array(4, $digits)\
    \ && !in_array(6, $digits) && !in_array(8, $digits)) {\n\t\t\t\t$y[] = $i;\n\t\
    \t\t}\n\t\t}\n\t}\n\tsort($y);\n\treturn $y;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_digits()\
    \ in /tmp/tmpvuispy2_.php:16\nStack trace:\n#0 /tmp/tmpvuispy2_.php(27): unique_digits(Array)\n\
    #1 /tmp/tmpvuispy2_.php(31): candidate(Array)\n#2 /tmp/tmpvuispy2_.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpvuispy2_.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    return array_values(array_filter($x, function($n)\
    \ {\n        return preg_match('/[0-9]*[0-9]$/', $n);\n    }));\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzp_krv1b.php:21\n\
    Stack trace:\n#0 /tmp/tmpzp_krv1b.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpzp_krv1b.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $evenNumbers = array();\n    foreach ($x as\
    \ $num) {\n        if ($num % 2 != 0) {\n            $evenNumbers[] = $num;\n\
    \        }\n    }\n    print_r($evenNumbers);\n}\n\nunique_digits([15, 33, 1422,\
    \ 1]);\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 15\n    [1] => 33\n    [2] => 1\n)\nArray\n(\n   \
    \ [0] => 15\n    [1] => 33\n    [2] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpp68_xsqz.php:26\nStack trace:\n#0 /tmp/tmpp68_xsqz.php(32):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpp68_xsqz.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$no_even_digits = array();\n\tforeach ($x as $num)\
    \ {\n\t\t$has_even_digit = false;\n\t\t$num_string = strval($num);\n\t\tfor ($i\
    \ = 0; $i < strlen($num_string); $i++) {\n\t\t\tif ($num_string[$i] % 2 == 0)\
    \ {\n\t\t\t\t$has_even_digit = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!$has_even_digit)\
    \ {\n\t\t\tarray_push($no_even_digits, $num);\n\t\t}\n\t}\n\tasort($no_even_digits);\n\
    \treturn $no_even_digits;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkgkwe3lh.php:34\n\
    Stack trace:\n#0 /tmp/tmpkgkwe3lh.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpkgkwe3lh.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $evens = [0, 2, 4, 6, 8];\n    $sorted = [];\n\
    \    $last_digit = 0;\n    $has_even = false;\n    foreach ($x as $num) {\n  \
    \      while ($num > 0) {\n            $last_digit = $num % 10;\n            if\
    \ (in_array($last_digit, $evens)) {\n                $has_even = true;\n     \
    \           break;\n            }\n            $num = floor($num / 10);\n    \
    \    }\n        if (!$has_even) {\n            $sorted[] = $num;\n        }\n\
    \        $has_even = false;\n    }\n    sort($sorted);\n    return $sorted;\n\
    }\n\n$x = [15, 33, 1422, 1];\n$y = [152, 323, 1422, 10];\n$z = [];\necho implode(',\
    \ ', unique_digits($x)) . PHP_EOL;\necho implode(', ', unique_digits($y)) . PHP_EOL;\n\
    echo implode(', ', unique_digits($z)) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "0, 0, 0\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9thokb0b.php:44\n\
    Stack trace:\n#0 /tmp/tmp9thokb0b.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp9thokb0b.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $k = [];\n    $result = [];\n    foreach ($x\
    \ as $value) {\n        if (contains($value)) {\n            $k[] = $value;\n\
    \        }\n    }\n    return $k;\n}\n\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function contains() in\
    \ /tmp/tmpfx9t0h0_.php:14\nStack trace:\n#0 /tmp/tmpfx9t0h0_.php(22): unique_digits(Array)\n\
    #1 /tmp/tmpfx9t0h0_.php(26): candidate(Array)\n#2 /tmp/tmpfx9t0h0_.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfx9t0h0_.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    \n}\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdsoj8wut.php:18\n\
    Stack trace:\n#0 /tmp/tmpdsoj8wut.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpdsoj8wut.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $i = 0;\n    while ($i < count($x)) {\n    \
    \    $m = $x[$i];\n        $d = $m % 10;\n        $m = $m / 10;\n        while\
    \ ($m != 0) {\n            if ($d % 2 == 0) {\n                $i++;\n       \
    \         continue 2;\n            }\n            $d = $m % 10;\n            $m\
    \ = $m / 10;\n        }\n        $res[] = $x[$i];\n        $i++;\n    }\n    sort($res);\n\
    \    return $res;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, null given in /tmp/tmpxjau3gt8.php\
    \ on line 27\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxjau3gt8.php:36\n\
    Stack trace:\n#0 /tmp/tmpxjau3gt8.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpxjau3gt8.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $temp = [];\n    $even = ['0', '2', '4', '6',\
    \ '8'];\n    foreach ($x as $num) {\n        $str = strval($num);\n        for\
    \ ($i = 0; $i < strlen($str); $i++) {\n            if (in_array($str[$i], $even))\
    \ {\n                array_push($temp, $num);\n                break;\n      \
    \      }\n        }\n    }\n    $x = array_diff($x, $temp);\n    sort($x);\n \
    \   return $x;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $even = array(0, 2, 4, 6, 8);\n    $odd = array(1,\
    \ 3, 5, 7, 9);\n    $unique = array();\n    foreach ($x as $n) {\n        $n_str\
    \ = strval($n);\n        $n_arr = str_split($n_str);\n        $unique_flag = 1;\n\
    \        foreach ($n_arr as $digit) {\n            if (in_array($digit, $even))\
    \ {\n                $unique_flag = 0;\n                break;\n            }\n\
    \        }\n        if ($unique_flag) {\n            array_push($unique, $n);\n\
    \        }\n    }\n    sort($unique);\n    return $unique;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$unique_list = [];\n\tforeach ($x as $number)\
    \ {\n\t\tif (count(preg_split('//',$number,-1,PREG_SPLIT_NO_EMPTY)) > 1) {\n\t\
    \t\tif (count(preg_split('//',$number,-1,PREG_SPLIT_NO_EMPTY)) < 3) {\n\t\t\t\t\
    $number = $number * 10;\n\t\t\t}\n\t\t\t$digits = str_split($number);\n\t\t\t\
    $even_digits = 0;\n\t\t\tforeach ($digits as $digit) {\n\t\t\t\tif (strpos($digit,\
    \ \"2\") !== false || strpos($digit, \"4\") !== false || strpos($digit, \"6\"\
    ) !== false || strpos($digit, \"8\") !== false) {\n\t\t\t\t\t$even_digits += 1;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\tif ($even_digits == 0) {\n\t\t\t\tarray_push($unique_list,\
    \ $number);\n\t\t\t}\n\t\t}\n\t}\n\tif ($unique_list != []) {\n\t\tsort($unique_list);\n\
    \t\treturn $unique_list;\n\t}\n\telse {\n\t\treturn [];\n\t}\n}\n\n$list1 = [15,\
    \ 33, 1422, 1];\n$list2 = [152, 323, 1422, 10];\n\nvar_dump(unique_digits($list1));\n\
    var_dump(unique_digits($list2));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(2) {\n  [0]=>\n  int(150)\n  [1]=>\n  int(330)\n}\narray(1) {\n \
    \ [0]=>\n  int(100)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpotfefwt5.php:48\n\
    Stack trace:\n#0 /tmp/tmpotfefwt5.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpotfefwt5.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $y = [];\n  foreach ($x as $value) {\n    if (strlen($value)\
    \ == 1 && is_odd($value)) {\n      array_push($y, $value);\n    } else if (strlen($value)\
    \ == 2 && is_odd($value[0]) && is_odd($value[1])) {\n      array_push($y, $value);\n\
    \    } else if (strlen($value) == 3 && is_odd($value[0]) && is_odd($value[1])\
    \ && is_odd($value[2])) {\n      array_push($y, $value);\n    } else if (strlen($value)\
    \ == 4 && is_odd($value[0]) && is_odd($value[1]) && is_odd($value[2]) && is_odd($value[3]))\
    \ {\n      array_push($y, $value);\n    }\n  }\n  return $y;\n}\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_odd() in /tmp/tmpv_afbs08.php:15\n\
    Stack trace:\n#0 /tmp/tmpv_afbs08.php(26): unique_digits(Array)\n#1 /tmp/tmpv_afbs08.php(30):\
    \ candidate(Array)\n#2 /tmp/tmpv_afbs08.php(36): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpv_afbs08.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$y = [];\n\t$z = [];\n\tforeach ($x as $num) {\n\
    \t\t$num = str_split($num);\n\t\t$even = false;\n\t\tforeach ($num as $digit)\
    \ {\n\t\t\tif (($digit % 2) == 0) {\n\t\t\t\t$even = true;\n\t\t\t}\n\t\t}\n\t\
    \tif ($even == false) {\n\t\t\t$y[] = implode($num);\n\t\t}\n\t}\n\tforeach ($y\
    \ as $key => $value) {\n\t\t$z[$key] = (int)$value;\n\t}\n\tasort($z);\n\treturn\
    \ $z;\n}\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo0mcgvoz.php:36\n\
    Stack trace:\n#0 /tmp/tmpo0mcgvoz.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpo0mcgvoz.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\tforeach ($x as $key => $value) {\n\t\tif (strpbrk($value,\
    \ '02468')) {\n\t\t\tunset($x[$key]);\n\t\t}\n\t}\n\tsort($x);\n\treturn $x;\n\
    }\n$x = array(12, 9, 3, 31, 15, 9, 20, 60, 5, 11, 25, 31, 1, 9, 75, 23, 19, 18,\
    \ 14, 8, 12, 16, 13, 6, 5, 1, 26, 30, 34, 10, 13, 13, 13, 33, 4, 18, 20, 9, 23,\
    \ 32, 1, 14, 14, 19, 10, 9, 1, 19, 4, 20, 27, 31, 15, 24, 31, 15, 12, 33, 3, 32,\
    \ 16, 23, 31, 1, 11, 24, 33, 5, 10, 31, 10, 18, 20, 16, 33, 22, 11, 1, 19, 5,\
    \ 10, 33, 33, 15, 31, 20, 27, 22, 26, 3, 33, 24, 32, 31, 16, 16, 1, 3, 9, 5, 25,\
    \ 20, 9, 11, 16, 19, 9, 1, 20, 27, 9, 22, 6, 14, 16, 5, 31, 18, 4, 5, 24, 30,\
    \ 30, 26, 31, 13, 13, 13, 13, 24, 14, 12, 16, 23, 21, 31, 18, 15, 33, 1, 11, 3,\
    \ 15, 31, 19, 3, 11, 18, 32, 25, 16, 21, 6, 20, 33, 18, 15, 10, 26, 27, 10, 26,\
    \ 31, 25, 21, 15, 11, 1, 27, 18, 33, 6, 15, 16, 24, 19, 23, 21, 31, 6, 33, 3,\
    \ 1, 23, 32, 15, 14, 12, 22, 11, 25, 20, 6, 32, 20, 18, 3, 25, 33, 5, 11, 31,\
    \ 18, 10, 26, 16, 33, 14, 1, 31, 12, 20, 24, 33, 33, 24, 20, 31, 21, 16, 26\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6i2vl83u.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $result = [];\n  for ($i = 0; $i < count($x);\
    \ $i++) {\n    $hasEven = false;\n    $num = $x[$i];\n    while ($num > 0) {\n\
    \      $digit = $num % 10;\n      if ($digit % 2 == 0) {\n        $hasEven = true;\n\
    \        break;\n      }\n      $num = (int)($num / 10);\n    }\n    if (!$hasEven)\
    \ {\n      array_push($result, $x[$i]);\n    }\n  }\n  sort($result);\n  return\
    \ $result;\n}\nprint_r(unique_digits([15, 33, 1422, 1]));\nprint_r(unique_digits([152,\
    \ 323, 1422, 10]));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\n}\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5j98mjhd.php:18\n\
    Stack trace:\n#0 /tmp/tmp5j98mjhd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp5j98mjhd.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $final_array = [];\n    foreach ($x as $item)\
    \ {\n        $item_array = str_split($item);\n        $flag = false;\n       \
    \ foreach ($item_array as $digit) {\n            if ($digit % 2 == 0) {\n    \
    \            $flag = true;\n                break;\n            }\n        }\n\
    \        if (!$flag) {\n            $final_array[] = $item;\n        }\n    }\n\
    \    return $final_array;\n}\n\n$x = [152, 323, 1422, 10];\n$result = unique_digits($x);\n\
    echo '<pre>';\nprint_r($result);\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n)\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpide4f0iy.php:38\nStack trace:\n#0 /tmp/tmpide4f0iy.php(44): test()\n\
    #1 {main}\n  thrown in /tmp/tmpide4f0iy.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $result = [];\n  foreach ($x as $number) {\n \
    \   $number = (string) $number;\n    if (strpos($number, '2') === false &&\n \
    \       strpos($number, '4') === false &&\n        strpos($number, '6') === false\
    \ &&\n        strpos($number, '8') === false &&\n        strpos($number, '0')\
    \ === false) {\n      $result[] = $number;\n    }\n  }\n  sort($result);\n  return\
    \ $result;\n}\n\nprint_r(unique_digits([15, 33, 1422, 1]));\nprint_r(unique_digits([152,\
    \ 323, 1422, 10]));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp12l7dzms.php:33\nStack\
    \ trace:\n#0 /tmp/tmp12l7dzms.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp12l7dzms.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$no_even_digits = [];\n\tforeach ($x as $y) {\n\
    \t\t$is_even = false;\n\t\t$digits = str_split($y);\n\t\tforeach ($digits as $digit)\
    \ {\n\t\t\tif ($digit % 2 == 0) {\n\t\t\t\t$is_even = true;\n\t\t\t\tbreak;\n\t\
    \t\t}\n\t\t}\n\t\tif (!$is_even) {\n\t\t\t$no_even_digits[] = $y;\n\t\t}\n\t}\n\
    \tsort($no_even_digits);\n\treturn $no_even_digits;\n}\n\nif (count($argv) > 1)\
    \ {\n\t$numbers = array_slice($argv, 1);\n\techo join(', ', unique_digits($numbers))\
    \ . \"\\n\";\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $x_length = count($x);\n    $unique_digits =\
    \ [];\n    for ($i = 0; $i < $x_length; $i++) {\n        if ($x[$i] < 10) {\n\
    \            array_push($unique_digits, $x[$i]);\n        } else if ($x[$i] <\
    \ 100) {\n            $num = $x[$i];\n            $d1 = floor($num / 10);\n  \
    \          $d2 = $num % 10;\n            if ($d1 % 2 != 0 && $d2 % 2 != 0) {\n\
    \                array_push($unique_digits, $x[$i]);\n            }\n        }\
    \ else if ($x[$i] < 1000) {\n            $num = $x[$i];\n            $d1 = floor($num\
    \ / 100);\n            $d2 = floor(($num % 100) / 10);\n            $d3 = $num\
    \ % 10;\n            if ($d1 % 2 != 0 && $d2 % 2 != 0 && $d3 % 2 != 0) {\n   \
    \             array_push($unique_digits, $x[$i]);\n            }\n        } else\
    \ if ($x[$i] < 10000) {\n            $num = $x[$i];\n            $d1 = floor($num\
    \ / 1000);\n            $d2 = floor(($num % 1000) / 100);\n            $d3 = floor(($num\
    \ % 100) / 10);\n            $d4 = $num % 10;\n            if ($d1 % 2 != 0 &&\
    \ $d2 % 2 != 0 && $d3 % 2 != 0 && $d4 % 2 != 0) {\n                array_push($unique_digits,\
    \ $x[$i]);\n            }\n        } else if ($x[$i] < 100000) {\n           \
    \ $num = $x[$i];\n            $d1 = floor($num / 10000);\n            $d2 = floor(($num\
    \ % 10000) / 1000);\n            $d3 = floor(($num % 1000) / 100);\n         \
    \   $d4 = floor(($num % 100) / 10);\n            $d5 = $num % 10;\n          \
    \  if ($d\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzrun35q6.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $even_digits = array('0', '2', '4', '6', '8');\n\
    \  $output = array();\n  foreach ($x as $i) {\n    if (!strpbrk($i, implode($even_digits)))\
    \ {\n      $output[] = $i;\n    }\n  }\n  sort($output);\n  return $output;\n\
    }\necho '<pre>';\nprint_r(unique_digits(array(15, 33, 1422, 1)));\necho '</pre>';\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n</pre>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp9xsqns5j.php:30\nStack\
    \ trace:\n#0 /tmp/tmp9xsqns5j.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp9xsqns5j.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $unique_digits = [];\n    foreach ($x as $value)\
    \ {\n        $digits = array_map('intval', str_split($value));\n        $even_count\
    \ = 0;\n        foreach ($digits as $digit) {\n            if ($digit % 2 == 0)\
    \ {\n                $even_count++;\n            }\n        }\n        if ($even_count\
    \ == 0) {\n            array_push($unique_digits, $value);\n        }\n    }\n\
    \    sort($unique_digits);\n    return $unique_digits;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $return = [];\n    foreach ($x as $num) {\n\
    \        $num_string = (string) $num;\n        $is_unique = true;\n        for\
    \ ($i = 0; $i < strlen($num_string); $i++) {\n            if ($num_string[$i]\
    \ % 2 == 0) {\n                $is_unique = false;\n                break;\n \
    \           }\n        }\n        if ($is_unique) {\n            $return[] = $num;\n\
    \        }\n    }\n    sort($return);\n    return $return;\n}\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $result = [];\n  foreach ($x as $number) {\n \
    \   $digits = str_split($number);\n    $is_odd = true;\n    foreach ($digits as\
    \ $digit) {\n      if ($digit % 2 == 0) {\n        $is_odd = false;\n        break;\n\
    \      }\n    }\n    if ($is_odd) {\n      $result[] = $number;\n    }\n  }\n\
    \  sort($result);\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $output = [];\n    foreach ($x as $number) {\n\
    \        $numberStr = strval($number);\n        if (preg_match('/[02468]/', $numberStr))\
    \ {\n            continue;\n        }\n        $output[] = $number;\n    }\n \
    \   return $output;\n}\n\nprint_r(unique_digits([15, 33, 1422, 1]));\nprint_r(unique_digits([152,\
    \ 323, 1422, 10]));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 15\n    [1] => 33\n    [2] => 1\n)\nArray\n(\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpgrc12yfj.php:29\nStack\
    \ trace:\n#0 /tmp/tmpgrc12yfj.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpgrc12yfj.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $arr = [];\n  $evens = [0, 2, 4, 6, 8];\n  foreach\
    \ ($x as $num) {\n    $count = 0;\n    $digits = (string)$num;\n    for ($i =\
    \ 0; $i < strlen($digits); $i++) {\n      if (in_array($digits[$i], $evens)) {\n\
    \        $count++;\n      }\n    }\n    if ($count == 0) {\n      array_push($arr,\
    \ $num);\n    }\n  }\n  sort($arr);\n  return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    // Your code goes here.\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4u_e20w6.php:19\n\
    Stack trace:\n#0 /tmp/tmp4u_e20w6.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp4u_e20w6.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $z = $x;\n    $i = 0;\n    while (count($z)\
    \ != 0) {\n        if (($z[$i] % 2) == 0) {\n            array_splice($z, $i,\
    \ 1);\n        } else {\n            $i++;\n        }\n    }\n    sort($z);\n\
    \    return $z;\n}\n\nprint_r(unique_digits([15, 33, 1422, 1]));\nprint_r(unique_digits([152,\
    \ 323, 1422, 10]));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $item) {\n\t\t\
    $item = str_split($item);\n\t\t$flag = true;\n\t\tforeach ($item as $value) {\n\
    \t\t\tif ($value % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\
    \t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = implode($item);\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpac435lry.php:34\n\
    Stack trace:\n#0 /tmp/tmpac435lry.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpac435lry.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $result = [];\n  foreach ($x as $n) {\n    $has_even_digit\
    \ = false;\n    $n_as_string = (string) $n;\n    for ($i = 0; $i < strlen($n_as_string);\
    \ $i++) {\n      if (($n_as_string[$i] % 2) == 0) {\n        $has_even_digit =\
    \ true;\n        break;\n      }\n    }\n    if (!$has_even_digit) {\n      $result[]\
    \ = $n;\n    }\n  }\n  sort($result);\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$res = [];\n\tforeach ($x as $i) {\n\t\tif (evenDigits($i))\
    \ {\n\t\t\tcontinue;\n\t\t}\n\t\t$res[] = $i;\n\t}\n\tsort($res);\n\treturn $res;\n\
    }\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function evenDigits()\
    \ in /tmp/tmpb0thignp.php:13\nStack trace:\n#0 /tmp/tmpb0thignp.php(23): unique_digits(Array)\n\
    #1 /tmp/tmpb0thignp.php(27): candidate(Array)\n#2 /tmp/tmpb0thignp.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmpb0thignp.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $result = [];\n  $odd_digits = [];\n  foreach\
    \ ($x as $num) {\n    $num_str = strval($num);\n    if (strlen($num_str) == 1)\
    \ {\n      $result[] = $num;\n    } else {\n      $found_even = false;\n     \
    \ foreach (str_split($num_str) as $digit) {\n        if ($digit % 2 == 0) {\n\
    \          $found_even = true;\n          break;\n        }\n      }\n      if\
    \ (!$found_even) {\n        $result[] = $num;\n      }\n    }\n  }\n  sort($result);\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $even = [0, 2, 4, 6, 8];\n    $result = [];\n\
    \    foreach ($x as $n) {\n        $digits = str_split($n);\n        $check =\
    \ true;\n        foreach ($digits as $digit) {\n            if (in_array($digit,\
    \ $even)) {\n                $check = false;\n                break;\n       \
    \     }\n        }\n        if ($check) {\n            $result[] = $n;\n     \
    \   }\n    }\n    sort($result);\n    return $result;\n}\n$a = [15, 33, 1422,\
    \ 1];\n$b = [152, 323, 1422, 10];\nprint_r(unique_digits($a));\nprint_r(unique_digits($b));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $no_even_digits = [];\n    $even_digits = [0,\
    \ 2, 4, 6, 8];\n    foreach ($x as $value) {\n        $no_even_flag = true;\n\
    \        $value_str = (string)$value;\n        for ($i = 0; $i < strlen($value_str);\
    \ $i++) {\n            if (in_array($value_str[$i], $even_digits)) {\n       \
    \         $no_even_flag = false;\n                break;\n            }\n    \
    \    }\n        if ($no_even_flag) {\n            $no_even_digits[] = $value;\n\
    \        }\n    }\n    return sort($no_even_digits);\n}\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1dg8lj8y.php:33\n\
    Stack trace:\n#0 /tmp/tmp1dg8lj8y.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp1dg8lj8y.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t\n}\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptf20ohiv.php:18\n\
    Stack trace:\n#0 /tmp/tmptf20ohiv.php(24): test()\n#1 {main}\n  thrown in /tmp/tmptf20ohiv.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $result = [];\n  foreach ($x as $number) {\n \
    \   if (!has_even_digit($number)) {\n      $result[] = $number;\n    }\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function has_even_digit()\
    \ in /tmp/tmp_at4cjvr.php:13\nStack trace:\n#0 /tmp/tmp_at4cjvr.php(21): unique_digits(Array)\n\
    #1 /tmp/tmp_at4cjvr.php(25): candidate(Array)\n#2 /tmp/tmp_at4cjvr.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmp_at4cjvr.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $filtered = [];\n    foreach ($x as $n) {\n\
    \        $hasEven = false;\n        $n = (string) $n;\n        for ($i = 0; $i\
    \ < strlen($n); $i++) {\n            if ((int) $n[$i] % 2 === 0) {\n         \
    \       $hasEven = true;\n                break;\n            }\n        }\n \
    \       if (!$hasEven) {\n            $filtered[] = (int) $n;\n        }\n   \
    \ }\n    sort($filtered);\n    return $filtered;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $no_even = [];\n    $x = array_unique($x);\n\
    \    $x = array_values($x);\n    for ($i = 0; $i < count($x); $i++) {\n      \
    \  if (!contains_even($x[$i])) {\n            array_push($no_even, $x[$i]);\n\
    \        }\n    }\n    return $no_even;\n}\n\nfunction candidate(...$args) {\n\
    \    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function contains_even()\
    \ in /tmp/tmp5gl2i4o3.php:15\nStack trace:\n#0 /tmp/tmp5gl2i4o3.php(23): unique_digits(Array)\n\
    #1 /tmp/tmp5gl2i4o3.php(27): candidate(Array)\n#2 /tmp/tmp5gl2i4o3.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5gl2i4o3.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $val) {\n\
    \        if (!preg_match('/2|4|6|8/', $val)) {\n            $result[] = $val;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\necho \"Given\
    \ a list of positive integers x. return a sorted list of all elements that hasn't\
    \ any even digit.\";\necho \"<br>\";\necho \"Note: Returned list should be sorted\
    \ in increasing order.\";\necho \"<br>\";\necho \"For example:\";\necho \"<br>\"\
    ;\necho \">>> unique_digits([15, 33, 1422, 1])\";\necho \"<br>\";\necho \"[1,\
    \ 15, 33]\";\necho \"<br>\";\necho \">>> unique_digits([152, 323, 1422, 10])\"\
    ;\necho \"<br>\";\necho \"[]\";\necho \"<br>\";\necho \"<br>\";\necho \"Test 1:\"\
    ;\necho \"<br>\";\necho \"Input: \\$x = [15, 33, 1422, 1]\";\necho \"<br>\";\n\
    echo \"Expected output: \";\necho \"[1, 15, 33]\";\necho \"<br>\";\necho \"Actual\
    \ output: \";\nprint_r(unique_digits([15, 33, 1422, 1]));\necho \"<br>\";\necho\
    \ \"<br>\";\necho \"Test 2:\";\necho \"<br>\";\necho \"Input: \\$x = [152, 323,\
    \ 1422, 10]\";\necho \"<br>\";\necho \"Expected output: \";\necho \"[]\";\necho\
    \ \"<br>\";\necho \"Actual output: \";\nprint_r(unique_digits([152, 323, 1422,\
    \ 10]));\necho \"<br>\";\necho \"<br>\";\nfunction candidate(...$args) {\n   \
    \ return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "Given a list of positive integers x. return a sorted list of all elements\
    \ that hasn't any even digit.<br>Note: Returned list should be sorted in increasing\
    \ order.<br>For example:<br>>>> unique_digits([15, 33, 1422, 1])<br>[1, 15, 33]<br>>>>\
    \ unique_digits([152, 323, 1422, 10])<br>[]<br><br>Test 1:<br>Input: $x = [15,\
    \ 33, 1422, 1]<br>Expected output: [1, 15, 33]<br>Actual output: Array\n(\n  \
    \  [0] => 1\n    [1] => 15\n    [2] => 33\n)\n<br><br>Test 2:<br>Input: $x = [152,\
    \ 323, 1422, 10]<br>Expected output: []<br>Actual output: Array\n(\n    [0] =>\
    \ 10\n)\n<br><br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccuogymp.php:64\n\
    Stack trace:\n#0 /tmp/tmpccuogymp.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpccuogymp.php\
    \ on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $even = [0, 2, 4, 6, 8];\n    $unique = [];\n\
    \    $arrSize = count($x);\n    for ($i = 0; $i < $arrSize; $i++) {\n        $digits\
    \ = str_split($x[$i]);\n        $digSize = count($digits);\n        $isUnique\
    \ = true;\n        for ($j = 0; $j < $digSize; $j++) {\n            if (in_array($digits[$j],\
    \ $even)) {\n                $isUnique = false;\n                break;\n    \
    \        }\n        }\n        if ($isUnique) {\n            array_push($unique,\
    \ $x[$i]);\n        }\n    }\n    sort($unique);\n    return $unique;\n}\n\nprint_r(unique_digits([15,\
    \ 33, 1422, 1]));\nprint_r(unique_digits([152, 323, 1422, 10]));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$nums = [];\n\tforeach ($x as $v) {\n\t\t$even\
    \ = FALSE;\n\t\twhile ($v > 0) {\n\t\t\tif (($v % 10) % 2 == 0) {\n\t\t\t\t$even\
    \ = TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$v = floor($v / 10);\n\t\t}\n\t\tif\
    \ (!$even) {\n\t\t\t$nums[] = $v;\n\t\t}\n\t}\n\tsort($nums);\n\treturn $nums;\n\
    }\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_73oznh4.php:34\n\
    Stack trace:\n#0 /tmp/tmp_73oznh4.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp_73oznh4.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $output = [];\n  foreach ($x as $value) {\n  \
    \  if (!is_even_digit($value)) {\n      $output[] = $value;\n    }\n  }\n  sort($output);\n\
    \  return $output;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_even_digit()\
    \ in /tmp/tmp25k_e_9g.php:13\nStack trace:\n#0 /tmp/tmp25k_e_9g.php(22): unique_digits(Array)\n\
    #1 /tmp/tmp25k_e_9g.php(26): candidate(Array)\n#2 /tmp/tmp25k_e_9g.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmp25k_e_9g.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $result = [];\n  foreach ($x as $value) {\n  \
    \  $string = (string)$value;\n    $flag = true;\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n      if ($string[$i] % 2 == 0) {\n        $flag = false;\n       \
    \ break;\n      }\n    }\n    if ($flag) {\n      $result[] = $value;\n    }\n\
    \  }\n  sort($result);\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    foreach ($x as $n) {\n        if (strpos($n,\
    \ '2') !== false || strpos($n, '4') !== false ||\n            strpos($n, '6')\
    \ !== false || strpos($n, '8') !== false) {\n            unset($x[array_search($n,\
    \ $x)]);\n        }\n    }\n    sort($x);\n    return $x;\n}\n\nprint_r(unique_digits([15,\
    \ 33, 1422, 1]));\necho \"\\n\";\nprint_r(unique_digits([152, 323, 1422, 10]));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n\nArray\n(\n \
    \   [0] => 10\n)\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa6a0x8yi.php:31\n\
    Stack trace:\n#0 /tmp/tmpa6a0x8yi.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpa6a0x8yi.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $new_list = [];\n    foreach ($x as $value)\
    \ {\n        if (strlen($value) == 1) {\n            array_push($new_list, $value);\n\
    \        } else {\n            $new_value = str_split($value);\n            $res\
    \ = array_intersect($new_value, ['2', '4', '6', '8', '0']);\n            if (count($res)\
    \ == 0) {\n                array_push($new_list, $value);\n            }\n   \
    \     }\n    }\n    rsort($new_list);\n    return $new_list;\n}\n\nprint_r(unique_digits([15,\
    \ 33, 1422, 1]));\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 33\n    [1] => 15\n    [2] => 1\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpilh0yhs8.php:34\nStack trace:\n\
    #0 /tmp/tmpilh0yhs8.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpilh0yhs8.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $output = [];\n    foreach ($x as $num) {\n\
    \        if ($num % 2 != 0) {\n            array_push($output, $num);\n      \
    \  }\n    }\n    return $output;\n}\n\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjzi1g_8e.php:25\n\
    Stack trace:\n#0 /tmp/tmpjzi1g_8e.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpjzi1g_8e.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $res = [];\n  foreach ($x as $num) {\n    $is_ok\
    \ = true;\n    while ($num > 0) {\n      $digit = $num % 10;\n      if ($digit\
    \ % 2 == 0) {\n        $is_ok = false;\n        break;\n      }\n      $num =\
    \ floor($num / 10);\n    }\n    if ($is_ok) {\n      $res[] = $num;\n    }\n \
    \ }\n  sort($res);\n  return $res;\n}\n\nassert(unique_digits([15, 33, 1422, 1])\
    \ == [1, 15, 33]);\nassert(unique_digits([152, 323, 1422, 10]) == []);\n\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert(unique_digits([15, 33, 1422, 1]) == [1, 15,\
    \ 33]) failed in /tmp/tmpdu8awap4.php on line 30\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpdu8awap4.php:38\nStack trace:\n#0 /tmp/tmpdu8awap4.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpdu8awap4.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $i) {\n  \
    \      if (check_digit($i)) {\n            $result[] = $i;\n        }\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function check_digit()\
    \ in /tmp/tmpq4vlftf7.php:13\nStack trace:\n#0 /tmp/tmpq4vlftf7.php(21): unique_digits(Array)\n\
    #1 /tmp/tmpq4vlftf7.php(25): candidate(Array)\n#2 /tmp/tmpq4vlftf7.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmpq4vlftf7.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $result = [];\n  foreach ($x as $num) {\n    if\
    \ (strlen(strval($num)) == 1) {\n      array_push($result, $num);\n    } else\
    \ {\n      $nums = str_split(strval($num));\n      $isEven = false;\n      foreach\
    \ ($nums as $n) {\n        if ($n % 2 == 0) {\n          $isEven = true;\n   \
    \       break;\n        }\n      }\n      if (!$isEven) {\n        array_push($result,\
    \ $num);\n      }\n    }\n  }\n  sort($result);\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $a = [];\n    foreach ($x as $v) {\n       \
    \ $s = (string)$v;\n        $b = true;\n        for ($i = 0; $i < strlen($s);\
    \ $i++) {\n            if ((int)$s[$i] % 2 == 0) {\n                $b = false;\n\
    \                break;\n            }\n        }\n        if ($b) $a[] = $v;\n\
    \    }\n    sort($a);\n    return $a;\n}\nprint_r(unique_digits([15, 33, 1422,\
    \ 1]));\necho \"\\n\";\nprint_r(unique_digits([152, 323, 1422, 10]));\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n\nArray\n(\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$odds = [];\n\tforeach ($x as $num) {\n\t\t$has_even\
    \ = false;\n\t\t$str = (string)$num;\n\t\tfor ($i = 0; $i < strlen($str); $i++)\
    \ {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$has_even = true;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif (!$has_even) {\n\t\t\t$odds[] = $num;\n\t\t}\n\t}\n\tsort($odds);\n\
    \treturn $odds;\n}\n$tests = [\n\t[[15, 33, 1422, 1], [1, 15, 33]],\n\t[[152,\
    \ 323, 1422, 10], []],\n\t[[15, 33, 1422, 1, 1, 15, 33], [1, 15, 33]],\n\t[[],\
    \ []],\n\t[[0], []],\n\t[[1], [1]],\n\t[[2], []],\n\t[[11], [11]],\n\t[[22], []],\n\
    \t[[33], [33]],\n\t[[44], []],\n\t[[55], [55]],\n\t[[66], []],\n\t[[77], [77]],\n\
    \t[[88], []],\n\t[[99], [99]],\n\t[[123456789], [123456789]],\n\t[[987654321],\
    \ []],\n\t[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7, 9]],\n\t[[11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19, 20], [11, 13, 15, 17, 19]],\n\t[[21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30], [21, 23, 25, 27, 29]],\n\t[[31, 32, 33, 34, 35, 36, 37,\
    \ 38, 39, 40], [31, 33, 35, 37, 39]],\n\t[[41, 42, 43, 44, 45, 46, 47, 48, 49,\
    \ 50], [41, 43,\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsbl78x6l.php on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $unique = array();\n  foreach ($x as $y) {\n \
    \   $result = true;\n    $len = strlen($y);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n      if ($y[$i] % 2 == 0) {\n        $result = false;\n        break;\n\
    \      }\n    }\n    if ($result) {\n      array_push($unique, $y);\n    }\n \
    \ }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpblnpi1z9.php:32\n\
    Stack trace:\n#0 /tmp/tmpblnpi1z9.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpblnpi1z9.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    return $x;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz4fh9rnc.php:19\n\
    Stack trace:\n#0 /tmp/tmpz4fh9rnc.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpz4fh9rnc.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    $x = array_map('strval',\
    \ $x);\n    $x = array_map('str_split', $x);\n    foreach ($x as $key => $value)\
    \ {\n        $temp = array_map('intval', $value);\n        if (in_array(0, $temp)\
    \ || in_array(2, $temp) || in_array(4, $temp) || in_array(6, $temp) || in_array(8,\
    \ $temp)) {\n            unset($x[$key]);\n        }\n    }\n    foreach ($x as\
    \ $key => $value) {\n        array_push($result, intval(implode($value)));\n \
    \   }\n    sort($result);\n    return $result;\n}\nprint_r(unique_digits([15,\
    \ 33, 1422, 1]));\nprint_r(unique_digits([152, 323, 1422, 10]));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $res = [];\n  foreach ($x as $value) {\n    if\
    \ ($value < 10) {\n      $res[] = $value;\n    } else {\n      $even = false;\n\
    \      $val = $value;\n      while ($val > 0) {\n        $digit = $val % 10;\n\
    \        if ($digit % 2 == 0) {\n          $even = true;\n          break;\n \
    \       }\n        $val = intval($val / 10);\n      }\n      if (!$even) {\n \
    \       $res[] = $value;\n      }\n    }\n  }\n  sort($res);\n  return $res;\n\
    }\n\n$list1 = [15, 33, 1422, 1];\n$list2 = [152, 323, 1422, 10];\n$list3 = [152,\
    \ 1422, 10];\n\necho \"Input: \" . implode(\", \", $list1) . \"\\n\";\necho \"\
    Output: \" . implode(\", \", unique_digits($list1)) . \"\\n\";\necho \"Input:\
    \ \" . implode(\", \", $list2) . \"\\n\";\necho \"Output: \" . implode(\", \"\
    , unique_digits($list2)) . \"\\n\";\necho \"Input: \" . implode(\", \", $list3)\
    \ . \"\\n\";\necho \"Output: \" . implode(\", \", unique_digits($list3)) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Input: 15, 33, 1422, 1\nOutput: 1, 15, 33\nInput: 152, 323, 1422, 10\n\
    Output: \nInput: 152, 1422, 10\nOutput: \n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $value) {\n\t\t\
    $str = strval($value);\n\t\tif (is_numeric($str[0]) && $str[0] % 2 != 0 ||\n\t\
    \t\tis_numeric($str[1]) && $str[1] % 2 != 0 ||\n\t\t\tis_numeric($str[2]) && $str[2]\
    \ % 2 != 0 ||\n\t\t\tis_numeric($str[3]) && $str[3] % 2 != 0) {\n\t\t\tarray_push($result,\
    \ $value);\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$x = [15, 33,\
    \ 1422, 1];\nvar_dump(unique_digits($x));\n\n$x = [152, 323, 1422, 10];\nvar_dump(unique_digits($x));\n\
    \n$x = [5, 5, 5, 5];\nvar_dump(unique_digits($x));\n\n$x = [5];\nvar_dump(unique_digits($x));\n\
    \n$x = [12, 23, 45, 60, 24, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\
    \ 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\
    \ 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\
    \ 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\
    \ 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\
    \ 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\
    \ 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\nfunction candidate(...$args) {\n  \
    \  return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpff93fre2.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$arr = array();\n\tfor ($i = 0; $i < count($x);\
    \ $i++) {\n\t\t$n = 0;\n\t\twhile ($x[$i] != 0) {\n\t\t\t$d = $x[$i] % 10;\n\t\
    \t\tif ($d % 2 == 0) {\n\t\t\t\t$n = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$x[$i]\
    \ = $x[$i] / 10;\n\t\t}\n\t\tif ($n == 0)\n\t\t\tarray_push($arr, $x[$i]);\n\t\
    }\n\tsort($arr);\n\treturn $arr;\n}\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe95gw4xy.php:33\n\
    Stack trace:\n#0 /tmp/tmpe95gw4xy.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpe95gw4xy.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$arr = array();\n\tforeach ($x as $value) {\n\t\
    \t$v = $value;\n\t\t$flag = true;\n\t\twhile ($v > 0) {\n\t\t\t$mod = $v % 10;\n\
    \t\t\tif ($mod % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\
    \t\t$v = (int)($v / 10);\n\t\t}\n\t\tif ($flag) {\n\t\t\tarray_push($arr, $value);\n\
    \t\t}\n\t}\n\tsort($arr);\n\treturn $arr;\n}\n\nfunction candidate(...$args) {\n\
    \    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  // Write code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmovwl462.php:19\n\
    Stack trace:\n#0 /tmp/tmpmovwl462.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpmovwl462.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (!has_even_digit($num)) {\n            $result[] = $num;\n       \
    \ }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function has_even_digit()\
    \ in /tmp/tmp9dn0t5jg.php:13\nStack trace:\n#0 /tmp/tmp9dn0t5jg.php(21): unique_digits(Array)\n\
    #1 /tmp/tmp9dn0t5jg.php(25): candidate(Array)\n#2 /tmp/tmp9dn0t5jg.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9dn0t5jg.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $evens = [0, 2, 4, 6, 8];\n    $unique = [];\n\
    \    foreach ($x as $x0) {\n        if (unique_digits_helper($x0, $evens)) {\n\
    \            $unique[] = $x0;\n        }\n    }\n    sort($unique);\n    return\
    \ $unique;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function unique_digits_helper()\
    \ in /tmp/tmp4b8urfd4.php:14\nStack trace:\n#0 /tmp/tmp4b8urfd4.php(23): unique_digits(Array)\n\
    #1 /tmp/tmp4b8urfd4.php(27): candidate(Array)\n#2 /tmp/tmp4b8urfd4.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4b8urfd4.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $digits = str_split($value);\n        $has_even = false;\n        foreach\
    \ ($digits as $digit) {\n            if ($digit % 2 == 0) {\n                $has_even\
    \ = true;\n                break;\n            }\n        }\n        if (!$has_even)\
    \ {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n \
    \   return $result;\n}\n\necho unique_digits([15, 33, 1422, 1]);\necho \"<br>\"\
    ;\necho unique_digits([152, 323, 1422, 10]);\nfunction candidate(...$args) {\n\
    \    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: Array<br>Array
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $value) {\n\t\t\
    if (strlen($value) == 1) {\n\t\t\t$result[] = $value;\n\t\t} else {\n\t\t\t$str_value\
    \ = strval($value);\n\t\t\t$flag = true;\n\t\t\tfor ($i = 0; $i < strlen($str_value);\
    \ $i++) {\n\t\t\t\tif ($str_value[$i] % 2 == 0) {\n\t\t\t\t\t$flag = false;\n\t\
    \t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($flag) {\n\t\t\t\t$result[] = $value;\n\
    \t\t\t}\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\necho \"unique_digits([15,\
    \ 33, 1422, 1]) = \";\nprint_r(unique_digits([15, 33, 1422, 1]));\necho \"<br>\"\
    ;\necho \"unique_digits([152, 323, 1422, 10]) = \";\nprint_r(unique_digits([152,\
    \ 323, 1422, 10]));\necho \"<br>\";\necho \"unique_digits([]) = \";\nprint_r(unique_digits([]));\n\
    echo \"<br>\";\necho \"unique_digits([111]) = \";\nprint_r(unique_digits([111]));\n\
    echo \"<br>\";\necho \"unique_digits([112]) = \";\nprint_r(unique_digits([112]));\n\
    echo \"<br>\";\necho \"unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) = \";\n\
    print_r(unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\necho \"<br>\";\necho\
    \ \"unique_digits([11, 22, 33, 44, 55, 66, 77, 88, 99, 100]) = \";\nprint_r(unique_digits([11,\
    \ 22, 33, 44, 55, 66, 77, 88, 99, 100]));\necho \"<br\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpx8bl30os.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tfor ($i = 0; $i < count($x);\
    \ $i++) {\n\t\tif (!preg_match('/[2468]/', $x[$i])) {\n\t\t\tarray_push($result,\
    \ $x[$i]);\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\nprint_r(unique_digits([15,\
    \ 33, 1422, 1]));\nprint_r(unique_digits([152, 323, 1422, 10]));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n   \
    \ [0] => 10\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm0cq4flp.php:29\n\
    Stack trace:\n#0 /tmp/tmpm0cq4flp.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpm0cq4flp.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $out = [];\n    foreach ($x as $n) {\n     \
    \   if (!has_even_digit($n)) {\n            $out[] = $n;\n        }\n    }\n \
    \   sort($out);\n    return $out;\n}\n\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function has_even_digit()\
    \ in /tmp/tmpehnpurj9.php:13\nStack trace:\n#0 /tmp/tmpehnpurj9.php(22): unique_digits(Array)\n\
    #1 /tmp/tmpehnpurj9.php(26): candidate(Array)\n#2 /tmp/tmpehnpurj9.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmpehnpurj9.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $results = [];\n    foreach ($x as $value) {\n\
    \        if (!(is_numeric($value) && (int)$value == $value)) {\n            die(\"\
    Input should be an array of positive integers\");\n        }\n        $result\
    \ = [];\n        while ($value != 0) {\n            $result[] = $value % 10;\n\
    \            $value = (int)($value / 10);\n        }\n        if (!in_array(0,\
    \ $result) && !in_array(2, $result) && !in_array(4, $result)\n            && !in_array(6,\
    \ $result) && !in_array(8, $result)) {\n            $results[] = $value;\n   \
    \     }\n    }\n    return $results;\n}\n\nvar_dump(unique_digits([15, 33, 1422,\
    \ 1]));\nvar_dump(unique_digits([152, 323, 1422, 10]));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(0)\n  [2]=>\n  int(0)\n}\n\
    array(0) {\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3w7a3q_o.php:36\n\
    Stack trace:\n#0 /tmp/tmp3w7a3q_o.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp3w7a3q_o.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    // FILL IN YOUR CODE HERE\n}\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpthgifblh.php:18\n\
    Stack trace:\n#0 /tmp/tmpthgifblh.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpthgifblh.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    \n}\n\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg4bozoxu.php:19\n\
    Stack trace:\n#0 /tmp/tmpg4bozoxu.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpg4bozoxu.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $y = [];\n    $even = false;\n    foreach ($x\
    \ as $i) {\n        while ($i > 0) {\n            if (($i % 10) % 2 == 0) {\n\
    \                $even = true;\n                break;\n            }\n      \
    \      $i = (int)($i / 10);\n        }\n        if (!$even) {\n            $y[]\
    \ = $i;\n        }\n        $even = false;\n    }\n    sort($y);\n    return $y;\n\
    }\n\necho \"\\nGiven a list of positive integers x. return a sorted list of all\
    \ \nelements that hasn't any even digit.\\n\\n\";\n\n$array1 = [15, 33, 1422,\
    \ 1];\n$array2 = [152, 323, 1422, 10];\n\necho \">>> unique_digits([15, 33, 1422,\
    \ 1])\\n\";\necho \"[1, 15, 33]\\n\";\n\necho \">>> unique_digits([152, 323, 1422,\
    \ 10])\\n\";\necho \"[]\\n\";\n\necho \"Array 1 is \";\nprint_r(unique_digits($array1));\n\
    echo \"\\n\";\n\necho \"Array 2 is \";\nprint_r(unique_digits($array2));\necho\
    \ \"\\n\";\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nGiven a list of positive integers x. return a sorted list of all \nelements\
    \ that hasn't any even digit.\n\n>>> unique_digits([15, 33, 1422, 1])\n[1, 15,\
    \ 33]\n>>> unique_digits([152, 323, 1422, 10])\n[]\nArray 1 is Array\n(\n    [0]\
    \ => 0\n    [1] => 0\n    [2] => 0\n)\n\nArray 2 is Array\n(\n)\n\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpifusldy_.php:55\nStack trace:\n\
    #0 /tmp/tmpifusldy_.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpifusldy_.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $value) {\n\t\t\
    $val = (string)$value;\n\t\t$even = false;\n\t\tfor ($i = 0; $i < strlen($val);\
    \ $i++) {\n\t\t\tif ($val[$i] % 2 == 0) {\n\t\t\t\t$even = true;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif (!$even) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tif\
    \ (!empty($result)) {\n\t\tsort($result);\n\t}\n\treturn $result;\n}\n\n$a = [15,\
    \ 33, 1422, 1];\n$b = [152, 323, 1422, 10];\n$c = [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 0];\n$d = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n\necho '<pre>';\nvar_dump(unique_digits($a));\n\
    var_dump(unique_digits($b));\nvar_dump(unique_digits($c));\nvar_dump(unique_digits($d));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(15)\n  [2]=>\n  int(33)\n\
    }\narray(0) {\n}\narray(5) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(3)\n  [2]=>\n\
    \  int(5)\n  [3]=>\n  int(7)\n  [4]=>\n  int(9)\n}\narray(5) {\n  [0]=>\n  int(11)\n\
    \  [1]=>\n  int(13)\n  [2]=>\n  int(15)\n  [3]=>\n  int(17)\n  [4]=>\n  int(19)\n\
    }\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $number) {\n\t\
    \t$number = str_split($number);\n\t\t$hasEven = false;\n\t\tforeach ($number as\
    \ $digit) {\n\t\t\tif ($digit % 2 == 0) {\n\t\t\t\t$hasEven = true;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\tif (!$hasEven) {\n\t\t\t$result[] = implode($number);\n\
    \t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n$x = [15, 33, 1422, 1];\n\
    $x = [152, 323, 1422, 10];\nprint_r(unique_digits($x));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphssgnii5.php:36\n\
    Stack trace:\n#0 /tmp/tmphssgnii5.php(42): test()\n#1 {main}\n  thrown in /tmp/tmphssgnii5.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $result = [];\n  foreach ($x as $k => $v) {\n\
    \    $has_even = false;\n    $v_arr = str_split($v);\n    foreach ($v_arr as $k1\
    \ => $v1) {\n      if ($v1 % 2 == 0) {\n        $has_even = true;\n        break;\n\
    \      }\n    }\n    if (!$has_even) {\n      $result[] = $v;\n    }\n  }\n  sort($result);\n\
    \  return $result;\n}\necho implode(', ', unique_digits([15, 33, 1422, 1])) .\
    \ \"\\n\";\necho implode(', ', unique_digits([152, 323, 1422, 10])) . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1, 15, 33\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $unique = function($x) {\n    $digits = str_split($x);\n\
    \    $evens = array_filter($digits, function($e) { return $e % 2 == 0; });\n \
    \   return count($evens) == 0;\n  };\n  $sort = function($a, $b) { return $a -\
    \ $b; };\n  return array_values(array_filter($x, $unique));\n}\n\n$digits = [15,\
    \ 33, 1422, 1];\necho implode(\", \", unique_digits($digits));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "15, 33, 1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprk1k2086.php:27\n\
    Stack trace:\n#0 /tmp/tmprk1k2086.php(33): test()\n#1 {main}\n  thrown in /tmp/tmprk1k2086.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    foreach ($x as $v) {\n        $odd = TRUE;\n\
    \        while ($v > 0) {\n            if (($v % 10) % 2 == 0) {\n           \
    \     $odd = FALSE;\n                break;\n            }\n            $v = (int)($v\
    \ / 10);\n        }\n        if ($odd) $y[] = $v;\n    }\n    return $y;\n}\n\
    print_r(unique_digits([15, 33, 1422, 1])); // [1, 15, 33]\nprint_r(unique_digits([152,\
    \ 323, 1422, 10])); // []\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0\n    [2] => 0\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpva870t8t.php:31\nStack trace:\n#0 /tmp/tmpva870t8t.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpva870t8t.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$array=[];\n\tfor ($i=0; $i < sizeof($x); $i++)\
    \ { \n\t\t$string=\"\";\n\t\t$number=$x[$i];\n\t\twhile ($number>0) {\n\t\t\t\
    $string=($number%10).\"\".$string;\n\t\t\t$number=floor($number/10);\n\t\t}\n\t\
    \tif (strpos($string, \"2\")==false and strpos($string, \"4\")==false and strpos($string,\
    \ \"6\")==false and strpos($string, \"8\")==false and strpos($string, \"0\")==false)\
    \ {\n\t\t\tarray_push($array, $x[$i]);\n\t\t}\n\t}\n\tsort($array);\n\treturn\
    \ $array;\n}\necho \"The sorted list of all elements that hasn't any even digit\
    \ is: \\n\";\nprint_r(unique_digits([15, 33, 1422, 1]));\necho \"\\n\";\nprint_r(unique_digits([152,\
    \ 323, 1422, 10]));\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "The sorted list of all elements that hasn't any even digit is: \nArray\n\
    (\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n\nArray\n(\n)\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $y = [];\n    for ($i = 0; $i < count($x); $i++)\
    \ {\n        $digits = str_split($x[$i]);\n        $is_unique = true;\n      \
    \  for ($j = 0; $j < count($digits); $j++) {\n            if ($digits[$j] % 2\
    \ == 0) {\n                $is_unique = false;\n                break;\n     \
    \       }\n        }\n        if ($is_unique) array_push($y, $x[$i]);\n    }\n\
    \    sort($y);\n    return $y;\n}\n\necho \"Expected [1, 15, 33]: \";\nvar_dump(unique_digits([15,\
    \ 33, 1422, 1]));\necho \"Expected []: \";\nvar_dump(unique_digits([152, 323,\
    \ 1422, 10]));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Expected [1, 15, 33]: array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(15)\n\
    \  [2]=>\n  int(33)\n}\nExpected []: array(0) {\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t// Your code here\n}\n\nprint_r(unique_digits([15,\
    \ 33, 1422, 1]));\nprint_r(unique_digits([152, 323, 1422, 10]));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptzhxa0th.php:21\n\
    Stack trace:\n#0 /tmp/tmptzhxa0th.php(27): test()\n#1 {main}\n  thrown in /tmp/tmptzhxa0th.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $y = array();\n    foreach ($x as $value) {\n\
    \        $string = (string)$value;\n        $length = strlen($string);\n     \
    \   $is_odd = true;\n        for ($i = 0; $i < $length; $i++) {\n            if\
    \ ((int)$string[$i] % 2 == 0) {\n                $is_odd = false;\n          \
    \      break;\n            }\n        }\n        if ($is_odd) {\n            array_push($y,\
    \ $value);\n        }\n    }\n    sort($y);\n    return $y;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  foreach ($x as $key => $i) {\n    if(is_int($i))\
    \ {\n      if(!strpos($i, '2') && !strpos($i, '4') && !strpos($i, '6') && !strpos($i,\
    \ '8')) {\n        $new[] = $i;\n      }\n    }\n  }\n  asort($new);\n  return\
    \ $new;\n}\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzk5d3s6c.php:26\n\
    Stack trace:\n#0 /tmp/tmpzk5d3s6c.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpzk5d3s6c.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    // Your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbu_6an70.php:19\n\
    Stack trace:\n#0 /tmp/tmpbu_6an70.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpbu_6an70.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $unique = [];\n    foreach ($x as $key => $number)\
    \ {\n        if (isUnique($number)) {\n            $unique[] = $number;\n    \
    \    }\n    }\n    sort($unique);\n    return $unique;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isUnique() in\
    \ /tmp/tmpa56hc6dg.php:13\nStack trace:\n#0 /tmp/tmpa56hc6dg.php(22): unique_digits(Array)\n\
    #1 /tmp/tmpa56hc6dg.php(26): candidate(Array)\n#2 /tmp/tmpa56hc6dg.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmpa56hc6dg.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    // Write your code here\n    // To print results\
    \ to the standard output you can use print\n    // Example: print \"Hello world!\"\
    ;\n    $result = array();\n    foreach ($x as $i) {\n        if ($i % 2 != 0)\
    \ {\n            array_push($result, $i);\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8sp_w6zv.php:27\n\
    Stack trace:\n#0 /tmp/tmp8sp_w6zv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp8sp_w6zv.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  // YOUR CODE GOES HERE\n  $y = [];\n  foreach\
    \ ($x as $value) {\n    $num = (string)$value;\n    $has_even = false;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n      if (in_array($num[$i], [0, 2, 4,\
    \ 6, 8])) {\n        $has_even = true;\n        break;\n      }\n    }\n    if\
    \ (!$has_even) {\n      $y[] = $value;\n    }\n  }\n  sort($y);\n  return $y;\n\
    }\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $no_even_digits = array();\n  foreach ($x as $num)\
    \ {\n    if (preg_match('/[02468]/', (string)$num)) {\n      continue;\n    }\n\
    \    $no_even_digits[] = $num;\n  }\n  sort($no_even_digits);\n  return $no_even_digits;\n\
    }\n\n$xs = array(15, 33, 1422, 1);\nvar_dump(unique_digits($xs));\n\n$xs = array(152,\
    \ 323, 1422, 10);\nvar_dump(unique_digits($xs));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(15)\n  [2]=>\n  int(33)\n\
    }\narray(0) {\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$r = array();\n\tforeach ($x as $n) {\n\t\tif\
    \ (unique($n))\n\t\t\t$r[] = $n;\n\t}\n\tsort($r);\n\treturn $r;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function unique() in /tmp/tmpjw241uyy.php:13\n\
    Stack trace:\n#0 /tmp/tmpjw241uyy.php(21): unique_digits(Array)\n#1 /tmp/tmpjw241uyy.php(25):\
    \ candidate(Array)\n#2 /tmp/tmpjw241uyy.php(31): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpjw241uyy.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $result = [];\n  foreach ($x as $item) {\n   \
    \ if (!strstr($item, '2') && !strstr($item, '4') && !strstr($item, '6') && !strstr($item,\
    \ '8')) {\n      $result[] = $item;\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4m5uxa81.php:25\n\
    Stack trace:\n#0 /tmp/tmp4m5uxa81.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp4m5uxa81.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\tfor ($i = 0; $i < count($x); $i++) {\n\t\t$string\
    \ = (string)$x[$i];\n\t\tfor ($j = 0; $j < strlen($string); $j++) {\n\t\t\tif\
    \ ((int)$string[$j] % 2 == 0) {\n\t\t\t\tunset($x[$i]);\n\t\t\t\t$x = array_values($x);\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\trsort($x);\n\treturn $x;\n}\n\n$x = [15,\
    \ 33, 1422, 1];\nprint_r(unique_digits($x));\necho '<br>';\n$x = [152, 323, 1422,\
    \ 10];\nprint_r(unique_digits($x));\necho '<br>';\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 33\n    [1] => 15\n    [2] => 1\n)\n<br>Array\n(\n\
    \    [0] => 323\n    [1] => 10\n)\n<br>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpb1rbad5l.php:36\nStack trace:\n#0 /tmp/tmpb1rbad5l.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpb1rbad5l.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $result = [];\n  $even_numbers = [0, 2, 4, 6,\
    \ 8];\n  foreach ($x as $number) {\n    if (contains_even_number($number, $even_numbers))\
    \ {\n      continue;\n    }\n    $result[] = $number;\n  }\n  sort($result);\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function contains_even_number()\
    \ in /tmp/tmphnuzro30.php:14\nStack trace:\n#0 /tmp/tmphnuzro30.php(24): unique_digits(Array)\n\
    #1 /tmp/tmphnuzro30.php(28): candidate(Array)\n#2 /tmp/tmphnuzro30.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmphnuzro30.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $y = [];\n  foreach ($x as $num) {\n    if ($num\
    \ % 2 == 0) {\n      array_push($y, $num);\n    }\n  }\n  return $y;\n}\n\nprint_r(unique_digits([1,\
    \ 2, 3, 4, 5]));\nprint_r(unique_digits([15, 33, 1422, 1]));\nprint_r(unique_digits([152,\
    \ 323, 1422, 10]));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 4\n)\nArray\n(\n    [0] => 1422\n)\n\
    Array\n(\n    [0] => 152\n    [1] => 1422\n    [2] => 10\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp7jmwarxy.php:28\nStack trace:\n#0 /tmp/tmp7jmwarxy.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp7jmwarxy.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    \n    // initialize empty array\n    $result\
    \ = [];\n    \n    // iterate through $x array\n    foreach ($x as $val) {\n \
    \       // cast integer to string\n        $val = (string)$val;\n        // iterate\
    \ through $val string\n        for ($i = 0; $i < strlen($val); $i++) {\n     \
    \       // check if the string character is even\n            if ($val[$i] % 2\
    \ == 0) {\n                // move to next element if $val has even digit\n  \
    \              continue 2;\n            }\n        }\n        // cast string back\
    \ to integer and add to $result array\n        $result[] = (int)$val;\n    }\n\
    \    // return sorted $result array\n    return sort($result);\n}\nprint_r(unique_digits([152,\
    \ 323, 1422, 10]));\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy922rxtd.php:40\n\
    Stack trace:\n#0 /tmp/tmpy922rxtd.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpy922rxtd.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
