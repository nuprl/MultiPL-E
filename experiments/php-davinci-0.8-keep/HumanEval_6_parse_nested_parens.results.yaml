name: HumanEval_6_parse_nested_parens
language: php
results:
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $output = array();\n    foreach (explode(' ', $paren_string) as $paren)\
    \ {\n        if (preg_match('/\\(([^\\(\\)]*)\\)/', $paren, $matches)) {\n   \
    \         $output[] = strlen($matches[1]);\n        } else {\n            $output[]\
    \ = 1;\n        }\n    }\n    return $output;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplsaq5jml.php:23\n\
    Stack trace:\n#0 /tmp/tmplsaq5jml.php(28): test()\n#1 {main}\n  thrown in /tmp/tmplsaq5jml.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_group\
    \ = explode(' ', $paren_string);\n  $paren_group_arr = array();\n  foreach ($paren_group\
    \ as $group) {\n    $stack = new SplStack();\n    $stack->push(0);\n    $max_level\
    \ = 0;\n    for ($i = 0; $i < strlen($group); $i++) {\n      if ($group[$i] ==\
    \ '(') {\n        $stack->push($stack->top() + 1);\n        $max_level = max($max_level,\
    \ $stack->top());\n      } else if ($group[$i] == ')') {\n        $stack->pop();\n\
    \      }\n    }\n    $paren_group_arr[] = $max_level;\n  }\n  return $paren_group_arr;\n\
    }\n\n$paren_string = '(()()) ((())) () ((())()())';\nprint_r(parse_nested_parens($paren_string));\n\
    \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  if ($paren_string[0]\
    \ !== '(' || $paren_string[strlen($paren_string) - 1] !== ')') {\n    return 'Invalid\
    \ input format';\n  }\n  $stack = new SplStack();\n  $curr_level = 0;\n  $max_level\
    \ = 0;\n  for ($i = 0; $i < strlen($paren_string); $i++) {\n    if ($paren_string[$i]\
    \ === '(') {\n      $stack->push($i);\n      $curr_level++;\n      if ($curr_level\
    \ > $max_level) {\n        $max_level = $curr_level;\n      }\n    } else if ($paren_string[$i]\
    \ === ')') {\n      if ($stack->isEmpty()) {\n        return 'Invalid input format';\n\
    \      }\n      $stack->pop();\n      $curr_level--;\n    }\n  }\n  if (!$stack->isEmpty())\
    \ {\n    return 'Invalid input format';\n  }\n  return $max_level;\n}\nprint_r(parse_nested_parens('(()())\
    \ ((())) () ((())()())'));\nprint_r(parse_nested_parens('(()()) ((())) ()) ((())()())'));\n\
    print_r(parse_nested_parens('((()()) ((())) ()) ((())()())'));\nprint_r(parse_nested_parens('(((()())\
    \ ((())) ()) ((())()())'));\nprint_r(parse_nested_parens('(((()()) ((())) ())\
    \ ((())()())'));\nprint_r(parse_nested_parens('((()()) ((())) ()) ((())()())'));\n\
    print_r(parse_nested_parens('((()()) ((())) ()) ((())()())'));\nprint_r(parse_nested_parens('((()())\
    \ ((())) ()) ((())()())'));\nprint_r(parse_nested_parens('((()()) ((())) ()) ((())()())'));\n\
    print_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjivdguxq.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $group_list = explode(' ', $paren_string);\n  $nested_parens_levels = [];\n\
    \  foreach ($group_list as $group) {\n    $max_level = 0;\n    $curr_level = 0;\n\
    \    for ($i = 0; $i < strlen($group); $i++) {\n      if ($group[$i] == '(') {\n\
    \        $curr_level++;\n      } else if ($group[$i] == ')') {\n        $curr_level--;\n\
    \      }\n      if ($curr_level > $max_level) {\n        $max_level = $curr_level;\n\
    \      }\n    }\n    $nested_parens_levels[] = $max_level;\n  }\n  return $nested_parens_levels;\n\
    }\n\necho json_encode(parse_nested_parens('(()()) ((())) () ((())()())'));\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '[2,3,1,3]'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $count = 0;\n    $max_count = 0;\n    $paren_results = array();\n   \
    \ $paren_group = '';\n    for ($i = 0; $i < strlen($paren_string); $i++) {\n \
    \       if ($paren_string[$i] == '(') {\n            $count++;\n            $paren_group\
    \ .= $paren_string[$i];\n        } else if ($paren_string[$i] == ')') {\n    \
    \        $count--;\n            $paren_group .= $paren_string[$i];\n        }\
    \ else if ($paren_string[$i] == ' ') {\n            if ($count > $max_count) {\n\
    \                $max_count = $count;\n            }\n            $paren_results[]\
    \ = $max_count;\n            $paren_group = '';\n            $max_count = 0;\n\
    \            $count = 0;\n        }\n    }\n    if ($count > $max_count) {\n \
    \       $max_count = $count;\n    }\n    $paren_results[] = $max_count;\n    return\
    \ $paren_results;\n}\necho implode(', ', parse_nested_parens('(()()) ((())) ()\
    \ ((())()())'));\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0, 0, 0, 0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ygod6dg.php:41\n\
    Stack trace:\n#0 /tmp/tmp4ygod6dg.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp4ygod6dg.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    // Code here!\n    // return [];\n    $arr = explode(' ', $paren_string);\n\
    \    $output = [];\n    foreach ($arr as $item) {\n        $output[] = deep_nest($item);\n\
    \    }\n    return $output;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function deep_nest() in\
    \ /tmp/tmpj6883e7i.php:13\nStack trace:\n#0 /tmp/tmpj6883e7i.php(19): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpj6883e7i.php(23): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpj6883e7i.php(28): test()\n#3 {main}\n  thrown in /tmp/tmpj6883e7i.php\
    \ on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $result = [];\n  $paren_arr = explode(' ', $paren_string);\n  for ($i =\
    \ 0; $i < count($paren_arr); $i++) {\n    $paren_str = $paren_arr[$i];\n    $left_paren_count\
    \ = 0;\n    $right_paren_count = 0;\n    for ($j = 0; $j < strlen($paren_str);\
    \ $j++) {\n      if ($paren_str[$j] == '(') {\n        $left_paren_count++;\n\
    \      } else {\n        $right_paren_count++;\n      }\n      if ($right_paren_count\
    \ > $left_paren_count) {\n        throw new Exception(\"Invalid input string.\"\
    );\n      }\n    }\n    if ($left_paren_count != $right_paren_count) {\n     \
    \ throw new Exception(\"Invalid input string.\");\n    }\n    $result[] = $left_paren_count;\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3slgyhwk.php:37\n\
    Stack trace:\n#0 /tmp/tmp3slgyhwk.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp3slgyhwk.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $result = array();\n  foreach\
    \ ($paren_array as $paren_group) {\n    $count = 0;\n    $current_count = 0;\n\
    \    for ($i = 0; $i < strlen($paren_group); $i++) {\n      if ($paren_group[$i]\
    \ == '(') {\n        $current_count++;\n      } else {\n        $current_count--;\n\
    \      }\n      if ($current_count > $count) {\n        $count = $current_count;\n\
    \      }\n    }\n    $result[] = $count;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_depth = [];\n\
    \    foreach ($paren_array as $paren_group) {\n        $counter = 0;\n       \
    \ $paren_depth[] = paren_depth_helper($paren_group, $counter);\n    }\n    return\
    \ $paren_depth;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function paren_depth_helper()\
    \ in /tmp/tmp3_x2f93r.php:12\nStack trace:\n#0 /tmp/tmp3_x2f93r.php(18): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmp3_x2f93r.php(22): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmp3_x2f93r.php(27): test()\n#3 {main}\n  thrown in /tmp/tmp3_x2f93r.php\
    \ on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $open_paren_count = 0;\n    $max_nested_paren_count = 0;\n    $nested_paren_count_list\
    \ = [];\n    for ($i = 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i]\
    \ == '(') {\n            $open_paren_count++;\n            if ($open_paren_count\
    \ > $max_nested_paren_count) {\n                $max_nested_paren_count = $open_paren_count;\n\
    \            }\n        } else if ($paren_string[$i] == ')') {\n            $open_paren_count--;\n\
    \        } else if ($paren_string[$i] == ' ') {\n            if ($open_paren_count\
    \ == 0) {\n                array_push($nested_paren_count_list, $max_nested_paren_count);\n\
    \                $max_nested_paren_count = 0;\n            }\n        }\n    }\n\
    \    array_push($nested_paren_count_list, $max_nested_paren_count);\n    return\
    \ $nested_paren_count_list;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_arr = preg_split('/ /', $paren_string);\n    $results = array();\n\
    \    foreach ($paren_arr as $paren) {\n        $results[] = parse_single_parens($paren);\n\
    \    }\n    return $results;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_single_parens()\
    \ in /tmp/tmpfbnsjdbf.php:11\nStack trace:\n#0 /tmp/tmpfbnsjdbf.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpfbnsjdbf.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpfbnsjdbf.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpfbnsjdbf.php\
    \ on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $max_level = 0;\n  $stack = new SplStack();\n  $level_list = array();\n\
    \  for ($i = 0; $i < strlen($paren_string); $i++) {\n    $p = $paren_string[$i];\n\
    \    if ($p == '(') {\n      $stack->push($p);\n      $max_level++;\n    } else\
    \ if ($p == ')') {\n      $level_list[] = $max_level;\n      $stack->pop();\n\
    \      $max_level--;\n    }\n  }\n  return $level_list;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp916l2dkq.php:29\n\
    Stack trace:\n#0 /tmp/tmp916l2dkq.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp916l2dkq.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $results = [];\n  $paren_groups = explode(' ', $paren_string);\n  foreach\
    \ ($paren_groups as $paren_group) {\n    $max_nesting = 0;\n    $current_nesting\
    \ = 0;\n    for ($i = 0; $i < strlen($paren_group); $i++) {\n      if ($paren_group[$i]\
    \ == '(') {\n        $current_nesting++;\n      } else if ($paren_group[$i] ==\
    \ ')') {\n        $current_nesting--;\n      }\n      if ($current_nesting > $max_nesting)\
    \ {\n        $max_nesting = $current_nesting;\n      }\n    }\n    array_push($results,\
    \ $max_nesting);\n  }\n  return $results;\n}\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    // your code here\n    $paren_array = explode(' ', $paren_string);\n\
    \    $nested_levels = [];\n    foreach ($paren_array as $value) {\n        $nested_levels[]\
    \ = parse_parens($value);\n    }\n    return $nested_levels;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_parens()\
    \ in /tmp/tmpwgf29t1f.php:12\nStack trace:\n#0 /tmp/tmpwgf29t1f.php(18): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpwgf29t1f.php(22): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpwgf29t1f.php(27): test()\n#3 {main}\n  thrown in /tmp/tmpwgf29t1f.php\
    \ on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $all_paren_groups = explode(' ', $paren_string);\n    $max_depth_list\
    \ = [];\n    foreach ($all_paren_groups as $group) {\n        $group_depth = 0;\n\
    \        $max_depth = 0;\n        foreach (str_split($group) as $char) {\n   \
    \         if ($char == '(') {\n                $group_depth++;\n            }\
    \ elseif ($char == ')') {\n                $group_depth--;\n            }\n  \
    \          if ($group_depth > $max_depth) {\n                $max_depth = $group_depth;\n\
    \            }\n        }\n        $max_depth_list[] = $max_depth;\n    }\n  \
    \  return $max_depth_list;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $result = [];\n\
    \    $index = 0;\n    $cur_len = 0;\n    $max_len = 0;\n    while ($index < strlen($paren_string))\
    \ {\n        if ($paren_string[$index] == '(') {\n            $cur_len += 1;\n\
    \            $max_len = max($max_len, $cur_len);\n        } else {\n         \
    \   $cur_len -= 1;\n        }\n        $index += 1;\n        if ($index == strlen($paren_string)\
    \ || $paren_string[$index] == ')') {\n            array_push($result, $max_len);\n\
    \            $max_len = 0;\n            $cur_len = 0;\n        }\n    }\n    return\
    \ $result;\n}\n\n$paren_string = '(()()) ((())) () ((())()())';\necho json_encode(parse_nested_parens($paren_string),\
    \ JSON_PRETTY_PRINT) . \"\\n\";\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "[\n    2,\n    0,\n    0,\n    2,\n    0,\n    0,\n    0,\n    2,\n   \
    \ 0,\n    0,\n    0,\n    0,\n    0\n]\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp5zeoub3l.php:37\nStack trace:\n#0 /tmp/tmp5zeoub3l.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5zeoub3l.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $depth_array = array();\n\
    \  foreach ($paren_array as $paren_string) {\n    $depth = 0;\n    $max_depth\
    \ = 0;\n    for ($i = 0; $i < strlen($paren_string); $i++) {\n      if ($paren_string[$i]\
    \ == '(') {\n        $depth++;\n      } else {\n        $depth--;\n      }\n \
    \     if ($depth > $max_depth) {\n        $max_depth = $depth;\n      }\n    }\n\
    \    $depth_array[] = $max_depth;\n  }\n  return $depth_array;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $output = [];\n  $paren_groups = explode(' ', $paren_string);\n  foreach\
    \ ($paren_groups as $group) {\n    $output[] = max_nesting($group);\n  }\n  return\
    \ $output;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function max_nesting()\
    \ in /tmp/tmpjtkggyhk.php:11\nStack trace:\n#0 /tmp/tmpjtkggyhk.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpjtkggyhk.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpjtkggyhk.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpjtkggyhk.php\
    \ on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_groups = explode(' ', $paren_string);\n \
    \   $max_nesting = [];\n    foreach ($paren_groups as $idx => $paren_group) {\n\
    \        $max_nesting[$idx] = 0;\n        $nesting = 0;\n        $curr_char =\
    \ '';\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n            $curr_char\
    \ = $paren_group[$i];\n            if ($curr_char == '(') {\n                $nesting++;\n\
    \            } elseif ($curr_char == ')') {\n                $nesting--;\n   \
    \         }\n            if ($nesting > $max_nesting[$idx]) {\n              \
    \  $max_nesting[$idx] = $nesting;\n            }\n        }\n    }\n    return\
    \ $max_nesting;\n}\n\n$test_input = '(()()) ((())) () ((())()())';\n$result =\
    \ parse_nested_parens($test_input);\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = preg_split('/\\s+/', $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $item) {\n        array_push($result, max_depth($item));\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function max_depth() in\
    \ /tmp/tmppy96raex.php:11\nStack trace:\n#0 /tmp/tmppy96raex.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmppy96raex.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmppy96raex.php(26): test()\n#3 {main}\n  thrown in /tmp/tmppy96raex.php\
    \ on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $max_depth = 0;\n    $groups = explode(' ', $paren_string);\n    $result\
    \ = [];\n    foreach ($groups as $group) {\n        $group_depth = 0;\n      \
    \  $group_arr = str_split($group);\n        foreach ($group_arr as $elem) {\n\
    \            if ($elem == '(') {\n                $group_depth++;\n          \
    \  } else {\n                $group_depth--;\n            }\n        }\n     \
    \   $result[] = $group_depth;\n    }\n    return $result;\n}\n\n$paren_string\
    \ = '(()()) ((())) () ((())()())';\nprint_r(parse_nested_parens($paren_string));\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0\n    [2] => 0\n    [3] => 0\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpy1d_zyiu.php:33\nStack\
    \ trace:\n#0 /tmp/tmpy1d_zyiu.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpy1d_zyiu.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_parens = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $paren_count = 0;\n   \
    \     $max_paren = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n\
    \            if ($paren_group[$i] == '(') {\n                $paren_count++;\n\
    \            } else {\n                $paren_count--;\n            }\n      \
    \      if ($paren_count > $max_paren) {\n                $max_paren = $paren_count;\n\
    \            }\n        }\n        $max_parens[] = $max_paren;\n    }\n    return\
    \ $max_parens;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $max_nesting = 0;\n    $current_nesting = 0;\n    $nested_parens = array();\n\
    \    for ($i = 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i]\
    \ == '(') {\n            $current_nesting++;\n            if ($current_nesting\
    \ > $max_nesting) {\n                $max_nesting = $current_nesting;\n      \
    \      }\n        } else if ($paren_string[$i] == ')') {\n            $current_nesting--;\n\
    \        } else if ($paren_string[$i] == ' ') {\n            array_push($nested_parens,\
    \ $max_nesting);\n            $max_nesting = 0;\n            $current_nesting\
    \ = 0;\n        }\n    }\n    array_push($nested_parens, $max_nesting);\n    return\
    \ $nested_parens;\n}\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    // Splits the string at spaces\n    $paren_groups = explode(' ', $paren_string);\n\
    \    // Loop through the groups\n    $paren_levels = [];\n    foreach ($paren_groups\
    \ as $group) {\n        // Initialize the level of paren nesting in the group\
    \ to 0\n        $level = 0;\n        // Loop through each character of the group.\n\
    \        // If character is a parens, increment or decrement the level of nesting\
    \ depending on if it is an opening or closing parens.\n        for ($i = 0; $i\
    \ < strlen($group); $i++) {\n            if ($group[$i] == '(') {\n          \
    \      $level++;\n            } elseif ($group[$i] == ')') {\n               \
    \ $level--;\n            }\n        }\n        // Add the level of nesting to\
    \ the result.\n        $paren_levels[] = $level;\n    }\n    return $paren_levels;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9i6tktzb.php:35\n\
    Stack trace:\n#0 /tmp/tmp9i6tktzb.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp9i6tktzb.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_array = explode(' ',\
    \ $paren_string);\n    $results = array();\n    foreach ($paren_array as $string)\
    \ {\n        array_push($results,  count_nested_parens($string));\n    }\n   \
    \ return $results;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_nested_parens()\
    \ in /tmp/tmpdu7hmvln.php:12\nStack trace:\n#0 /tmp/tmpdu7hmvln.php(18): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpdu7hmvln.php(22): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpdu7hmvln.php(27): test()\n#3 {main}\n  thrown in /tmp/tmpdu7hmvln.php\
    \ on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $max = 0;\n  $results = [];\n  $current = 0;\n  $paren_array = str_split($paren_string);\n\
    \  foreach ($paren_array as $value) {\n    if ($value == '(') {\n      $current\
    \ += 1;\n      if ($current > $max) {\n        $max = $current;\n      }\n   \
    \ } elseif ($value == ')') {\n      $current -= 1;\n    } elseif ($value == '\
    \ ') {\n      $results[] = $max;\n      $max = 0;\n      $current = 0;\n    }\n\
    \  }\n  $results[] = $max;\n  return $results;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_groups = explode(' ',\
    \ $paren_string);\n    foreach ($paren_groups as $group) {\n        $count = 0;\n\
    \        $max_count = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n\
    \            if ($group[$i] == '(') {\n                $count++;\n           \
    \ } else if ($group[$i] == ')') {\n                $count--;\n            }\n\
    \            if ($count > $max_count) {\n                $max_count = $count;\n\
    \            }\n        }\n        echo \"$max_count \";\n    }\n}\nparse_nested_parens('(()())\
    \ ((())) () ((())()())');\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2 3 1 3 2 3 1 3 \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpik44y3ta.php:33\n\
    Stack trace:\n#0 /tmp/tmpik44y3ta.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpik44y3ta.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $output = [];\n  $paren_groups = explode(' ', $paren_string);\n  foreach\
    \ ($paren_groups as $paren_group) {\n    $nesting_count = 0;\n    $max_nesting_count\
    \ = 0;\n    for ($i = 0; $i < strlen($paren_group); $i++) {\n      if ($paren_group[$i]\
    \ == '(') {\n        $nesting_count++;\n      } else {\n        $nesting_count--;\n\
    \      }\n      if ($nesting_count > $max_nesting_count) {\n        $max_nesting_count\
    \ = $nesting_count;\n      }\n    }\n    $output[] = $max_nesting_count;\n  }\n\
    \  return $output;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_array = explode(' ', $paren_string);\n\
    \  $max_list = [];\n  foreach ($paren_array as $paren_group) {\n    $max_list[]\
    \ = parse_group($paren_group);\n  }\n  return $max_list;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_group()\
    \ in /tmp/tmp1can6pl8.php:12\nStack trace:\n#0 /tmp/tmp1can6pl8.php(18): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmp1can6pl8.php(22): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmp1can6pl8.php(27): test()\n#3 {main}\n  thrown in /tmp/tmp1can6pl8.php\
    \ on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_count = 0;\n    $paren_list = explode(' ', $paren_string);\n \
    \   $max_paren_count_list = [];\n    foreach ($paren_list as $paren_substring)\
    \ {\n        $len = strlen($paren_substring);\n        for ($i = 0; $i < $len;\
    \ $i++) {\n            if ($paren_substring[$i] == '(') {\n                $paren_count++;\n\
    \            } else {\n                $paren_count--;\n            }\n      \
    \  }\n        $max_paren_count_list[] = $paren_count;\n        $paren_count =\
    \ 0;\n    }\n    return $max_paren_count_list;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp670xi1s7.php:31\n\
    Stack trace:\n#0 /tmp/tmp670xi1s7.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp670xi1s7.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_nested_parens =\
    \ array();\n    foreach ($paren_array as $group) {\n        $max_nested_parens[]\
    \ = get_max_nested_parens($group);\n    }\n    return $max_nested_parens;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_max_nested_parens()\
    \ in /tmp/tmplddsjlwg.php:11\nStack trace:\n#0 /tmp/tmplddsjlwg.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmplddsjlwg.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmplddsjlwg.php(26): test()\n#3 {main}\n  thrown in /tmp/tmplddsjlwg.php\
    \ on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $result = [];\n    $paren_groups = explode(' ', $paren_string);\n   \
    \ foreach ($paren_groups as $group) {\n        $result[] = match_parens($group);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function match_parens()\
    \ in /tmp/tmp76f_co71.php:11\nStack trace:\n#0 /tmp/tmp76f_co71.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmp76f_co71.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmp76f_co71.php(26): test()\n#3 {main}\n  thrown in /tmp/tmp76f_co71.php\
    \ on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups\
    \ = explode(')', $paren_string);\n    $paren_groups = array_slice($paren_groups,\
    \ 0, count($paren_groups) - 1);\n    $result = [];\n    foreach ($paren_groups\
    \ as $paren_group) {\n        $result[] = parse_nested_parens_single($paren_group);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_parens_single()\
    \ in /tmp/tmpg6bb9_ez.php:13\nStack trace:\n#0 /tmp/tmpg6bb9_ez.php(19): parse_nested_parens('(()())((()))()(...')\n\
    #1 /tmp/tmpg6bb9_ez.php(23): candidate('(()()) ((())) (...')\n#2 /tmp/tmpg6bb9_ez.php(28):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpg6bb9_ez.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $count = 0;\n    $output = [];\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        if ($paren_string[$i] == '(') {\n            $count++;\n  \
    \      } else if ($paren_string[$i] == ')') {\n            $count--;\n       \
    \ } else if ($paren_string[$i] == ' ') {\n            array_push($output, $count);\n\
    \            $count = 0;\n        }\n    }\n    return $output;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgph851rp.php:28\n\
    Stack trace:\n#0 /tmp/tmpgph851rp.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpgph851rp.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_groups as $group) {\n        $max_nesting[] = get_nesting_level($group);\n\
    \    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_nesting_level()\
    \ in /tmp/tmp24s9sg5m.php:11\nStack trace:\n#0 /tmp/tmp24s9sg5m.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmp24s9sg5m.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmp24s9sg5m.php(26): test()\n#3 {main}\n  thrown in /tmp/tmp24s9sg5m.php\
    \ on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string); // Remove all spaces\n\
    \    $stack = [];\n    $output = [];\n    $level = 0;\n    $output_index = 0;\n\
    \    for ($i = 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i]\
    \ == '(') {\n            $level++;\n            array_push($stack, $paren_string[$i]);\n\
    \        } else if ($paren_string[$i] == ')') {\n            $level--;\n     \
    \       if (end($stack) == '(') {\n                array_pop($stack);\n      \
    \          $output[$output_index] = $level;\n                $output_index++;\n\
    \            }\n        }\n    }\n    echo json_encode($output);\n}\n\nparse_nested_parens('(()())\
    \ ((())) () ((())()())');\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "[1,1,0,2,1,0,0,2,1,1,1,0][1,1,0,2,1,0,0,2,1,1,1,0]\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpsz4n3wj4.php:36\nStack trace:\n#0 /tmp/tmpsz4n3wj4.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsz4n3wj4.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        $max_nest = 0;\n        $current_nest\
    \ = 0;\n        for ($i = 0; $i < strlen($paren); $i++) {\n            if ($paren[$i]\
    \ == '(') {\n                $current_nest++;\n            } else if ($paren[$i]\
    \ == ')') {\n                $current_nest--;\n            }\n            if ($current_nest\
    \ > $max_nest) {\n                $max_nest = $current_nest;\n            }\n\
    \        }\n        $result[] = $max_nest;\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  // For each group in the string, calculate the maximum nesting of parentheses.\n\
    \  $paren_groups = explode(' ', $paren_string);\n  $max_nesting = [];\n  foreach\
    \ ($paren_groups as $paren_group) {\n    $paren_nesting = 0;\n    $max_nesting_level\
    \ = 0;\n    for ($i = 0; $i < strlen($paren_group); $i++) {\n      $paren_nesting\
    \ += ($paren_group[$i] == '(') ? 1 : -1;\n      $max_nesting_level = max($max_nesting_level,\
    \ $paren_nesting);\n    }\n    $max_nesting[] = $max_nesting_level;\n  }\n  return\
    \ $max_nesting;\n}\n\n$paren_string = '(()()) ((())) () ((())()())';\n$nesting_levels\
    \ = parse_nested_parens($paren_string);\necho implode(' ', $nesting_levels);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 2 3 1 3
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    // loop through the\
    \ $paren_array\n    foreach ($paren_array as $item) {\n        $max_level = 0;\n\
    \        $level = 0;\n        // loop through the individual characters in the\
    \ current item\n        foreach (str_split($item) as $char) {\n            //\
    \ we only care about the parens, so skip everything else\n            if ($char\
    \ != '(' && $char != ')') {\n                continue;\n            }\n      \
    \      if ($char == '(') {\n                $level++;\n            } elseif ($char\
    \ == ')') {\n                $level--;\n            }\n            if ($level\
    \ > $max_level) {\n                $max_level = $level;\n            }\n     \
    \   }\n        $result[] = $max_level;\n    }\n    return $result;\n}\n\n$sample_input\
    \ = '(()()) ((())) () ((())()())';\n\necho \"Input: $sample_input\\n\";\necho\
    \ \"Output: \" . implode(', ', parse_nested_parens($sample_input)) . \"\\n\";\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Input: (()()) ((())) () ((())()())\nOutput: 2, 3, 1, 3\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_groups = explode(' ', $paren_string);\n  $paren_groups_count = array();\n\
    \  foreach ($paren_groups as $group) {\n    $paren_count = 0;\n    $max_paren_count\
    \ = 0;\n    for ($i = 0; $i < strlen($group); $i++) {\n      if ($group[$i] ==\
    \ '(') {\n        $paren_count++;\n      } else {\n        $paren_count--;\n \
    \     }\n      if ($paren_count > $max_paren_count) {\n        $max_paren_count\
    \ = $paren_count;\n      }\n    }\n    $paren_groups_count[] = $max_paren_count;\n\
    \  }\n  return $paren_groups_count;\n}\n\nfunction candidate(...$args) {\n   \
    \ return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_arr = explode(' ', $paren_string);\n    $max_levels = array();\n\
    \    foreach ($paren_arr as $paren_str) {\n        $count = 0;\n        $max_count\
    \ = 0;\n        for ($i = 0; $i < strlen($paren_str); $i++) {\n            if\
    \ ($paren_str[$i] == '(') {\n                $count++;\n            } else {\n\
    \                $count--;\n            }\n            if ($count > $max_count)\
    \ {\n                $max_count = $count;\n            }\n        }\n        $max_levels[]\
    \ = $max_count;\n    }\n    return $max_levels;\n}\n\n$ret = parse_nested_parens('(()())\
    \ ((())) () ((())()())');\nvar_dump($ret);\nfunction candidate(...$args) {\n \
    \   return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "array(4) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n  int(1)\n \
    \ [3]=>\n  int(3)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $depth_array = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $depth = 0;\n        $max_depth\
    \ = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if\
    \ ($paren_group[$i] == '(') {\n                $depth++;\n            } else if\
    \ ($paren_group[$i] == ')') {\n                $depth--;\n            }\n    \
    \        if ($depth > $max_depth) {\n                $max_depth = $depth;\n  \
    \          }\n        }\n        $depth_array[] = $max_depth;\n    }\n    return\
    \ $depth_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  // Lazy approach - O(n^2) running time & O(n) space.\n  // Find the location\
    \ of each parenthesis and build a stack of ranges for each group.\n  // Then for\
    \ each group, iterate through each character, check if it's a parenthesis and\
    \ its range to increment/decrement the nesting count.\n  $stack = [];\n  $paren_array\
    \ = str_split($paren_string);\n  $current_group = -1;\n  $current_start = -1;\n\
    \  $current_end = -1;\n  $nested_parens = [];\n  foreach ($paren_array as $index\
    \ => $paren) {\n    if ($paren === '(') {\n      if ($current_start === -1) {\n\
    \        $current_start = $index;\n      }\n      if ($current_group === -1) {\n\
    \        $current_group = 0;\n        $stack[$current_group] = [$current_start,\
    \ -1];\n      }\n    } else if ($paren === ')') {\n      if ($current_end ===\
    \ -1) {\n        $current_end = $index;\n      }\n      if ($current_group !==\
    \ -1) {\n        $stack[$current_group][1] = $current_end;\n        $current_group\
    \ = -1;\n        $current_start = -1;\n        $current_end = -1;\n      }\n \
    \   }\n  }\n  foreach ($stack as $group) {\n    $max_nested = 0;\n    $nested\
    \ = 0;\n    for ($i = $group[0]; $i <= $group[1]; $i++) {\n      if ($paren_array[$i]\
    \ === '(') {\n        $nested++;\n      } else if ($paren_array[$i] === ')') {\n\
    \        $nested--;\n      }\n      if ($nested > $max_nested) {\n        $max_nested\
    \ = $nested;\n      }\n    }\n    $nested_parens[] = $max_nested;\n  }\n  return\
    \ $nested_parens;\n}\n\nprint_r(parse_\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkjn5z2ad.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_groups = explode(' ', $paren_string);\n  $max_levels = [];\n  foreach\
    \ ($paren_groups as $group) {\n    $paren_stack = [];\n    $current_level = 0;\n\
    \    $max_level = 0;\n    $paren_array = str_split($group);\n    foreach ($paren_array\
    \ as $paren) {\n      if ($paren == '(') {\n        array_push($paren_stack, $paren);\n\
    \        $current_level++;\n        if ($current_level > $max_level) {\n     \
    \     $max_level = $current_level;\n        }\n      } elseif ($paren == ')')\
    \ {\n        array_pop($paren_stack);\n        $current_level--;\n      }\n  \
    \  }\n    array_push($max_levels, $max_level);\n  }\n  return $max_levels;\n}\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $result = [];\n  $paren_groups = explode(' ', $paren_string);\n  foreach\
    \ ($paren_groups as $group) {\n    $max_level = 0;\n    $stack = [];\n    $level\
    \ = 0;\n    for ($i = 0; $i < strlen($group); $i++) {\n      if ($group[$i] ==\
    \ '(') {\n        $level++;\n        array_push($stack, '(');\n      } else {\n\
    \        array_pop($stack);\n        $level--;\n      }\n      if ($level > $max_level)\
    \ {\n        $max_level = $level;\n      }\n    }\n    array_push($result, $max_level);\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_arr = explode(' ', $paren_string);\n    foreach ($paren_arr as\
    \ $paren_val) {\n        $paren_count = 0;\n        for ($i = 0; $i < strlen($paren_val);\
    \ $i++) {\n            if ($paren_val[$i] == '(') {\n                $paren_count++;\n\
    \            } else if ($paren_val[$i] == ')') {\n                $paren_count--;\n\
    \            }\n        }\n        $output_arr[] = $paren_count;\n    }\n    return\
    \ $output_arr;\n}\necho \"Input: (()()) ((())) () ((())()()) \\n\";\necho \"Output:\
    \ \";\nprint_r(parse_nested_parens('(()()) ((())) () ((())()())'));\necho \"\\\
    n\";\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Input: (()()) ((())) () ((())()()) \nOutput: Array\n(\n    [0] => 0\n \
    \   [1] => 0\n    [2] => 0\n    [3] => 0\n)\n\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpvd96jxso.php:31\nStack trace:\n#0 /tmp/tmpvd96jxso.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvd96jxso.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    // First split the string by spaces\n    $paren_strings = explode(' ',\
    \ $paren_string);\n    // Create a stack, which will store the items' indexes\
    \ (that is, the position in the string).\n    $stack = array();\n    // The result\
    \ array\n    $result = array();\n    // Loop through all the paren string\n  \
    \  foreach ($paren_strings as $key => $value) {\n        // For each string, check\
    \ if it has a ')'\n        if (strpos($value, ')') !== false) {\n            //\
    \ If so, split it into an array\n            $paren_array = str_split($value);\n\
    \            // Loop through the array\n            foreach ($paren_array as $index\
    \ => $char) {\n                // For each char in the array, if it is '(', push\
    \ the index into the stack\n                if ($char == '(') {\n            \
    \        array_push($stack, $index);\n                }\n                // If\
    \ it is ')', pop out the last index in the stack, and take the difference between\n\
    \                // the current index and the popped index (this is the nesting\
    \ level).\n                // First, find the index in the result array of the\
    \ current string\n                $result_key = array_search($key, array_keys($paren_strings));\n\
    \                // Then check if the result array has an item with the same index\
    \ as the current string\n                if (!isset($result[$result_key])) {\n\
    \                    // If not, push the result into the array.\n            \
    \        // But also check if the stack is empty, in which case the nesting level\
    \ is 0\n                    $result[$result_key] = $stack ? $index - array_pop($stack)\
    \ : 0;\n                } else {\n                    // If the result array has\
    \ an item with the same index as the current string,\n                    // compare\
    \ the previous result with the current result, take the larger one.\n        \
    \            // Again, check if the stack is empty, in which case the nesting\
    \ level is 0\n                    $result[$result_key] = max($result[$result_key],\
    \ $stack ? $index - array_pop($stack) : 0);\n                }\n            }\n\
    \        } else {\n            // If the string doesn't have a ')', which means\
    \ the\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphyizjo0w.php on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  // trim empty spaces\n  $paren_string = preg_replace('/\\s+/', '', $paren_string);\n\
    \  $paren_array = str_split($paren_string);\n  $paren_nesting_array = [];\n  $i\
    \ = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n     \
    \ $i++;\n    } else {\n      $i--;\n    }\n    if ($i < 0) {\n      // Found an\
    \ extra \")\"\n      $i = 0;\n    }\n    $paren_nesting_array[] = $i;\n  }\n \
    \ // The nested paren for each group ends at the next occurrence of (\n  $nested_parens\
    \ = array_map(function($i) use ($paren_nesting_array) {\n    while ($paren_nesting_array[$i]\
    \ != 0) {\n      $i++;\n    }\n    return $i;\n  }, array_keys($paren_nesting_array));\n\
    \  $nested_parens[] = count($paren_nesting_array);\n  $max_parens = [];\n  for\
    \ ($i = 0; $i < count($nested_parens) - 1; $i++) {\n    $max_parens[] = max(array_slice($paren_nesting_array,\
    \ $nested_parens[$i], $nested_parens[$i + 1] - $nested_parens[$i]));\n  }\n  return\
    \ $max_parens;\n}\n\nvar_dump(parse_nested_parens('(()()) ((())) () ((())()())'));\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: max(): Array must contain at least one element in /tmp/tmphab9kmfl.php\
    \ on line 35\n\nWarning: max(): Array must contain at least one element in /tmp/tmphab9kmfl.php\
    \ on line 35\n\nWarning: max(): Array must contain at least one element in /tmp/tmphab9kmfl.php\
    \ on line 35\n\nWarning: max(): Array must contain at least one element in /tmp/tmphab9kmfl.php\
    \ on line 35\n\nWarning: max(): Array must contain at least one element in /tmp/tmphab9kmfl.php\
    \ on line 35\n\nWarning: max(): Array must contain at least one element in /tmp/tmphab9kmfl.php\
    \ on line 35\n\nWarning: max(): Array must contain at least one element in /tmp/tmphab9kmfl.php\
    \ on line 35\n\nWarning: max(): Array must contain at least one element in /tmp/tmphab9kmfl.php\
    \ on line 35\n\nWarning: max(): Array must contain at least one element in /tmp/tmphab9kmfl.php\
    \ on line 35\n\nWarning: max(): Array must contain at least one element in /tmp/tmphab9kmfl.php\
    \ on line 35\n\nWarning: max(): Array must contain at least one element in /tmp/tmphab9kmfl.php\
    \ on line 35\n\nWarning: max(): Array must contain at least one element in /tmp/tmphab9kmfl.php\
    \ on line 35\n\nWarning: max(): Array must contain at least one element in /tmp/tmphab9kmfl.php\
    \ on line 35\n\nWarning: max(): Array must contain at least one element in /tmp/tmphab9kmfl.php\
    \ on line 35\n\nWarning: max(): Array must contain at least one element in /tmp/tmphab9kmfl.php\
    \ on line 35\n\nWarning: max(): Array must contain at least one element in /tmp/tmphab9kmfl.php\
    \ on line 35\n\nWarning: max(): Array must contain at least one element in /tmp/tmphab9kmfl.php\
    \ on line 35\n\nWarning: max(): Array must contain at least one element in /tmp/tmphab9kmfl.php\
    \ on line 35\n\nWarning: max(): Array must contain at least one element in /tmp/tmphab9kmfl.php\
    \ on line 35\n\nWarning: max(): Array must contain at least one element in /tmp/tmphab9kmfl.php\
    \ on line 35\narray(24) {\n  [0]=>\n  bool(false)\n  [1]=>\n  bool(false)\n  [2]=>\n\
    \  bool(false)\n  [3]=>\n  bool(false)\n  [4]=>\n  bool(false)\n  [5]=>\n  int(3)\n\
    \  [6]=>\n  bool(false)\n  [7]=>\n  bool(false)\n  [8]=>\n  bool(false)\n  ["
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $counter = 0;\n  $max_count = 0;\n  $results = [];\n  $string_array = str_split($paren_string);\n\
    \  foreach ($string_array as $char) {\n    if ($char == '(') {\n      $counter\
    \ += 1;\n      if ($counter > $max_count) {\n        $max_count = $counter;\n\
    \      }\n    } elseif ($char == ')') {\n      $counter -= 1;\n    } elseif ($char\
    \ == ' ') {\n      $results[] = $max_count;\n      $max_count = 0;\n      $counter\
    \ = 0;\n    }\n  }\n  $results[] = $max_count;\n  return $results;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_arr = explode(' ', $paren_string);\n    $paren_level_arr = [];\n\
    \    foreach ($paren_arr as $paren) {\n        $paren_level_arr[] = get_paren_level($paren);\n\
    \    }\n    return $paren_level_arr;\n}\n\nfunction candidate(...$args) {\n  \
    \  return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_paren_level()\
    \ in /tmp/tmpcx9b9pqi.php:11\nStack trace:\n#0 /tmp/tmpcx9b9pqi.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpcx9b9pqi.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpcx9b9pqi.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpcx9b9pqi.php\
    \ on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups\
    \ = preg_split('/(?<!^)(?!$)/u', $paren_string);\n    $paren_groups = array_filter($paren_groups,\
    \ 'strlen');\n    $result = [];\n    foreach ($paren_groups as $group) {\n   \
    \     $result[] = parse_single_parens($group);\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_single_parens()\
    \ in /tmp/tmp6ny_0mv0.php:13\nStack trace:\n#0 /tmp/tmp6ny_0mv0.php(19): parse_nested_parens('(()())((()))()(...')\n\
    #1 /tmp/tmp6ny_0mv0.php(23): candidate('(()()) ((())) (...')\n#2 /tmp/tmp6ny_0mv0.php(28):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp6ny_0mv0.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $depth = [];\n    $max_depth = 0;\n    $paren_string = str_split($paren_string);\n\
    \    for ($i = 0; $i < count($paren_string); $i++) {\n        if ($paren_string[$i]\
    \ == '(') {\n            $max_depth++;\n        } elseif ($paren_string[$i] ==\
    \ ')') {\n            $depth[] = $max_depth;\n            $max_depth--;\n    \
    \    } elseif ($paren_string[$i] == ' ') {\n            continue;\n        }\n\
    \    }\n    return $depth;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpij9es00e.php:29\n\
    Stack trace:\n#0 /tmp/tmpij9es00e.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpij9es00e.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $nesting_levels = [];\n\
    \    for ($i = 0; $i < count($paren_groups); $i++) {\n        $num_open_parens\
    \ = 0;\n        $highest_nesting_level = 0;\n        for ($j = 0; $j < strlen($paren_groups[$i]);\
    \ $j++) {\n            if ($paren_groups[$i][$j] == '(') {\n                $num_open_parens++;\n\
    \                if ($num_open_parens > $highest_nesting_level) {\n          \
    \          $highest_nesting_level = $num_open_parens;\n                }\n   \
    \         } else if ($paren_groups[$i][$j] == ')') {\n                $num_open_parens--;\n\
    \            }\n        }\n        array_push($nesting_levels, $highest_nesting_level);\n\
    \    }\n    return $nesting_levels;\n}\n\necho '<pre>';\nvar_dump(parse_nested_parens('(()())\
    \ ((())) () ((())()())'));\necho '</pre>';\nfunction candidate(...$args) {\n \
    \   return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "<pre>array(4) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n  int(1)\n\
    \  [3]=>\n  int(3)\n}\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_stack = [];\n    $paren_array = str_split($paren_string);\n  \
    \  $paren_max = [];\n    $current_max = 0;\n    foreach ($paren_array as $paren)\
    \ {\n        if ($paren == '(') {\n            array_push($paren_stack, $paren);\n\
    \            $current_max++;\n        } else if ($paren == ')') {\n          \
    \  array_pop($paren_stack);\n            array_push($paren_max, $current_max);\n\
    \            $current_max = 0;\n        } else if ($paren == ' ') {\n        \
    \    // Ignore\n        } else {\n            throw new Exception(\"Invalid character:\
    \ $paren\");\n        }\n    }\n    return $paren_max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp40gzpze7.php:34\n\
    Stack trace:\n#0 /tmp/tmp40gzpze7.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp40gzpze7.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $stack = new SplStack();\n    $max = 0;\n    $result = [];\n    for ($i\
    \ = 0; $i < strlen($paren_string); $i++) {\n        $c = $paren_string[$i];\n\
    \        if ($c == '(') {\n            $stack->push($c);\n            $max = max($max,\
    \ $stack->count());\n        } else if ($c == ')') {\n            $stack->pop();\n\
    \        } else if ($c == ' ') {\n            $result[] = $max;\n            $max\
    \ = 0;\n        }\n    }\n    $result[] = $max;\n    return $result;\n}\nprint_r(parse_nested_parens('(()())\
    \ ((())) () ((())()())'));\necho \"\\n\";\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $highest_nesting = 0;\n    $paren_array = str_split($paren_string);\n\
    \    $paren_array_len = count($paren_array);\n    $paren_stack = array();\n  \
    \  $nesting_array = array();\n    $current_nesting = 0;\n    for ($i = 0; $i <\
    \ $paren_array_len; $i++) {\n        $current_char = $paren_array[$i];\n     \
    \   if ($current_char == '(') {\n            array_push($paren_stack, $current_char);\n\
    \            $current_nesting += 1;\n            if ($current_nesting > $highest_nesting)\
    \ {\n                $highest_nesting = $current_nesting;\n            }\n   \
    \     } elseif ($current_char == ')') {\n            array_pop($paren_stack);\n\
    \            array_push($nesting_array, $current_nesting);\n            $current_nesting\
    \ -= 1;\n        }\n    }\n    return $nesting_array;\n}\n\n$parsed_parens = parse_nested_parens('(()())\
    \ ((())) () ((())()())');\n$paren_count = count($parsed_parens);\nfor ($i = 0;\
    \ $i < $paren_count; $i++) {\n    echo $parsed_parens[$i] . ' ';\n}\necho \"\\\
    n\";\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2 2 1 3 2 1 1 3 2 2 2 1 \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp2un1ctpd.php:43\nStack trace:\n#0 /tmp/tmp2un1ctpd.php(48): test()\n\
    #1 {main}\n  thrown in /tmp/tmp2un1ctpd.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    // $opening_parens = str_split($paren_string);\n    $opening_parens =\
    \ str_split(str_replace(' ', '', $paren_string));\n    $depth = 0;\n    $max_depth\
    \ = 0;\n    $depths = [];\n    foreach ($opening_parens as $paren) {\n       \
    \ if ($paren === '(') {\n            $depth++;\n            if ($depth > $max_depth)\
    \ {\n                $max_depth = $depth;\n            }\n        } elseif ($paren\
    \ === ')') {\n            $depths[] = $max_depth;\n            $depth--;\n   \
    \         $max_depth--;\n        }\n    }\n    return $depths;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8e9ja71u.php:33\n\
    Stack trace:\n#0 /tmp/tmp8e9ja71u.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8e9ja71u.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = preg_split('/ /', $paren_string);\n    $paren_array_max_depth\
    \ = array();\n    foreach ($paren_array as $paren_group) {\n        $group_max_depth\
    \ = 1;\n        $current_depth = 0;\n        for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n            if ($paren_group[$i] == '(') {\n                $current_depth++;\n\
    \                if ($current_depth > $group_max_depth) {\n                  \
    \  $group_max_depth = $current_depth;\n                }\n            } else if\
    \ ($paren_group[$i] == ')') {\n                $current_depth--;\n           \
    \ }\n        }\n        $paren_array_max_depth[] = $group_max_depth;\n    }\n\
    \    return $paren_array_max_depth;\n}\n\n$paren_string = \"(()()) ((())) () ((())()())\"\
    ;\nprint_r(parse_nested_parens($paren_string));\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    // return $paren_array;\n\
    \    $max_nested_array = [];\n    for ($i = 0; $i < count($paren_array); $i++)\
    \ {\n        $current_item = $paren_array[$i];\n        $current_index = 0;\n\
    \        $max_nested = 0;\n        $nested_count = 0;\n        while ($current_index\
    \ < strlen($current_item)) {\n            if ($current_item[$current_index] ==\
    \ '(') {\n                $nested_count++;\n                if ($nested_count\
    \ > $max_nested) {\n                    $max_nested = $nested_count;\n       \
    \         }\n            } else if ($current_item[$current_index] == ')') {\n\
    \                $nested_count--;\n            }\n            $current_index++;\n\
    \        }\n        array_push($max_nested_array, $max_nested);\n    }\n    return\
    \ $max_nested_array;\n}\n\n$paren_string = \"(()()) ((())) () ((())()())\";\n\
    $max_nested_array = parse_nested_parens($paren_string);\nprint_r($max_nested_array);\n\
    \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(')', ' )', $paren_string);\n    $paren_string\
    \ = str_replace('(', '( ', $paren_string);\n    $word_arr = explode(' ', $paren_string);\n\
    \    $result = [];\n    $max_depth = 0;\n    $curr_depth = 0;\n    foreach ($word_arr\
    \ as $word) {\n        $word_len = strlen($word);\n        if ($word == '(') {\n\
    \            $curr_depth += 1;\n            $max_depth = max($max_depth, $curr_depth);\n\
    \        } else if ($word == ')') {\n            $curr_depth -= 1;\n        }\
    \ else {\n            $result[] = $max_depth;\n            $max_depth = 0;\n \
    \           $curr_depth = 0;\n        }\n    }\n    return $result;\n}\n\n$paren_string\
    \ = '(()()) ((())) () ((())()())';\nvar_dump(parse_nested_parens($paren_string));\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(10) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(0)\n  [2]=>\n  int(0)\n\
    \  [3]=>\n  int(1)\n  [4]=>\n  int(0)\n  [5]=>\n  int(2)\n  [6]=>\n  int(0)\n\
    \  [7]=>\n  int(0)\n  [8]=>\n  int(0)\n  [9]=>\n  int(0)\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpd5k86zma.php:37\nStack trace:\n#0 /tmp/tmpd5k86zma.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpd5k86zma.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $paren_level = array();\n\
    \    foreach ($paren_groups as $group) {\n        $max_depth = 0;\n        $depth\
    \ = 0;\n        $paren_list = str_split($group);\n        foreach ($paren_list\
    \ as $paren) {\n            if ($paren == '(') {\n                $depth++;\n\
    \            } elseif ($paren == ')') {\n                $depth--;\n         \
    \   }\n            if ($depth > $max_depth) {\n                $max_depth = $depth;\n\
    \            }\n        }\n        $paren_level[] = $max_depth;\n    }\n    return\
    \ $paren_level;\n}\n\n$paren_string = '(()()) ((())) () ((())()())';\n$paren_level\
    \ = parse_nested_parens($paren_string);\necho \"The nested paren string is: \"\
    , $paren_string, PHP_EOL;\necho \"The parsed depth of the nested parentheses is:\
    \ \", print_r($paren_level, true), PHP_EOL;\necho PHP_EOL;\n$paren_string = '((()())(())(()(()())))';\n\
    $paren_level = parse_nested_parens($paren_string);\necho \"The nested paren string\
    \ is: \", $paren_string, PHP_EOL;\necho \"The parsed depth of the nested parentheses\
    \ is: \", print_r($paren_level, true), PHP_EOL;\necho PHP_EOL;\n$paren_string\
    \ = '((((((((())))))))))';\n$paren_level = parse_nested_parens($paren_string);\n\
    echo \"The nested paren string is: \", $paren_string, PHP_EOL;\necho \"The parsed\
    \ depth of the nested parentheses is: \", print_r($paren_level, true), PHP_EOL;\n\
    echo PHP_EOL;\n$paren_string = '((((((()))))))';\n$paren_level = parse_nested_parens($paren_string);\n\
    echo \"The nested paren string is: \", $paren_string, PHP_EOL;\necho \"The parsed\
    \ depth of the nested parentheses is: \", print\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprnmd8o65.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $max_depth = 0;\n  $depth = 0;\n  $group_max = [];\n  $i = 0;\n  while\
    \ ($i < strlen($paren_string)) {\n    $char = $paren_string[$i];\n    if ($char\
    \ == '(') {\n      $depth++;\n      if ($depth > $max_depth) {\n        $max_depth\
    \ = $depth;\n      }\n    } else if ($char == ')') {\n      $depth--;\n    } else\
    \ if ($char == ' ') {\n      array_push($group_max, $max_depth);\n      $max_depth\
    \ = 0;\n      $depth = 0;\n    }\n    $i++;\n  }\n  // Handle last group.\n  array_push($group_max,\
    \ $max_depth);\n  return $group_max;\n}\n\nfunction candidate(...$args) {\n  \
    \  return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $results = [];\n  $groups = explode(' ', $paren_string);\n  foreach ($groups\
    \ as $parens) {\n    $count = 0;\n    $max = 0;\n    for ($i = 0; $i < strlen($parens);\
    \ $i++) {\n      if ($parens[$i] == '(') {\n        $count++;\n      } else {\n\
    \        $count--;\n      }\n      $max = max($max, $count);\n    }\n    $results[]\
    \ = $max;\n  }\n  return $results;\n}\necho json_encode(parse_nested_parens('(()())\
    \ ((())) () ((())()())'));\necho \"\\n\";\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "[2,3,1,3]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"o\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"l\", $paren_string);\n    $paren_string = str_replace(\")\", \"r\", $paren_string);\n\
    \    $paren_string = str_replace(\"l\", \"[\", $paren_string);\n    $paren_string\
    \ = str_replace(\"r\", \"]\", $paren_string);\n    $paren_string = str_replace(\"\
    o\", \"\", $paren_string);\n    $paren_array = array();\n    $paren_array = explode(\"\
    \ \", $paren_string);\n    $count_array = array();\n    $max_count = 0;\n    foreach\
    \ ($paren_array as $paren) {\n        $count = 0;\n        $paren_len = strlen($paren);\n\
    \        $index = 0;\n        while ($index < $paren_len) {\n            if ($paren[$index]\
    \ == \"[\") {\n                $count++;\n            }\n            if ($paren[$index]\
    \ == \"]\") {\n                $count--;\n            }\n            $index++;\n\
    \        }\n        $count_array[] = $count;\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n        }\n    }\n    return $count_array;\n\
    }\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2s6q5s8.php:44\n\
    Stack trace:\n#0 /tmp/tmpg2s6q5s8.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpg2s6q5s8.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $parentheses = explode(' ', $paren_string);\n    $paren_count = [];\n\
    \    foreach ($parentheses as $paren) {\n        $paren_count[] = get_paren_count($paren);\n\
    \    }\n    return $paren_count;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_paren_count()\
    \ in /tmp/tmpavavq29s.php:11\nStack trace:\n#0 /tmp/tmpavavq29s.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpavavq29s.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpavavq29s.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpavavq29s.php\
    \ on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $words = explode(' ', $paren_string);\n\
    \    $stack = array();\n    $result = array();\n    foreach ($words as $word)\
    \ {\n        if ($word == '(') {\n            array_push($stack, $word);\n   \
    \     } else if ($word == ')') {\n            array_pop($stack);\n           \
    \ $result[] = count($stack);\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppwxcl4vc.php:29\n\
    Stack trace:\n#0 /tmp/tmppwxcl4vc.php(34): test()\n#1 {main}\n  thrown in /tmp/tmppwxcl4vc.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $stack = array();\n  $curr_max = 0;\n  $curr_count = 0;\n  $result = array();\n\
    \  $nested_parens = str_split($paren_string);\n  foreach ($nested_parens as $ch)\
    \ {\n    if ($ch == '(') {\n      array_push($stack, $ch);\n      $curr_count++;\n\
    \      if ($curr_count > $curr_max) {\n        $curr_max = $curr_count;\n    \
    \  }\n    } else if ($ch == ')') {\n      array_pop($stack);\n      $curr_count--;\n\
    \    } else if ($ch == ' ') {\n      array_push($result, $curr_max);\n      $curr_max\
    \ = 0;\n      $curr_count = 0;\n    }\n  }\n  array_push($result, $curr_max);\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $stack = [];\n    $result = [];\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        if ($paren_string[$i] == '(') {\n            $stack[] = $paren_string[$i];\n\
    \        } else if ($paren_string[$i] == ')') {\n            if (empty($stack))\
    \ {\n                return null;\n            }\n            $stack[] = $paren_string[$i];\n\
    \            $current_level = 0;\n            while (!empty($stack)) {\n     \
    \           $paren = array_pop($stack);\n                if ($paren == '(') {\n\
    \                    $current_level += 1;\n                } else {\n        \
    \            $current_level -= 1;\n                }\n                if ($current_level\
    \ == 0) {\n                    $result[] = count($stack) / 2 + 1;\n          \
    \          break;\n                }\n            }\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_bewtz1q.php:41\n\
    Stack trace:\n#0 /tmp/tmp_bewtz1q.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp_bewtz1q.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $group_strings = explode(' ', $paren_string);\n    $max_nesting_level\
    \ = array();\n    foreach ($group_strings as $group_string) {\n        $nesting_level\
    \ = 0;\n        $max_nesting_level_per_group = 0;\n        for ($i = 0; $i < strlen($group_string);\
    \ $i++) {\n            if ($group_string[$i] == '(') {\n                $nesting_level++;\n\
    \            } else {\n                $nesting_level--;\n            }\n    \
    \        if ($nesting_level > $max_nesting_level_per_group) {\n              \
    \  $max_nesting_level_per_group = $nesting_level;\n            }\n        }\n\
    \        $max_nesting_level[] = $max_nesting_level_per_group;\n    }\n    return\
    \ $max_nesting_level;\n}\n\n$paren_string = '(()()) ((())) () ((())()())';\n$max_nesting_level\
    \ = parse_nested_parens($paren_string);\n\necho '<pre>';\nprint_r($max_nesting_level);\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n\
    )\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    // Write your code here\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_length = strlen($paren_string);\n    $i = 0;\n    $max = 0;\n    $stack\
    \ = [];\n    $result = [];\n    while ($i < $paren_length) {\n        if ($paren_string[$i]\
    \ == '(') {\n            array_push($stack, '(');\n            $max++;\n     \
    \   } else {\n            array_pop($stack);\n            if (empty($stack)) {\n\
    \                array_push($result, $max);\n                $max = 0;\n     \
    \       }\n        }\n        $i++;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpja6pfr6p.php:36\n\
    Stack trace:\n#0 /tmp/tmpja6pfr6p.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpja6pfr6p.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $max_depth = 0;\n  $depth = 0;\n  $i = 0;\n  $n = strlen($paren_string);\n\
    \  $results = array();\n  while ($i < $n) {\n    if ($paren_string[$i] == '(')\
    \ {\n      $depth++;\n      if ($depth > $max_depth) $max_depth = $depth;\n  \
    \  } else if ($paren_string[$i] == ')') {\n      $depth--;\n    } else if ($paren_string[$i]\
    \ == ' ') {\n      $results[] = $max_depth;\n      $max_depth = 0;\n      $depth\
    \ = 0;\n    }\n    $i++;\n  }\n  $results[] = $max_depth;\n  return $results;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $arr = explode(' ', $paren_string);\n    $output = [];\n    foreach ($arr\
    \ as $s) {\n        //echo $s . PHP_EOL;\n        $level = 0;\n        $max_level\
    \ = 0;\n        for ($i = 0; $i < strlen($s); $i++) {\n            if ($s[$i]\
    \ == '(') {\n                $level++;\n                if ($level > $max_level)\
    \ {\n                    $max_level = $level;\n                }\n           \
    \ } else if ($s[$i] == ')') {\n                $level--;\n            }\n    \
    \    }\n        $output[] = $max_level;\n    }\n    return $output;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $prev_char\
    \ = \"\";\n    $curr_depth = 0;\n    $depth_array = array();\n    for ($i = 0;\
    \ $i < strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n  \
    \      if ($char == \"(\") {\n            $curr_depth++;\n        } else if ($char\
    \ == \")\") {\n            if ($prev_char == \"(\") {\n                $depth_array[]\
    \ = $curr_depth;\n            }\n            $curr_depth--;\n        }\n     \
    \   $prev_char = $char;\n    }\n    return $depth_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvcag6j8y.php:32\n\
    Stack trace:\n#0 /tmp/tmpvcag6j8y.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpvcag6j8y.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $result = [];\n    $paren_groups = explode(' ', $paren_string);\n   \
    \ foreach ($paren_groups as $paren_group) {\n        $group_max_nesting = 0;\n\
    \        $current_group_nesting = 0;\n        for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n            if ($paren_group[$i] == '(') {\n                $current_group_nesting++;\n\
    \            } else if ($paren_group[$i] == ')') {\n                $current_group_nesting--;\n\
    \            }\n            if ($current_group_nesting > $group_max_nesting) {\n\
    \                $group_max_nesting = $current_group_nesting;\n            }\n\
    \        }\n        $result[] = $group_max_nesting;\n    }\n    return $result;\n\
    }\n\nvar_dump(parse_nested_parens('(()()) ((())) () ((())()())'));\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "array(4) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n  int(1)\n \
    \ [3]=>\n  int(3)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    // TODO\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjdjqnvm_.php:16\n\
    Stack trace:\n#0 /tmp/tmpjdjqnvm_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpjdjqnvm_.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    // Split the input string into an array of substrings (for each group)\n\
    \    $paren_group_arr = explode(' ', $paren_string);\n    // Remove all the whitespaces\n\
    \    $paren_group_arr = array_filter($paren_group_arr, function($v) {\n      \
    \  return trim($v) != '';\n    });\n    // Check each element in the array and\
    \ append the number of nested parens to $result\n    $result = array();\n    foreach\
    \ ($paren_group_arr as $paren_group) {\n        $result[] = strlen($paren_group)\
    \ - count(array_filter(str_split($paren_group), function($v) {\n            return\
    \ $v != '(';\n        }));\n    }\n    return $result;\n}\necho implode(', ',\
    \ parse_nested_parens('(()()) ((())) () ((())()())'));\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "3, 3, 1, 5\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdm2ywz66.php:29\n\
    Stack trace:\n#0 /tmp/tmpdm2ywz66.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpdm2ywz66.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    // Set up variables to be used.\n    $paren_list = explode(' ', $paren_string);\n\
    \    $paren_res = array();\n    // Loop through all parenthesis groups.\n    foreach\
    \ ($paren_list as $paren_group) {\n        // Use a counter to keep track of the\
    \ deepest level of parentheses.\n        $paren_counter = 0;\n        // Loop\
    \ through each character in the group.\n        for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n            if ($paren_group[$i] == '(') {\n                // If the\
    \ character is an open parentheses then increment.\n                $paren_counter++;\n\
    \            } elseif ($paren_group[$i] == ')') {\n                // If the character\
    \ is a close parentheses then decrement.\n                $paren_counter--;\n\
    \            }\n        }\n        // Add the maximum value of the counter to\
    \ the result array.\n        $paren_res[] = max($paren_counter, 0);\n    }\n \
    \   return $paren_res;\n}\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph1210za4.php:35\n\
    Stack trace:\n#0 /tmp/tmph1210za4.php(40): test()\n#1 {main}\n  thrown in /tmp/tmph1210za4.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $output = array();\n\
    \    foreach ($paren_array as $paren) {\n        $paren_chars = str_split($paren);\n\
    \        $level = 0;\n        $max_level = 0;\n        foreach ($paren_chars as\
    \ $char) {\n            if ($char == '(') {\n                $level++;\n     \
    \       } elseif ($char == ')') {\n                $level--;\n            }\n\
    \            if ($level > $max_level) {\n                $max_level = $level;\n\
    \            }\n        }\n        $output[] = $max_level;\n    }\n    return\
    \ $output;\n}\n\necho '<p>parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )</p>';\necho '<pre>';\nprint_r(parse_nested_parens('(()()) ((())) () ((())()())'));\n\
    echo '</pre>';\n\necho '<p>parse_nested_parens(\"()\")</p>';\necho '<pre>';\n\
    print_r(parse_nested_parens('()'));\necho '</pre>';\n\necho '<p>parse_nested_parens(\"\
    (()\")</p>';\necho '<pre>';\nprint_r(parse_nested_parens('(()'));\necho '</pre>';\n\
    \necho '<p>parse_nested_parens(\"(()()(()()()()(()))))\")</p>';\necho '<pre>';\n\
    print_r(parse_nested_parens('(()()(()()()()(()))))'));\necho '</pre>';\n\necho\
    \ '<p>parse_nested_parens(\"(()()) ((())()())\")</p>';\necho '<pre>';\nprint_r(parse_nested_parens('(()())\
    \ ((())()())'));\necho '</pre>';\n\necho '<p>parse_nested_parens(\"(()()) (()())\"\
    )</p>';\necho '<pre>';\nprint_r(\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmfxew85x.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $out = array();\n  \
    \  foreach ($paren_array as $substr) {\n        $substr_len = strlen($substr);\n\
    \        $left_paren_count = 0;\n        $max_nesting = 0;\n        for ($i =\
    \ 0; $i < $substr_len; $i++) {\n            if ($substr[$i] == '(') {\n      \
    \          $left_paren_count++;\n                if ($left_paren_count > $max_nesting)\
    \ {\n                    $max_nesting = $left_paren_count;\n                }\n\
    \            } else if ($substr[$i] == ')') {\n                $left_paren_count--;\n\
    \            }\n        }\n        array_push($out, $max_nesting);\n    }\n  \
    \  return $out;\n}\n\n$paren_string = '(()()) ((())) () ((())()())';\necho 'Input:\
    \ ' . $paren_string . PHP_EOL;\n$nested_parens = parse_nested_parens($paren_string);\n\
    echo 'Max nesting: ' . implode(', ', $nested_parens) . PHP_EOL;\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "Input: (()()) ((())) () ((())()())\nMax nesting: 2, 3, 1, 3\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  // create result array to return\n  $result = array();\n  // create a counter\
    \ to keep track of which group we are looking at\n  $counter = 0;\n  // create\
    \ a counter to keep track of how many nested parens we have found\n  $nested_parens\
    \ = 0;\n  // create a variable to keep track of the deepest nested parens\n  $deepest_nested_parens\
    \ = 0;\n  // iterate through the string\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    // if we find an open parens\n    if ($paren_string[$i] == '(')\
    \ {\n      // increase the parens counter\n      $nested_parens++;\n      // check\
    \ if the current parens counter is bigger than the deepest we have seen so far\n\
    \      if ($nested_parens > $deepest_nested_parens) {\n        // if so, update\
    \ the deepest we have seen so far\n        $deepest_nested_parens = $nested_parens;\n\
    \      }\n    }\n    // if we find a closed parens\n    if ($paren_string[$i]\
    \ == ')') {\n      // decrease the parens counter\n      $nested_parens--;\n \
    \   }\n    // if we find a space\n    if ($paren_string[$i] == ' ') {\n      //\
    \ we have completed one group, so add the deepest parens count we found to the\
    \ result array\n      $result[$counter] = $deepest_nested_parens;\n      // reset\
    \ the deepest parens we have seen\n      $deepest_nested_parens = 0;\n      //\
    \ increase the counter to keep track of which group we are looking at\n      $counter++;\n\
    \    }\n  }\n  // for the last group, we have to add the deepest parens count\
    \ to the result array\n  $result[$counter] = $deepest_nested_parens;\n  // return\
    \ the result array\n  return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_arr = explode(' ', $paren_string);\n  $output = [];\n  for ($i =\
    \ 0; $i < count($paren_arr); $i++) {\n    $count = 0;\n    $num_parens = strlen($paren_arr[$i]);\n\
    \    $max_count = 0;\n    for ($j = 0; $j < $num_parens; $j++) {\n      if ($paren_arr[$i][$j]\
    \ == '(') {\n        $count++;\n      } else {\n        $count--;\n      }\n \
    \     if ($count > $max_count) {\n        $max_count = $count;\n      }\n    }\n\
    \    $output[] = $max_count;\n  }\n  return $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $stack = [];\n    $maxDepth = -1;\n    $parenDepth = [];\n    $parens\
    \ = str_split($paren_string);\n    foreach ($parens as $paren) {\n        if ($paren\
    \ == '(') {\n            array_push($stack, $paren);\n            $maxDepth++;\n\
    \        } elseif ($paren == ')') {\n            if (array_pop($stack) == '(')\
    \ {\n                $parenDepth[] = $maxDepth;\n                $maxDepth--;\n\
    \            }\n        }\n    }\n    return $parenDepth;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp31lhvp6q.php:30\n\
    Stack trace:\n#0 /tmp/tmp31lhvp6q.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp31lhvp6q.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $start_paren = 0;\n    $levels = [];\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        $char = $paren_string[$i];\n        if ($char == '(') {\n \
    \           $start_paren++;\n        } else if ($char == ')') {\n            $start_paren--;\n\
    \        } else if ($char == ' ') {\n            array_push($levels, $start_paren);\n\
    \        }\n    }\n    array_push($levels, $start_paren);\n    return $levels;\n\
    }\n\n$input = '((())()()) ((())()) ((())) ((()()()())) () (())';\n$paren_levels\
    \ = parse_nested_parens($input);\nprint_r($paren_levels);\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0\n    [2] => 0\n    [3] => 0\n    [4]\
    \ => 0\n    [5] => 0\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9r22vb_g.php:32\n\
    Stack trace:\n#0 /tmp/tmp9r22vb_g.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp9r22vb_g.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = explode(' ', $paren_string);\n  $max_nesting = [];\n  foreach\
    \ ($paren_string as $paren_group) {\n    $count = 0;\n    $max = 0;\n    for ($i\
    \ = 0; $i < strlen($paren_group); $i++) {\n      if ($paren_group[$i] == '(')\
    \ {\n        $count++;\n        if ($count > $max) {\n          $max = $count;\n\
    \        }\n      } else {\n        $count--;\n      }\n    }\n    $max_nesting[]\
    \ = $max;\n  }\n  return $max_nesting;\n}\n\necho '<pre>';\nvar_dump(parse_nested_parens('(()())\
    \ ((())) () ((())()())'));\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>array(4) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n  int(1)\n\
    \  [3]=>\n  int(3)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    // Remove space\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_group = explode(')(', $paren_string);\n    // Add brackets\n    $paren_group[0]\
    \ = $paren_group[0] . ')';\n    $paren_group[count($paren_group) - 1] = '(' .\
    \ $paren_group[count($paren_group) - 1];\n    $depth = [];\n    foreach ($paren_group\
    \ as $group) {\n        $depth[] = find_max_depth($group);\n    }\n    return\
    \ $depth;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function find_max_depth()\
    \ in /tmp/tmp4daro0zu.php:16\nStack trace:\n#0 /tmp/tmp4daro0zu.php(22): parse_nested_parens('(()())((()))()(...')\n\
    #1 /tmp/tmp4daro0zu.php(26): candidate('(()()) ((())) (...')\n#2 /tmp/tmp4daro0zu.php(31):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp4daro0zu.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_array =\
    \ str_split($paren_string);\n  $paren_stack = [];\n  $max_stack = 0;\n  $result\
    \ = [];\n  for ($i = 0; $i < count($paren_array); $i++) {\n    if ($paren_array[$i]\
    \ == '(') {\n      array_push($paren_stack, $paren_array[$i]);\n      if (count($paren_stack)\
    \ > $max_stack) {\n        $max_stack = count($paren_stack);\n      }\n    } elseif\
    \ ($paren_array[$i] == ')') {\n      array_pop($paren_stack);\n      if ($paren_array[$i\
    \ + 1] != '(' && $paren_array[$i + 1] != ')') {\n        array_push($result, $max_stack);\n\
    \        $max_stack = 0;\n      }\n    }\n  }\n  return $result;\n}\n\n$tests\
    \ = [\n  '()()' => [2],\n  '(())' => [2],\n  '()()()' => [2, 2],\n  '((()))' =>\
    \ [3],\n  '((()))()()' => [3, 2],\n  '((())())' => [3],\n  '((()))()' => [3, 1],\n\
    \  '((())()())' => [3, 3],\n  '((())()())()' => [3, 3, 1],\n  '((())()())()(())'\
    \ => [3, 3, 1, 2],\n  '((())()())()(())(())' => [3, 3, 1, 2, 2],\n  '((())()())()(())(())(())'\
    \ => [3, 3, 1, 2, 2, 2],\n  '((())()())()(())(())(())(())' => [3, 3, 1, 2, 2,\
    \ 2, 2],\n  '((())()())()(())(())(())(())(())' => [3, 3, 1, 2, 2, 2, 2, 2],\n\
    \  '\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp63w5a9u7.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $nested_parens = [];\n    // TODO: generate the array of deepest level\
    \ of nesting.\n    // For example, the input '(()()) ((())) () ((())()())' should\
    \ result in\n    // [2, 3, 1, 3]\n    return $nested_parens;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0ohubd7c.php:20\n\
    Stack trace:\n#0 /tmp/tmp0ohubd7c.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp0ohubd7c.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $count_array = [];\n  foreach\
    \ ($paren_array as $paren_group) {\n    $paren_stack = new SplStack();\n    for\
    \ ($i = 0; $i < strlen($paren_group); $i++) {\n      if ($paren_group[$i] == '(')\
    \ {\n        $paren_stack->push($paren_group[$i]);\n      } else {\n        $paren_stack->pop();\n\
    \      }\n    }\n    array_push($count_array, $paren_stack->count());\n  }\n \
    \ return $count_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyg4sjauf.php:29\n\
    Stack trace:\n#0 /tmp/tmpyg4sjauf.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpyg4sjauf.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_levels = [];\n  $current_level = 0;\n  $nesting_levels = explode('\
    \ ', $paren_string);\n  foreach ($nesting_levels as $level) {\n    $current_level\
    \ = 0;\n    $level_length = strlen($level);\n    for ($i = 0; $i < $level_length;\
    \ $i++) {\n      if ($level[$i] == '(') {\n        $current_level++;\n      }\
    \ elseif ($level[$i] == ')') {\n        $current_level--;\n      }\n    }\n  \
    \  array_push($paren_levels, $current_level);\n  }\n  return $paren_levels;\n\
    }\n\n$case_1 = '(()())';\n$case_2 = '((()))';\n$case_3 = '()';\n$case_4 = '((())()())';\n\
    \nvar_dump(parse_nested_parens($case_1));\nvar_dump(parse_nested_parens($case_2));\n\
    var_dump(parse_nested_parens($case_3));\nvar_dump(parse_nested_parens($case_4));\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(1) {\n  [0]=>\n  int(0)\n}\narray(1) {\n  [0]=>\n  int(0)\n}\narray(1)\
    \ {\n  [0]=>\n  int(0)\n}\narray(1) {\n  [0]=>\n  int(0)\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpjitqjv9g.php:40\nStack trace:\n#0 /tmp/tmpjitqjv9g.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpjitqjv9g.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_groups = explode(' ', $paren_string);\n  $deepest_parens = [];\n\
    \  foreach ($paren_groups as $group) {\n    $max_depth = 1;\n    $current_depth\
    \ = 0;\n    for ($i = 0; $i < strlen($group); $i++) {\n      if ($group[$i] ==\
    \ '(') {\n        $current_depth++;\n        if ($current_depth > $max_depth)\
    \ {\n          $max_depth = $current_depth;\n        }\n      } else if ($group[$i]\
    \ == ')') {\n        $current_depth--;\n      }\n    }\n    array_push($deepest_parens,\
    \ $max_depth);\n  }\n  return $deepest_parens;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  //Initialize variables\n  $paren_stack = [];\n  $max_level = 0;\n  $curr_max_level\
    \ = 0;\n  $max_levels = [];\n\n  // For each parenthesis group, add it to the\
    \ stack\n  $paren_groups = explode(' ', $paren_string);\n  foreach ($paren_groups\
    \ as $group) {\n    // Search through the group character by character\n    $group_chars\
    \ = str_split($group);\n    foreach ($group_chars as $char) {\n      // If the\
    \ character is an open paren, add it to the stack\n      if ($char == '(') {\n\
    \        $paren_stack[] = $char;\n        $curr_max_level++;\n      }\n      //\
    \ If the character is a close paren, remove it from the stack\n      if ($char\
    \ == ')') {\n        array_pop($paren_stack);\n        $curr_max_level--;\n  \
    \    }\n      // If the current level is bigger than the previous max, set it\
    \ as the new max\n      if ($curr_max_level > $max_level) {\n        $max_level\
    \ = $curr_max_level;\n      }\n    }\n    // At the end of each group, add the\
    \ max level to the list of max levels and reset the current max level\n    $max_levels[]\
    \ = $max_level;\n    $curr_max_level = 0;\n  }\n  return $max_levels;\n}\n\n$input1\
    \ = '(()()) ((())) () ((())()())';\nprint_r(parse_nested_parens($input1));\n\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 3\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpftpq92qj.php:50\nStack\
    \ trace:\n#0 /tmp/tmpftpq92qj.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpftpq92qj.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_group = explode(' ', $paren_string);\n  $result = array();\n  foreach\
    \ ($paren_group as $group) {\n    $result[] = parse_nested_parens_helper($group);\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmplajku8_f.php:11\nStack trace:\n#0 /tmp/tmplajku8_f.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmplajku8_f.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmplajku8_f.php(26): test()\n#3 {main}\n  thrown in /tmp/tmplajku8_f.php\
    \ on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_levels = [];\n    $curr_level = 0;\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        $curr_paren = $paren_string[$i];\n        if ($curr_paren ==\
    \ '(') {\n            $curr_level++;\n        } elseif ($curr_paren == ')') {\n\
    \            $curr_level--;\n        } elseif ($curr_paren == ' ') {\n       \
    \     $paren_levels[] = $curr_level;\n            $curr_level = 0;\n        }\n\
    \    }\n    return $paren_levels;\n}\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ik31ouf.php:28\n\
    Stack trace:\n#0 /tmp/tmp3ik31ouf.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp3ik31ouf.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $groups = explode(' ', $paren_string);\n  $counts = [];\n  foreach ($groups\
    \ as $group) {\n    $counts[] = paren_count($group);\n  }\n  return $counts;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function paren_count()\
    \ in /tmp/tmpy95c01x4.php:11\nStack trace:\n#0 /tmp/tmpy95c01x4.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpy95c01x4.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpy95c01x4.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpy95c01x4.php\
    \ on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $output = array();\n    $paren_groups = explode(' ', $paren_string);\n\
    \    for ($i = 0; $i < count($paren_groups); $i++) {\n        $output[$i] = 1;\n\
    \        $char_count = 0;\n        for ($j = 0; $j < strlen($paren_groups[$i]);\
    \ $j++) {\n            if ($paren_groups[$i][$j] == '(') {\n                $char_count++;\n\
    \                if ($char_count > $output[$i]) {\n                    $output[$i]\
    \ = $char_count;\n                }\n            } else {\n                $char_count--;\n\
    \            }\n        }\n    }\n    return $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_stack = array();\n  $current_max = 0;\n  $result = array();\n  $current_level\
    \ = 0;\n  $current_char = '';\n  for ($i = 0; $i < strlen($paren_string); $i++)\
    \ {\n    $current_char = $paren_string[$i];\n    if ($current_char === '(') {\n\
    \      array_push($paren_stack, $current_char);\n      $current_level += 1;\n\
    \      if ($current_level > $current_max) {\n        $current_max = $current_level;\n\
    \      }\n    } else if ($current_char === ')') {\n      array_pop($paren_stack);\n\
    \      $current_level -= 1;\n    } else if ($current_char === ' ') {\n      array_push($result,\
    \ $current_max);\n      $current_max = 0;\n      $current_level = 0;\n    }\n\
    \  }\n  array_push($result, $current_max);\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $nested_parens = explode(' ', $paren_string);\n    $output = [];\n  \
    \  foreach ($nested_parens as $nested_paren) {\n        $max_depth = 0;\n    \
    \    $count = 0;\n        $array = str_split($nested_paren);\n        foreach\
    \ ($array as $char) {\n            if ($char == '(') {\n                $count++;\n\
    \                if ($count > $max_depth) {\n                    $max_depth =\
    \ $count;\n                }\n            } else {\n                $count--;\n\
    \            }\n        }\n        $output[] = $max_depth;\n    }\n    return\
    \ $output;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $maxes = [];\n    $max = 0;\n    $nested = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $c = $paren_string[$i];\n        if\
    \ ($c == '(') {\n            $nested++;\n            if ($nested > $max) {\n \
    \               $max = $nested;\n            }\n        } else if ($c == ')')\
    \ {\n            $nested--;\n        } else if ($c == ' ') {\n            $maxes[]\
    \ = $max;\n            $max = 0;\n            $nested = 0;\n        }\n    }\n\
    \    $maxes[] = $max;\n    return $maxes;\n}\n\n$paren_string = '(()()) ((()))\
    \ () ((())()())';\nprint_r(parse_nested_parens($paren_string));\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $result = [];\n    $paren_array = explode(' ', $paren_string);\n    foreach\
    \ ($paren_array as $paren) {\n        $paren_length = strlen($paren);\n      \
    \  $nesting_level = 0;\n        $current_level = 0;\n        for ($i = 0; $i <\
    \ $paren_length; $i++) {\n            if ($paren[$i] == '(') {\n             \
    \   $current_level++;\n            } else {\n                $current_level--;\n\
    \            }\n            if ($current_level > $nesting_level) {\n         \
    \       $nesting_level = $current_level;\n            }\n        }\n        $result[]\
    \ = $nesting_level;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $max_deep = [];\n  $paren_arr = explode(' ', $paren_string);\n  foreach\
    \ ($paren_arr as $group) {\n    $deep = 0;\n    $max = 0;\n    for ($i = 0; $i\
    \ < strlen($group); $i++) {\n      if ($group[$i] == '(') {\n        $deep++;\n\
    \      } else if ($group[$i] == ')') {\n        $deep--;\n      }\n      if ($deep\
    \ > $max) {\n        $max = $deep;\n      }\n    }\n    $max_deep[] = $max;\n\
    \  }\n  return $max_deep;\n}\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $level_list = [];\n    $len = strlen($paren_string);\n    $i = 0;\n \
    \   while ($i < $len) {\n        if ($paren_string[$i] == '(') {\n           \
    \ $level = 1;\n            $i++;\n            while ($i < $len && $paren_string[$i]\
    \ != ' ') {\n                if ($paren_string[$i] == '(') {\n               \
    \     $level++;\n                } elseif ($paren_string[$i] == ')') {\n     \
    \               $level--;\n                }\n                $i++;\n        \
    \    }\n            array_push($level_list, $level);\n        } else {\n     \
    \       $i++;\n        }\n    }\n    return $level_list;\n}\n\n$paren_string =\
    \ '()';\n$level_list = parse_nested_parens($paren_string);\nprint_r($level_list);\n\
    \n$paren_string = '(())';\n$level_list = parse_nested_parens($paren_string);\n\
    print_r($level_list);\n\n$paren_string = '((()))';\n$level_list = parse_nested_parens($paren_string);\n\
    print_r($level_list);\n\n$paren_string = '(()()) ((())) () ((())()())';\n$level_list\
    \ = parse_nested_parens($paren_string);\nprint_r($level_list);\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "Array\n(\n    [0] => 0\n)\nArray\n(\n    [0] => 0\n)\nArray\n(\n    [0]\
    \ => 0\n)\nArray\n(\n    [0] => 0\n    [1] => 0\n    [2] => 0\n    [3] => 0\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr2mlgsd1.php:51\n\
    Stack trace:\n#0 /tmp/tmpr2mlgsd1.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpr2mlgsd1.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    // Split the string into an array of parenthesis groups separated by\
    \ spaces.\n    $paren_groups = explode(' ', $paren_string);\n    $maximum_nesting\
    \ = [];\n    // Iterate through the array of groups and calculate the maximum\
    \ nesting for each group.\n    foreach ($paren_groups as $group) {\n        $nesting\
    \ = 0;\n        $current_nesting = 0;\n        for ($i = 0; $i < strlen($group);\
    \ $i++) {\n            // If the parenthesis is open, increase the current level\
    \ of nesting.\n            if ($group[$i] == '(') {\n                $current_nesting++;\n\
    \            }\n            // If the parenthesis is closed, decrease the current\
    \ level of nesting.\n            if ($group[$i] == ')') {\n                $current_nesting--;\n\
    \            }\n            // Update the maximum level of nesting encountered\
    \ so far.\n            if ($current_nesting > $nesting) {\n                $nesting\
    \ = $current_nesting;\n            }\n        }\n        // Add the maximum nesting\
    \ level to the array.\n        $maximum_nesting[] = $nesting;\n    }\n    return\
    \ $maximum_nesting;\n}\n\n$test_string = '(()()) ((())) () ((())()())';\n$nested_parens\
    \ = parse_nested_parens($test_string);\necho implode(', ', $nested_parens);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 2, 3, 1, 3
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    foreach ($paren_array\
    \ as $index => $group) {\n        $single_level_nesting = parse_single_level_nesting($group);\n\
    \        $paren_array[$index] = $single_level_nesting;\n    }\n    return $paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_single_level_nesting()\
    \ in /tmp/tmpktgtm4ov.php:10\nStack trace:\n#0 /tmp/tmpktgtm4ov.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpktgtm4ov.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpktgtm4ov.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpktgtm4ov.php\
    \ on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $res = array();\n    foreach (explode(' ', $paren_string) as $paren_group)\
    \ {\n        $max_level = 0;\n        $level = 0;\n        foreach (str_split($paren_group)\
    \ as $c) {\n            if ($c == '(') {\n                $level++;\n        \
    \    } else {\n                $level--;\n            }\n            $max_level\
    \ = max($max_level, $level);\n        }\n        $res[] = $max_level;\n    }\n\
    \    return $res;\n}\n\n$test = 'Test 1';\n$test_string = '(()()) ((())) () ((())()())';\n\
    $test_res = parse_nested_parens($test_string);\n$test_expect = [2, 3, 1, 3];\n\
    assert(serialize($test_res) === serialize($test_expect));\n\n$test = 'Test 2';\n\
    $test_stringn\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxpmq64f9.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $groups = explode(' ', $paren_string);\n    $nested_levels = [];\n  \
    \  foreach ($groups as $group) {\n        $nested_levels[] = count_nested_parens($group);\n\
    \    }\n    return $nested_levels;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_nested_parens()\
    \ in /tmp/tmpojvnxi0u.php:11\nStack trace:\n#0 /tmp/tmpojvnxi0u.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpojvnxi0u.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpojvnxi0u.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpojvnxi0u.php\
    \ on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_array = [];\n    foreach ($paren_array as $paren_group) {\n    \
    \    $level = 0;\n        $paren_len = strlen($paren_group);\n        for ($i\
    \ = 0; $i < $paren_len; $i++) {\n            $paren = $paren_group[$i];\n    \
    \        if ($paren == '(') {\n                $level++;\n            } else {\n\
    \                $level--;\n            }\n            if ($level > $max_level)\
    \ {\n                $max_level = $level;\n            }\n        }\n        array_push($max_level_array,\
    \ $max_level);\n    }\n    return $max_level_array;\n}\n$paren_string = '(()())\
    \ ((())) () ((())()())';\n$max_level_array = parse_nested_parens($paren_string);\n\
    print_r($max_level_array);\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 3\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpzpn7eut1.php:37\nStack\
    \ trace:\n#0 /tmp/tmpzpn7eut1.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpzpn7eut1.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_arr = explode(' ', $paren_string);\n  $depth_arr = [];\n  for ($i\
    \ = 0; $i < count($paren_arr); $i++) {\n    $depth = 0;\n    $is_valid = True;\n\
    \    for ($j = 0; $j < strlen($paren_arr[$i]); $j++) {\n      $current_char =\
    \ $paren_arr[$i][$j];\n      if ($current_char == '(') {\n        $depth += 1;\n\
    \      } else if ($current_char == ')') {\n        $depth -= 1;\n      }\n   \
    \   if ($depth < 0) {\n        $is_valid = False;\n        break;\n      }\n \
    \   }\n    if ($is_valid && $depth == 0) {\n      $depth_arr[] = $depth;\n   \
    \ } else {\n      $depth_arr[] = 'Invalid';\n    }\n  }\n  return $depth_arr;\n\
    }\n\nprint_r(parse_nested_parens('(()()) ((())) () ((())()())'));\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0\n    [2] => 0\n    [3] => 0\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpzup7wdkh.php:40\nStack\
    \ trace:\n#0 /tmp/tmpzup7wdkh.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpzup7wdkh.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    // Find the start and end of the parentheses.\n    // For example, if\
    \ the parentheses string is \"(a) (b)\", the start_parens\n    // is [0, 4] and\
    \ the end_parens is [3, 6].\n    preg_match_all('/(\\(|\\))/', $paren_string,\
    \ $matches);\n    $start_parens = [];\n    $end_parens = [];\n    $levels = [];\n\
    \    $length = count($matches[0]);\n    for ($i = 0; $i < $length; $i++) {\n \
    \       if ($matches[0][$i] == '(') {\n            $start_parens[] = $i;\n   \
    \         $levels[] = 0;\n        } else {\n            $end_parens[] = $i;\n\
    \            $levels[] = 0;\n        }\n    }\n\n    // We are going to iterate\
    \ through the start_parens and end_parens together,\n    // to find the deepest\
    \ nesting of the parentheses.\n    $result = [];\n    $i = 0;\n    $j = 0;\n \
    \   $length = count($start_parens);\n    while ($i < $length) {\n        // If\
    \ current level is 0, then the start parenthesis is the new root.\n        if\
    \ ($levels[$start_parens[$i]] == 0) {\n            $root = $start_parens[$i];\n\
    \            $result[] = 0;\n            $levels[$start_parens[$i]] = 1;\n   \
    \         // If the next parenthesis is a starting one, then increment the\n \
    \           // level of the root by 1.\n            if ($start_parens[$i + 1]\
    \ < $end_parens[$j]) {\n                $levels[$start_parens[$i + 1]] = $levels[$root]\
    \ + 1;\n                $result[count($result) - 1] = $levels[$start_parens[$i\
    \ + 1]];\n                $i++;\n            }\n        } else {\n           \
    \ // If current level is not 0, then the end parenthesis is the end\n        \
    \    // of the current root's children.\n            $levels[$end_parens\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfelj4xgt.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = preg_replace('/[^()]+/', '', $paren_string);\n  // \"((()))\"\
    \n  $paren_string = preg_replace('/[()]/', '$0 ', $paren_string);\n  // \"( (\
    \ ) ( ) ) \"\n  $paren_string = preg_replace('/[(][)]/', '@', $paren_string);\n\
    \  // \"( @ ) ( @ ) \"\n  $paren_string = preg_replace('/[(] [)]/', '@', $paren_string);\n\
    \  // \"@ @ @ @ \"\n  $paren_string = preg_replace('/[(][)]/', '@', $paren_string);\n\
    \  // \"@ @ @ @ \"\n  $paren_string = preg_replace('/[(] [)]/', '@', $paren_string);\n\
    \  // \"@ @ @ @ \"\n  $paren_string = str_replace('@', ')', $paren_string);\n\
    \  // \") ) ) ) \"\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \  // \") ) ) ) \"\n  $paren_string = preg_replace('/[(]/', ' ( ', $paren_string);\n\
    \  // \" ( ) ) ) \"\n  $paren_string = preg_replace('/[)]/', ' ) ', $paren_string);\n\
    \  // \" ( ) ) ) \"\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \  // \" ( ) ) ) \"\n  $paren_string = preg_replace('/ [)]/', ')', $paren_string);\n\
    \  // \" ( ) ) )\"\n  $paren_string = preg_replace('/[(] /', '(', $paren_string);\n\
    \  // \" ( ) ) )\"\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \  // \" ( ) ) )\"\n  $paren_string = preg_replace('/^\\s+/', '', $paren_string);\n\
    \ \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9p8ihj6y.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $result = [];\n    $groups = explode(' ', $paren_string);\n    foreach\
    \ ($groups as $group) {\n        $paren_stack = [];\n        $level = 0;\n   \
    \     for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i] ==\
    \ '(') {\n                $level++;\n                array_push($paren_stack,\
    \ '(');\n            } else if ($group[$i] == ')') {\n                $level--;\n\
    \                array_pop($paren_stack);\n            }\n        }\n        $result[]\
    \ = $level;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpma94wci3.php:32\n\
    Stack trace:\n#0 /tmp/tmpma94wci3.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpma94wci3.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $results = array();\n\
    \    foreach ($paren_array as $value) {\n        $paren_counter = 0;\n       \
    \ $max_paren_counter = 0;\n        for ($i = 0; $i < strlen($value); $i++) {\n\
    \            if ($value[$i] == '(') {\n                $paren_counter++;\n   \
    \         } else if ($value[$i] == ')') {\n                $paren_counter--;\n\
    \            }\n            if ($paren_counter > $max_paren_counter) {\n     \
    \           $max_paren_counter = $paren_counter;\n            }\n        }\n \
    \       array_push($results, $max_paren_counter);\n    }\n    return $results;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_parens = array();\n\
    \    foreach ($paren_groups as $group) {\n        $num_parens = 0;\n        $is_valid\
    \ = true;\n        $curr_max = 0;\n        $i = 0;\n        while ($i < strlen($group)\
    \ && $is_valid) {\n            if ($group[$i] == '(') {\n                $num_parens++;\n\
    \                $curr_max = max($curr_max, $num_parens);\n            } else\
    \ if ($group[$i] == ')') {\n                $num_parens--;\n                if\
    \ ($num_parens < 0) {\n                    $is_valid = false;\n              \
    \  }\n            }\n            $i++;\n        }\n        if ($is_valid && $num_parens\
    \ == 0) {\n            $max_parens[] = $curr_max;\n        } else {\n        \
    \    $max_parens[] = -1;\n        }\n    }\n    return $max_parens;\n}\n\nprint_r(parse_nested_parens('(()())\
    \ ((())) () ((())()())'));\nprint_r(parse_nested_parens('(()()) ((())'));\nprint_r(parse_nested_parens('(()())\
    \ ()(())'));\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 2\n    [1] => -1\n)\nArray\n(\n    [0] => 2\n    [1] => 2\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_list = [];\n    $depth = 0;\n    $parentheses = preg_split('//',\
    \ $paren_string, -1, PREG_SPLIT_NO_EMPTY);\n    foreach ($parentheses as $p) {\n\
    \        if ($p == '(') {\n            ++$depth;\n        } else if ($p == ')')\
    \ {\n            $paren_list[] = $depth;\n            --$depth;\n        }\n \
    \   }\n    return $paren_list;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg7uja17x.php:27\n\
    Stack trace:\n#0 /tmp/tmpg7uja17x.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpg7uja17x.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $input = str_split($paren_string);\n  $parens = [];\n  $output = [];\n\
    \  $index = 0;\n  foreach ($input as $ch) {\n    if ($ch == '(') {\n      array_push($parens,\
    \ $index);\n    } else if ($ch == ')') {\n      $parent = array_pop($parens);\n\
    \      if (count($parens) == 0) {\n        array_push($output, $index - $parent\
    \ + 1);\n      }\n    }\n    $index++;\n  }\n  return $output;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphlquk570.php:30\n\
    Stack trace:\n#0 /tmp/tmphlquk570.php(35): test()\n#1 {main}\n  thrown in /tmp/tmphlquk570.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $i = 0;\n  $max_parens\
    \ = 0;\n  $paren_levels = [];\n  $length = strlen($paren_string);\n  while ($i\
    \ < $length) {\n    if ($paren_string[$i] === '(') {\n      $current_parens =\
    \ 1;\n      while ($paren_string[$i+1] === '(') {\n        $current_parens++;\n\
    \        $i++;\n      }\n      $paren_levels[] = $current_parens;\n    }\n   \
    \ $i++;\n  }\n  return $paren_levels;\n}\nprint_r(parse_nested_parens('(()())\
    \ ((())) () ((())()())'));\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n    [2] => 3\n    [3] => 1\n    [4]\
    \ => 3\n    [5] => 1\n    [6] => 1\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpv_o2z0gs.php:32\nStack trace:\n#0 /tmp/tmpv_o2z0gs.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv_o2z0gs.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $max_nest_level\
    \ = 1;\n    $paren_arr = str_split($paren_string);\n    $paren_count_arr = array();\n\
    \    $paren_count_arr[0] = 0;\n    $sub_paren_count = 0;\n    $sub_paren_count_arr\
    \ = array();\n    $sub_paren_count_arr[0] = 0;\n    $sub_paren_count_index = 0;\n\
    \    for ($i = 0; $i < sizeof($paren_arr); $i++) {\n        if ($paren_arr[$i]\
    \ == \"(\") {\n            $sub_paren_count++;\n            $sub_paren_count_arr[$sub_paren_count_index]\
    \ = $sub_paren_count;\n            if ($sub_paren_count > $max_nest_level) {\n\
    \                $max_nest_level = $sub_paren_count;\n            }\n        }\
    \ else if ($paren_arr[$i] == \")\") {\n            $paren_count_arr[$sub_paren_count_index]\
    \ = $sub_paren_count;\n            $sub_paren_count_index++;\n            $sub_paren_count\
    \ = 0;\n        }\n    }\n    return $paren_count_arr;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplfdiho8j.php:37\n\
    Stack trace:\n#0 /tmp/tmplfdiho8j.php(42): test()\n#1 {main}\n  thrown in /tmp/tmplfdiho8j.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $nested_parens = [];\n \
    \ foreach ($paren_array as $k => $v) {\n    $substring = substr($v, 1, -1);\n\
    \    $substring_array = str_split($substring);\n    $substring_chunk_array = [];\n\
    \    $substring_chunk = '';\n    foreach ($substring_array as $char) {\n     \
    \ if ($char == '(') {\n        if (strlen($substring_chunk) > 0) {\n         \
    \ $substring_chunk_array[] = $substring_chunk;\n          $substring_chunk = '';\n\
    \        }\n        $substring_chunk .= $char;\n      } else {\n        $substring_chunk\
    \ .= $char;\n      }\n    }\n    if (strlen($substring_chunk) > 0) {\n      $substring_chunk_array[]\
    \ = $substring_chunk;\n    }\n    $max_levels = 0;\n    foreach ($substring_chunk_array\
    \ as $substring_chunk) {\n      $substring_chunk_levels = strlen($substring_chunk)\
    \ / 2;\n      if ($substring_chunk_levels > $max_levels) {\n        $max_levels\
    \ = $substring_chunk_levels;\n      }\n    }\n    $nested_parens[] = $max_levels;\n\
    \  }\n  return $nested_parens;\n}\n\n$test_input = '() () (() ()) (() (()))';\n\
    echo '<p>Test Input: ' . $test_input . '</p>';\necho '<p>Test Output: ' . implode(',\
    \ ', parse_nested_parens($test_input)) . '</p>';\n\n$test_input = '(()()) ((()))\
    \ () ((())()())';\necho '<p>Test Input: ' . $test_input . '</p>';\necho '<p>Test\
    \ Output: ' . implode(', ', parse_nested_parens($test_input)) . '</\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4kiwsp75.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $level_array = array();\n\
    \    foreach ($paren_array as $group) {\n        $max_level = 0;\n        $cur_level\
    \ = 0;\n        $group_len = strlen($group);\n        for ($i = 0; $i < $group_len;\
    \ $i++) {\n            if ($group[$i] == '(') {\n                $cur_level++;\n\
    \                if ($cur_level > $max_level) {\n                    $max_level\
    \ = $cur_level;\n                }\n            } else if ($group[$i] == ')')\
    \ {\n                $cur_level--;\n            }\n        }\n        array_push($level_array,\
    \ $max_level);\n    }\n    return $level_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $result = array();\n  foreach\
    \ ($paren_array as $group) {\n    $level = 0;\n    $max_level = 0;\n    for ($i\
    \ = 0; $i < strlen($group); $i++) {\n      if ($group[$i] == '(') {\n        $level++;\n\
    \        if ($level > $max_level) {\n          $max_level = $level;\n        }\n\
    \      } else {\n        $level--;\n      }\n    }\n    $result[] = $max_level;\n\
    \  }\n  return $result;\n}\n\n$paren_string = '(()()) ((())) () ((())()())';\n\
    print_r(parse_nested_parens($paren_string));\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    // TODO: Implement me!\n    $result = array();\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $start = 0;\n\
    \    for ($i = 0; $i < strlen($paren_string); $i++){\n        if ( $paren_string[$i]\
    \ == \"(\" ){\n            $count_open++;\n        }\n        else if ( $paren_string[$i]\
    \ == \")\" ){\n            $count_open--;\n        }\n        if ( $count_open\
    \ == 0 ){\n            $result[] = $i - $start + 1;\n            $start = $i +\
    \ 1;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp39np86m0.php:33\n\
    Stack trace:\n#0 /tmp/tmp39np86m0.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp39np86m0.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_arr = explode(' ', $paren_string);\n  $max_nested_arr = [];\n  foreach\
    \ ($paren_arr as $paren) {\n    $paren_arr = str_split($paren);\n    $max_nested\
    \ = 0;\n    $curr_nested = 0;\n    foreach ($paren_arr as $char) {\n      if ($char\
    \ == '(') {\n        $curr_nested++;\n        if ($curr_nested > $max_nested)\
    \ {\n          $max_nested = $curr_nested;\n        }\n      } else {\n      \
    \  $curr_nested--;\n      }\n    }\n    $max_nested_arr[] = $max_nested;\n  }\n\
    \  return $max_nested_arr;\n}\n\n$paren_string = '(()()) ((())) () ((())()())';\n\
    $result = parse_nested_parens($paren_string);\necho implode(' ', $result);\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 2 3 1 3
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $groups = explode(' ', $paren_string);\n    $levels\
    \ = [];\n    foreach ($groups as $group) {\n        $curr_level = 0;\n       \
    \ $max_level = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n       \
    \     if ($group[$i] == '(') {\n                $curr_level++;\n            }\
    \ else {\n                $curr_level--;\n            }\n            $max_level\
    \ = max($max_level, $curr_level);\n        }\n        $levels[] = $max_level;\n\
    \    }\n    return $levels;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level_parens = explode(' ', $paren_string);\n  $level_list = [];\n  foreach\
    \ ($level_parens as $paren) {\n    $level_list[] = count_paren_levels($paren);\n\
    \  }\n  return $level_list;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_paren_levels()\
    \ in /tmp/tmps8pag5y9.php:11\nStack trace:\n#0 /tmp/tmps8pag5y9.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmps8pag5y9.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmps8pag5y9.php(26): test()\n#3 {main}\n  thrown in /tmp/tmps8pag5y9.php\
    \ on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_nesting = array();\n\
    \  foreach ($paren_array as $paren) {\n    $num_parens = strlen($paren);\n   \
    \ $num_groups = 0;\n    $nesting_level = 0;\n    for ($i = 0; $i < $num_parens;\
    \ $i++) {\n      if ($paren[$i] == '(') {\n        $nesting_level++;\n      }\
    \ else {\n        $nesting_level--;\n      }\n      if ($nesting_level == 0) {\n\
    \        $num_groups++;\n      }\n    }\n    $max_nesting[] = $num_groups;\n \
    \ }\n  return $max_nesting;\n}\n\nprint_r(parse_nested_parens('(()()) ((())) ()\
    \ ((())()())'));\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 1\n    [2] => 1\n    [3] => 1\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp7sf16867.php:35\nStack\
    \ trace:\n#0 /tmp/tmp7sf16867.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp7sf16867.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = preg_split('/\\s+/', $paren_string);\n\n    foreach ($paren_groups\
    \ as $group) {\n        $max_depth = 0;\n        $depth = 0;\n        for ($i\
    \ = 0; $i < strlen($group); $i++) {\n            if ($group[$i] == '(') {\n  \
    \              $depth++;\n            } else if ($group[$i] == ')') {\n      \
    \          $depth--;\n            }\n            $max_depth = max($max_depth,\
    \ $depth);\n        }\n        echo $max_depth . \"\\n\";\n    }\n}\n\nparse_nested_parens('(()())\
    \ ((())) () ((())()())');\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2\n3\n1\n3\n2\n3\n1\n3\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp71a69zks.php:31\nStack trace:\n#0 /tmp/tmp71a69zks.php(36): test()\n\
    #1 {main}\n  thrown in /tmp/tmp71a69zks.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_arr = explode(' ', $paren_string);\n    foreach ($paren_arr as\
    \ $p) {\n        if (strlen($p) % 2 == 0) {\n            echo \"invalid parentheses\\\
    n\";\n            return;\n        }\n        if ($p[0] != '(' || $p[strlen($p)\
    \ - 1] != ')') {\n            echo \"invalid parentheses\\n\";\n            return;\n\
    \        }\n    }\n    $result = array();\n    foreach ($paren_arr as $p) {\n\
    \        $stk = array();\n        $level = 0;\n        $max_level = 0;\n     \
    \   for ($i = 0; $i < strlen($p); $i++) {\n            if ($p[$i] == '(') {\n\
    \                array_push($stk, '(');\n                $level++;\n         \
    \       if ($level > $max_level) {\n                    $max_level = $level;\n\
    \                }\n            } else {\n                array_pop($stk);\n \
    \               $level--;\n            }\n        }\n        array_push($result,\
    \ $max_level);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "invalid parentheses\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpdkpzn78c.php:46\nStack trace:\n#0 /tmp/tmpdkpzn78c.php(51): test()\n\
    #1 {main}\n  thrown in /tmp/tmpdkpzn78c.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $matches = array();\n    $levels = array();\n    preg_match_all('/\\\
    (([^()]*)\\)/', $paren_string, $matches);\n    foreach ($matches[1] as $group)\
    \ {\n        $levels[] = count(parse_nested_parens($group));\n    }\n    return\
    \ $levels;\n}\n$paren_string = '(()()) ((())) () ((())()())';\necho \"<pre>\"\
    ;\necho '>>> parse_nested_parens(\\'(()()) ((())) () ((())()())\\')<br>';\nprint_r(parse_nested_parens($paren_string));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>>>> parse_nested_parens('(()()) ((())) () ((())()())')<br>Array\n\
    (\n    [0] => 0\n    [1] => 0\n    [2] => 0\n    [3] => 0\n    [4] => 0\n    [5]\
    \ => 0\n    [6] => 0\n)\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpsmmcewf9.php:26\nStack trace:\n#0 /tmp/tmpsmmcewf9.php(31): test()\n\
    #1 {main}\n  thrown in /tmp/tmpsmmcewf9.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  // Initialize the output variable\n  $results = array();\n  // Split the\
    \ string using a space as delimiter\n  $paren_groups = explode(' ', $paren_string);\n\
    \  // For each of the group\n  foreach ($paren_groups as $group) {\n    // Initialize\
    \ the depth variable and set it to 0\n    $depth = 0;\n    // Initialize the maximum\
    \ depth variable and set it to 0\n    $max_depth = 0;\n    // For each character\
    \ in the group\n    for ($i = 0; $i < strlen($group); $i++) {\n      // Check\
    \ if it is an opening parenthesis\n      if ($group[$i] == '(') {\n        //\
    \ If yes, increase the depth by 1\n        $depth++;\n      }\n      // Check\
    \ if it is a closing parenthesis\n      else if ($group[$i] == ')') {\n      \
    \  // If yes, decrease the depth by 1\n        $depth--;\n      }\n      // Check\
    \ if the depth is greater than the maximum depth\n      if ($depth > $max_depth)\
    \ {\n        // If yes, set the maximum depth to the depth\n        $max_depth\
    \ = $depth;\n      }\n    }\n    // Store the maximum depth for each group into\
    \ the results array\n    $results[] = $max_depth;\n  }\n  // Return the results\
    \ array\n  return $results;\n}\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $nested_parens\
    \ = [];\n    $open_paren_count = 0;\n    $max_paren_count = 0;\n    $current_start_index\
    \ = 0;\n    for ($i = 0; $i < strlen($paren_string); $i++) {\n        $current_paren\
    \ = $paren_string[$i];\n        if ($current_paren == '(') {\n            $open_paren_count++;\n\
    \            if ($open_paren_count > $max_paren_count) {\n                $max_paren_count\
    \ = $open_paren_count;\n            }\n        } else if ($current_paren == ')')\
    \ {\n            $open_paren_count--;\n            if ($open_paren_count == 0)\
    \ {\n                array_push($nested_parens, $max_paren_count);\n         \
    \       $max_paren_count = 0;\n            }\n        }\n    }\n    return $nested_parens;\n\
    }\n\nprint_r(parse_nested_parens('(()()) ((())) () ((())()())'));\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_levels = [];\n    $current_level = 0;\n    $chars = str_split($paren_string);\n\
    \    foreach ($chars as $char) {\n        if ($char == '(') {\n            $current_level++;\n\
    \        } elseif ($char == ')') {\n            $current_level--;\n        } elseif\
    \ ($char == ' ') {\n            $paren_levels[] = $current_level;\n          \
    \  $current_level = 0;\n        }\n    }\n    if ($current_level > 0) {\n    \
    \    $paren_levels[] = $current_level;\n    }\n    return $paren_levels;\n}\n\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnc8u364q.php:32\n\
    Stack trace:\n#0 /tmp/tmpnc8u364q.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpnc8u364q.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = preg_replace('/[^()]/', '', $paren_string);\n    // First\
    \ sanitize the string, and remove non-parentheses characters\n    $paren_string\
    \ = str_replace(')', ' )', $paren_string);\n    // Add spaces before close parentheses\n\
    \n    $paren_string = str_replace('(', ' ( ', $paren_string);\n    // Add spaces\
    \ after open parentheses\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    // Remove excessive spaces\n    $paren_string = trim($paren_string);\n  \
    \  // Remove white spaces at beginning and end of string\n    $paren_string =\
    \ explode(' ', $paren_string);\n    // Convert the string to array on spaces\n\
    \n    $nesting_levels = array();\n    // Initiate a new array to hold nesting\
    \ levels for each group\n\n    $level = 0;\n    // Initiate the deepest level\
    \ of nesting to zero\n    $stack = array();\n    // Initiate a stack array to\
    \ store one element at a time\n    $paren_string = array_filter($paren_string);\n\
    \    // Remove empty elements from array\n\n    foreach ($paren_string as $paren)\
    \ {\n        if ($paren == '(') {\n            $level++;\n            array_push($stack,\
    \ $paren);\n        } elseif ($paren == ')') {\n            array_pop($stack);\n\
    \            $nesting_levels[] = $level;\n            $level--;\n        }\n \
    \   }\n    return $nesting_levels;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpndugy3z6.php:50\n\
    Stack trace:\n#0 /tmp/tmpndugy3z6.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpndugy3z6.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $split_paren_array = explode(' ', $paren_string);\n    $max_nested_paren_array\
    \ = array();\n    foreach ($split_paren_array as $paren_value) {\n        // remove\
    \ left and right parentheses.\n        $paren_value = substr($paren_value, 1,\
    \ -1);\n        $nested_paren = 0;\n        $max_nested_paren = 0;\n        foreach\
    \ (str_split($paren_value) as $char) {\n            if ($char == '(') {\n    \
    \            $nested_paren++;\n            } else {\n                $nested_paren--;\n\
    \            }\n            $max_nested_paren = max($max_nested_paren, $nested_paren);\n\
    \        }\n        $max_nested_paren_array[] = $max_nested_paren;\n    }\n  \
    \  return $max_nested_paren_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsft9ssfi.php:33\n\
    Stack trace:\n#0 /tmp/tmpsft9ssfi.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpsft9ssfi.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $output = [];\n  $parentheses = preg_split('/ /', $paren_string);\n  foreach\
    \ ($parentheses as $paren) {\n    $output[] = get_nesting_level($paren);\n  }\n\
    \  return $output;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_nesting_level()\
    \ in /tmp/tmpv82hyorp.php:11\nStack trace:\n#0 /tmp/tmpv82hyorp.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpv82hyorp.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpv82hyorp.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpv82hyorp.php\
    \ on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $result = [];\n    $paren_groups = explode(' ', $paren_string);\n   \
    \ foreach ($paren_groups as $group) {\n        $left_paren_count = 0;\n      \
    \  $right_paren_count = 0;\n        $count = 0;\n        $paren_str = str_split($group);\n\
    \        foreach ($paren_str as $char) {\n            if ($char == '(') {\n  \
    \              $left_paren_count++;\n                $count++;\n            }\
    \ else if ($char == ')') {\n                $right_paren_count++;\n          \
    \      $count--;\n            }\n            if ($count == 0) {\n            \
    \    $result[] = $left_paren_count;\n                $left_paren_count = 0;\n\
    \                $right_paren_count = 0;\n            }\n        }\n    }\n  \
    \  return $result;\n}\n\necho implode(', ', parse_nested_parens('(()()) ((()))\
    \ () ((())()())'));\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "3, 3, 1, 5\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzzouanq1.php:39\n\
    Stack trace:\n#0 /tmp/tmpzzouanq1.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpzzouanq1.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    // TODO: Implement this.\n    $arr_paren = explode(' ', $paren_string);\n\
    \    $levels = [];\n    foreach ($arr_paren as $par) {\n        $level = 0;\n\
    \        $max_level = 0;\n        for ($i = 0; $i < strlen($par); $i++) {\n  \
    \          if ($par[$i] == '(') {\n                $level++;\n               \
    \ if ($level > $max_level) {\n                    $max_level = $level;\n     \
    \           }\n            } else {\n                $level--;\n            }\n\
    \        }\n        $levels[] = $max_level;\n    }\n    return $levels;\n}\n\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  // parse pairs of parens and return the max nesting depths of each pair\n\
    \  $output = array();\n  $paren_array = preg_split('/[\\s]+/', $paren_string);\n\
    \  foreach ($paren_array as $paren_group) {\n    $depth = 0;\n    $max_depth =\
    \ 0;\n    for ($i = 0; $i < strlen($paren_group); $i++) {\n      if ($paren_group[$i]\
    \ == '(') {\n        $depth++;\n        if ($depth > $max_depth) {\n         \
    \ $max_depth = $depth;\n        }\n      } elseif ($paren_group[$i] == ')') {\n\
    \        $depth--;\n      }\n    }\n    $output[] = $max_depth;\n  }\n  return\
    \ $output;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $parsed_string = explode(' ', $paren_string);\n    $result = [];\n  \
    \  foreach ($parsed_string as $x) {\n        $result[] = compute($x);\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function compute() in\
    \ /tmp/tmptscbs8jh.php:11\nStack trace:\n#0 /tmp/tmptscbs8jh.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmptscbs8jh.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmptscbs8jh.php(26): test()\n#3 {main}\n  thrown in /tmp/tmptscbs8jh.php\
    \ on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_groups = explode(' ', $paren_string);\n  $paren_levels = [];\n \
    \ foreach ($paren_groups as $group) {\n    $stack = [];\n    $group_length = strlen($group);\n\
    \    $max_level = 0;\n    for ($i = 0; $i < $group_length; $i++) {\n      $char\
    \ = $group[$i];\n      if ($char == '(') {\n        $stack[] = $char;\n      \
    \  $max_level = max($max_level, count($stack));\n      } else {\n        array_pop($stack);\n\
    \      }\n    }\n    $paren_levels[] = $max_level;\n  }\n  return $paren_levels;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $nesting_levels = [];\n  $max_level = 0;\n  $paren_stack = [];\n  $paren_array\
    \ = str_split($paren_string);\n  foreach ($paren_array as $char) {\n    if ($char\
    \ == '(') {\n      array_push($paren_stack, '(');\n      $max_level++;\n    }\
    \ elseif ($char == ')') {\n      array_pop($paren_stack);\n      if (empty($paren_stack))\
    \ {\n        array_push($nesting_levels, $max_level);\n        $max_level = 0;\n\
    \      }\n    }\n  }\n  return $nesting_levels;\n}\n\nvar_dump(parse_nested_parens('(()())\
    \ ((())) () ((())()())'));\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(4) {\n  [0]=>\n  int(3)\n  [1]=>\n  int(3)\n  [2]=>\n  int(1)\n \
    \ [3]=>\n  int(5)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprayxhjp7.php:33\n\
    Stack trace:\n#0 /tmp/tmprayxhjp7.php(38): test()\n#1 {main}\n  thrown in /tmp/tmprayxhjp7.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_arr = explode(' ', $paren_string);\n  $levels = [];\n  for ($i =\
    \ 0; $i < count($paren_arr); $i++) {\n    $group = $paren_arr[$i];\n    $levels[]\
    \ = strlen($group) / 2;\n  }\n  return $levels;\n}\n\nparse_nested_parens('(()())\
    \ ((())) () ((())()())');\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpirkarash.php:24\n\
    Stack trace:\n#0 /tmp/tmpirkarash.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpirkarash.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $result = [];\n    $paren_groups = explode(' ', $paren_string);\n   \
    \ foreach ($paren_groups as $group) {\n        $left_parens = array_filter(str_split($group),\
    \ function($char) {\n            return $char === '(';\n        });\n        $result[]\
    \ = count($left_parens);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ns5zh4w.php:24\n\
    Stack trace:\n#0 /tmp/tmp7ns5zh4w.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp7ns5zh4w.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $counts = [];\n    $current_count = 0;\n    $paren_string = trim($paren_string);\n\
    \    $paren_string_len = strlen($paren_string);\n    if ($paren_string_len ==\
    \ 0) return [];\n    for ($i = 0; $i < $paren_string_len; $i++) {\n        $char\
    \ = $paren_string[$i];\n        if ($char == '(') {\n            $current_count++;\n\
    \        } else if ($char == ')') {\n            $current_count--;\n        }\
    \ else if ($char == ' ') {\n            array_push($counts, $current_count);\n\
    \            $current_count = 0;\n        }\n    }\n    array_push($counts, $current_count);\n\
    \    return $counts;\n}\n\n$paren_string = '(()()) ((())) () ((())()())';\n$output\
    \ = parse_nested_parens($paren_string);\nvar_dump($output);\n\n$paren_string =\
    \ '(()(()()(())))';\n$output = parse_nested_parens($paren_string);\nvar_dump($output);\n\
    \n$paren_string = '(()';\n$output = parse_nested_parens($paren_string);\nvar_dump($output);\n\
    \n$paren_string = '()';\n$output = parse_nested_parens($paren_string);\nvar_dump($output);\n\
    \n$paren_string = '()()()';\n$output = parse_nested_parens($paren_string);\nvar_dump($output);\n\
    \n$paren_string = '((()))';\n$output = parse_nested_parens($paren_string);\nvar_dump($output);\n\
    \n$paren_string = '';\n$output = parse_nested_parens($paren_string);\nvar_dump($output);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(4) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(0)\n  [2]=>\n  int(0)\n \
    \ [3]=>\n  int(0)\n}\narray(1) {\n  [0]=>\n  int(0)\n}\narray(1) {\n  [0]=>\n\
    \  int(1)\n}\narray(1) {\n  [0]=>\n  int(0)\n}\narray(1) {\n  [0]=>\n  int(0)\n\
    }\narray(1) {\n  [0]=>\n  int(0)\n}\narray(0) {\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp1sxrdrz4.php:60\nStack trace:\n#0 /tmp/tmp1sxrdrz4.php(65):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1sxrdrz4.php on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $result = [];\n   \
    \ foreach ($paren_groups as $group) {\n        $result[] = find_max_nesting($group);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function find_max_nesting()\
    \ in /tmp/tmpzanwv3it.php:11\nStack trace:\n#0 /tmp/tmpzanwv3it.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpzanwv3it.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpzanwv3it.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpzanwv3it.php\
    \ on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    // Remove parentheses from $paren_string and store in $paren_arr.\n \
    \   $paren_arr = preg_split('/\\s+/', $paren_string);\n    $max_array = array();\n\
    \    foreach ($paren_arr as $paren_group) {\n        $max_array[] = parse_max_nested_parens($paren_group);\n\
    \    }\n    return $max_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_max_nested_parens()\
    \ in /tmp/tmpq_nbh3hh.php:12\nStack trace:\n#0 /tmp/tmpq_nbh3hh.php(18): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpq_nbh3hh.php(22): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpq_nbh3hh.php(27): test()\n#3 {main}\n  thrown in /tmp/tmpq_nbh3hh.php\
    \ on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    // TODO: implement parse_nested_parens function\n    $paren_string =\
    \ str_replace(\" \", \"\", $paren_string);\n    $length = strlen($paren_string);\n\
    \    $count = 0;\n    $max = 0;\n    $open = 0;\n    $close = 0;\n    for ($i\
    \ = 0; $i < $length; $i++) {\n        if ($paren_string[$i] == \"(\") {\n    \
    \        $open++;\n            $count++;\n            if ($count > $max) {\n \
    \               $max = $count;\n            }\n        } else {\n            $close++;\n\
    \            $count--;\n        }\n    }\n    if ($open != $close) {\n       \
    \ return 0;\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n  \
    \  return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt5o40t7x.php:38\n\
    Stack trace:\n#0 /tmp/tmpt5o40t7x.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpt5o40t7x.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    // Write code here...\n    $paren_array = explode(' ', $paren_string);\n\
    \    $levels = [];\n    foreach ($paren_array as $paren_group) {\n        $level\
    \ = 0;\n        $max_level = 0;\n        foreach (str_split($paren_group) as $char)\
    \ {\n            if ($char == '(') {\n                $level++;\n            }\
    \ elseif ($char == ')') {\n                $level--;\n            }\n        \
    \    if ($level > $max_level) {\n                $max_level = $level;\n      \
    \      }\n        }\n        $levels[] = $max_level;\n    }\n    return $levels;\n\
    }\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $return_array = array();\n\
    \  foreach ($paren_array as $paren_set) {\n    $level = 0;\n    $max_level = 0;\n\
    \    for ($i = 0; $i < strlen($paren_set); $i++) {\n      if ($paren_set[$i] ==\
    \ '(') {\n        $level++;\n        if ($level > $max_level) {\n          $max_level\
    \ = $level;\n        }\n      } else if ($paren_set[$i] == ')') {\n        $level--;\n\
    \      }\n    }\n    $return_array[] = $max_level;\n  }\n  return $return_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $max_nesting = 0;\n    $stack = array();\n    $res = array();\n    $paren_string\
    \ = str_split($paren_string);\n    foreach ($paren_string as $char) {\n      \
    \  if ($char === '(') {\n            $stack[] = $char;\n            $max_nesting++;\n\
    \        } elseif ($char === ')') {\n            if (count($stack) === 0) {\n\
    \                throw new Exception('Unbalanced parens.');\n            }\n \
    \           array_pop($stack);\n            if (count($stack) === 0) {\n     \
    \           $res[] = $max_nesting;\n                $max_nesting = 0;\n      \
    \      }\n        } elseif ($char === ' ') {\n            if (count($stack) ===\
    \ 0) {\n                $res[] = $max_nesting;\n                $max_nesting =\
    \ 0;\n            }\n        } else {\n            throw new Exception('Unexpected\
    \ char in the input.');\n        }\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7j9dr7d.php:42\n\
    Stack trace:\n#0 /tmp/tmpp7j9dr7d.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpp7j9dr7d.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $ret = array();\n    foreach (explode(' ', $paren_string) as $paren_groups)\
    \ {\n        $current_nesting = 0;\n        $max_nesting = 0;\n        for ($i\
    \ = 0; $i < strlen($paren_groups); $i++) {\n            $ch = $paren_groups[$i];\n\
    \            if ($ch == '(') {\n                $current_nesting++;\n        \
    \    } else if ($ch == ')') {\n                $current_nesting--;\n         \
    \   }\n            $max_nesting = max($max_nesting, $current_nesting);\n     \
    \   }\n        $ret[] = $max_nesting;\n    }\n    return $ret;\n}\nprint_r(parse_nested_parens('(()())\
    \ ((())) () ((())()())'));\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $max_nest = [];\n    $paren_array = explode(' ', $paren_string);\n  \
    \  foreach ($paren_array as $paren_group) {\n        $nest_level = 0;\n      \
    \  $max_nest_level = 0;\n        $len = strlen($paren_group);\n        for ($i\
    \ = 0; $i < $len; $i++) {\n            if ($paren_group[$i] == '(') {\n      \
    \          $nest_level++;\n                if ($nest_level > $max_nest_level)\
    \ {\n                    $max_nest_level = $nest_level;\n                }\n \
    \           } elseif ($paren_group[$i] == ')') {\n                $nest_level--;\n\
    \            }\n        }\n        $max_nest[] = $max_nest_level;\n    }\n   \
    \ return $max_nest;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = str_split($paren_string);\n  $group_depth = array();\n \
    \ $current_depth = 0;\n  $current_group = '';\n  foreach ($paren_array as $paren)\
    \ {\n    if ($paren == '(') {\n      $current_depth++;\n    } elseif ($paren ==\
    \ ')') {\n      $current_depth--;\n    } elseif ($paren == ' ') {\n      $group_depth[]\
    \ = $current_depth;\n      $current_depth = 0;\n    }\n  }\n  $group_depth[] =\
    \ $current_depth;\n  return $group_depth;\n}\necho implode(' ', parse_nested_parens('(()())\
    \ ((())) () ((())()())'));\necho '<br/>';\necho implode(' ', parse_nested_parens('((()))'));\n\
    echo '<br/>';\necho implode(' ', parse_nested_parens('()'));\necho '<br/>';\n\
    echo implode(' ', parse_nested_parens('((())()) ((())())'));\necho '<br/>';\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0 0 0 0<br/>0<br/>0<br/>0 0<br/>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmps0ty8shb.php:38\nStack trace:\n#0 /tmp/tmps0ty8shb.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmps0ty8shb.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $group_string = explode(' ', $paren_string);\n    $length = count($group_string);\n\
    \    $paren_count = array();\n    for ($i = 0; $i < $length; $i++) {\n       \
    \ $paren_count[$i] = 0;\n        $next_paren = strpos($group_string[$i], '(');\n\
    \        while ($next_paren !== false) {\n            $next_paren = strpos($group_string[$i],\
    \ '(', $next_paren + 1);\n            $paren_count[$i] += 1;\n        }\n    }\n\
    \    return $paren_count;\n}\n\necho var_dump(parse_nested_parens('(()()) ((()))\
    \ () ((())()())'));\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(4) {\n  [0]=>\n  int(3)\n  [1]=>\n  int(3)\n  [2]=>\n  int(1)\n \
    \ [3]=>\n  int(5)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpti0d_ud2.php:28\n\
    Stack trace:\n#0 /tmp/tmpti0d_ud2.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpti0d_ud2.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $paren_levels = [];\n\
    \    foreach ($paren_groups as $group) {\n        $stack = [];\n        $current_level\
    \ = 0;\n        $max_level = 0;\n        $current_stack_length = 0;\n        for\
    \ ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i] == '(') {\n\
    \                array_push($stack, '(');\n                $current_level += 1;\n\
    \                $current_stack_length += 1;\n                if ($current_level\
    \ > $max_level) {\n                    $max_level = $current_level;\n        \
    \        }\n            } elseif ($group[$i] == ')') {\n                array_pop($stack);\n\
    \                $current_level -= 1;\n                $current_stack_length -=\
    \ 1;\n            }\n        }\n        if ($current_stack_length != 0) {\n  \
    \          $max_level = 0;\n        }\n        array_push($paren_levels, $max_level);\n\
    \    }\n    return $paren_levels;\n}\n\n$input_string = '(()()) ((())) () ((())()())';\n\
    $paren_levels = parse_nested_parens($input_string);\nprint_r($paren_levels);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $stack = array();\n    $result = array();\n    $levels = array();\n \
    \   foreach (str_split($paren_string) as $v) {\n        if ($v == '(') {\n   \
    \         array_push($stack, $v);\n            array_push($levels, count($stack));\n\
    \        } elseif ($v == ')') {\n            array_pop($stack);\n            array_push($result,\
    \ array_pop($levels));\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps4e62dlr.php:27\n\
    Stack trace:\n#0 /tmp/tmps4e62dlr.php(32): test()\n#1 {main}\n  thrown in /tmp/tmps4e62dlr.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_levels = [];\n    $paren_level = 0;\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        if ($paren_string[$i] == '(') {\n            $paren_level++;\n\
    \        } else if ($paren_string[$i] == ')') {\n            $paren_level--;\n\
    \        } else if ($paren_string[$i] == ' ') {\n            $paren_levels[] =\
    \ $paren_level;\n            $paren_level = 0;\n        }\n    }\n    $paren_levels[]\
    \ = $paren_level;\n    return $paren_levels;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn6jsnbll.php:29\n\
    Stack trace:\n#0 /tmp/tmpn6jsnbll.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpn6jsnbll.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_arr = str_split($paren_string);\n    $max_depth = 0;\n    $depth\
    \ = 0;\n    $results = [];\n    foreach ($paren_arr as $char) {\n        if ($char\
    \ == '(') {\n            $depth++;\n            if ($depth > $max_depth) {\n \
    \               $max_depth = $depth;\n            }\n        } elseif ($char ==\
    \ ')') {\n            $depth--;\n        } elseif ($char == ' ') {\n         \
    \   array_push($results, $max_depth);\n            $max_depth = 0;\n         \
    \   $depth = 0;\n        }\n    }\n    array_push($results, $max_depth);\n   \
    \ return $results;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        array_push($result, count_nested_parens($paren));\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_nested_parens()\
    \ in /tmp/tmp88240t3s.php:11\nStack trace:\n#0 /tmp/tmp88240t3s.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmp88240t3s.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmp88240t3s.php(26): test()\n#3 {main}\n  thrown in /tmp/tmp88240t3s.php\
    \ on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $pattern = '/\\(\\(/';\n    $results = [];\n    $matches = [];\n    $start_idx\
    \ = 0;\n    while (preg_match($pattern, $paren_string, $matches, PREG_OFFSET_CAPTURE,\
    \ $start_idx)) {\n        $match = $matches[0];\n        $paren_stack = [0 =>\
    \ 1];\n        $max_depth = 0;\n        $i = $match[1] + 2;\n        while ($i\
    \ < strlen($paren_string)) {\n            $char = $paren_string[$i];\n       \
    \     if ($char === '(') {\n                $paren_stack[] = $paren_stack[count($paren_stack)\
    \ - 1] + 1;\n            } else if ($char === ')') {\n                array_pop($paren_stack);\n\
    \            } else {\n                $start_idx = $i;\n                break;\n\
    \            }\n            $max_depth = max($max_depth, end($paren_stack));\n\
    \            $i++;\n        }\n        $results[] = $max_depth;\n    }\n    return\
    \ $results;\n}\n\necho json_encode(parse_nested_parens('(()()) ((())) () ((())()())'))\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpmrpy8fve.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  // Your code here\n  $paren_groups = explode(' ', $paren_string);\n  $nesting_count\
    \ = [];\n  foreach ($paren_groups as $group) {\n    $count = 0;\n    $max_count\
    \ = 0;\n    for ($i = 0; $i < strlen($group); $i++) {\n      if ($group[$i] ==\
    \ '(') {\n        $count++;\n      } else {\n        $count--;\n      }\n    \
    \  if ($count > $max_count) {\n        $max_count = $count;\n      }\n    }\n\
    \    $nesting_count[] = $max_count;\n  }\n  return $nesting_count;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_levels = [];\n  $current_level = 0;\n  $paren_group = explode('\
    \ ', $paren_string);\n  foreach ($paren_group as $group) {\n    $current_level\
    \ = 0;\n    $paren_level = 0;\n    $group_len = strlen($group);\n    for ($i =\
    \ 0; $i < $group_len; $i++) {\n      if ($group[$i] == '(') {\n        $current_level++;\n\
    \        if ($current_level > $paren_level) {\n          $paren_level = $current_level;\n\
    \        }\n      } else {\n        $current_level--;\n      }\n    }\n    $paren_levels[]\
    \ = $paren_level;\n  }\n  return $paren_levels;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_groups = explode(' ', $paren_string);\n  $max_nesting = [];\n  foreach\
    \ ($paren_groups as $group) {\n    $nesting = 0;\n    $max_nesting_this_group\
    \ = 0;\n    foreach (str_split($group) as $char) {\n      if ($char == '(') {\n\
    \        $nesting++;\n      } elseif ($char == ')') {\n        $nesting--;\n \
    \     }\n      $max_nesting_this_group = max($max_nesting_this_group, $nesting);\n\
    \    }\n    $max_nesting[] = $max_nesting_this_group;\n  }\n  return $max_nesting;\n\
    }\necho join(' ', parse_nested_parens('(()()) ((())) () ((())()())'));\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2 3 1 3\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $arr = explode(' ', $paren_string);\n  $nested_depth = [];\n  foreach ($arr\
    \ as $item) {\n    $current_depth = 0;\n    $max_depth = 0;\n    for ($i = 0;\
    \ $i < strlen($item); $i++) {\n      if ($item[$i] == '(') {\n        $current_depth++;\n\
    \        if ($current_depth > $max_depth) {\n          $max_depth = $current_depth;\n\
    \        }\n      } else {\n        $current_depth--;\n      }\n    }\n    $nested_depth[]\
    \ = $max_depth;\n  }\n  return $nested_depth;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    // TODO: implement\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdju2s0vs.php:16\n\
    Stack trace:\n#0 /tmp/tmpdju2s0vs.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdju2s0vs.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $result = [];\n    $groups = explode(' ', $paren_string);\n    $n = count($groups);\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $max_level = 0;\n        $level =\
    \ 0;\n        $chars = str_split($groups[$i]);\n        $num_chars = count($chars);\n\
    \        for ($j = 0; $j < $num_chars; $j++) {\n            if ($chars[$j] ==\
    \ '(') {\n                $level++;\n                if ($level > $max_level)\
    \ {\n                    $max_level = $level;\n                }\n           \
    \ } else if ($chars[$j] == ')') {\n                $level--;\n            }\n\
    \        }\n        $result[] = $max_level;\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = preg_replace('/\
    \ +/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\( /', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/ \\)/', ')', $paren_string);\n  $result = array();\n\
    \  foreach (explode(' ', $paren_string) as $paren_block) {\n    $level = 0;\n\
    \    $max_level = 0;\n    foreach (str_split($paren_block) as $char) {\n     \
    \ if ($char == '(') {\n        $level++;\n      } else if ($char == ')') {\n \
    \       $level--;\n      }\n      if ($level > $max_level) {\n        $max_level\
    \ = $level;\n      }\n    }\n    $result[] = $max_level;\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    // Create a new array to store the results\n    $results = array();\n\
    \    // First remove all whitespace in the string\n    $paren_string = preg_replace('/\\\
    s+/', '', $paren_string);\n    // Split the array by open parens\n    $paren_groups\
    \ = explode('(', $paren_string);\n    // Initialize the max_depth to 0\n    $max_depth\
    \ = 0;\n    // Now for each of the item in the array, do the following\n    foreach\
    \ ($paren_groups as $group) {\n        // Split the string by the close parens\
    \ and check the length of the array\n        $paren_depth = count(explode(')',\
    \ $group));\n        // If the length of the array is more than the current max_depth,\
    \ update the max_depth\n        if ($paren_depth > $max_depth) {\n           \
    \ $max_depth = $paren_depth;\n        }\n        // Push the max_depth to the\
    \ result array\n        array_push($results, $max_depth);\n    }\n    // Return\
    \ the result array\n    return $results;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwohse1ip.php:36\n\
    Stack trace:\n#0 /tmp/tmpwohse1ip.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpwohse1ip.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  // convert $paren_string to a list of character\n  $char_list = str_split($paren_string);\n\
    \  // count of opened parens\n  $count = 0;\n  // array to hold level of parens\n\
    \  $count_arr = [];\n  // iterate through each character\n  foreach ($char_list\
    \ as $char) {\n    // if the char is a left parens, increment count\n    if ($char\
    \ === '(') {\n      $count++;\n    }\n    // if the char is a right parens, and\
    \ count is not 0, decrement count\n    else if ($char === ')' && $count !== 0)\
    \ {\n      $count--;\n    }\n    // if the char is a right parens, and count is\
    \ 0, add 0 to the array\n    else if ($char === ')' && $count === 0) {\n     \
    \ array_push($count_arr, 0);\n    }\n    // if the char is a space, and count\
    \ is not 0, add count to the array and reset count to 0\n    else if ($char ===\
    \ ' ' && $count !== 0) {\n      array_push($count_arr, $count);\n      $count\
    \ = 0;\n    }\n  }\n  // return the array\n  return $count_arr;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr2j28l70.php:42\n\
    Stack trace:\n#0 /tmp/tmpr2j28l70.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpr2j28l70.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $deepest_level = [];\n  $nested_paren_group = preg_split('/ /', $paren_string);\n\
    \  for ($i = 0; $i < count($nested_paren_group); $i++) {\n    $group = $nested_paren_group[$i];\n\
    \    $level = 0;\n    $deepest_group_level = 0;\n    for ($j = 0; $j < strlen($group);\
    \ $j++) {\n      if ($group[$j] == '(') {\n        $level++;\n        if ($level\
    \ > $deepest_group_level) {\n          $deepest_group_level = $level;\n      \
    \  }\n      } else {\n        $level--;\n      }\n    }\n    $deepest_level[]\
    \ = $deepest_group_level;\n  }\n  return $deepest_level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_list = explode(' ', $paren_string);\n  $nested_counts = [];\n  foreach\
    \ ($paren_list as $paren) {\n    $nested_counts[] = count_nested_parens($paren);\n\
    \  }\n  return $nested_counts;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_nested_parens()\
    \ in /tmp/tmptvtf30oa.php:11\nStack trace:\n#0 /tmp/tmptvtf30oa.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmptvtf30oa.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmptvtf30oa.php(26): test()\n#3 {main}\n  thrown in /tmp/tmptvtf30oa.php\
    \ on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $outer_parens = array();\n    $paren_stack = array();\n    $paren_string\
    \ = str_split($paren_string);\n    $is_outer_paren = true;\n    foreach ($paren_string\
    \ as $curr_paren) {\n        if ($curr_paren == '(') {\n            if ($is_outer_paren)\
    \ {\n                $is_outer_paren = false;\n                $outer_parens[]\
    \ = array();\n            }\n            $paren_stack[] = '(';\n        } elseif\
    \ ($curr_paren == ')') {\n            array_pop($paren_stack);\n            if\
    \ (empty($paren_stack)) {\n                $is_outer_paren = true;\n         \
    \   }\n        } elseif ($curr_paren == ' ') {\n            if ($is_outer_paren)\
    \ {\n                // Do nothing.\n            } else {\n                $outer_parens[count($outer_parens)\
    \ - 1][] = count($paren_stack);\n            }\n        }\n    }\n    $max_depth\
    \ = array();\n    foreach ($outer_parens as $curr_outer_paren) {\n        $max_depth[]\
    \ = max($curr_outer_paren);\n    }\n    return $max_depth;\n}\n\nvar_dump(parse_nested_parens('(()())\
    \ ((())) () ((())()())'));\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: max(): Array must contain at least one element in /tmp/tmpmno1_sa0.php\
    \ on line 34\n\nWarning: max(): Array must contain at least one element in /tmp/tmpmno1_sa0.php\
    \ on line 34\n\nWarning: max(): Array must contain at least one element in /tmp/tmpmno1_sa0.php\
    \ on line 34\n\nWarning: max(): Array must contain at least one element in /tmp/tmpmno1_sa0.php\
    \ on line 34\narray(4) {\n  [0]=>\n  bool(false)\n  [1]=>\n  bool(false)\n  [2]=>\n\
    \  bool(false)\n  [3]=>\n  bool(false)\n}\n\nWarning: max(): Array must contain\
    \ at least one element in /tmp/tmpmno1_sa0.php on line 34\n\nWarning: max(): Array\
    \ must contain at least one element in /tmp/tmpmno1_sa0.php on line 34\n\nWarning:\
    \ max(): Array must contain at least one element in /tmp/tmpmno1_sa0.php on line\
    \ 34\n\nWarning: max(): Array must contain at least one element in /tmp/tmpmno1_sa0.php\
    \ on line 34\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmno1_sa0.php:46\n\
    Stack trace:\n#0 /tmp/tmpmno1_sa0.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpmno1_sa0.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_arr = explode(' ', $paren_string);\n  $result = [];\n  foreach ($paren_arr\
    \ as $key => $value) {\n    $result[] = strrpos($value, '(') - strpos($value,\
    \ ')');\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmyei0ah_.php:21\n\
    Stack trace:\n#0 /tmp/tmpmyei0ah_.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpmyei0ah_.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $max_levels = array();\n    $match_paren = array(\n        '(' => ')',\n\
    \        ')' => '('\n    );\n    $groups = explode(' ', $paren_string);\n    foreach\
    \ ($groups as $group) {\n        $stack = array();\n        $max_level = 0;\n\
    \        $len = strlen($group);\n        for ($i = 0; $i < $len; $i++) {\n   \
    \         $char = $group[$i];\n            if ($char == '(') {\n             \
    \   $stack[] = '(';\n                $max_level = max($max_level, count($stack));\n\
    \            } else if ($char == ')') {\n                $top = array_pop($stack);\n\
    \                if ($top !== '(') {\n                    $max_level = -1;\n \
    \                   break;\n                }\n            }\n        }\n    \
    \    if (count($stack) != 0) {\n            $max_level = -1;\n        }\n    \
    \    $max_levels[] = $max_level;\n    }\n    return $max_levels;\n}\n$paren_string\
    \ = '(()()) ((())) () ((())()())';\necho json_encode(parse_nested_parens($paren_string));\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '[2,3,1,3]'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_array = explode(' ', $paren_string);\n\
    \  $return_array = array();\n  foreach ($paren_array as $paren_str) {\n    $return_array[]\
    \ = _parse_nested_parens($paren_str);\n  }\n  return $return_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function _parse_nested_parens()\
    \ in /tmp/tmpq4pwr_ry.php:12\nStack trace:\n#0 /tmp/tmpq4pwr_ry.php(18): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpq4pwr_ry.php(22): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpq4pwr_ry.php(27): test()\n#3 {main}\n  thrown in /tmp/tmpq4pwr_ry.php\
    \ on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $result = [];\n    $paren_strings = explode(' ', $paren_string);\n  \
    \  foreach ($paren_strings as $paren_str) {\n        $curr_level = 0;\n      \
    \  $max_level = 0;\n        for ($i = 0; $i < strlen($paren_str); $i++) {\n  \
    \          if ($paren_str[$i] == '(') {\n                $curr_level++;\n    \
    \            if ($curr_level > $max_level) {\n                    $max_level =\
    \ $curr_level;\n                }\n            } else {\n                $curr_level--;\n\
    \            }\n        }\n        $result[] = $max_level;\n    }\n    return\
    \ $result;\n}\n\nprint_r(parse_nested_parens('(()()) ((())) () ((())()())'));\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $groups = explode(' ', $paren_string);\n    $nesting_level = array();\n\
    \    foreach ($groups as $group) {\n        $nesting_level[] = parse_nested_parens_substr($group);\n\
    \    }\n    return $nesting_level;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_parens_substr()\
    \ in /tmp/tmp9b_xnu2r.php:11\nStack trace:\n#0 /tmp/tmp9b_xnu2r.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmp9b_xnu2r.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmp9b_xnu2r.php(26): test()\n#3 {main}\n  thrown in /tmp/tmp9b_xnu2r.php\
    \ on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $groups = explode(' ', $paren_string);\n  $paren_counts = [];\n  foreach\
    \ ($groups as $group) {\n    $count = 0;\n    $max_count = 0;\n    for ($i = 0;\
    \ $i < strlen($group); $i++) {\n      if ($group[$i] == '(') {\n        $count++;\n\
    \      } else {\n        $count--;\n      }\n      $max_count = max($max_count,\
    \ $count);\n    }\n    $paren_counts[] = $max_count;\n  }\n  return $paren_counts;\n\
    }\n\n$paren_string = '(()()) ((())) () ((())()())';\nprint_r(parse_nested_parens($paren_string));\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $result = [];\n    $paren_groups = explode(' ', $paren_string);\n   \
    \ foreach ($paren_groups as $group) {\n        $current_level = 0;\n        $max_level\
    \ = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i]\
    \ == '(') {\n                $current_level++;\n                if ($current_level\
    \ > $max_level) {\n                    $max_level = $current_level;\n        \
    \        }\n            } else if ($group[$i] == ')') {\n                $current_level--;\n\
    \            }\n        }\n        $result[] = $max_level;\n    }\n    return\
    \ $result;\n}\necho \">>>>> parse_nested_parens('(()()) ((())) () ((())()())')\"\
    \ . PHP_EOL;\nvar_dump(parse_nested_parens('(()()) ((())) () ((())()())'));\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ">>>>> parse_nested_parens('(()()) ((())) () ((())()())')\narray(4) {\n\
    \  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n  int(1)\n  [3]=>\n  int(3)\n\
    }\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_levels = array();\n\
    \    foreach ($paren_array as $paren) {\n        $paren_length = strlen($paren);\n\
    \        $total_open = 0;\n        $total_close = 0;\n        $max_open = 0;\n\
    \        for ($i = 0; $i < $paren_length; $i++) {\n            if ($paren[$i]\
    \ == '(') {\n                $total_open++;\n                if ($total_open >\
    \ $max_open) {\n                    $max_open = $total_open;\n               \
    \ }\n            } else {\n                $total_close++;\n            }\n  \
    \      }\n        $max_levels[] = $max_open - $total_close;\n    }\n    return\
    \ $max_levels;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoqyv970j.php:35\n\
    Stack trace:\n#0 /tmp/tmpoqyv970j.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpoqyv970j.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_group = explode(' ', $paren_string);\n    foreach ($paren_group\
    \ as $group) {\n        // Start with level=0 and increase by 1 for every pair\
    \ of opening and closing parenthesis.\n        $level = 0;\n        $max_level\
    \ = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i]\
    \ == '(') {\n                $level++;\n            } else if ($group[$i] == ')')\
    \ {\n                $level--;\n            }\n            if ($level > $max_level)\
    \ {\n                $max_level = $level;\n            }\n        }\n        echo\
    \ $max_level, ' ';\n    }\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2 3 1 3 \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc2rny739.php:32\n\
    Stack trace:\n#0 /tmp/tmpc2rny739.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpc2rny739.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $result = [];\n  $paren_string = str_replace(' ', '', $paren_string);\n\
    \  $str_len = strlen($paren_string);\n  for ($i = 0; $i < $str_len; $i++) {\n\
    \    $paren_arr = [];\n    $max_level = 0;\n    while ($i < $str_len && $paren_string[$i]\
    \ != ' ') {\n      if ($paren_string[$i] == '(') {\n        array_push($paren_arr,\
    \ 1);\n        $max_level = max($max_level, count($paren_arr));\n      } else\
    \ {\n        array_pop($paren_arr);\n      }\n      $i++;\n    }\n    array_push($result,\
    \ $max_level);\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk8zpldhb.php:33\n\
    Stack trace:\n#0 /tmp/tmpk8zpldhb.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpk8zpldhb.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $nested_parens = [];\n \
    \ foreach ($paren_array as $element) {\n    $nested_parens[] = get_nested_parens($element);\n\
    \  }\n  return $nested_parens;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_nested_parens()\
    \ in /tmp/tmprxkbzlhw.php:11\nStack trace:\n#0 /tmp/tmprxkbzlhw.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmprxkbzlhw.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmprxkbzlhw.php(26): test()\n#3 {main}\n  thrown in /tmp/tmprxkbzlhw.php\
    \ on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $result = [];\n    $paren_groups = explode(' ', $paren_string);\n   \
    \ foreach ($paren_groups as $group) {\n        $count = 0;\n        $max_count\
    \ = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i]\
    \ == '(') {\n                $count++;\n            } else if ($group[$i] == ')')\
    \ {\n                $count--;\n            }\n            $max_count = max($max_count,\
    \ $count);\n        }\n        $result[] = $max_count;\n    }\n    return $result;\n\
    }\necho implode(', ', parse_nested_parens('(()()) ((())) () ((())()())'));\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 2, 3, 1, 3
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $res = [];\n  foreach (explode(' ', $paren_string) as $paren) {\n    $max_level\
    \ = 0;\n    $level = 0;\n    for ($i = 0; $i < strlen($paren); $i++) {\n     \
    \ if ($paren[$i] == '(') {\n        $level++;\n        $max_level = max($max_level,\
    \ $level);\n      } else if ($paren[$i] == ')') {\n        $level--;\n      }\n\
    \    }\n    array_push($res, $max_level);\n  }\n  return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_depth = 0;\n \
    \   $max_depth_index = 0;\n    $current_depth = 0;\n    $index = 0;\n    foreach\
    \ ($paren_groups as $paren_group) {\n        $paren_char_count = strlen($paren_group);\n\
    \        for ($i = 0; $i < $paren_char_count; $i++) {\n            if ($paren_group[$i]\
    \ == '(') {\n                $current_depth++;\n            } else {\n       \
    \         $current_depth--;\n            }\n            if ($current_depth > $max_depth)\
    \ {\n                $max_depth = $current_depth;\n                $max_depth_index\
    \ = $index;\n            }\n        }\n        $index++;\n    }\n    return $max_depth_index;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpebsjkfcf.php:36\n\
    Stack trace:\n#0 /tmp/tmpebsjkfcf.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpebsjkfcf.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $max_nesting = 0;\n    $current_nesting = 0;\n    $max_nesting_groups\
    \ = array();\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    foreach ($paren_array as $paren) {\n      \
    \  if ($paren == '(') {\n            $current_nesting++;\n            if ($current_nesting\
    \ > $max_nesting) {\n                $max_nesting = $current_nesting;\n      \
    \      }\n        } elseif ($paren == ')') {\n            $current_nesting--;\n\
    \            if ($current_nesting == 0) {\n                $max_nesting_groups[]\
    \ = $max_nesting;\n                $max_nesting = 0;\n            }\n        }\n\
    \    }\n    return $max_nesting_groups;\n}\n\n$paren_string = readline('Enter\
    \ space separated strings of nested parentheses: ');\nprint_r(parse_nested_parens($paren_string));\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function readline() in\
    \ /tmp/tmpnng9wj7i.php:30\nStack trace:\n#0 {main}\n  thrown in /tmp/tmpnng9wj7i.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $max_depth = 0;\n  $current_depth = 0;\n  $result = array();\n  $paren_string\
    \ = str_split($paren_string);\n  foreach ($paren_string as $char) {\n    if ($char\
    \ == '(') {\n      $current_depth++;\n      if ($current_depth > $max_depth) {\n\
    \        $max_depth = $current_depth;\n      }\n    } elseif ($char == ')') {\n\
    \      $current_depth--;\n    } elseif ($char == ' ') {\n      array_push($result,\
    \ $max_depth);\n      $max_depth = 0;\n      $current_depth = 0;\n    }\n  }\n\
    \  array_push($result, $max_depth);\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $result = [];\n    $i = 0;\n    while ($i <\
    \ count($paren_array)) {\n        $curr_nesting = 0;\n        $curr_char = $paren_array[$i];\n\
    \        $curr_paren = '(';\n        while ($curr_char === $curr_paren) {\n  \
    \          $curr_nesting++;\n            $i++;\n            $curr_char = $paren_array[$i];\n\
    \        }\n        $result[] = $curr_nesting;\n        $i++;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpih_52ikm.php:32\n\
    Stack trace:\n#0 /tmp/tmpih_52ikm.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpih_52ikm.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $parsed_parens = array();\n    $paren_groups = explode(' ', $paren_string);\n\
    \    foreach ($paren_groups as $group) {\n        $level = 0;\n        $deepest_level\
    \ = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i]\
    \ == '(') {\n                $level++;\n            } else if ($group[$i] == ')')\
    \ {\n                $level--;\n            }\n            if ($level > $deepest_level)\
    \ {\n                $deepest_level = $level;\n            }\n        }\n    \
    \    $parsed_parens[] = $deepest_level;\n    }\n    return $parsed_parens;\n}\n\
    \necho '<p>Input: \"(()()) ((())) () ((())()())\".</p>';\necho '<p>Expected Output:\
    \ [2, 3, 1, 3]</p>';\necho '<p>Actual Output: ' . json_encode(parse_nested_parens('(()())\
    \ ((())) () ((())()())')) . '</p>';\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '<p>Input: "(()()) ((())) () ((())()())".</p><p>Expected Output: [2, 3,
    1, 3]</p><p>Actual Output: [2,3,1,3]</p>'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_depth = 0;\n    $paren_max_depth = 0;\n    $paren_nest_levels\
    \ = array();\n    $paren_array = str_split($paren_string);\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $paren_depth += 1;\n\
    \            if ($paren_depth > $paren_max_depth) {\n                $paren_max_depth\
    \ = $paren_depth;\n            }\n        } elseif ($paren == ')') {\n       \
    \     $paren_depth -= 1;\n        } elseif ($paren == ' ') {\n            array_push($paren_nest_levels,\
    \ $paren_max_depth);\n            $paren_max_depth = 0;\n            $paren_depth\
    \ = 0;\n        }\n    }\n    return $paren_nest_levels;\n}\n\n$string = '(()())\
    \ ((())) () ((())()())';\n$paren_nest_levels = parse_nested_parens($string);\n\
    var_dump($paren_nest_levels);\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n  int(1)\n}\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgi6g7i_g.php:38\nStack\
    \ trace:\n#0 /tmp/tmpgi6g7i_g.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpgi6g7i_g.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_group = explode(' ', $paren_string);\n    $paren_depth = [];\n\
    \    foreach ($paren_group as $paren) {\n        if ($paren[0] != '(' || substr($paren,\
    \ -1) != ')') {\n            return false;\n        }\n        $open_paren_count\
    \ = 0;\n        $max_paren_count = 0;\n        foreach (str_split($paren) as $char)\
    \ {\n            if ($char == '(') {\n                $open_paren_count++;\n \
    \           } elseif ($char == ')') {\n                $open_paren_count--;\n\
    \            }\n            if ($open_paren_count > $max_paren_count) {\n    \
    \            $max_paren_count = $open_paren_count;\n            }\n        }\n\
    \        $paren_depth[] = $max_paren_count;\n    }\n    return $paren_depth;\n\
    }\n\n$paren_string = '(()()) ((())) () ((())()())';\n$paren_depth = parse_nested_parens($paren_string);\n\
    print_r($paren_depth);\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $output = array();\n    $paren_arr = explode(' ', $paren_string);\n \
    \   foreach ($paren_arr as $p) {\n        $paren_stack = array();\n        $curr_max\
    \ = 0;\n        $prev_max = 0;\n        for ($i = 0; $i < strlen($p); $i++) {\n\
    \            if ($p[$i] == '(') {\n                $curr_max++;\n            \
    \    array_push($paren_stack, $curr_max);\n            } else {\n            \
    \    $prev_max = array_pop($paren_stack);\n                $curr_max = $prev_max;\n\
    \            }\n        }\n        array_push($output, $curr_max);\n    }\n  \
    \  return $output;\n}\n\necho '<pre>';\nprint_r(parse_nested_parens('(()()) ((()))\
    \ () ((())()())'));\necho '</pre>';\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 1\n    [2] => 1\n    [3] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps57bjvkt.php:36\n\
    Stack trace:\n#0 /tmp/tmps57bjvkt.php(41): test()\n#1 {main}\n  thrown in /tmp/tmps57bjvkt.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $return_array = array();\n\
    \    foreach ($paren_array as $paren) {\n        $count = 0;\n        $deepest\
    \ = 0;\n        for ($i = 0; $i < strlen($paren); $i++) {\n            if ($paren[$i]\
    \ == '(') {\n                $count++;\n                if ($count > $deepest)\
    \ {\n                    $deepest = $count;\n                }\n            }\
    \ else {\n                $count--;\n            }\n        }\n        $return_array[]\
    \ = $deepest;\n    }\n    return $return_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $input_arr = explode(' ', $paren_string);\n    $max_nesting_arr = [];\n\
    \    foreach ($input_arr as $input) {\n        $max_nesting_arr[] = max_nesting($input);\n\
    \    }\n    return $max_nesting_arr;\n}\n\nfunction candidate(...$args) {\n  \
    \  return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function max_nesting()\
    \ in /tmp/tmpj7czfla6.php:11\nStack trace:\n#0 /tmp/tmpj7czfla6.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpj7czfla6.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpj7czfla6.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpj7czfla6.php\
    \ on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $max_nesting = [];\n  $paren_strings = explode(' ', $paren_string);\n \
    \ foreach ($paren_strings as $string) {\n    $stack = [];\n    $max_nest = 0;\n\
    \    $curr_nest = 0;\n    for ($i = 0; $i < strlen($string); $i++) {\n      $char\
    \ = $string[$i];\n      if ($char == '(') {\n        $stack[] = $char;\n     \
    \   $curr_nest++;\n        $max_nest = max($max_nest, $curr_nest);\n      } elseif\
    \ ($char == ')') {\n        $stack[] = $char;\n        $curr_nest--;\n      }\n\
    \    }\n    if (count($stack) == 0) {\n      $max_nesting[] = $max_nest;\n   \
    \ } else {\n      throw new Exception('Input string has mismatched parentheses.');\n\
    \    }\n  }\n  return $max_nesting;\n}\n\necho implode(', ', parse_nested_parens('(()())\
    \ ((())) () ((())()())'));\necho \"\\n\";\necho implode(', ', parse_nested_parens('((())()())'));\n\
    echo \"\\n\";\necho implode(', ', parse_nested_parens('(()()) ((())) () ((())()())\
    \ ()'));\necho \"\\n\";\necho implode(', ', parse_nested_parens('(()()) ((()))\
    \ () ((())()()) ((())())'));\necho \"\\n\";\necho implode(', ', parse_nested_parens('(()())\
    \ ((())) () ((())()()) ((())()) ()'));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Input string has mismatched parentheses.\
    \ in /tmp/tmp71_zjczu.php:28\nStack trace:\n#0 /tmp/tmp71_zjczu.php(34): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 {main}\n  thrown in /tmp/tmp71_zjczu.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $max_nest_counts = [];\n  $paren_groups = explode(' ', $paren_string);\n\
    \  foreach ($paren_groups as $paren_group) {\n    $current_nest_count = 0;\n \
    \   $max_nest_count = 0;\n    $open_paren_count = 0;\n    for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n      $char = $paren_group[$i];\n      if ($char == '(') {\n      \
    \  $open_paren_count++;\n        $current_nest_count++;\n        if ($current_nest_count\
    \ > $max_nest_count) {\n          $max_nest_count = $current_nest_count;\n   \
    \     }\n      } else if ($char == ')') {\n        $open_paren_count--;\n    \
    \    $current_nest_count--;\n      }\n    }\n    if ($open_paren_count == 0) {\n\
    \      $max_nest_counts[] = $max_nest_count;\n    }\n  }\n  return $max_nest_counts;\n\
    }\n\n$paren_string = '(()()) ((())) () ((())()())';\nvar_dump(parse_nested_parens($paren_string));\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(4) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n  int(1)\n \
    \ [3]=>\n  int(3)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $group_array = explode(' ', $paren_string);\n    $output_array = array();\n\
    \    $max_level = 0;\n    foreach ($group_array as $group) {\n        $level =\
    \ 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i]\
    \ == '(') {\n                $level++;\n            } else {\n               \
    \ $level--;\n            }\n            if ($level > $max_level) {\n         \
    \       $max_level = $level;\n            }\n        }\n        $output_array[]\
    \ = $max_level;\n    }\n    return $output_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw0zlr_9r.php:33\n\
    Stack trace:\n#0 /tmp/tmpw0zlr_9r.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpw0zlr_9r.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $result = [];\n  $paren_array = explode(' ', $paren_string);\n  for ($i\
    \ = 0; $i < count($paren_array); $i++) {\n    $result[] = get_level($paren_array[$i]);\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_level() in\
    \ /tmp/tmp0ka167as.php:11\nStack trace:\n#0 /tmp/tmp0ka167as.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmp0ka167as.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmp0ka167as.php(26): test()\n#3 {main}\n  thrown in /tmp/tmp0ka167as.php\
    \ on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_arr = explode(' ', $paren_string);\n    $max_depth = [];\n   \
    \ foreach ($paren_arr as $paren_group) {\n        $depth = 0;\n        $max_depth_per_group\
    \ = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if\
    \ ($paren_group[$i] == '(') {\n                $depth++;\n                if ($depth\
    \ > $max_depth_per_group) {\n                    $max_depth_per_group = $depth;\n\
    \                }\n            } else {\n                $depth--;\n        \
    \    }\n        }\n        $max_depth[] = $max_depth_per_group;\n    }\n    return\
    \ $max_depth;\n}\n\nprint_r(parse_nested_parens('(()()) ((())) () ((())()())'));\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_counter\
    \ = array();\n    foreach ($paren_array as $value) {\n        $paren_array_counter[]\
    \ = parse_nested_parens_helper($value);\n    }\n    return $paren_array_counter;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmpfex7l4ai.php:11\nStack trace:\n#0 /tmp/tmpfex7l4ai.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpfex7l4ai.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpfex7l4ai.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpfex7l4ai.php\
    \ on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  // TODO: Fill in the implementation\n  $paren_string = str_replace(' ',\
    \ '', $paren_string);\n  $nested_arr = array();\n  $temp_sum = 0;\n  $flag = 0;\n\
    \  for ($i = 0; $i < strlen($paren_string); $i++) {\n    if ($paren_string[$i]\
    \ == '(') {\n      $temp_sum++;\n      $flag = 1;\n    } else {\n      $temp_sum--;\n\
    \    }\n    if ($temp_sum == 0) {\n      array_push($nested_arr, $flag);\n   \
    \   $flag = 0;\n    }\n  }\n  return $nested_arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6hasmfm7.php:33\n\
    Stack trace:\n#0 /tmp/tmp6hasmfm7.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6hasmfm7.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
