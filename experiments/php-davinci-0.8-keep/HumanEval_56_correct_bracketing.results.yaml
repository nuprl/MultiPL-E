name: HumanEval_56_correct_bracketing
language: php
results:
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  if (strlen($brackets) % 2 != 0) {\n    return False;\n  }\n  if ($brackets[0]\
    \ == \">\") {\n    return False;\n  }\n  $last_bracket = \">\";\n  for ($i = 0;\
    \ $i < strlen($brackets); $i++) {\n    if ($brackets[$i] == \"<\") {\n      if\
    \ ($last_bracket == \"<\") {\n        return False;\n      }\n      $last_bracket\
    \ = \"<\";\n    } else {\n      if ($last_bracket == \">\") {\n        return\
    \ False;\n      }\n      $last_bracket = \">\";\n    }\n  }\n  return True;\n\
    }\n\n$brackets = readline(\"brackets: \");\necho correct_bracketing($brackets);\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function readline() in\
    \ /tmp/tmp3gp43d0f.php:36\nStack trace:\n#0 {main}\n  thrown in /tmp/tmp3gp43d0f.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $b_arr = str_split($brackets);\n    $open = 0;\n    $close = 0;\n   \
    \ for ($i = 0; $i < count($b_arr); $i++) {\n        if ($b_arr[$i] == \"<\") {\n\
    \            $open++;\n        } else {\n            $close++;\n        }\n  \
    \      if ($close > $open) {\n            return False;\n        }\n    }\n  \
    \  if ($open == $close) {\n        return True;\n    } else {\n        return\
    \ False;\n    }\n}\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $opening = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n   \
    \     if ($brackets[$i] == \"<\") {\n            $opening++;\n        } else {\n\
    \            $opening--;\n        }\n        if ($opening < 0) {\n           \
    \ return False;\n        }\n    }\n    return $opening == 0;\n}\nprint_r(correct_bracketing(\"\
    <>\"));\nprint_r(correct_bracketing(\"<<><>>\"));\nprint_r(correct_bracketing(\"\
    ><<>\"));\nprint_r(correct_bracketing(\"<\"));\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: '11'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == '<') {\n            $open += 1;\n        } else {\n  \
    \          $open -= 1;\n        }\n        if ($open < 0) {\n            return\
    \ False;\n        }\n    }\n    return $open == 0;\n}\necho \"correct_bracketing(<)\
    \ = \".correct_bracketing(\"<\").\"\\n\";\necho \"correct_bracketing(<>) = \"\
    .correct_bracketing(\"<>\").\"\\n\";\necho \"correct_bracketing(<<><>>) = \".correct_bracketing(\"\
    <<><>>\").\"\\n\";\necho \"correct_bracketing(><<>) = \".correct_bracketing(\"\
    ><<>\").\"\\n\";\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "correct_bracketing(<) = \ncorrect_bracketing(<>) = 1\ncorrect_bracketing(<<><>>)\
    \ = 1\ncorrect_bracketing(><<>) = \n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets_left = substr_count($brackets, '<');\n  $brackets_right = substr_count($brackets,\
    \ '>');\n  if ($brackets_left != $brackets_right) {\n    return False;\n  }\n\
    \  return True;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy46vk5lg.php:31\n\
    Stack trace:\n#0 /tmp/tmpy46vk5lg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpy46vk5lg.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"<\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return false;\n        }\n    }\n    if ($open != $close) {\n   \
    \     return false;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  return False;\n}\n\necho \"test correct_bracketing(<)\\n\";\nif (correct_bracketing(\"\
    <\") == False) {\n  echo \"correct!\\n\";\n} else {\n  echo \"invalid\\n\";\n\
    }\n\necho \"test correct_bracketing(<>)\\n\";\nif (correct_bracketing(\"<>\")\
    \ == True) {\n  echo \"correct!\\n\";\n} else {\n  echo \"invalid\\n\";\n}\n\n\
    echo \"test correct_bracketing(<<><>>)\\n\";\nif (correct_bracketing(\"<<><>>\"\
    ) == True) {\n  echo \"correct!\\n\";\n} else {\n  echo \"invalid\\n\";\n}\n\n\
    echo \"test correct_bracketing(><<>)\\n\";\nif (correct_bracketing(\"><<>\") ==\
    \ False) {\n  echo \"correct!\\n\";\n} else {\n  echo \"invalid\\n\";\n}\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "test correct_bracketing(<)\ncorrect!\ntest correct_bracketing(<>)\ninvalid\n\
    test correct_bracketing(<<><>>)\ninvalid\ntest correct_bracketing(><<>)\ncorrect!\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnb4ba3m2.php:48\nStack\
    \ trace:\n#0 /tmp/tmpnb4ba3m2.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpnb4ba3m2.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $stack = [];\n  for ($i = 0; $i < strlen($brackets); $i++) {\n    if ($brackets[$i]\
    \ == '<') {\n      array_push($stack, '<');\n    } else {\n      array_pop($stack);\n\
    \    }\n  }\n  return count($stack) == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5lnmujlw.php:33\n\
    Stack trace:\n#0 /tmp/tmp5lnmujlw.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp5lnmujlw.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    if ($brackets == '') {\n        return False;\n    }\n    if ($brackets[0]\
    \ == '>') {\n        return False;\n    }\n    if ($brackets[-1] == '<') {\n \
    \       return False;\n    }\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == '<') {\n            $open++;\n       \
    \ } else {\n            $open--;\n        }\n        if ($open < 0) {\n      \
    \      return False;\n        }\n    }\n    if ($open == 0) {\n        return\
    \ True;\n    } else {\n        return False;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_left = substr_count($brackets, '<');\n    $brackets_right =\
    \ substr_count($brackets, '>');\n    if ($brackets_left == $brackets_right) {\n\
    \        return True;\n    } else {\n        return False;\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptp4nfwud.php:31\n\
    Stack trace:\n#0 /tmp/tmptp4nfwud.php(40): test()\n#1 {main}\n  thrown in /tmp/tmptp4nfwud.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $result = True;\n  $length = strlen($brackets);\n  for ($i = 0; $i < $length;\
    \ $i++) {\n    if ($brackets[$i] == \"<\") {\n      for ($k = $i + 1; $k < $length;\
    \ $k++) {\n        if ($brackets[$k] == \">\") {\n          $result = True;\n\
    \          $brackets[$k] = \"X\";\n          break;\n        }\n        else {\n\
    \          $result = False;\n        }\n      }\n    }\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw576lw4u.php:41\n\
    Stack trace:\n#0 /tmp/tmpw576lw4u.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpw576lw4u.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$i = 0;\n\t$stack = array();\n\twhile ($i < strlen($brackets)) {\n\t\t\
    $c = $brackets[$i];\n\t\tif ($c == '<') {\n\t\t\tarray_push($stack, '<');\n\t\t\
    } else if ($c == '>') {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn False;\n\
    \t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t\t$i += 1;\n\t}\n\
    \treturn count($stack) == 0;\n}\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $length = strlen($brackets);\n  for ($i = 0; $i < $length; $i++) {\n  \
    \  if ($brackets[$i] == '<') {\n      $brackets[$i] = $brackets[$i] . '<';\n \
    \   }\n  }\n  if (strstr($brackets, '><') !== false) {\n    return true;\n  }\
    \ else {\n    return false;\n  }\n}\n\necho correct_bracketing(\"<\") . \"\\n\"\
    ;\necho correct_bracketing(\"<>\") . \"\\n\";\necho correct_bracketing(\"<<><>>\"\
    ) . \"\\n\";\necho correct_bracketing(\"><<>\") . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\n\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpopmp264m.php:36\n\
    Stack trace:\n#0 /tmp/tmpopmp264m.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpopmp264m.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $stack = new SplStack();\n  for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n    if ($brackets[$i] == '<') {\n      $stack->push($brackets[$i]);\n   \
    \ } else {\n      if ($stack->isEmpty()) {\n        return False;\n      }\n \
    \     $stack->pop();\n    }\n  }\n  return $stack->isEmpty();\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  // Your code here\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0ncq3nbs.php:21\n\
    Stack trace:\n#0 /tmp/tmp0ncq3nbs.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp0ncq3nbs.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $open_count = 0;\n  $close_count = 0;\n  for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n    if ($brackets[$i] == \"<\") {\n      $open_count++;\n    } else\
    \ if ($brackets[$i] == \">\") {\n      $close_count++;\n    }\n    if ($close_count\
    \ > $open_count) {\n      return false;\n    }\n  }\n  if ($open_count == $close_count)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfpyl682b.php:21\n\
    Stack trace:\n#0 /tmp/tmpfpyl682b.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpfpyl682b.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = array();\n    $brackets = str_split($brackets);\n    foreach\
    \ ($brackets as $b) {\n        if ($b == '<') {\n            array_push($stack,\
    \ $b);\n        } else {\n            if (count($stack) == 0) {\n            \
    \    return False;\n            }\n            array_pop($stack);\n        }\n\
    \    }\n    return count($stack) == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $length = strlen($brackets);\n    $left = 0;\n    $right = 0;\n    for\
    \ ($i = 0; $i < $length; $i++) {\n        if ($brackets[$i] == '<') {\n      \
    \      $left += 1;\n        } else {\n            $right += 1;\n        }\n  \
    \      if ($right > $left) {\n            return False;\n        }\n    }\n  \
    \  if ($left == $right) {\n        return True;\n    } else {\n        return\
    \ False;\n    }\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    if (strlen($brackets) == 0) {\n        return True;\n    } elseif ($brackets[0]\
    \ == '>') {\n        return False;\n    } else {\n        return correct_bracketing(substr($brackets,\
    \ strpos($brackets, '>') + 1));\n    }\n}\necho correct_bracketing('<>>') . \"\
    \\n\";\necho correct_bracketing('<><>') . \"\\n\";\necho correct_bracketing('<<><>>')\
    \ . \"\\n\";\necho correct_bracketing('><<>') . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3s8m_pl1.php:32\n\
    Stack trace:\n#0 /tmp/tmp3s8m_pl1.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp3s8m_pl1.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $c = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if\
    \ ($brackets[$i] == '<') {\n            $c += 1;\n        } else if ($brackets[$i]\
    \ == '>') {\n            $c -= 1;\n        }\n        if ($c < 0) {\n        \
    \    return False;\n        }\n    }\n    return $c == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $check = 0;\n    $closings = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == '<') {\n            $check++;\n      \
    \  } elseif ($brackets[$i] == '>') {\n            $closings++;\n        }\n  \
    \  }\n    if ($check == $closings) {\n        return true;\n    } else {\n   \
    \     return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj10ajade.php:39\n\
    Stack trace:\n#0 /tmp/tmpj10ajade.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpj10ajade.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $len = strlen($brackets);\n  $temp = 0;\n  for ($i = 0; $i < $len; $i++)\
    \ {\n    if ($brackets[$i] == '<') {\n      $temp++;\n    } else {\n      $temp--;\n\
    \    }\n    if ($temp < 0) {\n      return False;\n    }\n  }\n  if ($temp ==\
    \ 0) {\n    return True;\n  } else {\n    return False;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i] ==\
    \ \"<\") {\n\t\t\t$openings[] = \"<\";\n\t\t} else {\n\t\t\tif (empty($openings))\
    \ {\n\t\t\t\treturn False;\n\t\t\t} else {\n\t\t\t\tarray_pop($openings);\n\t\t\
    \t}\n\t\t}\n\t}\n\tif (empty($openings)) {\n\t\treturn True;\n\t} else {\n\t\t\
    return False;\n\t}\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $count = 0;\n  for ($i = 0; $i < strlen($brackets); $i++) {\n    if ($brackets[$i]\
    \ == \"<\") {\n      $count += 1;\n    } else if ($brackets[$i] == \">\") {\n\
    \      $count -= 1;\n    } else {\n      return \"Invalid character found.\";\n\
    \    }\n    if ($count < 0) {\n      return False;\n    }\n  }\n  if ($count ==\
    \ 0) {\n    return True;\n  } else {\n    return False;\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7zbow6ij.php:21\n\
    Stack trace:\n#0 /tmp/tmp7zbow6ij.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp7zbow6ij.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    $close = 0;\n    foreach (str_split($brackets) as $char)\
    \ {\n        if ($char == '<') {\n            $open++;\n        } elseif ($char\
    \ == '>') {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return False;\n        }\n    }\n    return $open == $close;\n}\n\
    \nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    $closed = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"<\") {\n            $open++;\n     \
    \   } else {\n            $closed++;\n        }\n        if ($closed > $open)\
    \ {\n            return False;\n        }\n    }\n    if ($open == $closed) {\n\
    \        return True;\n    } else {\n        return False;\n    }\n}\n\nif (correct_bracketing(\"\
    <\") != False) {\n    echo \"Test 1 Failed!\\n\";\n} else {\n    echo \"Test 1\
    \ Passed!\\n\";\n}\nif (correct_bracketing(\"<>\") != True) {\n    echo \"Test\
    \ 2 Failed!\\n\";\n} else {\n    echo \"Test 2 Passed!\\n\";\n}\nif (correct_bracketing(\"\
    <<><>>\") != True) {\n    echo \"Test 3 Failed!\\n\";\n} else {\n    echo \"Test\
    \ 3 Passed!\\n\";\n}\nif (correct_bracketing(\"><<>\") != False) {\n    echo \"\
    Test 4 Failed!\\n\";\n} else {\n    echo \"Test 4 Passed!\\n\";\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "Test 1 Passed!\nTest 2 Passed!\nTest 3 Passed!\nTest 4 Passed!\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n    \
    \    if ($brackets[$i] == '<') {\n            array_push($stack, $brackets[$i]);\n\
    \        } elseif ($brackets[$i] == '>') {\n            array_pop($stack);\n \
    \       }\n    }\n    return (count($stack) == 0);\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5kylgw_n.php:33\n\
    Stack trace:\n#0 /tmp/tmp5kylgw_n.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp5kylgw_n.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $stack = new SplStack();\n  for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n    if ($brackets[$i] == '<') {\n      $stack->push('<');\n    } else {\n\
    \      $stack->pop();\n    }\n  }\n  return $stack->isEmpty();\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught RuntimeException: Can't pop from an empty datastructure\
    \ in /tmp/tmp4h5gfll8.php:18\nStack trace:\n#0 /tmp/tmp4h5gfll8.php(18): SplDoublyLinkedList->pop()\n\
    #1 /tmp/tmp4h5gfll8.php(25): correct_bracketing('<<<><>>>>')\n#2 /tmp/tmp4h5gfll8.php(33):\
    \ candidate('<<<><>>>>')\n#3 /tmp/tmp4h5gfll8.php(43): test()\n#4 {main}\n  thrown\
    \ in /tmp/tmp4h5gfll8.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$length = strlen($brackets);\n\tif ($length < 1) return True;\n\t$open_brackets\
    \ = 0;\n\tfor ($i = 0; $i < $length; $i++) {\n\t\tif ($brackets[$i] == '<') {\n\
    \t\t\t$open_brackets++;\n\t\t} else if ($brackets[$i] == '>') {\n\t\t\t$open_brackets--;\n\
    \t\t}\n\t\tif ($open_brackets < 0) return False;\n\t}\n\treturn ($open_brackets\
    \ == 0);\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$open=0;\n\t$close=0;\n\tfor ($i=0; $i < strlen($brackets); $i++) { \n\t\
    \tif ($brackets[$i]==\"<\") {\n\t\t\t$open++;\n\t\t} elseif ($brackets[$i]==\"\
    >\") {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open==$close) {\n\t\treturn True;\n\
    \t} else {\n\t\treturn False;\n\t}\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rc9v2s3.php:39\n\
    Stack trace:\n#0 /tmp/tmp6rc9v2s3.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp6rc9v2s3.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$stack = array();\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\t\
    $c = $brackets[$i];\n\t\tif ($c == '<') {\n\t\t\tarray_push($stack, $c);\n\t\t\
    } else {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn False;\n\t\t\t}\n\t\t\tarray_pop($stack);\n\
    \t\t}\n\t}\n\treturn empty($stack);\n}\n\nfunction candidate(...$args) {\n   \
    \ return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t// FILL IN HERE\n}\n\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplh6aakpa.php:22\n\
    Stack trace:\n#0 /tmp/tmplh6aakpa.php(36): test()\n#1 {main}\n  thrown in /tmp/tmplh6aakpa.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $stack = new SplStack();\n  for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n    $char = $brackets[$i];\n    if ($char == '<') {\n      $stack->push($char);\n\
    \    } else {\n      if ($stack->isEmpty()) {\n        return False;\n      }\n\
    \      $stack->pop();\n    }\n  }\n  return $stack->isEmpty();\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $n = strlen($brackets);\n    $count = 0;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        if ($brackets[$i] == '<') {\n            $count++;\n        } else\
    \ if ($brackets[$i] == '>') {\n            $count--;\n        }\n        if ($count\
    \ < 0) {\n            return false;\n        }\n    }\n    return $count == 0;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$length = strlen($brackets);\n\t$count = 0;\n\tfor ($i = 0; $i < $length;\
    \ $i++) {\n\t\tif ($brackets[$i] == '<') {\n\t\t\t$count += 1;\n\t\t} else {\n\
    \t\t\t$count -= 1;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\treturn $count == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $count = 0;\n    foreach(str_split($brackets) as $char) {\n        if\
    \ ($char == '<') {\n            $count++;\n        } elseif ($char == '>') {\n\
    \            $count--;\n        }\n        if ($count < 0) {\n            return\
    \ false;\n        }\n    }\n    return $count == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $length = strlen($brackets);\n    for ($i = 0; $i < $length; $i++) {\n\
    \        if ($brackets[$i] == '<') {\n            $open++;\n        } else {\n\
    \            $closed++;\n        }\n    }\n    if ($open == $closed) {\n     \
    \   return True;\n    } else {\n        return False;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ftb6yea.php:38\n\
    Stack trace:\n#0 /tmp/tmp_ftb6yea.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp_ftb6yea.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = str_split($brackets);\n    $stack = array();\n    foreach\
    \ ($brackets as $bracket) {\n        if ($bracket == '<') {\n            array_push($stack,\
    \ $bracket);\n        } elseif ($bracket == '>') {\n            if (empty($stack))\
    \ {\n                return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    return empty($stack);\n}\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    // your code here\n    $opening = 0;\n    $closing = 0;\n    for ($i\
    \ = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == \"<\") {\n\
    \            $opening++;\n        } else {\n            $closing++;\n        }\n\
    \        if ($closing > $opening) {\n            return False;\n        }\n  \
    \  }\n    if ($opening == $closing) {\n        return True;\n    } else {\n  \
    \      return False;\n    }\n}\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $len = strlen($brackets);\n    $count = 0;\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if ($brackets[$i] == '<') {\n            $count++;\n      \
    \  } else {\n            $count--;\n        }\n        if ($count < 0) {\n   \
    \         return False;\n        }\n    }\n    return ($count == 0);\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    // WRITE YOUR CODE HERE\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp03yoc1z5.php:21\n\
    Stack trace:\n#0 /tmp/tmp03yoc1z5.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp03yoc1z5.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = new SplStack();\n    for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n        $b = $brackets[$i];\n        if ($b == '<') {\n            $stack->push($b);\n\
    \        } else if ($b == '>') {\n            if ($stack->isEmpty()) {\n     \
    \           return False;\n            }\n            $stack->pop();\n       \
    \ }\n    }\n    return $stack->isEmpty();\n}\necho correct_bracketing(\"<\") .\
    \ \"\\n\";\necho correct_bracketing(\"<>\") . \"\\n\";\necho correct_bracketing(\"\
    <<><>>\") . \"\\n\";\necho correct_bracketing(\"><<>\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n1\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $bracket_count = 0;\n  $bracket_length = strlen($brackets);\n  for ($i\
    \ = 0; $i < $bracket_length; $i++) {\n    if ($brackets[$i] == \"<\") {\n    \
    \  $bracket_count++;\n    } else {\n      $bracket_count--;\n    }\n    if ($bracket_count\
    \ < 0) {\n      return False;\n    }\n  }\n  return $bracket_count == 0;\n}\n\n\
    print_r(correct_bracketing(\"<\"));\necho \"\\n\";\nprint_r(correct_bracketing(\"\
    <>\"));\necho \"\\n\";\nprint_r(correct_bracketing(\"<<><>>\"));\necho \"\\n\"\
    ;\nprint_r(correct_bracketing(\"><<>\"));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n1\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $arr = str_split($brackets);\n  $sum = 0;\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value == '<') {\n      $sum++;\n    } else {\n      $sum--;\n  \
    \  }\n    if ($sum < 0) {\n      return false;\n    }\n  }\n  if ($sum == 0) {\n\
    \    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $a = strlen($brackets);\n  $b = substr_count($brackets, \"<\");\n  $c =\
    \ substr_count($brackets, \">\");\n  if($a%2 == 0 && $b == $c) {\n    return True;\n\
    \  } else {\n    return False;\n  }\n}\n\nfunction candidate(...$args) {\n   \
    \ return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbkbrrsjp.php:33\n\
    Stack trace:\n#0 /tmp/tmpbkbrrsjp.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpbkbrrsjp.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\treturn '';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7pck28pr.php:21\n\
    Stack trace:\n#0 /tmp/tmp7pck28pr.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp7pck28pr.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"<\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open\
    \ < 0) {\n\t\t\treturn False;\n\t\t}\n\t}\n\treturn $open == 0;\n}\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets_arr = str_split($brackets);\n  $open_indexes = [];\n  $open_chars\
    \ = \"<\";\n  $close_chars = \">\";\n  foreach ($brackets_arr as $index => $char)\
    \ {\n    if (strpos($open_chars, $char) !== FALSE) {\n      $open_indexes[] =\
    \ $index;\n    } elseif (strpos($close_chars, $char) !== FALSE) {\n      if (count($open_indexes)\
    \ == 0) {\n        return FALSE;\n      }\n      array_pop($open_indexes);\n \
    \   }\n  }\n  return count($open_indexes) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = array();\n    $queue = array();\n    $result = \"\";\n    for\
    \ ($i = 0; $i < strlen($brackets); $i++) {\n        $char = $brackets[$i];\n \
    \       if ($char == \"<\") {\n            array_push($stack, $char);\n      \
    \  } else if ($char == \">\") {\n            array_push($queue, $char);\n    \
    \    }\n    }\n    $counter = 0;\n    while ($counter < count($stack)) {\n   \
    \     $result .= array_pop($stack);\n        $result .= array_pop($queue);\n \
    \       $counter++;\n    }\n    return $result == \"<>\";\n}\n\necho correct_bracketing(\"\
    <>\") . \"\\n\";\necho correct_bracketing(\"<<><>>\") . \"\\n\";\necho correct_bracketing(\"\
    ><<>\") . \"\\n\";\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptv2t0h73.php:43\n\
    Stack trace:\n#0 /tmp/tmptv2t0h73.php(56): test()\n#1 {main}\n  thrown in /tmp/tmptv2t0h73.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = substr_count($brackets, '<');\n    $close = substr_count($brackets,\
    \ '>');\n    if ($open === $close) {\n        return true;\n    } else {\n   \
    \     return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_mc151gr.php:32\n\
    Stack trace:\n#0 /tmp/tmp_mc151gr.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp_mc151gr.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $bracket_counter = 0;\n    for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n        if ($brackets[$i] == \"<\") {\n            $bracket_counter += 1;\n\
    \        } else {\n            $bracket_counter -= 1;\n        }\n        if ($bracket_counter\
    \ < 0) {\n            return False;\n        }\n    }\n    return $bracket_counter\
    \ == 0;\n}\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\n}\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqm9txy9j.php:20\n\
    Stack trace:\n#0 /tmp/tmpqm9txy9j.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpqm9txy9j.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$result = True;\n\t$stack = new SplStack();\n\t$length = strlen($brackets);\n\
    \tfor ($i = 0; $i < $length; $i++) {\n\t\t$value = $brackets[$i];\n\t\tif ($value\
    \ == \"<\") {\n\t\t\t$stack->push($value);\n\t\t} else if ($value == \">\") {\n\
    \t\t\tif ($stack->isEmpty()) {\n\t\t\t\t$result = False;\n\t\t\t\tbreak;\n\t\t\
    \t} else {\n\t\t\t\t$stack->pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (!$stack->isEmpty())\
    \ {\n\t\t$result = False;\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = substr_count($brackets, '<');\n    $close = substr_count($brackets,\
    \ '>');\n    if($open != $close) {\n        return False;\n    } else {\n    \
    \    return True;\n    }\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbpir76yn.php:32\n\
    Stack trace:\n#0 /tmp/tmpbpir76yn.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpbpir76yn.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    // insert your code here\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqpz5ql70.php:21\n\
    Stack trace:\n#0 /tmp/tmpqpz5ql70.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpqpz5ql70.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = array();\n    for ($i = 0; $i < strlen($brackets); $i++) {\n\
    \        if ($brackets[$i] == '<') {\n            array_push($stack, $brackets[$i]);\n\
    \        } elseif ($brackets[$i] == '>') {\n            if (count($stack) == 0)\
    \ {\n                return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    if (count($stack) != 0) {\n        return\
    \ false;\n    }\n    return true;\n}\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$bracket_arr = str_split($brackets);\n\t$open_count = 0;\n\t$close_count\
    \ = 0;\n\tforeach ($bracket_arr as $char) {\n\t\tif ($char == \"<\") {\n\t\t\t\
    $open_count += 1;\n\t\t} else {\n\t\t\t$close_count += 1;\n\t\t}\n\t}\n\treturn\
    \ $open_count == $close_count;\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaumar2gf.php:36\n\
    Stack trace:\n#0 /tmp/tmpaumar2gf.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpaumar2gf.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  // YOUR CODE HERE\n  $stack = new SplStack();\n  $length = strlen($brackets);\n\
    \  $result = true;\n  for ($i = 0; $i < $length; $i++) {\n    $char = $brackets[$i];\n\
    \    if ($char == '<') {\n      $stack->push($char);\n    } else {\n      if ($stack->isEmpty())\
    \ {\n        $result = false;\n        break;\n      } else {\n        $stack->pop();\n\
    \      }\n    }\n  }\n  if (!$stack->isEmpty()) {\n    $result = false;\n  }\n\
    \  return $result;\n}\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $left_brackets = 0;\n  for ($i = 0; $i < strlen($brackets); $i++) {\n \
    \   if ($brackets[$i] == '<') {\n      $left_brackets++;\n    } else if ($brackets[$i]\
    \ == '>') {\n      $left_brackets--;\n    }\n    if ($left_brackets < 0) {\n \
    \     return False;\n    }\n  }\n  return $left_brackets == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_arr = str_split($brackets);\n    if ($brackets_arr[0] == \"\
    >\") {\n        return false;\n    }\n    if ($brackets_arr[count($brackets_arr)\
    \ - 1] == \"<\") {\n        return false;\n    }\n    for ($i = 0; $i < count($brackets_arr);\
    \ $i++) {\n        if ($brackets_arr[$i] == \"<\") {\n            for ($j = $i\
    \ + 1; $j < count($brackets_arr); $j++) {\n                if ($brackets_arr[$j]\
    \ == \">\") {\n                    unset($brackets_arr[$i]);\n               \
    \     unset($brackets_arr[$j]);\n                    break;\n                }\n\
    \            }\n        }\n    }\n    if (count($brackets_arr) == 0) {\n     \
    \   return true;\n    } else {\n        return false;\n    }\n}\n\n$brackets =\
    \ \"><<>\";\nvar_dump(correct_bracketing($brackets));\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "bool(false)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk6hsoq20.php:46\n\
    Stack trace:\n#0 /tmp/tmpk6hsoq20.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpk6hsoq20.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $opening = 0;\n    $closing = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"<\") {\n            $opening++;\n  \
    \      } else {\n            $closing++;\n        }\n        if ($closing > $opening)\
    \ {\n            return false;\n        }\n    }\n    if ($opening == $closing)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n   $stack = new Stack();\n   for ($i = 0; $i < strlen($brackets); $i++) {\n\
    \      $char = $brackets[$i];\n      if ($char == \"<\") {\n         $stack->push($char);\n\
    \      } else {\n         if ($stack->isEmpty()) {\n            return false;\n\
    \         }\n         $stack->pop();\n      }\n   }\n   return $stack->isEmpty();\n\
    }\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Class 'Stack' not found in /tmp/tmpzgqu0avv.php:13\n\
    Stack trace:\n#0 /tmp/tmpzgqu0avv.php(28): correct_bracketing('<>')\n#1 /tmp/tmpzgqu0avv.php(32):\
    \ candidate('<>')\n#2 /tmp/tmpzgqu0avv.php(46): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpzgqu0avv.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open_count = 0;\n    $close_count = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"<\") {\n            $open_count += 1;\n\
    \        } else {\n            $close_count += 1;\n        }\n        if ($close_count\
    \ > $open_count) {\n            return False;\n        }\n    }\n    if ($open_count\
    \ == $close_count) {\n        return True;\n    } else {\n        return False;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $bracket_counter = 0;\n    for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n        if ($brackets[$i] == \"<\") {\n            $bracket_counter++;\n\
    \        } else {\n            $bracket_counter--;\n        }\n        if ($bracket_counter\
    \ < 0) {\n            return False;\n        }\n    }\n    return ($bracket_counter\
    \ == 0);\n}\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $left_count = 0;\n  $right_count = 0;\n  $brackets_arr = str_split($brackets);\n\
    \  foreach ($brackets_arr as $value) {\n    if ($value == \"<\") {\n      $left_count\
    \ += 1;\n    } else {\n      $right_count += 1;\n    }\n  }\n  if ($left_count\
    \ == $right_count) {\n    return True;\n  } else {\n    return False;\n  }\n}\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkh1jzdmh.php:39\n\
    Stack trace:\n#0 /tmp/tmpkh1jzdmh.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpkh1jzdmh.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $bracketStack = new SplStack();\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == '<') {\n            $bracketStack->push($brackets[$i]);\n\
    \        } elseif ($brackets[$i] == '>') {\n            if ($bracketStack->isEmpty())\
    \ {\n                return false;\n            } else {\n                $bracketStack->pop();\n\
    \            }\n        }\n    }\n    return $bracketStack->isEmpty();\n}\n\n\
    $brackets = \"<>\";\necho correct_bracketing($brackets);\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $bracket_open = '<';\n  $bracket_close = '>';\n  $open_count = 0;\n  $close_count\
    \ = 0;\n  $length = strlen($brackets);\n  for ($i = 0; $i < $length; $i++) {\n\
    \    if ($brackets[$i] == $bracket_open) {\n      $open_count += 1;\n    } elseif\
    \ ($brackets[$i] == $bracket_close) {\n      $close_count += 1;\n    }\n  }\n\
    \  if ($open_count == $close_count) {\n    return True;\n  } else {\n    return\
    \ False;\n  }\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7i39j9g4.php:42\n\
    Stack trace:\n#0 /tmp/tmp7i39j9g4.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp7i39j9g4.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\tif (strlen($brackets) === 0) {\n\t\treturn true;\n\t}\n\t$open = 0;\n\t\
    $close = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ === \"<\") {\n\t\t\t$open += 1;\n\t\t} else {\n\t\t\t$close += 1;\n\t\t}\n\t\
    \tif ($close > $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open === $close;\n\
    }\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $openingBrackets = 0;\n    $closingBrackets = 0;\n    $len = strlen($brackets);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if ($brackets[$i] == '<') {\n  \
    \          $openingBrackets++;\n        } else if ($brackets[$i] == '>') {\n \
    \           $closingBrackets++;\n        }\n    }\n    return $openingBrackets\
    \ == $closingBrackets;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppgbag22q.php:36\n\
    Stack trace:\n#0 /tmp/tmppgbag22q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmppgbag22q.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    if (strlen($brackets) % 2 != 0) {\n        return False;\n    }\n   \
    \ $count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == \"<\") {\n            $count += 1;\n        } else {\n            $count\
    \ -= 1;\n        }\n        if ($count < 0) {\n            return False;\n   \
    \     }\n    }\n    return $count == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    // Write your code here.\n    $length = strlen($brackets);\n    $last_index\
    \ = $length - 1;\n    $count = 0;\n    $result = FALSE;\n    for ($i = 0; $i <\
    \ $length; $i++) {\n        if ($brackets[$i] == '<') {\n            $count +=\
    \ 1;\n        } else {\n            $count -= 1;\n        }\n        if ($count\
    \ < 0) {\n            break;\n        }\n    }\n    if ($count == 0) {\n     \
    \   $result = TRUE;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  for ($i = 0; $i < strlen($brackets); $i++) {\n    if ($brackets[$i] ==\
    \ '<') {\n      $left += 1;\n    } elseif ($brackets[$i] == '>') {\n      $right\
    \ += 1;\n    }\n  }\n  if ($left == $right) {\n    return True;\n  } else {\n\
    \    return False;\n  }\n}\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2kbya2_3.php:36\n\
    Stack trace:\n#0 /tmp/tmp2kbya2_3.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp2kbya2_3.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $bracketsArray = str_split($brackets);\n    $tempBrackets = array();\n\
    \    foreach ($bracketsArray as $b) {\n        if ($b == '<') {\n            array_push($tempBrackets,\
    \ $b);\n        } else {\n            if (!empty($tempBrackets)) {\n         \
    \       array_pop($tempBrackets);\n            } else {\n                return\
    \ false;\n            }\n        }\n    }\n    if (empty($tempBrackets)) {\n \
    \       return true;\n    } else {\n        return false;\n    }\n}\n\n$brackets\
    \ = \"<>><\";\n$result = correct_bracketing($brackets);\necho \"Testing $brackets\
    \ returns \" . ($result ? \"true\" : \"false\") . \"\\n\";\n\n$brackets = \"<><<>>\"\
    ;\n$result = correct_bracketing($brackets);\necho \"Testing $brackets returns\
    \ \" . ($result ? \"true\" : \"false\") . \"\\n\";\n\n$brackets = \">\";\n$result\
    \ = correct_bracketing($brackets);\necho \"Testing $brackets returns \" . ($result\
    \ ? \"true\" : \"false\") . \"\\n\";\n\n$brackets = \"><\";\n$result = correct_bracketing($brackets);\n\
    echo \"Testing $brackets returns \" . ($result ? \"true\" : \"false\") . \"\\\
    n\";\n\n$brackets = \"><<>>\";\n$result = correct_bracketing($brackets);\necho\
    \ \"Testing $brackets returns \" . ($result ? \"true\" : \"false\") . \"\\n\"\
    ;\n\n$brackets = \"><<>><\";\n$result = correct_bracketing($brackets);\necho \"\
    Testing $brackets returns \" . ($result ? \"true\" : \"false\") . \"\\n\";\n\n\
    $brackets = \"><<>><>\";\n$result = correct_bracketing($brackets);\necho \"Testing\
    \ $brackets returns \" . ($result ? \"true\" : \"false\") . \"\\n\";\n\n$brackets\
    \ = \"><<>><><<>><><<>><>\";\n$result = correct_bracketing($brackets);\necho \"\
    Testing $brackets returns \"\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzpc_z6oa.php on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    // TODO: add code here\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz2_iy30a.php:21\n\
    Stack trace:\n#0 /tmp/tmpz2_iy30a.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpz2_iy30a.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $stack = array();\n  for ($i = 0; $i < strlen($brackets); $i++) {\n   \
    \ if ($brackets[$i] == '<') {\n      array_push($stack, $brackets[$i]);\n    }\
    \ else {\n      if (!$stack) {\n        return False;\n      }\n      array_pop($stack);\n\
    \    }\n  }\n  return !$stack;\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\n}\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkq35hrop.php:20\n\
    Stack trace:\n#0 /tmp/tmpkq35hrop.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpkq35hrop.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  if ($brackets == '') {\n    return True;\n  }\n  $count = 0;\n  $brackets\
    \ = str_split($brackets);\n  foreach ($brackets as $bracket) {\n    if ($bracket\
    \ == '<') {\n      $count++;\n    } else {\n      $count--;\n    }\n    if ($count\
    \ < 0) {\n      return False;\n    }\n  }\n  return ($count == 0);\n}\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $lh = str_split($brackets);\n    $stack = [];\n    foreach ($lh as $item)\
    \ {\n        if ($item == '<') {\n            array_push($stack, $item);\n   \
    \     } elseif ($item == '>') {\n            if (count($stack) == 0) {\n     \
    \           return False;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    if (count($stack) == 0) {\n        return\
    \ True;\n    } else {\n        return False;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp229rez4x.php:21\n\
    Stack trace:\n#0 /tmp/tmp229rez4x.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp229rez4x.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $len = strlen($brackets);\n    if ($len == 0) {\n        return True;\n\
    \    } else if ($len == 1) {\n        return False;\n    } else {\n        $mid\
    \ = $len / 2;\n        $left = correct_bracketing(substr($brackets, 0, $mid));\n\
    \        $right = correct_bracketing(substr($brackets, $mid));\n        return\
    \ $left && $right;\n    }\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprqy3pcsi.php:31\n\
    Stack trace:\n#0 /tmp/tmprqy3pcsi.php(45): test()\n#1 {main}\n  thrown in /tmp/tmprqy3pcsi.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  return preg_match(\"#^<+>*$#\", $brackets);\n}\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_4iv0zfu.php:20\n\
    Stack trace:\n#0 /tmp/tmp_4iv0zfu.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp_4iv0zfu.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n     \
    \   if ($brackets[$i] == \"<\") {\n            $count += 1;\n        } else {\n\
    \            $count -= 1;\n        }\n        if ($count < 0) {\n            return\
    \ False;\n        }\n    }\n    return $count == 0;\n}\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $len = strlen($brackets);\n    if ($len % 2 != 0) {\n        return false;\n\
    \    }\n    $half = $len / 2;\n    for ($i = 0; $i < $half; $i++) {\n        if\
    \ ($brackets[$i] != \"<\" || $brackets[$i + $half] != \">\") {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzqfs1x0o.php:32\n\
    Stack trace:\n#0 /tmp/tmpzqfs1x0o.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpzqfs1x0o.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$open_brackets = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\
    \tif ($brackets[$i] == \"<\")\n\t\t\t$open_brackets++;\n\t\telse {\n\t\t\tif ($open_brackets\
    \ == 0)\n\t\t\t\treturn False;\n\t\t\t$open_brackets--;\n\t\t}\n\t}\n\treturn\
    \ $open_brackets == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $chars = str_split($brackets);\n    $n = count($chars);\n    $i = 0;\n\
    \    while ($i < $n) {\n        if ($chars[$i] == '<') {\n            $j = $i\
    \ + 1;\n            while ($j < $n && $chars[$j] == '<') {\n                $j++;\n\
    \            }\n            if ($j == $n) {\n                return false;\n \
    \           }\n            $chars[$j] = '0';\n            $i = $j + 1;\n     \
    \   } else {\n            $i++;\n        }\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3l79l05y.php:43\n\
    Stack trace:\n#0 /tmp/tmp3l79l05y.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp3l79l05y.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  // echo \"test $brackets\\n\";\n  if ($brackets == \"<\") {\n    return\
    \ False;\n  } elseif ($brackets == \">\") {\n    return False;\n  } elseif ($brackets\
    \ == \"\") {\n    return True;\n  } elseif ($brackets[0] == \">\") {\n    return\
    \ False;\n  } elseif ($brackets[0] == \"<\") {\n    $index = 1;\n    while ($index\
    \ < strlen($brackets)) {\n      if ($brackets[$index] == \">\") {\n        return\
    \ correct_bracketing(substr($brackets, $index + 1));\n      }\n      $index++;\n\
    \    }\n    return False;\n  }\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ha1lse3.php:40\n\
    Stack trace:\n#0 /tmp/tmp7ha1lse3.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp7ha1lse3.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"<\")\n\t\t\t$open++;\n\t\telse if ($brackets[$i] == \">\")\n\t\t\t$open--;\n\
    \t\tif ($open < 0)\n\t\t\treturn False;\n\t}\n\treturn $open == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $start = array(\"<\");\n  $close = array(\">\");\n  $startIndex = 0;\n\
    \  $closeIndex = 0;\n  while ($startIndex < strlen($brackets)) {\n    $nextStart\
    \ = strpos($brackets, $start[0], $startIndex);\n    $nextClose = strpos($brackets,\
    \ $close[0], $closeIndex);\n    if ($nextStart === false && $nextClose === false)\
    \ {\n      break;\n    }\n    if ($nextStart === false) {\n      return false;\n\
    \    }\n    if ($nextClose === false) {\n      return false;\n    }\n    if ($nextStart\
    \ > $nextClose) {\n      return false;\n    }\n    $startIndex = $nextStart +\
    \ 1;\n    $closeIndex = $nextClose + 1;\n  }\n  return true;\n}\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$stack = new SplStack();\n\tfor ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n\t\tif ($brackets[$i] == '<') {\n\t\t\t$stack->push('<');\n\t\t} else if\
    \ ($brackets[$i] == '>') {\n\t\t\tif ($stack->isEmpty()) {\n\t\t\t\treturn false;\n\
    \t\t\t} else {\n\t\t\t\t$stack->pop();\n\t\t\t}\n\t\t}\n\t}\n\tif ($stack->isEmpty())\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho correct_bracketing('<>')\
    \ . PHP_EOL; // true\necho correct_bracketing('<<><>>') . PHP_EOL; // true\necho\
    \ correct_bracketing('<') . PHP_EOL; // false\necho correct_bracketing('><<>')\
    \ . PHP_EOL; // false\necho correct_bracketing('><') . PHP_EOL; // false\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n\n\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $bracket_count = 0;\n  for ($i = 0; $i < strlen($brackets); $i++) {\n \
    \   if ($brackets[$i] == \"<\") {\n      $bracket_count += 1;\n    } else {\n\
    \      $bracket_count -= 1;\n    }\n    if ($bracket_count < 0) {\n      return\
    \ False;\n    }\n  }\n  return $bracket_count == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8gt7xk1o.php:25\n\
    Stack trace:\n#0 /tmp/tmp8gt7xk1o.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp8gt7xk1o.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $open = strlen(substr_count($brackets, '<'));\n  $close = strlen(substr_count($brackets,\
    \ '>'));\n  return $open === $close;\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpug2urxat.php:27\n\
    Stack trace:\n#0 /tmp/tmpug2urxat.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpug2urxat.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = new SplStack();\n    for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n        $c = $brackets[$i];\n        if ($c == '<') {\n            $stack->push($c);\n\
    \        } else if ($c == '>') {\n            if ($stack->isEmpty()) {\n     \
    \           return false;\n            }\n            $stack->pop();\n       \
    \ }\n    }\n    return $stack->isEmpty();\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = str_split($brackets);\n  $count = 0;\n  foreach ($brackets\
    \ as $value) {\n    if ($value == '<') {\n      $count += 1;\n    } else {\n \
    \     $count -= 1;\n    }\n    if ($count < 0) {\n      return false;\n    }\n\
    \  }\n  if ($count == 0) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == '<') {\n            $open++;\n        } else {\n     \
    \       $open--;\n        }\n        if ($open < 0) {\n            return False;\n\
    \        }\n    }\n    return $open == 0;\n}\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $stack = new SplStack();\n  $brackets_array = str_split($brackets);\n \
    \ foreach ($brackets_array as $bracket) {\n    if ($bracket == '<') {\n      $stack->push($bracket);\n\
    \    } else {\n      if (!$stack->isEmpty()) {\n        $stack->pop();\n     \
    \ } else {\n        return false;\n      }\n    }\n  }\n  return $stack->isEmpty();\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$stack = [];\n\t$length = strlen($brackets);\n\tfor ($i = 0; $i < $length;\
    \ $i++) {\n\t\tif ($brackets[$i] == '<') {\n\t\t\tarray_push($stack, '<');\n\t\
    \t} else {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn False;\n\t\t\t} else {\n\
    \t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\t\
    return True;\n\t} else {\n\t\treturn False;\n\t}\n}\n\necho correct_bracketing(\"\
    <>\") . \"\\n\";\necho correct_bracketing(\"<<><>>\") . \"\\n\";\necho correct_bracketing(\"\
    ><<>\") . \"\\n\";\necho correct_bracketing(\"<\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$pairs = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == '<') {\n\t\t\t$pairs++;\n\t\t} elseif ($brackets[$i] == '>') {\n\t\t\t$pairs--;\n\
    \t\t}\n\t\tif ($pairs < 0) {\n\t\t\treturn False;\n\t\t}\n\t}\n\treturn $pairs\
    \ == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $b = str_split($brackets);\n    $open = 0;\n    foreach ($b as $bracket)\
    \ {\n        if ($bracket == '<') {\n            $open += 1;\n        } else {\n\
    \            $open -= 1;\n        }\n        if ($open < 0) {\n            return\
    \ false;\n        }\n    }\n    return $open == 0;\n}\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $arr = str_split($brackets);\n    $open = 0;\n    $close = 0;\n    foreach\
    \ ($arr as $val) {\n        if ($val == \"<\") {\n            $open++;\n     \
    \   } elseif ($val == \">\") {\n            $close++;\n        }\n    }\n    if\
    \ ($open == $close) {\n        return True;\n    } else {\n        return False;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_4tb7_eb.php:40\n\
    Stack trace:\n#0 /tmp/tmp_4tb7_eb.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp_4tb7_eb.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n     \
    \   if ($brackets[$i] == \"<\") {\n            $count++;\n        } else if ($brackets[$i]\
    \ == \">\") {\n            $count--;\n        }\n        if ($count < 0) {\n \
    \           return False;\n        }\n    }\n    return $count == 0;\n}\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t// TODO\n\t$openCount = 0;\n\t$closeCount = 0;\n\tfor ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n\t\tif ($brackets[$i] == '<') {\n\t\t\t$openCount++;\n\t\t} else if\
    \ ($brackets[$i] == '>') {\n\t\t\t$closeCount++;\n\t\t}\n\t}\n\tif ($openCount\
    \ == $closeCount) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\
    \nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2ez13os.php:40\n\
    Stack trace:\n#0 /tmp/tmpg2ez13os.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpg2ez13os.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $num_open = 0;\n  $num_close = 0;\n  for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n    if ($brackets[$i] == \"<\") {\n      $num_open++;\n    } else {\n\
    \      $num_close++;\n    }\n    if ($num_close > $num_open) {\n      return False;\n\
    \    }\n  }\n  return $num_open == $num_close;\n}\n\necho \"Test 1: \";\n$input\
    \ = \"<\";\necho \"input: $input; expected: False; result: \";\nvar_dump(correct_bracketing($input));\n\
    \necho \"Test 2: \";\n$input = \"<>\";\necho \"input: $input; expected: True;\
    \ result: \";\nvar_dump(correct_bracketing($input));\n\necho \"Test 3: \";\n$input\
    \ = \"<<><>>\";\necho \"input: $input; expected: True; result: \";\nvar_dump(correct_bracketing($input));\n\
    \necho \"Test 4: \";\n$input = \"><<>\";\necho \"input: $input; expected: False;\
    \ result: \";\nvar_dump(correct_bracketing($input));\n\necho \"Test 5: \";\n$input\
    \ = \">\";\necho \"input: $input; expected: False; result: \";\nvar_dump(correct_bracketing($input));\n\
    \necho \"Test 6: \";\n$input = \"\";\necho \"input: $input; expected: True; result:\
    \ \";\nvar_dump(correct_bracketing($input));\n\necho \"Test 7: \";\n$input = \"\
    <<<<><><>\";\necho \"input: $input; expected: True; result: \";\nvar_dump(correct_bracketing($input));\n\
    \necho \"Test 8: \";\n$input = \"<<><<<<><>>\";\necho \"input: $input; expected:\
    \ True; result: \";\nvar_dump(correct_bracketing($input));\n\necho \"Test 9: \"\
    ;\n$input = \"<<<<><><>>\";\necho \"input: $\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp71b50oco.php on line 76\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    if ($brackets == '') return True;\n    if (substr($brackets, 0, 1) ==\
    \ '>') return False;\n    if (substr($brackets, -1) == '<') return False;\n  \
    \  $length = strlen($brackets);\n    $end = 0;\n    while (substr($brackets, $end,\
    \ 1) == '<') {\n        $end++;\n    }\n    $start = $end;\n    while (substr($brackets,\
    \ $start, 1) == '>') {\n        $start++;\n    }\n    if ($start >= $length) return\
    \ False;\n    return correct_bracketing(substr($brackets, $end, $start - $end))\
    \ && correct_bracketing(substr($brackets, $start));\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfqqdp1cd.php:34\n\
    Stack trace:\n#0 /tmp/tmpfqqdp1cd.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpfqqdp1cd.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $open = 0;\n  for ($i = 0; $i < strlen($brackets); $i++) {\n    if ($brackets[$i]\
    \ == '<') {\n      $open++;\n    } else if ($brackets[$i] == '>') {\n      $open--;\n\
    \    } else {\n      // Not \"<\" or \">\".\n      return False;\n    }\n    if\
    \ ($open < 0) {\n      // More closing brackets than opening brackets.\n     \
    \ return False;\n    }\n  }\n  return $open == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n    \
    \    if ($brackets[$i] == '<') {\n            array_push($stack, '<');\n     \
    \   } else {\n            if (sizeof($stack) == 0) {\n                return false;\n\
    \            }\n            array_pop($stack);\n        }\n    }\n    return sizeof($stack)\
    \ == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = new SplStack();\n    $length = strlen($brackets);\n    for ($i\
    \ = 0; $i < $length; $i++) {\n        $curr = $brackets[$i];\n        if ($curr\
    \ == '<') {\n            $stack->push($curr);\n        } else {\n            if\
    \ ($stack->isEmpty()) {\n                return false;\n            }\n      \
    \      $stack->pop();\n        }\n    }\n    return $stack->isEmpty();\n}\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open_brackets = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n\
    \        if ($brackets[$i] == \"<\") {\n            $open_brackets += 1;\n   \
    \     } else {\n            $open_brackets -= 1;\n        }\n        if ($open_brackets\
    \ < 0) {\n            return False;\n        }\n    }\n    return $open_brackets\
    \ == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg97h1u7b.php:21\n\
    Stack trace:\n#0 /tmp/tmpg97h1u7b.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpg97h1u7b.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $opening = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n   \
    \     if ($brackets[$i] == \"<\") {\n            $opening++;\n        } else {\n\
    \            $opening--;\n        }\n        if ($opening < 0) {\n           \
    \ return false;\n        }\n    }\n    return $opening == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t// we'll use this to track the number of opening brackets\n\t$num_open\
    \ = 0;\n\t// iterate through each character\n\tfor ($i = 0; $i < strlen($brackets);\
    \ $i += 1) {\n\t\t// if we see an opening bracket, add one to the number of opening\
    \ brackets\n\t\tif ($brackets[$i] == \"<\") {\n\t\t\t$num_open += 1;\n\t\t}\n\t\
    \t// if we see a closing bracket, subtract one from the number of opening brackets\n\
    \t\telse if ($brackets[$i] == \">\") {\n\t\t\t$num_open -= 1;\n\t\t}\n\t\t// if\
    \ the number of opening brackets is ever negative, there's a closing bracket with\
    \ no opening bracket.\n\t\tif ($num_open < 0) {\n\t\t\treturn False;\n\t\t}\n\t\
    }\n\t// if the number of opening brackets is 0, there's the same number of opening\
    \ and closing brackets.\n\tif ($num_open == 0) {\n\t\treturn True;\n\t}\n\t//\
    \ if the number of opening brackets is greater than 0, there's an opening bracket\
    \ with no closing bracket.\n\telse {\n\t\treturn False;\n\t}\n}\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    if (strlen($brackets) % 2 == 1) {\n        return false;\n    }\n   \
    \ if (strpos($brackets, \"><\") !== false) {\n        return false;\n    }\n \
    \   while (strpos($brackets, \"><\") !== false) {\n        $brackets = str_replace(\"\
    ><\", \"\", $brackets);\n    }\n    if (strlen($brackets) == 0) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoejw04bl.php:33\n\
    Stack trace:\n#0 /tmp/tmpoejw04bl.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpoejw04bl.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\n}\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_onqg5i.php:20\n\
    Stack trace:\n#0 /tmp/tmp5_onqg5i.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp5_onqg5i.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  // your solution here\n  return \"True\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp64udqze3.php:22\n\
    Stack trace:\n#0 /tmp/tmp64udqze3.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp64udqze3.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\tif (substr_count($brackets, \"<\") != substr_count($brackets, \">\")) {\n\
    \t\treturn false;\n\t}\n\t$bracket_stack = array();\n\tfor ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n\t\t$this_character = $brackets[$i];\n\t\tif ($this_character == \"\
    <\") {\n\t\t\tarray_push($bracket_stack, $this_character);\n\t\t} elseif ($this_character\
    \ == \">\") {\n\t\t\tif (count($bracket_stack) == 0) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\tarray_pop($bracket_stack);\n\t\t}\n\t}\n\tif (count($bracket_stack)\
    \ == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n     \
    \   if ($brackets[$i] == \"<\") {\n            $count++;\n        } else if ($brackets[$i]\
    \ == \">\") {\n            $count--;\n        }\n        if ($count < 0) {\n \
    \           return False;\n        }\n    }\n    return ($count == 0);\n}\n\n\
    if (correct_bracketing(\"<\")) {\n    echo \"True\\n\";\n} else {\n    echo \"\
    False\\n\";\n}\nif (correct_bracketing(\"<>\")) {\n    echo \"True\\n\";\n} else\
    \ {\n    echo \"False\\n\";\n}\nif (correct_bracketing(\"<<><>>\")) {\n    echo\
    \ \"True\\n\";\n} else {\n    echo \"False\\n\";\n}\nif (correct_bracketing(\"\
    ><<>\")) {\n    echo \"True\\n\";\n} else {\n    echo \"False\\n\";\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "False\nTrue\nTrue\nFalse\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = array();\n\n    for ($i = 0; $i < strlen($brackets); $i++) {\n\
    \        $value = $brackets[$i];\n        if ($value == '<') {\n            array_push($stack,\
    \ $value);\n        } else {\n            array_pop($stack);\n        }\n    }\n\
    \n    return count($stack) == 0;\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporf5l_ft.php:36\n\
    Stack trace:\n#0 /tmp/tmporf5l_ft.php(46): test()\n#1 {main}\n  thrown in /tmp/tmporf5l_ft.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $opening = 0;\n  $closing = 0;\n  for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n    if ($brackets[$i] == \"<\") {\n      $opening++;\n    } elseif\
    \ ($brackets[$i] == \">\") {\n      $closing++;\n    }\n  }\n  if ($opening ==\
    \ $closing) {\n    return TRUE;\n  } else {\n    return FALSE;\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvfp99rbx.php:39\n\
    Stack trace:\n#0 /tmp/tmpvfp99rbx.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpvfp99rbx.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $left = substr_count($brackets, '<');\n    $right = substr_count($brackets,\
    \ '>');\n    return $left == $right;\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbn9m535k.php:28\n\
    Stack trace:\n#0 /tmp/tmpbn9m535k.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpbn9m535k.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    if (strlen($brackets) == 0 || $brackets[0] == \">\") {\n        return\
    \ False;\n    }\n    $balance = 0;\n    for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n        if ($brackets[$i] == \"<\") {\n            $balance += 1;\n     \
    \   } else if ($brackets[$i] == \">\") {\n            $balance -= 1;\n       \
    \ }\n        if ($balance < 0) {\n            return False;\n        }\n    }\n\
    \    return $balance == 0;\n}\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    // TODO\n    $arr = str_split($brackets);\n    $i = 0;\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value == '<') {\n            $i++;\n    \
    \    } else {\n            $i--;\n        }\n        if ($i < 0) {\n         \
    \   return False;\n        }\n    }\n    if ($i == 0) {\n        return True;\n\
    \    } else {\n        return False;\n    }\n}\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$len = strlen($brackets);\n\t$left = 0;\n\t$right = 0;\n\tfor ($i = 0;\
    \ $i < $len; $i++) {\n\t\tif ($brackets[$i] == '<') {\n\t\t\t$left += 1;\n\t\t\
    } else if ($brackets[$i] == '>') {\n\t\t\t$right += 1;\n\t\t}\n\t\tif ($right\
    \ > $left) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($left == $right) {\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\n$result = correct_bracketing('<>');\n\
    echo($result . \"\\n\");\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t// TODO: write your code here\n\t//Your code should return True if every\
    \ opening bracket has a corresponding closing bracket.\n\t//For example: correct_bracketing(\"\
    <\") returns False and correct_bracketing(\"<>\") returns True\n\t//refer to the\
    \ Doctests above for more examples.\n\t\n\t$open = 0;\n\t$close = 0;\n\tfor ($i\
    \ = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i] == \"<\") {\n\t\t\
    \t$open++;\n\t\t}\n\t\telse {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close)\
    \ {\n\t\treturn True;\n\t}\n\telse {\n\t\treturn False;\n\t}\n}\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8hfhxfzu.php:45\n\
    Stack trace:\n#0 /tmp/tmp8hfhxfzu.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp8hfhxfzu.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $bracket_count = 0;\n    $bracket_arr = str_split($brackets);\n    foreach\
    \ ($bracket_arr as $bracket) {\n        if ($bracket == \"<\") {\n           \
    \ $bracket_count++;\n        } else {\n            $bracket_count--;\n       \
    \ }\n        if ($bracket_count < 0) {\n            return False;\n        }\n\
    \    }\n    if ($bracket_count == 0) {\n        return True;\n    } else {\n \
    \       return False;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    //  loop and test each char, or try to use a stack.\n    $len = strlen($brackets);\n\
    \    if ($len == 0) {\n        return true;\n    }\n    if ($len % 2 == 1) {\n\
    \        return false;\n    }\n    $stack = [];\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        $c = $brackets[$i];\n        if ($c == '<') {\n            array_push($stack,\
    \ $c);\n        } else {\n            if (count($stack) == 0) {\n            \
    \    return false;\n            }\n            $peek = end($stack);\n        \
    \    if ($peek == '<') {\n                array_pop($stack);\n            } else\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ count($stack) == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  \n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3h8cn28u.php:21\n\
    Stack trace:\n#0 /tmp/tmp3h8cn28u.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp3h8cn28u.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n    \
    \    $bracket = $brackets[$i];\n        if ($bracket == '<') {\n            array_push($stack,\
    \ $bracket);\n        } else {\n            $prev_bracket = array_pop($stack);\n\
    \            if ($prev_bracket != '<') {\n                return false;\n    \
    \        }\n        }\n    }\n    return count($stack) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $len = strlen($brackets);\n    if ($len % 2 == 1) return false;\n   \
    \ $stack = array();\n    for ($i = 0; $i < $len; $i++) {\n        $c = $brackets[$i];\n\
    \        if ($c == '<') {\n            array_push($stack, $c);\n        } else\
    \ if ($c == '>') {\n            if (count($stack) == 0) return false;\n      \
    \      $e = array_pop($stack);\n            if ($e != '<') return false;\n   \
    \     }\n    }\n    return count($stack) == 0;\n}\n\necho correct_bracketing(\"\
    <\") . \"\\n\";\necho correct_bracketing(\"<>\") . \"\\n\";\necho correct_bracketing(\"\
    <<><>>\") . \"\\n\";\necho correct_bracketing(\"><<>\") . \"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n1\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $open_pos = 0;\n  $close_pos = 0;\n  while($brackets[$open_pos] == '<'){\n\
    \    $open_pos++;\n  }\n  while($brackets[$close_pos] == '>'){\n    $close_pos++;\n\
    \  }\n  if ($open_pos == $close_pos) {\n    return TRUE;\n  }\n  else {\n    return\
    \ FALSE;\n  }\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0s052ml3.php:34\n\
    Stack trace:\n#0 /tmp/tmp0s052ml3.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp0s052ml3.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $newBrackets = '';\n    $index = 0;\n    while ($index < strlen($brackets))\
    \ {\n        $char = $brackets[$index];\n        if ($char == '<') {\n       \
    \     $newBrackets .= $char;\n        } else {\n            if ($newBrackets ==\
    \ '') {\n                return False;\n            } else {\n               \
    \ $newBrackets = substr($newBrackets, 0, -1);\n            }\n        }\n    \
    \    $index = $index + 1;\n    }\n    if ($newBrackets == '') {\n        return\
    \ True;\n    } else {\n        return False;\n    }\n}\n\necho '<pre>';\nprint_r(correct_bracketing('<'));\n\
    print_r(correct_bracketing('<>'));\nprint_r(correct_bracketing('<<><>>'));\nprint_r(correct_bracketing('><<>'));\n\
    print_r(correct_bracketing('<<<><>>'));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: <pre>11</pre>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $split = str_split($brackets);\n  $correct = 0;\n  $incorrect = 0;\n  foreach\
    \ ($split as $key => $value) {\n    if ($value == '<') {\n      $correct++;\n\
    \    } elseif ($value == '>') {\n      $incorrect++;\n    }\n  }\n  if ($correct\
    \ == $incorrect) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxwnplfdc.php:40\n\
    Stack trace:\n#0 /tmp/tmpxwnplfdc.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpxwnplfdc.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    $close = 0;\n    $position = 0;\n    while ($position\
    \ < strlen($brackets)) {\n        if (substr($brackets, $position, 1) == \"<\"\
    ) {\n            $open += 1;\n        } else {\n            $close += 1;\n   \
    \     }\n        $position += 1;\n    }\n    if ($open == $close) {\n        return\
    \ True;\n    } else {\n        return False;\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo1i0_smt.php:40\n\
    Stack trace:\n#0 /tmp/tmpo1i0_smt.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpo1i0_smt.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n   $stack = new SplStack();\n    $len = strlen($brackets);\n    for ($i =\
    \ 0; $i < $len; $i++) {\n        if($brackets[$i] == '<') {\n            $stack->push($brackets[$i]);\n\
    \        } elseif($brackets[$i] == '>') {\n            if($stack->isEmpty()) {\n\
    \                return false;\n            } else {\n                $stack->pop();\n\
    \            }\n        }\n    }\n    return $stack->isEmpty();\n}\n\nif (!assert(correct_bracketing(\"\
    <\") == false)) {\n\techo \"Test 1 fail.\";\n}\nif (!assert(correct_bracketing(\"\
    <>\") == true)) {\n\techo \"Test 2 fail.\";\n}\nif (!assert(correct_bracketing(\"\
    <<><>>\") == true)) {\n\techo \"Test 3 fail.\";\n}\nif (!assert(correct_bracketing(\"\
    ><<>\") == false)) {\n\techo \"Test 4 fail.\";\n}\nif (!assert(correct_bracketing(\"\
    <<><><<>>><<>>>>\") == true)) {\n\techo \"Test 5 fail.\";\n}\nif (!assert(correct_bracketing(\"\
    <><><<>>>>\") == false)) {\n\techo \"Test 6 fail.\";\n}\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert(correct_bracketing('<<><><<>>><<>>>>') == true)\
    \ failed in /tmp/tmpjw7i1_hj.php on line 41\nTest 5 fail."
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = array();\n    $len = strlen($brackets);\n    for ($i = 0; $i\
    \ < $len; $i++) {\n        if ($brackets[$i] == '<') {\n            array_push($open,\
    \ $brackets[$i]);\n        } else {\n            if (count($open) == 0) {\n  \
    \              return False;\n            } else {\n                array_pop($open);\n\
    \            }\n        }\n    }\n    if (count($open) == 0) {\n        return\
    \ True;\n    } else {\n        return False;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    // your code here\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwvlvqa5c.php:21\n\
    Stack trace:\n#0 /tmp/tmpwvlvqa5c.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpwvlvqa5c.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $open_count = 0;\n  for ($i = 0; $i < strlen($brackets); $i++) {\n    if\
    \ ($brackets[$i] == \"<\") {\n      $open_count++;\n    } else {\n      $open_count--;\n\
    \    }\n    if ($open_count < 0) {\n      return False;\n    }\n  }\n  return\
    \ $open_count == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $open = 0;\n  for ($i = 0; $i < strlen($brackets); $i++) {\n    if ($brackets[$i]\
    \ == '<') {\n      $open++;\n    } else {\n      $open--;\n    }\n    if ($open\
    \ < 0) {\n      return False;\n    }\n  }\n  return $open == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $len = strlen($brackets);\n    if ($len == 0) {\n        return False;\n\
    \    }\n    if ($len % 2 == 1) {\n        return False;\n    }\n    $i = 0;\n\
    \    $j = $len - 1;\n    while ($i < $j) {\n        if ($brackets[$i] == \"<\"\
    \ && $brackets[$j] == \">\") {\n            $i += 1;\n            $j -= 1;\n \
    \       } else {\n            return False;\n        }\n    }\n    return True;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdyar_uyl.php:39\n\
    Stack trace:\n#0 /tmp/tmpdyar_uyl.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpdyar_uyl.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    // your code here\n    return false;\n}\n\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplgzno5r8.php:23\n\
    Stack trace:\n#0 /tmp/tmplgzno5r8.php(37): test()\n#1 {main}\n  thrown in /tmp/tmplgzno5r8.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n\t\tif ($brackets[$i] == \"<\") {\n\t\t\t$open++;\n\t\t} elseif ($brackets[$i]\
    \ == \">\") {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ True;\n\t} else {\n\t\treturn False;\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4xfl7odb.php:39\n\
    Stack trace:\n#0 /tmp/tmp4xfl7odb.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp4xfl7odb.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $openingBrackets = [];\n    $closingBrackets = [];\n    for ($i = 0;\
    \ $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == '<') {\n     \
    \       array_push($openingBrackets, $brackets[$i]);\n        } else if ($brackets[$i]\
    \ == '>') {\n            array_push($closingBrackets, $brackets[$i]);\n      \
    \  }\n    }\n    if (count($openingBrackets) == count($closingBrackets)) {\n \
    \       return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9uxavqec.php:39\n\
    Stack trace:\n#0 /tmp/tmp9uxavqec.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp9uxavqec.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\t$left = substr_count($brackets,\
    \ \"<\");\n\t\t$right = substr_count($brackets, \">\");\n\t\tif($left > $right){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpph5ianxr.php:32\n\
    Stack trace:\n#0 /tmp/tmpph5ianxr.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpph5ianxr.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8os07o9q.php:21\n\
    Stack trace:\n#0 /tmp/tmp8os07o9q.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp8os07o9q.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    return $brackets == \"<\";\n}\n\nfunction candidate(...$args) {\n   \
    \ return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa4kwgazr.php:21\n\
    Stack trace:\n#0 /tmp/tmpa4kwgazr.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpa4kwgazr.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\tif ($brackets == \"<\") {\n\t\treturn false;\n\t}\n\t$left = 0;\n\t$right\
    \ = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"<\") {\n\t\t\t$left += 1;\n\t\t} else {\n\t\t\t$right += 1;\n\t\t}\n\t\t\
    if ($right > $left) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($left == $right)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$brackets_array = str_split($brackets);\n\t$right_brackets = array();\n\
    \tforeach ($brackets_array as $bracket) {\n\t\tif ($bracket == \"<\") {\n\t\t\t\
    $right_brackets[] = \">\";\n\t\t} else {\n\t\t\t$last_index = count($right_brackets)\
    \ - 1;\n\t\t\tif ($right_brackets[$last_index] == \">\") {\n\t\t\t\tunset($right_brackets[$last_index]);\n\
    \t\t\t} else {\n\t\t\t\treturn False;\n\t\t\t}\n\t\t}\n\t}\n\tif (count($right_brackets)\
    \ > 0) {\n\t\treturn False;\n\t}\n\treturn True;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7rhs9xc9.php:39\n\
    Stack trace:\n#0 /tmp/tmp7rhs9xc9.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp7rhs9xc9.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    // $count = 0;\n    // for ($i = 0; $i < strlen($brackets); $i++){\n\
    \    //   if ($brackets[$i] == '<'){\n    //     $count++;\n    //   } else {\n\
    \    //     $count--;\n    //   }\n    //   if ($count < 0){\n    //     return\
    \ False;\n    //   }\n    // }\n    // return $count == 0;\n    $count = 0;\n\
    \    for ($i = 0; $i < strlen($brackets); $i++){\n      if ($brackets[$i] == '<'){\n\
    \        $count++;\n      } else {\n        $count--;\n      }\n      if ($count\
    \ < 0){\n        return False;\n      }\n    }\n    return $count == 0;\n}\n\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $length = strlen($brackets);\n  $diff = 0;\n  for ($i = 0; $i < $length;\
    \ $i++) {\n    if ($brackets[$i] == '<') {\n      $diff++;\n    } else {\n   \
    \   $diff--;\n    }\n    if ($diff < 0) {\n      return False;\n    }\n  }\n \
    \ return $diff == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    if ($brackets == \"\") {\n        return false;\n    }\n    $new_str\
    \ = \"\";\n    $new_str_array = [];\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        $new_str .= $brackets[$i];\n        if ($new_str == \"<>\"\
    \ || $new_str == \"><\") {\n            $new_str = \"\";\n        }\n    }\n \
    \   return $new_str == \"\";\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph39n2rt2.php:33\n\
    Stack trace:\n#0 /tmp/tmph39n2rt2.php(46): test()\n#1 {main}\n  thrown in /tmp/tmph39n2rt2.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwyxg8l76.php:20\n\
    Stack trace:\n#0 /tmp/tmpwyxg8l76.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpwyxg8l76.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$bracket_check = 0;\n\t$length = strlen($brackets);\n\tfor ($i = 0; $i\
    \ < $length; $i++) {\n\t\tif (substr($brackets, $i, 1) == \"<\") {\n\t\t\t$bracket_check++;\n\
    \t\t} else {\n\t\t\t$bracket_check--;\n\t\t}\n\t\tif ($bracket_check < 0) {\n\t\
    \t\treturn False;\n\t\t}\n\t}\n\tif ($bracket_check != 0) {\n\t\treturn False;\n\
    \t}\n\treturn True;\n}\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $open_brackets = 0;\n  for ($i = 0; $i < strlen($brackets); $i++) {\n \
    \   if ($brackets[$i] == \"<\") {\n      $open_brackets += 1;\n    } else if ($brackets[$i]\
    \ == \">\") {\n      $open_brackets -= 1;\n    }\n    if ($open_brackets < 0)\
    \ {\n      return False;\n    }\n  }\n  return $open_brackets == 0;\n}\n\n$brackets\
    \ = $_GET[\"brackets\"];\n$result = correct_bracketing($brackets);\necho $result;\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    if ($brackets === \"\") {\n        return true;\n    }\n    $open = substr_count($brackets,\
    \ \"<\");\n    $close = substr_count($brackets, \">\");\n    if ($open == $close)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnxz0nm3a.php:34\n\
    Stack trace:\n#0 /tmp/tmpnxz0nm3a.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpnxz0nm3a.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $stack = array();\n  for ($i = 0; $i < strlen($brackets); $i++) {\n   \
    \ if ($brackets[$i] == '<') {\n      array_push($stack, '<');\n    } else {\n\
    \      if (count($stack) == 0) {\n        return False;\n      }\n      array_pop($stack);\n\
    \    }\n  }\n  return (count($stack) == 0);\n}\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $correct = array();\n    $len = strlen($brackets);\n    for ($i = 0;\
    \ $i < $len; $i++) {\n        $current = $brackets[$i];\n        if ($current\
    \ == '<') {\n            array_push($correct, $current);\n        } elseif ($current\
    \ == '>') {\n            if (empty($correct)) {\n                return false;\n\
    \            } else {\n                array_pop($correct);\n            }\n \
    \       }\n    }\n    if (empty($correct)) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n\necho correct_bracketing(\"<\");\necho\
    \ \"\\n\";\necho correct_bracketing(\"<>\");\necho \"\\n\";\necho correct_bracketing(\"\
    <<><>>\");\necho \"\\n\";\necho correct_bracketing(\"><<>\");\necho \"\\n\";\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n1\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = new SplStack();\n    for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n        if ($brackets[$i] == '<') {\n            $stack->push($brackets[$i]);\n\
    \        } else {\n            $stack->pop();\n        }\n    }\n    return $stack->isEmpty();\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught RuntimeException: Can't pop from an empty datastructure\
    \ in /tmp/tmp4up4hl_c.php:18\nStack trace:\n#0 /tmp/tmp4up4hl_c.php(18): SplDoublyLinkedList->pop()\n\
    #1 /tmp/tmp4up4hl_c.php(25): correct_bracketing('<<<><>>>>')\n#2 /tmp/tmp4up4hl_c.php(33):\
    \ candidate('<<<><>>>>')\n#3 /tmp/tmp4up4hl_c.php(43): test()\n#4 {main}\n  thrown\
    \ in /tmp/tmp4up4hl_c.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  // our counter\n  $counter = 0;\n  // break it into an array of chars\n\
    \  $chars = str_split($brackets);\n  // iterate through the chars\n  foreach ($chars\
    \ as $char) {\n    // if we see a '<' then increment our counter\n    if ($char\
    \ == '<') {\n      $counter++;\n    }\n    // if we see a '>' then decrement our\
    \ counter\n    if ($char == '>') {\n      $counter--;\n    }\n    // if our counter\
    \ ever goes negative then we know there was a closing bracket without a corresponding\
    \ opening bracket\n    if ($counter < 0) {\n      return false;\n    }\n  }\n\
    \  // if we made it all the way through, the counter should be 0, which means\
    \ we had an even number of '<' and '>' and the bracketing was correct\n  return\
    \ $counter == 0;\n}\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    if (strlen($brackets) % 2) {\n        return false;\n    }\n    $length\
    \ = strlen($brackets);\n    $opening = 0;\n    for ($i = 0; $i < $length; $i++)\
    \ {\n        if ($brackets[$i] == '<') {\n            $opening++;\n        } else\
    \ {\n            $opening--;\n        }\n        if ($opening < 0) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\necho correct_bracketing(\"\
    <\") ? \"True\" : \"False\";\necho \"\\n\";\necho correct_bracketing(\"<>\") ?\
    \ \"True\" : \"False\";\necho \"\\n\";\necho correct_bracketing(\"<<><>>\") ?\
    \ \"True\" : \"False\";\necho \"\\n\";\necho correct_bracketing(\"><<>\") ? \"\
    True\" : \"False\";\necho \"\\n\";\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "False\nTrue\nTrue\nFalse\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpow5g1mjd.php:51\nStack trace:\n#0 /tmp/tmpow5g1mjd.php(58): test()\n\
    #1 {main}\n  thrown in /tmp/tmpow5g1mjd.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t// YOUR CODE HERE\n\treturn;\n}\n\nfunction candidate(...$args) {\n   \
    \ return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnvnmr4wf.php:22\n\
    Stack trace:\n#0 /tmp/tmpnvnmr4wf.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpnvnmr4wf.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $count = 0;\n  for ($i = 0; $i < strlen($brackets); $i++){\n    if ($brackets[$i]\
    \ == \"<\") {\n      $count += 1;\n    } elseif ($brackets[$i] == \">\") {\n \
    \     $count -= 1;\n    }\n    if ($count < 0) {\n      return false;\n    }\n\
    \  }\n  if ($count == 0) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = new SplStack();\n    for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n        if ($brackets[$i] == '<') {\n            $stack->push('<');\n   \
    \     } else {\n            if ($stack->isEmpty()) {\n                return False;\n\
    \            }\n            $stack->pop();\n        }\n    }\n    return $stack->isEmpty();\n\
    }\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $length = strlen($brackets);\n  $open = 0;\n  for ($i = 0; $i < $length;\
    \ $i++) {\n    if ($brackets[$i] == '<') {\n      $open++;\n    } else {\n   \
    \   $open--;\n    }\n    if ($open < 0) {\n      return False;\n    }\n  }\n \
    \ return $open == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $i = 0;\n    $j = count($brackets_array);\n\
    \    while($i < $j) {\n        if($brackets_array[$i] == \"<\") {\n          \
    \  $i += 1;\n        } elseif($brackets_array[$i] == \">\") {\n            if($i\
    \ == 0) {\n                return False;\n            } else {\n             \
    \   $i -= 1;\n            }\n        }\n    }\n    if($i == 0) {\n        return\
    \ True;\n    } else {\n        return False;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjnooq_vy.php:21\n\
    Stack trace:\n#0 /tmp/tmpjnooq_vy.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpjnooq_vy.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqoefm9v_.php:21\n\
    Stack trace:\n#0 /tmp/tmpqoefm9v_.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpqoefm9v_.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8jj6v5zm.php:25\n\
    Stack trace:\n#0 /tmp/tmp8jj6v5zm.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp8jj6v5zm.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$len = strlen($brackets);\n\t$temp = 0;\n\t$count = 0;\n\tfor ($i = 0;\
    \ $i < $len; $i++) {\n\t\tif ($brackets[$i] == '<') {\n\t\t\t$temp++;\n\t\t} else\
    \ {\n\t\t\t$temp--;\n\t\t}\n\t\tif ($temp == 0) {\n\t\t\t$count++;\n\t\t}\n\t\
    }\n\treturn $count == 2;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4_cyb32i.php:34\n\
    Stack trace:\n#0 /tmp/tmp4_cyb32i.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp4_cyb32i.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = str_split($brackets);\n    $temp = array();\n    foreach\
    \ ($brackets as $bracket) {\n        if ($bracket == '<') {\n            array_push($temp,\
    \ $bracket);\n        } else {\n            if (empty($temp)) {\n            \
    \    return false;\n            } else {\n                array_pop($temp);\n\
    \            }\n        }\n    }\n    if (empty($temp)) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$opening = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"<\") {\n\t\t\t$opening++;\n\t\t} else {\n\t\t\t$opening--;\n\t\t}\n\t\t\
    if ($opening < 0) {\n\t\t\treturn False;\n\t\t}\n\t}\n\treturn ($opening == 0);\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    // your code here\n}\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpntqnr3_q.php:20\n\
    Stack trace:\n#0 /tmp/tmpntqnr3_q.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpntqnr3_q.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    // put your code here\n    // hint: a stack is helpful here\n    return\
    \ False;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_k3942_u.php:23\n\
    Stack trace:\n#0 /tmp/tmp_k3942_u.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp_k3942_u.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$count = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"<\") {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count\
    \ < 0) {\n\t\t\treturn False;\n\t\t}\n\t}\n\treturn $count == 0;\n}\necho correct_bracketing(\"\
    <><>\");\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i] ==\
    \ '<') {\n\t\t\tfor ($j = $i + 1; $j < strlen($brackets); $j++) {\n\t\t\t\tif\
    \ ($brackets[$j] == '>') {\n\t\t\t\t\t$brackets[$i] = '1';\n\t\t\t\t\t$brackets[$j]\
    \ = '1';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (strstr($brackets,\
    \ '<') == FALSE && strstr($brackets, '>') == FALSE) {\n\t\treturn TRUE;\n\t} else\
    \ {\n\t\treturn FALSE;\n\t}\n}\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$close=str_split(\"<>\");\n\t$length=strlen($brackets);\n\t$new=[];\n\t\
    for($i=0;$i<$length;$i++){\n\t\tif($brackets[$i]==$close[0]){\n\t\t\tarray_push($new,$close[0]);\n\
    \t\t}\n\t\telse{\n\t\t\tarray_pop($new);\n\t\t}\n\t}\n\tif(count($new)==0){\n\t\
    \treturn True;\n\t}\n\telse{\n\t\treturn False;\n\t}\n}\nprint correct_bracketing(\"\
    <\").\"\\n\";\nprint correct_bracketing(\"<>\").\"\\n\";\nprint correct_bracketing(\"\
    <<><>>\").\"\\n\";\nprint correct_bracketing(\"><<>\").\"\\n\";\nprint correct_bracketing(\"\
    <>>\").\"\\n\";\nprint correct_bracketing(\"<><<\").\"\\n\";\nprint correct_bracketing(\"\
    <><<>\").\"\\n\";\nprint correct_bracketing(\"<><<><>\").\"\\n\";\nprint correct_bracketing(\"\
    <><<><<>\").\"\\n\";\nprint correct_bracketing(\"<<<><>\").\"\\n\";\nprint correct_bracketing(\"\
    <<<><<>\").\"\\n\";\nprint correct_bracketing(\"<<<<>>><<<>>\").\"\\n\";\nprint\
    \ correct_bracketing(\"<<<<<>>>>>>\").\"\\n\";\nprint correct_bracketing(\"<<<<<>>>>>\"\
    ).\"\\n\";\nprint correct_bracketing(\"<<<<>>>><>\").\"\\n\";\nprint correct_bracketing(\"\
    <<<<>>>>>\").\"\\n\";\nprint correct_bracketing(\"<<<<>>>\").\"\\n\";\nprint correct_bracketing(\"\
    <<<>>>>>>\").\"\\n\";\nprint correct_bracketing(\"<<<>>>>>\").\"\\n\";\nprint\
    \ correct_bracketing(\"<<<>>>>\").\"\\n\";\nprint correct_bracketing(\"<<<>>>\"\
    ).\"\\n\";\nprint correct_bracketing(\"<<>>>><>\").\"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n1\n\n1\n\n\n\n\n\n\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n1\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpk3lazmps.php:63\nStack trace:\n\
    #0 /tmp/tmpk3lazmps.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpk3lazmps.php\
    \ on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    if (strlen($brackets) % 2 != 0) {\n        return false;\n    }\n\n \
    \   $check_brackets = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n\
    \        if ($brackets[$i] == '<') {\n            array_push($check_brackets,\
    \ $brackets[$i]);\n        } else {\n            if (count($check_brackets) ==\
    \ 0) {\n                return false;\n            }\n            array_pop($check_brackets);\n\
    \        }\n    }\n\n    if (count($check_brackets) == 0) {\n        return true;\n\
    \    }\n    return false;\n}\n\ncorrect_bracketing(\"<<><>>\");\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = str_split($brackets);\n    $stack = [];\n    foreach ($brackets\
    \ as $char) {\n        if ($char == '<') {\n            array_push($stack, $char);\n\
    \        } elseif ($char == '>') {\n            if (count($stack) > 0) {\n   \
    \             array_pop($stack);\n            } else {\n                return\
    \ False;\n            }\n        }\n    }\n    return count($stack) == 0;\n}\n\
    \nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open_count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n\
    \        if ($brackets[$i] == \"<\") {\n            $open_count++;\n        }\
    \ else {\n            $open_count--;\n        }\n        if ($open_count < 0)\
    \ {\n            return false;\n        }\n    }\n    return $open_count == 0;\n\
    }\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\t$char\
    \ = $brackets[$i];\n\t\tif ($char == '<') {\n\t\t\tarray_push($stack, $char);\n\
    \t\t} elseif ($char == '>') {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn False;\n\
    \t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\treturn empty($stack);\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$bracketcount = 0;\n\t$length = strlen($brackets);\n\tfor ($i = 0; $i <\
    \ $length; $i++) {\n\t\tif ($brackets[$i] == \"<\") {\n\t\t\t$bracketcount++;\n\
    \t\t} elseif ($brackets[$i] == \">\") {\n\t\t\t$bracketcount--;\n\t\t}\n\t\tif\
    \ ($bracketcount < 0) {\n\t\t\treturn False;\n\t\t}\n\t}\n\tif ($bracketcount\
    \ != 0) {\n\t\treturn False;\n\t}\n\treturn True;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n    \
    \    $b = $brackets[$i];\n        if ($b == '<') {\n            array_push($stack,\
    \ $b);\n        } else if ($b == '>') {\n            $top = array_pop($stack);\n\
    \            if ($top != '<') {\n                return false;\n            }\n\
    \        }\n    }\n    return count($stack) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t// $correct = true;\n\t// $open = 0;\n\t// $close = 0;\n\t// $len = strlen($brackets);\n\
    \t// for ($i = 0; $i < $len; $i++) {\n\t// \tif ($brackets[$i] == \"<\") {\n\t\
    // \t\t$open++;\n\t// \t} else {\n\t// \t\t$close++;\n\t// \t}\n\t// }\n\t// if\
    \ ($open == $close) {\n\t// \treturn true;\n\t// } else {\n\t// \treturn false;\n\
    \t// }\n\t// The following solution is a more pythonic solution.\n\treturn substr_count($brackets,\
    \ \"<\") == substr_count($brackets, \">\");\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqt_w9hxh.php:43\n\
    Stack trace:\n#0 /tmp/tmpqt_w9hxh.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpqt_w9hxh.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $length = strlen($brackets);\n    $open = 0;\n    for ($i = 0; $i < $length;\
    \ $i++) {\n        if ($brackets[$i] == '<') {\n            $open++;\n       \
    \ } else {\n            $open--;\n        }\n        if ($open < 0) {\n      \
    \      return false;\n        }\n    }\n    return $open == 0;\n}\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$stack = [];\n\t$open = ['<'];\n\t$close = ['>'];\n\tforeach (str_split($brackets)\
    \ as $character) {\n\t\tif (in_array($character, $open)) {\n\t\t\tarray_push($stack,\
    \ $character);\n\t\t} elseif (in_array($character, $close)) {\n\t\t\tif (empty($stack))\
    \ {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\t$match = array_pop($stack);\n\
    \t\t\t\tif ($match != $character) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn empty($stack);\n}\n\nvar_dump(correct_bracketing(\"<\"\
    ));\nvar_dump(correct_bracketing(\"<>\"));\nvar_dump(correct_bracketing(\"<<><>>\"\
    ));\nvar_dump(correct_bracketing(\"><<>\"));\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "bool(false)\nbool(false)\nbool(false)\nbool(false)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpbk2zhq8d.php:43\nStack trace:\n#0 /tmp/tmpbk2zhq8d.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpbk2zhq8d.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = new Stack();\n    for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n        $bracket = $brackets[$i];\n        if ($bracket == '<') {\n     \
    \       $stack->push($bracket);\n        } else if ($bracket == '>') {\n     \
    \       if ($stack->top() == '<') {\n                $stack->pop();\n        \
    \    } else {\n                return False;\n            }\n        }\n    }\n\
    \    return $stack->size() == 0;\n}\n\n$line = readline(\"brackets: \");\nprint\
    \ correct_bracketing($line) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function readline() in\
    \ /tmp/tmpbng0ftw0.php:29\nStack trace:\n#0 {main}\n  thrown in /tmp/tmpbng0ftw0.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  if(strlen($brackets) == 0){\n    return true;\n  }\n  $arr = str_split($brackets);\n\
    \  $open = 0;\n  $close = 0;\n  for($i = 0; $i < count($arr); $i++){\n    if($arr[$i]\
    \ == \"<\"){\n      $open += 1;\n    }\n    if($arr[$i] == \">\"){\n      $close\
    \ += 1;\n    }\n    if($close > $open){\n      return false;\n    }\n  }\n  if($open\
    \ == $close){\n    return true;\n  }\n  return false;\n}\n\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"<\") {\n            $open++;\n     \
    \   } elseif ($brackets[$i] == \">\") {\n            $close++;\n        }\n  \
    \  }\n    if ($open == $close) {\n        return True;\n    } else {\n       \
    \ return False;\n    }\n}\necho correct_bracketing(\"<\") . \"\\n\";\necho correct_bracketing(\"\
    <>\") . \"\\n\";\necho correct_bracketing(\"<<><>>\") . \"\\n\";\necho correct_bracketing(\"\
    ><<>\") . \"\\n\";\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvz4a0cc6.php:42\n\
    Stack trace:\n#0 /tmp/tmpvz4a0cc6.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpvz4a0cc6.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n     \
    \   if ($brackets[$i] == \"<\") {\n            $count++;\n        } else {\n \
    \           $count--;\n        }\n        if ($count < 0) {\n            return\
    \ False;\n        }\n    }\n    return $count == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n   if (substr_count($brackets, \"<\") == substr_count($brackets, \">\"))\
    \ {\n      return True;\n   } else {\n      return False;\n   }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7dp_7vh0.php:30\n\
    Stack trace:\n#0 /tmp/tmp7dp_7vh0.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp7dp_7vh0.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($brackets); $i++){\n\t\tif ($brackets[$i]\
    \ == \"<\"){\n\t\t\tarray_push($stack, $brackets[$i]);\n\t\t}\n\t\telseif ($brackets[$i]\
    \ == \">\"){\n\t\t\tif (count($stack) == 0){\n\t\t\t\treturn false;\n\t\t\t}\n\
    \t\t\tarray_pop($stack);\n\t\t}\n\t}\n\tif (count($stack) == 0){\n\t\treturn true;\n\
    \t}\n\telse{\n\t\treturn false;\n\t}\n}\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$counter = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"<\") {\n\t\t\t$counter++;\n\t\t} elseif ($brackets[$i] == \">\") {\n\t\t\
    \t$counter--;\n\t\t}\n\t\tif ($counter < 0) {\n\t\t\treturn False;\n\t\t}\n\t\
    }\n\tif ($counter == 0) {\n\t\treturn True;\n\t} else {\n\t\treturn False;\n\t\
    }\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\tif (strlen($brackets) % 2 != 0) {\n\t\treturn False;\n\t}\n\t$check_brackets\
    \ = str_split($brackets);\n\t$opening_brackets = 0;\n\tforeach ($check_brackets\
    \ as $key => $value) {\n\t\tif ($value == \"<\") {\n\t\t\t$opening_brackets++;\n\
    \t\t} elseif ($value == \">\") {\n\t\t\t$opening_brackets--;\n\t\t}\n\t\tif ($opening_brackets\
    \ < 0) {\n\t\t\treturn False;\n\t\t}\n\t}\n\tif ($opening_brackets == 0) {\n\t\
    \treturn True;\n\t} else {\n\t\treturn False;\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = str_split($brackets);\n  $length = count($brackets);\n  $stack\
    \ = [];\n  $i = 0;\n  while ($i < $length) {\n    if ($brackets[$i] == '<') {\n\
    \      array_push($stack, '<');\n    } else {\n      if (count($stack) == 0) {\n\
    \        return False;\n      } else {\n        array_pop($stack);\n      }\n\
    \    }\n    $i += 1;\n  }\n  if (count($stack) == 0) {\n    return True;\n  }\
    \ else {\n    return False;\n  }\n}\n\necho correct_bracketing(\"<>\");\necho\
    \ \"\\n\";\necho correct_bracketing(\"<><>\");\necho \"\\n\";\necho correct_bracketing(\"\
    <<><>>\");\necho \"\\n\";\necho correct_bracketing(\"><<>\");\necho \"\\n\";\n\
    \nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n1\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $leftcount = 0;\n  $rightcount = 0;\n  for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n    if ($brackets[$i] == \"<\") {\n      $leftcount++;\n    } elseif\
    \ ($brackets[$i] == \">\") {\n      $rightcount++;\n    }\n  }\n  if ($leftcount\
    \ != $rightcount) {\n    return False;\n  } else {\n    return True;\n  }\n}\n\
    \nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpydq8s5ox.php:39\n\
    Stack trace:\n#0 /tmp/tmpydq8s5ox.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpydq8s5ox.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$opened = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == '<') {\n\t\t\t$opened++;\n\t\t} else {\n\t\t\t$opened--;\n\t\t}\n\t\tif ($opened\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $opened == 0;\n}\n\nvar_dump(correct_bracketing(\"\
    <\"));\nvar_dump(correct_bracketing(\"<>\"));\nvar_dump(correct_bracketing(\"\
    <<><>>\"));\nvar_dump(correct_bracketing(\"><<>\"));\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "bool(false)\nbool(true)\nbool(true)\nbool(false)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    return !preg_match('/[<]{2,}|[>]{2,}/', $brackets);\n}\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5wb93imi.php:21\n\
    Stack trace:\n#0 /tmp/tmp5wb93imi.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp5wb93imi.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $stack = new SplStack();\n  for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n    if ($brackets[$i] == '<') {\n      $stack->push($brackets[$i]);\n   \
    \ } else {\n      if ($stack->isEmpty()) {\n        return false;\n      }\n \
    \     $stack->pop();\n    }\n  }\n  return $stack->isEmpty();\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$brackets = str_split($brackets);\n\tforeach ($brackets as $key => $char)\
    \ {\n\t\tif ($char == '<') {\n\t\t\tforeach ($brackets as $key2 => $char2) {\n\
    \t\t\t\tif ($char2 == '>') {\n\t\t\t\t\tunset($brackets[$key]);\n\t\t\t\t\tunset($brackets[$key2]);\n\
    \t\t\t\t\tif (empty($brackets)) {\n\t\t\t\t\t\treturn True;\n\t\t\t\t\t}\n\t\t\
    \t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn False;\n}\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0t8guf4i.php:40\n\
    Stack trace:\n#0 /tmp/tmp0t8guf4i.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp0t8guf4i.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$opening_brackets = array();\n\t$stack = array();\n\tfor ($i = 0; $i <\
    \ strlen($brackets); $i++) {\n\t\tif ($brackets[$i] == '<') {\n\t\t\tarray_push($stack,\
    \ $brackets[$i]);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn\
    \ false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\t\
    if (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t\
    }\n}\n\necho correct_bracketing(\"<\") . PHP_EOL;\necho correct_bracketing(\"\
    <>\") . PHP_EOL;\necho correct_bracketing(\"<<><>>\") . PHP_EOL;\necho correct_bracketing(\"\
    ><<>\") . PHP_EOL;\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n1\n\n"
  stderr: ''
  exit_code: 0
  status: OK
