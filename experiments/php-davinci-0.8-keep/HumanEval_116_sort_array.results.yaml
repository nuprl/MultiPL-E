name: HumanEval_116_sort_array
language: php
results:
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $array = [];\n  foreach ($arr as $value) {\n    $ones = substr_count(decbin($value),\
    \ 1);\n    if (!isset($array[$ones])) $array[$ones] = [];\n    $array[$ones][]\
    \ = $value;\n  }\n  ksort($array);\n  $result = [];\n  foreach ($array as $ones\
    \ => $values) {\n    sort($values);\n    $result = array_merge($result, $values);\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl7ggtttj.php:31\n\
    Stack trace:\n#0 /tmp/tmpl7ggtttj.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpl7ggtttj.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = [];\n    foreach ($arr as $n) {\n        $ones[] = strlen(decbin($n))\
    \ - strlen(str_replace('1', '', decbin($n)));\n    }\n    $sorted = array_combine($arr,\
    \ $ones);\n    arsort($sorted);\n    return array_keys($sorted);\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4kyn__1a.php:23\n\
    Stack trace:\n#0 /tmp/tmp4kyn__1a.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4kyn__1a.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $hash = [];\n  foreach ($arr as $value) {\n    $key = decbin($value);\n    $hash[$key][]\
    \ = $value;\n  }\n  ksort($hash);\n  foreach ($hash as $key => $arr) {\n    sort($hash[$key]);\n\
    \  }\n  $array = [];\n  foreach ($hash as $arr) {\n    foreach ($arr as $value)\
    \ {\n      $array[] = $value;\n    }\n  }\n  return $array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk475a3lp.php:33\n\
    Stack trace:\n#0 /tmp/tmpk475a3lp.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpk475a3lp.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $arr = array_map(decbin, $arr);\n    $arr = array_map(function($v) { return\
    \ strlen($v); }, $arr);\n    array_multisort($arr, SORT_ASC, $arr, SORT_NUMERIC,\
    \ $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: Use of undefined constant decbin - assumed 'decbin' (this will\
    \ throw an Error in a future version of PHP) in /tmp/tmpnydx3136.php on line 10\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnydx3136.php:21\nStack\
    \ trace:\n#0 /tmp/tmpnydx3136.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpnydx3136.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $counts = [];\n  $sorted = [];\n  $decs = [];\n  foreach ($arr as $num) {\n\
    \    $decs[] = $num;\n    $counts[] = substr_count(decbin($num), '1');\n  }\n\
    \  arsort($counts);\n  foreach ($counts as $key => $count) {\n    $sorted[] =\
    \ $decs[$key];\n  }\n  return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkv1k9srv.php:29\n\
    Stack trace:\n#0 /tmp/tmpkv1k9srv.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpkv1k9srv.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $int_arr = array_map(function($int) {\n        return (int) $int;\n    },\
    \ $arr);\n    asort($int_arr);\n    $sorted_array = array_map(function($int) {\n\
    \        return (string) $int;\n    }, $int_arr);\n    return $sorted_array;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmpbuidmq.php:25\n\
    Stack trace:\n#0 /tmp/tmpmpbuidmq.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpmpbuidmq.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $results = [];\n    foreach ($arr as $value) {\n        $str = decbin($value);\n\
    \        $results[$str][] = $value;\n    }\n    ksort($results);\n    $result\
    \ = [];\n    foreach ($results as $key => $value) {\n        sort($value);\n \
    \       $result = array_merge($result, $value);\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphasnadd5.php:29\n\
    Stack trace:\n#0 /tmp/tmphasnadd5.php(39): test()\n#1 {main}\n  thrown in /tmp/tmphasnadd5.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   if (empty($arr)) {\n        return [];\n    }\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        $arr[$i] = [\n            'ones' => substr_count(decbin($arr[$i]),\
    \ '1'),\n            'value' => $arr[$i]\n        ];\n    }\n    usort($arr, function\
    \ ($a, $b) {\n        if ($a['ones'] == $b['ones']) {\n            return $a['value']\
    \ - $b['value'];\n        }\n        return $a['ones'] - $b['ones'];\n    });\n\
    \    for ($i = 0; $i < count($arr); $i++) {\n        $arr[$i] = $arr[$i]['value'];\n\
    \    }\n    return $arr;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3aw1qi6p.php:36\n\
    Stack trace:\n#0 /tmp/tmp3aw1qi6p.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp3aw1qi6p.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $arr = array_map('decbin', $arr);\n  foreach ($arr as $key => $value) {\n  \
    \  $number_of_ones = substr_count($value, '1');\n    $arr[$key] = [\n      'noo'\
    \ => $number_of_ones,\n      'value' => bindec($value)\n    ];\n  }\n  usort($arr,\
    \ function($a, $b) {\n    if ($a['noo'] == $b['noo']) {\n      return $a['value']\
    \ - $b['value'];\n    }\n    return $a['noo'] - $b['noo'];\n  });\n  foreach ($arr\
    \ as $key => $value) {\n    $arr[$key] = $value['value'];\n  }\n  return $arr;\n\
    }\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpii2ckncp.php:35\n\
    Stack trace:\n#0 /tmp/tmpii2ckncp.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpii2ckncp.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $ones = array_map(function($number) {\n    return [$number, substr_count(decbin($number),\
    \ '1')];\n  }, $arr);\n  uasort($ones, function($a, $b) {\n    if ($a[1] > $b[1])\
    \ {\n      return 1;\n    } elseif ($a[1] == $b[1]) {\n      return $a[0] > $b[0]\
    \ ? 1 : -1;\n    } else {\n      return -1;\n    }\n  });\n  return array_column($ones,\
    \ 0);\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdvepdoqh.php:31\n\
    Stack trace:\n#0 /tmp/tmpdvepdoqh.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpdvepdoqh.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $a = [];\n  foreach ($arr as $value) {\n    $a[] = [decbin($value), $value];\n\
    \  }\n  for ($i = 0; $i < count($a) - 1; $i++) {\n    for ($j = $i + 1; $j < count($a);\
    \ $j++) {\n      if (substr_count($a[$i][0], '1') > substr_count($a[$j][0], '1'))\
    \ {\n        $t = $a[$i];\n        $a[$i] = $a[$j];\n        $a[$j] = $t;\n  \
    \    } elseif (substr_count($a[$i][0], '1') == substr_count($a[$j][0], '1')) {\n\
    \        if ($a[$i][1] > $a[$j][1]) {\n          $t = $a[$i];\n          $a[$i]\
    \ = $a[$j];\n          $a[$j] = $t;\n        }\n      }\n    }\n  }\n  for ($i\
    \ = 0; $i < count($a); $i++) {\n    $a[$i] = $a[$i][1];\n  }\n  return $a;\n}\n\
    \nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnjwsi9mf.php:41\n\
    Stack trace:\n#0 /tmp/tmpnjwsi9mf.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpnjwsi9mf.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $decimal = array();\n    $binary = array();\n    foreach ($arr as $key =>\
    \ $val) {\n        $decimal[$key] = $val;\n        $binary[$key] = decbin($val);\n\
    \    }\n    array_multisort(substr_count($binary, '1'), SORT_ASC, $binary, $decimal);\n\
    \    return $decimal;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: substr_count() expects parameter 1 to be string, array given\
    \ in /tmp/tmpsjad7wjg.php on line 16\n\nWarning: array_multisort(): Argument #1\
    \ is expected to be an array or a sort flag in /tmp/tmpsjad7wjg.php on line 16\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsjad7wjg.php:24\nStack\
    \ trace:\n#0 /tmp/tmpsjad7wjg.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpsjad7wjg.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ foreach ($arr as $key => $value) {\n    $ones[$key] = substr_count(decbin($value),\
    \ '1');\n  }\n  asort($ones);\n  $keys = array_keys($ones);\n  foreach ($keys\
    \ as $key => $value) {\n    $result[$key] = $arr[$value];\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9pyoxdd4.php:25\n\
    Stack trace:\n#0 /tmp/tmp9pyoxdd4.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp9pyoxdd4.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ usort($arr, function($a, $b) {\n    $c = substr_count(decbin($a), '1');\n  \
    \  $d = substr_count(decbin($b), '1');\n    if ($c === $d) {\n      return $a\
    \ - $b;\n    }\n    return $c - $d;\n  });\n  return $arr;\n}\n\necho sort_array([1,\
    \ 0, 2, 3, 4]) . \"\\n\";\necho sort_array([0, 1, 2, 3, 4]) . \"\\n\";\necho sort_array([0,\
    \ 0, 0, 0, 0]) . \"\\n\";\necho sort_array([0, 0, 0, 1, 0]) . \"\\n\";\necho sort_array([1,\
    \ 0, 2, 3, 4]) . \"\\n\";\necho sort_array([1, 5, 2, 3, 4]) . \"\\n\";\necho sort_array([-2,\
    \ -3, -4, -5, -6]) . \"\\n\";\necho sort_array([-2, -6, -8, -1, -5]) . \"\\n\"\
    ;\necho sort_array([2, 5, 3, 4, 1]) . \"\\n\";\necho sort_array([-7, 2, 3, 8,\
    \ -10, 4, -6, -10, -2, -7, 10, 5, 2, 9, -9, -5, 3, 8]) . \"\\n\";\necho sort_array([-4,\
    \ -2, -5, -3, -4, -5, -4, -3, -4, -5, -2, -2, 2, 3, 4, -5, 3, 3, 0, 0, 0, 0, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpeg70ugsq.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   if (sizeof($arr) < 2) return $arr;\n    $mid_idx = (int)floor(sizeof($arr)\
    \ / 2);\n    $left = array_slice($arr, 0, $mid_idx);\n    $right = array_slice($arr,\
    \ $mid_idx);\n    $left = sort_array($left);\n    $right = sort_array($right);\n\
    \    return merge($left, $right);\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function merge() in /tmp/tmpqkgtmivu.php:16\n\
    Stack trace:\n#0 /tmp/tmpqkgtmivu.php(14): sort_array(Array)\n#1 /tmp/tmpqkgtmivu.php(20):\
    \ sort_array(Array)\n#2 /tmp/tmpqkgtmivu.php(24): candidate(Array)\n#3 /tmp/tmpqkgtmivu.php(34):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmpqkgtmivu.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $newArr = [];\n  $temp = 0;\n  $oneLen = 0;\n  $newArr[0] = $arr[0];\n  for\
    \ ($i = 1; $i < count($arr); $i++) {\n    for ($j = 0; $j < count($newArr); $j++)\
    \ {\n      $temp = $arr[$i];\n      $oneLen = substr_count(decbin($temp), '1');\n\
    \      if ($oneLen > substr_count(decbin($newArr[$j]), '1')) {\n        break;\n\
    \      } else if ($oneLen == substr_count(decbin($newArr[$j]), '1')) {\n     \
    \   if ($temp < $newArr[$j]) {\n          break;\n        }\n      }\n    }\n\
    \    $newArr = array_merge(array_slice($newArr, 0, $j), array($temp), array_slice($newArr,\
    \ $j));\n  }\n  return $newArr;\n}\necho \"<pre>\";\nprint_r(sort_array([1,0,2,3,4]));\n\
    echo \"</pre>\";\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 3\n    [1] => 1\n    [2] => 2\n    [3] => 4\n\
    \    [4] => 0\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4fo2w9f9.php:39\n\
    Stack trace:\n#0 /tmp/tmp4fo2w9f9.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp4fo2w9f9.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $res = [];\n  $size = count($arr);\n  for ($i = 0; $i < $size; $i++) {\n   \
    \ $res[$i] = [decbin($arr[$i]), $arr[$i]];\n  }\n  usort($res, function($a, $b)\
    \ {\n    $size = strlen($a[0]);\n    $size = $size > strlen($b[0]) ? $size : strlen($b[0]);\n\
    \    for ($i = 0; $i < $size; $i++) {\n      if ( $a[0][$i] != $b[0][$i] ) {\n\
    \        return $a[0][$i] > $b[0][$i] ? 1 : -1;\n      }\n    }\n    return 0;\n\
    \  });\n  for ($i = 0; $i < $size; $i++) {\n    $res[$i] = $res[$i][1];\n  }\n\
    \  return $res;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps9d5mgts.php:36\n\
    Stack trace:\n#0 /tmp/tmps9d5mgts.php(46): test()\n#1 {main}\n  thrown in /tmp/tmps9d5mgts.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $count = 0;\n  $hex = [];\n  $dec = [];\n  $result = [];\n  foreach ($arr as\
    \ $value) {\n    $count = 0;\n    $hex[$value] = dechex($value);\n    for ($i\
    \ = 0; $i < strlen($hex[$value]); $i++) {\n      if ($hex[$value][$i] == 1) {\n\
    \        $count++;\n      }\n    }\n    $dec[$value] = $count;\n  }\n  asort($dec);\n\
    \  foreach ($dec as $key => $value) {\n    $result[] = $key;\n  }\n  return $result;\n\
    }\necho sort_array([1, 0, 2, 3, 4]);\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk5i42ie_.php:36\n\
    Stack trace:\n#0 /tmp/tmpk5i42ie_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpk5i42ie_.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ // Your code goes here...\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkt5gfvuh.php:18\n\
    Stack trace:\n#0 /tmp/tmpkt5gfvuh.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpkt5gfvuh.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $ones = array_map(function($n) {\n    $number_of_ones = substr_count(decbin($n),\
    \ \"1\");\n    return $number_of_ones;\n  }, $arr);\n  array_multisort($ones,\
    \ $arr);\n  return $arr;\n}\n$result = sort_array([1, 5, 2, 3, 4]);\nvar_dump($result);\n\
    echo PHP_EOL;\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "array(5) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(4)\n \
    \ [3]=>\n  int(3)\n  [4]=>\n  int(5)\n}\n\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpmkoza348.php:27\nStack trace:\n#0 /tmp/tmpmkoza348.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpmkoza348.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $res = array();\n    $sorted = array();\n    foreach ($arr as $item) {\n \
    \       $res[$item] = base_convert($item, 10, 2);\n    }\n    uasort($res, function($a,\
    \ $b) {\n        $a = substr_count($a, '1');\n        $b = substr_count($b, '1');\n\
    \        if ($a < $b) {\n            return -1;\n        } elseif ($a > $b) {\n\
    \            return 1;\n        } else {\n            return 0;\n        }\n \
    \   });\n    foreach ($res as $k => $v) {\n        $sorted[] = $k;\n    }\n  \
    \  return $sorted;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp386zuze9.php:37\n\
    Stack trace:\n#0 /tmp/tmp386zuze9.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp386zuze9.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $decimal_values = [];\n    $ones_counts = [];\n    foreach ($arr as $n) {\n\
    \        $decimal_values[] = $n;\n        $ones_counts[] = substr_count(decbin($n),\
    \ '1');\n    }\n    array_multisort($ones_counts, SORT_ASC, $decimal_values, SORT_ASC,\
    \ $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp307bz6zf.php:26\n\
    Stack trace:\n#0 /tmp/tmp307bz6zf.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp307bz6zf.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $result = [];\n  $hundred = 0;\n  foreach ($arr as $key => $value) {\n    if\
    \ (substr_count(decbin($value), 1) != 0) {\n      $result[substr_count(decbin($value),\
    \ 1)][] = $value;\n    } else {\n      $hundred++;\n    }\n  }\n  foreach ($result\
    \ as $key => $value) {\n    sort($result[$key]);\n  }\n  ksort($result);\n  $array\
    \ = [];\n  foreach ($result as $key => $value) {\n    foreach ($value as $k =>\
    \ $v) {\n      $array[] = $v;\n    }\n  }\n  if ($hundred != 0) {\n    $array\
    \ = array_merge($array, array_fill(0, $hundred, 0));\n  }\n  return $array;\n\
    }\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptrl5oiwq.php:40\n\
    Stack trace:\n#0 /tmp/tmptrl5oiwq.php(49): test()\n#1 {main}\n  thrown in /tmp/tmptrl5oiwq.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   usort($arr, function($a, $b) {\n        $binA = (string) decbin($a);\n   \
    \     $binB = (string) decbin($b);\n        $onesA = strlen(rtrim($binA, '0'));\n\
    \        $onesB = strlen(rtrim($binB, '0'));\n        if ($onesA === $onesB) {\n\
    \            return $a - $b;\n        }\n        return $onesA - $onesB;\n   \
    \ });\n    return $arr;\n}\n\nvar_dump(sort_array([1, 5, 2, 3, 4]));\nvar_dump(sort_array([-2,\
    \ -3, -4, -5, -6]));\nvar_dump(sort_array([1, 0, 2, 3, 4]));\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(5) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(4)\n \
    \ [3]=>\n  int(3)\n  [4]=>\n  int(5)\n}\narray(5) {\n  [0]=>\n  int(-4)\n  [1]=>\n\
    \  int(-6)\n  [2]=>\n  int(-2)\n  [3]=>\n  int(-5)\n  [4]=>\n  int(-3)\n}\narray(5)\
    \ {\n  [0]=>\n  int(0)\n  [1]=>\n  int(1)\n  [2]=>\n  int(2)\n  [3]=>\n  int(4)\n\
    \  [4]=>\n  int(3)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2hdh61bb.php:32\n\
    Stack trace:\n#0 /tmp/tmp2hdh61bb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp2hdh61bb.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $ones = [];\n  $map = [];\n  foreach ($arr as $v) {\n    $binary = decbin($v);\n\
    \    $ones[$v] = substr_count($binary, '1');\n    $map[$v] = $v;\n  }\n  array_multisort($ones,\
    \ SORT_ASC, $map, SORT_ASC, $arr);\n  return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8_ak0_ui.php:27\n\
    Stack trace:\n#0 /tmp/tmp8_ak0_ui.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp8_ak0_ui.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $len = count($arr);\n  for ($i = 0; $i < $len; $i++) {\n    for ($j = $i; $j\
    \ < $len; $j++) {\n      if (get_ones($arr[$i]) > get_ones($arr[$j])) {\n    \
    \    $tmp = $arr[$i];\n        $arr[$i] = $arr[$j];\n        $arr[$j] = $tmp;\n\
    \      } else if (get_ones($arr[$i]) == get_ones($arr[$j])) {\n        if ($arr[$i]\
    \ > $arr[$j]) {\n          $tmp = $arr[$i];\n          $arr[$i] = $arr[$j];\n\
    \          $arr[$j] = $tmp;\n        }\n      }\n    }\n  }\n  return $arr;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_ones() in\
    \ /tmp/tmpxxcxhzlw.php:13\nStack trace:\n#0 /tmp/tmpxxcxhzlw.php(30): sort_array(Array)\n\
    #1 /tmp/tmpxxcxhzlw.php(34): candidate(Array)\n#2 /tmp/tmpxxcxhzlw.php(44): test()\n\
    #3 {main}\n  thrown in /tmp/tmpxxcxhzlw.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $sorted_arr = [];\n  $one_count_arr = [];\n  $count_zero_one = [];\n  $i = 0;\n\
    \  while ($i < count($arr)) {\n    $count_zero_one[] = substr_count(decbin($arr[$i]),\
    \ '1');\n    $i++;\n  }\n  foreach ($count_zero_one as $key => $value) {\n   \
    \ $one_count_arr[$key] = $value;\n  }\n  array_multisort($one_count_arr, SORT_ASC,\
    \ $arr);\n  foreach ($arr as $value) {\n    $sorted_arr[] = $value;\n  }\n  return\
    \ $sorted_arr;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0ov6eo3a.php:33\n\
    Stack trace:\n#0 /tmp/tmp0ov6eo3a.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0ov6eo3a.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $dec = array_map(function($v) { return sprintf(\"%0d\", decbin($v)); }, $arr);\n\
    \    $ones = array_map(function($v) { return strlen(preg_replace('/[^1]/', '',\
    \ $v)); }, $dec);\n    $new = array_map(function($v) { return substr_count($v,\
    \ '1'); }, $dec);\n    asort($new);\n    return array_keys($new);\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp31jhyd7w.php:21\n\
    Stack trace:\n#0 /tmp/tmp31jhyd7w.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp31jhyd7w.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $compare = function($a, $b) {\n        $aOnes = substr_count(decbin($a), '1');\n\
    \        $bOnes = substr_count(decbin($b), '1');\n        if ($aOnes == $bOnes)\
    \ {\n            return $a - $b;\n        }\n        return $aOnes - $bOnes;\n\
    \    };\n    usort($arr, $compare);\n    return $arr;\n}\necho json_encode(sort_array([1,\
    \ 5, 2, 3, 4]));\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "[1,2,4,3,5]\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprtlxjppz.php:28\n\
    Stack trace:\n#0 /tmp/tmprtlxjppz.php(37): test()\n#1 {main}\n  thrown in /tmp/tmprtlxjppz.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   // Your code here\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp15llian.php:17\n\
    Stack trace:\n#0 /tmp/tmpp15llian.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp15llian.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $result = [];\n  $ones = [];\n  foreach ($arr as $key => $value) {\n    $ones[$key]\
    \ = substr_count(decbin($value), 1);\n  }\n  $onesWithIndex = array_combine(array_keys($ones),\
    \ $ones);\n  asort($onesWithIndex);\n  foreach ($onesWithIndex as $key => $value)\
    \ {\n    $result[] = $arr[$key];\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4q3v43gb.php:27\n\
    Stack trace:\n#0 /tmp/tmp4q3v43gb.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp4q3v43gb.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   for ($i = 0; $i < count($arr); $i++) {\n        for ($j = 0; $j < count($arr);\
    \ $j++) {\n            if ($arr[$i] < 0) {\n                break;\n         \
    \   }\n            if ($arr[$i] > $arr[$j]) {\n                $index = str_split(decbin($arr[$i]));\n\
    \                $indexCount = array_count_values($index);\n                $indexNum\
    \ = $indexCount[1];\n                $index2 = str_split(decbin($arr[$j]));\n\
    \                $indexCount2 = array_count_values($index2);\n               \
    \ $indexNum2 = $indexCount2[1];\n                if ($indexNum == $indexNum2)\
    \ {\n                    $temp = $arr[$i];\n                    $arr[$i] = $arr[$j];\n\
    \                    $arr[$j] = $temp;\n                } elseif ($indexNum <\
    \ $indexNum2) {\n                    $temp = $arr[$i];\n                    $arr[$i]\
    \ = $arr[$j];\n                    $arr[$j] = $temp;\n                }\n    \
    \        }\n        }\n    }\n    return $arr;\n}\necho sort_array([1, 5, 2, 3,\
    \ 4]);\necho \"\\n\";\necho sort_array([-2, -3, -4, -5, -6]);\necho \"\\n\";\n\
    echo sort_array([1, 0, 2, 3, 4]);\necho \"\\n\";\necho sort_array([3, 5, -3, -5,\
    \ -7, 0, 1, 1, 2, 4, 6, 8, 9, 10, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31,\
    \ 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69,\
    \ 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107,\
    \ 109, 111, 113, 115, 117, 119, 121, 123, 125\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpi5v098j_.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   if(empty($arr)) {\n        return [];\n    }\n    $ones_bin = [];\n    foreach($arr\
    \ as $num) {\n        $bin = toBinary($num);\n        $ones = countOnes($bin);\n\
    \        $ones_bin[$ones][] = $num;\n    }\n    ksort($ones_bin);\n    $sort_arr\
    \ = [];\n    foreach($ones_bin as $key => $val) {\n        sort($val);\n     \
    \   foreach($val as $num) {\n            $sort_arr[] = $num;\n        }\n    }\n\
    \    return $sort_arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function toBinary() in\
    \ /tmp/tmp81prd1fl.php:15\nStack trace:\n#0 /tmp/tmp81prd1fl.php(31): sort_array(Array)\n\
    #1 /tmp/tmp81prd1fl.php(35): candidate(Array)\n#2 /tmp/tmp81prd1fl.php(45): test()\n\
    #3 {main}\n  thrown in /tmp/tmp81prd1fl.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   usort($arr, function($x, $y) {\n        if ($x < 0 || $y < 0) return $x <\
    \ $y ? 1 : -1;\n        $bx = base_convert($x, 10, 2);\n        $by = base_convert($y,\
    \ 10, 2);\n        $bx_len = strlen($bx);\n        $by_len = strlen($by);\n  \
    \      $bx_has1 = strpos($bx, '1') !== false;\n        $by_has1 = strpos($by,\
    \ '1') !== false;\n        if ($bx_has1 && !$by_has1) return -1;\n        if (!$bx_has1\
    \ && $by_has1) return 1;\n        if ($bx_len > $by_len) return -1;\n        if\
    \ ($bx_len < $by_len) return 1;\n        return $x < $y ? -1 : 1;\n    });\n \
    \   return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfjatclj3.php:32\n\
    Stack trace:\n#0 /tmp/tmpfjatclj3.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpfjatclj3.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $res = [];\n  foreach ($arr as $value) {\n    $ones = substr_count(decbin($value),\
    \ '1');\n    if (!empty($res[$ones])) {\n      $res[$ones][] = $value;\n    }\
    \ else {\n      $res[$ones] = [$value];\n    }\n  }\n  ksort($res);\n  return\
    \ flatten($res);\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function flatten() in\
    \ /tmp/tmpqod7urz5.php:20\nStack trace:\n#0 /tmp/tmpqod7urz5.php(24): sort_array(Array)\n\
    #1 /tmp/tmpqod7urz5.php(28): candidate(Array)\n#2 /tmp/tmpqod7urz5.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqod7urz5.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $new = [];\n  $ones = [];\n  $result = [];\n  for ($i = 0; $i < count($arr);\
    \ $i++) {\n    $new[$i] = decbin($arr[$i]);\n    $count = substr_count($new[$i],\
    \ \"1\");\n    $ones[$count][] = $arr[$i];\n  }\n  ksort($ones);\n  foreach ($ones\
    \ as $key => $value) {\n    sort($value);\n    foreach ($value as $number) {\n\
    \      $result[] = $number;\n    }\n  }\n  return $result;\n}\necho json_encode(sort_array([7,8,9,1,2,3,4,5,6,2,1]));\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "[1,1,2,2,4,8,3,5,6,9,7]\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp4am0golu.php:34\nStack trace:\n#0 /tmp/tmp4am0golu.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmp4am0golu.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ usort($arr, function($a, $b) {\n    if (decbin($a) > decbin($b)) {\n      return\
    \ 1;\n    } else if (decbin($a) < decbin($b)) {\n      return -1;\n    } else\
    \ {\n      return 0;\n    }\n  });\n  return $arr;\n}\n\necho sort_array([1, 5,\
    \ 2, 3, 4]);\necho sort_array([-2, -3, -4, -5, -6]);\necho sort_array([1, 0, 2,\
    \ 3, 4]);\necho sort_array([-6, -5, -4, -3, -2]);\necho sort_array([0, 1, 2, 3,\
    \ 4]);\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "ArrayArrayArrayArrayArray\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmphddfabky.php:32\nStack trace:\n#0 /tmp/tmphddfabky.php(42): test()\n\
    #1 {main}\n  thrown in /tmp/tmphddfabky.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $array = [];\n  foreach ($arr as $a) {\n    $array[] = [$a, decbin($a)];\n \
    \ }\n  usort($array, 'decbin_sort');\n  $res = [];\n  foreach ($array as $ar)\
    \ {\n    $res[] = $ar[0];\n  }\n  return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'decbin_sort' not found or invalid function name in /tmp/tmpss_5ds3g.php on\
    \ line 14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpss_5ds3g.php:27\n\
    Stack trace:\n#0 /tmp/tmpss_5ds3g.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpss_5ds3g.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $arr = array_map('decbin', $arr);\n    array_multisort(array_map('strlen',\
    \ $arr), $arr, $arr);\n    $arr = array_map('bindec', $arr);\n    return $arr;\n\
    }\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpua0mj6v8.php:20\n\
    Stack trace:\n#0 /tmp/tmpua0mj6v8.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpua0mj6v8.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $arr_sort = [];\n  foreach ($arr as $key => $value) {\n    $val_hex = dechex($value);\n\
    \    $arr_sort[$key] = $val_hex;\n  }\n  for ($i = 0; $i < count($arr_sort); $i++)\
    \ {\n    for ($j = $i; $j < count($arr_sort); $j++) {\n      if (substr_count($arr_sort[$i],\
    \ '1') > substr_count($arr_sort[$j], '1')) {\n        $temp = $arr_sort[$i];\n\
    \        $arr_sort[$i] = $arr_sort[$j];\n        $arr_sort[$j] = $temp;\n    \
    \  }\n    }\n  }\n  $arr_sort_dec = [];\n  foreach ($arr_sort as $key => $value)\
    \ {\n    $arr_sort_dec[$key] = hexdec($value);\n  }\n  return $arr_sort_dec;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpylpkm4k9.php:36\n\
    Stack trace:\n#0 /tmp/tmpylpkm4k9.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpylpkm4k9.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   // Sort the ones\n    usort($arr, function($a, $b) {\n        $a_ones = substr_count(decbin($a),\
    \ '1');\n        $b_ones = substr_count(decbin($b), '1');\n        return $a_ones\
    \ == $b_ones ? $a - $b : $a_ones - $b_ones;\n    });\n    return $arr;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpygycap6t.php:24\n\
    Stack trace:\n#0 /tmp/tmpygycap6t.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpygycap6t.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $arr_ones = array();\n  foreach ($arr as $key => $value) {\n    $ones = count_one_binary($value);\n\
    \    $arr_ones[$key] = [$ones, $value];\n  }\n  usort($arr_ones, function($a,\
    \ $b) {\n    return strcmp($a[0], $b[0]);\n  });\n  return array_map(function($value)\
    \ {\n    return $value[1];\n  }, $arr_ones);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_one_binary()\
    \ in /tmp/tmpgvcsk3c9.php:12\nStack trace:\n#0 /tmp/tmpgvcsk3c9.php(24): sort_array(Array)\n\
    #1 /tmp/tmpgvcsk3c9.php(28): candidate(Array)\n#2 /tmp/tmpgvcsk3c9.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgvcsk3c9.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $return = [];\n  foreach ($arr as $number) {\n    $number = $number > 0 ? decbin($number)\
    \ : abs(decbin($number));\n    $count = substr_count($number, '1');\n    $return[$count][]\
    \ = $number;\n  }\n  ksort($return);\n  foreach ($return as $key => $value) {\n\
    \    sort($return[$key]);\n  }\n  $return = array_merge(...$return);\n  foreach\
    \ ($return as $key => $value) {\n    $return[$key] = bindec($value);\n  }\n  return\
    \ $return;\n}\n\nprint_r(sort_array([1, 5, 2, 3, 4]));\nprint_r(sort_array([-2,\
    \ -3, -4, -5, -6]));\nprint_r(sort_array([1, 0, 2, 3, 4]));\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 5\n)\nArray\n(\n    [0] => 16383\n    [1] => 16383\n    [2] => 16383\n  \
    \  [3] => 16383\n    [4] => 16383\n)\nArray\n(\n    [0] => 0\n    [1] => 1\n \
    \   [2] => 2\n    [3] => 4\n    [4] => 3\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpbvszxfu2.php:36\nStack trace:\n#0 /tmp/tmpbvszxfu2.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpbvszxfu2.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $return = [];\n    $sorted_arr = [];\n    foreach ($arr as $value) {\n   \
    \     $sorted_arr[$value] = decbin($value);\n    }\n    foreach ($sorted_arr as\
    \ $key => $value) {\n        $counter = substr_count($value, '1');\n        $return[$counter][]\
    \ = $key;\n    }\n    ksort($return);\n    $return = flatten_array($return);\n\
    \    return $return;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function flatten_array()\
    \ in /tmp/tmp35moh7d2.php:20\nStack trace:\n#0 /tmp/tmp35moh7d2.php(25): sort_array(Array)\n\
    #1 /tmp/tmp35moh7d2.php(29): candidate(Array)\n#2 /tmp/tmp35moh7d2.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmp35moh7d2.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   for ($i = 0; $i < count($arr); $i++) {\n        $dec[$i] = decbin($arr[$i]);\n\
    \        $bin[$i] = count_chars($dec[$i])[49];\n    }\n    $bin_arr = array_combine($arr,\
    \ $bin);\n    arsort($bin_arr);\n    $idx = array_keys($bin_arr);\n    for ($i\
    \ = 0; $i < count($idx); $i++) {\n        $sorted[$i] = $arr[$idx[$i]];\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2evyz1ua.php:28\n\
    Stack trace:\n#0 /tmp/tmp2evyz1ua.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp2evyz1ua.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = [];\n    foreach ($arr as $key => $num) {\n        $ones[decbin($num)][]\
    \ = $num;\n    }\n    ksort($ones);\n    $result = [];\n    foreach ($ones as\
    \ $k => $one) {\n        sort($one);\n        $result = array_merge($result, $one);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn17i0qno.php:28\n\
    Stack trace:\n#0 /tmp/tmpn17i0qno.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpn17i0qno.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   foreach ($arr as $key => $value) {\n        $arr[$key] = [\n            'number'\
    \ => $value,\n            'binary' => decbin($value),\n            'ones' => substr_count(decbin($value),\
    \ '1')\n        ];\n    }\n    usort($arr, function ($a, $b) {\n        if ($a['ones']\
    \ == $b['ones']) {\n            return $a['number'] - $b['number'];\n        }\n\
    \        return $a['ones'] - $b['ones'];\n    });\n    foreach ($arr as $key =>\
    \ $value) {\n        $arr[$key] = $value['number'];\n    }\n    return $arr;\n\
    }\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzgqs3wnr.php:34\n\
    Stack trace:\n#0 /tmp/tmpzgqs3wnr.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpzgqs3wnr.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $tempArr = array();\n    $result = array();\n    $finalArr = array();\n  \
    \  foreach ($arr as $val) {\n        $tempArr[] = array(\n            'decimal'\
    \ => $val,\n            'binary' => decbin($val)\n        );\n    }\n    foreach\
    \ ($tempArr as $item) {\n        $result[$item['binary']][] = $item['decimal'];\n\
    \    }\n    ksort($result);\n    foreach ($result as $item) {\n        foreach\
    \ ($item as $val) {\n            $finalArr[] = $val;\n        }\n    }\n    return\
    \ $finalArr;\n}\n$test1 = [1, 5, 2, 3, 4];\n$test2 = [-2, -3, -4, -5, -6];\n$test3\
    \ = [1, 0, 2, 3, 4];\necho sort_array($test1) . PHP_EOL;\necho sort_array($test2)\
    \ . PHP_EOL;\necho sort_array($test3) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\nArray\nArray\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpc1_spmfi.php:41\nStack trace:\n#0 /tmp/tmpc1_spmfi.php(51): test()\n\
    #1 {main}\n  thrown in /tmp/tmpc1_spmfi.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   usort($arr, function($a, $b) {\n        if (count_ones($a) > count_ones($b))\
    \ return 1;\n        if (count_ones($a) < count_ones($b)) return -1;\n       \
    \ if ($a > $b) return 1;\n        if ($a < $b) return -1;\n        return 0;\n\
    \    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_ones()\
    \ in /tmp/tmpusrxabdr.php:11\nStack trace:\n#0 [internal function]: {closure}(1,\
    \ 5)\n#1 /tmp/tmpusrxabdr.php(16): usort(Array, Object(Closure))\n#2 /tmp/tmpusrxabdr.php(21):\
    \ sort_array(Array)\n#3 /tmp/tmpusrxabdr.php(25): candidate(Array)\n#4 /tmp/tmpusrxabdr.php(35):\
    \ test()\n#5 {main}\n  thrown in /tmp/tmpusrxabdr.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $n = 0;\n    foreach ($arr as $value) {\n        $dec = decbin($value);\n\
    \        $n = substr_count($dec, '1');\n        $new_arr[$value] = $n;\n    }\n\
    \    asort($new_arr);\n    $final_arr = array_keys($new_arr);\n    return $final_arr;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu5k783te.php:26\n\
    Stack trace:\n#0 /tmp/tmpu5k783te.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpu5k783te.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $newArr = array();\n  foreach ($arr as $value) {\n    if ($value >= 0) {\n \
    \     $bin_num = decbin($value);\n      $newArr[$bin_num][] = $value;\n    } else\
    \ {\n      $newArr[$value] = $value;\n    }\n  }\n  ksort($newArr);\n  $sortedArr\
    \ = array();\n  foreach ($newArr as $value) {\n    if (is_array($value)) {\n \
    \     sort($value);\n      foreach ($value as $num) {\n        $sortedArr[] =\
    \ $num;\n      }\n    } else {\n      $sortedArr[] = $value;\n    }\n  }\n  return\
    \ $sortedArr;\n}\n\n$arr1 = [1, 5, 2, 3, 4];\n$arr2 = [-2, -3, -4, -5, -6];\n\
    $arr3 = [1, 0, 2, 3, 4];\n\nprint_r(sort_array($arr1));\nprint_r(sort_array($arr2));\n\
    print_r(sort_array($arr3));\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4]\
    \ => 5\n)\nArray\n(\n    [0] => -6\n    [1] => -5\n    [2] => -4\n    [3] => -3\n\
    \    [4] => -2\n)\nArray\n(\n    [0] => 0\n    [1] => 1\n    [2] => 2\n    [3]\
    \ => 3\n    [4] => 4\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7rxwutmf.php:46\n\
    Stack trace:\n#0 /tmp/tmp7rxwutmf.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp7rxwutmf.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ foreach ($arr as $key => $val) {\n    $arr[$key] = decbin($val);\n  }\n  asort($arr);\n\
    \  foreach ($arr as $key => $val) {\n    $arr[$key] = bindec($val);\n  }\n  return\
    \ $arr;\n}\n\necho sort_array([1, 5, 2, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp09srppnp.php:26\n\
    Stack trace:\n#0 /tmp/tmp09srppnp.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp09srppnp.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   if (empty($arr)) return [];\n    $sorted = [];\n    foreach ($arr as $item)\
    \ {\n        $sorted[$item] = decbin($item);\n    }\n    asort($sorted);\n   \
    \ $result = [];\n    foreach ($sorted as $key => $value) {\n        $result[]\
    \ = $key;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpldpfngw6.php:28\n\
    Stack trace:\n#0 /tmp/tmpldpfngw6.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpldpfngw6.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ if(!empty($arr)) {\n    // Converting all elements to binary\n    $toBinary\
    \ = array_map(function($n) {\n      return decbin($n);\n    }, $arr);\n    //\
    \ Get the count of ones\n    $oneCount = array_map(function($n) {\n      return\
    \ substr_count($n, \"1\");\n    }, $toBinary);\n    // Using uasort to sort based\
    \ on number of ones\n    uasort($oneCount, function($a, $b) {\n      if($a ==\
    \ $b) {\n        return 0;\n      }\n      return ($a < $b) ? -1 : 1;\n    });\n\
    \    // Since we need to keep the order of elements, using usort to sort based\
    \ on decimals\n    usort($arr, function($a, $b) {\n      if($a == $b) {\n    \
    \    return 0;\n      }\n      return ($a < $b) ? -1 : 1;\n    });\n    // Creating\
    \ a new array to return sorted elements\n    $sortedArr = [];\n    // Looping\
    \ through the sorted oneCount\n    foreach($oneCount as $key => $value) {\n  \
    \    // Checking if $key is present in $arr\n      if(array_key_exists($key, $arr))\
    \ {\n        // Pushing the element to the new array\n        array_push($sortedArr,\
    \ $arr[$key]);\n      }\n    }\n    return $sortedArr;\n  }\n  else {\n    return\
    \ $arr;\n  }\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_a1a4oza.php:55\n\
    Stack trace:\n#0 /tmp/tmp_a1a4oza.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp_a1a4oza.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   if (count($arr) <= 1) {\n        return $arr;\n    }\n    $left = $right =\
    \ array();\n    reset($arr);\n    $pivot_key = key($arr);\n    $pivot = array_shift($arr);\n\
    \    foreach ($arr as $key => $val) {\n        if ($val > $pivot) {\n        \
    \    $left[$key] = $val;\n        } else {\n            $right[$key] = $val;\n\
    \        }\n    }\n    return array_merge(sort_array($left), array($pivot_key\
    \ => $pivot), sort_array($right));\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwp_y14wr.php:32\n\
    Stack trace:\n#0 /tmp/tmpwp_y14wr.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpwp_y14wr.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   usort($arr, function($a, $b) {\n        $x = decbin($a);\n        $y = decbin($b);\n\
    \        $onesInA = substr_count($x, '1');\n        $onesInB = substr_count($y,\
    \ '1');\n        if ($onesInA == $onesInB) {\n            return $a - $b;\n  \
    \      }\n        return $onesInA - $onesInB;\n    });\n    return $arr;\n}\n\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxcm2vbgs.php:29\n\
    Stack trace:\n#0 /tmp/tmpxcm2vbgs.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpxcm2vbgs.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ return countOnes($arr) !== null ? countOnes($arr) : $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function countOnes() in\
    \ /tmp/tmp3iwo_39c.php:10\nStack trace:\n#0 /tmp/tmp3iwo_39c.php(14): sort_array(Array)\n\
    #1 /tmp/tmp3iwo_39c.php(18): candidate(Array)\n#2 /tmp/tmp3iwo_39c.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3iwo_39c.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $counts = [];\n  foreach ($arr as $item) {\n    $counts[decbin($item)][] = $item;\n\
    \  }\n  ksort($counts);\n  $result = [];\n  foreach ($counts as $k => $arr) {\n\
    \    sort($arr);\n    $result = array_merge($result, $arr);\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpho8_9iv5.php:28\n\
    Stack trace:\n#0 /tmp/tmpho8_9iv5.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpho8_9iv5.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   usort($arr, function($a, $b) {\n        $bin_a = decbin($a);\n        $bin_b\
    \ = decbin($b);\n        $ones_a = substr_count($bin_a, \"1\");\n        $ones_b\
    \ = substr_count($bin_b, \"1\");\n        if ($ones_a == $ones_b) {\n        \
    \    return $a - $b;\n        }\n        return $ones_a - $ones_b;\n    });\n\
    \    return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp21kkgbsq.php:29\n\
    Stack trace:\n#0 /tmp/tmp21kkgbsq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp21kkgbsq.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $sorted = array();\n  $sorted_binary = array();\n  for ($i = 0; $i < count($arr);\
    \ $i++) {\n    $sorted_binary[$i] = decbin($arr[$i]);\n  }\n  $keys = array_map('strlen',\
    \ $sorted_binary);\n  array_multisort($keys, SORT_ASC, $arr);\n  return $arr;\n\
    }\n\n$output = sort_array([1,5,2,3,4]);\necho $output;\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa0b1h85y.php:27\n\
    Stack trace:\n#0 /tmp/tmpa0b1h85y.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpa0b1h85y.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ if (empty($arr)) return [];\n  $newArray = [];\n  $sortArray = [];\n  foreach\
    \ ($arr as $key => $value) {\n    $binary = decbin($value);\n    $countOnes =\
    \ substr_count($binary, '1');\n    $newArray[$key] = ['countOnes' => $countOnes,\
    \ 'value' => $value];\n  }\n  usort($newArray, function($first, $second) {\n \
    \   if ($first['countOnes'] == $second['countOnes']) {\n      return $first['value']\
    \ - $second['value'];\n    }\n    return $first['countOnes'] - $second['countOnes'];\n\
    \  });\n  foreach ($newArray as $new) {\n    $sortArray[] = $new['value'];\n \
    \ }\n  return $sortArray;\n}\n\nprint_r(sort_array([1, 5, 2, 3, 4]));\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 5\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnhzp8vpx.php:37\n\
    Stack trace:\n#0 /tmp/tmpnhzp8vpx.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpnhzp8vpx.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   usort($arr, function($a, $b) {\n        $onesA = substr_count(decbin($a),\
    \ '1');\n        $onesB = substr_count(decbin($b), '1');\n        if ($onesA ===\
    \ $onesB) {\n            return $a - $b;\n        }\n        return $onesA - $onesB;\n\
    \    });\n    return $arr;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppzoush8b.php:26\n\
    Stack trace:\n#0 /tmp/tmppzoush8b.php(35): test()\n#1 {main}\n  thrown in /tmp/tmppzoush8b.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $ones = [];\n  $zeros = [];\n  $result = [];\n  $num_map = [];\n  foreach ($arr\
    \ as $num) {\n    $ones[$num] = substr_count(decbin($num), '1');\n    $num_map[$num]\
    \ = $num;\n  }\n  asort($ones);\n  foreach ($ones as $num => $value) {\n    $result[]\
    \ = $num_map[$num];\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpycpmwsc3.php:29\n\
    Stack trace:\n#0 /tmp/tmpycpmwsc3.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpycpmwsc3.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $result = [];\n  foreach ($arr as $item) {\n    $result[decbin($item)] = $item;\n\
    \  }\n  ksort($result);\n  return array_values($result);\n}\n\n$res = sort_array([1,\
    \ 0, 2, 3, 4]);\necho implode(', ', $res);\nfunction candidate(...$args) {\n \
    \   return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0, 1, 2, 3, 4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2108fwxo.php:25\n\
    Stack trace:\n#0 /tmp/tmp2108fwxo.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2108fwxo.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $binary_arr = array_map('decbin', $arr);\n    $sorting_array = array();\n\
    \    foreach ($binary_arr as $key => $value) {\n        $sorting_array[$key] =\
    \ substr_count($value, '1');\n    }\n    array_multisort($sorting_array, SORT_ASC,\
    \ $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl41qaecp.php:25\n\
    Stack trace:\n#0 /tmp/tmpl41qaecp.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpl41qaecp.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $arr = array_map(function($n) {\n    $ones = substr_count(decbin($n), '1');\n\
    \    return $n < 0 ? -$ones : $ones;\n  }, $arr);\n  asort($arr);\n  return array_keys($arr);\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccr9sb4y.php:23\n\
    Stack trace:\n#0 /tmp/tmpccr9sb4y.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpccr9sb4y.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $res = array();\n    $res2 = array();\n    foreach ($arr as $key => $val)\
    \ {\n        $temp = array();\n        $temp['dec'] = $val;\n        $temp['bin']\
    \ = decbin($val);\n        $bin_arr = str_split($temp['bin']);\n        $temp['sum']\
    \ = array_sum($bin_arr);\n        $res[] = $temp;\n    }\n    usort($res, function($a,\
    \ $b) {\n        if ($a['sum'] == $b['sum']) {\n            return ($a['dec']\
    \ < $b['dec']) ? -1 : 1;\n        }\n        return ($a['sum'] < $b['sum']) ?\
    \ -1 : 1;\n    });\n    foreach ($res as $val) {\n        $res2[] = $val['dec'];\n\
    \    }\n    return $res2;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ske2twx.php:38\n\
    Stack trace:\n#0 /tmp/tmp_ske2twx.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp_ske2twx.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $arr1 = [];\n  $arr2 = [];\n  foreach ($arr as $val) {\n    $arr1[] = substr_count(decbin($val),\
    \ \"1\");\n    $arr2[] = $val;\n  }\n  asort($arr1);\n  array_multisort($arr1,\
    \ $arr2);\n  return $arr2;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbgq7tet7.php:25\n\
    Stack trace:\n#0 /tmp/tmpbgq7tet7.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpbgq7tet7.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $oneCounts = [];\n    $keys = [];\n    $values = [];\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        $keys[] = $key;\n        $values[]\
    \ = $value;\n        $binary = decbin($value);\n        $oneCounts[] = substr_count($binary,\
    \ '1');\n    }\n    array_multisort($oneCounts, SORT_ASC, $values, SORT_ASC, $keys,\
    \ SORT_ASC);\n    foreach ($keys as $key) {\n        $result[] = $arr[$key];\n\
    \    }\n    return $result;\n}\n\nprint_r(sort_array([1, 5, 2, 3, 4]));\nprint_r(sort_array([-2,\
    \ -3, -4, -5, -6]));\nprint_r(sort_array([1, 0, 2, 3, 4]));\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 5\n)\nArray\n(\n    [0] => -6\n    [1] => -4\n    [2] => -5\n    [3] => -3\n\
    \    [4] => -2\n)\nArray\n(\n    [0] => 0\n    [1] => 1\n    [2] => 2\n    [3]\
    \ => 4\n    [4] => 3\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc2_grhdr.php:36\n\
    Stack trace:\n#0 /tmp/tmpc2_grhdr.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpc2_grhdr.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $sorted = array();\n  // First, we count how many ones each number has\n  foreach\
    \ ($arr as $key => $val) {\n    $sorted[$key] = array(\n      'val' => $val,\n\
    \      'ones' => count_ones($val)\n    );\n  }\n  // We sort the array\n  usort($sorted,\
    \ function($a, $b) {\n    if ($a['ones'] === $b['ones']) {\n      return $a['val']\
    \ - $b['val'];\n    }\n    return $a['ones'] - $b['ones'];\n  });\n  // We remove\
    \ the unnecesary data and output the results\n  foreach ($sorted as $key => $val)\
    \ {\n    $sorted[$key] = $val['val'];\n  }\n  return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_ones()\
    \ in /tmp/tmpdx_5uy8i.php:15\nStack trace:\n#0 /tmp/tmpdx_5uy8i.php(33): sort_array(Array)\n\
    #1 /tmp/tmpdx_5uy8i.php(37): candidate(Array)\n#2 /tmp/tmpdx_5uy8i.php(47): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdx_5uy8i.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $arr_len = count($arr);\n    $ones_count = [];\n    $temp = [];\n    for ($i\
    \ = 0; $i < $arr_len; $i++) {\n        $temp[$i] = $arr[$i];\n        $ones_count[$i]\
    \ = substr_count(decbin($arr[$i]), \"1\");\n    }\n    array_multisort($ones_count,\
    \ SORT_ASC, $temp, SORT_ASC, $arr);\n    return $arr;\n}\n\n/*\n=====SOOLUTION=====\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: Unterminated comment starting line 21 in /tmp/tmpgvqcmz4x.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   if (empty($arr)) {\n        return [];\n    }\n    $arr = array_map('decbin',\
    \ $arr);\n    $arr = array_map('str_split', $arr);\n    $arr = array_map('array_sum',\
    \ $arr);\n    $arr = array_combine(range(0, count($arr) - 1), $arr);\n    asort($arr);\n\
    \    return array_keys($arr);\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp53n_6int.php:26\n\
    Stack trace:\n#0 /tmp/tmp53n_6int.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp53n_6int.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $ones = array_map(function($a) {\n    return substr_count(decbin($a), '1');\n\
    \  }, $arr);\n  arsort($ones);\n  $out = [];\n  foreach ($ones as $key => $value)\
    \ {\n    $out[$key] = $arr[$key];\n  }\n  ksort($out);\n  return $out;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpac5mndn6.php:26\n\
    Stack trace:\n#0 /tmp/tmpac5mndn6.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpac5mndn6.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $map = [];\n  foreach ($arr as $v) {\n    $map[$v] = toBinaryString($v);\n \
    \ }\n  uasort($map, function($a, $b) {\n    $a1 = substr_count($a, '1');\n   \
    \ $b1 = substr_count($b, '1');\n    if ($a1 == $b1) {\n      return strnatcmp($a,\
    \ $b);\n    }\n    return $a1 - $b1;\n  });\n  return array_keys($map);\n}\n\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function toBinaryString()\
    \ in /tmp/tmpejhi0a6t.php:12\nStack trace:\n#0 /tmp/tmpejhi0a6t.php(26): sort_array(Array)\n\
    #1 /tmp/tmpejhi0a6t.php(30): candidate(Array)\n#2 /tmp/tmpejhi0a6t.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpejhi0a6t.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $bits = array_map(function($value) {\n        return decbin($value);\n   \
    \ }, $arr);\n    $counts = array_map(function($value) {\n        return substr_count($value,\
    \ '1');\n    }, $bits);\n    array_multisort($counts, SORT_ASC, $arr);\n    return\
    \ $arr;\n}\necho implode(' ', sort_array([1, 0, 2, 3, 4]));\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0 1 2 4 3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd_q7_s4y.php:26\n\
    Stack trace:\n#0 /tmp/tmpd_q7_s4y.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpd_q7_s4y.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ foreach ($arr as $key => $value) {\n    $array[$key] = decbin($value);\n  }\n\
    \  arsort($array);\n  foreach ($array as $key => $value) {\n    $array[$key] =\
    \ bindec($value);\n  }\n  sort($array);\n  return $array;\n}\n$test = [1, 0, 2,\
    \ 3, 4];\nvar_dump(sort_array($test));\n ?>\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(5) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(1)\n  [2]=>\n  int(2)\n \
    \ [3]=>\n  int(3)\n  [4]=>\n  int(4)\n}\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ // if ($arr == []) { return []; }\n  $c = 0;\n  $counts = [];\n  for ($i = 0;\
    \ $i < count($arr); $i++) {\n    $counts[$i] = [0, 0];\n    $c = $arr[$i];\n \
    \   while ($c > 0) {\n      $counts[$i][0] += ($c % 2);\n      $c = floor($c /\
    \ 2);\n    }\n    $counts[$i][1] = $arr[$i];\n  }\n  usort($counts, function($a,\
    \ $b) {\n    if ($a[0] < $b[0]) { return -1; }\n    if ($a[0] > $b[0]) { return\
    \ 1; }\n    if ($a[1] < $b[1]) { return -1; }\n    if ($a[1] > $b[1]) { return\
    \ 1; }\n    return 0;\n  });\n  for ($i = 0; $i < count($arr); $i++) {\n    $arr[$i]\
    \ = $counts[$i][1];\n  }\n  return $arr;\n}\n\n$v1 = sort_array([-2, -3, -4, -5,\
    \ -6]);\nvar_dump($v1);\n\n$v2 = sort_array([1, 5, 2, 3, 4]);\nvar_dump($v2);\n\
    \n$v3 = sort_array([1, 0, 2, 3, 4]);\nvar_dump($v3);\n\n$v4 = sort_array([0, 0,\
    \ 0, 0, 0]);\nvar_dump($v4);\n\n$v5 = sort_array([-1, -1, -1, -1, -1]);\nvar_dump($v5);\n\
    \n$v6 = sort_array([-1, 0, -1, 0, -1]);\nvar_dump($v6);\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(5) {\n  [0]=>\n  int(-6)\n  [1]=>\n  int(-5)\n  [2]=>\n  int(-4)\n\
    \  [3]=>\n  int(-3)\n  [4]=>\n  int(-2)\n}\narray(5) {\n  [0]=>\n  int(1)\n  [1]=>\n\
    \  int(2)\n  [2]=>\n  int(4)\n  [3]=>\n  int(3)\n  [4]=>\n  int(5)\n}\narray(5)\
    \ {\n  [0]=>\n  int(0)\n  [1]=>\n  int(1)\n  [2]=>\n  int(2)\n  [3]=>\n  int(4)\n\
    \  [4]=>\n  int(3)\n}\narray(5) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(0)\n  [2]=>\n\
    \  int(0)\n  [3]=>\n  int(0)\n  [4]=>\n  int(0)\n}\narray(5) {\n  [0]=>\n  int(-1)\n\
    \  [1]=>\n  int(-1)\n  [2]=>\n  int(-1)\n  [3]=>\n  int(-1)\n  [4]=>\n  int(-1)\n\
    }\narray(5) {\n  [0]=>\n  int(-1)\n  [1]=>\n  int(-1)\n  [2]=>\n  int(-1)\n  [3]=>\n\
    \  int(0)\n  [4]=>\n  int(0)\n}\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpnhfs0w3p.php:59\nStack trace:\n#0 /tmp/tmpnhfs0w3p.php(68): test()\n\
    #1 {main}\n  thrown in /tmp/tmpnhfs0w3p.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $arr2 = [];\n  foreach ($arr as $key => $value) {\n    $binary = decbin($value);\n\
    \    if (isset($arr2[substr_count($binary, '1')])) {\n      array_push($arr2[substr_count($binary,\
    \ '1')], $value);\n    } else {\n      $arr2[substr_count($binary, '1')] = [$value];\n\
    \    }\n  }\n  ksort($arr2);\n  foreach ($arr2 as $key => $value) {\n    sort($arr2[$key]);\n\
    \  }\n  $arr3 = [];\n  foreach ($arr2 as $key => $value) {\n    foreach ($value\
    \ as $k => $v) {\n      array_push($arr3, $v);\n    }\n  }\n  return $arr3;\n\
    }\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxpd3tfq_.php:37\n\
    Stack trace:\n#0 /tmp/tmpxpd3tfq_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpxpd3tfq_.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $a = array_map(function($n) {\n    $ones = substr_count(decbin($n), '1');\n\
    \    return [\"v\" => $n, \"o\" => $ones];\n  }, $arr);\n  usort($a, function($a,\
    \ $b) {\n    if ($a[\"o\"] == $b[\"o\"]) return $a[\"v\"] > $b[\"v\"];\n    return\
    \ $a[\"o\"] > $b[\"o\"];\n  });\n  return array_map(function($n) {\n    return\
    \ $n[\"v\"];\n  }, $a);\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpatj0uf8d.php:29\n\
    Stack trace:\n#0 /tmp/tmpatj0uf8d.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpatj0uf8d.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   // Your code here\n    usort($arr, function($a, $b) {\n        return decbin($a)\
    \ > decbin($b) ? 1 : -1;\n    });\n    return $arr;\n}\n\n$num_array = [ -6, -5,\
    \ -4, -3, -2 ];\nvar_dump(sort_array($num_array));\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(5) {\n  [0]=>\n  int(-6)\n  [1]=>\n  int(-5)\n  [2]=>\n  int(-4)\n\
    \  [3]=>\n  int(-3)\n  [4]=>\n  int(-2)\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpucoqh8uo.php:24\nStack trace:\n#0 /tmp/tmpucoqh8uo.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpucoqh8uo.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $counted = [];\n  foreach ($arr as $key => $value) {\n    $a = decbin($value);\n\
    \    $b = str_split($a);\n    $sum = array_sum($b);\n    $counted[$key] = $sum;\n\
    \  }\n  arsort($counted);\n  $final_arr = [];\n  foreach ($counted as $key =>\
    \ $value) {\n    $final_arr[] = $arr[$key];\n  }\n  return $final_arr;\n}\n\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkd3jmhb.php:30\n\
    Stack trace:\n#0 /tmp/tmplkd3jmhb.php(40): test()\n#1 {main}\n  thrown in /tmp/tmplkd3jmhb.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $arrNumbers = [];\n    $arrSorted = [];\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        $arrNumbers[$i] = [decbin($arr[$i]), $arr[$i]];\n    }\n  \
    \  foreach ($arrNumbers as $key => $value) {\n        $arrNumbers[$key][0] = substr_count($value[0],\
    \ \"1\");\n    }\n    $arrNumberPairs = [];\n    foreach ($arrNumbers as $key\
    \ => $value) {\n        if (empty($arrNumberPairs[$value[0]])) {\n           \
    \ $arrNumberPairs[$value[0]] = [];\n        }\n        array_push($arrNumberPairs[$value[0]],\
    \ $value[1]);\n    }\n    ksort($arrNumberPairs);\n    foreach ($arrNumberPairs\
    \ as $key => $value) {\n        sort($arrNumberPairs[$key]);\n    }\n    foreach\
    \ ($arrNumberPairs as $key => $value) {\n        for ($i = 0; $i < count($value);\
    \ $i++) {\n            array_push($arrSorted, $value[$i]);\n        }\n    }\n\
    \    return $arrSorted;\n}\n$test = sort_array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10]);\nprint_r($test);\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 1\n    [2] => 2\n    [3] => 4\n    [4]\
    \ => 8\n    [5] => 3\n    [6] => 5\n    [7] => 6\n    [8] => 9\n    [9] => 10\n\
    \    [10] => 7\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporamkham.php:44\n\
    Stack trace:\n#0 /tmp/tmporamkham.php(53): test()\n#1 {main}\n  thrown in /tmp/tmporamkham.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $arr = array_map(function($num) {\n        return strrev(decbin($num));\n\
    \    }, $arr);\n    $arr = array_map(function($num) {\n        $num = str_pad($num,\
    \ 8, '0', STR_PAD_LEFT);\n        return $num;\n    }, $arr);\n    // sort based\
    \ on number of ones\n    array_multisort(array_map('substr_count', $arr, array_fill(0,\
    \ count($arr), '1')), SORT_ASC, SORT_NUMERIC, $arr);\n    // sort based on base-10\
    \ value\n    array_multisort(array_map('strrev', $arr), SORT_ASC, SORT_NUMERIC,\
    \ $arr);\n    $arr = array_map(function($num) {\n        return bindec(strrev($num));\n\
    \    }, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa3ovmhrp.php:31\n\
    Stack trace:\n#0 /tmp/tmpa3ovmhrp.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpa3ovmhrp.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   for ($i = 0; $i < count($arr); $i++) {\n        $temp = decbin($arr[$i]);\n\
    \        $arr[$i] = array($arr[$i], substr_count($temp, \"1\"));\n    }\n    usort($arr,\
    \ function($a, $b) {\n        if ($a[1] == $b[1]) {\n            return $a[0]\
    \ > $b[0];\n        }\n        return $a[1] > $b[1];\n    });\n    for ($i = 0;\
    \ $i < count($arr); $i++) {\n        $arr[$i] = $arr[$i][0];\n    }\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppgu_ivws.php:31\n\
    Stack trace:\n#0 /tmp/tmppgu_ivws.php(40): test()\n#1 {main}\n  thrown in /tmp/tmppgu_ivws.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $arr_sort = [];\n  $arr_sort_dec = [];\n  $arr_sort_result = [];\n  $arr_num_ones\
    \ = [];\n  foreach ($arr as $num) {\n    if ($num >= 0) {\n      $arr_sort[] =\
    \ $num;\n      $arr_num_ones[] = count_ones($num);\n    } else {\n      $arr_sort_dec[]\
    \ = $num;\n    }\n  }\n  array_multisort($arr_num_ones, $arr_sort);\n  foreach\
    \ ($arr_sort as $num) {\n    $arr_sort_result[] = $num;\n  }\n  foreach ($arr_sort_dec\
    \ as $num) {\n    $arr_sort_result[] = $num;\n  }\n  return $arr_sort_result;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_ones()\
    \ in /tmp/tmpjpjrvacj.php:17\nStack trace:\n#0 /tmp/tmpjpjrvacj.php(33): sort_array(Array)\n\
    #1 /tmp/tmpjpjrvacj.php(37): candidate(Array)\n#2 /tmp/tmpjpjrvacj.php(47): test()\n\
    #3 {main}\n  thrown in /tmp/tmpjpjrvacj.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ for ($i = 0; $i < count($arr); $i++) {\n    $check = decbin($arr[$i]);\n   \
    \ $arr2[$i] = substr_count($check, \"1\");\n  }\n  $length = count($arr);\n  for\
    \ ($i = 0; $i < $length; $i++) {\n    for ($j = 0; $j < $length; $j++) {\n   \
    \   if ($arr2[$i] < $arr2[$j]) {\n        $temp = $arr[$i];\n        $arr[$i]\
    \ = $arr[$j];\n        $arr[$j] = $temp;\n        $temp2 = $arr2[$i];\n      \
    \  $arr2[$i] = $arr2[$j];\n        $arr2[$j] = $temp2;\n      }\n    }\n  }\n\
    \  $length = count($arr);\n  for ($i = 0; $i < $length; $i++) {\n    for ($j =\
    \ 0; $j < $length; $j++) {\n      if ($arr2[$i] == $arr2[$j]) {\n        if ($arr[$i]\
    \ < $arr[$j]) {\n          $temp = $arr[$i];\n          $arr[$i] = $arr[$j];\n\
    \          $arr[$j] = $temp;\n          $temp2 = $arr2[$i];\n          $arr2[$i]\
    \ = $arr2[$j];\n          $arr2[$j] = $temp2;\n        }\n      }\n    }\n  }\n\
    \  return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptwmjoqh9.php:51\n\
    Stack trace:\n#0 /tmp/tmptwmjoqh9.php(60): test()\n#1 {main}\n  thrown in /tmp/tmptwmjoqh9.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ // check if the input array contains any non-numbers,\n  // and abort if any\
    \ non-numbers are found\n  foreach ($arr as $el) {\n    if (!is_int($el)) {\n\
    \      return false;\n    }\n  }\n  // iterate through the array, converting each\
    \ number to binary and\n  // counting the number of ones. Store the resulting\
    \ binary string\n  // and number of ones as an associative array, appending it\
    \ to the\n  // result array, which we will eventually return.\n  $result = [];\n\
    \  foreach ($arr as $el) {\n    $el = (string) decbin($el);\n    $cnt = substr_count($el,\
    \ '1');\n    $result[] = ['dec' => $el, 'cnt' => $cnt];\n  }\n  // sort the result\
    \ array by the number of ones, then by the decimal value\n  // of the binary string\n\
    \  uasort($result, function($a, $b) {\n    if ($a['cnt'] == $b['cnt']) {\n   \
    \   return $a['dec'] > $b['dec'];\n    }\n    return $a['cnt'] > $b['cnt'];\n\
    \  });\n  // iterate through the array, convert the binary string back to decimal,\n\
    \  // and push it to a new array which we will return.\n  $return_array = [];\n\
    \  foreach ($result as $el) {\n    $return_array[] = bindec($el['dec']);\n  }\n\
    \  return $return_array;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmtgz5k0x.php:50\n\
    Stack trace:\n#0 /tmp/tmpmtgz5k0x.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpmtgz5k0x.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ // ...\n  $first = [];\n  $second = [];\n  $third = [];\n  foreach ($arr as\
    \ $key => $value) {\n    if ($value < 0) {\n      $first[] = $value;\n    } elseif\
    \ ($value == 0) {\n      $second[] = $value;\n    } else {\n      $third[] = $value;\n\
    \    }\n  }\n  sort($first);\n  sort($second);\n  sort($third);\n  $result = array_merge($first,\
    \ $second, $third);\n  return $result;\n}\n\n$arr = [-6, -5, -4, -3, -2, -1, 0,\
    \ 1, 2, 3, 4, 5, 6];\n$arr = [1, 1, 0, 2, 3, 4];\n$arr = [1, 5, 2, 3, 4];\necho\
    \ sort_array($arr);\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "Array\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk05b8y0h.php:39\n\
    Stack trace:\n#0 /tmp/tmpk05b8y0h.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpk05b8y0h.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ //iterate over each element of the array\n  for ($i = 0; $i < count($arr); $i++)\
    \ {\n    //if element does not match the condition\n    if ($arr[$i] < 0) {\n\
    \      //return error\n      return \"ERROR! Array contains non-positive numbers!\"\
    ;\n    }\n  }\n  //sort array by number of 1s in their binary representation\n\
    \  //iterate over each element of the array\n  for ($i = 0; $i < count($arr);\
    \ $i++) {\n    //iterate over each element of the array again\n    for ($j = 0;\
    \ $j < count($arr); $j++) {\n      //convert decimal to binary\n      $oneCount\
    \ = substr_count(decbin($arr[$i]), \"1\");\n      $twoCount = substr_count(decbin($arr[$j]),\
    \ \"1\");\n      //if element i has more 1s in its binary representation than\
    \ element j\n      if ($oneCount > $twoCount) {\n        //switch places\n   \
    \     $temp = $arr[$i];\n        $arr[$i] = $arr[$j];\n        $arr[$j] = $temp;\n\
    \      }\n      //if elements have the same number of 1s in their binary representation\n\
    \      else if ($oneCount == $twoCount) {\n        //if element i has a smaller\
    \ value than element j\n        if ($arr[$i] < $arr[$j]) {\n          //switch\
    \ places\n          $temp = $arr[$i];\n          $arr[$i] = $arr[$j];\n      \
    \    $arr[$j] = $temp;\n        }\n      }\n    }\n  }\n  //return sorted array\n\
    \  return $arr;\n}\n\n$input = [1, 5, 2, 3, 4];\necho \"<pre>\";\nprint_r(sort_array($input));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 3\n    [1] => 5\n    [2] => 1\n    [3] => 2\n\
    \    [4] => 4\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo54u_2sm.php:58\n\
    Stack trace:\n#0 /tmp/tmpo54u_2sm.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpo54u_2sm.php\
    \ on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   usort($arr, function($a, $b) {\n        $binaryA = decbin($a);\n        $binaryB\
    \ = decbin($b);\n        $decodedA = str_split($binaryA);\n        $decodedB =\
    \ str_split($binaryB);\n        $decimalA = array_sum($decodedA);\n        $decimalB\
    \ = array_sum($decodedB);\n        if ($decimalA < $decimalB) {\n            return\
    \ -1;\n        } elseif ($decimalA == $decimalB) {\n            return $a - $b;\n\
    \        } else {\n            return 1;\n        }\n    });\n    return $arr;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm2o3ut21.php:34\n\
    Stack trace:\n#0 /tmp/tmpm2o3ut21.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpm2o3ut21.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   // create an empty array\n    $sorted_arr = [];\n    // if the length of $arr\
    \ is 1, then return it\n    if (count($arr) === 1) {\n        return $arr;\n \
    \   }\n    // sort $arr\n    sort($arr);\n    // set the first element of $arr\
    \ to $min\n    $min = $arr[0];\n    // unset first element of $arr\n    unset($arr[0]);\n\
    \    // set the first element of $arr to $max\n    $max = $arr[0];\n    // unset\
    \ first element of $arr\n    unset($arr[0]);\n    // foreach element in $arr\n\
    \    foreach ($arr as $element) {\n        // if $element is less than $min\n\
    \        if ($element < $min) {\n            // add $element to the front of $sorted_arr\n\
    \            array_unshift($sorted_arr, $element);\n            // set $min to\
    \ $element\n            $min = $element;\n        // else if $element is greater\
    \ than $max\n        } else if ($element > $max) {\n            // add $element\
    \ to the end of $sorted_arr\n            array_push($sorted_arr, $element);\n\
    \            // set $max to $element\n            $max = $element;\n        //\
    \ else\n        } else {\n            // add $element to the end of $sorted_arr\n\
    \            array_push($sorted_arr, $element);\n        }\n    }\n    // add\
    \ $min to the front of $sorted_arr\n    array_unshift($sorted_arr, $min);\n  \
    \  // add $max to the end of $sorted_arr\n    array_push($sorted_arr, $max);\n\
    \    // return $sorted_arr\n    return $sorted_arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnzq5_e0a.php:59\n\
    Stack trace:\n#0 /tmp/tmpnzq5_e0a.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpnzq5_e0a.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $newArr = [];\n  $mask = 0b111;\n  for ($i = 0; $i < count($arr); $i++) {\n\
    \    $newArr[$i] = [$arr[$i], substr_count(decbin($arr[$i]), \"1\")];\n  }\n \
    \ usort($newArr, function($a, $b) {\n    if ($a[1] === $b[1]) {\n      return\
    \ $a[0] <=> $b[0];\n    }\n    return $a[1] <=> $b[1];\n  });\n  $newArr = array_column($newArr,\
    \ 0);\n  return $newArr;\n}\n\necho (sort_array([1, 5, 2, 3, 4]) === [1, 2, 3,\
    \ 4, 5]) ? 'TRUE' : 'FALSE' . PHP_EOL;\necho (sort_array([-2, -3, -4, -5, -6])\
    \ === [-6, -5, -4, -3, -2]) ? 'TRUE' : 'FALSE' . PHP_EOL;\necho (sort_array([1,\
    \ 0, 2, 3, 4]) === [0, 1, 2, 3, 4]) ? 'TRUE' : 'FALSE' . PHP_EOL;\necho (sort_array([-2,\
    \ -5, -4, -9, -10]) === [-10, -9, -5, -4, -2]) ? 'TRUE' : 'FALSE' . PHP_EOL;\n\
    \nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "FALSE\nFALSE\nFALSE\nFALSE\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpscmnrq3f.php:36\nStack trace:\n#0 /tmp/tmpscmnrq3f.php(45): test()\n\
    #1 {main}\n  thrown in /tmp/tmpscmnrq3f.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   usort($arr, function($a, $b) {\n        $a = decbin($a);\n        $b = decbin($b);\n\
    \        $c = strlen($a) - substr_count($a, '1');\n        $d = strlen($b) - substr_count($b,\
    \ '1');\n        if ($c < $d) {\n            return -1;\n        } elseif ($c\
    \ > $d) {\n            return 1;\n        } else {\n            return $a < $b\
    \ ? -1 : 1;\n        }\n    });\n    return $arr;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7bj5phh0.php:30\n\
    Stack trace:\n#0 /tmp/tmp7bj5phh0.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp7bj5phh0.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ usort($arr, function($a, $b) {\n    $c = decbin($a);\n    $d = decbin($b);\n\
    \    if (substr_count($c, '1') === substr_count($d, '1')) {\n      return $a -\
    \ $b;\n    }\n    return substr_count($c, '1') - substr_count($d, '1');\n  });\n\
    \  return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp81irv_h8.php:27\n\
    Stack trace:\n#0 /tmp/tmp81irv_h8.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp81irv_h8.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $one_counts = array_map(function($num) {\n    $count = 0;\n    $bin = decbin($num);\n\
    \    for ($i = 0; $i < strlen($bin); $i++) {\n      if ($bin[$i] == 1) {\n   \
    \     $count++;\n      }\n    }\n    return array($num, $count);\n  }, $arr);\n\
    \  usort($one_counts, function($a, $b) {\n    if ($a[1] == $b[1]) {\n      return\
    \ $a[0] - $b[0];\n    }\n    return $a[1] - $b[1];\n  });\n  return array_map(function($pair)\
    \ {\n    return $pair[0];\n  }, $one_counts);\n}\necho \"sort_array([1, 5, 2,\
    \ 3, 4]) should be [1, 2, 3, 4, 5]\\n\";\nvar_dump(sort_array([1, 5, 2, 3, 4]));\n\
    echo \"sort_array([-2, -3, -4, -5, -6]) should be [-6, -5, -4, -3, -2]\\n\";\n\
    var_dump(sort_array([-2, -3, -4, -5, -6]));\necho \"sort_array([1, 0, 2, 3, 4])\
    \ should be [0, 1, 2, 3, 4]\\n\";\nvar_dump(sort_array([1, 0, 2, 3, 4]));\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "sort_array([1, 5, 2, 3, 4]) should be [1, 2, 3, 4, 5]\narray(5) {\n  [0]=>\n\
    \  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(4)\n  [3]=>\n  int(3)\n  [4]=>\n\
    \  int(5)\n}\nsort_array([-2, -3, -4, -5, -6]) should be [-6, -5, -4, -3, -2]\n\
    array(5) {\n  [0]=>\n  int(-6)\n  [1]=>\n  int(-4)\n  [2]=>\n  int(-5)\n  [3]=>\n\
    \  int(-3)\n  [4]=>\n  int(-2)\n}\nsort_array([1, 0, 2, 3, 4]) should be [0, 1,\
    \ 2, 3, 4]\narray(5) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(1)\n  [2]=>\n  int(2)\n\
    \  [3]=>\n  int(4)\n  [4]=>\n  int(3)\n}\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp7w9m5j63.php:42\nStack trace:\n#0 /tmp/tmp7w9m5j63.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp7w9m5j63.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ usort($arr, function($a, $b) {\n    $binA = decbin($a);\n    $binB = decbin($b);\n\
    \    $oneA = substr_count($binA, '1');\n    $oneB = substr_count($binB, '1');\n\
    \    return $oneA == $oneB ? $a - $b : $oneA - $oneB;\n  });\n  return $arr;\n\
    }\n\necho \"--------------------------\\n\";\necho \"sort_array([1, 5, 2, 3, 4])\\\
    n\";\nprint_r(sort_array([1, 5, 2, 3, 4]));\n\necho \"--------------------------\\\
    n\";\necho \"sort_array([-2, -3, -4, -5, -6])\\n\";\nprint_r(sort_array([-2, -3,\
    \ -4, -5, -6]));\n\necho \"--------------------------\\n\";\necho \"sort_array([1,\
    \ 0, 2, 3, 4])\\n\";\nprint_r(sort_array([1, 0, 2, 3, 4]));\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "--------------------------\nsort_array([1, 5, 2, 3, 4])\nArray\n(\n   \
    \ [0] => 1\n    [1] => 2\n    [2] => 4\n    [3] => 3\n    [4] => 5\n)\n--------------------------\n\
    sort_array([-2, -3, -4, -5, -6])\nArray\n(\n    [0] => -6\n    [1] => -4\n   \
    \ [2] => -5\n    [3] => -3\n    [4] => -2\n)\n--------------------------\nsort_array([1,\
    \ 0, 2, 3, 4])\nArray\n(\n    [0] => 0\n    [1] => 1\n    [2] => 2\n    [3] =>\
    \ 4\n    [4] => 3\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptva1847_.php:38\n\
    Stack trace:\n#0 /tmp/tmptva1847_.php(47): test()\n#1 {main}\n  thrown in /tmp/tmptva1847_.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $result = [];\n  $onesArr = [];\n  foreach ($arr as $num) {\n    $str = decbin($num);\n\
    \    $result[$num] = $str;\n    $onesArr[$num] = substr_count($str, \"1\");\n\
    \  }\n  array_multisort($onesArr, SORT_ASC, $result, SORT_ASC, $arr);\n  return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpynhgp_yx.php:27\n\
    Stack trace:\n#0 /tmp/tmpynhgp_yx.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpynhgp_yx.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   usort($arr, function($a, $b) {\n        $bin = function($n) {\n          \
    \  $bin = decbin($n);\n            return strlen(substr_count($bin, '1'));\n \
    \       };\n        $a = $bin($a);\n        $b = $bin($b);\n        if ($a ==\
    \ $b) {\n            return $a < $b ? -1 : 1;\n        }\n        return $a <\
    \ $b ? -1 : 1;\n    });\n    return $arr;\n}\n\necho sort_array([-2, -3, -4, -5,\
    \ -6]) . \"\\n\";\necho sort_array([1, 5, 2, 3, 4]) . \"\\n\";\necho sort_array([1,\
    \ 0, 2, 3, 4]) . \"\\n\";\necho sort_array([1, 5, 2, 3, 4]) . \"\\n\";\necho sort_array([-1,\
    \ -1, 1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, -1,\
    \ -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1,\
    \ -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1,\
    \ 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1,\
    \ 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1,\
    \ 1, 1, 1, -1, -1, 1, 1, 1, 1, -\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwpkfqxr5.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ usort($arr, function($a, $b) {\n    if (substr_count(decbin($a), '1') == substr_count(decbin($b),\
    \ '1')) {\n      return $a <=> $b;\n    } else {\n      return substr_count(decbin($a),\
    \ '1') <=> substr_count(decbin($b), '1');\n    }\n  });\n  return $arr;\n}\necho\
    \ var_dump(sort_array([1, 5, 2, 3, 4]));\nfunction candidate(...$args) {\n   \
    \ return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(5) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(4)\n \
    \ [3]=>\n  int(3)\n  [4]=>\n  int(5)\n}\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpp23t0eev.php:26\nStack trace:\n#0 /tmp/tmpp23t0eev.php(35):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpp23t0eev.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ foreach ($arr as $key => $value) {\n    $bin[] = decbin($value);\n  }\n  arsort($bin);\n\
    \  foreach ($bin as $key => $value) {\n    $value = (int)$value;\n    $value =\
    \ str_split($value);\n    $ones[] = array_sum($value);\n  }\n  array_multisort($ones,\
    \ $arr);\n  return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw3lqgr4v.php:28\n\
    Stack trace:\n#0 /tmp/tmpw3lqgr4v.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpw3lqgr4v.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   return $arr;\n}\n\nclass MyTestCases extends TestCase\n{\n    public function\
    \ testThatSomethingShouldHappen() {\n        $this->assertEquals([1, 2, 3, 4,\
    \ 5], sort_array([1, 5, 2, 3, 4]));\n        $this->assertEquals([-6, -5, -4,\
    \ -3, -2], sort_array([-2, -3, -4, -5, -6]));\n        $this->assertEquals([0,\
    \ 1, 2, 3, 4], sort_array([1, 0, 2, 3, 4]));\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Class 'TestCase' not found in /tmp/tmp9zyvjh1x.php:13\n\
    Stack trace:\n#0 {main}\n  thrown in /tmp/tmp9zyvjh1x.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $arr = array_map('decbin', $arr);\n  $res = array();\n  foreach ($arr as $value)\
    \ {\n    $res[] = array(\n      'ones' => substr_count($value, '1'),\n      'dec'\
    \ => bindec($value)\n    );\n  }\n  usort($res, function($a, $b) {\n    if ($a['ones']\
    \ == $b['ones']) {\n      return $a['dec'] - $b['dec'];\n    }\n    return $a['ones']\
    \ - $b['ones'];\n  });\n  return array_map(function($v) {\n    return $v['dec'];\n\
    \  }, $res);\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph0w0w7mj.php:34\n\
    Stack trace:\n#0 /tmp/tmph0w0w7mj.php(43): test()\n#1 {main}\n  thrown in /tmp/tmph0w0w7mj.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $ones = [];\n  $zeros = [];\n  foreach ($arr as $a) {\n    $ones[] = decbin($a);\n\
    \    $zeros[] = decbin($a);\n  }\n  array_multisort(array_map('strlen', $ones),\
    \ SORT_ASC, $ones, $arr);\n  array_multisort(array_map('strlen', $zeros), SORT_DESC,\
    \ $zeros, $arr);\n  return $arr;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp794i_7b9.php:26\n\
    Stack trace:\n#0 /tmp/tmp794i_7b9.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp794i_7b9.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   // If a negative number, return it\n    if (in_array(0, $arr) === false) {\n\
    \        return $arr;\n    }\n\n    // If a negative number exists, return the\
    \ sorted array\n    $sorted_array = array();\n    foreach ($arr as $number) {\n\
    \        $array_number_ones = str_split(decbin($number));\n        $number_ones\
    \ = array_count_values($array_number_ones);\n        $number_ones = isset($number_ones['1'])\
    \ ? $number_ones['1'] : $number_ones[1];\n        $sorted_array[$number_ones][]\
    \ = $number;\n    }\n    ksort($sorted_array);\n    $sorted_array = array_reduce($sorted_array,\
    \ 'array_merge', array());\n    return $sorted_array;\n}\n\nvar_dump(sort_array([1,\
    \ 0, 2, 3, 4])) === array(0, 1, 2, 3, 4);\nvar_dump(sort_array([1, 5, 2, 3, 4]))\
    \ === array(1, 2, 3, 4, 5);\nvar_dump(sort_array([1, 2, 3, 4, 5])) === array(1,\
    \ 2, 3, 4, 5);\nvar_dump(sort_array([-2, -3, -4, -5, -6])) === array(-6, -5, -4,\
    \ -3, -2);\nvar_dump(sort_array([-1, -2, -3, -4, -5, -6])) === array(-1, -2, -3,\
    \ -4, -5, -6);\nvar_dump(sort_array([-3, -4, -5, -6, 1, 2, 3, 4, 5])) === array(-6,\
    \ -5, -4, -3, 1, 2, 3, 4, 5);\nvar_dump(sort_array([-3, -4, -5, -6, 1, 2, 3, 4,\
    \ 5, -10, -10, -11, -11, -11, -12, -13, -14, -1,\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxh055y4h.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   // here I'm going to use a bubble sort algorithm\n    // because I'm a masochist\
    \ and I like my code to be slow and inefficient\n    $count = count($arr);\n \
    \   do {\n        $swapped = false;\n        for ($i = 0; $i < $count; $i++) {\n\
    \            $val = $arr[$i];\n            $next_val = $arr[$i + 1];\n       \
    \     if (bits_count($val) > bits_count($next_val)) {\n                $arr[$i]\
    \ = $next_val;\n                $arr[$i + 1] = $val;\n                $swapped\
    \ = true;\n            } elseif (bits_count($val) == bits_count($next_val)) {\n\
    \                if ($val > $next_val) {\n                    $arr[$i] = $next_val;\n\
    \                    $arr[$i + 1] = $val;\n                    $swapped = true;\n\
    \                }\n            }\n        }\n    } while ($swapped == true);\n\
    \    return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bits_count()\
    \ in /tmp/tmpwspq5ons.php:18\nStack trace:\n#0 /tmp/tmpwspq5ons.php(35): sort_array(Array)\n\
    #1 /tmp/tmpwspq5ons.php(39): candidate(Array)\n#2 /tmp/tmpwspq5ons.php(49): test()\n\
    #3 {main}\n  thrown in /tmp/tmpwspq5ons.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $sortedArray = [];\n  $sortedArray = $arr;\n  for ($i = 0; $i < count($sortedArray);\
    \ $i++) {\n    for ($j = 0; $j < count($sortedArray); $j++) {\n      if (countOnes($sortedArray[$i])\
    \ < countOnes($sortedArray[$j])) {\n        $temp = $sortedArray[$i];\n      \
    \  $sortedArray[$i] = $sortedArray[$j];\n        $sortedArray[$j] = $temp;\n \
    \     }\n    }\n  }\n  return $sortedArray;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function countOnes() in\
    \ /tmp/tmpf98mlwz3.php:14\nStack trace:\n#0 /tmp/tmpf98mlwz3.php(25): sort_array(Array)\n\
    #1 /tmp/tmpf98mlwz3.php(29): candidate(Array)\n#2 /tmp/tmpf98mlwz3.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpf98mlwz3.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $new_arr = [];\n  $arr1 = [];\n  $arr2 = [];\n  foreach ($arr as $k => $v) {\n\
    \    $ones = substr_count(decbin($v), '1');\n    if ($ones === 0) {\n      $arr1[]\
    \ = $v;\n    } else {\n      $arr2[$ones][] = $v;\n    }\n  }\n  ksort($arr2);\n\
    \  foreach ($arr2 as $k => $v) {\n    sort($v);\n    foreach ($v as $k2 => $v2)\
    \ {\n      $new_arr[] = $v2;\n    }\n  }\n  sort($arr1);\n  foreach ($arr1 as\
    \ $k => $v) {\n    $new_arr[] = $v;\n  }\n  return $new_arr;\n}\n\necho '<pre>sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]: ';\nvar_dump(sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]);\necho '</pre>';\n\necho '<pre>sort_array([-2, -3, -4, -5,\
    \ -6]) == [-6, -5, -4, -3, -2]: ';\nvar_dump(sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]);\necho '</pre>';\n\necho '<pre>sort_array([1, 0, 2,\
    \ 3, 4]) == [0, 1, 2, 3, 4]: ';\nvar_dump(sort_array([1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 3, 4]);\necho '</pre>';\n\necho '<pre>sort_array([1, 0, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\
    \ 28,\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmw5f3ons.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $res = [];\n    foreach ($arr as $item) {\n        $res[$item] = count_ones($item);\n\
    \    }\n    arsort($res);\n    return array_keys($res);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_ones()\
    \ in /tmp/tmp8o6a6pe6.php:12\nStack trace:\n#0 /tmp/tmp8o6a6pe6.php(19): sort_array(Array)\n\
    #1 /tmp/tmp8o6a6pe6.php(23): candidate(Array)\n#2 /tmp/tmp8o6a6pe6.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmp8o6a6pe6.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $new_arr = [];\n    foreach ($arr as $value) {\n        $new_arr[$value] =\
    \ decbin($value);\n    }\n    arsort($new_arr);\n    $i = 0;\n    foreach ($new_arr\
    \ as $key => $value) {\n        $new_arr[$i] = $key;\n        $i++;\n    }\n \
    \   return $new_arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx07brbo7.php:28\n\
    Stack trace:\n#0 /tmp/tmpx07brbo7.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpx07brbo7.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $compare = function($a, $b) {\n    return substr_count(decbin($a), '1') == substr_count(decbin($b),\
    \ '1') ?\n      $a - $b : substr_count(decbin($a), '1') - substr_count(decbin($b),\
    \ '1');\n  };\n  usort($arr, $compare);\n  return $arr;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpts48plhl.php:23\n\
    Stack trace:\n#0 /tmp/tmpts48plhl.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpts48plhl.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $ones = [];\n  foreach ($arr as $int) {\n    $ones[] = [\n      'int' => $int,\n\
    \      'ones' => ones($int)\n    ];\n  }\n  uasort($ones, function($a, $b) {\n\
    \    if ($a['ones'] > $b['ones']) {\n      return 1;\n    } elseif ($a['ones']\
    \ < $b['ones']) {\n      return -1;\n    } else {\n      return $a['int'] > $b['int']\
    \ ? 1 : -1;\n    }\n  });\n  return array_map(function($v) {\n    return $v['int'];\n\
    \  }, $ones);\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function ones() in /tmp/tmpx3rjike8.php:14\n\
    Stack trace:\n#0 /tmp/tmpx3rjike8.php(32): sort_array(Array)\n#1 /tmp/tmpx3rjike8.php(36):\
    \ candidate(Array)\n#2 /tmp/tmpx3rjike8.php(46): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpx3rjike8.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   foreach ($arr as $key => $val) {\n        $ones[$key] = substr_count(decbin($val),\
    \ \"1\");\n    }\n    array_multisort($ones, SORT_ASC, $arr);\n    return $arr;\n\
    }\necho '<pre>';\nprint_r(sort_array([1, 5, 2, 3, 4]));\necho '</pre>';\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 4\n    [3] => 3\n\
    \    [4] => 5\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyiuckqo1.php:25\n\
    Stack trace:\n#0 /tmp/tmpyiuckqo1.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpyiuckqo1.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   // Use a custom sort function\n    usort($arr, function($a, $b) {\n      \
    \  $binA = decbin($a);\n        $binB = decbin($b);\n        $onesA = substr_count($binA,\
    \ '1');\n        $onesB = substr_count($binB, '1');\n        if ($onesA === $onesB)\
    \ {\n            return $a - $b;\n        }\n        return $onesA - $onesB;\n\
    \    });\n    return $arr;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgmvz5zw7.php:29\n\
    Stack trace:\n#0 /tmp/tmpgmvz5zw7.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpgmvz5zw7.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ foreach ($arr as $key => $num) {\n    $bin = str_split(decbin($num));\n    $bin\
    \ = array_count_values($bin);\n    $arr[$key] = array($bin[1], $num);\n  }\n \
    \ usort($arr, function($a, $b) {\n    if ($a[0] == $b[0]) return $a[1] - $b[1];\n\
    \    return $a[0] - $b[0];\n  });\n  return array_column($arr, 1);\n}\n ?>\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "function candidate(...$args) {\n    return sort_array(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ for ($i = 0; $i < count($arr); $i++) {\n    for ($j = 0; $j < count($arr); $j++)\
    \ {\n      if ($arr[$i] < 0 && $arr[$j] < 0) {\n        if (number_of_ones($arr[$i])\
    \ < number_of_ones($arr[$j])) {\n          swap($arr, $i, $j);\n        } else\
    \ if (number_of_ones($arr[$i]) == number_of_ones($arr[$j])) {\n          if ($arr[$i]\
    \ > $arr[$j]) {\n            swap($arr, $i, $j);\n          }\n        }\n   \
    \   } else if ($arr[$i] > 0 && $arr[$j] > 0) {\n        if (number_of_ones($arr[$i])\
    \ < number_of_ones($arr[$j])) {\n          swap($arr, $i, $j);\n        } else\
    \ if (number_of_ones($arr[$i]) == number_of_ones($arr[$j])) {\n          if ($arr[$i]\
    \ > $arr[$j]) {\n            swap($arr, $i, $j);\n          }\n        }\n   \
    \   } else if ($arr[$i] < 0 && $arr[$j] > 0) {\n        swap($arr, $i, $j);\n\
    \      }\n    }\n  }\n  return $arr;\n}\n\nfunction candidate(...$args) {\n  \
    \  return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function number_of_ones()\
    \ in /tmp/tmpngmvpii4.php:21\nStack trace:\n#0 /tmp/tmpngmvpii4.php(37): sort_array(Array)\n\
    #1 /tmp/tmpngmvpii4.php(41): candidate(Array)\n#2 /tmp/tmpngmvpii4.php(51): test()\n\
    #3 {main}\n  thrown in /tmp/tmpngmvpii4.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ // good luck\n  $result = [];\n  $one_counter = [];\n  foreach ($arr as $key\
    \ => $value) {\n    $one_counter[$key] = substr_count(decbin($value), '1');\n\
    \  }\n  asort($one_counter);\n  foreach ($one_counter as $key => $value) {\n \
    \   $result[] = $arr[$key];\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7gdqd5zd.php:27\n\
    Stack trace:\n#0 /tmp/tmp7gdqd5zd.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp7gdqd5zd.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   if (empty($arr)) return $arr;\n    $res = [];\n    foreach ($arr as $el) {\n\
    \        $binary = decbin($el);\n        $count = substr_count($binary, '1');\n\
    \        $res[$count][] = $el;\n    }\n    foreach ($res as $i => $v) {\n    \
    \    if ($i % 2) {\n            $res[$i] = array_reverse($v);\n        }\n   \
    \ }\n    return array_reduce($res, 'array_merge', []);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsga4ghih.php:30\n\
    Stack trace:\n#0 /tmp/tmpsga4ghih.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpsga4ghih.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ //$arr = [1, 5, 2, 3, 4];\n  $arr = [1, 0, 2, 3, 4];\n  //$arr = [-2, -3, -4,\
    \ -5, -6];\n  $tmp_array = [];\n  $tmp_array2 = [];\n  $string = \"\";\n  foreach\
    \ ($arr as $value) {\n    if ($value < 0) {\n      $tmp_array2[] = $value;\n \
    \   } else {\n      $string = decbin($value);\n      $string = strlen(preg_replace('/[^1]/',\
    \ '', $string));\n      $tmp_array[$string][] = $value;\n    }\n  }\n  ksort($tmp_array);\n\
    \  $result = [];\n  foreach ($tmp_array as $value) {\n    $result = array_merge($result,\
    \ $value);\n  }\n  if (!empty($tmp_array2)) {\n    foreach ($tmp_array2 as $value)\
    \ {\n      $result[] = $value;\n    }\n  }\n  return $result;\n}\necho sort_array([1,\
    \ 5, 2, 3, 4]);\necho sort_array([-2, -3, -4, -5, -6]);\necho sort_array([1, 0,\
    \ 2, 3, 4]);\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "ArrayArrayArray\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv119l51k.php:45\n\
    Stack trace:\n#0 /tmp/tmpv119l51k.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpv119l51k.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $ones = [];\n  $map = [];\n  foreach ($arr as $k => $v) {\n    $key = substr_count(decbin($v),\
    \ '1');\n    $ones[$key] = $key;\n    $map[$key][] = $v;\n  }\n  ksort($ones);\n\
    \  foreach ($ones as $key => $v) {\n    sort($map[$key]);\n  }\n  return call_user_func_array('array_merge',\
    \ $map);\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf5qi2v1b.php:30\n\
    Stack trace:\n#0 /tmp/tmpf5qi2v1b.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpf5qi2v1b.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = [];\n    foreach ($arr as $value) {\n        $ones[] = substr_count(decbin($value),\
    \ '1');\n    }\n    asort($ones);\n    $result = [];\n    foreach ($ones as $key\
    \ => $value) {\n        $result[] = $arr[$key];\n    }\n    return $result;\n\
    }\n\n$arr = [-2, -3, -4, -5, -6];\necho implode(' ', sort_array($arr)) . PHP_EOL;\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "-4 -6 -2 -3 -5\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwhp8xygg.php:29\n\
    Stack trace:\n#0 /tmp/tmpwhp8xygg.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpwhp8xygg.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $z = array_map(function($x) {\n    return [$x, (string) decbin($x)];\n  }, $arr);\n\
    \  usort($z, function($a, $b) {\n    if (substr_count($a[1], '1') == substr_count($b[1],\
    \ '1')) {\n      return $a[0] - $b[0];\n    }\n    return substr_count($a[1],\
    \ '1') - substr_count($b[1], '1');\n  });\n  return array_map(function($x) { return\
    \ $x[0]; }, $z);\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9a_sl9iz.php:28\n\
    Stack trace:\n#0 /tmp/tmp9a_sl9iz.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp9a_sl9iz.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpugj8cr_k.php:18\n\
    Stack trace:\n#0 /tmp/tmpugj8cr_k.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpugj8cr_k.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   if (empty($arr)) {\n        return [];\n    }\n    $result = [];\n    foreach\
    \ ($arr as $item) {\n        $result[] = array(\n            'number' => $item,\n\
    \            'ones' => substr_count(decbin($item), '1')\n        );\n    }\n \
    \   usort($result, function ($a, $b) {\n        if ($a['ones'] == $b['ones'])\
    \ {\n            return $a['number'] > $b['number'];\n        }\n        return\
    \ $a['ones'] > $b['ones'];\n    });\n    $res = [];\n    foreach ($result as $item)\
    \ {\n        $res[] = $item['number'];\n    }\n    return $res;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpor1gjor4.php:38\n\
    Stack trace:\n#0 /tmp/tmpor1gjor4.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpor1gjor4.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   for ($i = 0; $i < count($arr); $i++) {\n        $sum = decbin($arr[$i]);\n\
    \        $numOne[$i] = substr_count($sum, '1');\n    }\n    array_multisort($numOne,\
    \ SORT_ASC, $arr);\n    return $arr;\n}\n\necho \"<pre>\";\nprint_r(sort_array([1,\
    \ 5, 2, 3, 4]));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(sort_array([-2,\
    \ -3, -4, -5, -6]));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(sort_array([1,\
    \ 0, 2, 3, 4]));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 4\n    [3] => 3\n\
    \    [4] => 5\n)\n</pre><pre>Array\n(\n    [0] => -6\n    [1] => -4\n    [2] =>\
    \ -5\n    [3] => -3\n    [4] => -2\n)\n</pre><pre>Array\n(\n    [0] => 0\n   \
    \ [1] => 1\n    [2] => 2\n    [3] => 4\n    [4] => 3\n)\n</pre>\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpkp9gwqmi.php:35\nStack trace:\n\
    #0 /tmp/tmpkp9gwqmi.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpkp9gwqmi.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   foreach ($arr as $key => $value) {\n        $arr[$key] = [\n            'number'\
    \ => $value,\n            'ones' => substr_count(decbin($value), '1')\n      \
    \  ];\n    }\n    return array_column(array_multisort(array_column($arr, 'ones'),\
    \ SORT_ASC,\n        array_column($arr, 'number'), SORT_ASC, $arr), 'number');\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: array_column() expects parameter 1 to be array, bool given in\
    \ /tmp/tmp3_ahezmo.php on line 17\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp3_ahezmo.php:25\nStack trace:\n#0 /tmp/tmp3_ahezmo.php(35): test()\n\
    #1 {main}\n  thrown in /tmp/tmp3_ahezmo.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $res = [];\n  $sorted_arr = [];\n  foreach ($arr as $key => $value) {\n    $sorted_arr[$key]\
    \ = $value;\n    $res[$key] = $value;\n  }\n  sort($sorted_arr);\n  while (!empty($sorted_arr))\
    \ {\n    $curr = array_shift($sorted_arr);\n    $binary = decbin($curr);\n   \
    \ $binary_arr = str_split($binary);\n    $one_count = 0;\n    foreach ($binary_arr\
    \ as $key => $value) {\n      if ($value == 1) {\n        $one_count += 1;\n \
    \     }\n    }\n    if (!isset($res[$one_count])) {\n      $res[$one_count] =\
    \ [];\n    }\n    $res[$one_count][] = $curr;\n  }\n  return array_reduce($res,\
    \ function($carry, $item) {\n    return array_merge($carry, $item);\n  }, []);\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: Cannot use a scalar value as an array in /tmp/tmpnqzrooqo.php\
    \ on line 30\n\nWarning: Cannot use a scalar value as an array in /tmp/tmpnqzrooqo.php\
    \ on line 30\n\nWarning: Cannot use a scalar value as an array in /tmp/tmpnqzrooqo.php\
    \ on line 30\n\nWarning: Cannot use a scalar value as an array in /tmp/tmpnqzrooqo.php\
    \ on line 30\n\nWarning: Cannot use a scalar value as an array in /tmp/tmpnqzrooqo.php\
    \ on line 30\n\nWarning: array_merge(): Expected parameter 2 to be an array, int\
    \ given in /tmp/tmpnqzrooqo.php on line 33\n\nWarning: array_merge(): Expected\
    \ parameter 1 to be an array, null given in /tmp/tmpnqzrooqo.php on line 33\n\n\
    Warning: array_merge(): Expected parameter 1 to be an array, null given in /tmp/tmpnqzrooqo.php\
    \ on line 33\n\nWarning: array_merge(): Expected parameter 1 to be an array, null\
    \ given in /tmp/tmpnqzrooqo.php on line 33\n\nWarning: array_merge(): Expected\
    \ parameter 1 to be an array, null given in /tmp/tmpnqzrooqo.php on line 33\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpnqzrooqo.php:42\nStack\
    \ trace:\n#0 /tmp/tmpnqzrooqo.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpnqzrooqo.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ if (empty($arr)) {\n    return [];\n  }\n\n  $results = array_map(function($el)\
    \ {\n    return [$el, decbin($el)];\n  }, $arr);\n\n  usort($results, function($el1,\
    \ $el2) {\n    $el1_str = $el1[1];\n    $el2_str = $el2[1];\n\n    $el1_count\
    \ = substr_count($el1_str, '1');\n    $el2_count = substr_count($el2_str, '1');\n\
    \n    if ($el1_count === $el2_count) {\n      return ($el1[0] < $el2[0]) ? -1\
    \ : 1;\n    }\n\n    return ($el1_count < $el2_count) ? -1 : 1;\n  });\n\n  return\
    \ array_map(function($el) {\n    return $el[0];\n  }, $results);\n}\n\n$cases\
    \ = [\n  [\n    'arr' => [1, 5, 2, 3, 4],\n    'expected' => [1, 2, 3, 4, 5]\n\
    \  ],\n  [\n    'arr' => [-2, -3, -4, -5, -6],\n    'expected' => [-6, -5, -4,\
    \ -3, -2]\n  ],\n  [\n    'arr' => [1, 0, 2, 3, 4],\n    'expected' => [0, 1,\
    \ 2, 3, 4]\n  ],\n  [\n    'arr' => [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024],\n\
    \    'expected' => [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]\n  ],\n  [\n\
    \    'arr' => [1000, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1],\n    'expected'\
    \ => [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 1000]\n  ],\n  [\n    'arr'\
    \ => [],\n    'expected' => []\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvt5c3lvy.php on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $binNums = [];\n  $decNums = [];\n  for ($i = 0; $i < count($arr); $i++) {\n\
    \    array_push($binNums, decbin($arr[$i]));\n    array_push($decNums, $arr[$i]);\n\
    \  }\n  $oneCount = [];\n  for ($i = 0; $i < count($binNums); $i++) {\n    $oneCount[$i]\
    \ = substr_count($binNums[$i], '1');\n  }\n  $sortable = array_combine($oneCount,\
    \ $decNums);\n  asort($sortable);\n  $result = array_values($sortable);\n  return\
    \ $result;\n}\n$a = [-2, -3, -4, -5, -6];\nprint_r(sort_array($a));\n ?>\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "Array\n(\n    [0] => -6\n    [1] => -5\n)\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ foreach ($arr as $a) {\n    if ($a < 0) {\n      echo \"invalid input\" . PHP_EOL;\n\
    \      return;\n    }\n  }\n  $count = 0;\n  $result = array();\n  foreach ($arr\
    \ as $a) {\n    $binary = decbin($a);\n    $binary_str = strval($binary);\n  \
    \  $result[$a] = substr_count($binary_str, \"1\");\n  }\n  arsort($result);\n\
    \  $sorted_arr = array();\n  foreach ($result as $key => $val) {\n    $sorted_arr[]\
    \ = $key;\n  }\n  return $sorted_arr;\n}\n\n$arr = [0, 1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10];\necho implode(\" \", sort_array($arr)) . PHP_EOL;\n\n$arr = [1000, 1001,\
    \ 1010, 1011, 1100, 1101, 1110, 1111];\necho implode(\" \", sort_array($arr))\
    \ . PHP_EOL;\n\n$arr = [100, 0, 1, 10, 3, 100, 101, 1001, 1000, 1010, 1100, 1101,\
    \ 1110, 1111];\necho implode(\" \", sort_array($arr)) . PHP_EOL;\n\n$arr = [0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1000, 1001, 1010, 1011, 1100, 1101, 1110, 1111];\n\
    echo implode(\" \", sort_array($arr)) . PHP_EOL;\n\n$arr = [0, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, -1000, -1001, -1010, -1011, -1100, -1101, -1110, -1111];\necho\
    \ implode(\" \", sort_array($arr)) . PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "7 3 5 6 9 10 1 2 4 8 0\n1011 1001 1010 1000 1111 1101 1110 1100\n1010 1001\
    \ 1000 1111 1101 1110 101 1100 100 10 3 1 0\n1011 1010 1001 1111 1000 1110 1101\
    \ 1100 7 9 10 6 5 3 1 8 4 2 0\ninvalid input\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpvs6kpw73.php on line 44\n\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpvs6kpw73.php:50\nStack trace:\n#0 /tmp/tmpvs6kpw73.php(60):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvs6kpw73.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3kkwqr05.php:18\n\
    Stack trace:\n#0 /tmp/tmp3kkwqr05.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp3kkwqr05.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   // TODO: Write your code here\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1y40d6o2.php:18\n\
    Stack trace:\n#0 /tmp/tmp1y40d6o2.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp1y40d6o2.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   usort($arr, function($a, $b) {\n        $a_1 = substr_count(decbin($a), \"\
    1\");\n        $b_1 = substr_count(decbin($b), \"1\");\n        if ($a_1 == $b_1)\
    \ {\n            return $a - $b;\n        }\n        return $a_1 - $b_1;\n   \
    \ });\n    return $arr;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3yky3val.php:26\n\
    Stack trace:\n#0 /tmp/tmp3yky3val.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp3yky3val.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $array = array();\n  $temp = array();\n  $new_arr = array();\n  for ($i = 0;\
    \ $i < count($arr); $i++) {\n    $array[$i] = array('number' => $arr[$i], 'ones'\
    \ => substr_count(decbin($arr[$i]), '1'));\n  }\n  for ($i = 0; $i < count($array);\
    \ $i++) {\n    for ($j = 0; $j < count($array) - 1; $j++) {\n      if ($array[$j]['ones']\
    \ > $array[$j + 1]['ones']) {\n        $temp = $array[$j];\n        $array[$j]\
    \ = $array[$j + 1];\n        $array[$j + 1] = $temp;\n      }\n    }\n  }\n  for\
    \ ($i = 0; $i < count($array); $i++) {\n    for ($j = 0; $j < count($array) -\
    \ 1; $j++) {\n      if ($array[$j]['ones'] == $array[$j + 1]['ones']) {\n    \
    \    if ($array[$j]['number'] > $array[$j + 1]['number']) {\n          $temp =\
    \ $array[$j];\n          $array[$j] = $array[$j + 1];\n          $array[$j + 1]\
    \ = $temp;\n        }\n      }\n    }\n  }\n  for ($i = 0; $i < count($array);\
    \ $i++) {\n    $new_arr[$i] = $array[$i]['number'];\n  }\n  return $new_arr;\n\
    }\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp85qy8plv.php:47\n\
    Stack trace:\n#0 /tmp/tmp85qy8plv.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp85qy8plv.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   if (!$arr) return $arr;\n    $count = [];\n    foreach ($arr as $v) {\n  \
    \      $count[decbin($v)][] = $v;\n    }\n    ksort($count);\n    $count = array_reverse($count);\n\
    \    $nArr = [];\n    foreach ($count as $v) {\n        foreach ($v as $k1 =>\
    \ $v1) {\n            $nArr[] = $v1;\n        }\n    }\n    return $nArr;\n}\n\
    \n$res = sort_array([-2, -3, -4, -5, -6]);\nprint_r($res);\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -2\n    [1] => -3\n    [2] => -4\n    [3] => -5\n\
    \    [4] => -6\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk1k2ocvn.php:33\n\
    Stack trace:\n#0 /tmp/tmpk1k2ocvn.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpk1k2ocvn.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $nums = array_map(function($num) {\n        $result = str_pad(decbin($num),\
    \ 32, \"0\", STR_PAD_LEFT);\n        return [$num, substr_count($result, \"1\"\
    )];\n    }, $arr);\n    usort($nums, function($num1, $num2) {\n        if ($num1[1]\
    \ == $num2[1]) return $num1[0] - $num2[0];\n        return $num1[1] - $num2[1];\n\
    \    });\n    return array_map(function($num) {\n        return $num[0];\n   \
    \ }, $nums);\n}\n\nvar_dump(sort_array([1, 0, 2, 3, 4]));\nvar_dump(sort_array([1,\
    \ 5, 2, 3, 4]));\nvar_dump(sort_array([-2, -3, -4, -5, -6]));\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(5) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(1)\n  [2]=>\n  int(2)\n \
    \ [3]=>\n  int(4)\n  [4]=>\n  int(3)\n}\narray(5) {\n  [0]=>\n  int(1)\n  [1]=>\n\
    \  int(2)\n  [2]=>\n  int(4)\n  [3]=>\n  int(3)\n  [4]=>\n  int(5)\n}\narray(5)\
    \ {\n  [0]=>\n  int(-6)\n  [1]=>\n  int(-4)\n  [2]=>\n  int(-5)\n  [3]=>\n  int(-3)\n\
    \  [4]=>\n  int(-2)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzn6qaoni.php:32\n\
    Stack trace:\n#0 /tmp/tmpzn6qaoni.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpzn6qaoni.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   sort($arr);\n    $arrBinary = [];\n    foreach ($arr as $item) {\n       \
    \ $arrBinary[] = decbin($item);\n    }\n    // var_dump($arrBinary);\n    array_multisort(array_map('strlen',\
    \ $arrBinary), SORT_ASC, $arrBinary, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgkyuauqu.php:25\n\
    Stack trace:\n#0 /tmp/tmpgkyuauqu.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpgkyuauqu.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $results = [];\n  foreach ($arr as $num) {\n    $ones = substr_count(decbin($num),\
    \ '1');\n    $results[$ones][] = $num;\n  }\n  ksort($results);\n  $result = [];\n\
    \  foreach ($results as $ones => $row) {\n    if (count($row) > 1) {\n      sort($row);\n\
    \    }\n    $result = array_merge($result, $row);\n  }\n  return $result;\n}\n\
    \n$testCase = [\n  [1, 5, 2, 3, 4],\n  [-2, -3, -4, -5, -6],\n  [1, 0, 2, 3, 4],\n\
    \  [1,2,5,12,13,13,7,8,9,11,12,11,9,9,7,15,16,17,15,17,18,19,20],\n  [15,29,18,1,2,3,11,16,21,24,22,17,3,11,10,19,18,24,3,23,3,19,17,16,4,24,14,13,2,17,14,10,2,24,11,23,9,22,10,21,19,22,16,21,12,20,1,15,17,11,23,3,3,20,4,4,4,19,24,13,13,14,17,2,2,15,24,10,12,23,21,15,12,16,24,8,19,19,20,12,10,15,24,8,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptvwjbm83.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   usort($arr, function($a, $b) {\n        $aBinary = decbin($a);\n        $bBinary\
    \ = decbin($b);\n        $aOnes = substr_count($aBinary, '1');\n        $bOnes\
    \ = substr_count($bBinary, '1');\n        if ($aOnes == $bOnes) {\n          \
    \  return $a - $b;\n        }\n        return $aOnes - $bOnes;\n    });\n    return\
    \ $arr;\n}\necho print_r(sort_array([1, 5, 2, 3, 4]));\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 5\n)\n1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc7z7m_gy.php:29\n\
    Stack trace:\n#0 /tmp/tmpc7z7m_gy.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpc7z7m_gy.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ for ($i = 0; $i < count($arr); $i++) {\n    for ($j = $i + 1; $j < count($arr);\
    \ $j++) {\n      if (get_ones($arr[$i]) == get_ones($arr[$j])) {\n        if ($arr[$i]\
    \ > $arr[$j]) {\n          $tmp = $arr[$i];\n          $arr[$i] = $arr[$j];\n\
    \          $arr[$j] = $tmp;\n        }\n      } else if (get_ones($arr[$i]) >\
    \ get_ones($arr[$j])) {\n        $tmp = $arr[$i];\n        $arr[$i] = $arr[$j];\n\
    \        $arr[$j] = $tmp;\n      }\n    }\n  }\n  return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_ones() in\
    \ /tmp/tmpklp8vq07.php:12\nStack trace:\n#0 /tmp/tmpklp8vq07.php(29): sort_array(Array)\n\
    #1 /tmp/tmpklp8vq07.php(33): candidate(Array)\n#2 /tmp/tmpklp8vq07.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmpklp8vq07.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ // your code\n}\n\nsort_array([1, 0, 2, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo8gudnz.php:19\n\
    Stack trace:\n#0 /tmp/tmpqo8gudnz.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpqo8gudnz.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $result = array();\n    foreach ($arr as $item) {\n        $result[decbin($item)]\
    \ = $item;\n    }\n    ksort($result);\n    return array_values($result);\n}\n\
    \nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj7wmkrlh.php:23\n\
    Stack trace:\n#0 /tmp/tmpj7wmkrlh.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpj7wmkrlh.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones_arr = [];\n    $zeros_arr = [];\n    $sorted_arr = [];\n    $cnt = 0;\n\
    \    foreach ($arr as $number) {\n        if ($number < 0) {\n            $arr[$cnt]\
    \ = $number * -1;\n        }\n        $cnt++;\n    }\n    arsort($arr);\n    foreach\
    \ ($arr as $number) {\n        $binary = decbin($number);\n        $ones = 0;\n\
    \        for ($i = 0; $i < strlen($binary); $i++) {\n            if ($binary[$i]\
    \ == 1) {\n                $ones++;\n            }\n        }\n        if ($number\
    \ < 0) {\n            $number = $number * -1;\n        }\n        if ($ones ==\
    \ 0) {\n            $zeros_arr[] = $number;\n        } else {\n            $ones_arr[$ones][]\
    \ = $number;\n        }\n    }\n    ksort($ones_arr);\n    foreach ($ones_arr\
    \ as $numbers) {\n        foreach ($numbers as $number) {\n            $sorted_arr[]\
    \ = $number;\n        }\n    }\n    foreach ($zeros_arr as $number) {\n      \
    \  $sorted_arr[] = $number;\n    }\n    foreach ($sorted_arr as $number) {\n \
    \       if ($number < 0) {\n            $sorted_arr[$cnt] = $number * -1;\n  \
    \      }\n        $cnt++;\n    }\n    return $sorted_arr;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbobp5_m4.php:60\n\
    Stack trace:\n#0 /tmp/tmpbobp5_m4.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpbobp5_m4.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ usort($arr, function($x, $y) {\n    $binX = decbin($x);\n    $binY = decbin($y);\n\
    \    $xOnes = substr_count($binX, '1');\n    $yOnes = substr_count($binY, '1');\n\
    \    if ($xOnes == $yOnes) {\n      return $x - $y;\n    }\n    return $xOnes\
    \ - $yOnes;\n  });\n  return $arr;\n}\necho sort_array([1, 5, 2, 3, 4]) . '<br>';\n\
    echo sort_array([-2, -3, -4, -5, -6]) . '<br>';\necho sort_array([1, 0, 2, 3,\
    \ 4]) . '<br>';\necho sort_array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\
    \ 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\
    \ 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\
    \ 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89,\
    \ 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,\
    \ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123,\
    \ 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\
    \ 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,\
    \ 156,\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0g4ufqfl.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $numbers = [];\n    foreach ($arr as $a) {\n        $numbers[] = [\n     \
    \       'ones' => substr_count(decbin($a), '1'),\n            'value' => $a\n\
    \        ];\n    }\n    usort($numbers, function($a, $b) {\n        if ($a['ones']\
    \ === $b['ones']) {\n            return $a['value'] - $b['value'];\n        }\n\
    \        return $a['ones'] - $b['ones'];\n    });\n    return array_column($numbers,\
    \ 'value');\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa99mbas1.php:31\n\
    Stack trace:\n#0 /tmp/tmpa99mbas1.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpa99mbas1.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   // your code here\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc33f4l11.php:17\n\
    Stack trace:\n#0 /tmp/tmpc33f4l11.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpc33f4l11.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $a = array_map(function($x) {\n        return [$x, substr_count(decbin($x),\
    \ \"1\")];\n    }, $arr);\n    foreach ($a as $key => $row) {\n        $sum[$key]\
    \ = $row[1];\n        $val[$key] = $row[0];\n    }\n    array_multisort($sum,\
    \ SORT_ASC, $val, SORT_ASC, $a);\n    return array_column($a, 0);\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8akcncqx.php:26\n\
    Stack trace:\n#0 /tmp/tmp8akcncqx.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp8akcncqx.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $result = [];\n  $ones = [];\n  foreach ($arr as $a) {\n    $i = $a;\n    $c\
    \ = 0;\n    while ($i > 0) {\n      $c += $i % 2;\n      $i = intval($i / 2);\n\
    \    }\n    if (isset($ones[$c])) {\n      $ones[$c][] = $a;\n    } else {\n \
    \     $ones[$c] = [$a];\n    }\n  }\n  ksort($ones);\n  foreach ($ones as $o)\
    \ {\n    sort($o);\n    $result = array_merge($result, $o);\n  }\n  return $result;\n\
    }\necho 'sort_array([1, 5, 2, 3, 4]) == ';\nvar_dump(sort_array([1, 5, 2, 3, 4]));\n\
    echo 'sort_array([-2, -3, -4, -5, -6]) == ';\nvar_dump(sort_array([-2, -3, -4,\
    \ -5, -6]));\necho 'sort_array([1, 0, 2, 3, 4]) == ';\nvar_dump(sort_array([1,\
    \ 0, 2, 3, 4]));\necho 'sort_array([-5, 0, -1, -1, -4, -4, -4, 1, -1, -1, -1,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpk014lq2c.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $arr2 = [];\n  foreach ($arr as $value) {\n    if ($value >= 0) {\n      $arr2[]\
    \ = [\n        'ones' => numberOfOnes($value),\n        'value' => $value\n  \
    \    ];\n    }\n  }\n  usort($arr2, function($a, $b) {\n    if ($a['ones'] ==\
    \ $b['ones']) {\n      return $a['value'] > $b['value'];\n    }\n    return $a['ones']\
    \ > $b['ones'];\n  });\n  $arr3 = [];\n  foreach ($arr2 as $value) {\n    $arr3[]\
    \ = $value['value'];\n  }\n  $k = 0;\n  for ($i = 0; $i < count($arr); $i++) {\n\
    \    if ($arr[$i] < 0) {\n      $arr3[$i] = $arr[$i];\n    }\n  }\n  return $arr3;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function numberOfOnes()\
    \ in /tmp/tmp2d2olzdv.php:14\nStack trace:\n#0 /tmp/tmp2d2olzdv.php(39): sort_array(Array)\n\
    #1 /tmp/tmp2d2olzdv.php(43): candidate(Array)\n#2 /tmp/tmp2d2olzdv.php(53): test()\n\
    #3 {main}\n  thrown in /tmp/tmp2d2olzdv.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $arr = array_map(function($a) {\n    $b = decbin($a);\n    return [$a, count_chars($b,\
    \ 1)[49]];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    if ($a[1] === $b[1])\
    \ {\n      return $a[0] <=> $b[0];\n    }\n    return $a[1] <=> $b[1];\n  });\n\
    \  return array_map(function($a) {\n    return $a[0];\n  }, $arr);\n}\n\necho\
    \ sort_array([1, 5, 2, 3, 4]) . \"\\n\";\necho sort_array([-2, -3, -4, -5, -6])\
    \ . \"\\n\";\necho sort_array([1, 0, 2, 3, 4]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\nArray\nArray\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpfl20673f.php:34\nStack trace:\n#0 /tmp/tmpfl20673f.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmpfl20673f.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ // foreach ($arr as $key => $value) {\n  //   $binary = decbin($value);\n  //\
    \   $ones = substr_count($binary, 1);\n  //   if ($ones > 1) {\n  //     $arr[$key]\
    \ = -$ones;\n  //   }\n  // }\n  // usort($arr, function($a, $b) {\n  //   return\
    \ $a <=> $b;\n  // });\n  // foreach ($arr as $key => $value) {\n  //   if ($value\
    \ < 0) {\n  //     $value = abs($value);\n  //     $arr[$key] = bindec($value);\n\
    \  //   }\n  // }\n  // return $arr;\n}\n\nsort_array([1, 0, 2, 3, 4]);\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdxexl0dx.php:36\n\
    Stack trace:\n#0 /tmp/tmpdxexl0dx.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpdxexl0dx.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ // Break each number into its binary representation\n  foreach ($arr as $key\
    \ => $value) {\n    $arr[$key] = [$value, str_split(decbin($value))];\n  }\n \
    \ // Count the number of ones\n  foreach ($arr as $key => $value) {\n    $arr[$key][]\
    \ = count(array_keys($value[1], 1));\n  }\n  // Sort numbers by number of ones\n\
    \  usort($arr, function($a, $b) {\n    if ($a[2] === $b[2]) {\n      return $a[0]\
    \ - $b[0];\n    }\n    return $a[2] - $b[2];\n  });\n  // Return just the decimal\
    \ values\n  foreach ($arr as $key => $value) {\n    $arr[$key] = $value[0];\n\
    \  }\n  return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxof46pz6.php:38\n\
    Stack trace:\n#0 /tmp/tmpxof46pz6.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpxof46pz6.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   usort($arr, function($a, $b) {\n        $a_bin = sprintf(\"%b\", $a);\n  \
    \      $b_bin = sprintf(\"%b\", $b);\n        $a_bin_sum = substr_count($a_bin,\
    \ '1');\n        $b_bin_sum = substr_count($b_bin, '1');\n        return $a_bin_sum\
    \ <=> $b_bin_sum ?: $a <=> $b;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1lsbl957.php:26\n\
    Stack trace:\n#0 /tmp/tmp1lsbl957.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp1lsbl957.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $sortedArr = [];\n    $oneCount = 0;\n    foreach ($arr as $value) {\n   \
    \     $oneCount = decbin($value);\n        $oneCount = substr_count($oneCount,\
    \ '1');\n        $sortedArr[$oneCount][] = $value;\n    }\n    ksort($sortedArr);\n\
    \    foreach ($sortedArr as $key => $value) {\n        sort($sortedArr[$key]);\n\
    \    }\n    return call_user_func_array('array_merge', $sortedArr);\n}\n\nvar_dump(sort_array([1,\
    \ 5, 2, 3, 4]));\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "array(5) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(4)\n \
    \ [3]=>\n  int(3)\n  [4]=>\n  int(5)\n}\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp8lgt5kqc.php:31\nStack trace:\n#0 /tmp/tmp8lgt5kqc.php(40):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp8lgt5kqc.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones_arr = [];\n    foreach ($arr as $value) {\n        $ones_arr[] = substr_count(decbin($value),\
    \ '1');\n    }\n    array_multisort($ones_arr, $arr);\n    return $arr;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8pbtpigr.php:23\n\
    Stack trace:\n#0 /tmp/tmp8pbtpigr.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp8pbtpigr.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $cache = [];\n    $output = [];\n    foreach ($arr as $num) {\n        if\
    \ ($num > 0) {\n            $binary = decbin($num);\n            $cache[$binary][]\
    \ = $num;\n        } else {\n            $output[] = $num;\n        }\n    }\n\
    \    ksort($cache);\n    foreach ($cache as $key => $value) {\n        sort($value);\n\
    \        foreach ($value as $num) {\n            $output[] = $num;\n        }\n\
    \    }\n    return $output;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplm4w1dhl.php:35\n\
    Stack trace:\n#0 /tmp/tmplm4w1dhl.php(45): test()\n#1 {main}\n  thrown in /tmp/tmplm4w1dhl.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $arr = array_map(function($x) {\n        return [\n            bindec(str_pad(decbin($x),\
    \ 8, '0', STR_PAD_LEFT)),\n            $x\n        ];\n    }, $arr);\n    usort($arr,\
    \ function($a, $b) {\n        return $a[0] - $b[0];\n    });\n    return array_map(function($x)\
    \ {\n        return $x[1];\n    }, $arr);\n}\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk59dy633.php:28\n\
    Stack trace:\n#0 /tmp/tmpk59dy633.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpk59dy633.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdmwjfeks.php:18\n\
    Stack trace:\n#0 /tmp/tmpdmwjfeks.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpdmwjfeks.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ usort($arr, function($a, $b) {\n    $res = substr_count(decbin($a), '1') - substr_count(decbin($b),\
    \ '1');\n    return $res === 0 ? $a - $b : $res;\n  });\n  return $arr;\n}\n ?>\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "function candidate(...$args) {\n    return sort_array(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ for ($i = 0; $i < count($arr); $i++) {\n    $arr[$i] = decbin($arr[$i]);\n \
    \ }\n  function cmp($a, $b) {\n    if (substr_count($a, '1') < substr_count($b,\
    \ '1')) {\n      return -1;\n    } elseif (substr_count($a, '1') > substr_count($b,\
    \ '1')) {\n      return 1;\n    } else {\n      return ($a < $b) ? -1 : 1;\n \
    \   }\n  }\n  usort($arr, 'cmp');\n  for ($i = 0; $i < count($arr); $i++) {\n\
    \    $arr[$i] = bindec($arr[$i]);\n  }\n  return $arr;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Cannot redeclare cmp() (previously declared in /tmp/tmpmu9yr305.php:13)\
    \ in /tmp/tmpmu9yr305.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $result = [];\n  $ones = array_map(function($elem) {\n    return substr_count(decbin($elem),\
    \ '1');\n  }, $arr);\n  $counts = array_count_values($ones);\n  foreach ($counts\
    \ as $key => $value) {\n    $tmp = [];\n    foreach ($arr as $index => $elem)\
    \ {\n      if (substr_count(decbin($elem), '1') == $key) {\n        $tmp[] = $elem;\n\
    \        unset($arr[$index]);\n      }\n    }\n    sort($tmp);\n    $result =\
    \ array_merge($result, $tmp);\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplk_8pres.php:35\n\
    Stack trace:\n#0 /tmp/tmplk_8pres.php(44): test()\n#1 {main}\n  thrown in /tmp/tmplk_8pres.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $newarr = [];\n  for ($i = 0; $i < count($arr); $i++) {\n    if ($arr[$i] <\
    \ 0) {\n      $newarr[] = -1 * $arr[$i];\n    } else {\n      $newarr[] = $arr[$i];\n\
    \    }\n  }\n  $newarr = array_map(function($num) {\n    return sprintf(\"%08d\"\
    , decbin($num));\n  }, $newarr);\n  usort($newarr, function($a, $b) {\n    $b\
    \ = count_chars($b);\n    $a = count_chars($a);\n    if ($b[49] > $a[49]) {\n\
    \      return 1;\n    } elseif ($b[49] < $a[49]) {\n      return -1;\n    } else\
    \ {\n      return $a[48] - $b[48];\n    }\n  });\n  $arr = array_map(function($num)\
    \ {\n    return bindec($num);\n  }, $newarr);\n  for ($i = 0; $i < count($arr);\
    \ $i++) {\n    if ($arr[$i] > 2147483647) {\n      $arr[$i] = 2147483647;\n  \
    \  }\n  }\n  return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5a1c67bj.php:48\n\
    Stack trace:\n#0 /tmp/tmp5a1c67bj.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp5a1c67bj.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   foreach ($arr as $key => $value) {\n        $arr[$key] = [\n            \"\
    original\" => $value,\n            \"binary\" => count_ones($value),\n       \
    \ ];\n    }\n    sort_array_by_binary($arr);\n    return array_column($arr, \"\
    original\");\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_ones()\
    \ in /tmp/tmp3sgz9_42.php:13\nStack trace:\n#0 /tmp/tmp3sgz9_42.php(21): sort_array(Array)\n\
    #1 /tmp/tmp3sgz9_42.php(25): candidate(Array)\n#2 /tmp/tmp3sgz9_42.php(35): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3sgz9_42.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   usort($arr, function($x, $y) {\n        return onesCount($x) <=> onesCount($y)\
    \ ?: $x <=> $y;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function onesCount() in\
    \ /tmp/tmppt3de25j.php:11\nStack trace:\n#0 [internal function]: {closure}(1,\
    \ 5)\n#1 /tmp/tmppt3de25j.php(12): usort(Array, Object(Closure))\n#2 /tmp/tmppt3de25j.php(17):\
    \ sort_array(Array)\n#3 /tmp/tmppt3de25j.php(21): candidate(Array)\n#4 /tmp/tmppt3de25j.php(31):\
    \ test()\n#5 {main}\n  thrown in /tmp/tmppt3de25j.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $arr_binary = [];\n    $ones = [];\n    $zeros = [];\n    $result = [];\n\
    \    for ($i = 0; $i < count($arr); $i++) {\n        $arr_binary[$i] = decbin($arr[$i]);\n\
    \        $ones[$i] = substr_count($arr_binary[$i], '1');\n        $zeros[$i] =\
    \ substr_count($arr_binary[$i], '0');\n    }\n    sort($ones);\n    $ones = array_unique($ones);\n\
    \    foreach ($ones as $one) {\n        for ($i = 0; $i < count($arr); $i++) {\n\
    \            if ($one == substr_count($arr_binary[$i], '1')) {\n             \
    \   $result[] = $arr[$i];\n            }\n        }\n    }\n    return $result;\n\
    }\nprint_r(sort_array([1, 5, 2, 3, 4]));\nfunction candidate(...$args) {\n   \
    \ return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 4\n    [3] => 5\n    [4]\
    \ => 3\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcm2qdr1j.php:36\n\
    Stack trace:\n#0 /tmp/tmpcm2qdr1j.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpcm2qdr1j.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ return usort($arr, function($a, $b) {\n    $a_ones = substr_count(decbin($a),\
    \ '1');\n    $b_ones = substr_count(decbin($b), '1');\n    if ($a_ones < $b_ones)\
    \ return -1;\n    if ($a_ones > $b_ones) return 1;\n    if ($a < $b) return -1;\n\
    \    if ($a > $b) return 1;\n    return 0;\n  });\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpffkmeyop.php:26\n\
    Stack trace:\n#0 /tmp/tmpffkmeyop.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpffkmeyop.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $arr1 = [];\n  $arr2 = [];\n  $arr3 = [];\n  $arr4 = [];\n  foreach ($arr as\
    \ $num) {\n    $num = decbin($num);\n    if (preg_match_all('/1/', $num) == 0)\
    \ {\n      $arr1[] = $num;\n    } elseif (preg_match_all('/1/', $num) == 1) {\n\
    \      $arr2[] = $num;\n    } elseif (preg_match_all('/1/', $num) == 2) {\n  \
    \    $arr3[] = $num;\n    } elseif (preg_match_all('/1/', $num) == 3) {\n    \
    \  $arr4[] = $num;\n    }\n  }\n  sort($arr1);\n  sort($arr2);\n  sort($arr3);\n\
    \  sort($arr4);\n  $arr = array_merge($arr1, $arr2, $arr3, $arr4);\n  $arr = array_map('bindec',\
    \ $arr);\n  return $arr;\n}\n\n$arr = [-2, -3, -4, -5, -6];\nprint_r(sort_array($arr));\n\
    \ ?>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "Array\n(\n)\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   //return sort($arr);\n    $arr_with_ones = [];\n    $result = [];\n    $decimal_arr\
    \ = [];\n    foreach ($arr as $key => $value) {\n        $decimal_arr[$key] =\
    \ decbin($value);\n        $arr_with_ones[$key] = substr_count($decimal_arr[$key],\
    \ '1');\n    }\n    $i = 0;\n    while ($i < count($arr)) {\n        $index =\
    \ array_search(min($arr_with_ones), $arr_with_ones);\n        array_push($result,\
    \ $arr[$index]);\n        array_splice($arr_with_ones, $index, 1);\n        array_splice($arr,\
    \ $index, 1);\n        $i++;\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdqcbw2c4.php:33\n\
    Stack trace:\n#0 /tmp/tmpdqcbw2c4.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpdqcbw2c4.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   // sort by 1s count\n    $tally = array_count_values(str_split(decbin(implode($arr,\
    \ '|'))));\n    $sorted = [];\n    foreach ($tally as $key => $value) {\n    \
    \    $sorted[] = $key;\n    }\n    arsort($sorted);\n    // sort by index\n  \
    \  // array_multisort($sorted, SORT_ASC, $tally);\n    // pd($sorted);\n    //\
    \ pd($tally);\n    // pd(array_flip($sorted));\n    // reindex by sorted 1s count\n\
    \    $tally = array_merge(array_flip($sorted), $tally);\n    $sorted = [];\n \
    \   foreach ($tally as $key => $value) {\n        for ($i = 0; $i < $value; $i++)\
    \ {\n            $sorted[] = bindec($key);\n        }\n    }\n    return $sorted;\n\
    }\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9aqtd09t.php:37\n\
    Stack trace:\n#0 /tmp/tmp9aqtd09t.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp9aqtd09t.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $list = [];\n  foreach ($arr as $num) {\n    $ones = 0;\n    while ($num > 0)\
    \ {\n      $ones += $num % 2;\n      $num /= 2;\n    }\n    $list[$ones][] = $num;\n\
    \  }\n  ksort($list);\n  $result = [];\n  foreach ($list as $nums) {\n    sort($nums);\n\
    \    $result = array_merge($result, $nums);\n  }\n  return $result;\n}\n\n$arr\
    \ = [1, 5, 2, 3, 4];\necho var_dump(sort_array($arr));\n\n$arr = [-2, -3, -4,\
    \ -5, -6];\necho var_dump(sort_array($arr));\n\n$arr = [1, 0, 2, 3, 4];\necho\
    \ var_dump(sort_array($arr));\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "array(5) {\n  [0]=>\n  float(0)\n  [1]=>\n  float(0)\n  [2]=>\n  float(0)\n\
    \  [3]=>\n  float(0)\n  [4]=>\n  float(0)\n}\narray(5) {\n  [0]=>\n  int(-6)\n\
    \  [1]=>\n  int(-5)\n  [2]=>\n  int(-4)\n  [3]=>\n  int(-3)\n  [4]=>\n  int(-2)\n\
    }\narray(5) {\n  [0]=>\n  int(0)\n  [1]=>\n  float(0)\n  [2]=>\n  float(0)\n \
    \ [3]=>\n  float(0)\n  [4]=>\n  float(0)\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmphwc3wk0x.php:41\nStack trace:\n#0 /tmp/tmphwc3wk0x.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphwc3wk0x.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $bin_arr = $dec_arr = [];\n  foreach ($arr as $key => $value) {\n    $bin_arr[$key]\
    \ = substr_count(decbin($value), 1);\n    $dec_arr[$key] = $value;\n  }\n  array_multisort($bin_arr,\
    \ SORT_ASC, $dec_arr, SORT_ASC, $arr);\n  return $arr;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwomroj5k.php:24\n\
    Stack trace:\n#0 /tmp/tmpwomroj5k.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpwomroj5k.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   foreach ($arr as $key => $val) {\n        $bin[] = sprintf(\"%b\", $val);\n\
    \    }\n    array_multisort(array_map('strlen', $bin), SORT_ASC, $arr);\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp45516pj.php:22\n\
    Stack trace:\n#0 /tmp/tmpp45516pj.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpp45516pj.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $ret = [];\n  for ($i = 0; $i < count($arr); $i++) {\n    $ret[$i] = $arr[$i];\n\
    \  }\n  for ($i = 0; $i < count($arr); $i++) {\n    for ($j = $i + 1; $j < count($arr);\
    \ $j++) {\n      if (strlen(decbin($arr[$i])) == strlen(decbin($arr[$j]))) {\n\
    \        if ($arr[$i] > $arr[$j]) {\n          $ret[$i] = $arr[$j];\n        \
    \  $ret[$j] = $arr[$i];\n        }\n      } else if (strlen(decbin($arr[$i]))\
    \ > strlen(decbin($arr[$j]))) {\n        $ret[$i] = $arr[$j];\n        $ret[$j]\
    \ = $arr[$i];\n      }\n    }\n  }\n  return $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxobaigtg.php:35\n\
    Stack trace:\n#0 /tmp/tmpxobaigtg.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpxobaigtg.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $bin_arr = array_map(function($x) {\n    return decbin($x);\n  }, $arr);\n \
    \ $new_arr = array_map(function($x) {\n    return array_count_values(str_split($x))['1'];\n\
    \  }, $bin_arr);\n  $sorted_arr = array_combine($new_arr, $arr);\n  ksort($sorted_arr);\n\
    \  return array_values($sorted_arr);\n}\n\nprint_r(sort_array([1, 0, 2, 3, 4]));\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 4\n    [2] => 3\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpk3se796s.php:27\nStack trace:\n#0 /tmp/tmpk3se796s.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpk3se796s.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $map = array_map(function($val) {\n    return [\n      \"num\" => $val,\n  \
    \    \"ones\" => substr_count(decbin($val), \"1\")\n    ];\n  }, $arr);\n  usort($map,\
    \ function($a, $b) {\n    if ($a[\"ones\"] == $b[\"ones\"]) {\n      return $a[\"\
    num\"] - $b[\"num\"];\n    }\n    return $a[\"ones\"] - $b[\"ones\"];\n  });\n\
    \  return array_map(function($val) {\n    return $val[\"num\"];\n  }, $map);\n\
    }\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk36i5jj9.php:32\n\
    Stack trace:\n#0 /tmp/tmpk36i5jj9.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpk36i5jj9.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   if (!$arr) return [];\n    $array = [];\n    foreach ($arr as $item) {\n \
    \       $array[$item] = decbin($item);\n    }\n    $sorted = [];\n    $tmp = 0;\n\
    \    foreach ($array as $key => $value) {\n        $i = substr_count($value, '1');\n\
    \        $sorted[$i][] = $key;\n    }\n    foreach ($sorted as $key => $value)\
    \ {\n        sort($value);\n        $sorted[$key] = $value;\n    }\n    $res =\
    \ [];\n    foreach ($sorted as $value) {\n        foreach ($value as $item) {\n\
    \            $res[] = $item;\n        }\n    }\n    return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8r___awm.php:40\n\
    Stack trace:\n#0 /tmp/tmp8r___awm.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp8r___awm.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values(str_split(decbin(max($arr))));\n    $maxOnes =\
    \ max($ones);\n    for ($i = 0; $i < $maxOnes; $i++) {\n        $arr = array_filter($arr,\
    \ function ($val) use ($i) {\n            return substr_count(decbin($val), '1')\
    \ == $i;\n        });\n        sort($arr);\n    }\n    return $arr;\n}\n\necho\
    \ sort_array([1, 5, 2, 3, 4]);\necho '<br>';\necho sort_array([-2, -3, -4, -5,\
    \ -6]);\necho '<br>';\necho sort_array([1, 0, 2, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array<br>Array<br>Array\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpbml70tcq.php:31\nStack trace:\n#0 /tmp/tmpbml70tcq.php(41): test()\n\
    #1 {main}\n  thrown in /tmp/tmpbml70tcq.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $result = [];\n    foreach ($arr as $val) {\n        $result[decbin($val)]\
    \ = $val;\n    }\n    ksort($result);\n    return array_values($result);\n}\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp58xvn2r3.php:22\n\
    Stack trace:\n#0 /tmp/tmp58xvn2r3.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp58xvn2r3.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   foreach ($arr as $key => $val) {\n        $result[$key] = str_pad(decbin($val),\
    \ 10, \"0\", STR_PAD_LEFT);\n    }\n    sort($result);\n    foreach ($result as\
    \ $key => $val) {\n        $result[$key] = bindec($val);\n    }\n    return $result;\n\
    }\n\n/*\n    ----TESTE----\n*/\n\n$testes = [\n    [1, 5, 2, 3, 4],\n    [-2,\
    \ -3, -4, -5, -6],\n    [1, 0, 2, 3, 4]\n];\n$result = sort_array([1, 5, 2, 3,\
    \ 4]);\nforeach ($testes as $key => $value) {\n    var_dump(array_merge($value,\
    \ $result) == $result);\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "bool(false)\nbool(false)\nbool(false)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp_5ombadr.php:38\nStack trace:\n#0 /tmp/tmp_5ombadr.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_5ombadr.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $binary = array_map(function($num) {\n        return base_convert($num, 10,\
    \ 2);\n    }, $arr);\n    $sorted = $arr;\n    usort($sorted, function($a, $b)\
    \ use ($binary) {\n        $bin1 = array_reduce(str_split($binary[$a]), function($sum,\
    \ $num) {\n            return $sum + (int)$num;\n        }, 0);\n        $bin2\
    \ = array_reduce(str_split($binary[$b]), function($sum, $num) {\n            return\
    \ $sum + (int)$num;\n        }, 0);\n        if ($bin1 === $bin2) {\n        \
    \    return $a - $b;\n        }\n        return $bin1 - $bin2;\n    });\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkho037iq.php:34\n\
    Stack trace:\n#0 /tmp/tmpkho037iq.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpkho037iq.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $newArr = [];\n  $binaryArray = [];\n  foreach ($arr as $number) {\n    $binaryArray[]\
    \ = $number;\n    $binaryArray[] = decbin($number);\n  }\n  array_multisort($binaryArray,\
    \ SORT_ASC, SORT_STRING, $arr);\n  return $arr;\n}\n\nsort_array([1, 5, 2, 3,\
    \ 4]);\nsort_array([-2, -3, -4, -5, -6]);\nsort_array([1, 0, 2, 3, 4]);\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nWarning: array_multisort(): Array sizes are inconsistent in /tmp/tmpbx1mfwsy.php\
    \ on line 16\n\nWarning: array_multisort(): Array sizes are inconsistent in /tmp/tmpbx1mfwsy.php\
    \ on line 16\n\nWarning: array_multisort(): Array sizes are inconsistent in /tmp/tmpbx1mfwsy.php\
    \ on line 16\n\nWarning: array_multisort(): Array sizes are inconsistent in /tmp/tmpbx1mfwsy.php\
    \ on line 16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbx1mfwsy.php:28\n\
    Stack trace:\n#0 /tmp/tmpbx1mfwsy.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpbx1mfwsy.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ for ($i = 0; $i < count($arr); $i++) {\n    $arr[$i] = [\n      'original' =>\
    \ $arr[$i],\n      'ones' => substr_count(decbin($arr[$i]), '1')\n    ];\n  }\n\
    \  usort($arr, function($a, $b) {\n    if ($a['ones'] == $b['ones']) return $a['original']\
    \ - $b['original'];\n    return $a['ones'] - $b['ones'];\n  });\n  return array_column($arr,\
    \ 'original');\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp09v8pm3h.php:28\n\
    Stack trace:\n#0 /tmp/tmp09v8pm3h.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp09v8pm3h.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $arr2 = [];\n    foreach ($arr as $key => $value) {\n        $arr2[$key] =\
    \ decbin($value);\n    }\n    // \u6309\u7167\u4E8C\u8FDB\u5236\u6709\u591A\u5C11\
    \u4E2A1\u6392\u5E8F\uFF0C\u5982\u679C\u6709\u591A\u4E2A1\u5219\u6309\u7167\u5341\
    \u8FDB\u5236\u6392\u5E8F\n    array_multisort(array_map('substr_count', $arr2,\
    \ array_fill(0, count($arr2), 1)), SORT_ASC, $arr);\n    return $arr;\n}\n\n$arr\
    \ = [1, 5, 2, 3, 4];\nvar_dump(sort_array($arr));\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(5) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(4)\n \
    \ [3]=>\n  int(3)\n  [4]=>\n  int(5)\n}\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpexzk8uxk.php:27\nStack trace:\n#0 /tmp/tmpexzk8uxk.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpexzk8uxk.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $arr = array_map(function($num) {\n        return decbin($num);\n    }, $arr);\n\
    \    uasort($arr, function($a, $b) {\n        $a = substr_count($a, \"1\");\n\
    \        $b = substr_count($b, \"1\");\n        if ($a === $b) {\n           \
    \ return $a <=> $b;\n        }\n        return $a <=> $b;\n    });\n    $arr =\
    \ array_map(function($num) {\n        return bindec($num);\n    }, $arr);\n  \
    \  return $arr;\n}\necho sort_array([-2, -3, -4, -5, -6]);\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp714q4a33.php:32\n\
    Stack trace:\n#0 /tmp/tmp714q4a33.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp714q4a33.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   foreach ($arr as $k => $v) {\n        $arr[$k] = [$v, decbin($v)];\n    }\n\
    \    usort($arr, function ($a, $b) {\n        $a = $a[1];\n        $b = $b[1];\n\
    \        if (substr_count($a, '1') == substr_count($b, '1')) {\n            return\
    \ $a > $b ? 1 : -1;\n        }\n        return substr_count($a, '1') > substr_count($b,\
    \ '1') ? 1 : -1;\n    });\n    foreach ($arr as $k => $v) {\n        $arr[$k]\
    \ = $v[0];\n    }\n    return $arr;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv2l9jp2i.php:33\n\
    Stack trace:\n#0 /tmp/tmpv2l9jp2i.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpv2l9jp2i.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $binary = [];\n    foreach ($arr as $val) {\n        $binary[] = decbin($val);\n\
    \    }\n    $sorted_arr = $arr;\n    foreach ($binary as $key => $value) {\n \
    \       $count = substr_count($value, '1');\n        $sorted_arr[$key] = $count.'_'.$arr[$key];\n\
    \    }\n    sort($sorted_arr);\n    $new_arr = [];\n    foreach ($sorted_arr as\
    \ $key => $value) {\n        $new_arr[] = explode('_', $value)[1];\n    }\n  \
    \  return $new_arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_rnb432f.php:32\n\
    Stack trace:\n#0 /tmp/tmp_rnb432f.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp_rnb432f.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   usort($arr, 'sort_ones');\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'sort_ones' not found or invalid function name in /tmp/tmp5asoqgvf.php on line\
    \ 10\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5asoqgvf.php:19\n\
    Stack trace:\n#0 /tmp/tmp5asoqgvf.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp5asoqgvf.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ // sort array\n  $sorted_arr = $arr;\n  for ($i = 0; $i < count($sorted_arr);\
    \ $i++) {\n    for ($j = $i + 1; $j < count($sorted_arr); $j++) {\n      if (count_ones($sorted_arr[$i])\
    \ > count_ones($sorted_arr[$j])) {\n        $temp = $sorted_arr[$i];\n       \
    \ $sorted_arr[$i] = $sorted_arr[$j];\n        $sorted_arr[$j] = $temp;\n     \
    \ } else if (count_ones($sorted_arr[$i]) == count_ones($sorted_arr[$j])) {\n \
    \       if ($sorted_arr[$i] > $sorted_arr[$j]) {\n          $temp = $sorted_arr[$i];\n\
    \          $sorted_arr[$i] = $sorted_arr[$j];\n          $sorted_arr[$j] = $temp;\n\
    \        }\n      }\n    }\n  }\n  return $sorted_arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_ones()\
    \ in /tmp/tmpig6zv22j.php:14\nStack trace:\n#0 /tmp/tmpig6zv22j.php(31): sort_array(Array)\n\
    #1 /tmp/tmpig6zv22j.php(35): candidate(Array)\n#2 /tmp/tmpig6zv22j.php(45): test()\n\
    #3 {main}\n  thrown in /tmp/tmpig6zv22j.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $bin_array = [];\n  foreach ($arr as $num) {\n    $bin_array[] = [\n      'num'\
    \ => $num,\n      'bin' => decbin($num)\n    ];\n  }\n  usort($bin_array, function($a,\
    \ $b) {\n    if (substr_count($a['bin'], 1) == substr_count($b['bin'], 1)) {\n\
    \      return $a['num'] > $b['num'];\n    }\n    return substr_count($a['bin'],\
    \ 1) > substr_count($b['bin'], 1);\n  });\n  foreach ($bin_array as $i => $bin)\
    \ {\n    $arr[$i] = $bin['num'];\n  }\n  return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpht120nm1.php:35\n\
    Stack trace:\n#0 /tmp/tmpht120nm1.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpht120nm1.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $convert = [];\n  foreach ($arr as $number) {\n    if ($number < 0) {\n    \
    \  $convert[] = [$number, decbin($number * -1)];\n    } else {\n      $convert[]\
    \ = [$number, decbin($number)];\n    }\n  }\n  usort($convert, function($a, $b)\
    \ {\n    if (substr_count($a[1], '1') == substr_count($b[1], '1')) {\n      return\
    \ $a[0] - $b[0];\n    }\n    return substr_count($a[1], '1') - substr_count($b[1],\
    \ '1');\n  });\n  $sorted = [];\n  foreach ($convert as $number) {\n    $sorted[]\
    \ = $number[0];\n  }\n  return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   // your code here\n    // $new_arr = [];\n    // $count = 0;\n    // for ($i\
    \ = 0; $i < count($arr); $i++) {\n    //     for ($j = 0; $j < strlen(decbin($arr[$i]));\
    \ $j++) {\n    //         if (substr(decbin($arr[$i]), $j, 1) == '1') {\n    //\
    \             $count++;\n    //         }\n    //     }\n    //     $new_arr[]\
    \ = [$count, $arr[$i]];\n    //     $count = 0;\n    // }\n    // sort($new_arr);\n\
    \    // for ($i = 0; $i < count($new_arr); $i++) {\n    //     $new_arr[$i] =\
    \ $new_arr[$i][1];\n    // }\n    // return $new_arr;\n    return array_map('bindec',\n\
    \        array_map('decbin', $arr)\n    );\n}\n$arr = [-2, -3, -4, -5, -6];\n\
    print_r(sort_array($arr));\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "Array\n(\n    [0] => 1.844674407371E+19\n    [1] => 1.844674407371E+19\n\
    \    [2] => 1.844674407371E+19\n    [3] => 1.844674407371E+19\n    [4] => 1.844674407371E+19\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppjtoq6rw.php:38\n\
    Stack trace:\n#0 /tmp/tmppjtoq6rw.php(48): test()\n#1 {main}\n  thrown in /tmp/tmppjtoq6rw.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   // Your code here\n    $counts = array_count_values($arr);\n    foreach ($counts\
    \ as $count => $v) {\n        if ($count < 0) {\n            $arr = array_diff($arr,\
    \ array($count));\n            $counts[$count] = abs($count);\n        }\n   \
    \ }\n    asort($counts);\n    $fin = [];\n    foreach ($counts as $dec => $ones)\
    \ {\n        for ($i = 0; $i < $ones; $i++) {\n            array_push($fin, $dec);\n\
    \        }\n    }\n    foreach ($arr as $item) {\n        if ($item < 0) {\n \
    \           array_push($fin, $item);\n        }\n    }\n    return $fin;\n}\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfmfwbnso.php:37\n\
    Stack trace:\n#0 /tmp/tmpfmfwbnso.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpfmfwbnso.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $returnArr = array();\n  foreach ($arr as $key => $value) {\n    $oneCount =\
    \ substr_count(decbin($value), '1');\n    $returnArr[$oneCount][] = $value;\n\
    \  }\n  ksort($returnArr);\n  $returnArr = call_user_func_array('array_merge',\
    \ $returnArr);\n  return $returnArr;\n}\n\nprint_r(sort_array([1, 0, 2, 3, 4]));\n\
    print_r(sort_array([1, 5, 2, 3, 4]));\nprint_r(sort_array([-2, -3, -4, -5, -6]));\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 1\n    [2] => 2\n    [3] => 4\n    [4]\
    \ => 3\n)\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 4\n    [3] => 5\n\
    \    [4] => 3\n)\nArray\n(\n    [0] => -4\n    [1] => -6\n    [2] => -2\n    [3]\
    \ => -3\n    [4] => -5\n)\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpbgsen_0s.php:28\nStack trace:\n#0 /tmp/tmpbgsen_0s.php(38): test()\n\
    #1 {main}\n  thrown in /tmp/tmpbgsen_0s.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $newarr = [];\n  foreach ($arr as $value) {\n    $newarr[$value] = decbin($value);\n\
    \  }\n  foreach ($newarr as $value) {\n    $new[] = substr_count($value, \"1\"\
    );\n  }\n  asort($new);\n  foreach ($new as $key => $value) {\n    $new2[] = $key;\n\
    \  }\n  return $new2;\n}\necho implode(', ', sort_array([1, 0, 2, 3, 4])) . PHP_EOL;\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "1, 0, 2, 4, 3\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9o352z5t.php:29\n\
    Stack trace:\n#0 /tmp/tmp9o352z5t.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp9o352z5t.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_map(function($num) {\n        $bin = decbin($num);\n       \
    \ return ['num' => $num, 'bin' => $bin, 'ones' => substr_count($bin, 1)];\n  \
    \  }, $arr);\n    $ones = array_filter($ones, function($item) {\n        return\
    \ $item['ones'] > 0;\n    });\n    usort($ones, function($a, $b) {\n        return\
    \ $a['ones'] <=> $b['ones'] ?: $a['num'] <=> $b['num'];\n    });\n    $pos = 0;\n\
    \    foreach ($ones as $item) {\n        $arr[$pos++] = $item['num'];\n    }\n\
    \    $arr = array_map(function($num) {\n        if ($num < 0) return $num;\n \
    \       return decbin($num);\n    }, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuff6ff4m.php:36\n\
    Stack trace:\n#0 /tmp/tmpuff6ff4m.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpuff6ff4m.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $arr = array_map('decbin', $arr);\n    $count = [];\n    foreach ($arr as\
    \ $key => $value) {\n        $count[$key] = substr_count($value, 1);\n    }\n\
    \    arsort($count);\n    $result = [];\n    foreach ($count as $key => $value)\
    \ {\n        $result[] = bindec($arr[$key]);\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpplf4hcpi.php:28\n\
    Stack trace:\n#0 /tmp/tmpplf4hcpi.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpplf4hcpi.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $res = [];\n    foreach ($arr as $val) {\n        $count = 0;\n        $bin\
    \ = decbin($val);\n        $bin = str_split($bin);\n        foreach ($bin as $b)\
    \ {\n            if ($b == 1) {\n                $count++;\n            }\n  \
    \      }\n        $res[$count][] = $val;\n    }\n    $res2 = [];\n    foreach\
    \ ($res as $val) {\n        asort($val);\n        foreach ($val as $v) {\n   \
    \         $res2[] = $v;\n        }\n    }\n    return $res2;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkvsi5rqg.php:38\n\
    Stack trace:\n#0 /tmp/tmpkvsi5rqg.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpkvsi5rqg.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $ones = array_map(function($num) {\n    $str = (string) decbin($num);\n    $count\
    \ = substr_count($str, '1');\n    return [$num, $count];\n  }, $arr);\n  usort($ones,\
    \ function($a, $b) {\n    if ($a[1] == $b[1]) return $a[0] - $b[0];\n    return\
    \ $a[1] - $b[1];\n  });\n  return array_map(function($sub) {\n    return $sub[0];\n\
    \  }, $ones);\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx8_r_jbu.php:30\n\
    Stack trace:\n#0 /tmp/tmpx8_r_jbu.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpx8_r_jbu.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \ $result = [];\n  foreach ($arr as $item) {\n    if ($item < 0) {\n      $result[]\
    \ = $item;\n    } else {\n      $result[decbin($item)] = $item;\n    }\n  }\n\
    \  ksort($result);\n  return $result;\n}\n\nprint_r(sort_array([1, 5, 2, 3, 4]));\n\
    print_r(sort_array([-2, -3, -4, -5, -6]));\nprint_r(sort_array([1, 0, 2, 3, 4]));\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "Array\n(\n    [1] => 1\n    [10] => 2\n    [11] => 3\n    [100] => 4\n\
    \    [101] => 5\n)\nArray\n(\n    [0] => -2\n    [1] => -3\n    [2] => -4\n  \
    \  [3] => -5\n    [4] => -6\n)\nArray\n(\n    [0] => 0\n    [1] => 1\n    [10]\
    \ => 2\n    [11] => 3\n    [100] => 4\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp51posoov.php:30\nStack trace:\n#0 /tmp/tmp51posoov.php(40):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp51posoov.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $binArr = [];\n    foreach ($arr as $num) {\n        $binArr[] = [\n     \
    \       'dec' => $num,\n            'bin' => decbin($num)\n        ];\n    }\n\
    \    usort($binArr, function ($a, $b) {\n        if (substr_count($a['bin'], '1')\
    \ == substr_count($b['bin'], '1')) {\n            return $a['dec'] - $b['dec'];\n\
    \        }\n        return substr_count($a['bin'], '1') - substr_count($b['bin'],\
    \ '1');\n    });\n    $result = [];\n    foreach ($binArr as $num) {\n       \
    \ $result[] = $num['dec'];\n    }\n    return $result;\n}\n\n$arr = [\n    13,\
    \ 4, 4, 3, 2, 1, 5, 10, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,\n    40, 40, 40,\
    \ 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,\n    40, 40, 40, 40,\
    \ 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,\n    40, 40, 40, 40, 40,\
    \ 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,\n    40, 40, 40, 40, 40, 40,\
    \ 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,\n    40, 40, 40, 40, 40, 40, 40,\
    \ 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,\n    40, 40, 40, 40, 40, 40, 40, 40,\
    \ 40, 40, 40, 40, 40, 40, 40, 40, 40,\n    40, 40, 40, 40, 40, 40, 40, 40, 40,\
    \ 40, 40, 40, 40, 40, 40, 40, 40,\n    40, 40, 40, 40, 40, 40, 40, 40, 40, 40,\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf43isyhr.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $temp = [];\n    foreach ($arr as $value) {\n        $temp[] = [$value, decbin($value)];\n\
    \    }\n    usort($temp, function ($a, $b) {\n        $a1 = substr_count($a[1],\
    \ '1');\n        $b1 = substr_count($b[1], '1');\n        if ($a1 == $b1) {\n\
    \            return $a[0] - $b[0];\n        }\n        return $a1 - $b1;\n   \
    \ });\n    foreach ($temp as $key => $value) {\n        $temp[$key] = $value[0];\n\
    \    }\n    return $temp;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy_a59ipe.php:33\n\
    Stack trace:\n#0 /tmp/tmpy_a59ipe.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpy_a59ipe.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
