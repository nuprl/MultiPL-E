name: HumanEval_71_triangle_area
language: php
prompt: "<?php\n// Given the lengths of the three sides of a triangle. Return the\
  \ area of\n// the triangle rounded to 2 decimal points if the three sides form a\
  \ valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle\
  \ when the sum of any two sides is greater \n// than the third side.\n// Example:\n\
  // triangle_area(3, 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunction triangle_area($a,\
  \ $b, $c) {\n"
tests: "function candidate(...$args) {\n    return triangle_area(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(3, 4, 5) !== 6.0) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1, 2, 10) !== -1) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(4, 8, 5) !== 8.18) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(2, 2, 2) !== 1.73) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1, 2, 3) !== -1) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(10, 5, 7) !== 16.25) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(2, 6, 3) !== -1) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1, 1, 1) !== 0.43) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(2, 2, 10) !== -1) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    // TODO...\n}\n", "    // TODO\n    if ($a+$b>$c && $a+$c>$b &&\
    \ $b+$c>$a) {\n      $s = ($a+$b+$c)/2;\n      $res = $s*($s-$a)*($s-$b)*($s-$c);\n\
    \      $res = round(sqrt($res),2);\n      return $res;\n    } else {\n      return\
    \ -1;\n    }\n  }\n\nprint_r(triangle_area(3, 4, 5));\nprint_r(triangle_area(1,\
    \ 2, 10));", "\tif (($a + $b) > $c && ($a + $c) > $b && ($b + $c) > $a) {\n\t\t\
    $s = ($a + $b + $c) / 2;\n\t\t$area = sqrt($s * ($s - $a) * ($s - $b) * ($s -\
    \ $c));\n\t\treturn round($area, 2);\n\t} else {\n\t\treturn -1;\n\t}\n}\n", " \
    \   $p = ($a + $b + $c) / 2;\n    if ($p - $a < 0 || $p - $b < 0 || $p - $c <\
    \ 0) {\n        return -1;\n    }\n    return round(sqrt($p * ($p - $a) * ($p\
    \ - $b) * ($p - $c)), 2);\n}\necho triangle_area(1, 1, 2);", "    $lenghts = [$a,\
    \ $b, $c];\n    sort($lenghts);\n    $sum = array_sum($lenghts);\n    if ($sum\
    \ - $lenghts[2] <= $lenghts[2]) {\n        return -1;\n    }\n    $s = ($a + $b\
    \ + $c) / 2;\n    return round(sqrt($s * ($s - $a) * ($s - $b) * ($s - $c)), 2);\n\
    }\n", "  $result = ($a + $b > $c && $a + $c > $b && $b + $c > $a)\n    ? number_format(sqrt((($a\
    \ + $b + $c) / 2) * ((($a + $b + $c) / 2) - $a) * ((($a + $b + $c) / 2) - $b)\
    \ * ((($a + $b + $c) / 2) - $c)), 2)\n    : -1;\n  return $result;\n}\n\nvar_dump(triangle_area(1,\
    \ 2, 3));", "    if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n       \
    \ $s = ($a + $b + $c) / 2;\n        return number_format(sqrt($s * ($s - $a) *\
    \ ($s - $b) * ($s - $c)), 2);\n    } else {\n        return -1;\n    }\n}\n",
  "  $a = $a * $b * $c;\n  if ($a > 0){\n    return round(sqrt($a), 2);\n  }\n  else\
    \ {\n    return -1;\n  }\n}\n\necho triangle_area(3, 4, 5) . PHP_EOL;\necho triangle_area(1,\
    \ 2, 10) . PHP_EOL;", "    $arr = array($a, $b, $c);\n    sort($arr);\n    if\
    \ ($arr[0] + $arr[1] > $arr[2]) {\n        $p = ($a + $b + $c) / 2;\n        return\
    \ round(sqrt($p * ($p - $a) * ($p - $b) * ($p - $c)), 2);\n    } else {\n    \
    \    return -1;\n    }\n}\n", "    if($a <= 0 || $b <= 0 || $c <= 0) return -1;\n\
    \    if($a+$b <= $c || $a+$c <= $b || $b+$c <= $a) return -1;\n    $p = ($a+$b+$c)/2;\n\
    \    return sqrt($p*($p-$a)*($p-$b)*($p-$c));\n}\n\necho 'Test 1: '. (triangle_area(3,\
    \ 4, 5) == 6.00 ? 'Ok' : 'Error');\necho '<br>';\necho 'Test 2: '. (triangle_area(1,\
    \ 2, 10) == -1 ? 'Ok' : 'Error');\necho '<br>';\necho 'Test 3: '. (triangle_area(1,\
    \ 2, 2) == -1 ? 'Ok' : 'Error');\necho '<br>';\necho 'Test 4: '. (triangle_area(1,\
    \ 2, -4) == -1 ? 'Ok' : 'Error');\necho '<br>';\necho 'Test 5: '. (triangle_area(3,\
    \ 4, -5) == -1 ? 'Ok' : 'Error');\necho '<br>';\necho 'Test 6: '. (triangle_area(3,\
    \ -4, 5) == -1 ? 'Ok' : 'Error');\necho '<br>';\necho 'Test 7: '. (triangle_area(-3,\
    \ 4, 5) == -1 ? 'Ok' : 'Error');\necho '<br>';\necho 'Test 8: '. (triangle_area(0,\
    \ 4, 5) == -1 ? 'Ok' : 'Error');\necho '<br>';\necho 'Test 9: '. (triangle_area(3,\
    \ 0, 5) == -1 ? 'Ok' : 'Error');\necho '<br>';\necho 'Test 10: '. (triangle_area(3,\
    \ 4, 0) == -1 ? 'Ok' : 'Error');\necho '<br>';\necho 'Test 11: '. (triangle_area(1,\
    \ 1, 3) == -1 ? 'Ok' : 'Error');\necho '<br>';\necho '", "  if (($a + $b) <= $c\
    \ || ($a + $c) <= $b || ($b + $c) <= $a) {\n    return -1;\n  } else {\n    $s\
    \ = ($a + $b + $c) / 2;\n    $A = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n\
    \    return number_format($A, 2);\n  }\n}\n", "  $length = array($a, $b, $c);\n\
    \  sort($length);\n  if ($length[0] + $length[1] > $length[2]){\n    $p = ($a\
    \ + $b + $c) / 2;\n    $A = sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));\n  \
    \  return round($A, 2);\n  } else {\n    return -1;\n  }\n}", "  if ($a + $b >\
    \ $c && $a + $c > $b && $b + $c > $a) {\n    return round((sqrt(($a + $b + $c)\
    \ * ($a + $b - $c) * ($a - $b + $c) * (-$a + $b + $c)) / 4), 2);\n  }\n  return\
    \ -1;\n}\n\necho triangle_area(3, 4, 5) . \"\\n\"; // 6.00\necho triangle_area(1,\
    \ 2, 10) . \"\\n\"; // -1\necho triangle_area(12, 14, 7) . \"\\n\"; // 74.66\n\
    echo triangle_area(12, 15, 20) . \"\\n\"; // -1\necho triangle_area(6, 6, 6) .\
    \ \"\\n\"; // 15.59\necho triangle_area(5, 6, 7) . \"\\n\"; // 14.70\necho triangle_area(2,\
    \ 5, 3) . \"\\n\"; // 3.00\necho triangle_area(2, 2, 2) . \"\\n\"; // 1.73\necho\
    \ triangle_area(1, 2, 3) . \"\\n\"; // -1\necho triangle_area(3, 4, 0) . \"\\\
    n\"; // -1\necho triangle_area(3, 4, -5) . \"\\n\"; // -1\necho triangle_area(3,\
    \ -4, 5) . \"\\n\"; // -1\necho triangle_area(-3, 4, 5) . \"\\n\"; // -1\necho\
    \ triangle_area(1, 1, 1) . \"\\n\"; // 0.43\necho triangle_area(1, 3, 5) . \"\\\
    n\"; // -1\necho triangle_area(3, 5, 1) . \"\\n\"; // -1\necho triangle_area(5,\
    \ 1, 3) . \"\\n\"; // -1\necho triangle_area(9, 8, 7) . \"\\n\"; // 27.39\necho\
    \ triangle_area(7, 8, 9) . \"\\n\"; // 27.39\necho triangle_area(8, 9, 7) . \"\
    \\n\"; // 27.39\necho triangle_area(7, 9, 8) . \"\\n\"; // 27.39\necho triangle_",
  "    if (($a + $b) > $c && ($a + $c) > $b && ($b + $c) > $a) {\n        $p = ($a\
    \ + $b + $c) / 2;\n        $area = sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));\n\
    \        return round($area, 2);\n    } else {\n        return -1;\n    }\n}",
  "    $s = ($a + $b + $c) / 2;\n    if ($s - $a > 0 && $s - $b > 0 && $s - $c > 0)\
    \ {\n        return round(sqrt($s * ($s - $a) * ($s - $b) * ($s - $c)), 2);\n\
    \    }\n    return -1;\n}\n\necho triangle_area(3, 4, 5) . \"\\n\";\necho triangle_area(1,\
    \ 2, 10) . \"\\n\";", "  $maxSide = max($a, $b, $c);\n  $sum = $a + $b + $c;\n\
    \  if($sum - $maxSide <= $maxSide) {\n    return -1;\n  }\n  $p = ($a + $b + $c)\
    \ / 2;\n  return round(sqrt($p * ($p - $a) * ($p - $b) * ($p - $c)), 2);\n}\n\n\
    echo triangle_area(3, 4, 5) . \"\\n\";\necho triangle_area(1, 2, 10) . \"\\n\"\
    ;", "    $s = 0.5 * ($a + $b + $c);\n    $area = sqrt($s * ($s - $a) * ($s - $b)\
    \ * ($s - $c));\n    if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n   \
    \     return number_format($area, 2);\n    } else {\n        return -1;\n    }\n\
    }", "  // TODO\n}\n\necho triangle_area(3, 4, 5) . \"\\n\";\necho triangle_area(1,\
    \ 2, 10) . \"\\n\";", "    if ($a + $b <= $c) return -1;\n    if ($a + $c <= $b)\
    \ return -1;\n    if ($b + $c <= $a) return -1;\n    $s = ($a + $b + $c) / 2;\n\
    \    return round(sqrt($s * ($s - $a) * ($s - $b) * ($s - $c)), 2);\n}\n\necho\
    \ triangle_area(3, 4, 5) . \"\\n\";\necho triangle_area(1, 2, 10) . \"\\n\";\n\
    echo triangle_area(3, 4, 10) . \"\\n\";", "    $s = ($a + $b + $c) / 2;\n    $area\
    \ = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    return $area < 0 ? -1 :\
    \ round($area, 2);\n}\n", "    $s = ($a + $b + $c) / 2;\n    if ($s > $a && $s\
    \ > $b && $s > $c) {\n        return round(sqrt($s * ($s - $a) * ($s - $b) * ($s\
    \ - $c)), 2);\n    }\n    return -1;\n}\n", "  $p = ($a + $b + $c) / 2;\n  if\
    \ ($p - $a > 0 && $p - $b > 0 && $p - $c > 0) {\n    return sprintf(\"%.2f\",\
    \ sqrt($p * ($p - $a) * ($p - $b) * ($p - $c)));\n  }\n  return -1;\n}\n\necho\
    \ triangle_area(3, 4, 5) . \"\\n\";\necho triangle_area(1, 2, 10) . \"\\n\";",
  "  if($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n    return round(sqrt(($a\
    \ + $b + $c) * ($a + $b - $c) * ($a - $b + $c) * (-$a + $b + $c)) / 4, 2);\n \
    \ }\n  return -1;\n}\n", "  // in the case of a triangle it is irrelevant which\
    \ side is longest\n  // (as they all must be less than the sum of the other two)\n\
    \  $a = max($a, $b, $c);\n  // by now we know A is the longest side\n  // for\
    \ the other two sides: if their sum is less than or equal A, we can be sure\n\
    \  // that the 3 sides cannot form a triangle\n  if ($a >= $b + $c) return -1;\n\
    \  // the sum of two sides being larger than the third one is a necessary but\
    \ not\n  // sufficient condition for a triangle.\n  // given this other two conditions,\
    \ we can proceed\n  // Heron's formula:\n  // S = sqrt ( p (p - a) (p - b) (p\
    \ - c) )\n  // where p is the semi-perimeter:\n  // p = (a + b + c) / 2\n  $p\
    \ = ($a + $b + $c) / 2;\n  $s = sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));\n\
    \  return round($s, 2);\n}\nprint_r(triangle_area(5,5,5));", "  // your code here\n\
    }\n\necho triangle_area(3, 4, 5).\"\\n\";\necho triangle_area(1, 2, 10).\"\\n\"\
    ;\necho triangle_area(3, 4, 8).\"\\n\";\necho triangle_area(5, 5, 5).\"\\n\";",
  "    if(validTriangle($a, $b, $c)) {\n        $s = ($a + $b + $c) / 2;\n       \
    \ return round(sqrt($s * ($s - $a) * ($s - $b) * ($s - $c)), 2);\n    }\n    return\
    \ -1;\n}\n", "\treturn \n\t\t($a + $b > $c and $a + $c > $b and $b + $c > $a)\n\
    \t\t? number_format(sqrt(($a + $b + $c) * ($a + $b - $c) * ($a - $b + $c) * (-$a\
    \ + $b + $c)) / 4, 2)\n\t\t: -1;\n}\n\necho \"3, 4, 5\\n\";\necho triangle_area(3,\
    \ 4, 5);\necho \"\\n\\n\";\n\necho \"1, 2, 10\\n\";\necho triangle_area(1, 2,\
    \ 10);\necho \"\\n\\n\";\n\necho \"123, 54, 23\\n\";\necho triangle_area(123,\
    \ 54, 23);\necho \"\\n\\n\";\n\necho \"10, 10, 10\\n\";\necho triangle_area(10,\
    \ 10, 10);\necho \"\\n\\n\";\n\necho \"10, 10, 15\\n\";\necho triangle_area(10,\
    \ 10, 15);\necho \"\\n\\n\";\n\necho \"12, 12, 12\\n\";\necho triangle_area(12,\
    \ 12, 12);\necho \"\\n\\n\";\n\necho \"12, 15, 18\\n\";\necho triangle_area(12,\
    \ 15, 18);\necho \"\\n\\n\";\n\necho \"10, 11, 12\\n\";\necho triangle_area(10,\
    \ 11, 12);\necho \"\\n\\n\";\n\necho \"10, 11, 15\\n\";\necho triangle_area(10,\
    \ 11, 15);\necho \"\\n\\n\";\n\necho \"1, 1, 1\\n\";\necho triangle_area(1, 1,\
    \ 1);\necho \"\\n\\n\";\n\necho \"1, 2, 4\\n\";\necho triangle_area(1, 2, 4);\n\
    echo \"\\n\\n\";\n\necho \"100, 200, 300\\n\";\necho triangle_area(100, 200, 300);\n\
    echo \"\\n\\n\";\n\necho \"10, -2, 11\\n\";\necho triangle_area(10, -2, 11);\n\
    echo \"\\n\\n\";\n\necho \"10, 20,", "  if (($a + $b > $c) && ($a + $c > $b) &&\
    \ ($b + $c > $a)) {\n    return round((($a + $b + $c) / 2) * ($c * ($b - $a +\
    \ $c) * ($a - $b + $c) * ($a + $b - $c)) ** (1/2), 2);\n  } else {\n    return\
    \ -1;\n  }\n}", "    if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n   \
    \     $p = ($a + $b + $c) / 2;\n        $s = sqrt($p * ($p - $a) * ($p - $b) *\
    \ ($p - $c));\n        return round($s, 2);\n    }\n    return -1;\n}", "  $array\
    \ = array($a, $b, $c);\n  sort($array);\n  return ($array[0] + $array[1] > $array[2])\
    \ ? ($array[0] + $array[1] + $array[2]) / 2 : -1;\n}", "    if ($a + $b > $c &&\
    \ $a + $c > $b && $b + $c > $a) {\n        $p = ($a + $b + $c) / 2;\n        $s\
    \ = sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));\n        return number_format($s,\
    \ 2);\n    } else {\n        return -1;\n    }\n}\n", "    $sides = [$a, $b, $c];\n\
    \    sort($sides);\n    if ($sides[0] + $sides[1] > $sides[2]) {\n        $s =\
    \ ($a + $b + $c) / 2;\n        return round(sqrt($s * ($s - $a) * ($s - $b) *\
    \ ($s - $c)), 2);\n    }\n    return -1;\n}\n\necho triangle_area(3, 4, 5) . \"\
    \\n\"; // 6.00\necho triangle_area(1, 2, 10) . \"\\n\"; // -1", "  $p = ($a +\
    \ $b + $c) / 2;\n  $area = sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));\n  if\
    \ ($area < 0 || $area > 0) {\n    return number_format($area, 2);\n  } else {\n\
    \    return -1;\n  }\n}\n\necho triangle_area(3, 4, 5) . \"\\n\";\necho triangle_area(1,\
    \ 2, 10) . \"\\n\";\necho triangle_area(12, 10, 8) . \"\\n\";\necho triangle_area(2,\
    \ 2, 10) . \"\\n\";\necho triangle_area(1, 2, 2) . \"\\n\";", "  if ($a+$b>$c\
    \ && $a+$c>$b && $b+$c>$a) {\n    return round(sqrt(($a+$b+$c)*($a+$b-$c)*($a-$b+$c)*(-$a+$b+$c))/4,\
    \ 2);\n  } else {\n    return -1;\n  }\n}", "\tif ($a + $b > $c && $a + $c > $b\
    \ && $b + $c > $a) {\n\t\t$p = ($a + $b + $c) / 2;\n\t\t$s = sqrt($p * ($p - $a)\
    \ * ($p - $b) * ($p - $c));\n\t\treturn round($s, 2);\n\t} else {\n\t\treturn\
    \ -1;\n\t}\n}\n", "  $s = ($a + $b + $c) / 2;\n  $area = sqrt($s * ($s - $a) *\
    \ ($s - $b) * ($s - $c));\n  if ($area > 0) {\n    return round($area, 2);\n \
    \ } else {\n    return -1;\n  }\n}\n\necho triangle_area(2, 2, 2) . PHP_EOL;\n\
    echo triangle_area(3, 4, 5) . PHP_EOL;\necho triangle_area(1, 2, 10) . PHP_EOL;",
  "    if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n        $s = ($a + $b\
    \ + $c) / 2;\n        return number_format(sqrt($s * ($s - $a) * ($s - $b) * ($s\
    \ - $c)), 2);\n    }\n    return -1;\n}", "\tif (($a + $b > $c) && ($a + $c >\
    \ $b) && ($b + $c > $a)) {\n\t\t$s = ($a + $b + $c) / 2;\n\t\t$area = sqrt($s\
    \ * ($s - $a) * ($s - $b) * ($s - $c));\n\t\treturn number_format($area, 2);\n\
    \t} else {\n\t\treturn -1;\n\t}\n}\n\necho triangle_area(3, 4, 5) . \"\\n\";\n\
    echo triangle_area(1, 2, 10) . \"\\n\";", "  $s = ($a + $b + $c) / 2;\n  $area\
    \ = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n  if ($area < 0) {\n    return\
    \ -1;\n  }\n  return round($area, 2);\n}\n", "    $s = ($a + $b + $c) / 2;\n \
    \   $square = $s * ($s - $a) * ($s - $b) * ($s - $c);\n    if ($square > 0) {\n\
    \        return sqrt($square);\n    } else {\n        return -1;\n    }\n}\n\n\
    print_r(triangle_area(3, 4, 5).\"\\n\");\nprint_r(triangle_area(1, 2, 10).\"\\\
    n\");", "  $abc = array($a, $b, $c);\n  sort($abc);\n  if ($abc[0] + $abc[1] >\
    \ $abc[2]) {\n    $p = ($a + $b + $c) / 2;\n    return round(sqrt($p * ($p - $a)\
    \ * ($p - $b) * ($p - $c)), 2);\n  }\n  return -1;\n}\n\necho triangle_area(3,\
    \ 4, 5);", "    // A = sqrt(s * (s - a) * (s - b) * (s - c))\n    // https://www.mathsisfun.com/geometry/herons-formula.html\n\
    \    $s = ($a + $b + $c) / 2;\n    return ($s - $a) * ($s - $b) * ($s - $c) <\
    \ 0 ? -1 : sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n}\n", "    if ($a +\
    \ $b > $c && $a + $c > $b && $b + $c > $a) {\n        $p = ($a + $b + $c) / 2;\n\
    \        $s = sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));\n        return round($s,\
    \ 2);\n    } else {\n        return -1;\n    }\n}\necho triangle_area(3, 4, 5);\n\
    echo \"\\n\";\necho triangle_area(1, 2, 10);\necho \"\\n\";\n", "    if ($a+$b>$c\
    \ && $a+$c>$b && $b+$c>$a) {\n        $s = ($a+$b+$c)/2;\n        $area = sqrt($s*($s-$a)*($s-$b)*($s-$c));\n\
    \        return round($area, 2);\n    } else {\n        return -1;\n    }\n}",
  "    $p = ($a + $b + $c) / 2;\n    $s = sqrt($p * ($p - $a) * ($p - $b) * ($p -\
    \ $c));\n    return is_nan($s) ? -1 : round($s, 2);\n}", "\t$sides = array($a,\
    \ $b, $c);\n\tsort($sides);\n\tif($sides[0] + $sides[1] > $sides[2]){\n\t\t$p\
    \ = ($a + $b + $c) / 2;\n\t\t$a = sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));\n\
    \t\treturn round($a, 2);\n\t}\n\treturn -1;\n}", "    $maxSide = max($a, $b, $c);\n\
    \    $sumSides = $a + $b + $c;\n    if ($sumSides - $maxSide > $maxSide) {\n \
    \       $s = $sumSides / 2;\n        return sqrt($s * ($s - $a) * ($s - $b) *\
    \ ($s - $c));\n    } else {\n        return -1;\n    }\n}\n", "  if($a+$b>$c &&\
    \ $a+$c>$b && $b+$c>$a){\n    $p = ($a+$b+$c)/2;\n    $S = sqrt($p*($p-$a)*($p-$b)*($p-$c));\n\
    \    return round($S, 2);\n  }\n  return -1;\n}\necho triangle_area(3, 4, 5) .\
    \ '<br>'; // 6.00\necho triangle_area(1, 2, 10) . '<br>'; // -1\necho triangle_area(6,\
    \ 6, 6) . '<br>'; // 15.59\necho triangle_area(4, 4, 1) . '<br>'; // -1\necho\
    \ triangle_area(5, 5, 6) . '<br>'; // 12.00\necho triangle_area(5, 10, 5) . '<br>';\
    \ // 12.00\necho triangle_area(10, 10, 10) . '<br>'; // 43.30\necho triangle_area(2,\
    \ 3, 4) . '<br>'; // 2.90\necho triangle_area(3, 5, 6) . '<br>'; // 7.48\necho\
    \ triangle_area(3, 7, 6) . '<br>'; // 11.28\necho triangle_area(13, 14, 15) .\
    \ '<br>'; // 84.39\necho triangle_area(100, 200, 300) . '<br>'; // -1\necho triangle_area(5,\
    \ 4, 3) . '<br>'; // 6.00\necho triangle_area(4, 5, 3) . '<br>'; // 6.00\necho\
    \ triangle_area(3, 5, 4) . '<br>'; // 6.00\necho triangle_area(5, 3, 4) . '<br>';\
    \ // 6.00\necho triangle_area(4, 3, 5) . '<br>'; // 6.00\necho triangle_area(3,\
    \ 4, 5) . '<br>'; // 6.00\necho triangle_area(200, 300, 100) . '<br>'; // -1\n\
    echo triangle_area(300", "  if ($a < 0 || $b < 0 || $c < 0) return -1;\n  // if\
    \ ($a + $b < $c || $a + $c < $b || $b + $c < $a) return -1;\n  $p = ($a + $b +\
    \ $c) / 2;\n  return round(sqrt($p * ($p - $a) * ($p - $b) * ($p - $c)), 2);\n\
    }\n\nvar_dump(triangle_area(3, 4, 5));\nvar_dump(triangle_area(1, 2, 10));\n\n\
    echo PHP_EOL;", "   $s = ($a + $b + $c) / 2;\n   $area = sqrt($s * ($s - $a) *\
    \ ($s - $b) * ($s - $c));\n   return $area > 0 ? round($area, 2) : -1;\n}\n\n\
    echo triangle_area(3, 4, 5) . PHP_EOL;\necho triangle_area(1, 2, 10) . PHP_EOL;\n\
    echo triangle_area(2, 3, 3) . PHP_EOL;\necho triangle_area(7, 4, 5) . PHP_EOL;\n\
    echo triangle_area(3, 3, 3) . PHP_EOL;\necho triangle_area(2, 3, 4) . PHP_EOL;",
  "  // Handle invalid input\n  if ($a <= 0 || $b <= 0 || $c <= 0) return -1;\n  //\
    \ Handle the case where any two sides are less than the third\n  if (($a + $b)\
    \ <= $c || ($a + $c) <= $b || ($b + $c) <= $a) return -1;\n  // Use Heron's formula\n\
    \  $p = ($a + $b + $c) / 2;\n  $s = sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));\n\
    \  return round($s, 2);\n}", "  $s = ($a + $b + $c) / 2;\n  if($a + $b <= $c ||\
    \ $a + $c <= $b || $b + $c <= $a) {\n    return -1;\n  } else {\n    return number_format(sqrt($s\
    \ * ($s - $a) * ($s - $b) * ($s - $c)), 2);\n  }\n}\n", "    $a2 = $a * $a;\n\
    \    $b2 = $b * $b;\n    $c2 = $c * $c;\n    if ($a + $b > $c && $a + $c > $b\
    \ && $b + $c > $a) {\n        return round(sqrt(($a2 + $b2 - $c2) * ($a2 + $c2\
    \ - $b2) * ($b2 + $c2 - $a2) / 16), 2);\n    }\n    return -1;\n}", "    if ($a\
    \ + $b > $c && $a + $c > $b && $b + $c > $a) {\n        $s = ($a + $b + $c) /\
    \ 2;\n        return round(sqrt($s * ($s - $a) * ($s - $b) * ($s - $c)), 2);\n\
    \    }\n    return -1;\n}\n\necho(triangle_area(3, 4, 5) . \"\\n\");\necho(triangle_area(1,\
    \ 2, 10) . \"\\n\");", "  $s = ($a + $b + $c) / 2;\n  $area = sqrt($s * ($s -\
    \ $a) * ($s - $b) * ($s - $c));\n  if($area == 0) {\n    return -1;\n  }\n  else\
    \ {\n    return round($area, 2);\n  }\n}\n\necho triangle_area(3, 4, 5) . \"\\\
    n\";\necho triangle_area(1, 2, 10) . \"\\n\";", "    $p = ($a + $b + $c) / 2;\n\
    \    $area = sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));\n    return ($area\
    \ > 0) ? round($area, 2) : -1;\n}\n", "    // if a+b>c and a+c>b and b+c>a, it\
    \ is valid\n    if ($a + $b > $c and $a + $c > $b and $b + $c > $a) {\n      \
    \  $s = ($a + $b + $c) / 2;\n        $area = sqrt($s * ($s - $a) * ($s - $b) *\
    \ ($s - $c));\n        return round($area, 2);\n    } else {\n        return -1;\n\
    \    }\n}", "  $area = 0;\n  $s = ($a + $b + $c) / 2;\n\n  if ($a + $b > $c &&\
    \ $a + $c > $b && $b + $c > $a) {\n    $area = round(sqrt($s * ($s - $a) * ($s\
    \ - $b) * ($s - $c)), 2);\n  } else {\n    $area = -1;\n  }\n\n  return $area;\n\
    }", "    if($a+$b>$c && $a+$c>$b && $b+$c>$a){\n        $s = ($a+$b+$c)/2;\n \
    \       $area = sqrt($s*($s-$a)*($s-$b)*($s-$c));\n        return round($area,2);\n\
    \    }\n    return -1;\n}", "  $p = ($a + $b + $c) / 2;\n  $area = sqrt($p * ($p\
    \ - $a) * ($p - $b) * ($p - $c));\n  return $area >= 0 ? sprintf(\"%.2f\", $area)\
    \ : -1;\n}\n\necho triangle_area(3, 4, 5);\necho \"\\n\";\necho triangle_area(1,\
    \ 2, 10);", "  // Calculate the semi-perimeter\n  $p = ($a + $b + $c) / 2;\n \
    \ // Calculate the area of the triangle and return it\n  return (number_format(sqrt($p\
    \ * ($p - $a) * ($p - $b) * ($p - $c)), 2));\n}", "  $arr = [$a, $b, $c];\n  sort($arr);\n\
    \  if ($arr[0] + $arr[1] <= $arr[2]) return -1;\n  $p = ($a + $b + $c) / 2;\n\
    \  return round(sqrt($p * ($p - $a) * ($p - $b) * ($p - $c)), 2);\n}\n", "   \
    \ if(($a + $b) > $c && ($a + $c) > $b && ($b + $c) > $a) {\n        $s = ($a +\
    \ $b + $c) / 2;\n        $result = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n\
    \        return round($result, 2);\n    } else {\n        return -1;\n    }\n\
    }\n", "  $p = ($a + $b + $c) / 2;\n  if(($p - $a) * ($p - $b) * ($p - $c) > 0)\n\
    \    return sprintf(\"%.2f\", sqrt($p * ($p - $a) * ($p - $b) * ($p - $c)));\n\
    \  return -1;\n}\n", "    $s = ($a + $b + $c) / 2;\n    $area = sqrt($s * ($s\
    \ - $a) * ($s - $b) * ($s - $c));\n    if ($area < 0) {\n        return -1;\n\
    \    }\n    return round($area, 2);\n}\necho triangle_area(3, 4, 5);\necho \"\\\
    n\";\necho triangle_area(1, 2, 10);\necho \"\\n\";\n", "  $p = ($a + $b + $c)\
    \ / 2;\n  $area = sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));\n  if ($area >\
    \ 0) {\n    return round($area, 2);\n  } else {\n    return -1;\n  }\n}\n", "\t\
    if ($a+$b > $c && $a+$c > $b && $b+$c > $a) {\n\t\t$s = ($a+$b+$c)/2;\n\t\t$area\
    \ = sqrt($s*($s-$a)*($s-$b)*($s-$c));\n\t\treturn round($area, 2);\n\t}\n\treturn\
    \ -1;\n}", "\tif($a <= 0 || $b <= 0 || $c <= 0) {\n\t\treturn -1;\n\t}\n\t$s =\
    \ ($a + $b + $c) / 2;\n\t$area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n\
    \treturn round($area, 2);\n}\n\necho triangle_area(3, 4, 5) . PHP_EOL;\necho triangle_area(1,\
    \ 2, 10) . PHP_EOL;\necho triangle_area(0, 0, 0) . PHP_EOL;\necho triangle_area(0,\
    \ 1, 0) . PHP_EOL;\necho triangle_area(1, 0, 0) . PHP_EOL;\necho triangle_area(0,\
    \ 0, 1) . PHP_EOL;\necho triangle_area(1, 0, 1) . PHP_EOL;\necho triangle_area(0,\
    \ 1, 1) . PHP_EOL;\necho triangle_area(1, 1, 0) . PHP_EOL;\necho triangle_area(1,\
    \ 1, 1) . PHP_EOL;\necho triangle_area(1, 1, -1) . PHP_EOL;\necho triangle_area(2,\
    \ -1, 1) . PHP_EOL;\necho triangle_area(-1, 2, 1) . PHP_EOL;\necho triangle_area(2,\
    \ 1, -1) . PHP_EOL;\necho triangle_area(-1, 1, 2) . PHP_EOL;\necho triangle_area(1,\
    \ -1, 2) . PHP_EOL;\necho triangle_area(3, 4, 5) . PHP_EOL;\necho triangle_area(5,\
    \ 4, 3) . PHP_EOL;\necho triangle_area(3, 5, 4) . PHP_EOL;\necho triangle_area(4,\
    \ 3, 5) . PHP_EOL;\necho triangle_area(4, 5, 3) . PHP_EOL;\necho triangle_area(5,\
    \ 3, 4) . PHP_EOL;\necho triangle_area(200, 200, 100) . PHP_EOL;\necho triangle_area(",
  "    if(($a + $b > $c) && ($a + $c > $b) && ($b + $c > $a)) {\n        $s = ($a\
    \ + $b + $c) / 2;\n        $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n\
    \        return number_format($area, 2);\n    }\n    return -1;\n}\n", "\tif ($a+$b>$c\
    \ && $a+$c>$b && $b+$c>$a) {\n\t\treturn number_format(sqrt((($a+$b+$c)/2)*((($a+$b+$c)/2)-$a)*((($a+$b+$c)/2)-$b)*((($a+$b+$c)/2)-$c)),\
    \ 2);\n\t}\n\treturn -1;\n}\n", "  if($a + $b > $c && $a + $c > $b && $b + $c\
    \ > $a) {\n    return round(sqrt(($a + $b + $c) * (-$a + $b + $c) * ($a - $b +\
    \ $c) * ($a + $b - $c)) / 4, 2);\n  }\n  return -1;\n}", "  if ($a <= 0 || $b\
    \ <= 0 || $c <= 0) {\n    return -1;\n  }\n  $s = ($a + $b + $c) / 2;\n  return\
    \ number_format(sqrt($s * ($s - $a) * ($s - $b) * ($s - $c)), 2);\n}\n", "\t$answer\
    \ = -1;\n\tif ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n\t\t$answer =\
    \ $a * $b * $c;\n\t}\n\n\treturn round($answer, 2);\n}\n", "  $area = -1;\n  if\
    \ ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n    $p = ($a + $b + $c) /\
    \ 2;\n    $area = sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));\n  }\n  return\
    \ number_format($area, 2);\n}", "  $length = $a + $b + $c;\n  $longest = max($a,\
    \ $b, $c);\n  $area = -1;\n  if($length - $longest > $longest) {\n    $p = ($a\
    \ + $b + $c) / 2;\n    $area = sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));\n\
    \  }\n  return round($area, 2);\n}", "    if ($a + $b > $c && $a + $c > $b &&\
    \ $b + $c > $a) {\n        $s = ($a + $b + $c) / 2;\n        return round(sqrt($s\
    \ * ($s - $a) * ($s - $b) * ($s - $c)), 2);\n    }\n    return -1;\n}", "\t$area\
    \ = 0;\n\t$s = ($a + $b + $c) / 2;\n\tif ($a + $b > $c && $a + $c > $b && $b +\
    \ $c > $a) {\n\t\t$area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n\t} else\
    \ {\n\t\t$area = -1;\n\t}\n\treturn round($area, 2);\n}\n", "    $p = ($a + $b\
    \ + $c) / 2;\n    $area = sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));\n    return\
    \ ($area > 0) ? round($area, 2) : -1;\n}", "  $s = ($a + $b + $c) / 2;\n  $area\
    \ = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n  return $area < 0 ? -1 : round($area,\
    \ 2);\n}", "    $s = ($a + $b + $c) / 2;\n    $area = sqrt($s * ($s - $a) * ($s\
    \ - $b) * ($s - $c));\n    if($area > 0) {\n        return number_format($area,\
    \ 2);\n    }\n    return -1;\n}\n\necho triangle_area(3, 4, 5);\n", "  $semiPerimeter\
    \ = ($a + $b + $c) / 2;\n  $area = sqrt($semiPerimeter * ($semiPerimeter - $a)\
    \ * ($semiPerimeter - $b) * ($semiPerimeter - $c));\n  return $area > 0 ? number_format($area,\
    \ 2) : -1;\n}\necho triangle_area(3, 4, 5).PHP_EOL;\necho triangle_area(1, 2,\
    \ 10).PHP_EOL;", "    $p = ($a + $b + $c) / 2;\n    $area = sqrt($p * ($p - $a)\
    \ * ($p - $b) * ($p - $c));\n    return $area ? number_format($area, 2) : -1;\n\
    }\n\necho \"Given the lengths of the three sides of a triangle. Return the area\
    \ of the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. Otherwise return -1.\\n\";\necho \"Three sides make a valid triangle\
    \ when the sum of any two sides is greater than the third side.\\n\";\necho \"\
    triangle_area(3, 4, 5) == 6.00\\n\";\necho \"triangle_area(1, 2, 10) == -1\\n\"\
    ;\necho \"Test: triangle_area(3, 4, 5) == 6.00\\n\";\necho \"Result: \" . (triangle_area(3,\
    \ 4, 5) == 6.00 ? \"True\" : \"False\") . \"\\n\";\necho \"Test: triangle_area(1,\
    \ 2, 10) == -1\\n\";\necho \"Result: \" . (triangle_area(1, 2, 10) == -1 ? \"\
    True\" : \"False\") . \"\\n\";", "    if ($a + $b > $c && $a + $c > $b && $b +\
    \ $c > $a) {\n        return round(($a * $b) / 2, 2);\n    }\n    return -1;\n\
    }\n\necho triangle_area(3, 4, 5); // 6.00\necho '<br>';\necho triangle_area(1,\
    \ 2, 10); // -1\necho '<br>';\necho triangle_area(4, 5, 6); // 10.00\necho '<br>';\n\
    echo triangle_area(5, 2, 3); // -1\necho '<br>';\necho triangle_area(5, 7, 10);\
    \ // -1\necho '<br>';\necho triangle_area(5, 5, 4); // -1\necho '<br>';\necho\
    \ triangle_area(3, 4, 2); // -1\necho '<br>';\necho triangle_area(10, 8, 12);\
    \ // 41.67\necho '<br>';\necho triangle_area(4, 5, 4); // -1\necho '<br>';\necho\
    \ triangle_area(7, 3, 5); // -1\necho '<br>';\necho triangle_area(6, 6, 6); //\
    \ 15.59\necho '<br>';\necho triangle_area(12, 7, 8); // 36.00\necho '<br>';\n\
    echo triangle_area(3, 7, 7); // -1\necho '<br>';\necho triangle_area(2, 3, 8);\
    \ // -1\necho '<br>';\necho triangle_area(7, 4, 5); // 10.50\necho '<br>';\necho\
    \ triangle_area(4, 8, 8); // -1\necho '<br>';\necho triangle_area(8, 9, 11); //\
    \ 40.50\necho '<br>';\necho triangle_area(11, 12, 13); // 73.50\necho '<br>';\n\
    echo triangle_area(8, 8, 8); // 27.00\necho '<br>';\necho triangle_area(5, 5,\
    \ 5); // 10.83\necho '<br>';\necho triangle", "    if ($a+$b > $c && $a+$c > $b\
    \ && $b+$c > $a) {\n        $s = ($a+$b+$c)/2;\n        $area = sqrt($s*($s-$a)*($s-$b)*($s-$c));\n\
    \        return number_format($area, 2);\n    }\n    return -1;\n}", "  $s = ($a\
    \ + $b + $c) / 2;\n  if ($s - $a <= 0 || $s - $b <= 0 || $s - $c <= 0) {\n   \
    \ return -1;\n  }\n  return round(sqrt($s * ($s - $a) * ($s - $b) * ($s - $c)),\
    \ 2);\n}\n", "    $p = ($a + $b + $c) / 2;\n    $s = sqrt($p * ($p - $a) * ($p\
    \ - $b) * ($p - $c));\n    return ($s) ? round($s, 2) : -1;\n}", "    $s = ($a\
    \ + $b + $c) / 2;\n    if ($s * ($s - $a) * ($s - $b) * ($s - $c) > 0) {\n   \
    \     return number_format(sqrt($s * ($s - $a) * ($s - $b) * ($s - $c)), 2);\n\
    \    } else {\n        return -1;\n    }\n}\n\necho triangle_area(1, 2, 10);",
  "  if($a + $b <= $c || $a + $c <= $b || $b + $c <= $a) return -1;\n  return number_format(($a+$b+$c)/2,\
    \ 2);\n}", "    if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n        $s\
    \ = ($a + $b + $c) / 2;\n        return round(sqrt($s * ($s - $a) * ($s - $b)\
    \ * ($s - $c)), 2);\n    } else {\n        return -1;\n    }\n}\n", "  $perimeter\
    \ = ($a + $b + $c) / 2;\n  $area = sqrt($perimeter * ($perimeter - $a) * ($perimeter\
    \ - $b) * ($perimeter - $c));\n  return ($area != 0) ? round($area, 2) : -1;\n\
    }\n\necho(triangle_area(3, 4, 5)) . PHP_EOL;\necho(triangle_area(1, 2, 10)) .\
    \ PHP_EOL;\necho(triangle_area(1, 4, 5)) . PHP_EOL;\necho(triangle_area(2, 3,\
    \ 4)) . PHP_EOL;\necho(triangle_area(5, 7, 8)) . PHP_EOL;\necho(triangle_area(5,\
    \ 7, 9)) . PHP_EOL;\necho(triangle_area(5, 7, 11)) . PHP_EOL;\necho(triangle_area(5,\
    \ 7, 12)) . PHP_EOL;", "    $s = ($a + $b + $c) / 2;\n    if ($s - $a <= 0 ||\
    \ $s - $b <= 0 || $s - $c <= 0) {\n        return -1;\n    }\n    return sprintf(\"\
    %.2f\", sqrt($s * ($s - $a) * ($s - $b) * ($s - $c)));\n}\n", "    $array = [$a,\
    \ $b, $c];\n    sort($array);\n    if($array[0] + $array[1] <= $array[2]) {\n\
    \        return -1;\n    }\n    $s = ($a + $b + $c) / 2;\n    return number_format(sqrt($s\
    \ * ($s - $a) * ($s - $b) * ($s - $c)), 2);\n}", "    if ($a + $b > $c && $a +\
    \ $c > $b && $b + $c > $a) {\n        $s = ($a + $b + $c) / 2;\n        return\
    \ round(sqrt($s * ($s - $a) * ($s - $b) * ($s - $c)), 2);\n    }\n    return -1;\n\
    }\n", "  if (($a + $b > $c) && ($a + $c > $b) && ($b + $c > $a)) {\n    return\
    \ round(sqrt((($a + $b + $c) / 2) * ((($a + $b + $c) / 2) - $a) * ((($a + $b +\
    \ $c) / 2) - $b) * ((($a + $b + $c) / 2) - $c)), 2);\n  } else {\n    return -1;\n\
    \  }\n}\n", "\t$arr = [$a, $b, $c];\n\tsort($arr);\n\tif ($arr[0] + $arr[1] >\
    \ $arr[2])\n\t\treturn ($a * $b) / 2;\n\treturn -1;\n}\necho triangle_area(3,\
    \ 4, 5) . \"\\n\"; // 6.00\necho triangle_area(1, 2, 10) . \"\\n\"; // -1\necho\
    \ triangle_area(5, 3, 2) . \"\\n\"; // 3.00\necho triangle_area(5, 4, 2) . \"\\\
    n\"; // -1\necho triangle_area(8, 2, 3) . \"\\n\"; // -1\necho triangle_area(1,\
    \ 2, 4) . \"\\n\"; // -1\necho triangle_area(0, 0, 0) . \"\\n\"; // -1\necho triangle_area(10,\
    \ 3, 3) . \"\\n\"; // -1\necho triangle_area(5, 2, 1) . \"\\n\"; // 0.00\necho\
    \ triangle_area(1, 2, 3) . \"\\n\"; // -1\necho triangle_area(50, 40, 30) . \"\
    \\n\"; // 600.00\necho triangle_area(1, 1, 1) . \"\\n\"; // 0.50", "  if ($a +\
    \ $b > $c && $a + $c > $b && $b + $c > $a) {\n    $s = ($a + $b + $c) / 2;\n \
    \   return round(sqrt($s * ($s - $a) * ($s - $b) * ($s - $c)), 2);\n  }\n  return\
    \ -1;\n}", "    if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n        $p\
    \ = ($a + $b + $c) / 2;\n        $s = sqrt($p * ($p - $a) * ($p - $b) * ($p -\
    \ $c));\n        return round($s, 2);\n    }\n    return -1;\n}\n\necho triangle_area(3,\
    \ 4, 5); // 6.00\necho \"<br>\";\necho triangle_area(1, 2, 10); // -1\necho \"\
    <br>\";\necho triangle_area(5, 5, 5); // 10.825317547305485\necho \"<br>\";\n\
    echo triangle_area(5, 4, 5); // 10.825317547305485\necho \"<br>\";\necho triangle_area(5,\
    \ 5, 4); // 10.825317547305485\necho \"<br>\";\necho triangle_area(5, 6, 4); //\
    \ 10.825317547305485\necho \"<br>\";\necho triangle_area(4, 5, 5); // 10.825317547305485\n\
    echo \"<br>\";\necho triangle_area(4, 5, 6); // 10.825317547305485\necho \"<br>\"\
    ;\necho triangle_area(4, 6, 5); // 10.825317547305485\necho \"<br>\";\necho triangle_area(5,\
    \ 6, 7); // 14.696938456699067\necho \"<br>\";\necho triangle_area(5, 7, 6); //\
    \ 14.696938456699067\necho \"<br>\";\necho triangle_area(6, 5, 7); // 14.696938456699067\n\
    echo \"<br>\";\necho triangle_area(6, 7, 5); // 14.696938456699067\necho \"<br>\"\
    ;\necho triangle_area(7, 5, 6); // 14.696938456699067\necho \"<br>\";\necho triangle_area(7,\
    \ 6, 5); // 14.696938456699067\necho \"<br>\";\necho triangle_area(8, 6, 7); //",
  "  $perimeter = $a + $b + $c;\n  if (($perimeter - $a) > $a && ($perimeter - $b)\
    \ > $b && ($perimeter - $c) > $c) {\n    $p = $perimeter / 2;\n    $area = sqrt($p\
    \ * ($p - $a) * ($p - $b) * ($p - $c));\n    return round($area, 2);\n  } else\
    \ {\n    return -1;\n  }\n}\n", "    if (($a + $b) > $c && ($a + $c) > $b && ($b\
    \ + $c) > $a) {\n        $s = ($a + $b + $c) / 2;\n        $area = sqrt($s * ($s\
    \ - $a) * ($s - $b) * ($s - $c));\n        return round($area, 2);\n    }\n  \
    \  return -1;\n}\n\necho triangle_area(3, 4, 5) . \"\\n\";\necho triangle_area(1,\
    \ 2, 10) . \"\\n\";\necho triangle_area(3, 6, 4) . \"\\n\";", "  $p = ($a + $b\
    \ + $c) / 2;\n  $s = sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));\n  return round($s,\
    \ 2);\n}\n", "    $triangle = array($a, $b, $c);\n    sort($triangle);\n    if($triangle[0]\
    \ + $triangle[1] <= $triangle[2]){\n        return -1;\n    }\n    return number_format(0.5\
    \ * sqrt(\n        ($triangle[0] + $triangle[1] + $triangle[2])\n        * ($triangle[0]\
    \ + $triangle[1] - $triangle[2])\n        * ($triangle[0] - $triangle[1] + $triangle[2])\n\
    \        * (-$triangle[0] + $triangle[1] + $triangle[2])\n    ), 2);\n}", "\t\n\
    \t// validate triangle\n\tif ($a + $b <= $c || $a + $c <= $b || $b + $c <= $a)\
    \ {\n\t\treturn -1;\n\t}\n\t// area formula\n\t$p = ($a + $b + $c) / 2;\n\t$area\
    \ = sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));\n\treturn number_format($area,\
    \ 2);\n}\necho triangle_area(3, 4, 5) . \"\\n\"; // 6.00\necho triangle_area(1,\
    \ 2, 10) . \"\\n\"; // -1\necho triangle_area(7, 10, 5) . \"\\n\"; // 14.69\n\
    echo triangle_area(9, 9, 9) . \"\\n\"; // 27.71", "    $s = ($a + $b + $c) / 2;\n\
    \    $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    return ($area\
    \ > 0) ? round($area, 2) : -1;\n}\n\necho triangle_area(3, 4, 5) . PHP_EOL;\n\
    echo triangle_area(1, 2, 10) . PHP_EOL;", "  if(!($a + $b > $c && $a + $c > $b\
    \ && $b + $c > $a)){\n    return -1;\n  }\n  $h = ($a + $b + $c) / 2;\n  return\
    \ round(sqrt($h * ($h - $a) * ($h - $b) * ($h - $c)), 2);\n}\n\necho triangle_area(3,\
    \ 4, 5);\necho \"\\n\";\necho triangle_area(1, 2, 10);\necho \"\\n\";", "  if($a\
    \ + $b > $c && $a + $c > $b && $b + $c > $a) {\n    $s = ($a + $b + $c) / 2;\n\
    \    return number_format(sqrt($s * ($s - $a) * ($s - $b) * ($s - $c)), 2);\n\
    \  }\n  return -1;\n}\n\necho triangle_area(1, 2, 10);", "  \n  if ($a + $b >\
    \ $c && $a + $c > $b && $b + $c > $a) {\n    $s = ($a + $b + $c) / 2;\n    $area\
    \ = (float) sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    return number_format($area,\
    \ 2);\n  } else {\n    return -1;\n  }\n  \n}\n", "  if ($a + $b > $c && $a +\
    \ $c > $b && $b + $c > $a) {\n    return round(sqrt(($a + $b + $c) * ($a + $b\
    \ - $c) * ($a - $b + $c) * (-$a + $b + $c)) / 4, 2);\n  } else {\n    return -1;\n\
    \  }\n}\n\necho triangle_area(3, 4, 5) . PHP_EOL;\necho triangle_area(1, 2, 10)\
    \ . PHP_EOL;\necho triangle_area(10, 10, 10) . PHP_EOL;\necho triangle_area(10,\
    \ 10, 50) . PHP_EOL;\necho triangle_area(10, 20, 10) . PHP_EOL;\necho triangle_area(20,\
    \ 10, 10) . PHP_EOL;\necho triangle_area(5, 4, 3) . PHP_EOL;\necho triangle_area(4,\
    \ 5, 3) . PHP_EOL;\necho triangle_area(3, 5, 4) . PHP_EOL;\necho triangle_area(5,\
    \ 3, 4) . PHP_EOL;\necho triangle_area(4, 3, 5) . PHP_EOL;\necho triangle_area(3,\
    \ 4, 5) . PHP_EOL;\necho triangle_area(3, 4, 5) . PHP_EOL;\necho triangle_area(10,\
    \ 10, 100) . PHP_EOL;\necho triangle_area(10, 100, 10) . PHP_EOL;\necho triangle_area(100,\
    \ 10, 10) . PHP_EOL;\necho triangle_area(7, 12, 8) . PHP_EOL;\necho triangle_area(15,\
    \ 14, 9) . PHP_EOL;\necho triangle_area(3, 4, 13) . PHP_EOL;\necho triangle_area(1,\
    \ 1, 1) . PHP_EOL;\necho triangle_area(9, 9, 19) . PHP_EOL;\necho triangle_area(10,\
    \ 12, 32) . PHP_EOL;\necho triangle_area(0, 0, 0) . PHP_", "    $p = ($a + $b\
    \ + $c) / 2;\n    $s = sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));\n    return\
    \ ($s > 0) ? round($s, 2) : -1;\n}\n", "    $p = ($a + $b + $c) / 2;\n    $s =\
    \ sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));\n    return $s > 0 ? round($s,\
    \ 2) : -1;\n}\necho triangle_area(3, 4, 5); // 6.00\necho \"\\n\";\necho triangle_area(1,\
    \ 2, 10); // -1", "  if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n   \
    \ return number_format((sqrt(($a + $b + $c) * ($a + $b - $c) * ($a - $b + $c)\
    \ * (-$a + $b + $c)) / 4), 2);\n  }\n  return -1;\n}\necho triangle_area(3, 4,\
    \ 5) . \"\\n\";\necho triangle_area(1, 2, 10) . \"\\n\";", "  $s = ($a + $b +\
    \ $c) / 2;\n  $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n  return\
    \ $area > 0 ? round($area, 2) : -1;\n}\n", "\tif ($a + $b > $c && $a + $c > $b\
    \ && $b + $c > $a) {\n\t\treturn number_format((sqrt(($a + $b + $c) * ($a + $b\
    \ - $c) * ($a - $b + $c) * (-$a + $b + $c)) / 4), 2);\n\t} else {\n\t\treturn\
    \ -1;\n\t}\n}\n", "    // calculate the semi-perimeter\n    $s = ($a + $b + $c)\
    \ / 2;\n    // calculate the area\n    $area = sqrt($s * ($s - $a) * ($s - $b)\
    \ * ($s - $c));\n    // return -1 if the area is zero, else return the area\n\
    \    return ($area) ? round($area, 2) : -1;\n}\n", "  if(($a + $b > $c) && ($a\
    \ + $c > $b) && ($b + $c > $a)) {\n    $perimeter = ($a + $b + $c) / 2;\n    $area\
    \ = sqrt($perimeter * ($perimeter - $a) * ($perimeter - $b) * ($perimeter - $c));\n\
    \    return sprintf(\"%.2f\", $area);\n  }\n  return -1;\n}\n", "    if($a+$b\
    \ > $c && $a+$c > $b && $b+$c > $a){\n        return number_format(sqrt(($a+$b+$c)*($a+$b-$c)*($a-$b+$c)*(-$a+$b+$c))/4,\
    \ 2);\n    }\n    return -1;\n}\n", "\tif ($a + $b <= $c || $a + $c <= $b || $b\
    \ + $c <= $a) {\n\t\treturn -1;\n\t} else {\n\t\t$p = ($a + $b + $c) / 2;\n\t\t\
    $triangleArea = sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));\n\t\treturn number_format($triangleArea,\
    \ 2);\n\t}\n}\necho triangle_area(3, 4, 5) . \"\\n\";\necho triangle_area(1, 2,\
    \ 10) . \"\\n\";", "    $arr = [$a, $b, $c];\n    sort($arr);\n    $sum = $arr[0]\
    \ + $arr[1];\n    if ($sum > $arr[2]) {\n        $p = ($a + $b + $c) / 2;\n  \
    \      $s = sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));\n        return round($s,\
    \ 2);\n    }\n    return -1;\n}\n", "    if ($a+$b>$c && $a+$c>$b && $b+$c>$a)\
    \ {\n        $p = ($a+$b+$c)/2;\n        $area = sqrt($p*($p-$a)*($p-$b)*($p-$c));\n\
    \        return number_format($area, 2);\n    } else {\n        return -1;\n \
    \   }\n}\n", "  $s = ($a + $b + $c) / 2;\n  if ($s - $a < $c && $s - $b < $c &&\
    \ $s - $c < $a) {\n    return round(sqrt($s * ($s - $a) * ($s - $b) * ($s - $c)),\
    \ 2);\n  }\n  return -1;\n}\necho triangle_area(3, 4, 5).\"\\n\";\necho triangle_area(1,\
    \ 2, 10).\"\\n\";\necho triangle_area(6, 4, 3).\"\\n\";\necho triangle_area(5,\
    \ 12, 13).\"\\n\";\n", "    \n}", "  // Your code here\n}", "  $area = 0;\n  if\
    \ ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n    $s = ($a + $b + $c) /\
    \ 2;\n    $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n  }\n  return\
    \ $area == 0 ? -1 : sprintf(\"%.2f\", $area);\n}\n\necho triangle_area(3, 4, 5);",
  "  if (($a + $b > $c) && ($a + $c > $b) && ($b + $c > $a)) {\n    return number_format(sqrt((($a\
    \ + $b + $c) / 2) * ((($a + $b + $c) / 2) - $a) * ((($a + $b + $c) / 2) - $b)\
    \ * ((($a + $b + $c) / 2) - $c)), 2);\n  } else {\n    return -1;\n  }\n}\necho(triangle_area(3,\
    \ 4, 5) . \"\\n\");\necho(triangle_area(1, 2, 10) . \"\\n\");", "  $s = ($a +\
    \ $b + $c) / 2;\n  if ($s - $a > 0 && $s - $b > 0 && $s - $c > 0) {\n    return\
    \ round(sqrt($s * ($s - $a) * ($s - $b) * ($s - $c)), 2);\n  }\n  return -1;\n\
    }\necho \"\\n\";\necho triangle_area(1, 2, 10); // -1\necho \"\\n\";\necho triangle_area(3,\
    \ 4, 5); // 6.00\necho \"\\n\";\necho triangle_area(9, 6, 10); // 27.00\necho\
    \ \"\\n\";\necho triangle_area(1, 1, 1); // 0.43\necho \"\\n\";\necho triangle_area(1,\
    \ 1, 2); // -1\necho \"\\n\";\necho triangle_area(5, 5, 5); // 10.83\necho \"\\\
    n\";\necho triangle_area(1, 10, 5); // -1\necho \"\\n\";\necho triangle_area(5,\
    \ 10, 1); // -1\necho \"\\n\";\necho triangle_area(10, 1, 5); // -1\necho \"\\\
    n\";\necho triangle_area(5, 1, 10); // -1\necho \"\\n\";\necho triangle_area(1,\
    \ 5, 10); // -1\necho \"\\n\";\necho triangle_area(1, 1, 1); // 0.43\necho \"\\\
    n\";\necho triangle_area(1, 2, 3); // -1\necho \"\\n\";\necho triangle_area(3,\
    \ 2, 1); // -1\necho \"\\n\";\necho triangle_area(2, 3, 1); // -1\necho \"\\n\"\
    ;\necho triangle_area(2, 1, 3); // -1\necho \"\\n\";\necho triangle_area(1, 3,\
    \ 2); // -1\necho \"\\n\";\necho triangle_area(2, 2, 5); // -1\necho \"\\n\";\n\
    echo triangle_area(5, 2, 2); // -1\necho \"\\n\";\necho triangle_area(2, 5, 2);\
    \ // -1\necho \"\\n\";\necho triangle_area(2, 2, 2); // 1", "    if ($a + $b >\
    \ $c && $a + $c > $b && $b + $c > $a) {\n        $p = ($a + $b + $c) / 2;\n  \
    \      $area = sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));\n        return number_format($area,\
    \ 2);\n    }\n    return -1;\n}", "    if ($a+$b<=$c || $a+$c<=$b || $b+$c<=$a)\
    \ return -1;\n    $p = ($a+$b+$c)/2;\n    return round(sqrt($p*($p-$a)*($p-$b)*($p-$c)),\
    \ 2);\n}", "    $s = ($a + $b + $c) / 2;\n    if ($s - $a < 0 || $s - $b < 0 ||\
    \ $s - $c < 0) {\n        return -1;\n    }\n    return round(sqrt($s * ($s -\
    \ $a) * ($s - $b) * ($s - $c)), 2);\n}\n", "  $result = null;\n  $area = 0;\n\
    \  $p = 0;\n  $valid = false;\n  if ($a + $b > $c && $a + $c > $b && $b + $c >\
    \ $a) {\n    $valid = true;\n  } else {\n    $valid = false;\n  }\n  if ($valid\
    \ == true) {\n    $p = ($a + $b + $c) / 2;\n    $area = sqrt($p * ($p - $a) *\
    \ ($p - $b) * ($p - $c));\n    $result = round($area, 2);\n  } else {\n    $result\
    \ = -1;\n  }\n  return $result;\n}", "  $arr = [$a, $b, $c];\n  sort($arr);\n\
    \  if ($arr[0] + $arr[1] <= $arr[2]) {\n    return -1;\n  }\n  $s = ($a + $b +\
    \ $c) / 2;\n  return round(sqrt($s * ($s - $a) * ($s - $b) * ($s - $c)), 2);\n\
    }", "    $s = ($a + $b + $c) / 2;\n    if ($s > $a and $s > $b and $s > $c)\n\
    \        return round(sqrt($s * ($s - $a) * ($s - $b) * ($s - $c)), 2);\n    else\n\
    \        return -1;\n}\n\nprint_r(triangle_area(3, 4, 5) . PHP_EOL);\nprint_r(triangle_area(1,\
    \ 2, 10) . PHP_EOL);", "  // your code here\n}\n", "    if ($a + $b > $c && $a\
    \ + $c > $b && $b + $c > $a) {\n        $p = ($a + $b + $c) / 2;\n        $s =\
    \ sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));\n        return round($s, 2);\n\
    \    }\n    return -1;\n}\n", "  $s = ($a + $b + $c) / 2;\n  if ($s >= $a && $s\
    \ >= $b && $s >= $c) {\n    return sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n\
    \  }\n  return -1;\n}\n", "\tif ($a < 0 || $b < 0 || $c < 0) return -1;\n\t//\
    \ if the sum of any two sides is less than the third side, not a triangle\n\t\
    if (($a + $b) < $c || ($a + $c) < $b || ($b + $c) < $a) return -1;\n\t$s = ($a\
    \ + $b + $c) / 2;\n\treturn round(sqrt($s * ($s - $a) * ($s - $b) * ($s - $c)),\
    \ 2);\n}\necho \"\\n\".triangle_area(3, 4, 5).\"\\n\";\necho \"\\n\".triangle_area(1,\
    \ 2, 10).\"\\n\";\necho \"\\n\".triangle_area(1, 1, 1).\"\\n\";\necho \"\\n\"\
    .triangle_area(5, 5, 5).\"\\n\";\necho \"\\n\".triangle_area(4, 7, 3).\"\\n\";",
  "  // to find the area of triangle using Heron's formula\n  $s = ($a + $b + $c)\
    \ / 2;\n  $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n  if($area <\
    \ 0)\n    return -1;\n  else\n    return number_format($area, 2);\n}", "  $s =\
    \ ($a + $b + $c) / 2;\n  $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n\
    \  return $area > 0 ? round($area, 2) : -1;\n}", "\tif($a+$b>$c && $a+$c>$b &&\
    \ $b+$c>$a){\n\t\t$s = ($a+$b+$c)/2;\n\t\t$area = sqrt($s*($s-$a)*($s-$b)*($s-$c));\n\
    \t\treturn round($area,2);\n\t}else{\n\t\treturn -1;\n\t}\n}", "  if ($a + $b\
    \ > $c && $a + $c > $b && $b + $c > $a) {\n    $s = ($a + $b + $c) / 2;\n    return\
    \ round(sqrt($s * ($s - $a) * ($s - $b) * ($s - $c)), 2);\n  } else {\n    return\
    \ -1;\n  }\n}\necho \"Triangle area is: \" . triangle_area(1, 2, 10) . \"<br>\"\
    ;\necho \"Triangle area is: \" . triangle_area(3, 4, 5) . \"<br>\";\necho \"Triangle\
    \ area is: \" . triangle_area(10, 20, 10) . \"<br>\";\necho \"Triangle area is:\
    \ \" . triangle_area(30, 40, 50) . \"<br>\";\necho \"Triangle area is: \" . triangle_area(5,\
    \ 4, 5) . \"<br>\";", "\tif($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n\t\
    \t$s = ($a + $b + $c) / 2;\n\t\t$area = (sqrt($s * ($s - $a) * ($s - $b) * ($s\
    \ - $c)));\n\t\treturn round($area, 2);\n\t} else {\n\t\treturn -1;\n\t}\n}",
  "    $x = ($a + $b + $c) / 2;\n    $y = $x * ($x - $a) * ($x - $b) * ($x - $c);\n\
    \    if ($y <= 0) {\n        return -1;\n    } else {\n        return round(sqrt($y),\
    \ 2);\n    }\n}\n", "\tif ($a + $b <= $c || $a + $c <= $b || $b + $c <= $a) {\n\
    \t\treturn -1;\n\t} else {\n\t\t$s = ($a + $b + $c) / 2;\n\t\t$area = sqrt($s\
    \ * ($s - $a) * ($s - $b) * ($s - $c));\n\t\treturn number_format($area, 2);\n\
    \t}\n}\n", "    // Enter code here!\n    $s = ($a + $b + $c) / 2;\n    $result\
    \ = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    if ($result > 0) {\n  \
    \      return round($result, 2);\n    } else {\n        return -1;\n    }\n}",
  "  if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n    $p = ($a + $b + $c)\
    \ / 2;\n    return round(sqrt($p * ($p - $a) * ($p - $b) * ($p - $c)), 2);\n \
    \ }\n  return -1;\n}\n\necho triangle_area(3, 4, 5) . \"\\n\";\necho triangle_area(1,\
    \ 2, 10) . \"\\n\";", "\t$s = ($a + $b + $c) / 2;\n\tif($a + $b > $c && $a + $c\
    \ > $b && $b + $c > $a) {\n\t\treturn round(sqrt($s * ($s - $a) * ($s - $b) *\
    \ ($s - $c)), 2);\n\t}\n\treturn -1;\n}\n", "\t$s = ($a + $b + $c) / 2;\n\tif\
    \ ($s - $a < $a && $s - $b < $b && $s - $c < $c) {\n\t\treturn sqrt($s * ($s -\
    \ $a) * ($s - $b) * ($s - $c));\n\t}\n\treturn -1;\n}\necho triangle_area(3, 4,\
    \ 5);", "    if($a+$b>$c && $a+$c>$b && $b+$c>$a){\n      $p = ($a+$b+$c)/2;\n\
    \      $area = sqrt($p*($p-$a)*($p-$b)*($p-$c));\n      return round($area,2);\n\
    \    }\n    else{\n      return -1;\n    }\n}", "    if ($a + $b > $c && $a +\
    \ $c > $b && $b + $c > $a) {\n        return sprintf(\"%.2f\", sqrt((($a + $b\
    \ + $c) / 2) * (($a + $b + $c) / 2 - $a) * (($a + $b + $c) / 2 - $b) * (($a +\
    \ $b + $c) / 2 - $c)));\n    } else {\n        return -1;\n    }\n}\n", "    $result\
    \ = -1;\n    $sum = $a + $b + $c;\n    $result = ($sum - $a) > $a && ($sum - $b)\
    \ > $b && ($sum - $c) > $c ?\n                number_format(sqrt(($sum * ($sum\
    \ - $a) * ($sum - $b) * ($sum - $c)) / 16), 2) : -1;\n    return $result;\n}",
  "    $p = ($a + $b + $c) / 2;\n    $s = sqrt($p * ($p - $a) * ($p - $b) * ($p -\
    \ $c));\n    if ($s > 0) {\n        return round($s, 2);\n    } else {\n     \
    \   return -1;\n    }\n}", "    if ($a + $b > $c && $a + $c > $b && $b + $c >\
    \ $a) {\n        $p = ($a + $b + $c) / 2;\n        $sqrt = sqrt($p * ($p - $a)\
    \ * ($p - $b) * ($p - $c));\n        return number_format($sqrt, 2);\n    } else\
    \ {\n        return -1;\n    }\n}\n", "    // your code here\n    // find the\
    \ biggest side\n    $max = max($a, $b, $c);\n    // find the two smallest sides\n\
    \    $min1 = min($a, $b, $c);\n    $min2 = ($a != $max && $a != $min1) ? $a :\
    \ (($b != $max && $b != $min1) ? $b : $c);\n    // if the sum of the two smallest\
    \ sides is greater than the max side, we have a triangle\n    $isTriangle = ($min1\
    \ + $min2) > $max;\n    if (!$isTriangle) {\n        return -1;\n    }\n    //\
    \ find half the perimeter\n    $perimeter = ($a + $b + $c) / 2;\n    // return\
    \ the area\n    return number_format(sqrt($perimeter * ($perimeter - $a) * ($perimeter\
    \ - $b) * ($perimeter - $c)), 2);\n}", "  $check = $a + $b;\n  if($check > $c)\
    \ {\n    $s = ($a + $b + $c) / 2;\n    $area = sqrt($s * ($s - $a) * ($s - $b)\
    \ * ($s - $c));\n    return number_format($area, 2);\n  } else {\n    return -1;\n\
    \  }\n}", "    // TODO: Add your code here!\n}\n", "\t\n\tif(($a + $b) > $c &&\
    \ ($a + $c) > $b && ($b + $c) > $a) {\n\t\t$s = ($a + $b + $c) / 2;\n\t\t$area\
    \ = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n\t\treturn number_format($area,\
    \ 2);\n\t} else {\n\t\treturn -1;\n\t}\n}\n\necho triangle_area(3, 4, 5) . \"\
    <br>\";\necho triangle_area(1, 2, 10) . \"<br>\";\necho triangle_area(1, 2, 6)\
    \ . \"<br>\";\necho triangle_area(2, 3, 4) . \"<br>\";", "  $s = ($a + $b + $c)\
    \ / 2;\n  if($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n    return sprintf(\"\
    %.2f\", sqrt($s * ($s - $a) * ($s - $b) * ($s - $c)));\n  } else {\n    return\
    \ -1;\n  }\n}\n", "    if (($a < $b + $c) && ($b < $a + $c) && ($c < $a + $b))\
    \ {\n        $p = ($a + $b + $c) / 2;\n        $S = sqrt($p * ($p - $a) * ($p\
    \ - $b) * ($p - $c));\n        return round($S, 2);\n    } else {\n        return\
    \ -1;\n    }\n}\n", "  $s = ($a + $b + $c) / 2;\n  $area = sqrt($s * ($s - $a)\
    \ * ($s - $b) * ($s - $c));\n  if ($area > 0) {\n    return number_format($area,\
    \ 2);\n  } else {\n    return -1;\n  }\n}\necho triangle_area(3, 4, 5);", "  \
    \  if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n        $p = ($a + $b\
    \ + $c) / 2;\n        $area = sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));\n\
    \        return number_format($area, 2);\n    } else {\n        return -1;\n \
    \   }\n}", "    $s = ($a + $b + $c) / 2;\n    $area = sqrt($s * ($s - $a) * ($s\
    \ - $b) * ($s - $c));\n    return $area < 0 ? -1 : round($area, 2);\n}", "   \
    \ $s = ($a + $b + $c) / 2;\n    $area = sqrt($s * ($s - $a) * ($s - $b) * ($s\
    \ - $c));\n    return $area > 0 ? round($area, 2) : -1;\n}\n\necho triangle_area(1,\
    \ 2, 10);", "    if ($a <= 0 || $b <= 0 || $c <= 0) return -1;\n    if (($a +\
    \ $b <= $c) || ($a + $c <= $b) || ($b + $c <= $a)) return -1;\n    $s = ($a +\
    \ $b + $c) / 2;\n    return round(sqrt($s * ($s - $a) * ($s - $b) * ($s - $c)),\
    \ 2);\n}\n\necho \"3, 4, 5 should return 6: \" . triangle_area(3, 4, 5) . \"\\\
    n\";\necho \"1, 2, 10 should return -1: \" . triangle_area(1, 2, 10) . \"\\n\"\
    ;\necho \"0, 0, 0 should return -1: \" . triangle_area(0, 0, 0) . \"\\n\";\necho\
    \ \"5, 5, 5 should return 10.83: \" . triangle_area(5, 5, 5) . \"\\n\";\necho\
    \ \"20, 30, 40 should return 200: \" . triangle_area(20, 30, 40) . \"\\n\";\n\
    echo \"7, 8, 9 should return 26.83: \" . triangle_area(7, 8, 9) . \"\\n\";\necho\
    \ \"2, 4, 10 should return -1: \" . triangle_area(2, 4, 10) . \"\\n\";\necho \"\
    4, 8, 12 should return 18.43: \" . triangle_area(4, 8, 12) . \"\\n\";\necho \"\
    1, 1, 1 should return 0.43: \" . triangle_area(1, 1, 1) . \"\\n\";\necho \"1,\
    \ 2, 3 should return -1: \" . triangle_area(1, 2, 3) . \"\\n\";\necho \"15, 20,\
    \ 35 should return -1: \" . triangle_area(15, 20, 35) . \"\\n\";\necho \"1, 2,\
    \ 2 should return 0.83: \" . triangle_area(1, 2, 2) . \"\\n\";\necho \"1, 2, 10\
    \ should return -1: \" . triangle_area(1, 2, 10) . \"\\n\";\necho \"40, 30, 50\
    \ should return 600: \" . triangle_area(40, 30", "    $p = ($a + $b + $c) / 2;\n\
    \    $s = sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));\n    if ($s > 0) {\n \
    \       return round($s, 2);\n    } else {\n        return -1;\n    }\n}\necho\
    \ triangle_area(3, 4, 5) . PHP_EOL;\necho triangle_area(1, 2, 10) . PHP_EOL;",
  "  // your code\n  if($a + $b > $c && $a + $c > $b && $b + $c > $a){\n    $p = ($a\
    \ + $b + $c) / 2;\n    $s = sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));\n  \
    \  return round($s, 2);\n  } else {\n    return -1;\n  }\n}", "    if ($a+$b>$c\
    \ && $a+$c>$b && $b+$c>$a) {\n        $s = ($a+$b+$c)/2;\n        $area = sqrt($s*($s-$a)*($s-$b)*($s-$c));\n\
    \        return round($area, 2);\n    } else {\n        return -1;\n    }\n}\n\
    \necho triangle_area(3, 4, 5) . \"\\n\";\necho triangle_area(1, 2, 10) . \"\\\
    n\";", "    $p = ($a + $b + $c) / 2;\n    if ($p - $a && $p - $b && $p - $c) {\n\
    \        return round(sqrt($p * ($p - $a) * ($p - $b) * ($p - $c)), 2);\n    }\n\
    \    return -1;\n}", "    // Your code here\n}", "    $s = ($a + $b + $c) / 2;\n\
    \    $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    if ($area > 0)\
    \ {\n        return number_format($area, 2);\n    } else {\n        return -1;\n\
    \    }\n}\n", "  if ($a + $b <= $c || $a + $c <= $b || $b + $c <= $a) return -1;\n\
    \  $p = ($a + $b + $c) / 2;\n  return round(sqrt($p * ($p - $a) * ($p - $b) *\
    \ ($p - $c)), 2);\n}\n\necho triangle_area(2, 3, 4) . \"\\n\";\necho triangle_area(1,\
    \ 2, 10) . \"\\n\";\necho triangle_area(8, 5, 7) . \"\\n\";\necho triangle_area(5,\
    \ 5, 5) . \"\\n\";\necho triangle_area(5, 5, 3) . \"\\n\";\necho triangle_area(2,\
    \ 5, 4) . \"\\n\";\necho triangle_area(3, 4, 5) . \"\\n\";\necho triangle_area(7,\
    \ 12, 8) . \"\\n\";\necho triangle_area(4, 3, 5) . \"\\n\";\necho triangle_area(2,\
    \ 4, 5) . \"\\n\";\necho triangle_area(3, 4, 5) . \"\\n\";\necho triangle_area(7,\
    \ 8, 9) . \"\\n\";\necho triangle_area(7, 8, 1) . \"\\n\";\necho triangle_area(7,\
    \ 8, -1) . \"\\n\";\necho triangle_area(7, -8, 1) . \"\\n\";\necho triangle_area(-7,\
    \ 8, 1) . \"\\n\";\necho triangle_area(3, 4, 7) . \"\\n\";\necho triangle_area(3,\
    \ 4, 7) . \"\\n\";\necho triangle_area(3, 4, 7) . \"\\n\";\necho triangle_area(3,\
    \ 4, 7) . \"\\n\";\necho triangle_area(3, 4, 7) . \"\\n\";\necho triangle_area(4,\
    \ 3, 7) . \"\\n\";\necho triangle_area(7, 3, 4) . \"\\n\";\necho triangle_area(3,\
    \ 4, 7) . \"\\n\";\necho triangle_area(3, 4, 7) . \"\\n\";\necho triangle_area(3,\
    \ 4, 7) . \"\\n\";\necho triangle_area(1,", "  if (($a + $b) > $c && ($a + $c)\
    \ > $b && ($b + $c) > $a) {\n    $p = ($a + $b + $c) / 2;\n    $s = sqrt($p *\
    \ ($p - $a) * ($p - $b) * ($p - $c));\n    return round($s, 2);\n  }\n  return\
    \ -1;\n}\n\necho triangle_area(3, 4, 5) . \"\\n\"; // 6.00\necho triangle_area(1,\
    \ 2, 10) . \"\\n\"; // -1\necho triangle_area(2, 3, 4) . \"\\n\"; // 2.90\necho\
    \ triangle_area(1, 1, 5) . \"\\n\"; // -1\necho triangle_area(5, 1, 1) . \"\\\
    n\"; // -1\necho triangle_area(3, 3, 3) . \"\\n\"; // 3.89\necho triangle_area(4,\
    \ 2, 3) . \"\\n\"; // 2.90\necho triangle_area(4, 2, 8) . \"\\n\"; // -1\necho\
    \ triangle_area(2, 3, 4) . \"\\n\"; // 2.90\necho triangle_area(1, 2, 2) . \"\\\
    n\"; // -1\necho triangle_area(2, 3, 4) . \"\\n\"; // 2.90\necho triangle_area(5,\
    \ 1, 1) . \"\\n\"; // -1\necho triangle_area(3, 3, 3) . \"\\n\"; // 3.89\necho\
    \ triangle_area(4, 2, 3) . \"\\n\"; // 2.90\necho triangle_area(3, 3, 3) . \"\\\
    n\"; // 3.89\necho triangle_area(4, 2, 3) . \"\\n\"; // 2.90\necho triangle_area(1,\
    \ 2, 2) . \"\\n\"; // -1\necho triangle_area(2, 3, 4) . \"\\n\"; // 2.90\necho\
    \ triangle_area(5, 1, 1) . \"\\n\"; // -1\necho triangle_area(3, 3, 3) . \"\\\
    n\"; // 3.89\necho triangle_area(4, 2, 3) . \"\\n\"; //", "    $s = ($a + $b +\
    \ $c) / 2;\n    $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    return\
    \ round($area, 2);\n}\n", "  if(($a < $b + $c) && ($b < $a + $c) && ($c < $a +\
    \ $b)) {\n    $p = ($a + $b + $c) / 2;\n    $area = sqrt($p * ($p - $a) * ($p\
    \ - $b) * ($p - $c));\n    return number_format($area, 2);\n  } else {\n    return\
    \ -1;\n  }\n}\n", "  $s = ($a + $b + $c) / 2;\n  if ($s - $a < $a || $s - $b <\
    \ $b || $s - $c < $c) {\n    return -1;\n  } else {\n    return round(sqrt($s\
    \ * ($s - $a) * ($s - $b) * ($s - $c)), 2);\n  }\n}\necho triangle_area(3, 4,\
    \ 5) . \"\\n\"; // 6.00\necho triangle_area(1, 2, 10) . \"\\n\"; // -1\n", " \
    \ if($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n    $s = ($a + $b + $c)\
    \ / 2;\n    return round(sqrt($s * ($s - $a) * ($s - $b) * ($s - $c)), 2);\n \
    \ }\n  return -1;\n}", "    $s = ($a + $b + $c) / 2;\n    if (($a + $b > $c) &&\
    \ ($a + $c > $b) && ($b + $c > $a)) {\n        return round(sqrt($s * ($s - $a)\
    \ * ($s - $b) * ($s - $c)), 2);\n    } else {\n        return -1;\n    }\n}",
  "  $s = ($a + $b + $c) / 2;\n  if ($s > $a && $s > $b && $s > $c) {\n    return\
    \ round(sqrt($s * ($s - $a) * ($s - $b) * ($s - $c)), 2);\n  }\n  return -1;\n\
    }\n", "  // TODO implement this function\n  if ($a + $b > $c && $a + $c > $b &&\
    \ $b + $c > $a) {\n    $s = ($a + $b + $c) / 2;\n    $area = sqrt($s * ($s - $a)\
    \ * ($s - $b) * ($s - $c));\n    return round($area, 2);\n  } else {\n    return\
    \ -1;\n  }\n}\n", "    // Your code here\n    $p = ($a + $b + $c) / 2;\n    $s\
    \ = sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));\n    if($s == 0) return -1;\n\
    \    return round($s, 2);\n}", "  // Write your code here\n}", "\t$s = ($a + $b\
    \ + $c) / 2;\n\tif ($s - $a > 0 && $s - $b > 0 && $s - $c > 0) {\n\t\treturn number_format(sqrt($s\
    \ * ($s - $a) * ($s - $b) * ($s - $c)), 2);\n\t}\n\treturn -1;\n}\n\n$tests =\
    \ [\n\t[3, 4, 5, 6.00],\n\t[1, 2, 10, -1],\n\t[1, 1, 1, 0.43],\n\t[0, 1, 1, -1],\n\
    \t[10, 10, 10, 43.30],\n\t[5, 5, 5, 10.83],\n\t[2, 3, 4, 2.90],\n\t[5, 12, 13,\
    \ 30.00],\n\t[8, 15, 17, 30.60],\n\t[7, 24, 25, 84.82],\n\t[3, 4, 5, 6.00],\n\t\
    [3, 4, 5, 6.00],\n\t[3, 4, 5, 6.00],\n\t[3, 4, 5, 6.00],\n\t[3, 4, 5, 6.00],\n\
    \t[3, 4, 5, 6.00],\n\t[3, 4, 5, 6.00],\n\t[3, 4, 5, 6.00],\n\t[3, 4, 5, 6.00],\n\
    \t[3, 4, 5, 6.00],\n\t[3, 4, 5, 6.00],\n\t[3, 4, 5, 6.00],\n\t[3, 4, 5, 6.00],\n\
    \t[3, 4, 5, 6.00],\n\t[3, 4, 5, 6.00],\n\t[3, 4, 5, 6.00],\n\t[3, 4, 5, 6.00],\n\
    \t[3, 4, 5, 6.00],\n\t[3, 4, 5, 6.00],\n\t[3, 4, 5, 6.00],\n\t[3, 4, 5, 6.00],\n\
    \t[3, 4, 5, 6.00],\n", "    if($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n\
    \        $s = ($a + $b + $c) / 2;\n        return round(sqrt($s * ($s - $a) *\
    \ ($s - $b) * ($s - $c)), 2);\n    } else {\n        return -1;\n    }\n}\n\n\
    echo \"triangle_area(1, 2, 10) is: \" . triangle_area(1, 2, 10) . PHP_EOL;\necho\
    \ \"triangle_area(3, 4, 5) is: \" . triangle_area(3, 4, 5) . PHP_EOL;", "    $sides\
    \ = array($a, $b, $c);\n    sort($sides);\n    $sum = $sides[0] + $sides[1];\n\
    \    if ($sum > $sides[2]) {\n        $p = ($a + $b + $c) / 2;\n        return\
    \ round(sqrt($p * ($p - $a) * ($p - $b) * ($p - $c)), 2);\n    }\n    return -1;\n\
    }\n\necho(triangle_area(3, 4, 5) . \"\\n\");\necho(triangle_area(1, 2, 10) . \"\
    \\n\");\necho(triangle_area(5, 4, 3) . \"\\n\");\necho(triangle_area(2, 3, 4)\
    \ . \"\\n\");", "  $sides = [$a, $b, $c];\n  sort($sides);\n  $a = $sides[0];\n\
    \  $b = $sides[1];\n  $c = $sides[2];\n  if (($a + $b) > $c) {\n    $s = ($a +\
    \ $b + $c) / 2;\n    $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n \
    \   return number_format($area, 2);\n  }\n  return -1;\n}\necho(triangle_area(3,\
    \ 4, 5) . \"\\n\");\necho(triangle_area(1, 2, 10) . \"\\n\");\necho(triangle_area(4,\
    \ 3, 5) . \"\\n\");\necho(triangle_area(10, 2, 1) . \"\\n\");\necho(triangle_area(1,\
    \ 1, 1) . \"\\n\");", "    if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n\
    \        $p = ($a + $b + $c) / 2;\n        $area = sqrt($p * ($p - $a) * ($p -\
    \ $b) * ($p - $c));\n        return sprintf(\"%.2f\", $area);\n    } else {\n\
    \        return -1;\n    }\n}\necho \"\\n triangle_area(3, 4, 5) = \" . triangle_area(3,\
    \ 4, 5);\necho \"\\n triangle_area(1, 2, 10) = \" . triangle_area(1, 2, 10);\n\
    echo \"\\n\";\n", "  $valid = false;\n  if ($a + $b > $c) {\n    $valid = true;\n\
    \  } else if ($a + $c > $b) {\n    $valid = true;\n  } else if ($b + $c > $a)\
    \ {\n    $valid = true;\n  }\n  if ($valid) {\n    $s = ($a + $b + $c) / 2;\n\
    \    $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    return sprintf(\"\
    %.2f\", $area);\n  } else {\n    return -1;\n  }\n}\necho triangle_area(2, 3,\
    \ 4) . \"\\n\";\necho triangle_area(3, 4, 5) . \"\\n\";\necho triangle_area(1,\
    \ 2, 10) . \"\\n\";", "  if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n\
    \    return round(sqrt(pow($a, 2) * pow($b, 2) - pow($a, 2) * pow($c, 2) - pow($b,\
    \ 2) * pow($c, 2)) / 4, 2);\n  }\n  return -1;\n}\n", "    $sum = $a + $b + $c;\n\
    \    if ($sum != 180) {\n        return -1;\n    }\n    $s = ($a + $b + $c) /\
    \ 2;\n    $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    return $area;\n\
    }", "  // I used Heron's formula, which is valid for any triangle.\n  // https://en.wikipedia.org/wiki/Heron%27s_formula\n\
    \  // See if sides are valid. Note that if we know all are positive,\n  // we\
    \ can just check one, since they are not all negative.\n  if ($a <= 0 || $b <=\
    \ 0 || $c <= 0) {\n    return -1;\n  }\n  // Sides are valid. Check the angles.\n\
    \  if ($a + $b <= $c || $a + $c <= $b || $b + $c <= $a) {\n    return -1;\n  }\n\
    \  // Sides are valid and angles are valid. Calculate area.\n  $s = ($a + $b +\
    \ $c) / 2;\n  return round(sqrt($s * ($s - $a) * ($s - $b) * ($s - $c)), 2);\n\
    }\n\necho \"\\n triangle_area(3, 4, 5) \" . (triangle_area(3, 4, 5) == 6.00 ?\
    \ 'PASS' : 'FAIL');\necho \"\\n triangle_area(1, 2, 10) \" . (triangle_area(1,\
    \ 2, 10) == -1 ? 'PASS' : 'FAIL');\necho \"\\n triangle_area(5, 6, 7) \" . (triangle_area(5,\
    \ 6, 7) == 14.70 ? 'PASS' : 'FAIL');\necho \"\\n triangle_area(1, 1, 1) \" . (triangle_area(1,\
    \ 1, 1) == 0.43 ? 'PASS' : 'FAIL');\necho \"\\n triangle_area(0, 0, 0) \" . (triangle_area(0,\
    \ 0, 0) == -1 ? 'PASS' : 'FAIL');\necho \"\\n triangle_area(0, 1, 0) \" . (triangle_area(0,\
    \ 1, 0) == -1 ? 'PASS' : 'FAIL');\necho \"\\n triangle_area(1, 0, 0) \" . (triangle_area(1,\
    \ 0, 0) == -1 ? 'PASS' : 'FAIL');\necho \"\\n triangle_area(0", "    if ($a +\
    \ $b <= $c || $a + $c <= $b || $b + $c <= $a) {\n        return -1;\n    }\n \
    \   $p = ($a + $b + $c) / 2;\n    return number_format(sqrt($p * ($p - $a) * ($p\
    \ - $b) * ($p - $c)), 2);\n}\n", "\t$s = ($a + $b + $c) / 2;\n\tif ($s < $a ||\
    \ $s < $b || $s < $c) {\n\t\treturn -1;\n\t}\n\t$area = sqrt($s * ($s - $a) *\
    \ ($s - $b) * ($s - $c));\n\treturn round($area, 2);\n}", "    $s = ($a + $b +\
    \ $c) / 2;\n    if ($s < $a || $s < $b || $s < $c) {\n        return -1;\n   \
    \ }\n    return round(sqrt($s * ($s - $a) * ($s - $b) * ($s - $c)), 2);\n}\n",
  "  $s = ($a + $b + $c) / 2;\n  if($a + $b <= $c || $a + $c <= $b || $b + $c <= $a)\
    \ return -1;\n  return number_format(sqrt($s * ($s - $a) * ($s - $b) * ($s - $c)),\
    \ 2);\n}\necho triangle_area(3, 4, 5);\necho \"\\n\";\necho triangle_area(1, 2,\
    \ 10);\necho \"\\n\";\necho triangle_area(3, 2, 10);\necho \"\\n\";\necho triangle_area(3,\
    \ 2, 10.4);\necho \"\\n\";\necho triangle_area(3, 2, 10.5);\necho \"\\n\";\necho\
    \ triangle_area(2, 3, 4);\necho \"\\n\";", "  $shortestSide = getShortestSide($a,\
    \ $b, $c);\n  $otherTwoSides = $a + $b + $c - $shortestSide;\n  if (isTriangle($shortestSide,\
    \ $otherTwoSides)) {\n    return number_format(sqrt($otherTwoSides * ($otherTwoSides\
    \ - $a) * ($otherTwoSides - $b) * ($otherTwoSides - $c)) / 4, 2);\n  } else {\n\
    \    return -1;\n  }\n}\n", "  if($a+$b>$c and $a+$c>$b and $b+$c>$a){\n    $s\
    \ = ($a+$b+$c)/2;\n    $area = sqrt($s*($s-$a)*($s-$b)*($s-$c));\n    return number_format($area,\
    \ 2);\n  }\n  else {\n    return -1;\n  }\n}\necho triangle_area(1, 2, 10);",
  "    $s = ($a + $b + $c) / 2;\n    $area = ($s * ($s - $a) * ($s - $b) * ($s - $c));\n\
    \    if ($area <= 0) return -1;\n    return number_format(sqrt($area), 2);\n}",
  "    $smaller = 0;\n    $middle = 0;\n    $largest = 0;\n    if ($a > $b && $a >\
    \ $c) {\n        $largest = $a;\n        if ($b > $c) {\n            $middle =\
    \ $b;\n            $smaller = $c;\n        } else {\n            $middle = $c;\n\
    \            $smaller = $b;\n        }\n    } else if ($b > $a && $b > $c) {\n\
    \        $largest = $b;\n        if ($a > $c) {\n            $middle = $a;\n \
    \           $smaller = $c;\n        } else {\n            $middle = $c;\n    \
    \        $smaller = $a;\n        }\n    } else if ($c > $a && $c > $b) {\n   \
    \     $largest = $c;\n        if ($a > $b) {\n            $middle = $a;\n    \
    \        $smaller = $b;\n        } else {\n            $middle = $b;\n       \
    \     $smaller = $a;\n        }\n    }\n    if (($smaller + $middle) > $largest)\
    \ {\n        $p = ($smaller + $middle + $largest) / 2;\n        $area = sqrt($p\
    \ * ($p - $smaller) * ($p - $middle) * ($p - $largest));\n        return round($area,\
    \ 2);\n    } else {\n        return -1;\n    }\n}\n\necho triangle_area(3, 4,\
    \ 5) . \"\\n\"; //6.00\necho triangle_area(1, 2, 10) . \"\\n\"; //-1\necho triangle_area(10,\
    \ 2, 1) . \"\\n\"; //-1\necho triangle_area(1, 10, 2) . \"\\n\"; //-1\necho triangle_area(10,\
    \ 1, 2) . \"\\n\"; //-1\necho triangle_area(2, 1, 10) . \"\\n\"; //-1\necho triangle_area(2,\
    \ 10, 1) . \"\\n\"; //-1\necho triangle_area(5, 3, 4) . \"\\n\"; //6.00\necho\
    \ triangle_area(3, 4,", "  $s = ($a + $b + $c) / 2;\n  if ($s - $a <= 0 || $s\
    \ - $b <= 0 || $s - $c <= 0) return -1;\n  return sqrt($s * ($s - $a) * ($s -\
    \ $b) * ($s - $c));\n}\n\necho '<h3>Triangle Area</h3>';\necho 'Should return\
    \ 6.00: ' . triangle_area(3, 4, 5) . '<br>';\necho 'Should return -1: ' . triangle_area(1,\
    \ 2, 10) . '<br>';\necho 'Should return -1: ' . triangle_area(12, 12, 12) . '<br>';\n\
    echo 'Should return -1: ' . triangle_area(1, 2, 3) . '<br>';\necho 'Should return\
    \ -1: ' . triangle_area(5, 3, 3) . '<br>';\necho 'Should return -1: ' . triangle_area(5,\
    \ 5, 8) . '<br>';\necho 'Should return 19.80: ' . triangle_area(7, 8, 9) . '<br>';\n\
    echo 'Should return -1: ' . triangle_area(7, 8, 10) . '<br>';\necho 'Should return\
    \ 20.71: ' . triangle_area(2, 3, 6) . '<br>';\necho 'Should return -1: ' . triangle_area(1,\
    \ 1, 1) . '<br>';\necho 'Should return -1: ' . triangle_area(10, 15, 20) . '<br>';\n\
    echo 'Should return -1: ' . triangle_area(12, 12, 12) . '<br>';\necho 'Should\
    \ return -1: ' . triangle_area(1, 2, 3) . '<br>';\necho 'Should return -1: ' .\
    \ triangle_area(7, 8, 20) . '<br>';\necho 'Should return 1.73: ' . triangle_area(5,\
    \ 4, 3) . '<br>';\necho 'Should return -1: ' . triangle_area(5, 4, 8) . '<br",
  "\tif($a+$b>$c && $a+$c>$b && $b+$c>$a){\n\t\t$p = ($a+$b+$c)/2;\n\t\t$area = sqrt($p*($p-$a)*($p-$b)*($p-$c));\n\
    \t\treturn round($area,2);\n\t}\n\treturn -1;\n}\necho triangle_area(1, 2, 3);\n\
    echo '<br>';\necho triangle_area(5, 7, 6);\necho '<br>';\necho triangle_area(1,\
    \ 2, 10);\necho '<br>';\necho triangle_area(1, 2, 1);\necho '<br>';\necho triangle_area(1,\
    \ 2, 3);\necho '<br>';\necho triangle_area(5, 7, 6);\necho '<br>';\necho triangle_area(1,\
    \ 2, 10);\necho '<br>';\necho triangle_area(1, 2, 1);", "    if($a + $b > $c &&\
    \ $a + $c > $b && $b + $c > $a) {\n        return round(sqrt(($a + $b + $c) *\
    \ ($a + $b - $c) * ($a - $b + $c) * (-$a + $b + $c)) / 4, 2);\n    } else {\n\
    \        return -1;\n    }\n}", "    $s = ($a + $b + $c) / 2;\n    $area = sqrt($s\
    \ * ($s - $a) * ($s - $b) * ($s - $c));\n    if ($area > 0) {\n        return\
    \ round($area, 2);\n    } else {\n        return -1;\n    }\n}\necho '<pre>';\n\
    echo triangle_area(3, 4, 5) . PHP_EOL;\necho triangle_area(1, 2, 10) . PHP_EOL;\n\
    echo '</pre>';", "\t$s = ($a + $b + $c) / 2;\n\treturn $s > $a && $s > $b && $s\
    \ > $c ? round(sqrt($s * ($s - $a) * ($s - $b) * ($s - $c)), 2) : -1;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
