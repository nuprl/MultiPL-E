name: HumanEval_105_by_length
language: php
results:
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    foreach ($arr as $key => $value) {\n        $key_length[$key] = strlen($value);\n\
    \    }\n    array_multisort($key_length, SORT_DESC, $arr);\n    return $arr;\n\
    }\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbga_nxto.php:30\n\
    Stack trace:\n#0 /tmp/tmpbga_nxto.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpbga_nxto.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (empty($arr)) {\n        return $arr;\n    }\n    $arr = array_values(array_filter($arr,\
    \ function($num) {\n        return $num > 0 && $num < 10;\n    }));\n    sort($arr);\n\
    \    $arr = array_reverse($arr);\n    return array_map(function($num) {\n    \
    \    switch ($num) {\n            case 1:\n                return 'One';\n   \
    \         case 2:\n                return 'Two';\n            case 3:\n      \
    \          return 'Three';\n            case 4:\n                return 'Four';\n\
    \            case 5:\n                return 'Five';\n            case 6:\n  \
    \              return 'Six';\n            case 7:\n                return 'Seven';\n\
    \            case 8:\n                return 'Eight';\n            case 9:\n \
    \               return 'Nine';\n        }\n    }, $arr);\n}\n\n$arr = [2, 1, 1,\
    \ 4, 5, 8, 2, 3];\necho 'Input: ' . json_encode($arr) . PHP_EOL;\necho 'Output:\
    \ ' . json_encode(by_length($arr)) . PHP_EOL;\n\n$arr = [];\necho 'Input: ' .\
    \ json_encode($arr) . PHP_EOL;\necho 'Output: ' . json_encode(by_length($arr))\
    \ . PHP_EOL;\n\n$arr = [1, -1 , 55];\necho 'Input: ' . json_encode($arr) . PHP_EOL;\n\
    echo 'Output: ' . json_encode(by_length($arr)) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "Input: [2,1,1,4,5,8,2,3]\nOutput: [\"Eight\",\"Five\",\"Four\",\"Three\"\
    ,\"Two\",\"Two\",\"One\",\"One\"]\nInput: []\nOutput: []\nInput: [1,-1,55]\nOutput:\
    \ [\"One\"]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    return strlen($arr);\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strlen() expects parameter 1 to be string, array given in /tmp/tmp2apqmwba.php\
    \ on line 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2apqmwba.php:27\n\
    Stack trace:\n#0 /tmp/tmp2apqmwba.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp2apqmwba.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $temp = [];\n    foreach ($arr as $value) {\n        $temp[] = strlen($value);\n\
    \    }\n    return $temp;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptqu5b3rn.php:31\n\
    Stack trace:\n#0 /tmp/tmptqu5b3rn.php(38): test()\n#1 {main}\n  thrown in /tmp/tmptqu5b3rn.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$t = $arr;\n\tsort($t);\n\t$new_arr = [];\n\tforeach ($t as $value) {\n\
    \t\tif ($value > 0 && $value < 10) {\n\t\t\tarray_push($new_arr, $value);\n\t\t\
    }\n\t}\n\treturn $new_arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp521u2945.php:34\n\
    Stack trace:\n#0 /tmp/tmp521u2945.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp521u2945.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $n = count($arr);\n  for ($i = 0; $i < $n - 1; $i++) {\n    for ($j = $i\
    \ + 1; $j < $n; $j++) {\n      if (strlen($arr[$i]) > strlen($arr[$j])) {\n  \
    \      $tmp = $arr[$i];\n        $arr[$i] = $arr[$j];\n        $arr[$j] = $tmp;\n\
    \      }\n    }\n  }\n  return $arr;\n}\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp05ugg7a.php:36\n\
    Stack trace:\n#0 /tmp/tmpp05ugg7a.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpp05ugg7a.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\tfor ($i = 0; $i < count($arr); $i++) {\n\t\tfor ($j = 0; $j < count($arr);\
    \ $j++) {\n\t\t\tif ($arr[$i] < $arr[$j]) {\n\t\t\t\t$arr_tmp = $arr[$i];\n\t\t\
    \t\t$arr[$i] = $arr[$j];\n\t\t\t\t$arr[$j] = $arr_tmp;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqbwcjpqu.php:35\n\
    Stack trace:\n#0 /tmp/tmpqbwcjpqu.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpqbwcjpqu.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $words = array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\");\n    $res = array();\n    $arr = sort($arr);\n\
    \    $arr = array_reverse($arr);\n    for ($i = 0; $i < count($arr); $i++) {\n\
    \        $index = array_search($arr[$i], $words);\n        if ($index !== FALSE)\
    \ {\n            $res[] = $words[$index];\n        }\n    }\n    return $res;\n\
    }\necho \"<pre>\";\nprint_r(by_length([1, -1 , 55]));\nprint_r(by_length([]));\n\
    print_r(by_length([8, 5, 4, 3, 2, 2, 1, 1]));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "<pre>\nWarning: array_reverse() expects parameter 1 to be array, bool given\
    \ in /tmp/tmp1dn0duuj.php on line 22\n\nWarning: count(): Parameter must be an\
    \ array or an object that implements Countable in /tmp/tmp1dn0duuj.php on line\
    \ 23\nArray\n(\n)\n\nWarning: array_reverse() expects parameter 1 to be array,\
    \ bool given in /tmp/tmp1dn0duuj.php on line 22\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmp1dn0duuj.php\
    \ on line 23\nArray\n(\n)\n\nWarning: array_reverse() expects parameter 1 to be\
    \ array, bool given in /tmp/tmp1dn0duuj.php on line 22\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmp1dn0duuj.php\
    \ on line 23\nArray\n(\n)\n</pre>\nWarning: array_reverse() expects parameter\
    \ 1 to be array, bool given in /tmp/tmp1dn0duuj.php on line 22\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmp1dn0duuj.php\
    \ on line 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1dn0duuj.php:41\n\
    Stack trace:\n#0 /tmp/tmp1dn0duuj.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp1dn0duuj.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $convert_arr = array(\n        1 => 'One',\n        2 => 'Two',\n   \
    \     3 => 'Three',\n        4 => 'Four',\n        5 => 'Five',\n        6 =>\
    \ 'Six',\n        7 => 'Seven',\n        8 => 'Eight',\n        9 => 'Nine'\n\
    \    );\n    $new_arr = array();\n    foreach ($arr as $item) {\n        if ($item\
    \ > 0 && $item < 10) {\n            $new_arr[] = $item;\n        }\n    }\n  \
    \  if (empty($new_arr)) {\n        return array();\n    }\n    sort($new_arr);\n\
    \    $res_arr = array();\n    foreach ($new_arr as $item) {\n        $res_arr[]\
    \ = $convert_arr[$item];\n    }\n    return $res_arr;\n}\necho '<pre>';\nprint_r(by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3]));\nprint_r(by_length([]));\nprint_r(by_length([1, -1 ,\
    \ 55]));\necho '</pre>';\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => One\n    [1] => One\n    [2] => Two\n    [3]\
    \ => Two\n    [4] => Three\n    [5] => Four\n    [6] => Five\n    [7] => Eight\n\
    )\nArray\n(\n)\nArray\n(\n    [0] => One\n)\n</pre>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp5gzxj5m0.php:56\nStack trace:\n#0 /tmp/tmp5gzxj5m0.php(63):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5gzxj5m0.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $numbers = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"];\n  $final_array = [];\n  for ($i = 0; $i <\
    \ count($arr); $i++) {\n    if ($arr[$i] > 0 && $arr[$i] < 10) {\n      array_push($final_array,\
    \ $numbers[$arr[$i]]);\n    }\n  }\n  return $final_array;\n}\n\n$input = [2,\
    \ 1, 1, 4, 5, 8, 2, 3];\n$arr = by_length($input);\n$arr = array_reverse($arr);\n\
    print_r($arr);\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Three\n    [1] => Two\n    [2] => Eight\n    [3] =>\
    \ Five\n    [4] => Four\n    [5] => One\n    [6] => One\n    [7] => Two\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpqceo3hgq.php:39\nStack\
    \ trace:\n#0 /tmp/tmpqceo3hgq.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpqceo3hgq.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $str = implode($arr);\n  if(strlen($str) === 1){\n    return $arr;\n  }\n\
    \  $arr_nums = [];\n  for($i = 0; $i < strlen($str); $i++){\n    $arr_nums[] =\
    \ $str[$i];\n  }\n  sort($arr_nums);\n  return $arr_nums;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps9a0zyqx.php:36\n\
    Stack trace:\n#0 /tmp/tmps9a0zyqx.php(43): test()\n#1 {main}\n  thrown in /tmp/tmps9a0zyqx.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\tusort($arr, function($a, $b) {\n\t\treturn strlen($b) - strlen($a);\n\t\
    });\n\treturn $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplfe2ay7o.php:30\n\
    Stack trace:\n#0 /tmp/tmplfe2ay7o.php(37): test()\n#1 {main}\n  thrown in /tmp/tmplfe2ay7o.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = 0;\n    foreach ($arr as $str) {\n        $str_len = strlen($str);\n\
    \        if ($str_len > $len) {\n            $len = $str_len;\n        }\n   \
    \ }\n    $str_array = [];\n    for ($i = 0; $i < $len; $i++) {\n        $str_array[$i]\
    \ = [];\n    }\n    foreach ($arr as $str) {\n        $index = strlen($str) -\
    \ 1;\n        $str_array[$index][] = $str;\n    }\n    return $str_array;\n}\n\
    \nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi_toqnbt.php:42\n\
    Stack trace:\n#0 /tmp/tmpi_toqnbt.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpi_toqnbt.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $result = [];\n    $result_1 = array_flip($arr);\n    $result_2 = array_flip($result_1);\n\
    \    $result_3 = array_merge($result_2);\n    for ($i = 0; $i < count($result_3);\
    \ $i++) {\n        $result[$i] = strlen($result_3[$i]);\n    }\n    array_multisort($result,\
    \ SORT_DESC, $result_3);\n    return $result_3;\n}\n$arr = [2, 1, 1, 4, 5, 8,\
    \ 2, 3];\nprint_r(by_length($arr));\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4]\
    \ => 5\n    [5] => 8\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe4khv67l.php:37\n\
    Stack trace:\n#0 /tmp/tmpe4khv67l.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpe4khv67l.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $return = [];\n    foreach ($arr as $k => $v) {\n        $return[strlen($v)][]\
    \ = $v;\n    }\n    ksort($return);\n    return $return;\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpowdnsoxy.php:31\n\
    Stack trace:\n#0 /tmp/tmpowdnsoxy.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpowdnsoxy.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  return strlen($arr);\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: strlen() expects parameter 1 to be string, array given in /tmp/tmps_q0tu8h.php\
    \ on line 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps_q0tu8h.php:26\n\
    Stack trace:\n#0 /tmp/tmps_q0tu8h.php(33): test()\n#1 {main}\n  thrown in /tmp/tmps_q0tu8h.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$sorted_array = array();\n\tforeach ($arr as $value) {\n\t\t$sorted_array[strlen($value)]\
    \ = $value;\n\t}\n\treturn $sorted_array;\n}\n\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2qg_r2a3.php:31\n\
    Stack trace:\n#0 /tmp/tmp2qg_r2a3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp2qg_r2a3.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  return array_map(function($num) {\n    return strlen($num);\n  }, $arr);\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplz5me_zi.php:29\n\
    Stack trace:\n#0 /tmp/tmplz5me_zi.php(36): test()\n#1 {main}\n  thrown in /tmp/tmplz5me_zi.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $result = [];\n    foreach ($arr as $el) {\n        $result[strlen($el)]\
    \ = $el;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4xjl4dt8.php:31\n\
    Stack trace:\n#0 /tmp/tmp4xjl4dt8.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp4xjl4dt8.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $lengths = array_map('strlen', $arr);\n  array_multisort($lengths, SORT_DESC,\
    \ $arr);\n  return $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ejtrr07.php:28\n\
    Stack trace:\n#0 /tmp/tmp4ejtrr07.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp4ejtrr07.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  usort($arr, function($a, $b) {\n    return strlen($b) - strlen($a);\n \
    \ });\n  return $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprqnds4sn.php:29\n\
    Stack trace:\n#0 /tmp/tmprqnds4sn.php(36): test()\n#1 {main}\n  thrown in /tmp/tmprqnds4sn.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $str = '';\n  foreach ($arr as $v) {\n    $str .= strlen($v) . '-' . $v\
    \ . '.';\n  }\n  $str = explode('.', $str);\n  unset($str[count($str) - 1]);\n\
    \  $str = array_unique($str);\n  sort($str);\n  $res = [];\n  foreach ($str as\
    \ $v) {\n    $res[] = explode('-', $v)[1];\n  }\n  return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52msccw4.php:39\n\
    Stack trace:\n#0 /tmp/tmp52msccw4.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp52msccw4.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpji897wi5.php:28\n\
    Stack trace:\n#0 /tmp/tmpji897wi5.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpji897wi5.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    usort($arr, function($a, $b) {\n        return strlen($b) - strlen($a);\n\
    \    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp93eff2bd.php:30\n\
    Stack trace:\n#0 /tmp/tmp93eff2bd.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp93eff2bd.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t// sort the array in ascending order by length\n\treturn count($arr) -\
    \ count($arr);\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppw4j_8q_.php:27\n\
    Stack trace:\n#0 /tmp/tmppw4j_8q_.php(34): test()\n#1 {main}\n  thrown in /tmp/tmppw4j_8q_.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$max_length = 0;\n\tfor ($i = 0; $i < count($arr); $i++) {\n\t\tif (strlen($arr[$i])\
    \ > $max_length) {\n\t\t\t$max_length = strlen($arr[$i]);\n\t\t}\n\t}\n\tfor ($i\
    \ = 0; $i < count($arr); $i++) {\n\t\t$arr[$i] = str_pad($arr[$i], $max_length,\
    \ \"0\", STR_PAD_LEFT);\n\t}\n\treturn $arr;\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyainu_cs.php:35\n\
    Stack trace:\n#0 /tmp/tmpyainu_cs.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpyainu_cs.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$lengths = array_map('strlen', $arr);\n\tarray_multisort($lengths, SORT_DESC,\
    \ $arr);\n\treturn $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr_9wq5i4.php:29\n\
    Stack trace:\n#0 /tmp/tmpr_9wq5i4.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpr_9wq5i4.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $length = count($arr);\n    for ($i = 0; $i < $length; $i++) {\n    \
    \    for ($j = 0; $j < $length - 1; $j++) {\n            if (count($arr[$j]) >\
    \ count($arr[$j + 1])) {\n                $tmp = $arr[$j];\n                $arr[$j]\
    \ = $arr[$j + 1];\n                $arr[$j + 1] = $tmp;\n            }\n     \
    \   }\n    }\n    return $arr;\n}\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp3835ppn9.php on line 22\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmp3835ppn9.php\
    \ on line 22\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp3835ppn9.php on line 22\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmp3835ppn9.php\
    \ on line 22\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp3835ppn9.php on line 22\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmp3835ppn9.php\
    \ on line 22\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp3835ppn9.php on line 22\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmp3835ppn9.php\
    \ on line 22\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp3835ppn9.php on line 22\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmp3835ppn9.php\
    \ on line 22\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp3835ppn9.php on line 22\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmp3835ppn9.php\
    \ on line 22\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp3835ppn9.php on line 22\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmp3835ppn9.php\
    \ on line 22\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp3835ppn9.php on line 22\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmp3835ppn9.php\
    \ on line 22\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp3835ppn9.php on line 22\n\nWarning"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $output = [];\n    foreach ($arr as $a) {\n        $output[strlen($a)]\
    \ = $a;\n    }\n    return $output;\n}\n\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5gaazrrr.php:31\n\
    Stack trace:\n#0 /tmp/tmp5gaazrrr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp5gaazrrr.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi9jr23wl.php:29\n\
    Stack trace:\n#0 /tmp/tmpi9jr23wl.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpi9jr23wl.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\tusort($arr, function($a, $b) {\n\t\treturn strlen($b) - strlen($a);\n\t\
    });\n\treturn $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppy7nizxb.php:30\n\
    Stack trace:\n#0 /tmp/tmppy7nizxb.php(37): test()\n#1 {main}\n  thrown in /tmp/tmppy7nizxb.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  if (count($arr) <= 1) {\n    return $arr;\n  }\n\n  $left = $right = array();\n\
    \  $pivot = array_shift($arr);\n  foreach ($arr as $item) {\n    if (count($item)\
    \ > count($pivot)) {\n      $right[] = $item;\n    } else {\n      $left[] = $item;\n\
    \    }\n  }\n\n  return array_merge(by_length($left), array($pivot), by_length($right));\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpm5694ci6.php on line 26\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpm5694ci6.php\
    \ on line 26\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpm5694ci6.php on line 26\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpm5694ci6.php\
    \ on line 26\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpm5694ci6.php on line 26\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpm5694ci6.php\
    \ on line 26\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpm5694ci6.php on line 26\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpm5694ci6.php\
    \ on line 26\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpm5694ci6.php on line 26\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpm5694ci6.php\
    \ on line 26\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpm5694ci6.php on line 26\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpm5694ci6.php\
    \ on line 26\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpm5694ci6.php on line 26\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpm5694ci6.php\
    \ on line 26\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpm5694ci6.php on line 26\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpm5694ci6.php\
    \ on line 26\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpm5694ci6.php on line 26\n\nWarning"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$result = [];\n\tfor ($i = 0; $i < count($arr); $i++) {\n\t\t$result[strlen($arr[$i])]\
    \ = $arr[$i];\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmo92smrm.php:31\n\
    Stack trace:\n#0 /tmp/tmpmo92smrm.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmo92smrm.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $numbers = [\n        1 => 'One',\n        2 => 'Two',\n        3 =>\
    \ 'Three',\n        4 => 'Four',\n        5 => 'Five',\n        6 => 'Six',\n\
    \        7 => 'Seven',\n        8 => 'Eight',\n        9 => 'Nine'\n    ];\n \
    \   $res = [];\n    foreach ($arr as $v) {\n        if ($v >= 1 && $v <= 9) {\n\
    \            $res[] = $v;\n        }\n    }\n    sort($res);\n    $res = array_reverse($res);\n\
    \    foreach ($res as $k => $v) {\n        $res[$k] = $numbers[$v];\n    }\n \
    \   return $res;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    // write your code here\n}\n\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n\nprint_r(by_length($arr));\n\
    \nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpltmrd456.php:31\n\
    Stack trace:\n#0 /tmp/tmpltmrd456.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpltmrd456.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $n = count($arr);\n  for ($i = 0; $i < $n - 1; $i++) {\n    for ($j = $i\
    \ + 1; $j < $n; $j++) {\n      if (strlen($arr[$i]) > strlen($arr[$j])) {\n  \
    \      $temp = $arr[$i];\n        $arr[$i] = $arr[$j];\n        $arr[$j] = $temp;\n\
    \      }\n    }\n  }\n  return $arr;\n}\n\nfunction candidate(...$args) {\n  \
    \  return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7id1qqmu.php:37\n\
    Stack trace:\n#0 /tmp/tmp7id1qqmu.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp7id1qqmu.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $result = [];\n  $numbers = array_fill(0, 10, []);\n  foreach ($arr as\
    \ $val) {\n    if ($val >= 1 && $val <= 9) {\n      $numbers[$val][] = $val;\n\
    \    }\n  }\n  foreach ($numbers as $index => $num) {\n    $result = array_merge($result,\
    \ $num);\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpemkmul6w.php:37\n\
    Stack trace:\n#0 /tmp/tmpemkmul6w.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpemkmul6w.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $sort_arr = [];\n  foreach ($arr as $item) {\n    if ($item >= 1 && $item\
    \ <= 9) {\n      $sort_arr[] = $item;\n    }\n  }\n  sort($sort_arr);\n  $reverse_arr\
    \ = array_reverse($sort_arr);\n  $numbers = ['One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six', 'Seven', 'Eight', 'Nine'];\n  $translate_arr = [];\n  foreach ($reverse_arr\
    \ as $item) {\n    $translate_arr[] = $numbers[$item - 1];\n  }\n  return $translate_arr;\n\
    }\n\nprint_r(by_length([2, 1, 1, 4, 5, 8, 2, 3]));\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $length = count($arr);\n    for ($i = 0; $i < $length; $i++) {\n    \
    \    for ($j = 0; $j < $length - 1; $j++) {\n            if (strlen($arr[$j])\
    \ > strlen($arr[$j + 1])) {\n                $temp = $arr[$j];\n             \
    \   $arr[$j] = $arr[$j + 1];\n                $arr[$j + 1] = $temp;\n        \
    \    }\n        }\n    }\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf0cl5m45.php:37\n\
    Stack trace:\n#0 /tmp/tmpf0cl5m45.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpf0cl5m45.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\tforeach ($arr as $key => $val) {\n\t\t$sort[$key] = strlen($val);\n\t}\n\
    \tarray_multisort($sort, SORT_DESC, $arr);\n\treturn $arr;\n}\n$arr = [1, -1 ,\
    \ 55];\n$sort = by_length($arr);\nvar_dump($sort);\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(-1)\n  [1]=>\n  int(55)\n  [2]=>\n  int(1)\n\
    }\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppv3u6x3b.php:33\n\
    Stack trace:\n#0 /tmp/tmppv3u6x3b.php(40): test()\n#1 {main}\n  thrown in /tmp/tmppv3u6x3b.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $numbers = array('One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven',\
    \ 'Eight', 'Nine');\n  $numbers_arr = array();\n  for ($i = 0; $i < count($arr);\
    \ $i++) {\n    if ($arr[$i] > 0 && $arr[$i] < 10) {\n      array_push($numbers_arr,\
    \ $numbers[$arr[$i] - 1]);\n    }\n  }\n  return $numbers_arr;\n}\n$arr = [1,\
    \ -1 , 55];\nprint_r(by_length($arr));\n\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => One\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp_ftca_80.php:36\nStack trace:\n#0 /tmp/tmp_ftca_80.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmp_ftca_80.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$size = count($arr);\n\tfor ($i = 0; $i < $size; $i++) {\n\t\tfor ($j =\
    \ 0; $j < $size - 1; $j++) {\n\t\t\tif (strlen($arr[$j]) > strlen($arr[$j + 1]))\
    \ {\n\t\t\t\t$temp = $arr[$j];\n\t\t\t\t$arr[$j] = $arr[$j + 1];\n\t\t\t\t$arr[$j\
    \ + 1] = $temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn $arr;\n}\n$arr = [\"lol\", \"d\"\
    , \"dad\", \"dd\"];\nprint_r(by_length($arr));\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => d\n    [1] => dd\n    [2] => lol\n    [3] => dad\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb_to42oy.php:38\n\
    Stack trace:\n#0 /tmp/tmpb_to42oy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb_to42oy.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$numbers = [\n\t\t1 => 'One',\n\t\t2 => 'Two',\n\t\t3 => 'Three',\n\t\t\
    4 => 'Four',\n\t\t5 => 'Five',\n\t\t6 => 'Six',\n\t\t7 => 'Seven',\n\t\t8 => 'Eight',\n\
    \t\t9 => 'Nine'\n\t];\n\t$new_arr = [];\n\tforeach ($arr as $value) {\n\t\tif($value\
    \ > 0 && $value < 10) {\n\t\t\t$new_arr[] = $value;\n\t\t}\n\t}\n\tsort($new_arr);\n\
    \t$new_arr = array_reverse($new_arr);\n\t$result = [];\n\tforeach ($new_arr as\
    \ $value) {\n\t\t$result[] = $numbers[$value];\n\t}\n\treturn $result;\n}\n\n\
    $arr = [1, -1 , 55];\n$result = by_length($arr);\nvar_dump($result);\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(1) {\n  [0]=>\n  string(3) \"One\"\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $sort_arr = [];\n    $sort_arr = array_sort($arr, function($value) {\n\
    \        return strlen($value);\n    });\n    return $sort_arr;\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function array_sort()\
    \ in /tmp/tmp3cxffsp5.php:20\nStack trace:\n#0 /tmp/tmp3cxffsp5.php(26): by_length(Array)\n\
    #1 /tmp/tmp3cxffsp5.php(30): candidate(Array)\n#2 /tmp/tmp3cxffsp5.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3cxffsp5.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr1 = [];\n    foreach ($arr as $key => $value) {\n        $arr1[$key]\
    \ = strlen($value);\n    }\n    array_multisort($arr1, SORT_ASC, $arr);\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp73py0v0e.php:32\n\
    Stack trace:\n#0 /tmp/tmp73py0v0e.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp73py0v0e.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $sort = [];\n    foreach ($arr as $el) {\n        $sort[strlen($el)]\
    \ = $el;\n    }\n    ksort($sort);\n    return $sort;\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2kszqocn.php:31\n\
    Stack trace:\n#0 /tmp/tmp2kszqocn.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp2kszqocn.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (empty($arr)) {\n        return [];\n    }\n    $ordered = array_unique($arr);\n\
    \    usort($ordered, function($a, $b) {\n        return strlen($b) - strlen($a);\n\
    \    });\n    return $ordered;\n}\necho \"<pre>\";\nprint_r(by_length([\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]));\nprint_r(by_length([\"One\", \"One\", \"One\", \"One\", \"One\", \"One\"\
    , \"One\", \"One\", \"One\"]));\nprint_r(by_length([\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\"]));\nprint_r(by_length([\"\
    One\", \"Ten\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"]));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => Seven\n    [1] => Three\n    [2] => Eight\n \
    \   [3] => Four\n    [4] => Five\n    [5] => Nine\n    [6] => One\n    [7] =>\
    \ Two\n    [8] => Six\n)\nArray\n(\n    [0] => One\n)\nArray\n(\n    [0] => Seven\n\
    \    [1] => Three\n    [2] => Eight\n    [3] => Four\n    [4] => Five\n    [5]\
    \ => Nine\n    [6] => One\n    [7] => Two\n    [8] => Six\n    [9] => Ten\n)\n\
    Array\n(\n    [0] => Three\n    [1] => Seven\n    [2] => Eight\n    [3] => Four\n\
    \    [4] => Five\n    [5] => Nine\n    [6] => One\n    [7] => Ten\n    [8] =>\
    \ Two\n    [9] => Six\n)\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmph836tu9l.php:39\nStack trace:\n#0 /tmp/tmph836tu9l.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmph836tu9l.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $sort = array();\n    foreach ($arr as $k => $v) {\n        $sort[$k]\
    \ = strlen($v);\n    }\n    return $sort;\n}\n\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1n79s5g6.php:31\n\
    Stack trace:\n#0 /tmp/tmp1n79s5g6.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp1n79s5g6.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $temp = array();\n    foreach ($arr as $key => $string) {\n        $temp[$key]\
    \ = strlen($string);\n    }\n    return $temp;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx0lxn852.php:31\n\
    Stack trace:\n#0 /tmp/tmpx0lxn852.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpx0lxn852.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\treturn count($arr);\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp81_torhp.php:27\n\
    Stack trace:\n#0 /tmp/tmp81_torhp.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp81_torhp.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $map = [\n        1 => 'One',\n        2 => 'Two',\n        3 => 'Three',\n\
    \        4 => 'Four',\n        5 => 'Five',\n        6 => 'Six',\n        7 =>\
    \ 'Seven',\n        8 => 'Eight',\n        9 => 'Nine'\n    ];\n    $res = [];\n\
    \    $arr = array_filter($arr, function($item) {\n        return $item > 0 &&\
    \ $item < 10;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n   \
    \ foreach ($arr as $item) {\n        $res[] = $map[$item];\n    }\n    return\
    \ $res;\n}\n\n$arr = [1, -1 , 55];\necho \"<pre>\";\nprint_r(by_length($arr));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => One\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $length = array();\n    foreach ($arr as $key => $value) {\n        $length[$key]\
    \ = strlen($value);\n    }\n    array_multisort($length, SORT_ASC, $arr);\n  \
    \  return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8s4puywc.php:32\n\
    Stack trace:\n#0 /tmp/tmp8s4puywc.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp8s4puywc.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  return count($arr);\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxpd9q4sw.php:27\n\
    Stack trace:\n#0 /tmp/tmpxpd9q4sw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpxpd9q4sw.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $arr_str = array_map('strval', $arr);\n  asort($arr_str);\n  return array_map('intval',\
    \ $arr_str);\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4l7pe5a4.php:29\n\
    Stack trace:\n#0 /tmp/tmp4l7pe5a4.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp4l7pe5a4.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n$arr = [\n    'a' => 1,\n    'c' =>\
    \ 2,\n    'b' => 3,\n    'e' => 4,\n    'd' => 5,\n];\n$arr = by_length($arr);\n\
    var_dump($arr);\necho '<br>';\n$arr = [\n    'bbb' => 1,\n    'cc' => 2,\n   \
    \ 'aaa' => 3,\n    'ee' => 4,\n    'dd' => 5,\n];\n$arr = by_length($arr);\nvar_dump($arr);\n\
    echo '<br>';\n$arr = [\n    'b' => 1,\n    'c' => 2,\n    'a' => 3,\n    'e' =>\
    \ 4,\n    'd' => 5,\n];\n$arr = by_length($arr);\nvar_dump($arr);\necho '<br>';\n\
    \nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(5) {\n  [\"a\"]=>\n  int(1)\n  [\"c\"]=>\n  int(2)\n  [\"b\"]=>\n\
    \  int(3)\n  [\"e\"]=>\n  int(4)\n  [\"d\"]=>\n  int(5)\n}\n<br>array(5) {\n \
    \ [\"bbb\"]=>\n  int(1)\n  [\"cc\"]=>\n  int(2)\n  [\"aaa\"]=>\n  int(3)\n  [\"\
    ee\"]=>\n  int(4)\n  [\"dd\"]=>\n  int(5)\n}\n<br>array(5) {\n  [\"b\"]=>\n  int(1)\n\
    \  [\"c\"]=>\n  int(2)\n  [\"a\"]=>\n  int(3)\n  [\"e\"]=>\n  int(4)\n  [\"d\"\
    ]=>\n  int(5)\n}\n<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgyk9qeiu.php:59\n\
    Stack trace:\n#0 /tmp/tmpgyk9qeiu.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpgyk9qeiu.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    usort($arr, function($a, $b) {\n        return strlen($b) - strlen($a);\n\
    \    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplszucw9e.php:30\n\
    Stack trace:\n#0 /tmp/tmplszucw9e.php(37): test()\n#1 {main}\n  thrown in /tmp/tmplszucw9e.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$arr = array_flip($arr);\n\tasort($arr);\n\treturn array_flip($arr);\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp42unq_h4.php:29\n\
    Stack trace:\n#0 /tmp/tmp42unq_h4.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp42unq_h4.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  usort($arr, function($a, $b) {\n    return strlen($b) - strlen($a);\n \
    \ });\n  return $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdspovidq.php:29\n\
    Stack trace:\n#0 /tmp/tmpdspovidq.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpdspovidq.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\tglobal $dic;\n\tif (!empty($arr)) {\n\t\t$arr = array_diff($arr, array_filter($arr,\
    \ 'is_string'));\n\t\tsort($arr);\n\t\t$arr = array_reverse($arr);\n\t\t$res =\
    \ [];\n\t\tforeach ($arr as $value) {\n\t\t\t$res[] = $dic[$value];\n\t\t}\n\t\
    \treturn $res;\n\t}\n\treturn [];\n}\n\n$dic = [\n\t1 => 'One',\n\t2 => 'Two',\n\
    \t3 => 'Three',\n\t4 => 'Four',\n\t5 => 'Five',\n\t6 => 'Six',\n\t7 => 'Seven',\n\
    \t8 => 'Eight',\n\t9 => 'Nine'\n];\n\necho '<pre>';\nprint_r(by_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3]));\nprint_r(by_length([]));\nprint_r(by_length([1, -1 , 55]));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n   \
    \ [3] => Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n\
    )\nArray\n(\n)\nArray\n(\n    [0] => \n    [1] => One\n    [2] => \n)\n</pre>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpv1qja09r.php:57\nStack\
    \ trace:\n#0 /tmp/tmpv1qja09r.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpv1qja09r.php\
    \ on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9aww0i9_.php:37\n\
    Stack trace:\n#0 /tmp/tmp9aww0i9_.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp9aww0i9_.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    usort($arr, function($a, $b) {\n      return strlen($b) - strlen($a);\n\
    \    });\n    return $arr;\n  }\n  \n  function digitToWord($digit) {\n    $numbers\
    \ = array('One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine');\n\
    \    return $numbers[$digit - 1];\n  }\n  \n  function sortArray($arr) {\n   \
    \ // Just in case the array has no number from 1 to 9, then return an empty array\n\
    \    if (count(array_filter($arr, function($v) { return in_array($v, range(1,\
    \ 9)); })) == 0) {\n      return [];\n    }\n  \n    $result = array_map(function($item)\
    \ {\n      if (in_array($item, range(1, 9))) {\n        return digitToWord($item);\n\
    \      }\n    }, array_filter($arr, function($v) { return in_array($v, range(1,\
    \ 9)); }));\n  \n    return by_length($result);\n  }\n  \n  $arr = [2, 1, 1, 4,\
    \ 5, 8, 2, 3];\n  $arr2 = [1, -1 , 55];\n  print_r(sortArray($arr));\n  print_r(sortArray($arr2));\n\
    \  //echo digitToWord(5);\n  //echo digitToWord(5);\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Three\n    [2] => Four\n    [3]\
    \ => Five\n    [4] => Two\n    [5] => One\n    [6] => One\n    [7] => Two\n)\n\
    Array\n(\n    [0] => One\n)\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp6yt329k6.php:56\nStack trace:\n#0 /tmp/tmp6yt329k6.php(63): test()\n\
    #1 {main}\n  thrown in /tmp/tmp6yt329k6.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  for ($i = 0; $i < count($arr) - 1; $i++) {\n    for ($j = $i + 1; $j <\
    \ count($arr); $j++) {\n      if (strlen($arr[$i]) > strlen($arr[$j])) {\n   \
    \     $temp = $arr[$i];\n        $arr[$i] = $arr[$j];\n        $arr[$j] = $temp;\n\
    \      }\n    }\n  }\n  return $arr;\n}\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_t75e6ts.php:35\n\
    Stack trace:\n#0 /tmp/tmp_t75e6ts.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp_t75e6ts.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_length = array();\n    foreach ($arr as $key => $value) {\n    \
    \    $arr_length[$key] = strlen($value);\n    }\n    array_multisort($arr_length,\
    \ SORT_ASC, $arr);\n    return $arr;\n}\n\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n\
    sort($arr);\n$arr = array_reverse($arr);\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp80h7w7bi.php:35\n\
    Stack trace:\n#0 /tmp/tmp80h7w7bi.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp80h7w7bi.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\treturn count($arr);\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm4srscpm.php:26\n\
    Stack trace:\n#0 /tmp/tmpm4srscpm.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpm4srscpm.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\tif (empty($arr)) return [];\n\t$assoc_array = [\n\t\t1 => 'One',\n\t\t\
    2 => 'Two',\n\t\t3 => 'Three',\n\t\t4 => 'Four',\n\t\t5 => 'Five',\n\t\t6 => 'Six',\n\
    \t\t7 => 'Seven',\n\t\t8 => 'Eight',\n\t\t9 => 'Nine'\n\t];\n\t$return_array =\
    \ [];\n\t$sort_array = [];\n\tforeach ($arr as $number) {\n\t\tif ($number >=\
    \ 1 && $number <= 9) {\n\t\t\t$sort_array[] = $number;\n\t\t}\n\t}\n\tsort($sort_array);\n\
    \t$reverse_array = array_reverse($sort_array);\n\tforeach ($reverse_array as $number)\
    \ {\n\t\t$return_array[] = $assoc_array[$number];\n\t}\n\treturn $return_array;\n\
    }\nprint_r(by_length([1, -1 , 55]));\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => One\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $str_keys = array();\n    foreach ($arr as $key => $value) {\n      \
    \  $str_keys[$key] = strlen($value);\n    }\n    array_multisort($str_keys, SORT_DESC,\
    \ $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcgc07_qw.php:32\n\
    Stack trace:\n#0 /tmp/tmpcgc07_qw.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpcgc07_qw.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$unsorted_number = array();\n\tforeach ($arr as $number) {\n\t\tif($number\
    \ >= 1 && $number <= 9) {\n\t\t\tarray_push($unsorted_number, $number);\n\t\t\
    }\n\t}\n\tsort($unsorted_number);\n\t$sorted_number = array_reverse($unsorted_number);\n\
    \treturn $sorted_number;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptrvf1jqn.php:35\n\
    Stack trace:\n#0 /tmp/tmptrvf1jqn.php(42): test()\n#1 {main}\n  thrown in /tmp/tmptrvf1jqn.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$len = count($arr);\n\tfor ($i = 0; $i < $len; $i++) {\n\t\tfor ($j = $i\
    \ + 1; $j < $len; $j++) {\n\t\t\tif (strlen($arr[$i]) > strlen($arr[$j])) {\n\t\
    \t\t\t$temp = $arr[$i];\n\t\t\t\t$arr[$i] = $arr[$j];\n\t\t\t\t$arr[$j] = $temp;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn $arr;\n}\n\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0bx769_k.php:37\n\
    Stack trace:\n#0 /tmp/tmp0bx769_k.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0bx769_k.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $result = array();\n    foreach ($arr as $element) {\n        $result[]\
    \ = strlen($element);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3cskddoh.php:31\n\
    Stack trace:\n#0 /tmp/tmp3cskddoh.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp3cskddoh.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $result = [];\n    $temp = [];\n    $numbers = [\n        1 => 'One',\
    \ 2 => 'Two', 3 => 'Three', 4 => 'Four', 5 => 'Five', 6 => 'Six', 7 => 'Seven',\
    \ 8 => 'Eight', 9 => 'Nine'\n    ];\n    $ans = [];\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] < 10 && $arr[$i] > 0) {\n            $result[]\
    \ = $arr[$i];\n        }\n    }\n    sort($result);\n    $result = array_reverse($result);\n\
    \    for ($i = 0; $i < count($result); $i++) {\n        $temp[] = $numbers[$result[$i]];\n\
    \    }\n    return $temp;\n}\n\necho \"<pre>\";\nprint_r(by_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])); // [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(by_length([2,\
    \ 3, 4, 5, 6, 7, 8, 9])); // [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\"\
    , \"Four\", \"Three\", \"Two\"]\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(by_length([1,\
    \ 1, 3, 3, 3, 7, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9,\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpv1fwhoyj.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$result = array();\n\t$map = array(1 => 'One', 2 => 'Two', 3 => 'Three',\
    \ 4 => 'Four', 5 => 'Five', 6 => 'Six', 7 => 'Seven', 8 => 'Eight', 9 => 'Nine');\n\
    \tfor ($i = 0; $i < count($arr); $i++) {\n\t\tif (isset($map[$arr[$i]])) {\n\t\
    \t\t$result[] = $map[$arr[$i]];\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk78xpyrn.php:34\n\
    Stack trace:\n#0 /tmp/tmpk78xpyrn.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpk78xpyrn.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = array();\n    foreach ($arr as $key => $value) {\n        $len[$key]\
    \ = strlen($value);\n    }\n    array_multisort($len, SORT_DESC, $arr);\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcx3lz5wh.php:32\n\
    Stack trace:\n#0 /tmp/tmpcx3lz5wh.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpcx3lz5wh.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $result = [];\n    for ($i = 0; $i < count($arr); $i++) {\n        if\
    \ ($arr[$i] >= 1 && $arr[$i] <= 9) {\n            array_push($result, $arr[$i]);\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpho5vwsoe.php:33\n\
    Stack trace:\n#0 /tmp/tmpho5vwsoe.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpho5vwsoe.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_num = [];\n    $arr_text = [];\n    $result = [];\n    $nums = [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9];\n    $nums_text = ['One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six', 'Seven', 'Eight', 'Nine'];\n    foreach ($arr as $key => $value) {\n\
    \        if (in_array($value, $nums)) {\n            $arr_num[] = $value;\n  \
    \      }\n    }\n    sort($arr_num);\n    $arr_num = array_reverse($arr_num);\n\
    \    foreach ($arr_num as $key => $value) {\n        $arr_text[] = $nums_text[$value\
    \ - 1];\n    }\n    return $arr_text;\n}\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n$result\
    \ = by_length($arr);\necho \"Given arr: [2, 1, 1, 4, 5, 8, 2, 3]\" . \"<br>\"\
    ;\necho \"Result: \";\nprint_r($result);\necho \"<br><br>\";\n\n$arr = [];\n$result\
    \ = by_length($arr);\necho \"Given arr: []\" . \"<br>\";\necho \"Result: \";\n\
    print_r($result);\necho \"<br><br>\";\n\n$arr = [1, -1 , 55];\n$result = by_length($arr);\n\
    echo \"Given arr: [1, -1 , 55]\" . \"<br>\";\necho \"Result: \";\nprint_r($result);\n\
    echo \"<br><br>\";\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Given arr: [2, 1, 1, 4, 5, 8, 2, 3]<br>Result: Array\n(\n    [0] => Eight\n\
    \    [1] => Five\n    [2] => Four\n    [3] => Three\n    [4] => Two\n    [5] =>\
    \ Two\n    [6] => One\n    [7] => One\n)\n<br><br>Given arr: []<br>Result: Array\n\
    (\n)\n<br><br>Given arr: [1, -1 , 55]<br>Result: Array\n(\n    [0] => One\n)\n\
    <br><br>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $n = count($arr);\n    $swapped = true;\n    while ($swapped) {\n   \
    \     $swapped = false;\n        for ($i = 0; $i < $n - 1; $i++) {\n         \
    \   if (strlen($arr[$i]) > strlen($arr[$i + 1])) {\n                $tmp = $arr[$i];\n\
    \                $arr[$i] = $arr[$i + 1];\n                $arr[$i + 1] = $tmp;\n\
    \                $swapped = true;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0a4yis_3.php:40\n\
    Stack trace:\n#0 /tmp/tmp0a4yis_3.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp0a4yis_3.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $temp = array();\n    foreach ($arr as $k => $v) {\n        $temp[$k]\
    \ = strlen($v);\n    }\n    asort($temp);\n    foreach ($temp as $k => $v) {\n\
    \        $temp[$k] = $arr[$k];\n    }\n    return $temp;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx3gsqa3o.php:35\n\
    Stack trace:\n#0 /tmp/tmpx3gsqa3o.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpx3gsqa3o.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr = explode(' ', $arr);\n    usort($arr, function($a, $b) {\n    \
    \    return strlen($b) - strlen($a);\n    });\n    return implode(' ', $arr);\n\
    }\n\n$arr = [1, -1 , 55];\n$countArr = count($arr);\nfor ($i = 0; $i < $countArr;\
    \ $i++) {\n    if ($arr[$i] < 1 || $arr[$i] > 9) {\n        unset($arr[$i]);\n\
    \    }\n}\n$arr = array_values($arr);\n$arr = array_unique($arr);\nsort($arr);\n\
    \n$arr = array_reverse($arr);\n$arr = implode(' ', $arr);\n$arr = by_length($arr);\n\
    \n$arr = str_replace('1', 'One', $arr);\n$arr = str_replace('2', 'Two', $arr);\n\
    $arr = str_replace('3', 'Three', $arr);\n$arr = str_replace('4', 'Four', $arr);\n\
    $arr = str_replace('5', 'Five', $arr);\n$arr = str_replace('6', 'Six', $arr);\n\
    $arr = str_replace('7', 'Seven', $arr);\n$arr = str_replace('8', 'Eight', $arr);\n\
    $arr = str_replace('9', 'Nine', $arr);\n\n$arr = explode(' ', $arr);\n$arr = array_reverse($arr);\n\
    \necho '<pre>';\nprint_r($arr);\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => One\n)\n</pre>\nWarning: explode() expects parameter\
    \ 2 to be string, array given in /tmp/tmpxsui1v_y.php on line 19\n\nWarning: usort()\
    \ expects parameter 1 to be array, null given in /tmp/tmpxsui1v_y.php on line\
    \ 22\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpxsui1v_y.php on\
    \ line 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxsui1v_y.php:62\n\
    Stack trace:\n#0 /tmp/tmpxsui1v_y.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpxsui1v_y.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  return count($arr);\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy6zv44e6.php:26\n\
    Stack trace:\n#0 /tmp/tmpy6zv44e6.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpy6zv44e6.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $length = 0;\n  $result = [];\n  $new_array = [];\n  for ($i = 0; $i <\
    \ count($arr); $i++) {\n    if ($arr[$i] >= 1 && $arr[$i] <= 9) {\n      $length++;\n\
    \      $result[$length] = $arr[$i];\n    }\n  }\n  sort($result);\n  array_reverse($result);\n\
    \  for ($i = 0; $i < count($result); $i++) {\n    switch ($result[$i]) {\n   \
    \   case 1:\n        $new_array[$i] = \"One\";\n        break;\n      case 2:\n\
    \        $new_array[$i] = \"Two\";\n        break;\n      case 3:\n        $new_array[$i]\
    \ = \"Three\";\n        break;\n      case 4:\n        $new_array[$i] = \"Four\"\
    ;\n        break;\n      case 5:\n        $new_array[$i] = \"Five\";\n       \
    \ break;\n      case 6:\n        $new_array[$i] = \"Six\";\n        break;\n \
    \     case 7:\n        $new_array[$i] = \"Seven\";\n        break;\n      case\
    \ 8:\n        $new_array[$i] = \"Eight\";\n        break;\n      case 9:\n   \
    \     $new_array[$i] = \"Nine\";\n        break;\n    }\n  }\n  return $new_array;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphnriu2y1.php:69\n\
    Stack trace:\n#0 /tmp/tmphnriu2y1.php(76): test()\n#1 {main}\n  thrown in /tmp/tmphnriu2y1.php\
    \ on line 69\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$l = [];\n\t$s = [];\n\tforeach ($arr as $e) {\n\t\tif ($e == 1) $l[] =\
    \ \"One\";\n\t\tif ($e == 2) $l[] = \"Two\";\n\t\tif ($e == 3) $l[] = \"Three\"\
    ;\n\t\tif ($e == 4) $l[] = \"Four\";\n\t\tif ($e == 5) $l[] = \"Five\";\n\t\t\
    if ($e == 6) $l[] = \"Six\";\n\t\tif ($e == 7) $l[] = \"Seven\";\n\t\tif ($e ==\
    \ 8) $l[] = \"Eight\";\n\t\tif ($e == 9) $l[] = \"Nine\";\n\t}\n\treturn $l;\n\
    }\n\n$test1 = [1, 1, 2, 2, 3, 4, 5, 8];\n$test2 = [1, -1 , 55];\n$test3 = [];\n\
    $test4 = [-8, -5, -4, -3, -2, -2, -1, -1];\n\n$test1 = by_length($test1);\n$test2\
    \ = by_length($test2);\n$test3 = by_length($test3);\n$test4 = by_length($test4);\n\
    \necho \"<pre>\";\nvar_dump($test1);\nvar_dump($test2);\nvar_dump($test3);\nvar_dump($test4);\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>array(8) {\n  [0]=>\n  string(3) \"One\"\n  [1]=>\n  string(3) \"\
    One\"\n  [2]=>\n  string(3) \"Two\"\n  [3]=>\n  string(3) \"Two\"\n  [4]=>\n \
    \ string(5) \"Three\"\n  [5]=>\n  string(4) \"Four\"\n  [6]=>\n  string(4) \"\
    Five\"\n  [7]=>\n  string(5) \"Eight\"\n}\narray(1) {\n  [0]=>\n  string(3) \"\
    One\"\n}\narray(0) {\n}\narray(0) {\n}\n</pre>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp2e7zfyup.php:56\nStack trace:\n#0 /tmp/tmp2e7zfyup.php(63):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp2e7zfyup.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $sorted_arr = array();\n  $count = 0;\n  $max_length = max(array_map('strlen',\
    \ $arr));\n  for ($i = $max_length; $i >= 0; $i--) {\n    for ($j = 0; $j < count($arr);\
    \ $j++) {\n      if (strlen($arr[$j]) == $i) {\n        $sorted_arr[$count] =\
    \ $arr[$j];\n        $count++;\n      }\n    }\n  }\n  return $sorted_arr;\n}\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8hlrb7vx.php:37\n\
    Stack trace:\n#0 /tmp/tmp8hlrb7vx.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp8hlrb7vx.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    $num_arr = [];\n    $str_arr\
    \ = [];\n    for ($i = 0; $i < count($arr); $i++) {\n        if (in_array($arr[$i],\
    \ $numbers)) {\n            array_push($num_arr, $arr[$i]);\n        }\n    }\n\
    \    sort($num_arr);\n    rsort($num_arr);\n    for ($i = 0; $i < count($num_arr);\
    \ $i++) {\n        switch ($num_arr[$i]) {\n            case 1:\n            \
    \    array_push($str_arr, \"One\");\n                break;\n            case\
    \ 2:\n                array_push($str_arr, \"Two\");\n                break;\n\
    \            case 3:\n                array_push($str_arr, \"Three\");\n     \
    \           break;\n            case 4:\n                array_push($str_arr,\
    \ \"Four\");\n                break;\n            case 5:\n                array_push($str_arr,\
    \ \"Five\");\n                break;\n            case 6:\n                array_push($str_arr,\
    \ \"Six\");\n                break;\n            case 7:\n                array_push($str_arr,\
    \ \"Seven\");\n                break;\n            case 8:\n                array_push($str_arr,\
    \ \"Eight\");\n                break;\n            case 9:\n                array_push($str_arr,\
    \ \"Nine\");\n                break;\n        }\n    }\n    return $str_arr;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$sort = array();\n\tfor ($i = 0; $i < count($arr); $i++) {\n\t\t$sort[$i]\
    \ = strlen($arr[$i]);\n\t}\n\tsort($sort);\n\treturn $sort;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd5k3jdut.php:32\n\
    Stack trace:\n#0 /tmp/tmpd5k3jdut.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpd5k3jdut.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_len = count($arr);\n    for ($i = 0; $i < $arr_len; $i++) {\n  \
    \      for ($j = $i + 1; $j < $arr_len; $j++) {\n            if ($arr[$i] > $arr[$j])\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpri5obhit.php:37\n\
    Stack trace:\n#0 /tmp/tmpri5obhit.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpri5obhit.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  if (empty($arr)) {\n    return [];\n  }\n  if (!is_array($arr)) {\n   \
    \ return [];\n  }\n  $index = 0;\n  $count = count($arr);\n  $result = [];\n \
    \ $nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n  while ($index < $count) {\n    if\
    \ (!in_array($arr[$index], $nums)) {\n      $index++;\n      continue;\n    }\n\
    \    array_push($result, $arr[$index]);\n    $index++;\n  }\n  sort($result);\n\
    \  return array_reverse($result);\n}\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqlklmaep.php:45\n\
    Stack trace:\n#0 /tmp/tmpqlklmaep.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpqlklmaep.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $str = array_shift($arr);\n    foreach ($arr as $key => $val) {\n   \
    \     if (strlen($val) < strlen($str)) {\n            array_splice($arr, $key,\
    \ 0, $str);\n            break;\n        }\n    }\n    return $arr;\n}\n$arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3];\n$arr = array_unique($arr);\nsort($arr);\n$arr = array_reverse($arr);\n\
    $res = array();\nforeach ($arr as $key => $val) {\n    switch ($val) {\n     \
    \   case 1:\n            $res[] = \"One\";\n            break;\n        case 2:\n\
    \            $res[] = \"Two\";\n            break;\n        case 3:\n        \
    \    $res[] = \"Three\";\n            break;\n        case 4:\n            $res[]\
    \ = \"Four\";\n            break;\n        case 5:\n            $res[] = \"Five\"\
    ;\n            break;\n        case 6:\n            $res[] = \"Six\";\n      \
    \      break;\n        case 7:\n            $res[] = \"Seven\";\n            break;\n\
    \        case 8:\n            $res[] = \"Eight\";\n            break;\n      \
    \  case 9:\n            $res[] = \"Nine\";\n            break;\n    }\n}\nvar_dump($res);\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(6) {\n  [0]=>\n  string(5) \"Eight\"\n  [1]=>\n  string(4) \"Five\"\
    \n  [2]=>\n  string(4) \"Four\"\n  [3]=>\n  string(5) \"Three\"\n  [4]=>\n  string(3)\
    \ \"Two\"\n  [5]=>\n  string(3) \"One\"\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp0f09mm6o.php:70\nStack trace:\n#0 /tmp/tmp0f09mm6o.php(77):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0f09mm6o.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptljv96i7.php:29\n\
    Stack trace:\n#0 /tmp/tmptljv96i7.php(36): test()\n#1 {main}\n  thrown in /tmp/tmptljv96i7.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $result = [];\n    $array = [1,2,3,4,5,6,7,8,9];\n    $sorted_array =\
    \ sort($array);\n    $reversed_array = array_reverse($sorted_array);\n    return\
    \ $result;\n}\n\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_reverse() expects parameter 1 to be array, bool given\
    \ in /tmp/tmp8k1ew6z2.php on line 22\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp8k1ew6z2.php:32\nStack trace:\n#0 /tmp/tmp8k1ew6z2.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp8k1ew6z2.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $values = [];\n    foreach ($arr as $key => $value) {\n        $values[$key]\
    \ = strlen($value);\n    }\n    return $values;\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyg28qam0.php:30\n\
    Stack trace:\n#0 /tmp/tmpyg28qam0.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpyg28qam0.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $numbers = [\n        \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    ];\n    $result = [];\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value >= 1 && $value <= 9) {\n    \
    \        $result[] = $value;\n        }\n    }\n    sort($result);\n    $result\
    \ = array_reverse($result);\n    foreach ($result as $key => $value) {\n     \
    \   $result[$key] = $numbers[$value - 1];\n    }\n    return $result;\n}\n\n$arr\
    \ = [1, 2, 4, 5, 8, 2, 3];\n$result = by_length($arr);\nprint_r($result);\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $newarr = array();\n    foreach ($arr as $key => $value) {\n        $newarr[$key]\
    \ = strlen($value);\n    }\n    return $newarr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa0sg0sjy.php:31\n\
    Stack trace:\n#0 /tmp/tmpa0sg0sjy.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpa0sg0sjy.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr1 = array();\n    $arr2 = array();\n    foreach ($arr as $key =>\
    \ $value) {\n        if (strlen($value) > 1) {\n            $arr1[$key] = $value;\n\
    \        } else {\n            $arr2[$key] = $value;\n        }\n    }\n    return\
    \ array_merge($arr2, $arr1);\n}\n$numbers = array(\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7igis84k.php:36\n\
    Stack trace:\n#0 /tmp/tmp7igis84k.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp7igis84k.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    return strlen($arr);\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strlen() expects parameter 1 to be string, array given in /tmp/tmpyh7dxx_7.php\
    \ on line 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyh7dxx_7.php:27\n\
    Stack trace:\n#0 /tmp/tmpyh7dxx_7.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpyh7dxx_7.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\tforeach ($arr as $key => $val) {\n    \tif ($val < 0 or $val > 9) {\n \
    \   \t\tunset($arr[$key]);\n    \t}\n\t}\n\treturn count($arr);\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqrvdoc_i.php:31\n\
    Stack trace:\n#0 /tmp/tmpqrvdoc_i.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqrvdoc_i.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$arr = explode(\" \",$arr);\n\t$arr = array_reverse($arr);\n\t$arr = implode(\"\
    \ \",$arr);\n\treturn $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: explode() expects parameter 2 to be string, array given in /tmp/tmpooqs9bka.php\
    \ on line 19\n\nWarning: array_reverse() expects parameter 1 to be array, null\
    \ given in /tmp/tmpooqs9bka.php on line 20\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpooqs9bka.php on line 21\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpooqs9bka.php:29\nStack trace:\n#0 /tmp/tmpooqs9bka.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpooqs9bka.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$lengths = array_map('strlen', $arr);\n\tarray_multisort($lengths, SORT_DESC,\
    \ $arr);\n\treturn $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp93d83fpf.php:28\n\
    Stack trace:\n#0 /tmp/tmp93d83fpf.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp93d83fpf.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  usort($arr, function($a, $b) {\n    return strlen($b) - strlen($a);\n \
    \ });\n  return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwkxhvp9x.php:30\n\
    Stack trace:\n#0 /tmp/tmpwkxhvp9x.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpwkxhvp9x.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $length = count($arr);\n  for ($i = 0; $i < $length; $i++) {\n    for ($j\
    \ = 0; $j < $length; $j++) {\n      if ($arr[$i] < $arr[$j]) {\n        $temp\
    \ = $arr[$i];\n        $arr[$i] = $arr[$j];\n        $arr[$j] = $temp;\n     \
    \ }\n    }\n  }\n  return $arr;\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqfd4g8el.php:37\n\
    Stack trace:\n#0 /tmp/tmpqfd4g8el.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpqfd4g8el.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    foreach ($arr as $key => $value) {\n        $len[$key] = strlen($value);\n\
    \    }\n    array_multisort($len, SORT_DESC, $arr);\n    return $arr;\n}\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqise7dt6.php:30\n\
    Stack trace:\n#0 /tmp/tmpqise7dt6.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpqise7dt6.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $arr_length = count($arr);\n  for ($i = 0; $i < $arr_length; $i++) {\n\
    \    for ($j = 0; $j < $arr_length - 1; $j++) {\n      if (strlen($arr[$j]) >\
    \ strlen($arr[$j + 1])) {\n        $tmp = $arr[$j];\n        $arr[$j] = $arr[$j\
    \ + 1];\n        $arr[$j + 1] = $tmp;\n      }\n    }\n  }\n  return $arr;\n}\n\
    \nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphw93cn1v.php:37\n\
    Stack trace:\n#0 /tmp/tmphw93cn1v.php(44): test()\n#1 {main}\n  thrown in /tmp/tmphw93cn1v.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i; $j < $len; $j++) {\n            if ($arr[$i] > $arr[$j]) {\n     \
    \           $t = $arr[$i];\n                $arr[$i] = $arr[$j];\n           \
    \     $arr[$j] = $t;\n            }\n        }\n    }\n    return $arr;\n}\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbpm50ykl.php:36\n\
    Stack trace:\n#0 /tmp/tmpbpm50ykl.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpbpm50ykl.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $sort_arr = [];\n    foreach ($arr as $key => $value) {\n        $sort_arr[$key]\
    \ = strlen($value);\n    }\n    array_multisort($sort_arr, SORT_DESC, $arr);\n\
    \    return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2y389uk5.php:32\n\
    Stack trace:\n#0 /tmp/tmp2y389uk5.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp2y389uk5.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $ret = [];\n    for ($i = 0; $i < sizeof($arr); $i++) {\n        for\
    \ ($j = $i + 1; $j < sizeof($arr); $j++) {\n            if (strlen($arr[$i]) >\
    \ strlen($arr[$j])) {\n                $temp = $arr[$i];\n                $arr[$i]\
    \ = $arr[$j];\n                $arr[$j] = $temp;\n            }\n        }\n \
    \   }\n    return $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt8f78_ua.php:36\n\
    Stack trace:\n#0 /tmp/tmpt8f78_ua.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpt8f78_ua.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $result = array();\n    foreach ($arr as $a) {\n        $result[] = strlen($a);\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpggzaaxeg.php:30\n\
    Stack trace:\n#0 /tmp/tmpggzaaxeg.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpggzaaxeg.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $result = array();\n    foreach ($arr as $value) {\n        $result[]\
    \ = strlen($value);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwn6ikwi.php:31\n\
    Stack trace:\n#0 /tmp/tmpuwn6ikwi.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpuwn6ikwi.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$counts = array_map('strlen', $arr);\n\tarray_multisort($counts, SORT_DESC,\
    \ $arr);\n\treturn $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbckov5dp.php:28\n\
    Stack trace:\n#0 /tmp/tmpbckov5dp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpbckov5dp.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $array = array_filter($arr, function($x) { return $x >= 1 && $x <= 9;\
    \ });\n    sort($array);\n    $reversed = array_reverse($array);\n    return array_map(function($item)\
    \ {\n        switch ($item) {\n            case 1:\n                return 'One';\n\
    \            case 2:\n                return 'Two';\n            case 3:\n   \
    \             return 'Three';\n            case 4:\n                return 'Four';\n\
    \            case 5:\n                return 'Five';\n            case 6:\n  \
    \              return 'Six';\n            case 7:\n                return 'Seven';\n\
    \            case 8:\n                return 'Eight';\n            case 9:\n \
    \               return 'Nine';\n        }\n    }, $reversed);\n}\n\nprint_r(by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3]));\nprint_r(by_length([]));\nprint_r(by_length([1, -1 ,\
    \ 55]));\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !==\
    \ array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    return count($arr);\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx3ikqvb7.php:26\n\
    Stack trace:\n#0 /tmp/tmpx3ikqvb7.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpx3ikqvb7.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\tforeach ($arr as $key => $value) {\n\t\tif ($value === 0) {\n\t\t\tunset($arr[$key]);\n\
    \t\t}\n\t}\n\trsort($arr);\n\treturn $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppkdyetcc.php:33\n\
    Stack trace:\n#0 /tmp/tmppkdyetcc.php(40): test()\n#1 {main}\n  thrown in /tmp/tmppkdyetcc.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $length = count($arr);\n  $array_holder = array();\n  for ($i = 0; $i <\
    \ $length; $i++) {\n    $array_holder[$i] = count($arr[$i]);\n  }\n  return $array_holder;\n\
    }\n$names = array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\");\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\nsort($arr);\n\
    $arr = array_reverse($arr);\n$length = count($arr);\n$holder = array();\nfor ($i\
    \ = 0; $i < $length; $i++) {\n  $holder[$i] = array($arr[$i]);\n}\n$arr = array_filter($holder,\
    \ function($var) {\n  return ($var[0] >= 1 && $var[0] <= 9);\n});\n$arr = array_reverse($arr);\n\
    $length = count($arr);\nfor ($i = 0; $i < $length; $i++) {\n  $arr[$i] = $names[$arr[$i][0]\
    \ - 1];\n}\n$arr = array_values($arr);\nusort($arr, \"by_length\");\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpjxhqoz5a.php on line 19\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpjxhqoz5a.php\
    \ on line 22\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpjxhqoz5a.php on line 19\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpjxhqoz5a.php\
    \ on line 22\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpjxhqoz5a.php on line 19\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpjxhqoz5a.php\
    \ on line 22\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpjxhqoz5a.php on line 19\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpjxhqoz5a.php\
    \ on line 22\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpjxhqoz5a.php on line 19\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpjxhqoz5a.php\
    \ on line 22\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpjxhqoz5a.php on line 19\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpjxhqoz5a.php\
    \ on line 22\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpjxhqoz5a.php on line 19\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpjxhqoz5a.php\
    \ on line 22\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpjxhqoz5a.php on line 19\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpjxhqoz5a.php\
    \ on line 22\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpjxhqoz5a.php on line 19\n\nWarning"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $temp = [];\n    foreach ($arr as $k => $v) {\n        $temp[$k] = strlen($v);\n\
    \    }\n    return $temp;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjrv5yejg.php:31\n\
    Stack trace:\n#0 /tmp/tmpjrv5yejg.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpjrv5yejg.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $words = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'];\n    $result = [];\n    foreach ($arr as $item) {\n        if (in_array($item,\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9])) {\n            $result[] = $words[$item - 1];\n\
    \        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphdn8e6x1.php:33\n\
    Stack trace:\n#0 /tmp/tmphdn8e6x1.php(40): test()\n#1 {main}\n  thrown in /tmp/tmphdn8e6x1.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $map = [\n        1 => 'One',\n        2 => 'Two',\n        3 => 'Three',\n\
    \        4 => 'Four',\n        5 => 'Five',\n        6 => 'Six',\n        7 =>\
    \ 'Seven',\n        8 => 'Eight',\n        9 => 'Nine'\n    ];\n    $result =\
    \ [];\n    $arr = array_filter($arr, function($item) {\n        return $item >=\
    \ 1 && $item <= 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n\
    \    foreach ($arr as $item) {\n        $result[] = $map[$item];\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$length = count($arr);\n\tfor ($i = 0; $i < $length - 1; $i++) {\n\t\t\
    for ($j = $i + 1; $j < $length; $j++) {\n\t\t\tif ($arr[$i] > $arr[$j]) {\n\t\t\
    \t\t$temp = $arr[$i];\n\t\t\t\t$arr[$i] = $arr[$j];\n\t\t\t\t$arr[$j] = $temp;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn $arr;\n}\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmyhka4d5.php:36\n\
    Stack trace:\n#0 /tmp/tmpmyhka4d5.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpmyhka4d5.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $freq = array_count_values($arr);\n    arsort($freq);\n    return $freq;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvm9ztcem.php:29\n\
    Stack trace:\n#0 /tmp/tmpvm9ztcem.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpvm9ztcem.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $str = array_map(function($number) {\n    $number = ($number == '1') ?\
    \ 'One' : $number;\n    $number = ($number == '2') ? 'Two' : $number;\n    $number\
    \ = ($number == '3') ? 'Three' : $number;\n    $number = ($number == '4') ? 'Four'\
    \ : $number;\n    $number = ($number == '5') ? 'Five' : $number;\n    $number\
    \ = ($number == '6') ? 'Six' : $number;\n    $number = ($number == '7') ? 'Seven'\
    \ : $number;\n    $number = ($number == '8') ? 'Eight' : $number;\n    $number\
    \ = ($number == '9') ? 'Nine' : $number;\n    return $number;\n  }, $arr);\n \
    \ $str = array_filter($str, function($value) {\n    return ($value == 'One' ||\
    \ $value == 'Two' || $value == 'Three' || $value == 'Four' || $value == 'Five'\
    \ || $value == 'Six' || $value == 'Seven' || $value == 'Eight' || $value == 'Nine');\n\
    \  });\n  return $str;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_200i40s.php:42\n\
    Stack trace:\n#0 /tmp/tmp_200i40s.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp_200i40s.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $sorted_arr = $arr;\n    sort($sorted_arr);\n    return array_reverse($sorted_arr);\n\
    }\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmrgx0lxq.php:28\n\
    Stack trace:\n#0 /tmp/tmpmrgx0lxq.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpmrgx0lxq.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$sortArr = [];\n\t$sortArrNum = [];\n\t$sortArrStr = [];\n\tforeach ($arr\
    \ as $a) {\n\t\tif ($a >= 1 && $a <= 9) {\n\t\t\tif (is_string($a)) {\n\t\t\t\t\
    $sortArrStr[] = $a;\n\t\t\t} else {\n\t\t\t\t$sortArrNum[] = $a;\n\t\t\t}\n\t\t\
    }\n\t}\n\tsort($sortArrNum);\n\tsort($sortArrStr);\n\t$sortArr = array_merge($sortArrNum,\
    \ $sortArrStr);\n\t$sortArr = array_reverse($sortArr);\n\tforeach ($sortArr as\
    \ $k => $s) {\n\t\tif (is_numeric($s)) {\n\t\t\t$sortArr[$k] = getName($s);\n\t\
    \t}\n\t}\n\treturn $sortArr;\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function getName() in\
    \ /tmp/tmpscwn1ozb.php:37\nStack trace:\n#0 /tmp/tmpscwn1ozb.php(44): by_length(Array)\n\
    #1 /tmp/tmpscwn1ozb.php(48): candidate(Array)\n#2 /tmp/tmpscwn1ozb.php(55): test()\n\
    #3 {main}\n  thrown in /tmp/tmpscwn1ozb.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    return count($arr);\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpitogdako.php:26\n\
    Stack trace:\n#0 /tmp/tmpitogdako.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpitogdako.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_ = [];\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $arr_[$i] = strlen($arr[$i]);\n    }\n    return $arr_;\n}\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp170k2i9t.php:31\n\
    Stack trace:\n#0 /tmp/tmp170k2i9t.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp170k2i9t.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $result = array();\n    foreach ($arr as $item) {\n        if (strlen($item)\
    \ === 1) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9upuklqa.php:34\n\
    Stack trace:\n#0 /tmp/tmp9upuklqa.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp9upuklqa.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = sizeof($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu1w9c2sp.php:37\n\
    Stack trace:\n#0 /tmp/tmpu1w9c2sp.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpu1w9c2sp.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $result = array();\n  foreach ($arr as $key => $value) {\n    $result[$key]\
    \ = strlen($value);\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpczkw5x2s.php:31\n\
    Stack trace:\n#0 /tmp/tmpczkw5x2s.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpczkw5x2s.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $counts = array_count_values($arr);\n  $newArr = array();\n  foreach ($counts\
    \ as $k => $v) {\n    $newArr[$k] = strlen($k);\n  }\n  asort($newArr);\n  $retArr\
    \ = array();\n  foreach ($newArr as $k => $v) {\n    for ($i = 0; $i < $counts[$k];\
    \ $i++) {\n      $retArr[] = $k;\n    }\n  }\n  return $retArr;\n}\n$numbers_names\
    \ = [\n  \"One\",\n  \"Two\",\n  \"Three\",\n  \"Four\",\n  \"Five\",\n  \"Six\"\
    ,\n  \"Seven\",\n  \"Eight\",\n  \"Nine\"\n];\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdr_x7m9_.php:49\n\
    Stack trace:\n#0 /tmp/tmpdr_x7m9_.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpdr_x7m9_.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $res = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        if ($arr[$i] > 0 && $arr[$i] < 10) {\n            $res[] = $arr[$i];\n\
    \        }\n    }\n    sort($res);\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvlnpc44y.php:35\n\
    Stack trace:\n#0 /tmp/tmpvlnpc44y.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpvlnpc44y.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv3xwe2sj.php:28\n\
    Stack trace:\n#0 /tmp/tmpv3xwe2sj.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpv3xwe2sj.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    return array_map(function($n) {\n      return strlen($n);\n    }, $arr);\n\
    \  }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !==\
    \ array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpelce9q25.php:29\n\
    Stack trace:\n#0 /tmp/tmpelce9q25.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpelce9q25.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $numbers = [\n    1 => 'One',\n    2 => 'Two',\n    3 => 'Three',\n   \
    \ 4 => 'Four',\n    5 => 'Five',\n    6 => 'Six',\n    7 => 'Seven',\n    8 =>\
    \ 'Eight',\n    9 => 'Nine'\n  ];\n  $result = [];\n  foreach ($arr as $key =>\
    \ $value) {\n    if ($value >= 1 && $value <= 9) {\n      $result[] = $value;\n\
    \    }\n  }\n  sort($result);\n  $result = array_reverse($result);\n  foreach\
    \ ($result as $key => $value) {\n    $result[$key] = $numbers[$value];\n  }\n\
    \  return $result;\n}\n\n$output_array = by_length([1, -1 , 55]);\nvar_dump($output_array);\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(1) {\n  [0]=>\n  string(3) \"One\"\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $table = [\n        '1' => 'One',\n        '2' => 'Two',\n        '3'\
    \ => 'Three',\n        '4' => 'Four',\n        '5' => 'Five',\n        '6' =>\
    \ 'Six',\n        '7' => 'Seven',\n        '8' => 'Eight',\n        '9' => 'Nine'\n\
    \    ];\n    $nums = [];\n    foreach ($arr as $num) {\n        if (isset($table[$num]))\
    \ {\n            $nums[] = $num;\n        }\n    }\n    sort($nums);\n    $nums\
    \ = array_reverse($nums);\n    $result = [];\n    foreach ($nums as $num) {\n\
    \        $result[] = $table[$num];\n    }\n    return $result;\n}\n\nprint_r(by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3]));\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $new_arr = [];\n  for ($i = 0; $i < count($arr); $i++) {\n    $new_arr[$i]\
    \ = strlen($arr[$i]);\n  }\n  return $new_arr;\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqeqpg5lh.php:30\n\
    Stack trace:\n#0 /tmp/tmpqeqpg5lh.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpqeqpg5lh.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$i = 0;\n\twhile ($i < count($arr)) {\n\t\tif (strlen($arr[$i]) === 1)\
    \ {\n\t\t\t$new_arr[] = $arr[$i];\n\t\t}\n\t\t$i++;\n\t}\n\treturn $new_arr;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzxnkojne.php:34\n\
    Stack trace:\n#0 /tmp/tmpzxnkojne.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpzxnkojne.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $result = array();\n    foreach ($arr as $key => $value) {\n        $result[$key]\
    \ = strlen($value);\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkg94lt5h.php:30\n\
    Stack trace:\n#0 /tmp/tmpkg94lt5h.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpkg94lt5h.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$lengths = array_map('strlen', $arr);\n\tarray_multisort($lengths, SORT_DESC,\
    \ $arr);\n\treturn $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwazpchu2.php:29\n\
    Stack trace:\n#0 /tmp/tmpwazpchu2.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpwazpchu2.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\tusort($arr, function($a, $b) {\n    \treturn strlen($b) - strlen($a);\n\
    \t});\n\treturn $arr;\n}\n$nums = array(\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n$nums = by_length($nums);\n\
    $result = array();\n$j = 1;\n$count = 0;\n\nfor ($i = 0; $i < count($arr); $i++)\
    \ {\n\tif ($arr[$i] <= 9 && $arr[$i] >= 1) {\n\t\t$count++;\n\t}\n}\n\n$sorted_arr\
    \ = array();\n\nfor ($i = 0; $i < count($arr); $i++) {\n\tif ($arr[$i] <= 9 &&\
    \ $arr[$i] >= 1) {\n\t\t$sorted_arr[$j] = $arr[$i];\n\t\t$j++;\n\t}\n}\n\nsort($sorted_arr);\n\
    \n$sorted_arr = array_reverse($sorted_arr);\n\nfor ($i = 0; $i < count($sorted_arr);\
    \ $i++) {\n\tif ($sorted_arr[$i] == 1) {\n\t\t$result[$i] = $nums[0];\n\t} elseif\
    \ ($sorted_arr[$i] == 2) {\n\t\t$result[$i] = $nums[1];\n\t} elseif ($sorted_arr[$i]\
    \ == 3) {\n\t\t$result[$i] = $nums[2];\n\t} elseif ($sorted_arr[$i] == 4) {\n\t\
    \t$result[$i] = $nums[3];\n\t} elseif ($sorted_arr[$i] == 5) {\n\t\t$result[$i]\
    \ = $nums[4];\n\t} elseif ($sorted_arr[$i] == 6) {\n\t\t$result[$i] = $nums[5];\n\
    \t} elseif ($sorted_arr[$i] == 7) {\n\t\t$result[$\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpui0ual70.php on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    usort($arr, function($a, $b) {\n        return strlen($b) - strlen($a);\n\
    \    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo38ja3q3.php:30\n\
    Stack trace:\n#0 /tmp/tmpo38ja3q3.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpo38ja3q3.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgd7gta5v.php:36\n\
    Stack trace:\n#0 /tmp/tmpgd7gta5v.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpgd7gta5v.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $n = count($arr);\n  for ($i = 0; $i < $n; $i++) {\n    for ($j = $i +\
    \ 1; $j < $n; $j++) {\n      if (strlen($arr[$i]) > strlen($arr[$j])) {\n    \
    \    $tmp = $arr[$i];\n        $arr[$i] = $arr[$j];\n        $arr[$j] = $tmp;\n\
    \      }\n    }\n  }\n  return $arr;\n}\n\nfunction candidate(...$args) {\n  \
    \  return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq0zonwn7.php:37\n\
    Stack trace:\n#0 /tmp/tmpq0zonwn7.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpq0zonwn7.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\tfor ($i = 0; $i < count($arr) - 1; $i++) {\n\t\tfor ($j = $i + 1; $j <\
    \ count($arr); $j++) {\n\t\t\tif (strlen($arr[$i]) > strlen($arr[$j])) {\n\t\t\
    \t\t$temp = $arr[$i];\n\t\t\t\t$arr[$i] = $arr[$j];\n\t\t\t\t$arr[$j] = $temp;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn $arr;\n}\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdc25hx1j.php:35\n\
    Stack trace:\n#0 /tmp/tmpdc25hx1j.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpdc25hx1j.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    sort($arr);\n    return array_reverse($arr);\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_wqbdc1j.php:28\n\
    Stack trace:\n#0 /tmp/tmp_wqbdc1j.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp_wqbdc1j.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr = array_map('strval', $arr);\n    usort($arr, function($a, $b) {\n\
    \        return strlen($b) - strlen($a);\n    });\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9_cy4slv.php:31\n\
    Stack trace:\n#0 /tmp/tmp9_cy4slv.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp9_cy4slv.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    // your code here\n}\n\nvar_dump(by_length([2, 1, 1, 4, 5, 8, 2, 3]));\
    \ // returns ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']\n\
    var_dump(by_length([])); // returns []\nvar_dump(by_length([1, -1 , 55])); //\
    \ returns ['One']\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "NULL\nNULL\nNULL\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyc5pqy13.php:30\n\
    Stack trace:\n#0 /tmp/tmpyc5pqy13.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpyc5pqy13.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    //\n}\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\necho implode(', ', by_length($arr));\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: implode(): Invalid arguments passed in /tmp/tmp4t4w1bcf.php\
    \ on line 22\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4t4w1bcf.php:28\n\
    Stack trace:\n#0 /tmp/tmp4t4w1bcf.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp4t4w1bcf.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    usort($arr, function($a, $b) {\n        return strlen($b) - strlen($a);\n\
    \    });\n    return $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmta6j3em.php:29\n\
    Stack trace:\n#0 /tmp/tmpmta6j3em.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpmta6j3em.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $len = count($arr);\n  for ($i = 0; $i < $len - 1; $i++) {\n    for ($j\
    \ = $i + 1; $j < $len; $j++) {\n      if ($arr[$i] > $arr[$j]) {\n        $temp\
    \ = $arr[$i];\n        $arr[$i] = $arr[$j];\n        $arr[$j] = $temp;\n     \
    \ }\n    }\n  }\n  return $arr;\n}\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwswqxaqs.php:36\n\
    Stack trace:\n#0 /tmp/tmpwswqxaqs.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpwswqxaqs.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr = array_unique($arr);\n    foreach ($arr as $key => $value) {\n\
    \        $length[$key] = strlen($value);\n    }\n    array_multisort($length,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n\
    $my_arr = $arr;\n$arr = by_length($arr);\n$arr = array_reverse($arr);\n$ar = [];\n\
    foreach ($arr as $value) {\n    switch ($value) {\n        case 1:\n         \
    \   $ar[] = \"One\";\n            break;\n        case 2:\n            $ar[] =\
    \ \"Two\";\n            break;\n        case 3:\n            $ar[] = \"Three\"\
    ;\n            break;\n        case 4:\n            $ar[] = \"Four\";\n      \
    \      break;\n        case 5:\n            $ar[] = \"Five\";\n            break;\n\
    \        case 6:\n            $ar[] = \"Six\";\n            break;\n        case\
    \ 7:\n            $ar[] = \"Seven\";\n            break;\n        case 8:\n  \
    \          $ar[] = \"Eight\";\n            break;\n        case 9:\n         \
    \   $ar[] = \"Nine\";\n            break;\n    }\n}\nprint_r($ar);\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => One\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmptvyx82ni.php:69\nStack trace:\n#0 /tmp/tmptvyx82ni.php(76):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmptvyx82ni.php on line 69\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$arr = sort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = strval($arr);\n\
    \t$arr = str_split($arr);\n\tforeach ($arr as $value) {\n\t\tswitch ($value) {\n\
    \t\t\tcase '1':\n\t\t\t\t$value = 'One';\n\t\t\t\tbreak;\n\t\t\tcase '2':\n\t\t\
    \t\t$value = 'Two';\n\t\t\t\tbreak;\n\t\t\tcase '3':\n\t\t\t\t$value = 'Three';\n\
    \t\t\t\tbreak;\n\t\t\tcase '4':\n\t\t\t\t$value = 'Four';\n\t\t\t\tbreak;\n\t\t\
    \tcase '5':\n\t\t\t\t$value = 'Five';\n\t\t\t\tbreak;\n\t\t\tcase '6':\n\t\t\t\
    \t$value = 'Six';\n\t\t\t\tbreak;\n\t\t\tcase '7':\n\t\t\t\t$value = 'Seven';\n\
    \t\t\t\tbreak;\n\t\t\tcase '8':\n\t\t\t\t$value = 'Eight';\n\t\t\t\tbreak;\n\t\
    \t\tcase '9':\n\t\t\t\t$value = 'Nine';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\
    \tbreak;\n\t\t}\n\t}\n\treturn $arr;\n}\n\nfunction candidate(...$args) {\n  \
    \  return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_reverse() expects parameter 1 to be array, bool given\
    \ in /tmp/tmp1731j2i1.php on line 20\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp1731j2i1.php:64\nStack trace:\n#0 /tmp/tmp1731j2i1.php(71):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1731j2i1.php on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    usort($arr, function($a, $b) {\n        return strlen($b) - strlen($a);\n\
    \    });\n    return $arr;\n}\n\n$arr = [8, 5, 4, 3, 2, 2, 1, 1];\n\n$sortNum\
    \ = by_length($arr);\n\nvar_dump($sortNum);\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "array(8) {\n  [0]=>\n  int(8)\n  [1]=>\n  int(5)\n  [2]=>\n  int(4)\n \
    \ [3]=>\n  int(3)\n  [4]=>\n  int(2)\n  [5]=>\n  int(2)\n  [6]=>\n  int(1)\n \
    \ [7]=>\n  int(1)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgt3_ex7_.php:35\n\
    Stack trace:\n#0 /tmp/tmpgt3_ex7_.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpgt3_ex7_.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$out = [];\n\t$arr_count = count($arr);\n\tfor ($i = 0; $i < $arr_count;\
    \ $i++) {\n\t\t$out[$i] = strlen($arr[$i]);\n\t}\n\treturn $out;\n}\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpovofd960.php:31\n\
    Stack trace:\n#0 /tmp/tmpovofd960.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpovofd960.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $counts = array_count_values($arr);\n  asort($counts);\n  $counts = array_keys($counts);\n\
    \  return $counts;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1x6nt0qw.php:30\n\
    Stack trace:\n#0 /tmp/tmp1x6nt0qw.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp1x6nt0qw.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    return strlen($arr);\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: strlen() expects parameter 1 to be string, array given in /tmp/tmp61rpwsww.php\
    \ on line 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp61rpwsww.php:26\n\
    Stack trace:\n#0 /tmp/tmp61rpwsww.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp61rpwsww.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $length = count($arr);\n    for ($i = 0; $i < $length; $i++) {\n    \
    \    for ($j = 0; $j < $length - 1; $j++) {\n            if (strlen($arr[$j])\
    \ > strlen($arr[$j + 1])) {\n                $tmp = $arr[$j];\n              \
    \  $arr[$j] = $arr[$j + 1];\n                $arr[$j + 1] = $tmp;\n          \
    \  }\n        }\n    }\n    return $arr;\n}\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwq9lp49.php:36\n\
    Stack trace:\n#0 /tmp/tmpuwq9lp49.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpuwq9lp49.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $counts = array_count_values($arr);\n  arsort($counts);\n  $arr = array_keys($counts);\n\
    \  return $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwe7ja387.php:29\n\
    Stack trace:\n#0 /tmp/tmpwe7ja387.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpwe7ja387.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    usort($arr, function($a, $b) {\n        return strlen($b) - strlen($a);\n\
    \    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2yi3sk1l.php:30\n\
    Stack trace:\n#0 /tmp/tmp2yi3sk1l.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp2yi3sk1l.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$lengths = array_map('strlen', $arr);\n\tarray_multisort($lengths, SORT_DESC,\
    \ $arr);\n\treturn $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp94qd_bew.php:28\n\
    Stack trace:\n#0 /tmp/tmp94qd_bew.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp94qd_bew.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = [];\n    foreach ($arr as $key => $value) {\n        $len[$key]\
    \ = strlen($value);\n    }\n    array_multisort($len, SORT_DESC, $arr);\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvxtzv3s2.php:32\n\
    Stack trace:\n#0 /tmp/tmpvxtzv3s2.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpvxtzv3s2.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    // Your code here\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz6aav81g.php:27\n\
    Stack trace:\n#0 /tmp/tmpz6aav81g.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpz6aav81g.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  if(empty($arr)) return [];\n  $r = [];\n  foreach ($arr as $key => $value)\
    \ {\n    if($value < 0 || $value > 9) unset($arr[$key]);\n  }\n  rsort($arr);\n\
    \  $arr = array_values($arr);\n  foreach ($arr as $key => $value) {\n    switch\
    \ ($value) {\n      case 1:\n        $r[] = 'One';\n        break;\n      case\
    \ 2:\n        $r[] = 'Two';\n        break;\n      case 3:\n        $r[] = 'Three';\n\
    \        break;\n      case 4:\n        $r[] = 'Four';\n        break;\n     \
    \ case 5:\n        $r[] = 'Five';\n        break;\n      case 6:\n        $r[]\
    \ = 'Six';\n        break;\n      case 7:\n        $r[] = 'Seven';\n        break;\n\
    \      case 8:\n        $r[] = 'Eight';\n        break;\n      case 9:\n     \
    \   $r[] = 'Nine';\n        break;\n    }\n  }\n  return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    usort($arr, function($a, $b) {\n        return strlen($b) - strlen($a);\n\
    \    });\n    return $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa7tq9gm3.php:29\n\
    Stack trace:\n#0 /tmp/tmpa7tq9gm3.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpa7tq9gm3.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t// TODO: implement me!\n\t$arr1 = array();\n\t$n = count($arr);\n\tif ($n\
    \ == 0)\n\t\treturn [];\n\tfor ($i = 0; $i < $n; $i++) {\n\t\tif ($arr[$i] >=\
    \ 1 && $arr[$i] <= 9)\n\t\t\tarray_push($arr1, $arr[$i]);\n\t}\n\tsort($arr1);\n\
    \t$arr1 = array_reverse($arr1);\n\t$arr2 = array();\n\t$arr0 = array('One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine');\n\tfor ($i = 0; $i\
    \ < count($arr1); $i++) {\n\t\t$k = $arr1[$i] - 1;\n\t\tarray_push($arr2, $arr0[$k]);\n\
    \t}\n\treturn $arr2;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    // your code here ...\n    return $arr;\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz2rd15nh.php:27\n\
    Stack trace:\n#0 /tmp/tmpz2rd15nh.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpz2rd15nh.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $counts = array_count_values($arr);\n    arsort($counts);\n    return\
    \ array_keys($counts);\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjsg_ec0s.php:29\n\
    Stack trace:\n#0 /tmp/tmpjsg_ec0s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpjsg_ec0s.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t// TODO\n\t$numArr = [];\n\tforeach ($arr as $num) {\n\t\tif ($num >= 1\
    \ && $num <= 9) {\n\t\t\t$numArr[] = $num;\n\t\t}\n\t}\n\tsort($numArr);\n\t$numArr\
    \ = array_reverse($numArr);\n\treturn $numArr;\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpabyah5l8.php:35\n\
    Stack trace:\n#0 /tmp/tmpabyah5l8.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpabyah5l8.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $lengths = array_map('strlen', $arr);\n  array_multisort($lengths, SORT_DESC,\
    \ $arr);\n  return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphtcx0syy.php:29\n\
    Stack trace:\n#0 /tmp/tmphtcx0syy.php(36): test()\n#1 {main}\n  thrown in /tmp/tmphtcx0syy.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\treturn function($a, $b) use ($arr) {\n\t\treturn strlen($arr[$a]) < strlen($arr[$b]);\n\
    \t};\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !==\
    \ array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnv9yma9.php:28\n\
    Stack trace:\n#0 /tmp/tmpxnv9yma9.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpxnv9yma9.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $length = count($arr);\n    for ($i = 0; $i < $length; $i++) {\n    \
    \    for ($j = 0; $j < $length - 1; $j++) {\n            if (strlen($arr[$j])\
    \ > strlen($arr[$j + 1])) {\n                $t = $arr[$j];\n                $arr[$j]\
    \ = $arr[$j + 1];\n                $arr[$j + 1] = $t;\n            }\n       \
    \ }\n    }\n    return $arr;\n}\n\n$arr = [0, 2, 1, 1, 4, 5, 8, 2, 3];\n$arr =\
    \ array_reverse($arr);\n$arr = array_unique($arr);\n$arr = array_filter($arr,\
    \ function($val) {\n    return $val > 0 && $val < 10;\n});\n$arr = by_length($arr);\n\
    foreach ($arr as $val) {\n    switch ($val) {\n        case 1:\n            echo\
    \ \"One\";\n            break;\n        case 2:\n            echo \"Two\";\n \
    \           break;\n        case 3:\n            echo \"Three\";\n           \
    \ break;\n        case 4:\n            echo \"Four\";\n            break;\n  \
    \      case 5:\n            echo \"Five\";\n            break;\n        case 6:\n\
    \            echo \"Six\";\n            break;\n        case 7:\n            echo\
    \ \"Seven\";\n            break;\n        case 8:\n            echo \"Eight\"\
    ;\n            break;\n        case 9:\n            echo \"Nine\";\n         \
    \   break;\n    }\n    echo \"<br>\";\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "Three<br>Two<br>Eight<br>Five<br>Four<br>One<br>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpltce_8e4.php:76\nStack trace:\n#0 /tmp/tmpltce_8e4.php(83):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpltce_8e4.php on line 76\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr = array_filter($arr, function($element) {\n        return $element\
    \ >= 1 && $element <= 9;\n    });\n    rsort($arr);\n    $arr = array_map(function($element)\
    \ {\n        switch ($element) {\n            case 1:\n                return\
    \ 'One';\n            case 2:\n                return 'Two';\n            case\
    \ 3:\n                return 'Three';\n            case 4:\n                return\
    \ 'Four';\n            case 5:\n                return 'Five';\n            case\
    \ 6:\n                return 'Six';\n            case 7:\n                return\
    \ 'Seven';\n            case 8:\n                return 'Eight';\n           \
    \ case 9:\n                return 'Nine';\n        }\n    }, $arr);\n    return\
    \ $arr;\n}\nprint_r(by_length([2, 1, 1, 4, 5, 8, 2, 3]));\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $result = [];\n    foreach ($arr as $k => $v) {\n        if (strlen($v)\
    \ != 1)\n            continue;\n        $result[] = $v;\n    }\n    return $result;\n\
    }\n\n$arr = [];\n$arr[] = [2, 1, 1, 4, 5, 8, 2, 3];\n$arr[] = [];\n$arr[] = [1,\
    \ -1 , 55];\n$arr[] = [1, 1, 2, 2, 3, 4, 5, 8];\n$arr[] = [8, 5, 4, 3, 2, 2, 1,\
    \ 1];\n$arr[] = [55, 1, -1];\n$arr[] = [1];\n\nforeach ($arr as $v) {\n    //\
    \ echo implode(' ', $v) . \"\\n\";\n    $result = by_length($v);\n    echo implode('\
    \ ', $result) . \"\\n\";\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "2 1 1 4 5 8 2 3\n\n1\n1 1 2 2 3 4 5 8\n8 5 4 3 2 2 1 1\n1\n1\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmprjdwzz7f.php:47\nStack trace:\n\
    #0 /tmp/tmprjdwzz7f.php(54): test()\n#1 {main}\n  thrown in /tmp/tmprjdwzz7f.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t// Write your code here.\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjv3r4_lh.php:27\n\
    Stack trace:\n#0 /tmp/tmpjv3r4_lh.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpjv3r4_lh.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    usort($arr, function($a, $b) {\n        if (strlen($a) == strlen($b))\
    \ {\n            return 0;\n        }\n        return (strlen($a) < strlen($b))\
    \ ? -1 : 1;\n    });\n    return $arr;\n}\nfunction candidate(...$args) {\n  \
    \  return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaui_i144.php:32\n\
    Stack trace:\n#0 /tmp/tmpaui_i144.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpaui_i144.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $length = array();\n    foreach ($arr as $key => $row) {\n        $length[$key]\
    \ = strlen($row);\n    }\n    array_multisort($length, SORT_DESC, $arr);\n   \
    \ return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9y4to9yk.php:32\n\
    Stack trace:\n#0 /tmp/tmp9y4to9yk.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp9y4to9yk.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    // Code here\n    $new = [];\n    foreach ($arr as $v) {\n        if\
    \ ($v >= 1 && $v <= 9) {\n            $new[] = $v;\n        }\n    }\n    sort($new);\n\
    \    $new = array_reverse($new);\n    $new = array_map(function($v) {\n      \
    \  switch ($v) {\n            case 1:\n                return 'One';\n       \
    \     case 2:\n                return 'Two';\n            case 3:\n          \
    \      return 'Three';\n            case 4:\n                return 'Four';\n\
    \            case 5:\n                return 'Five';\n            case 6:\n  \
    \              return 'Six';\n            case 7:\n                return 'Seven';\n\
    \            case 8:\n                return 'Eight';\n            case 9:\n \
    \               return 'Nine';\n        }\n    }, $new);\n    return $new;\n}\n\
    \nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    usort($arr, function($a, $b) {\n        return strlen($b) - strlen($a);\n\
    \    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo0_cot_0.php:30\n\
    Stack trace:\n#0 /tmp/tmpo0_cot_0.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpo0_cot_0.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$ret_arr = [];\n\tforeach ($arr as $key => $value) {\n\t\t$tmp = [];\n\t\
    \tif($value > 0 && $value < 10){\n\t\t\t$length = strlen($value);\n\t\t\t$tmp['value']\
    \ = $value;\n\t\t\t$tmp['length'] = $length;\n\t\t\t$ret_arr[] = $tmp;\n\t\t}\n\
    \t}\n\t\n\t//var_dump($ret_arr);\n\tusort($ret_arr, function($a, $b) {\n\t\treturn\
    \ $a['length'] - $b['length'];\n\t});\n\t//var_dump($ret_arr);\n\t$arr = [];\n\
    \tforeach ($ret_arr as $key => $value) {\n\t\t$arr[] = $value['value'];\n\t}\n\
    \treturn $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd_ye0phc.php:47\n\
    Stack trace:\n#0 /tmp/tmpd_ye0phc.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpd_ye0phc.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $temp_arr = array();\n    foreach ($arr as $key => $value) {\n      \
    \  $temp_arr[$key] = strlen($value);\n    }\n    array_multisort($temp_arr, SORT_DESC,\
    \ $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvsijeprw.php:31\n\
    Stack trace:\n#0 /tmp/tmpvsijeprw.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpvsijeprw.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $output = [];\n    for ($i = 0; $i < count($arr); $i++) {\n        $output[strlen($arr[$i])]\
    \ = $arr[$i];\n    }\n    return $output;\n}\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbg0e21gx.php:30\n\
    Stack trace:\n#0 /tmp/tmpbg0e21gx.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpbg0e21gx.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = 0;\n    $ret = [];\n    foreach ($arr as $x) {\n        $l = strlen($x);\n\
    \        if (!isset($ret[$l])) $ret[$l] = [];\n        $ret[$l][] = $x;\n    }\n\
    \    return $ret;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpavanxy9p.php:33\n\
    Stack trace:\n#0 /tmp/tmpavanxy9p.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpavanxy9p.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$len = count($arr);\n\tfor ($i = 0; $i < $len; $i++) {\n\t\tfor ($j = $i\
    \ + 1; $j < $len; $j++) {\n\t\t\tif (strlen($arr[$i]) > strlen($arr[$j])) {\n\t\
    \t\t\t$temp = $arr[$i];\n\t\t\t\t$arr[$i] = $arr[$j];\n\t\t\t\t$arr[$j] = $temp;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn $arr;\n}\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphaj00ikw.php:36\n\
    Stack trace:\n#0 /tmp/tmphaj00ikw.php(43): test()\n#1 {main}\n  thrown in /tmp/tmphaj00ikw.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j\
    \ < count($arr); $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $tmp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $tmp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\n\n$arr = [1, 1, 2, 2, 3, 4, 5, 8];\n$arr = by_length($arr);\n$arr\
    \ = array_reverse($arr);\n$result = [];\nfor ($i = 0; $i < count($arr); $i++)\
    \ {\n    switch ($arr[$i]) {\n        case 1:\n            $result[] = \"One\"\
    ;\n            break;\n        case 2:\n            $result[] = \"Two\";\n   \
    \         break;\n        case 3:\n            $result[] = \"Three\";\n      \
    \      break;\n        case 4:\n            $result[] = \"Four\";\n          \
    \  break;\n        case 5:\n            $result[] = \"Five\";\n            break;\n\
    \        case 6:\n            $result[] = \"Six\";\n            break;\n     \
    \   case 7:\n            $result[] = \"Seven\";\n            break;\n        case\
    \ 8:\n            $result[] = \"Eight\";\n            break;\n        case 9:\n\
    \            $result[] = \"Nine\";\n            break;\n    }\n}\nvar_dump($result);\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(8) {\n  [0]=>\n  string(5) \"Eight\"\n  [1]=>\n  string(4) \"Five\"\
    \n  [2]=>\n  string(4) \"Four\"\n  [3]=>\n  string(5) \"Three\"\n  [4]=>\n  string(3)\
    \ \"Two\"\n  [5]=>\n  string(3) \"Two\"\n  [6]=>\n  string(3) \"One\"\n  [7]=>\n\
    \  string(3) \"One\"\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0yknena0.php:72\n\
    Stack trace:\n#0 /tmp/tmp0yknena0.php(79): test()\n#1 {main}\n  thrown in /tmp/tmp0yknena0.php\
    \ on line 72\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $result = array();\n    for ($i = count($arr); $i >= 0; $i--) {\n   \
    \     $result[] = get_value($arr[$i]);\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_value() in\
    \ /tmp/tmpdw1du8ib.php:21\nStack trace:\n#0 /tmp/tmpdw1du8ib.php(27): by_length(Array)\n\
    #1 /tmp/tmpdw1du8ib.php(31): candidate(Array)\n#2 /tmp/tmpdw1du8ib.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdw1du8ib.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $result = [];\n    foreach ($arr as $key => $value) {\n        if (in_array($value,\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9])) {\n            $result[] = $value;\n        }\n\
    \    }\n    sort($result);\n    $result = array_reverse($result);\n    foreach\
    \ ($result as $key => $value) {\n        switch ($value) {\n            case 1:\n\
    \                $result[$key] = 'One';\n                break;\n            case\
    \ 2:\n                $result[$key] = 'Two';\n                break;\n       \
    \     case 3:\n                $result[$key] = 'Three';\n                break;\n\
    \            case 4:\n                $result[$key] = 'Four';\n              \
    \  break;\n            case 5:\n                $result[$key] = 'Five';\n    \
    \            break;\n            case 6:\n                $result[$key] = 'Six';\n\
    \                break;\n            case 7:\n                $result[$key] =\
    \ 'Seven';\n                break;\n            case 8:\n                $result[$key]\
    \ = 'Eight';\n                break;\n            case 9:\n                $result[$key]\
    \ = 'Nine';\n                break;\n        }\n    }\n    return $result;\n}\n\
    echo '<pre>';\nprint_r(by_length([1, 2, 1, 4, 5, 8, 2, 3]));\necho '</pre>';\n\
    echo '<pre>';\nprint_r(by_length([]));\necho '</pre>';\necho '<pre>';\nprint_r(by_length([1,\
    \ -1 , 55]));\necho '</pre>';\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n   \
    \ [3] => Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n\
    )\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n(\n    [0] => One\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arrTemp = [];\n    $arr = array_unique($arr);\n    $arr = array_values($arr);\n\
    \    foreach ($arr as $item) {\n        $arrTemp[$item] = strlen($item);\n   \
    \ }\n    asort($arrTemp);\n    return array_keys($arrTemp);\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfod_rqwx.php:34\n\
    Stack trace:\n#0 /tmp/tmpfod_rqwx.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfod_rqwx.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    // sort the array\n    sort($arr);\n    // reverse the array\n    $arr\
    \ = array_reverse($arr);\n    // store numbers and corresponding string\n    $result\
    \ = [];\n    // store nums string\n    $nums = [\n        'One',\n        'Two',\n\
    \        'Three',\n        'Four',\n        'Five',\n        'Six',\n        'Seven',\n\
    \        'Eight',\n        'Nine'\n    ];\n    foreach ($arr as $key => $value)\
    \ {\n        // if the value is between 1 and 9\n        if ($value > 0 && $value\
    \ < 10) {\n            // push corresponding number to result\n            array_push($result,\
    \ $nums[$value - 1]);\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $length = count($arr);\n    for ($i = 0; $i < $length; $i++) {\n    \
    \    for ($j = 0; $j < $length; $j++) {\n            if ($arr[$i] > $arr[$j])\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppzvrseas.php:36\n\
    Stack trace:\n#0 /tmp/tmppzvrseas.php(43): test()\n#1 {main}\n  thrown in /tmp/tmppzvrseas.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $strings = array_map(function($n) {\n    return $n . \"\";\n  }, $arr);\n\
    \  array_multisort(array_map('strlen', $strings), $strings);\n  return $strings;\n\
    }\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfr6o4yo0.php:30\n\
    Stack trace:\n#0 /tmp/tmpfr6o4yo0.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpfr6o4yo0.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\tif(empty($arr)) {\n\t\treturn $arr;\n\t}\n\n\t$map = array(\n\t\t1 => 'One',\n\
    \t\t2 => 'Two',\n\t\t3 => 'Three',\n\t\t4 => 'Four',\n\t\t5 => 'Five',\n\t\t6\
    \ => 'Six',\n\t\t7 => 'Seven',\n\t\t8 => 'Eight',\n\t\t9 => 'Nine'\n\t);\n\n\t\
    sort($arr);\n\t$arr = array_reverse($arr);\n\t$res = array();\n\tforeach($arr\
    \ as $val) {\n\t\tif(isset($map[$val])) {\n\t\t\t$res[] = $map[$val];\n\t\t}\n\
    \t}\n\n\treturn $res;\n}\n\nprint_r(by_length([2, 1, 1, 4, 5, 8, 2, 3]));\nprint_r(by_length([]));\n\
    print_r(by_length([1, -1 , 55]));\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len - 1; $i++) {\n      \
    \  for ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp75os27x_.php:37\n\
    Stack trace:\n#0 /tmp/tmp75os27x_.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp75os27x_.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $numeric_array = array_filter($arr, 'is_numeric');\n    usort($numeric_array,\
    \ function($a, $b) {\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $numeric_array;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4dnn4p39.php:30\n\
    Stack trace:\n#0 /tmp/tmp4dnn4p39.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp4dnn4p39.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $length = [];\n    foreach ($arr as $key => $value) {\n        $length[$key]\
    \ = strlen($value);\n    }\n    array_multisort($length, SORT_DESC, $arr);\n \
    \   return $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyp10ewl4.php:31\n\
    Stack trace:\n#0 /tmp/tmpyp10ewl4.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpyp10ewl4.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $sorted = [];\n    foreach ($arr as $key => $value) {\n        $sorted[$key]\
    \ = strlen($value);\n    }\n    array_multisort($sorted, SORT_DESC, $arr);\n \
    \   return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps5livluk.php:32\n\
    Stack trace:\n#0 /tmp/tmps5livluk.php(39): test()\n#1 {main}\n  thrown in /tmp/tmps5livluk.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $counts = array_count_values($arr);\n    asort($counts);\n    $arr =\
    \ array_keys($counts);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz79b4o7l.php:30\n\
    Stack trace:\n#0 /tmp/tmpz79b4o7l.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpz79b4o7l.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    return count($arr);\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsqzy_1hl.php:27\n\
    Stack trace:\n#0 /tmp/tmpsqzy_1hl.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpsqzy_1hl.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $output = [];\n    for ($i = 1; $i <= 9; $i++) {\n        $output[$i]\
    \ = [];\n    }\n    foreach ($arr as $num) {\n        if ($num >= 1 && $num <=\
    \ 9) {\n            $output[$num][] = $num;\n        }\n    }\n    return $output;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdcytr141.php:36\n\
    Stack trace:\n#0 /tmp/tmpdcytr141.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpdcytr141.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\tif (count($arr) == 0) return array();\n\t$result = array();\n\tsort($arr);\n\
    \t$arr = array_reverse($arr);\n\tforeach ($arr as $a) {\n\t\tif ($a >= 1 && $a\
    \ <= 9) {\n\t\t\tswitch ($a) {\n\t\t\t\tcase 1:\n\t\t\t\t\t$result[] = \"One\"\
    ;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\t$result[] = \"Two\";\n\t\t\t\t\
    \tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\t$result[] = \"Three\";\n\t\t\t\t\tbreak;\n\
    \t\t\t\tcase 4:\n\t\t\t\t\t$result[] = \"Four\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase\
    \ 5:\n\t\t\t\t\t$result[] = \"Five\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 6:\n\t\t\
    \t\t\t$result[] = \"Six\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 7:\n\t\t\t\t\t$result[]\
    \ = \"Seven\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 8:\n\t\t\t\t\t$result[] = \"Eight\"\
    ;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 9:\n\t\t\t\t\t$result[] = \"Nine\";\n\t\t\t\t\
    \tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    return count($arr);\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu1gr5104.php:26\n\
    Stack trace:\n#0 /tmp/tmpu1gr5104.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpu1gr5104.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnshou3l1.php:27\n\
    Stack trace:\n#0 /tmp/tmpnshou3l1.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpnshou3l1.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\tusort($arr, function($a, $b) {\n\t\treturn strlen($b) - strlen($a);\n\t\
    });\n\treturn $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsll79uy6.php:29\n\
    Stack trace:\n#0 /tmp/tmpsll79uy6.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpsll79uy6.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\tfor ($i = 0; $i < count($arr); $i++) {\n\t\tfor ($j = 0; $j < count($arr);\
    \ $j++) {\n\t\t\tif (strlen($arr[$i]) > strlen($arr[$j])) {\n\t\t\t\t$temp = $arr[$i];\n\
    \t\t\t\t$arr[$i] = $arr[$j];\n\t\t\t\t$arr[$j] = $temp;\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkakkdcw1.php:35\n\
    Stack trace:\n#0 /tmp/tmpkakkdcw1.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpkakkdcw1.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $output = [];\n    $nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    foreach\
    \ ($arr as $val) {\n        if (in_array($val, $nums)) {\n            $output[]\
    \ = $val;\n        }\n    }\n    rsort($output);\n    return $output;\n}\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg6v5n12v.php:34\n\
    Stack trace:\n#0 /tmp/tmpg6v5n12v.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpg6v5n12v.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$numbers = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'];\n\t$result = [];\n\tfor ($i = 0; $i < count($arr); $i++) {\n\t\tif\
    \ ($arr[$i] > 0 && $arr[$i] < 10) {\n\t\t\tarray_push($result, $numbers[$arr[$i]\
    \ - 1]);\n\t\t}\n\t}\n\treturn $result;\n}\n\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n\
    echo \"<pre>\";\nprint_r(by_length($arr));\necho \"</pre>\";\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => Two\n    [1] => One\n    [2] => One\n    [3]\
    \ => Four\n    [4] => Five\n    [5] => Eight\n    [6] => Two\n    [7] => Three\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq5c7bwjw.php:39\n\
    Stack trace:\n#0 /tmp/tmpq5c7bwjw.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpq5c7bwjw.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$len = count($arr);\n\tfor ($i = 0; $i < $len; $i++) {\n\t\tfor ($j = $i\
    \ + 1; $j < $len; $j++) {\n\t\t\tif (strlen($arr[$i]) > strlen($arr[$j])) {\n\t\
    \t\t\t$temp = $arr[$i];\n\t\t\t\t$arr[$i] = $arr[$j];\n\t\t\t\t$arr[$j] = $temp;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn $arr;\n}\n\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf07k9z31.php:37\n\
    Stack trace:\n#0 /tmp/tmpf07k9z31.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpf07k9z31.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
