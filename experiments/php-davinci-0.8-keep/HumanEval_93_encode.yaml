name: HumanEval_93_encode
language: php
prompt: "<?php\n// Write a function that takes a message, and encodes in such a \n\
  // way that it swaps case of all letters, replaces all vowels in \n// the message\
  \ with the letter that appears 2 places ahead of that \n// vowel in the english\
  \ alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n//\
  \ 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode($message)\
  \ {\n"
tests: "function candidate(...$args) {\n    return encode(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"TEST\") !== \"tgst\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"Mudasir\") !== \"mWDCSKR\") { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(\"YES\") !== \"ygs\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"This is a message\") !==\
  \ \"tHKS KS C MGSSCGG\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  I DoNt KnOw WhAt tO WrItE\") !== \"k dQnT kNqW wHcT Tq wRkTg\") { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["\t$encodedMessage = '';\n\t$map = ['a' => 'c', 'e' => 'g', 'i' => 'k',\
    \ 'o' => 'q', 'u' => 'w'];\n\t$chars = str_split($message);\n\tfor ($i = 0; $i\
    \ < sizeof($chars); $i++) {\n\t\t$c = $chars[$i];\n\t\tif (preg_match('/[a-z]/',\
    \ $c)) {\n\t\t\t$c = (strtoupper($c) === $c) ? strtolower($c) : strtoupper($c);\n\
    \t\t\tif (array_key_exists($c, $map)) {\n\t\t\t\t$c = $map[$c];\n\t\t\t}\n\t\t\
    }\n\t\t$encodedMessage .= $c;\n\t}\n\treturn $encodedMessage;\n}\necho 'Expected:\
    \ TGST and Result: ' . encode('test') . \"\\n\";\necho 'Expected: tHKS KS C MGSSCGG\
    \ and Result: ' . encode('This is a message') . \"\\n\";", "    $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    $newMessage = '';\n    for ($i = 0; $i < strlen($message); $i++) {\n    \
    \    $letter = strtolower($message[$i]);\n        if (strpos($alphabet, $letter)\
    \ === false) {\n            $newMessage .= $message[$i];\n        } else {\n \
    \           if ($letter == 'z') {\n                $newMessage .= 'b';\n     \
    \       } else if ($letter == 'y') {\n                $newMessage .= 'a';\n  \
    \          } else {\n                $temp = strtolower($message[$i]);\n     \
    \           $temp = strpos($alphabet, $temp);\n                $temp += 2;\n \
    \               $temp = $alphabet[$temp];\n                $newMessage .= $temp;\n\
    \            }\n        }\n    }\n    return $newMessage;\n}\necho encode('test');\n\
    echo \"\\n\";\necho encode('This is a message');\necho \"\\n\";", "\t$result =\
    \ '';\n\tfor ($i = 0; $i < strlen($message); $i++) {\n\t\t$letter = $message[$i];\n\
    \t\tif ($letter === strtoupper($letter)) {\n\t\t\t$result .= strtolower($letter);\n\
    \t\t} else {\n\t\t\t$result .= strtoupper($letter);\n\t\t}\n\t}\n\t\n\t$vowels\
    \ = 'aeiou';\n\t$vowels_array = str_split($vowels);\n\tfor ($i = 0; $i < strlen($result);\
    \ $i++) {\n\t\t$letter = $result[$i];\n\t\tif (in_array($letter, $vowels_array))\
    \ {\n\t\t\tif ($letter === 'u') {\n\t\t\t\t$result[$i] = 'a';\n\t\t\t} else {\n\
    \t\t\t\t$index = array_search($letter, $vowels_array);\n\t\t\t\t$result[$i] =\
    \ $vowels_array[$index + 2];\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}\n\necho\
    \ encode('This is a message');\n", "\t$alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n\t$vowels = \"aeiou\";\n\t$encoded = \"\";\n\tfor ($i = 0; $i < strlen($message);\
    \ $i++) {\n\t\t$char = strtolower($message[$i]);\n\t\t$idx = strpos($alphabet,\
    \ $char);\n\t\tif (ctype_upper($message[$i])) {\n\t\t\t$encoded .= strtoupper($char);\n\
    \t\t} else if (ctype_lower($message[$i])) {\n\t\t\tif (strpos($vowels, $char)\
    \ !== false) {\n\t\t\t\t$idx += 2;\n\t\t\t\t$idx = $idx % strlen($alphabet);\n\
    \t\t\t\t$encoded .= $alphabet[$idx];\n\t\t\t} else {\n\t\t\t\t$encoded .= $char;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn $encoded;\n}\necho encode('test');\necho \"\\n\"\
    ;\necho encode('This is a message');\necho \"\\n\";", "  $vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n  $result = '';\n  for ($i = 0; $i < strlen($message); $i++)\
    \ {\n    $char = strtolower($message[$i]);\n    if (ctype_alpha($char)) {\n  \
    \    if (in_array($char, $vowels)) {\n        $result .= $vowels[array_search($char,\
    \ $vowels) + 2];\n      } else {\n        $result .= $char;\n      }\n    } else\
    \ {\n      $result .= $message[$i];\n    }\n  }\n  return $result;\n}\necho encode('test')\
    \ . PHP_EOL;\necho encode('This is a message') . PHP_EOL;", "    $vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n    $newMessage = '';\n    $space = '';\n    $loop = str_split($message);\n\
    \    for ($i = 0; $i < count($loop); $i++) {\n        $value = ord($loop[$i]);\n\
    \        if (ctype_alpha($loop[$i])) {\n            if (in_array($loop[$i], $vowels))\
    \ {\n                $newMessage .= chr($value + 2);\n            } else {\n \
    \               $newMessage .= chr($value + 4);\n            }\n        } else\
    \ {\n            $newMessage .= chr($value);\n        }\n    }\n    $newMessage\
    \ = strtolower($newMessage);\n    return $newMessage;\n}", "    $vowels = \"aeiou\"\
    ;\n    $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    $output = \"\";\n    for\
    \ ($i = 0; $i < strlen($message); $i++) {\n        $char = $message[$i];\n   \
    \     if (ctype_alpha($char)) {\n            if (ctype_upper($char)) {\n     \
    \           $char = strtolower($char);\n            } else {\n               \
    \ $char = strtoupper($char);\n            }\n            if (strpos($vowels, $char)\
    \ !== false) {\n                $char = $alphabet[(strpos($alphabet, $char) +\
    \ 2) % 26];\n            }\n        }\n        $output .= $char;\n    }\n    return\
    \ $output;\n}\necho encode('test') . \"\\n\";\necho encode('This is a message')\
    \ . \"\\n\";\n", "\t$message = strtolower($message);\n\t$vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n\t$encode = [];\n\t$len = strlen($message);\n\tfor ($i = 0; $i <\
    \ $len; $i++) {\n\t\t$char = $message[$i];\n\t\tif (ctype_upper($char)) {\n\t\t\
    \t$encode[] = strtolower($char);\n\t\t} elseif (in_array($char, $vowels)) {\n\t\
    \t\t$index = array_search($char, $vowels);\n\t\t\t$index += 2;\n\t\t\tif ($index\
    \ >= 5) {\n\t\t\t\t$index -= 5;\n\t\t\t}\n\t\t\t$encode[] = $vowels[$index];\n\
    \t\t} else {\n\t\t\t$encode[] = $char;\n\t\t}\n\t}\n\treturn implode('', $encode);\n\
    }\n\necho encode('test');\necho \"\\n\";\necho encode('This is a message');\n\
    echo \"\\n\";", "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $uppercase = [\n\
    \        'A' => 'C',\n        'E' => 'G',\n        'I' => 'K',\n        'O' =>\
    \ 'Q',\n        'U' => 'Y'\n    ];\n    $lowercase = [\n        'a' => 'c',\n\
    \        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' =>\
    \ 'y'\n    ];\n    $encoded = '';\n    for ($i = 0; $i < strlen($message); $i++)\
    \ {\n        $c = $message[$i];\n        if (in_array($c, $vowels)) {\n      \
    \      if (ctype_upper($c)) {\n                $encoded .= $uppercase[$c];\n \
    \           } else {\n                $encoded .= $lowercase[$c];\n          \
    \  }\n        } else {\n            if (ctype_upper($c)) {\n                $encoded\
    \ .= strtolower($c);\n            } else {\n                $encoded .= strtoupper($c);\n\
    \            }\n        }\n    }\n    return $encoded;\n}\n", "    $newMessage\
    \ = \"\";\n    for ($i = 0; $i < strlen($message); $i++) {\n        $tempChar\
    \ = $message[$i];\n        if ($tempChar == \"a\") {\n            $newMessage\
    \ .= \"c\";\n        } else if ($tempChar == \"e\") {\n            $newMessage\
    \ .= \"g\";\n        } else if ($tempChar == \"i\") {\n            $newMessage\
    \ .= \"k\";\n        } else if ($tempChar == \"o\") {\n            $newMessage\
    \ .= \"q\";\n        } else if ($tempChar == \"u\") {\n            $newMessage\
    \ .= \"w\";\n        } else if ($tempChar == \"A\") {\n            $newMessage\
    \ .= \"C\";\n        } else if ($tempChar == \"E\") {\n            $newMessage\
    \ .= \"G\";\n        } else if ($tempChar == \"I\") {\n            $newMessage\
    \ .= \"K\";\n        } else if ($tempChar == \"O\") {\n            $newMessage\
    \ .= \"Q\";\n        } else if ($tempChar == \"U\") {\n            $newMessage\
    \ .= \"W\";\n        } else if ($tempChar == \" \") {\n            $newMessage\
    \ .= \" \";\n        } else {\n            $newMessage .= strtoupper($tempChar);\n\
    \        }\n    }\n    return $newMessage;\n}\n\necho encode(\"test\") . PHP_EOL;\n\
    echo encode(\"This is a message\") . PHP_EOL;\n", "    $lower = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    $upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    $alphabet = $lower . $upper;\n\
    \    $vowels = \"aeiouAEIOU\";\n    $result = \"\";\n    for ($i = 0; $i < strlen($message);\
    \ $i++) {\n        $letter = $message[$i];\n        if (strpos($vowels, $letter)\
    \ !== false) {\n            $index = strpos($alphabet, $letter);\n           \
    \ $result .= $alphabet[($index + 2) % strlen($alphabet)];\n        } else {\n\
    \            $result .= $letter;\n        }\n    }\n    return $result;\n}", "\t\
    $vowels = array('a', 'e', 'i', 'o', 'u');\n\t$pos = 0;\n\t$r_string = '';\n\t\
    while ($pos < strlen($message)) {\n\t\tif (ctype_upper($message[$pos])) {\n\t\t\
    \t$r_string .= strtolower($message[$pos]);\n\t\t} elseif (ctype_lower($message[$pos]))\
    \ {\n\t\t\tif (in_array($message[$pos], $vowels)) {\n\t\t\t\t$index = array_search($message[$pos],\
    \ $vowels);\n\t\t\t\t$index += 2;\n\t\t\t\tif ($index > 4) {\n\t\t\t\t\t$index\
    \ -= 5;\n\t\t\t\t}\n\t\t\t\t$r_string .= $vowels[$index];\n\t\t\t} else {\n\t\t\
    \t\t$r_string .= strtoupper($message[$pos]);\n\t\t\t}\n\t\t}\n\t\t$pos++;\n\t\
    }\n\treturn $r_string;\n}\n", "\t$messageArray = str_split($message);\n\t$vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\t$newMessage = \"\";\n\tforeach ($messageArray\
    \ as $letter) {\n\t\tif (in_array($letter, $vowels)) {\n\t\t\t$letter = chr(ord($letter)\
    \ + 2);\n\t\t}\n\t\tif (ord($letter) > ord(\"Z\")) {\n\t\t\t$letter = chr(ord($letter)\
    \ - 26);\n\t\t}\n\t\t$newMessage .= strtoupper($letter);\n\t}\n\treturn $newMessage;\n\
    }\necho encode(\"This is a message\");", "    $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    $encoded = '';\n    for ($i = 0; $i < strlen($message); $i++) {\n       \
    \ if ($message[$i] == strtoupper($message[$i])) {\n            $encoded .= strtoupper($alphabet[strpos($alphabet,\
    \ strtolower($message[$i])) + 2]);\n        } else {\n            $encoded .=\
    \ $alphabet[strpos($alphabet, $message[$i]) + 2];\n        }\n    }\n    return\
    \ $encoded;\n}\n", "    // Your code here\n}\n", "    $vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n    $message = strtolower($message);\n    $message = str_split($message);\n\
    \    $newMessage = \"\";\n    for ($i = 0; $i < count($message); $i++) {\n   \
    \     if (in_array($message[$i], $vowels)) {\n            if (isset($message[$i\
    \ + 2])) {\n                $newMessage .= $message[$i + 2];\n            } else\
    \ {\n                $newMessage .= $message[$i];\n            }\n        } else\
    \ {\n            $newMessage .= $message[$i];\n        }\n    }\n    return strtoupper($newMessage);\n\
    }\n\n$test = encode('test');\nif ($test == 'TGST') {\n    echo \"test passed </br>\"\
    ;\n} else {\n    echo \"test failed </br>\";\n}\n\n$test = encode('This is a message');\n\
    if ($test == 'tHKS KS C MGSSCGG') {\n    echo \"test passed </br>\";\n} else {\n\
    \    echo \"test failed </br>\";\n}\n\n$test = encode('I am also a message');\n\
    if ($test == 'K CN KMQ NQ C GGSSCGG') {\n    echo \"test passed </br>\";\n} else\
    \ {\n    echo \"test failed </br>\";\n}\n", "    // your code here\n}", "    $alphabet\
    \ = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n    $new_message =\
    \ '';\n    for ($i = 0; $i < strlen($message); $i++) {\n        $letter = $message[$i];\n\
    \        if (ctype_upper($letter)) {\n            $letter = strtolower($letter);\n\
    \            $letter_pos = array_search($letter, $alphabet);\n            $new_letter\
    \ = strtoupper($alphabet[$letter_pos + 2]);\n            $new_message .= $new_letter;\n\
    \        } elseif (ctype_lower($letter)) {\n            $letter_pos = array_search($letter,\
    \ $alphabet);\n            $new_letter = $alphabet[$letter_pos + 2];\n       \
    \     $new_message .= $new_letter;\n        } else {\n            $new_message\
    \ .= $letter;\n        }\n    }\n    return $new_message;\n}\n\necho encode('test');\n\
    echo PHP_EOL;\necho encode('This is a message');", "\n}", "\t$newMessage = '';\n\
    \t$vowels = ['a', 'e', 'i', 'o', 'u'];\n\tfor ($i = 0; $i < strlen($message);\
    \ $i++) {\n\t\t$char = $message[$i];\n\t\tif (in_array($char, $vowels)) {\n\t\t\
    \t$next = nextVowel($char);\n\t\t\t$newMessage .= $next;\n\t\t} else {\n\t\t\t\
    $newMessage .= $char;\n\t\t}\n\t}\n\treturn strtoupper($newMessage);\n}\n", " \
    \ return strtoupper($message);\n}", "  $result = '';\n  $message = strtolower($message);\n\
    \  $vowels = ['a', 'e', 'i', 'o', 'u'];\n  $encoded_vowels = ['c', 'g', 'k', 'o',\
    \ 's'];\n  $message_length = strlen($message);\n  for ($i = 0; $i < $message_length;\
    \ $i++) {\n    $char = $message[$i];\n    if (in_array($char, $vowels)) {\n  \
    \    $result .= $encoded_vowels[array_search($char, $vowels)];\n    } else {\n\
    \      $result .= $char;\n    }\n  }\n  return strtoupper($result);\n}\n\nif (encode('test')\
    \ !== 'TGST') {\n  throw new Exception('expected TGST but got ' . encode('test'));\n\
    }\nif (encode('This is a message') !== 'tHKS KS C MGSSCGG') {\n  throw new Exception('expected\
    \ tHKS KS C MGSSCGG but got ' . encode('This is a message'));\n}", "    $vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    $message = strtolower($message);\n    $message\
    \ = str_split($message);\n    $new_message = [];\n    foreach ($message as $letter)\
    \ {\n        if (in_array($letter, $vowels)) {\n            $new_message[] = encodeVowel($letter);\n\
    \        } else {\n            $new_message[] = encodeLetter($letter);\n     \
    \   }\n    }\n    return implode('', $new_message);\n}\n", "  if (empty($message))\
    \ return \"\";\n  $array = str_split($message);\n  for ($i = 0; $i < count($array);\
    \ $i++) {\n    if ($array[$i] == \"a\") {\n      $array[$i] = \"c\";\n    } else\
    \ if ($array[$i] == \"e\") {\n      $array[$i] = \"g\";\n    } else if ($array[$i]\
    \ == \"i\") {\n      $array[$i] = \"k\";\n    } else if ($array[$i] == \"o\")\
    \ {\n      $array[$i] = \"q\";\n    } else if ($array[$i] == \"u\") {\n      $array[$i]\
    \ = \"y\";\n    } else if ($array[$i] == \"A\") {\n      $array[$i] = \"C\";\n\
    \    } else if ($array[$i] == \"E\") {\n      $array[$i] = \"G\";\n    } else\
    \ if ($array[$i] == \"I\") {\n      $array[$i] = \"K\";\n    } else if ($array[$i]\
    \ == \"O\") {\n      $array[$i] = \"Q\";\n    } else if ($array[$i] == \"U\")\
    \ {\n      $array[$i] = \"Y\";\n    } else if ($array[$i] == \"b\") {\n      $array[$i]\
    \ = \"a\";\n    } else if ($array[$i] == \"c\") {\n      $array[$i] = \"b\";\n\
    \    } else if ($array[$i] == \"d\") {\n      $array[$i] = \"c\";\n    } else\
    \ if ($array[$i] == \"f\") {\n      $array[$i] = \"e\";\n    } else if ($array[$i]\
    \ == \"g\") {\n      $array[$i] = \"f\";\n    } else if ($array[$i] == \"h\")\
    \ {\n      $array[$i] = \"g\";\n    } else if ($array[$i] == \"j\") {\n      $array[$i]\
    \ =", "    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $nums = array(3, 5,\
    \ 7, 9, 11);\n    $alphabet = range('a', 'z');\n    $alphabet = array_flip($alphabet);\n\
    \    $encode = '';\n    $index = 0;\n    while ($index < strlen($message)) {\n\
    \        $letter = $message[$index];\n        if (ctype_upper($letter)) {\n  \
    \          $encode .= strtolower($letter);\n        } elseif (ctype_lower($letter))\
    \ {\n            if (in_array($letter, $vowels)) {\n                $encode .=\
    \ $alphabet[$letter];\n            } else {\n                $encode .= $letter;\n\
    \            }\n        } else {\n            $encode .= $letter;\n        }\n\
    \        $index++;\n    }\n    return $encode;\n}\necho encode('test') . PHP_EOL;\n\
    echo encode('This is a message') . PHP_EOL;\necho encode('This Is A MESSAGE')\
    \ . PHP_EOL;\necho encode('This is not a message') . PHP_EOL;", "\t// your code\
    \ here\n}\n", "  $alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  $vowels = array('A',\
    \ 'E', 'I', 'O', 'U');\n  $result = array();\n  for ($i = 0; $i < strlen($message);\
    \ $i++) {\n    if (in_array($message[$i], $vowels)) {\n      $position = (strpos($alphabet,\
    \ $message[$i]) + 2) % 26;\n      $result[] = $alphabet[$position];\n    } else\
    \ {\n      $result[] = $message[$i];\n    }\n  }\n  return strtoupper(implode('',\
    \ $result));\n}\n", "    $result = '';\n    $vowels = array('a', 'e', 'i', 'o',\
    \ 'u');\n    for ($i = 0; $i < strlen($message); $i++) {\n        $current = $message[$i];\n\
    \        $is_upper = ($current === strtoupper($current));\n        $char = strtolower($current);\n\
    \        if (in_array($char, $vowels)) {\n            $char = $vowels[(array_search($char,\
    \ $vowels) + 2) % 5];\n        }\n        $result .= $is_upper ? strtoupper($char)\
    \ : $char;\n    }\n    return $result;\n}\n$tests = array('test', 'This is a message');\n\
    foreach ($tests as $test) {\n    echo encode($test) . PHP_EOL;\n}\n", "\t$alphabet\
    \ = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"\
    l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"\
    y\",\"z\");\n\t$newMessage = \"\";\n\tfor ($i=0; $i < strlen($message); $i++)\
    \ { \n\t\t$letter = $message[$i];\n\t\t$upper = false;\n\t\tif (ord($letter) >=\
    \ 65 && ord($letter) <= 90) {\n\t\t\t$upper = true;\n\t\t\t$letter = strtolower($letter);\n\
    \t\t}\n\t\tif (in_array($letter, $alphabet)) {\n\t\t\t$letterIndex = array_search($letter,\
    \ $alphabet);\n\t\t\tif ($letterIndex >= 23) {\n\t\t\t\t$newLetter = $alphabet[$letterIndex\
    \ - 23];\n\t\t\t} else {\n\t\t\t\t$newLetter = $alphabet[$letterIndex + 3];\n\t\
    \t\t}\n\t\t\tif ($upper) {\n\t\t\t\t$newLetter = strtoupper($newLetter);\n\t\t\
    \t}\n\t\t\t$newMessage .= $newLetter;\n\t\t} else {\n\t\t\t$newMessage .= $letter;\n\
    \t\t}\n\t}\n\treturn $newMessage;\n}\n\n$message = \"test\";\necho encode($message)\
    \ . \"\\n\";\n$message = \"This is a message\";\necho encode($message) . \"\\\
    n\";\n", "\t// Write your code here\n}", "\t// Write your code here...\n\t$message\
    \ = strtolower($message);\n\t$encode = '';\n\tfor ($i=0; $i < strlen($message);\
    \ $i++) { \n\t\t$char = $message[$i];\n\t\tif (preg_match('/[aeiou]/', $char))\
    \ {\n\t\t\t$encode .= get_encode_char($char);\n\t\t} else {\n\t\t\t$encode .=\
    \ get_encode_char($char, false);\n\t\t}\n\t}\n\treturn $encode;\n}\n", "    $lowerAlpha\
    \ = range('a', 'z');\n    $upperAlpha = range('A', 'Z');\n    $newMessage = '';\n\
    \    $messageArray = str_split($message);\n    $alphaArray = array_merge($lowerAlpha,\
    \ $upperAlpha);\n    $nextAlphaArray = array_merge($upperAlpha, $lowerAlpha);\n\
    \    for ($i = 0; $i < count($messageArray); $i++) {\n        if (in_array($messageArray[$i],\
    \ $alphaArray)) {\n            $index = array_search($messageArray[$i], $alphaArray);\n\
    \            $newMessage .= $nextAlphaArray[$index + 2];\n        } else {\n \
    \           $newMessage .= $messageArray[$i];\n        }\n    }\n    return $newMessage;\n\
    }\necho encode('test');\necho \"\\n\";\necho encode('This is a message');\necho\
    \ \"\\n\";", "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $encode_message =\
    \ '';\n    for ($i = 0; $i < strlen($message); $i++) {\n        $char = $message[$i];\n\
    \        $ascii_value = ord($char);\n        if (in_array($char, $vowels)) {\n\
    \            $encode_message .= $vowels[($ascii_value - 97 + 2) % 5];\n      \
    \  } else if ($ascii_value >= 65 && $ascii_value <= 90) {\n            $encode_message\
    \ .= chr($ascii_value + 32);\n        } else if ($ascii_value >= 97 && $ascii_value\
    \ <= 122) {\n            $encode_message .= chr($ascii_value - 32);\n        }\
    \ else {\n            $encode_message .= $char;\n        }\n    }\n    return\
    \ $encode_message;\n}\n\necho encode('test') . \"\\n\";\necho encode('This is\
    \ a message') . \"\\n\";", "\t$message = strtolower($message);\n\t$message = str_split($message);\n\
    \t\n\tfor ($i = 0; $i < count($message); $i++) {\n\t\tif (ctype_alpha($message[$i]))\
    \ {\n\t\t\tswitch ($message[$i]) {\n\t\t\t\tcase 'a':\n\t\t\t\t\t$message[$i]\
    \ = 'c';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'e':\n\t\t\t\t\t$message[$i] = 'g';\n\
    \t\t\t\t\tbreak;\n\t\t\t\tcase 'i':\n\t\t\t\t\t$message[$i] = 'k';\n\t\t\t\t\t\
    break;\n\t\t\t\tcase 'o':\n\t\t\t\t\t$message[$i] = 'm';\n\t\t\t\t\tbreak;\n\t\
    \t\t\tcase 'u':\n\t\t\t\t\t$message[$i] = 'o';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\
    \t\t\t\t\t$message[$i] = chr(ord($message[$i]) - 32);\n\t\t\t\t\tbreak;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn implode($message);\n}\n\necho encode('This is a message');",
  "\t$alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\t$vowels = array(\"a\", \"e\",\
    \ \"i\", \"o\", \"u\");\n\t$encodedMessage = \"\";\n\t$messageArray = str_split($message);\n\
    \tforeach ($messageArray as $letter) {\n\t\tif (ctype_upper($letter)) {\n\t\t\t\
    $letter = strtolower($letter);\n\t\t\t$index = strpos($alphabet, $letter);\n\t\
    \t\tif (in_array($letter, $vowels)) {\n\t\t\t\t$letter = $alphabet[($index + 2)\
    \ % 26];\n\t\t\t}\n\t\t\t$letter = strtoupper($letter);\n\t\t} else {\n\t\t\t\
    $index = strpos($alphabet, $letter);\n\t\t\tif (in_array($letter, $vowels)) {\n\
    \t\t\t\t$letter = $alphabet[($index + 2) % 26];\n\t\t\t}\n\t\t}\n\t\t$encodedMessage\
    \ .= $letter;\n\t}\n\treturn $encodedMessage;\n}\n", "    $result = '';\n    $vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    $letters = str_split($message);\n    foreach\
    \ ($letters as $letter) {\n        if ($letter == strtoupper($letter)) {\n   \
    \         $letter = strtolower($letter);\n        } else {\n            $letter\
    \ = strtoupper($letter);\n        }\n        if (in_array($letter, $vowels)) {\n\
    \            $index = array_search($letter, $vowels);\n            $result .=\
    \ $vowels[($index + 2) % 5];\n        } else {\n            $result .= $letter;\n\
    \        }\n    }\n    return $result;\n}\nprint_r(encode('test'));\necho \"<br>\"\
    ;\nprint_r(encode('This is a message'));\n", "\t$vowels = array(\"a\", \"e\",\
    \ \"i\", \"o\", \"u\");\n\t$result = \"\";\n\tfor ($i = 0; $i < strlen($message);\
    \ $i++) {\n\t\tif (in_array(strtolower($message[$i]), $vowels)) {\n\t\t\t$result\
    \ .= shift_char($message[$i], 2);\n\t\t} else {\n\t\t\t$result .= $message[$i];\n\
    \t\t}\n\t}\n\treturn $result;\n}\n", "\t$encodedMessage = '';\n\t$message = strtolower($message);\n\
    \t$vowels = ['a','e','i','o','u'];\n\tfor ($i=0; $i < strlen($message); $i++)\
    \ { \n\t\tif (in_array($message[$i], $vowels)) {\n\t\t\t$message[$i] = $vowels[array_search($message[$i],\
    \ $vowels) + 2];\n\t\t}\n\t\tif (ord($message[$i]) > ord('z') - 13) {\n\t\t\t\
    $message[$i] = chr(ord($message[$i]) - 13);\n\t\t} else {\n\t\t\t$message[$i]\
    \ = chr(ord($message[$i]) + 13);\n\t\t}\n\t}\n\treturn $message;\n}\necho encode('test')\
    \ . \"\\n\";\necho encode('This is a message') . \"\\n\";", "\t$lowerVowels =\
    \ \"aeiou\";\n\t$lowerAlpha = \"abcdefghijklmnopqrstuvwxyz\";\n\t$upperVowels\
    \ = \"AEIOU\";\n\t$upperAlpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\t$lowerMessage\
    \ = strtolower($message);\n\t$upperMessage = strtoupper($message);\n\t\n\t//find\
    \ lowercase vowels and replace them with letters 2 ahead\n\tfor ($i = 0; $i <\
    \ strlen($lowerVowels); $i++) {\n\t\t$vowel = $lowerVowels[$i];\n\t\t$vowelPos\
    \ = strpos($lowerAlpha, $vowel);\n\t\t$nextVowel = $lowerAlpha[$vowelPos + 2];\n\
    \t\t$message = str_replace($vowel, $nextVowel, $message);\n\t}\n\t\n\t//find uppercase\
    \ vowels and replace them with letters 2 ahead\n\tfor ($i = 0; $i < strlen($upperVowels);\
    \ $i++) {\n\t\t$vowel = $upperVowels[$i];\n\t\t$vowelPos = strpos($upperAlpha,\
    \ $vowel);\n\t\t$nextVowel = $upperAlpha[$vowelPos + 2];\n\t\t$message = str_replace($vowel,\
    \ $nextVowel, $message);\n\t}\n\t\n\t//swap the case of all letters\n\tfor ($i\
    \ = 0; $i < strlen($message); $i++) {\n\t\t$letter = $message[$i];\n\t\tif (ctype_upper($letter))\
    \ {\n\t\t\t$message[$i] = strtolower($letter);\n\t\t} else if (ctype_lower($letter))\
    \ {\n\t\t\t$message[$i] = strtoupper($letter);\n\t\t}\n\t}\n\t\n\treturn $message;\n\
    }\n\nprint encode('test') . \"\\n\";\nprint encode('This is a message') . \"\\\
    n\";", "\t$vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n\t$newVowels =\
    \ array(\"c\", \"g\", \"k\", \"o\", \"s\");\n\t$newMessage = \"\";\n\t$characters\
    \ = str_split($message);\n\tforeach ($characters as $character) {\n\t\t$lowerCharacter\
    \ = strtolower($character);\n\t\tif (in_array($lowerCharacter, $vowels)) {\n\t\
    \t\t$index = array_search($lowerCharacter, $vowels);\n\t\t\t$newMessage .= $newVowels[$index];\n\
    \t\t} else {\n\t\t\t$newMessage .= $character;\n\t\t}\n\t}\n\treturn $newMessage;\n\
    }\n\nvar_dump(encode('test'));\nvar_dump(encode('This is a message'));", "\t$alphabet\
    \ = array(\n\t\t'a' => 'c',\n\t\t'e' => 'g',\n\t\t'i' => 'k',\n\t\t'o' => 'q',\n\
    \t\t'u' => 'w',\n\t\t'A' => 'C',\n\t\t'E' => 'G',\n\t\t'I' => 'K',\n\t\t'O' =>\
    \ 'Q',\n\t\t'U' => 'W',\n\t);\n\t$letters = str_split($message);\n\t$encoded_letters\
    \ = array();\n\tforeach ($letters as $letter) {\n\t\tif (array_key_exists($letter,\
    \ $alphabet)) {\n\t\t\t$encoded_letters[] = $alphabet[$letter];\n\t\t} else {\n\
    \t\t\t$encoded_letters[] = strtoupper($letter);\n\t\t}\n\t}\n\treturn implode('',\
    \ $encoded_letters);\n}\n$message = \"What is this?\";\necho encode($message)\
    \ . \"\\n\";", "\t$message = strtolower($message);\n\t$newMessage = '';\n\tfor\
    \ ($i = 0; $i < strlen($message); $i++) {\n\t\tif (ctype_alpha($message[$i]))\
    \ {\n\t\t\tif ($message[$i] == 'z') {\n\t\t\t\t$newMessage .= 'B';\n\t\t\t} elseif\
    \ ($message[$i] == 'y') {\n\t\t\t\t$newMessage .= 'A';\n\t\t\t} elseif ($message[$i]\
    \ == 'x') {\n\t\t\t\t$newMessage .= 'Z';\n\t\t\t} elseif ($message[$i] == 'w')\
    \ {\n\t\t\t\t$newMessage .= 'Y';\n\t\t\t} elseif ($message[$i] == 'v') {\n\t\t\
    \t\t$newMessage .= 'X';\n\t\t\t} elseif ($message[$i] == 'u') {\n\t\t\t\t$newMessage\
    \ .= 'W';\n\t\t\t} elseif ($message[$i] == 't') {\n\t\t\t\t$newMessage .= 'V';\n\
    \t\t\t} elseif ($message[$i] == 's') {\n\t\t\t\t$newMessage .= 'U';\n\t\t\t} elseif\
    \ ($message[$i] == 'r') {\n\t\t\t\t$newMessage .= 'T';\n\t\t\t} elseif ($message[$i]\
    \ == 'q') {\n\t\t\t\t$newMessage .= 'S';\n\t\t\t} elseif ($message[$i] == 'p')\
    \ {\n\t\t\t\t$newMessage .= 'R';\n\t\t\t} elseif ($message[$i] == 'o') {\n\t\t\
    \t\t$newMessage .= 'Q';\n\t\t\t} elseif ($message[$i] == 'n') {\n\t\t\t\t$newMessage\
    \ .= 'P';\n\t\t\t} elseif ($message[$i] == 'm') {\n\t\t\t\t$newMessage .= 'O';\n\
    \t\t\t} elseif ($message[$i] == 'l') {\n\t\t\t\t", "  $vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n  $letters = str_split($message);\n  $encoded_message\
    \ = [];\n  foreach ($letters as $letter) {\n    if (in_array($letter, $vowels))\
    \ {\n      $encoded_message[] = nextLetter($letter);\n    } else {\n      $encoded_message[]\
    \ = $letter;\n    }\n  }\n  return swapCase(implode($encoded_message));\n}\n",
  "  $vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  $vowelsHash = array_combine($vowels,\
    \ range(0, 4));\n  $newMessage = \"\";\n  $message = strtolower($message);\n \
    \ for ($i = 0; $i < strlen($message); $i++) {\n    if (array_key_exists($message[$i],\
    \ $vowelsHash)) {\n      $newMessage .= $vowels[($vowelsHash[$message[$i]] + 2)\
    \ % 5];\n    } else {\n      $newMessage .= $message[$i];\n    }\n  }\n  return\
    \ strtoupper($newMessage);\n}", "    $vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    $message_array = str_split($message);\n    $encoded_message = \"\"\
    ;\n    foreach ($message_array as $letter) {\n        if ($letter === strtoupper($letter))\
    \ {\n            if (in_array(strtolower($letter), $vowels)) {\n             \
    \   $char_code = ord($letter) + 2;\n                if ($char_code > 90) {\n \
    \                   $char_code -= 26;\n                }\n                $encoded_message\
    \ .= chr($char_code);\n            } else {\n                $encoded_message\
    \ .= $letter;\n            }\n        } else {\n            if (in_array($letter,\
    \ $vowels)) {\n                $char_code = ord($letter) + 2;\n              \
    \  if ($char_code > 122) {\n                    $char_code -= 26;\n          \
    \      }\n                $encoded_message .= chr($char_code);\n            }\
    \ else {\n                $encoded_message .= $letter;\n            }\n      \
    \  }\n    }\n    return $encoded_message;\n}\n", "    $messageArr = str_split($message);\n\
    \    for ($i = 0; $i < count($messageArr); $i++) {\n        if (ctype_alpha($messageArr[$i]))\
    \ {\n            if (ctype_upper($messageArr[$i])) {\n                $messageArr[$i]\
    \ = strtolower($messageArr[$i]);\n            } else {\n                $messageArr[$i]\
    \ = strtoupper($messageArr[$i]);\n            }\n        }\n    }\n    $encodedMessage\
    \ = implode(\"\", $messageArr);\n    return $encodedMessage;\n}\necho encode('This\
    \ is a message');\n", "\t$return = \"\";\n\tfor ($i = 0; $i < strlen($message);\
    \ $i++) {\n\t\t$char = strtolower($message[$i]);\n\t\tif (preg_match(\"/[a-z]/\"\
    , $char)) {\n\t\t\t$return .= chr(ord($char) + 2);\n\t\t} else {\n\t\t\t$return\
    \ .= $char;\n\t\t}\n\t}\n\treturn $return;\n}\n\necho encode('This is a message')\
    \ . \"\\n\";\necho encode('test') . \"\\n\";\n", "\t$alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n\t$vowels = \"aeiou\";\n\t$message = strtolower($message);\n\t$alphabet_length\
    \ = strlen($alphabet);\n\t$new_message = \"\";\n\tfor ($i = 0; $i < strlen($message);\
    \ $i++) {\n\t\t$letter = $message[$i];\n\t\t$index = strpos($alphabet, $letter);\n\
    \t\tif ($index === false) {\n\t\t\t$new_message .= $letter;\n\t\t} else {\n\t\t\
    \t$new_index = ($index + 2) % $alphabet_length;\n\t\t\t$new_letter = $alphabet[$new_index];\n\
    \t\t\tif (strpos($vowels, $letter) !== false) {\n\t\t\t\t$new_message .= strtoupper($new_letter);\n\
    \t\t\t} else {\n\t\t\t\t$new_message .= $new_letter;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return $new_message;\n}\n\n$test_cases = [\n\t[\n\t\t\"test\",\n\t\t\"tgst\"\n\
    \t],\n\t[\n\t\t\"This is a message\",\n\t\t\"tHKS KS C MGSSCGG\"\n\t],\n\t[\n\t\
    \t\"This is a test message\",\n\t\t\"tHKS KS C TGST MGSSCGG\"\n\t],\n\t[\n\t\t\
    \"This is a test message with numbers 1234\",\n\t\t\"tHKS KS C TGST MGSSCGG WTH\
    \ NMBRS 1234\"\n\t],\n\t[\n\t\t\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\n\t\t\"CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\"\
    \n\t],\n\t[\n\t\t\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n\t\t\"BCDEFGHIJKLMNOPQRSTUVWXYZA\"\
    \n\t],\n\t[\n\t\t\"0123456789\",\n\t\t\"0123456789\"\n", "  $letters = str_split($message);\n\
    \  foreach ($letters as $i => $letter) {\n    if (strtoupper($letter) === $letter)\
    \ {\n      $letters[$i] = strtolower($letter);\n    } else {\n      $letters[$i]\
    \ = strtoupper($letter);\n    }\n  }\n  return implode($letters);\n}\n", "\t//\
    \ Your code here\n}", "    $alphabet = array('a', 'b', 'c', 'd', 'e', 'f', 'g',\
    \ 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',\
    \ 'x', 'y', 'z');\n    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $new_message\
    \ = \"\";\n    $message = strtolower($message);\n    $message = str_split($message);\n\
    \    $message = array_map('ord', $message);\n    for ($i = 0; $i < count($message);\
    \ $i++) {\n        if (in_array($message[$i], range(97, 122))) {\n           \
    \ if (in_array($message[$i], $vowels)) {\n                $new_message .= $alphabet[(array_search($message[$i],\
    \ $alphabet) + 2) % count($alphabet)];\n            } else {\n               \
    \ $new_message .= $alphabet[(array_search($message[$i], $alphabet) + 2) % count($alphabet)];\n\
    \            }\n        } else {\n            $new_message .= $message[$i];\n\
    \        }\n    }\n    $new_message = strtoupper($new_message);\n    return $new_message;\n\
    }\n", "\t// set the input string to lowercase\n\t$message = strtolower($message);\n\
    \t// explode the string into array\n\t$letters = str_split($message);\n\t\n\t\
    // loop through the string and do the conversion\n\t$result = '';\n\tforeach ($letters\
    \ as $letter) {\n\t\t// swap cases\n\t\tif (preg_match('/[a-z]/', $letter)) {\n\
    \t\t\t$letter = strtoupper($letter);\n\t\t} else {\n\t\t\t$letter = strtolower($letter);\n\
    \t\t}\n\t\t\n\t\t// check if the letter is a vowel, then convert it\n\t\tif (preg_match('/[aeiou]/',\
    \ $letter)) {\n\t\t\t// use strpos to find the index of the letter\n\t\t\t$index\
    \ = strpos($vowels, $letter);\n\t\t\t// check if index is the last element\n\t\
    \t\tif ($index == 4) {\n\t\t\t\t$letter = $vowels[0];\n\t\t\t} else {\n\t\t\t\t\
    $letter = $vowels[$index + 2];\n\t\t\t}\n\t\t}\n\t\t\n\t\t// add the letter to\
    \ the result\n\t\t$result .= $letter;\n\t}\n\t\n\treturn $result;\n}\n", "\t$new_message\
    \ = strtoupper($message);\n\t$vowels = array('A', 'E', 'I', 'O', 'U');\n\tfor\
    \ ($i = 0; $i < strlen($new_message); $i++) {\n\t\tif (in_array($new_message[$i],\
    \ $vowels)) {\n\t\t\t$new_message[$i] = $vowels[(array_search($new_message[$i],\
    \ $vowels) + 2) % 5];\n\t\t}\n\t}\n\treturn $new_message;\n}\nprint_r(encode('test'));\n\
    print_r(\"\\n\");\nprint_r(encode('This is a message'));", "    $messageArray\
    \ = str_split($message);\n    $encodedMessage = \"\";\n    foreach ($messageArray\
    \ as $letter) {\n        if ($letter === strtoupper($letter)) {\n            $letter\
    \ = strtolower($letter);\n        } else {\n            $letter = strtoupper($letter);\n\
    \        }\n        if ($letter === \"a\") {\n            $letter = \"c\";\n \
    \       } elseif ($letter === \"e\") {\n            $letter = \"g\";\n       \
    \ } elseif ($letter === \"i\") {\n            $letter = \"k\";\n        } elseif\
    \ ($letter === \"o\") {\n            $letter = \"q\";\n        } elseif ($letter\
    \ === \"u\") {\n            $letter = \"y\";\n        }\n        $encodedMessage\
    \ .= $letter;\n    }\n    return $encodedMessage;\n}", "\t$vowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n\t$message = strtolower($message);\n\t$message = str_split($message);\n\
    \tfor ($i = 0; $i < count($message); $i++) {\n\t\tif (in_array($message[$i], $vowels))\
    \ {\n\t\t\tif ($message[$i] === 'u') {\n\t\t\t\t$message[$i] = 'a';\n\t\t\t} else\
    \ if ($message[$i] === 'a') {\n\t\t\t\t$message[$i] = 'e';\n\t\t\t} else if ($message[$i]\
    \ === 'e') {\n\t\t\t\t$message[$i] = 'i';\n\t\t\t} else if ($message[$i] === 'i')\
    \ {\n\t\t\t\t$message[$i] = 'o';\n\t\t\t} else if ($message[$i] === 'o') {\n\t\
    \t\t\t$message[$i] = 'u';\n\t\t\t}\n\t\t}\n\t}\n\t$message = implode($message);\n\
    \t$message = strtoupper($message);\n\treturn $message;\n}", "    $vowels = [\n\
    \        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' =>\
    \ 'q',\n        'u' => 'y',\n    ];\n    $result = \"\";\n    $len = strlen($message);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        $char = $message[$i];\n        if\
    \ ($char == strtoupper($char)) {\n            $result .= strtolower($char);\n\
    \        } else if ($char == strtolower($char)) {\n            $result .= strtoupper($char);\n\
    \        } else {\n            $result .= $char;\n        }\n        if (array_key_exists($char,\
    \ $vowels)) {\n            $result[$i] = $vowels[$char];\n        }\n    }\n \
    \   return $result;\n}", "\t$encoded_message = '';\n\t$vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n\t$vowels_map = ['a' => 'c', 'e' => 'g', 'i' => 'k', 'o' => 'q',\
    \ 'u' => 's'];\n\t$lowercase_chars = range('a', 'z');\n\t$uppercase_chars = range('A',\
    \ 'Z');\n\t$reverse_lowercase_chars = array_flip($lowercase_chars);\n\t$reverse_uppercase_chars\
    \ = array_flip($uppercase_chars);\n\t$chars = array_merge($lowercase_chars, $uppercase_chars);\n\
    \t$reverse_chars = array_merge($reverse_lowercase_chars, $reverse_uppercase_chars);\n\
    \t$chars_count = count($chars);\n\t$message_array = str_split($message);\n\tforeach\
    \ ($message_array as $char) {\n\t\tif (in_array($char, $vowels)) {\n\t\t\t$encoded_message\
    \ .= $vowels_map[$char];\n\t\t} else if (in_array($char, $lowercase_chars)) {\n\
    \t\t\t$encoded_message .= $chars[($reverse_chars[$char] + $chars_count - 13) %\
    \ $chars_count];\n\t\t} else if (in_array($char, $uppercase_chars)) {\n\t\t\t\
    $encoded_message .= $chars[($reverse_chars[$char] + $chars_count - 13) % $chars_count];\n\
    \t\t} else {\n\t\t\t$encoded_message .= $char;\n\t\t}\n\t}\n\treturn $encoded_message;\n\
    }\n\necho encode('test') . PHP_EOL;\necho encode('This is a message') . PHP_EOL;",
  "\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\t$vowels = 'aeiou';\n\t$alphabet_mixed_case\
    \ = str_shuffle($alphabet);\n\t$alphabet_uppercase = strtoupper($alphabet);\n\t\
    $alphabet_mixed_case_with_vowels_replaced = str_replace($vowels, substr($alphabet,\
    \ 2, 4), $alphabet_mixed_case);\n\t$alphabet_uppercase_with_vowels_replaced =\
    \ str_replace($vowels, substr($alphabet, 2, 4), $alphabet_uppercase);\n\t\n\t\
    $message_lowercase = strtolower($message);\n\t$message_mixed_case = str_shuffle($message_lowercase);\n\
    \t$message_uppercase = strtoupper($message_lowercase);\n\t$message_mixed_case_with_vowels_replaced\
    \ = str_replace($vowels, substr($alphabet, 2, 4), $message_mixed_case);\n\t$message_uppercase_with_vowels_replaced\
    \ = str_replace($vowels, substr($alphabet, 2, 4), $message_uppercase);\n\t\n\t\
    $result = str_replace($alphabet_mixed_case, $alphabet_mixed_case_with_vowels_replaced,\
    \ $message_mixed_case_with_vowels_replaced);\n\t$result = str_replace($alphabet_uppercase,\
    \ $alphabet_uppercase_with_vowels_replaced, $result);\n\treturn $result;\n}\n\
    echo '<h3>Encode test:</h3>';\necho encode('test') . '<br>';\necho encode('This\
    \ is a message') . '<br>';\n", "\t$vowels = array('a', 'e', 'i', 'o', 'u');\n\t\
    $message = strtolower($message);\n\t$encoded = \"\";\n\tfor ($i = 0; $i < strlen($message);\
    \ $i++) {\n\t\t$letter = $message[$i];\n\t\tif (in_array($letter, $vowels)) {\n\
    \t\t\t$letter = strtolower($message[$i]);\n\t\t\t$alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n\t\t\t$pos = strpos($alphabet, $letter);\n\t\t\t$nextLetter = $alphabet[$pos\
    \ + 2];\n\t\t\t$encoded .= strtoupper($nextLetter);\n\t\t} else {\n\t\t\t$encoded\
    \ .= strtoupper($letter);\n\t\t}\n\t}\n\treturn $encoded;\n}\n", "    // Write\
    \ code here\n    // ...\n    $leng = strlen($message);\n    $result = \"\";\n\
    \    for ($i = 0; $i < $leng; $i++) {\n        $char = strtolower($message[$i]);\n\
    \        if ($char === 'a') {\n            $result .= 'c';\n        } else if\
    \ ($char === 'e') {\n            $result .= 'g';\n        } else if ($char ===\
    \ 'i') {\n            $result .= 'k';\n        } else if ($char === 'o') {\n \
    \           $result .= 'q';\n        } else if ($char === 'u') {\n           \
    \ $result .= 's';\n        } else if ($char === 'y') {\n            $result .=\
    \ 'a';\n        } else {\n            $result .= $message[$i];\n        }\n  \
    \  }\n    return $result;\n}\n\n$message = \"This is a message\";\necho encode($message);",
  "    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $lowers = range('a', 'z');\n\
    \    $uppers = range('A', 'Z');\n    $output = '';\n    $message = str_split($message);\n\
    \    foreach ($message as $letter) {\n        $is_lower = in_array($letter, $lowers);\n\
    \        $is_upper = in_array($letter, $uppers);\n        if ($is_lower) {\n \
    \           $index = array_search($letter, $lowers);\n            $letter = $lowers[$index\
    \ + 2];\n        } else if ($is_upper) {\n            $index = array_search($letter,\
    \ $uppers);\n            $letter = $uppers[$index + 2];\n        }\n        $output\
    \ .= $letter;\n    }\n    return $output;\n}\n$message = 'This is a message';\n\
    echo encode($message);", "\t$vowels = array('a', 'e', 'i', 'o', 'u');\n\t$letter\
    \ = array();\n\t$encoded = array();\n\t$result = '';\n\tfor ($i = 0; $i < strlen($message);\
    \ $i++) {\n\t\t$letter[$i] = $message[$i];\n\t\tif ($letter[$i] >= 'a' && $letter[$i]\
    \ <= 'z') {\n\t\t\t$letter[$i] = strtoupper($letter[$i]);\n\t\t} else if ($letter[$i]\
    \ >= 'A' && $letter[$i] <= 'Z') {\n\t\t\t$letter[$i] = strtolower($letter[$i]);\n\
    \t\t}\n\t\tif (in_array($letter[$i], $vowels)) {\n\t\t\tif ($letter[$i] == 'u')\
    \ {\n\t\t\t\t$encoded[$i] = 'a';\n\t\t\t} else if ($letter[$i] == 'U') {\n\t\t\
    \t\t$encoded[$i] = 'A';\n\t\t\t} else {\n\t\t\t\t$k = array_search($letter[$i],\
    \ $vowels);\n\t\t\t\t$encoded[$i] = $vowels[$k + 2];\n\t\t\t}\n\t\t} else {\n\t\
    \t\t$encoded[$i] = $letter[$i];\n\t\t}\n\t\t$result .= $encoded[$i];\n\t}\n\t\
    return $result;\n}\necho encode('This is a message');", "    $encode = \"\";\n\
    \    $message = strtolower($message);\n    $vowels = ['a','e','i','o','u'];\n\
    \    $replace = ['c','f','j','o','s'];\n    $i = 0;\n    while ($i < strlen($message))\
    \ {\n        if (in_array($message[$i], $vowels)) {\n            $key = array_search($message[$i],\
    \ $vowels);\n            $encode .= $replace[$key];\n        } else {\n      \
    \      $encode .= $message[$i];\n        }\n        $i++;\n    }\n    return $encode;\n\
    }\necho encode('This is a message') . PHP_EOL;\necho encode('test') . PHP_EOL;",
  "    $char_map = [\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n\
    \        'o' => 'q',\n        'u' => 'w',\n        'y' => 'a',\n        'A' =>\
    \ 'C',\n        'E' => 'G',\n        'I' => 'K',\n        'O' => 'Q',\n      \
    \  'U' => 'W',\n        'Y' => 'A'\n    ];\n    $message_array = str_split($message);\n\
    \    $encoded_message = \"\";\n    foreach ($message_array as $char) {\n     \
    \   if (array_key_exists($char, $char_map)) {\n            $encoded_message .=\
    \ $char_map[$char];\n        } else {\n            $encoded_message .= $char;\n\
    \        }\n    }\n    return $encoded_message;\n}\n", "\t$chars = str_split($message);\n\
    \t$result = '';\n\tforeach ($chars as $char) {\n\t\t$uppercase = ctype_upper($char);\n\
    \t\t$result .= $uppercase ? strtolower($char) : strtoupper($char);\n\t}\n\t$result\
    \ = str_replace(['a', 'e', 'i', 'o', 'u'], ['c', 'g', 'k', 's', 'w'], $result);\n\
    \treturn $result;\n}\n", "\t$vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\t\
    $message = strtolower($message);\n\t$newMessage = \"\";\n\tfor ($i = 0; $i < strlen($message);\
    \ $i++) {\n\t\tif (isLetter($message[$i])) {\n\t\t\tif ($message[$i] == \"z\"\
    ) {\n\t\t\t\t$newMessage .= \"b\";\n\t\t\t} else if ($message[$i] == \"y\") {\n\
    \t\t\t\t$newMessage .= \"a\";\n\t\t\t} else if (in_array($message[$i], $vowels))\
    \ {\n\t\t\t\t$newMessage .= chr(ord($message[$i]) + 2);\n\t\t\t} else {\n\t\t\t\
    \t$newMessage .= chr(ord($message[$i]) + 1);\n\t\t\t}\n\t\t} else {\n\t\t\t$newMessage\
    \ .= $message[$i];\n\t\t}\n\t}\n\treturn $newMessage;\n}\n", "\t$message = strtolower($message);\n\
    \t// $message = str_split($message);\n\t$vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"];\n\tfor ($i=0; $i < strlen($message); $i++) { \n\t\tif (in_array($message[$i],\
    \ $vowels)) {\n\t\t\tif ($message[$i] == \"u\") {\n\t\t\t\t$message[$i] = \"a\"\
    ;\n\t\t\t} else if ($message[$i] == \"z\") {\n\t\t\t\t$message[$i] = \"b\";\n\t\
    \t\t} else {\n\t\t\t\t$message[$i] = chr(ord($message[$i]) + 2);\n\t\t\t}\n\t\t\
    }\n\t}\n\t$message = strtoupper($message);\n\treturn $message;\n}\necho encode(\"\
    this is a message\") . PHP_EOL;\n", "\t$vowels = array(\"a\", \"e\", \"i\", \"\
    o\", \"u\");\n\t$message = strtolower($message);\n\t$l = strlen($message);\n\t\
    $result = \"\";\n\tfor ($i = 0; $i < $l; $i++) {\n\t\t$c = $message[$i];\n\t\t\
    if (ctype_alpha($c)) {\n\t\t\tif (ctype_upper($c)) {\n\t\t\t\t$result .= strtolower($c);\n\
    \t\t\t} else {\n\t\t\t\tif (in_array($c, $vowels)) {\n\t\t\t\t\t$result .= $vowels[(array_search($c,\
    \ $vowels) + 2) % 5];\n\t\t\t\t} else {\n\t\t\t\t\t$result .= strtoupper($c);\n\
    \t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$result .= $c;\n\t\t}\n\t}\n\treturn $result;\n\
    }\n\necho encode(\"This is a message\") . \"\\n\";\necho encode(\"test\") . \"\
    \\n\";\necho encode(\"!@#$%^&*()_+}{\") . \"\\n\";\necho encode(\"5a7b9c2d4e\"\
    ) . \"\\n\";\necho encode(\"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"\
    ) . \"\\n\";\necho encode(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    ) . \"\\n\";\necho encode(\"AaBbCc\") . \"\\n\";\necho encode(\"This is a message\
    \ with upper and lower case\") . \"\\n\";\necho encode(\"This is a message with\
    \ numbers and a space 1234567890!\") . \"\\n\";", "    $letters = str_split($message);\n\
    \    $result = \"\";\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $vowels2 =\
    \ ['c', 'f', 'j', 'n', 'r'];\n    foreach ($letters as $letter) {\n        $upper\
    \ = strtoupper($letter);\n        $lower = strtolower($letter);\n        if ($letter\
    \ === $upper) {\n            $result .= $lower;\n        } else if ($letter ===\
    \ $lower) {\n            $result .= $upper;\n        } else {\n            $result\
    \ .= $letter;\n        }\n        if (in_array($lower, $vowels)) {\n         \
    \   $pos = array_search($lower, $vowels);\n            $result .= $vowels2[$pos];\n\
    \        }\n    }\n    return $result;\n}\n$message = \"This is a message\";\n\
    echo encode($message) . \"\\n\";", "    $upper_case = range('A', 'Z');\n    $lower_case\
    \ = range('a', 'z');\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $messaage_array\
    \ = str_split($message);\n    $return_array = [];\n    foreach ($messaage_array\
    \ as $key => $value) {\n        if (in_array($value, $vowels)) {\n           \
    \ $index = array_search($value, $vowels);\n            $return_array[] = $vowels[($index\
    \ + 2) % 5];\n        } elseif (in_array($value, $upper_case)) {\n           \
    \ $index = array_search($value, $upper_case);\n            $return_array[] = $upper_case[($index\
    \ + 13) % 26];\n        } elseif (in_array($value, $lower_case)) {\n         \
    \   $index = array_search($value, $lower_case);\n            $return_array[] =\
    \ $lower_case[($index + 13) % 26];\n        } else {\n            $return_array[]\
    \ = $value;\n        }\n    }\n    return implode('', $return_array);\n}", " \
    \   $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $encoded = '';\n    for ($i = 0;\
    \ $i < strlen($message); $i++) {\n        $char = strtolower($message[$i]);\n\
    \        if (in_array($char, $vowels)) {\n            $index = array_search($char,\
    \ $vowels);\n            $index += 2;\n            if ($index >= count($vowels))\
    \ {\n                $index -= count($vowels);\n            }\n            $char\
    \ = $vowels[$index];\n        }\n        if (ctype_upper($message[$i])) {\n  \
    \          $char = strtoupper($char);\n        }\n        $encoded .= $char;\n\
    \    }\n    return $encoded;\n}", "\t$swapCase = strtolower($message);\n\t$swapCase\
    \ = strtoupper($swapCase);\n\t$output = '';\n\tfor ($i = 0; $i < strlen($message);\
    \ $i++) {\n\t\t$char = substr($message, $i, 1);\n\t\tif (strpos('aeiou', $char)\
    \ === false) {\n\t\t\t$output .= $char;\n\t\t} else {\n\t\t\tif ($char === 'u')\
    \ {\n\t\t\t\t$output .= 'A';\n\t\t\t} else {\n\t\t\t\t$output .= substr($swapCase,\
    \ $i + 2, 1);\n\t\t\t}\n\t\t}\n\t}\n\treturn $output;\n}\necho encode('This is\
    \ a message') . PHP_EOL;\necho encode('test') . PHP_EOL;\necho encode('aeiou')\
    \ . PHP_EOL;\necho encode('aeioua') . PHP_EOL;\n", "\t$alpha = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$new = '';\n\tfor ($i = 0; $i < strlen($message); $i++) {\n\t\t$curr = $message[$i];\n\
    \t\tif ($curr == ' ') {\n\t\t\t$new .= ' ';\n\t\t} else {\n\t\t\tif (ctype_upper($curr))\
    \ {\n\t\t\t\t$curr = strtolower($curr);\n\t\t\t}\n\t\t\tif (in_array($curr, array('a',\
    \ 'e', 'i', 'o', 'u'))) {\n\t\t\t\t$idx = strpos($alpha, $curr);\n\t\t\t\t$idx\
    \ += 2;\n\t\t\t\t$new_char = $alpha[$idx];\n\t\t\t\t$new .= $new_char;\n\t\t\t\
    } else {\n\t\t\t\t$new .= $curr;\n\t\t\t}\n\t\t}\n\t}\n\treturn $new;\n}\necho\
    \ encode('TEST');\necho \"\\n\";\necho encode('Hello World');\necho \"\\n\";\n\
    echo encode('This is a message');\necho \"\\n\";\necho encode('a');\necho \"\\\
    n\";\necho encode('A');\necho \"\\n\";\necho encode('abcdefghijklmnopqrstuvwxyz');\n\
    echo \"\\n\";\necho encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ');\necho \"\\n\";\necho\
    \ encode('test123');\necho \"\\n\";\necho encode('test 123');\necho \"\\n\";\n\
    echo encode('test');\necho \"\\n\";\necho encode('Test');\necho \"\\n\";\necho\
    \ encode('TEST');\necho \"\\n\";", "\t$msg = strtolower($message);\n\t$str = '';\n\
    \tfor ($i = 0; $i < strlen($msg); $i++) {\n\t\t$n = ord($msg[$i]);\n\t\tif ($n\
    \ == 97) {\n\t\t\t$n = ord('c');\n\t\t} else if ($n == 101) {\n\t\t\t$n = ord('g');\n\
    \t\t} else if ($n == 105) {\n\t\t\t$n = ord('k');\n\t\t} else if ($n == 111) {\n\
    \t\t\t$n = ord('q');\n\t\t} else if ($n == 117) {\n\t\t\t$n = ord('u');\n\t\t\
    } else if (($n >= 97) && ($n <= 122)) {\n\t\t\t$n += 2;\n\t\t}\n\t\t$str .= chr($n);\n\
    \t}\n\treturn $str;\n}\necho encode('test');\necho PHP_EOL;\necho encode('This\
    \ is a message');\necho PHP_EOL;", "\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$length = strlen($message);\n\t$new_message = '';\n\tfor ($i = 0; $i < $length;\
    \ $i++) {\n\t\t$char = $message[$i];\n\t\t$char_index = strpos($alphabet, $char);\n\
    \t\tif ($char_index !== false) {\n\t\t\tif ($char_index < 24) {\n\t\t\t\t$new_message\
    \ .= strtoupper($alphabet[$char_index + 2]);\n\t\t\t} else {\n\t\t\t\t$new_message\
    \ .= strtoupper($alphabet[$char_index - 24]);\n\t\t\t}\n\t\t} else {\n\t\t\t$new_message\
    \ .= $char;\n\t\t}\n\t}\n\treturn $new_message;\n}\n\necho encode('test');\necho\
    \ encode('This is a message');", "\t$letters = str_split($message);\n\t$result\
    \ = '';\n\tforeach ($letters as $letter) {\n\t\t$result .= getEncodedLetter($letter);\n\
    \t}\n\treturn $result;\n}\n", "\t$code = \"\";\n\tfor ($i = 0; $i < strlen($message);\
    \ $i++) {\n\t\t$l = strtolower($message[$i]);\n\t\t$code .= ($l == 'a' || $l ==\
    \ 'e' || $l == 'i' || $l == 'o' || $l == 'u') ? chr(ord($message[$i]) + 2) : $message[$i];\n\
    \t}\n\treturn $code;\n}", "\t// your code here\n}\n", "\t$letters = str_split($message);\n\
    \t$vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n\tforeach ($letters as\
    \ $letter) {\n\t\tif ($letter == strtoupper($letter)) {\n\t\t\t$letter = strtolower($letter);\n\
    \t\t} else {\n\t\t\t$letter = strtoupper($letter);\n\t\t}\n\t\tif (in_array($letter,\
    \ $vowels)) {\n\t\t\tif ($letter == \"u\") {\n\t\t\t\t$letter = \"a\";\n\t\t\t\
    } else {\n\t\t\t\t$letter = ++$letter;\n\t\t\t\t$letter = ++$letter;\n\t\t\t}\n\
    \t\t}\n\t\t$new_message .= $letter;\n\t}\n\treturn $new_message;\n}\necho encode(\"\
    test\") . PHP_EOL;\necho encode(\"This is a message\") . PHP_EOL;", "    // change\
    \ to lowercase\n    $lowered = strtolower($message);\n    // set a boolean for\
    \ case\n    $case = true;\n    // loop through the string\n    for ($i = 0; $i\
    \ < strlen($lowered); $i++) {\n        // if the letter at index i is a vowel\n\
    \        if ($lowered[$i] == 'a' || $lowered[$i] == 'e' || $lowered[$i] == 'i'\
    \ || $lowered[$i] == 'o' || $lowered[$i] == 'u') {\n            // switch the\
    \ letter by two chars\n            switch ($lowered[$i]) {\n                case\
    \ 'a':\n                    $message[$i] = 'c';\n                    break;\n\
    \                case 'e':\n                    $message[$i] = 'g';\n        \
    \            break;\n                case 'i':\n                    $message[$i]\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        $message[$i] = 'q';\n                    break;\n                case\
    \ 'u':\n                    $message[$i] = 's';\n                    break;\n\
    \            }\n        }\n        // if the letter at index i is a lowercase\
    \ character\n        else if ($lowered[$i] != $message[$i]) {\n            //\
    \ if case is true\n            if ($case) {\n                // change the character\
    \ to upper case\n                $message[$i] = strtoupper($message[$i]);\n  \
    \              // set case to false\n                $case = false;\n        \
    \    }\n            // if case is false\n            else {\n                //\
    \ change the character to lower case\n                $message[$i] = strtolower($message[$i]);\n\
    \                // set case to true\n                $case = true;\n        \
    \    }\n        }\n    }\n    // return the modified string\n    return $message;\n\
    }", "    $output = '';\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    for ($i\
    \ = 0; $i < strlen($message); $i++) {\n        if (in_array($message[$i], $vowels))\
    \ {\n            $vowel_index = array_search($message[$i], $vowels);\n       \
    \     $output .= $vowels[($vowel_index + 2) % 5];\n        } else {\n        \
    \    $output .= $message[$i];\n        }\n    }\n    return strtoupper($output);\n\
    }\n$input = 'This is a message';\necho encode($input);", "\t$newMessage = '';\n\
    \t$lower = 'abcdefghijklmnopqrstuvwxyz';\n\t$upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\
    \t$vowels = 'aeiou';\n\t$alpha = $lower . $upper;\n\tfor ($i = 0; $i < strlen($message);\
    \ $i++) {\n\t\t$letter = $message[$i];\n\t\tif (strpos($alpha, $letter) !== false)\
    \ {\n\t\t\tif (strpos($vowels, $letter) !== false) {\n\t\t\t\t$newMessage .= $message[$i\
    \ + 2];\n\t\t\t} else {\n\t\t\t\t$newMessage .= $message[$i];\n\t\t\t}\n\t\t}\
    \ else {\n\t\t\t$newMessage .= $message[$i];\n\t\t}\n\t}\n\treturn $newMessage;\n\
    }\n", "\t$vowels = ['a', 'e', 'i', 'o', 'u'];\n\t$encodedMessage = '';\n\tfor\
    \ ($i = 0; $i < strlen($message); $i++) {\n\t\t$char = $message[$i];\n\t\tif (ctype_upper($char))\
    \ {\n\t\t\t$char = strtolower($char);\n\t\t} else {\n\t\t\t$char = strtoupper($char);\n\
    \t\t}\n\t\tif (in_array($char, $vowels)) {\n\t\t\t$index = array_search($char,\
    \ $vowels);\n\t\t\t$index += 2;\n\t\t\tif ($index >= count($vowels)) {\n\t\t\t\
    \t$index = $index % count($vowels);\n\t\t\t}\n\t\t\t$char = $vowels[$index];\n\
    \t\t}\n\t\t$encodedMessage .= $char;\n\t}\n\treturn $encodedMessage;\n}\n", " \
    \   $newMessage = \"\";\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $letters\
    \ = str_split($message);\n    foreach ($letters as $letter) {\n        if(in_array($letter,\
    \ $vowels)) {\n            $letter = $vowels[(array_search($letter, $vowels) +\
    \ 2) % 5];\n        }\n        if(ctype_upper($letter)) {\n            $letter\
    \ = strtolower($letter);\n        } else {\n            $letter = strtoupper($letter);\n\
    \        }\n        $newMessage .= $letter;\n    }\n    return $newMessage;\n\
    }\n", "\t$vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n\t$message_as_array = str_split($message);\n\
    \t$encoded_message = \"\";\n\tforeach ($message_as_array as $letter) {\n\t\tif\
    \ (in_array($letter, $vowels)) {\n\t\t\t$key = array_search($letter, $vowels);\n\
    \t\t\t$encoded_message .= $vowels[($key + 2) % 5];\n\t\t} else if (ctype_upper($letter))\
    \ {\n\t\t\t$encoded_message .= strtolower($letter);\n\t\t} else {\n\t\t\t$encoded_message\
    \ .= strtoupper($letter);\n\t\t}\n\t}\n\treturn $encoded_message;\n}\necho encode(\"\
    test\") . PHP_EOL;\necho encode(\"This is a message\") . PHP_EOL;", "\t$encodeMessage\
    \ = '';\n\t$vowels = array('a', 'e', 'i', 'o', 'u');\n\tfor ($i = 0; $i < strlen($message);\
    \ $i++) {\n\t\t$letter = strtolower($message[$i]);\n\t\tif (in_array($letter,\
    \ $vowels)) {\n\t\t\t$encodeMessage .= $vowels[(array_search($letter, $vowels)\
    \ + 2) % 5];\n\t\t} else {\n\t\t\t$encodeMessage .= $letter;\n\t\t}\n\t}\n\treturn\
    \ $encodeMessage;\n}", "    $alphabet = range('a', 'z');\n    $vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n    $encodedMessage = \"\";\n    for ($i = 0; $i < strlen($message);\
    \ $i++) {\n        if (in_array($message[$i], $vowels)) {\n            $vowelIndex\
    \ = array_search($message[$i], $alphabet);\n            $encodedMessage .= $alphabet[($vowelIndex\
    \ + 2) % 26];\n        } else {\n            $encodedMessage .= $message[$i];\n\
    \        }\n    }\n    return $encodedMessage;\n}\n", "    $all_letters = str_split($message);\n\
    \    $result = '';\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    foreach ($all_letters\
    \ as $letter) {\n        $new_letter = strtolower($letter);\n        if ($new_letter\
    \ == $letter) {\n            $new_letter = strtoupper($letter);\n        }\n \
    \       if (in_array($new_letter, $vowels)) {\n            $index = array_search($new_letter,\
    \ $vowels);\n            $index += 2;\n            if ($index >= count($vowels))\
    \ {\n                $index -= count($vowels);\n            }\n            $new_letter\
    \ = $vowels[$index];\n        }\n        $result .= $new_letter;\n    }\n    return\
    \ $result;\n}\nprint encode('test') . PHP_EOL;\nprint encode('This is a message')\
    \ . PHP_EOL;", "\t$message = strtolower($message);\n\t$encoded_array = [];\n\t\
    foreach (str_split($message) as $letter) {\n\t\tif ($letter == 'a') {\n\t\t\t\
    $encoded_array[] = 'c';\n\t\t} elseif ($letter == 'e') {\n\t\t\t$encoded_array[]\
    \ = 'g';\n\t\t} elseif ($letter == 'i') {\n\t\t\t$encoded_array[] = 'k';\n\t\t\
    } elseif ($letter == 'o') {\n\t\t\t$encoded_array[] = 'q';\n\t\t} elseif ($letter\
    \ == 'u') {\n\t\t\t$encoded_array[] = 'y';\n\t\t} else {\n\t\t\t$encoded_array[]\
    \ = $letter;\n\t\t}\n\t}\n\treturn strtoupper(implode('', $encoded_array));\n}",
  "\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\t$message = strtolower($message);\n\
    \t$message_to_return = \"\";\n\tfor ($i = 0; $i < strlen($message); $i++) {\n\t\
    \tif (strpos($alphabet, $message[$i]) % 2 == 0) {\n\t\t\t$message_to_return .=\
    \ strtoupper($message[$i]);\n\t\t} else {\n\t\t\t$message_to_return .= $message[$i];\n\
    \t\t}\n\t}\n\treturn $message_to_return;\n}\n\necho encode('test');\necho encode('This\
    \ is a message');", "\t$new_message = '';\n\t$vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \tfor ($i = 0; $i < strlen($message); $i++) {\n\t\t$current_letter = strtolower($message[$i]);\n\
    \t\t$letter_type = 'consonant';\n\t\tfor ($j = 0; $j < count($vowels); $j++) {\n\
    \t\t\tif ($current_letter === $vowels[$j]) {\n\t\t\t\t$letter_type = 'vowel';\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($letter_type === 'vowel') {\n\t\t\tif\
    \ ($current_letter === 'u') {\n\t\t\t\t$new_message .= 'a';\n\t\t\t} else {\n\t\
    \t\t\t$new_message .= $vowels[array_search($current_letter, $vowels) + 1];\n\t\
    \t\t}\n\t\t} else {\n\t\t\tif ($current_letter === strtoupper($current_letter))\
    \ {\n\t\t\t\t$new_message .= strtoupper($message[$i]);\n\t\t\t} else {\n\t\t\t\
    \t$new_message .= $message[$i];\n\t\t\t}\n\t\t}\n\t}\n\treturn $new_message;\n\
    }\n", "    $lowerAlphabet = str_split('abcdefghijklmnopqrstuvwxyz');\n    $upperAlphabet\
    \ = str_split('ABCDEFGHIJKLMNOPQRSTUVWXYZ');\n    $vowels = array('a', 'e', 'i',\
    \ 'o', 'u');\n    $message = str_split($message);\n    for ($i = 0; $i < count($message);\
    \ $i++) {\n        if (in_array($message[$i], $vowels)) {\n            $key =\
    \ array_search($message[$i], $vowels);\n            $newKey = ($key + 2) % 5;\n\
    \            $message[$i] = $vowels[$newKey];\n        }\n        if (in_array($message[$i],\
    \ $lowerAlphabet)) {\n            $message[$i] = strtoupper($message[$i]);\n \
    \       } else if (in_array($message[$i], $upperAlphabet)) {\n            $message[$i]\
    \ = strtolower($message[$i]);\n        }\n    }\n    return implode('', $message);\n\
    }\necho encode('test') . \"\\n\";\necho encode('This is a message') . \"\\n\";",
  "    $message = strtolower($message);\n    $message = str_split($message);\n   \
    \ $alphabet = array(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n    $result = array();\n    foreach\
    \ ($message as $letter) {\n        if (!in_array($letter, $alphabet)) {\n    \
    \        $result[] = $letter;\n        } else {\n            if (!in_array($letter,\
    \ array(\"a\", \"e\", \"i\", \"o\", \"u\"))) {\n                $result[] = strtoupper($letter);\n\
    \            } else {\n                $result[] = $alphabet[array_search($letter,\
    \ $alphabet) + 2];\n            }\n        }\n    }\n    return implode($result);\n\
    }\n\necho encode('test') . PHP_EOL;\necho encode('This is a message') . PHP_EOL;",
  "  $alphabet = array(\n    'a' => 'c',\n    'b' => 'd',\n    'c' => 'e',\n    'd'\
    \ => 'f',\n    'e' => 'g',\n    'f' => 'h',\n    'g' => 'i',\n    'h' => 'j',\n\
    \    'i' => 'k',\n    'j' => 'l',\n    'k' => 'm',\n    'l' => 'n',\n    'm' =>\
    \ 'o',\n    'n' => 'p',\n    'o' => 'q',\n    'p' => 'r',\n    'q' => 's',\n \
    \   'r' => 't',\n    's' => 'u',\n    't' => 'v',\n    'u' => 'w',\n    'v' =>\
    \ 'x',\n    'w' => 'y',\n    'x' => 'z',\n    'y' => 'a',\n    'z' => 'b'\n  );\n\
    \  $characters = str_split($message);\n  foreach ($characters as $i => $character)\
    \ {\n    if (isset($alphabet[$character])) {\n      $characters[$i] = $alphabet[$character];\n\
    \    } else {\n      $characters[$i] = strtoupper($character);\n    }\n  }\n \
    \ return implode('', $characters);\n}", "    $alphabet = [\n        'a', 'b',\
    \ 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\n        'n', 'o', 'p',\
    \ 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'\n    ];\n    $vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n    $encodeMessage = '';\n    $message = strtolower($message);\n\
    \    $messageLength = strlen($message);\n    for ($i = 0; $i < $messageLength;\
    \ $i++) {\n        if (in_array($message[$i], $vowels)) {\n            $encodeMessage\
    \ .= $alphabet[(array_search($message[$i], $alphabet) + 2) % 26];\n        } else\
    \ {\n            $encodeMessage .= $message[$i];\n        }\n    }\n    return\
    \ strtoupper($encodeMessage);\n}\n\n$test = encode('This is a message');\nvar_dump($test);",
  "    // 1. Convert message to lowercase\n    $message = strtolower($message);\n\
    \    // 2. create an array of vowels\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    // 3. create an array of the vowels that are two letter ahead\n    $new_vowels\
    \ = ['c', 'f', 'j', 'n', 'r'];\n    // 4. create a variable that will hold our\
    \ encoded message\n    $encoded_message = '';\n    // 5. loop through the message\n\
    \    for ($i = 0; $i < strlen($message); $i++) {\n        // 6. replace the vowels\
    \ in the message with the the new vowels\n        if (in_array($message[$i], $vowels))\
    \ {\n            $index = array_search($message[$i], $vowels);\n            $encoded_message\
    \ .= $new_vowels[$index];\n        } else {\n            $encoded_message .= $message[$i];\n\
    \        }\n    }\n    // 7. convert the encoded message to uppercase\n    $encoded_message\
    \ = strtoupper($encoded_message);\n    // 8. return the encoded message\n    return\
    \ $encoded_message;\n}\n", "\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\t$message\
    \ = strtolower($message);\n\t$encoded = '';\n\tfor ($i = 0; $i < strlen($message);\
    \ $i++) {\n\t\t$char = $message[$i];\n\t\t$charPosition = strpos($alphabet, $char);\n\
    \t\tif ($charPosition !== false) {\n\t\t\tif ($charPosition < 25) {\n\t\t\t\t\
    $encoded .= strtoupper($alphabet[$charPosition + 2]);\n\t\t\t} else {\n\t\t\t\t\
    $encoded .= strtoupper($alphabet[$charPosition - 24]);\n\t\t\t}\n\t\t} else {\n\
    \t\t\t$encoded .= $char;\n\t\t}\n\t}\n\treturn $encoded;\n}\n", "\t$alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n\t$vowels = ['a', 'e', 'i', 'o', 'u'];\n\t$vowels_two_ahead\
    \ = [];\n\t$message_arr = str_split($message);\n\t$encoded_message = '';\n\tforeach\
    \ ($vowels as $vowel) {\n\t\t$idx = strpos($alphabet, $vowel);\n\t\t$vowels_two_ahead[]\
    \ = substr($alphabet, $idx + 2, 1);\n\t}\n\tforeach ($message_arr as $character)\
    \ {\n\t\tif (ctype_upper($character)) {\n\t\t\t$character = strtolower($character);\n\
    \t\t} elseif (ctype_lower($character)) {\n\t\t\t$character = strtoupper($character);\n\
    \t\t}\n\t\tif (in_array($character, $vowels)) {\n\t\t\t$character = array_shift($vowels_two_ahead);\n\
    \t\t}\n\t\t$encoded_message .= $character;\n\t}\n\treturn $encoded_message;\n\
    }\n\n$message = 'This is a message';\necho encode($message);", "    $letters =\
    \ range('a', 'z');\n    $replaced = str_replace($letters, $letters, $message);\n\
    \    $case = strtoupper($replaced);\n    $allVowels = array('A', 'E', 'I', 'O',\
    \ 'U');\n    $allVowels = array_merge($allVowels, array('a', 'e', 'i', 'o', 'u'));\n\
    \    $replacedVowels = str_replace($allVowels, $allVowels, $case);\n    $newVowels\
    \ = array('C', 'G', 'K', 'O', 'S');\n    $newVowels = array_merge($newVowels,\
    \ array('c', 'g', 'k', 'o', 's'));\n    $new = str_replace($allVowels, $newVowels,\
    \ $replacedVowels);\n    return $new;\n}\n\necho encode('This is a message');",
  "\t$encoded_message = \"\";\n\t$message = strtolower($message);\n\tfor ($i = 0;\
    \ $i < strlen($message); $i++) {\n\t\tif (\n\t\t\t$message[$i] == 'a'\n\t\t\t\
    || $message[$i] == 'e'\n\t\t\t|| $message[$i] == 'i'\n\t\t\t|| $message[$i] ==\
    \ 'o'\n\t\t\t|| $message[$i] == 'u'\n\t\t) {\n\t\t\t$encoded_message .= chr(ord($message[$i])\
    \ + 2);\n\t\t} else {\n\t\t\t$encoded_message .= $message[$i];\n\t\t}\n\t}\n\t\
    return $encoded_message;\n}\n", "    $alphabet = array('a', 'b', 'c', 'd', 'e',\
    \ 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',\
    \ 'v', 'w', 'x', 'y', 'z');\n    $vowels = array('a', 'e', 'i', 'o', 'u');\n \
    \   $message = strtolower($message);\n    $code = array();\n    for ($i = 0; $i\
    \ < strlen($message); $i++) {\n        $next = $message[$i];\n        if (in_array($next,\
    \ $vowels)) {\n            $idx = array_search($next, $alphabet);\n          \
    \  $next = $alphabet[($idx + 2) % count($alphabet)];\n        } else if (is_numeric($next))\
    \ {\n            $next = $next;\n        } else {\n            $next = strtoupper($next);\n\
    \        }\n        array_push($code, $next);\n    }\n    return implode('', $code);\n\
    }\necho encode('test') . PHP_EOL;\necho encode('This is a message') . PHP_EOL;\n",
  "    $alphabet = str_split('abcdefghijklmnopqrstuvwxyz');\n    $encoded = '';\n\
    \    $message = strtolower($message);\n    for ($i = 0; $i < strlen($message);\
    \ $i++) {\n        $index = array_search($message[$i], $alphabet);\n        if\
    \ ($index !== false) {\n            $index += 2;\n            if ($index > 25)\
    \ {\n                $index -= 26;\n            }\n            $encoded .= $alphabet[$index];\n\
    \        } else {\n            $encoded .= $message[$i];\n        }\n    }\n \
    \   return $encoded;\n}\necho encode('test') . PHP_EOL;\necho encode('This is\
    \ a message') . PHP_EOL;", "  // Your code here\n}\n", "\t$alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n\
    \t$result = '';\n\tfor ($i=0; $i < strlen($message); $i++) { \n\t\t$char = strtolower($message[$i]);\n\
    \t\tif (in_array($char, $alphabet)) {\n\t\t\t$index = array_search($char, $alphabet);\n\
    \t\t\tif ($index+2 < count($alphabet)) {\n\t\t\t\t$result .= $alphabet[$index+2];\n\
    \t\t\t} else {\n\t\t\t\t$result .= $alphabet[abs(count($alphabet)-$index-2)];\n\
    \t\t\t}\n\t\t} else {\n\t\t\t$result .= $message[$i];\n\t\t}\n\t}\n\treturn $result;\n\
    }\n\n$message = \"This is a message\";\necho encode($message);\necho \"<br>\"\
    ;\necho \"<br>\";\necho encode(\"test\");", "\t\n\t//create array of lowercase\
    \ vowels\n\t$vowels = array('a', 'e', 'i', 'o', 'u');\n\t\n\t//make the message\
    \ all lowercase\n\t$message = strtolower($message);\n\t\n\t//create encoded array\n\
    \t$encoded = array();\n\t\n\t//loop through message string\n\tfor ($i = 0; $i\
    \ < strlen($message); $i++) {\n\t\t\n\t\t//check if the letter is an uppercase\
    \ letter\n\t\tif (ctype_upper($message[$i])) {\n\t\t\t//make lowercase and add\
    \ to encoded array\n\t\t\t$encoded[] = strtolower($message[$i]);\n\t\t}\n\t\t\
    //check if the letter is a lowercase letter\n\t\telseif (ctype_lower($message[$i]))\
    \ {\n\t\t\t//make uppercase and add to encoded array\n\t\t\t$encoded[] = strtoupper($message[$i]);\n\
    \t\t}\n\t\t\n\t\t//check if the letter is a vowel\n\t\telseif (in_array($message[$i],\
    \ $vowels)) {\n\t\t\t//grab the vowel index\n\t\t\t$key = array_search($message[$i],\
    \ $vowels);\n\t\t\t//check if it's the last index in the array\n\t\t\tif ($key\
    \ == (count($vowels) - 1)) {\n\t\t\t\t//add the first index to the array\n\t\t\
    \t\t$encoded[] = $vowels[0];\n\t\t\t}\n\t\t\t//if not...\n\t\t\telse {\n\t\t\t\
    \t//add the next index to the array\n\t\t\t\t$encoded[] = $vowels[$key + 1];\n\
    \t\t\t}\n\t\t}\n\t\t//if it's not a letter...\n\t\telse {\n\t\t\t//add to encoded\
    \ array\n\t\t\t$encoded[] = $message[$i];\n\t\t}\n\t}\n\t\n\t//return encoded\
    \ message as a string\n\treturn implode('', $encoded);\n}", "    $vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n    $string = \"\";\n    for ($i = 0; $i < strlen($message);\
    \ $i++) {\n        if (in_array($message[$i], $vowels)) {\n            $string\
    \ .= getNextVowel($message[$i]);\n        } else {\n            $string .= swapCase($message[$i]);\n\
    \        }\n    }\n    return $string;\n}\n", "\t$vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n\t$encoded = \"\";\n\tfor ($i = 0; $i < strlen($message); $i++) {\n\t\
    \t$letter = $message[$i];\n\t\tif (in_array($letter, $vowels)) {\n\t\t\t$index\
    \ = array_search($letter, $vowels);\n\t\t\t$letter = $vowels[($index + 2) % count($vowels)];\n\
    \t\t}\n\t\t$encoded .= is_numeric($letter) ? $letter : ($letter == strtoupper($letter)\
    \ ? strtolower($letter) : strtoupper($letter));\n\t}\n\treturn $encoded;\n}\n\n\
    echo encode('This is a message');", "    $result = '';\n    $vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n    for ($i = 0; $i < strlen($message); $i++) {\n        $char\
    \ = strtolower($message[$i]);\n        if (in_array($char, $vowels)) {\n     \
    \       // If the character is a vowel and it's the last one, then:\n        \
    \    if ($char === 'u') {\n                $newChar = 'a';\n            } else\
    \ {\n                $newChar = ++$char;\n            }\n            $result .=\
    \ strtoupper($newChar);\n        } else {\n            $result .= strtoupper($char);\n\
    \        }\n    }\n    return $result;\n}\n\necho encode('test') . PHP_EOL;\n\
    echo encode('This is a message') . PHP_EOL;", "  $encoded = \"\";\n  $vowels =\
    \ array('a', 'e', 'i', 'o', 'u');\n  $message = strtolower($message);\n  for ($i\
    \ = 0; $i < strlen($message); $i++) {\n    $letter = $message[$i];\n    if (in_array($letter,\
    \ $vowels)) {\n      $encoded = $encoded . next_vowel($letter);\n    } else if\
    \ (ctype_alpha($letter)) {\n      $encoded = $encoded . swap_case($letter);\n\
    \    } else {\n      $encoded = $encoded . $letter;\n    }\n  }\n  return $encoded;\n\
    }\n", "    $swapped = strtolower($message);\n    $vowels = \"aeiou\";\n    $encoded\
    \ = \"\";\n    for ($i = 0; $i < strlen($swapped); $i++) {\n        if (ctype_alpha($swapped[$i]))\
    \ {\n            if (ctype_upper($message[$i])) {\n                $encoded .=\
    \ strtoupper($swapped[$i]);\n            } else {\n                $encoded .=\
    \ $swapped[$i];\n            }\n        } else {\n            $encoded .= $message[$i];\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($encoded); $i++) {\n        if\
    \ (strpos($vowels, $encoded[$i]) !== false) {\n            $encoded[$i] = $vowels[(strpos($vowels,\
    \ $encoded[$i]) + 2) % 5];\n        }\n    }\n    return $encoded;\n}\n", "  \
    \  $alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    $vowels = array(\"A\", \"\
    E\", \"I\", \"O\", \"U\");\n    $newMessage = \"\";\n    for ($i = 0; $i < strlen($message);\
    \ $i++) {\n        $currentChar = $message[$i];\n        if (in_array($currentChar,\
    \ $vowels)) {\n            $index = strpos($alphabet, $currentChar);\n       \
    \     $newChar = $alphabet[($index + 2) % strlen($alphabet)];\n            $newMessage\
    \ .= $newChar;\n        } else {\n            $newMessage .= $currentChar;\n \
    \       }\n    }\n    return strtoupper($newMessage);\n}\n", "    $message = strtolower($message);\n\
    \    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $map = array(\n        'a'\
    \ => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n   \
    \     'u' => 'y'\n    );\n    $encoded = '';\n    for ($i = 0; $i < strlen($message);\
    \ $i++) {\n        if (in_array($message[$i], $vowels)) {\n            $encoded\
    \ .= $map[$message[$i]];\n        } else {\n            $encoded .= $message[$i];\n\
    \        }\n    }\n    return strtoupper($encoded);\n}\n\necho encode('This is\
    \ a message');\n", "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $output = '';\n\
    \    for ($i = 0; $i < strlen($message); $i++) {\n        $output .= ctype_lower($message[$i])\
    \ ? strtoupper($message[$i]) : strtolower($message[$i]);\n        if (in_array($output[$i],\
    \ $vowels)) {\n            $output[$i] = $vowels[(array_search($output[$i], $vowels)\
    \ + 2) % 5];\n        }\n    }\n    return $output;\n}", "\t$newMessage = \"\"\
    ;\n\tfor ($i = 0; $i < strlen($message); $i++) {\n\t\t$letter = $message[$i];\n\
    \t\tif (ctype_upper($letter)) {\n\t\t\t$letter = strtolower($letter);\n\t\t} else\
    \ if (ctype_lower($letter)) {\n\t\t\t$letter = strtoupper($letter);\n\t\t}\n\t\
    \t$newMessage .= $letter;\n\t}\n\treturn $newMessage;\n}\n\necho encode('test')\
    \ . \"\\n\";\necho encode('This is a message') . \"\\n\";", "  $encoder = array(\"\
    a\" => \"c\", \"e\" => \"g\", \"i\" => \"k\", \"o\" => \"q\", \"u\" => \"w\");\n\
    \  $message = strtolower($message);\n  $encoded = \"\";\n  for ($i = 0; $i < strlen($message);\
    \ $i++) {\n    if (in_array($message[$i], array_keys($encoder))) {\n      $encoded\
    \ .= $encoder[$message[$i]];\n    } else {\n      $encoded .= $message[$i];\n\
    \    }\n  }\n  return $encoded;\n}", "\t$message = strtolower($message);\n\t$message\
    \ = str_split($message);\n\t$letters = array('a', 'b', 'c', 'd', 'e', 'f', 'g',\
    \ 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',\
    \ 'x', 'y', 'z');\n\t$vowels = array('a', 'e', 'i', 'o', 'u');\n\tfor ($i = 0;\
    \ $i < count($message); $i++) {\n\t\tif (in_array($message[$i], $vowels)) {\n\t\
    \t\t$message[$i] = $letters[(array_search($message[$i], $letters) + 2) % 26];\n\
    \t\t}\n\t}\n\treturn implode($message);\n}\n\nvar_dump(encode('test') === 'tgst');\n\
    var_dump(encode('This is a message') === 'thks ks c mgsscgg');", "    $map = array('a'\
    \ => 'c', 'e' => 'g', 'i' => 'k', 'o' => 'q', 'u' => 'w');\n    $new = '';\n \
    \   for ($i = 0; $i < strlen($message); $i++) {\n        $char = $message[$i];\n\
    \        if (ctype_upper($char)) {\n            $new .= strtolower($char);\n \
    \       } elseif (ctype_lower($char)) {\n            $new .= $map[$char] ? $map[$char]\
    \ : strtoupper($char);\n        } else {\n            $new .= $char;\n       \
    \ }\n    }\n    return $new;\n}\n", "    $alphabet = array('a', 'b', 'c', 'd',\
    \ 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\
    \ 'u', 'v', 'w', 'x', 'y', 'z');\n    $vowels = array('a', 'e', 'i', 'o', 'u');\n\
    \    $message = strtolower($message);\n    $message = str_split($message);\n \
    \   $newMessage = array();\n    foreach ($message as $letter) {\n        $newMessage[]\
    \ = $letter;\n    }\n    $newMessage = implode($newMessage);\n    $newMessage\
    \ = str_split($newMessage);\n    $count = 0;\n    foreach ($newMessage as $letter)\
    \ {\n        if ($count%2==0) {\n            if (in_array($letter, $alphabet))\
    \ {\n                $i = array_search($letter, $alphabet);\n                $newMessage[$count]\
    \ = strtoupper($alphabet[$i]);\n            }\n        }\n        $count++;\n\
    \    }\n    $count = 0;\n    foreach ($newMessage as $letter) {\n        if (in_array($letter,\
    \ $vowels)) {\n            $i = array_search($letter, $vowels);\n            $newMessage[$count]\
    \ = $vowels[$i+2];\n        }\n        $count++;\n    }\n    $newMessage = implode($newMessage);\n\
    \    echo $newMessage;\n}\nencode('This is a message');", "\n}\n", "    $array\
    \ = str_split($message);\n    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $alphabet\
    \ = array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
    \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n    $coded_message\
    \ = '';\n    foreach ($array as $letter) {\n        if (in_array($letter, $vowels))\
    \ {\n            $new_letter = $alphabet[array_search($letter, $alphabet) + 2];\n\
    \            $coded_message .= $new_letter;\n        } else {\n            $new_letter\
    \ = $alphabet[array_search($letter, $alphabet)];\n            $coded_message .=\
    \ $new_letter;\n        }\n    }\n    return strtoupper($coded_message);\n}\n\n\
    echo encode('test') . \"\\n\";\necho encode('This is a message') . \"\\n\";\n",
  "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $encoded = '';\n    $i = 0;\n   \
    \ $message_length = strlen($message);\n    $letter_value = 0;\n    while ($i <\
    \ $message_length) {\n        $letter = $message[$i];\n        $letter_value =\
    \ ord($letter);\n        if (in_array($letter, $vowels)) {\n            if ($letter_value\
    \ + 2 > 122) {\n                $letter_value = 96 + ($letter_value + 2 - 122);\n\
    \            } else {\n                $letter_value += 2;\n            }\n  \
    \      } else if ($letter_value >= 65 && $letter_value <= 90) {\n            $letter_value\
    \ += 32;\n        } else if ($letter_value >= 97 && $letter_value <= 122) {\n\
    \            $letter_value -= 32;\n        }\n        $encoded .= chr($letter_value);\n\
    \        $i++;\n    }\n    return $encoded;\n}\n", "    $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    $alphabet_vowels = array('a','e','i','o','u');\n    $encoded_message = '';\n\
    \    for ($i = 0; $i < strlen($message); $i++) {\n        $current_char = $message[$i];\n\
    \        if (in_array($current_char, $alphabet_vowels)) {\n            $current_char_index\
    \ = strpos($alphabet, $current_char);\n            $encoded_message .= $alphabet[$current_char_index\
    \ + 2];\n        } else if (ctype_upper($current_char)) {\n            $current_char_index\
    \ = strpos($alphabet, strtolower($current_char));\n            $encoded_message\
    \ .= strtoupper($alphabet[$current_char_index + 2]);\n        } else {\n     \
    \       $encoded_message .= $current_char;\n        }\n    }\n    return $encoded_message;\n\
    }\n", "\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\t$alphabet_length = strlen($alphabet);\n\
    \t$new_message = '';\n\t$vowels = array('a', 'e', 'i', 'o', 'u');\n\tfor ($i =\
    \ 0; $i < strlen($message); $i++) {\n\t\tif (ctype_upper($message[$i])) {\n\t\t\
    \t$new_message .= strtolower($message[$i]);\n\t\t} else {\n\t\t\t$new_message\
    \ .= strtoupper($message[$i]);\n\t\t}\n\t}\n\tfor ($i = 0; $i < strlen($new_message);\
    \ $i++) {\n\t\tif (in_array($new_message[$i], $vowels)) {\n\t\t\t$new_message[$i]\
    \ = $alphabet[($alphabet_length + strpos($alphabet, $new_message[$i]) + 2) % $alphabet_length];\n\
    \t\t}\n\t}\n\treturn $new_message;\n}\necho encode('test');\necho '<br>';\necho\
    \ encode('This is a message');", "\t$lowerCase = array('a', 'e', 'i', 'o', 'u');\n\
    \t$upperCase = array('A', 'E', 'I', 'O', 'U');\n\t$replacement = array('c', 'g',\
    \ 'k', 'o', 's');\n\t$message = str_split($message);\n\tfor ($i = 0; $i < count($message);\
    \ $i++) {\n\t\tif (in_array($message[$i], $lowerCase)) {\n\t\t\t$message[$i] =\
    \ $replacement[array_search($message[$i], $lowerCase)];\n\t\t} else if (in_array($message[$i],\
    \ $upperCase)) {\n\t\t\t$message[$i] = strtoupper($replacement[array_search($message[$i],\
    \ $upperCase)]);\n\t\t} else {\n\t\t\t$message[$i] = strtoupper($message[$i]);\n\
    \t\t}\n\t}\n\treturn implode('', $message);\n}\n\necho encode('test') . PHP_EOL;\n\
    echo encode('This is a message') . PHP_EOL;", "  $vowels = [\n    'a' => 'c',\n\
    \    'e' => 'g',\n    'i' => 'k',\n    'o' => 'q',\n    'u' => 'y',\n  ];\n  $chars\
    \ = str_split($message);\n  $encodedChars = [];\n  foreach ($chars as $char) {\n\
    \    if (array_key_exists(strtolower($char), $vowels)) {\n      $encodedChars[]\
    \ = $vowels[strtolower($char)];\n    } else {\n      $encodedChars[] = ($char\
    \ == strtoupper($char)) ? strtolower($char) : strtoupper($char);\n    }\n  }\n\
    \  return implode('', $encodedChars);\n}\necho encode('test') . PHP_EOL;\necho\
    \ encode('This is a message') . PHP_EOL;", "\t$vowels = array('a', 'e', 'i', 'o',\
    \ 'u');\n\tfor ($i = 0; $i < strlen($message); $i++) {\n\t\t$current = $message[$i];\n\
    \t\tif (ctype_upper($current)) {\n\t\t\t$current = strtolower($current);\n\t\t\
    } else {\n\t\t\t$current = strtoupper($current);\n\t\t}\n\t\tif (in_array($current,\
    \ $vowels)) {\n\t\t\t$current = $vowels[array_search($current, $vowels) + 2];\n\
    \t\t}\n\t\t$newMessage[] = $current;\n\t}\n\treturn implode($newMessage);\n}",
  "  $alpha = str_split('abcdefghijklmnopqrstuvwxyz');\n  $vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n  $letters = str_split(strtolower($message));\n  $encoded = [];\n\
    \  foreach ($letters as $letter) {\n    if (in_array($letter, $vowels)) {\n  \
    \    $position = array_search($letter, $alpha);\n      $letter = $alpha[$position\
    \ + 2];\n    }\n    array_push($encoded, $letter);\n  }\n  return implode(array_map('strtoupper',\
    \ $encoded));\n}\n", "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $encoded =\
    \ '';\n    for ($i = 0; $i < strlen($message); $i++) {\n        $ascii = ord($message[$i]);\n\
    \        $char = $message[$i];\n        if ($ascii >= 65 && $ascii <= 90) {\n\
    \            $ascii += 32;\n            $char = chr($ascii);\n        }\n    \
    \    if (in_array($char, $vowels)) {\n            $index = array_search($char,\
    \ $vowels);\n            $ascii = ord($vowels[($index + 2) % 5]);\n          \
    \  $char = chr($ascii);\n        }\n        $encoded .= $char;\n    }\n    return\
    \ $encoded;\n}\necho encode('This is a message');", "    // Your code here\n}",
  "    $result = \"\";\n    for ($i = 0; $i < strlen($message); $i++) {\n        $result\
    \ .= encode_letter($message[$i]);\n    }\n    return $result;\n}\n", "    $message\
    \ = strtolower($message);\n    $message = str_split($message);\n    $vowels =\
    \ ['a', 'e', 'i', 'o', 'u'];\n    $encoded = '';\n    foreach ($message as $letter)\
    \ {\n        if (in_array($letter, $vowels)) {\n            switch ($letter) {\n\
    \                case 'a':\n                    $encoded .= 'c';\n           \
    \         break;\n                case 'e':\n                    $encoded .= 'g';\n\
    \                    break;\n                case 'i':\n                    $encoded\
    \ .= 'k';\n                    break;\n                case 'o':\n           \
    \         $encoded .= 'm';\n                    break;\n                case 'u':\n\
    \                    $encoded .= 'q';\n                    break;\n          \
    \  }\n        } else {\n            $encoded .= $letter;\n        }\n    }\n \
    \   return strtoupper($encoded);\n}\necho encode('test') . PHP_EOL;\necho encode('This\
    \ is a message') . PHP_EOL;", "    $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    $encoded = '';\n    for ($i = 0; $i < strlen($message); $i++) {\n       \
    \ $char = strtolower($message[$i]);\n        if ($char == ' ') {\n           \
    \ $encoded .= ' ';\n        } else {\n            $index = strpos($alphabet, $char);\n\
    \            $index = ($index + 2) % strlen($alphabet);\n            $encoded\
    \ .= ctype_upper($message[$i]) ? strtoupper($alphabet[$index]) : $alphabet[$index];\n\
    \        }\n    }\n    return $encoded;\n}\n", "\t$vowels = [\"a\",\"e\",\"i\"\
    ,\"o\",\"u\"];\n\t$new_message = \"\";\n\t$len = strlen($message);\n\tfor ($i=0;\
    \ $i < $len; $i++) { \n\t\t$m = $message[$i];\n\t\tif (in_array($m, $vowels))\
    \ {\n\t\t\t$new_message .= strtoupper($vowels[(array_search($m, $vowels) + 2)\
    \ % count($vowels)]);\n\t\t} else {\n\t\t\t$new_message .= strtoupper($m);\n\t\
    \t}\n\t}\n\treturn $new_message;\n}\n", "    $alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\
    \    $alphabet .= strtolower($alphabet);\n    $alphabet .= 'AEIOU';\n    $alphabet\
    \ .= strtolower($alphabet);\n    $encoded_message = '';\n    for ($i = 0; $i <\
    \ strlen($message); $i++) {\n        $index = strpos($alphabet, $message[$i]);\n\
    \        $encoded_message .= $alphabet[$index + 2];\n    }\n    return $encoded_message;\n\
    }\n", "    $alphabet = array(\n        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\
    \ 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',\
    \ 'y', 'z'\n    );\n    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $message\
    \ = strtolower($message);\n    $new_message = '';\n    for ($i = 0; $i < strlen($message);\
    \ $i++) {\n        $char = $message[$i];\n        if (in_array($char, $vowels))\
    \ {\n            $new_message .= $alphabet[(array_search($char, $alphabet) + 2)\
    \ % 26];\n        } else if (in_array($char, $alphabet)) {\n            $new_message\
    \ .= $alphabet[(array_search($char, $alphabet) + 1) % 26];\n        } else {\n\
    \            $new_message .= $char;\n        }\n    }\n    return $new_message;\n\
    }\necho encode('test');\necho encode('This is a message');", "\t$encoded_message\
    \ = '';\n\t$message = strtolower($message);\n\t$vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n\tfor ($i = 0; $i < strlen($message); $i++) {\n\t\tif (in_array($message[$i],\
    \ $vowels)) {\n\t\t\tif ($message[$i] === 'u') {\n\t\t\t\t$encoded_message .=\
    \ 'a';\n\t\t\t} else {\n\t\t\t\t$encoded_message .= $vowels[array_search($message[$i],\
    \ $vowels) + 1];\n\t\t\t}\n\t\t} else {\n\t\t\t$encoded_message .= $message[$i];\n\
    \t\t}\n\t}\n\treturn strtoupper($encoded_message);\n}\n", "  // Your code here\n\
    }", "  $vowels = ['a', 'e', 'i', 'o', 'u'];\n  $encoded = '';\n  $chars = str_split($message);\n\
    \  foreach ($chars as $char) {\n    $encoded .= in_array($char, $vowels) ?\n \
    \     chr(ord($char) + 2) :\n      (ctype_upper($char) ? strtolower($char) : strtoupper($char));\n\
    \  }\n  return $encoded;\n}\necho encode('test') . PHP_EOL;\necho encode('This\
    \ is a message') . PHP_EOL;", "\n}", "  $encoded = '';\n  $message = strtolower($message);\n\
    \  $characters = str_split($message);\n  $key = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $key = str_split($key);\n  for ($i = 0; $i < count($characters); $i++) {\n\
    \    if (is_numeric($characters[$i])) {\n      $encoded .= $characters[$i];\n\
    \    } else {\n      for ($j = 0; $j < count($key); $j++) {\n        if ($characters[$i]\
    \ === $key[$j]) {\n          if ($j > 22) {\n            $encoded .= strtoupper($key[0]);\n\
    \          } elseif ($j > 19) {\n            $encoded .= strtoupper($key[1]);\n\
    \          } elseif ($j > 15) {\n            $encoded .= strtoupper($key[2]);\n\
    \          } elseif ($j > 12) {\n            $encoded .= strtoupper($key[3]);\n\
    \          } elseif ($j > 8) {\n            $encoded .= strtoupper($key[4]);\n\
    \          } elseif ($j > 4) {\n            $encoded .= strtoupper($key[5]);\n\
    \          } else {\n            $encoded .= strtoupper($key[$j + 2]);\n     \
    \     }\n        }\n      }\n    }\n  }\n  return $encoded;\n}\n", "  $low = \"\
    abcdefghijklmnopqrstuvwxyz\";\n  $up = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  $cipher\
    \ = \"cdefghijklmnopqrstuvwxyzab\";\n  $cipher[0] = \"C\";\n  $encoded = \"\"\
    ;\n  $message = str_split($message);\n  foreach ($message as $char) {\n    $letter\
    \ = str_replace($low, $cipher, $char);\n    $letter = str_replace($up, $cipher,\
    \ $letter);\n    $encoded .= $letter;\n  }\n  return $encoded;\n}\necho encode('test')\
    \ . PHP_EOL;\necho encode('This is a message') . PHP_EOL;", "\t$chars = str_split($message);\n\
    \t$new_chars = [];\n\tforeach ($chars as $index => $char) {\n\t\tif (ctype_alpha($char))\
    \ {\n\t\t\t$new_chars[$index] = ord($char);\n\t\t\tif (ctype_upper($char)) {\n\
    \t\t\t\tif ($new_chars[$index] < 90) {\n\t\t\t\t\t$new_chars[$index]++;\n\t\t\t\
    \t} else {\n\t\t\t\t\t$new_chars[$index] = 65;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\
    \t\tif ($new_chars[$index] < 122) {\n\t\t\t\t\t$new_chars[$index]++;\n\t\t\t\t\
    } else {\n\t\t\t\t\t$new_chars[$index] = 97;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$char\
    \ = chr($new_chars[$index]);\n\t\t\tif (in_array($char, ['a', 'e', 'i', 'o', 'u']))\
    \ {\n\t\t\t\t$char = next_vowel($char);\n\t\t\t\t$new_chars[$index] = ord($char);\n\
    \t\t\t}\n\t\t} else {\n\t\t\t$new_chars[$index] = $char;\n\t\t}\n\t}\n\t$new_message\
    \ = '';\n\tforeach ($new_chars as $char) {\n\t\t$new_message .= chr($char);\n\t\
    }\n\treturn $new_message;\n}\n", "    $result = \"\";\n    for ($i = 0; $i < strlen($message);\
    \ $i++) {\n        $current = $message[$i];\n        $result .= encodeChar($current);\n\
    \    }\n    return $result;\n}\n", "\t$vowels = array('a', 'e', 'i', 'o', 'u');\n\
    \t$messageArray = str_split($message);\n\t$outputArray = array();\n\tforeach ($messageArray\
    \ as $letter) {\n\t\t$letter = strtolower($letter);\n\t\t$newLetter = $letter;\n\
    \t\tif (in_array($letter, $vowels)) {\n\t\t\t$newLetter = next($vowels);\n\t\t\
    \t$newLetter = next($vowels);\n\t\t\t$newLetter = key($vowels);\n\t\t}\n\t\t$outputArray[]\
    \ = $newLetter;\n\t}\n\treturn strtoupper(implode('', $outputArray));\n}\n\necho\
    \ encode('test');\necho \"\\n\";\necho encode('This is a message');", "\t$vowels\
    \ = array('a', 'e', 'i', 'o', 'u');\n\t$vowels_encoded = array('c', 'g', 'k',\
    \ 'o', 's');\n\t$encoded_message = '';\n\tfor ($i = 0; $i < strlen($message);\
    \ $i++) {\n\t\tif (in_array($message[$i], $vowels)) {\n\t\t\t$encoded_message\
    \ .= $vowels_encoded[array_search($message[$i], $vowels)];\n\t\t} else {\n\t\t\
    \t$encoded_message .= strtoupper($message[$i]);\n\t\t}\n\t}\n\treturn $encoded_message;\n\
    }\necho encode('test');\necho \"\\n\";\necho encode('This is a message');\necho\
    \ \"\\n\";\n", "    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $encoded =\
    \ '';\n    $length = strlen($message);\n    for ($i = 0; $i < $length; $i++) {\n\
    \        $letter = $message[$i];\n        if (in_array($letter, $vowels)) {\n\
    \            $encoded .= get_next_vowel($letter);\n        } else if (ctype_upper($letter))\
    \ {\n            $encoded .= strtolower($letter);\n        } else {\n        \
    \    $encoded .= strtoupper($letter);\n        }\n    }\n    return $encoded;\n\
    }\n", "\t\n\t$vowels = array('a', 'e', 'i', 'o', 'u');\n\t$encode_message = \"\
    \";\n\t\n\t$length = strlen($message);\n\t\n\tfor ($i = 0; $i < $length; $i++)\
    \ {\n\t\t$letter = $message[$i];\n\t\t$encode_message .= strtoupper($letter);\n\
    \t}\n\t\n\treturn $encode_message;\n}\n", "    $vowels = [\n        'a' => 'c',\n\
    \        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' =>\
    \ 'y',\n    ];\n    $message = strtolower($message);\n    $encoded = \"\";\n \
    \   for ($i = 0; $i < strlen($message); $i++) {\n        if (in_array($message[$i],\
    \ array_keys($vowels))) {\n            $encoded .= $vowels[$message[$i]];\n  \
    \      } else {\n            $encoded .= $message[$i];\n        }\n    }\n   \
    \ return strtoupper($encoded);\n}\n", "\t$alphabet = array('a', 'b', 'c', 'd',\
    \ 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\
    \ 'u', 'v', 'w', 'x', 'y', 'z');\n\t$vowels = array('a', 'e', 'i', 'o', 'u');\n\
    \t$swap_arr = array();\n\t$vowels_arr = array();\n\t$message_array = str_split($message);\n\
    \tfor ($i = 0; $i < count($message_array); $i++) {\n\t\tif (in_array($message_array[$i],\
    \ $alphabet)) {\n\t\t\tif (ctype_upper($message_array[$i])) {\n\t\t\t\tarray_push($swap_arr,\
    \ strtolower($message_array[$i]));\n\t\t\t} else {\n\t\t\t\tarray_push($swap_arr,\
    \ strtoupper($message_array[$i]));\n\t\t\t}\n\t\t} else {\n\t\t\tarray_push($swap_arr,\
    \ $message_array[$i]);\n\t\t}\n\t}\n\tfor ($i = 0; $i < count($swap_arr); $i++)\
    \ {\n\t\tif (in_array($swap_arr[$i], $vowels)) {\n\t\t\tif ($swap_arr[$i] == 'z')\
    \ {\n\t\t\t\tarray_push($vowels_arr, 'b');\n\t\t\t} elseif ($swap_arr[$i] == 'Z')\
    \ {\n\t\t\t\tarray_push($vowels_arr, 'B');\n\t\t\t} else {\n\t\t\t\tarray_push($vowels_arr,\
    \ $alphabet[(array_search($swap_arr[$i], $alphabet) + 2)]);\n\t\t\t}\n\t\t} else\
    \ {\n\t\t\tarray_push($vowels_arr, $swap_arr[$i]);\n\t\t}\n\t", "\n}\n", "   \
    \ $vowels = array('a', 'e', 'i', 'o', 'u');\n    $key = array_search($message,\
    \ $vowels);\n    $key += 2;\n    //var_dump($vowels);\n    //var_dump($key);\n\
    \    if (isset($vowels[$key])) {\n        return $vowels[$key];\n    } else {\n\
    \        return false;\n    }\n}\n\necho encode('b') . PHP_EOL;\necho encode('f')\
    \ . PHP_EOL;\necho encode('o') . PHP_EOL;\n", "  $vowels = [\n    'a' => 'c',\n\
    \    'e' => 'g',\n    'i' => 'k',\n    'o' => 'q',\n    'u' => 'w',\n  ];\n  $encoded\
    \ = '';\n  for ($i = 0; $i < strlen($message); $i++) {\n    $letter = $message[$i];\n\
    \    if (isset($vowels[$letter])) {\n      $encoded .= $vowels[$letter];\n   \
    \ } else {\n      $encoded .= $letter;\n    }\n  }\n  return strtoupper($encoded);\n\
    }\necho encode('test') . PHP_EOL;\necho encode('This is a message') . PHP_EOL;",
  "    $upperAlpha = range('A', 'Z');\n    $lowerAlpha = range('a', 'z');\n    $vowels\
    \ = array('a', 'e', 'i', 'o', 'u');\n    $encoded = '';\n    for ($i = 0; $i <\
    \ strlen($message); $i++) {\n        if (in_array($message[$i], $vowels)) {\n\
    \            $letter = array_search($message[$i], $lowerAlpha);\n            $letter\
    \ = ($letter + 2) % 26;\n            $encoded .= $lowerAlpha[$letter];\n     \
    \   } elseif (in_array($message[$i], $upperAlpha)) {\n            $letter = array_search($message[$i],\
    \ $upperAlpha);\n            $letter = ($letter + 2) % 26;\n            $encoded\
    \ .= $upperAlpha[$letter];\n        } else {\n            $encoded .= $message[$i];\n\
    \        }\n    }\n    return $encoded;\n}\necho encode('test') . \"\\n\";\necho\
    \ encode('This is a message') . \"\\n\";", "    $messageArray = str_split($message);\n\
    \    $result = [];\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    foreach ($messageArray\
    \ as $letter) {\n        if (ctype_alpha($letter)) {\n            $letter = strtolower($letter);\n\
    \            if (in_array($letter, $vowels)) {\n                $key = array_search($letter,\
    \ $vowels);\n                $key = $key + 2;\n                if ($key >= count($vowels))\
    \ {\n                    $key = $key - count($vowels);\n                }\n  \
    \              $letter = $vowels[$key];\n            }\n            $result[]\
    \ = $letter;\n        } else {\n            $result[] = $letter;\n        }\n\
    \    }\n    $result = implode($result);\n    return $result;\n}\n\necho encode('test')\
    \ . PHP_EOL;\necho encode('This is a message') . PHP_EOL;", "\t$vowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n\t$letters = str_split($message);\n\t$encoded = '';\n\t\
    foreach ($letters as $letter) {\n\t\tif (in_array($letter, $vowels)) {\n\t\t\t\
    if ($letter === 'u') {\n\t\t\t\t$encoded .= 'a';\n\t\t\t} else {\n\t\t\t\t$key\
    \ = array_search($letter, $vowels);\n\t\t\t\t$encoded .= $vowels[$key + 2];\n\t\
    \t\t}\n\t\t} else {\n\t\t\t$encoded .= strtoupper($letter);\n\t\t}\n\t}\n\treturn\
    \ $encoded;\n}\necho encode('test');\necho \"\\n\";\necho encode('This is a message');",
  "    $message = strtolower($message);\n    $message = str_split($message);\n   \
    \ $vowels = array('a', 'e', 'i', 'o', 'u');\n    $newMsg = array();\n    for ($i\
    \ = 0; $i < count($message); $i++) {\n        if (in_array($message[$i], $vowels))\
    \ {\n            $newMsg[] = $vowels[array_search($message[$i], $vowels) + 2];\n\
    \        } else {\n            $newMsg[] = $message[$i];\n        }\n    }\n \
    \   return strtoupper(implode('', $newMsg));\n}\necho encode('test') . \"\\n\"\
    ;\necho encode('This is a message') . \"\\n\";\n", "    // break apart the message,\
    \ into letters\n    $letters = str_split($message);\n    $encoded = [];\n    //\
    \ go through the letters\n    foreach ($letters as $letter) {\n        $letter\
    \ = strtolower($letter);\n        // see if it's a vowel\n        if (in_array($letter,\
    \ ['a', 'e', 'i', 'o', 'u'])) {\n            $encoded[] = next_letter($letter);\n\
    \        } else {\n            $encoded[] = $letter;\n        }\n    }\n    return\
    \ strtoupper(implode('', $encoded));\n}\n", "  $vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n  $letters = str_split($message);\n  $encoded = [];\n  foreach ($letters\
    \ as $letter) {\n    if ($letter === strtoupper($letter)) {\n      if (in_array(strtolower($letter),\
    \ $vowels)) {\n        array_push($encoded, $vowels[getVowelIndex($letter)]);\n\
    \      } else {\n        array_push($encoded, strtolower($letter));\n      }\n\
    \    } else {\n      if (in_array($letter, $vowels)) {\n        array_push($encoded,\
    \ strtoupper($vowels[getVowelIndex($letter)]));\n      } else {\n        array_push($encoded,\
    \ strtoupper($letter));\n      }\n    }\n  }\n  return implode('', $encoded);\n\
    }\n", "\t$lowerCase = 'abcdefghijklmnopqrstuvwxyz';\n\t$upperCase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\
    \t$encoded = str_split($message);\n\t$vowels = array('a', 'e', 'i', 'o', 'u');\n\
    \tforeach ($encoded as $key => $letter) {\n\t\tif (in_array($letter, $vowels))\
    \ {\n\t\t\t$encoded[$key] = nextChar($lowerCase, $letter);\n\t\t\t$encoded[$key]\
    \ = nextChar($lowerCase, $encoded[$key]);\n\t\t}\n\t\tif (strcmp($letter, strtoupper($letter))\
    \ === 0) {\n\t\t\t$encoded[$key] = nextChar($upperCase, $letter);\n\t\t\t$encoded[$key]\
    \ = nextChar($upperCase, $encoded[$key]);\n\t\t}\n\t}\n\treturn implode('', $encoded);\n\
    }\n", "\t\n\t$alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \t\n\t$message = strtolower($message);\n\t$message = str_split($message);\n\t\n\
    \t$letters = array();\n\t\n\tfor ($i = 0; $i < count($message); $i++) {\n\t\t\
    $letters[] = $message[$i];\n\t}\n\t\n\t$vowels = array('a','e','i','o','u');\n\
    \t\n\tfor ($i = 0; $i < count($letters); $i++) {\n\t\t\n\t\t// This is the number\
    \ of places ahead of the vowel\n\t\t$move = 2;\n\t\t\n\t\tif (in_array($letters[$i],\
    \ $vowels)) {\n\t\t\t$current_pos = array_search($letters[$i], $alphabet);\n\t\
    \t\t$new_pos = $current_pos + $move;\n\t\t\tif ($new_pos > 25) {\n\t\t\t\t$new_pos\
    \ = ($new_pos % 25) - 1;\n\t\t\t}\n\t\t\t$letters[$i] = $alphabet[$new_pos];\n\
    \t\t}\n\t\t\n\t\t// This will just swap all the cases\n\t\tif (ctype_upper($letters[$i]))\
    \ {\n\t\t\t$letters[$i] = strtolower($letters[$i]);\n\t\t} else {\n\t\t\t$letters[$i]\
    \ = strtoupper($letters[$i]);\n\t\t}\n\t}\n\t\n\treturn implode($letters);\n}\n\
    \necho encode('This is a message');", "    $message = strtolower($message);\n\
    \    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $vowelsIndexes = [];\n    $encoded\
    \ = '';\n    for ($i = 0; $i < strlen($message); $i++) {\n        if (in_array($message[$i],\
    \ $vowels)) {\n            $vowelsIndexes[] = $i;\n        }\n    }\n    for ($i\
    \ = 0; $i < strlen($message); $i++) {\n        if (in_array($i, $vowelsIndexes))\
    \ {\n            $currentVowel = $message[$i];\n            $vowelIndex = array_search($currentVowel,\
    \ $vowels);\n            $nextVowel = $vowels[($vowelIndex + 2) % 5];\n      \
    \      $encoded .= $nextVowel;\n        } else {\n            $encoded .= $message[$i];\n\
    \        }\n    }\n    return strtoupper($encoded);\n}\n\necho encode('test')\
    \ . PHP_EOL;\necho encode('This is a message') . PHP_EOL;", "    $alphabet = ['a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n    $vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n    $message = strtolower($message);\n    $result = '';\n    for\
    \ ($i = 0; $i < strlen($message); $i++) {\n        $char = $message[$i];\n   \
    \     if (in_array($char, $vowels)) {\n            $index = array_search($char,\
    \ $alphabet);\n            $result .= $alphabet[($index + 2) % 26];\n        }\
    \ else {\n            $result .= ucfirst($char);\n        }\n    }\n    return\
    \ $result;\n}\n\necho encode('test') . PHP_EOL;\necho encode('This is a message')\
    \ . PHP_EOL;", "\t// Input\n\t// $message = 'This is a message';\n\n\t// Create\
    \ a function that adds 2 to the letter\n\t// So, if the letter is 'a', then it\
    \ should give 'c'.\n\t// Note: This 'a' should be from the alphabet\n\t// So,\
    \ we cannot use substr() to get the character.\n\t// You will have to make use\
    \ of ord() and chr()\n\t// Don't forget to add the '2' to the character\n\t//\
    \ Returns 'c'\n\tfunction addTwoToLetter($letter) {\n\t\t// $letter is 'a'\n\t\
    \t// ord('a') is 97\n\t\t// chr(97) is 'a'\n\t\t$letter = ord($letter);\n\t\t\
    $letter = $letter + 2;\n\t\t$letter = chr($letter);\n\t\treturn $letter;\n\t}\n\
    \n\t// Create a function that checks if a letter is a vowel\n\t// $letter is 'a'\n\
    \t// if (preg_match('/[aeiou]/', $letter))\n\t// Returns true\n\tfunction isVowel($letter)\
    \ {\n\t\tif (preg_match('/[aeiou]/', $letter)) {\n\t\t\treturn true;\n\t\t} else\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// Create a function that changes the\
    \ letter case\n\t// strtolower()\n\t// strtoupper()\n\t// Example 'a' -> 'A'\n\
    \t// Returns 'A'\n\tfunction changeCase($letter) {\n\t\tif (ord($letter) >= 97)\
    \ {\n\t\t\t$letter = strtoupper($letter);\n\t\t} else {\n\t\t\t$letter = strtolower($letter);\n\
    \t\t}\n\t\treturn $letter;\n\t}\n\n\t// Call all the functions here to encode\
    \ the letters\n\t// $message = 'test';\n\t$messageArr = str_split($message);\n\
    \t$encodedArr = [];\n\tforeach ($messageArr as $letter) {\n\t\tif (isVowel($letter))\
    \ {\n\t\t\t$letter = addTwoToLetter($letter);\n\t\t}\n", "    $alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\
    \    $new_message = strtoupper($message);\n    for ($i = 0; $i < strlen($message);\
    \ $i++) {\n        $char = substr($message, $i, 1);\n        $new_char = strtoupper($char);\n\
    \        if ($char == $new_char) {\n            $new_char = strtolower($char);\n\
    \        } else {\n            $new_char = strtoupper($char);\n        }\n   \
    \     if (strpos($alpha, $char) !== false) {\n            $new_char = str_replace(array('a',\
    \ 'e', 'i', 'o', 'u'), array('c', 'g', 'k', 'o', 's'), $new_char);\n        }\n\
    \        $new_message = substr_replace($new_message, $new_char, $i, 1);\n    }\n\
    \    return $new_message;\n}\necho encode('test');\necho '<br>';\necho encode('This\
    \ is a message');\necho '<br>';", "    $encoding = '';\n    for ($i = 0; $i <\
    \ strlen($message); $i++) {\n        if (ctype_upper($message[$i])) {\n      \
    \      $newChar = strtolower($message[$i]);\n        } else {\n            $newChar\
    \ = strtoupper($message[$i]);\n        }\n        if (strpos('aeiou', $newChar)\
    \ !== false) {\n            $newChar = ord($newChar) + 2;\n            if ($newChar\
    \ > 122) {\n                $newChar -= 26;\n            }\n            $newChar\
    \ = chr($newChar);\n        }\n        $encoding .= $newChar;\n    }\n    return\
    \ $encoding;\n}\n\necho encode('test') . PHP_EOL;\necho encode('This is a message')\
    \ . PHP_EOL;", "  $vowels = array(\"a\",\"e\",\"i\",\"o\",\"u\");\n  $message\
    \ = strtolower($message);\n  $newMessage = \"\";\n  for ($i=0; $i < strlen($message);\
    \ $i++) { \n    $char = $message[$i];\n    if (in_array($char, $vowels)) {\n \
    \     if ($char === \"u\") {\n        $newMessage .= \"a\";\n      } else {\n\
    \        $newMessage .= chr(ord($char) + 2);\n      }\n    } else {\n      $newMessage\
    \ .= $char;\n    }\n  }\n  return strtoupper($newMessage);\n}\n\necho \"Running\
    \ unit tests\\n\";\nassert(encode(\"test\") === \"TGST\");\nassert(encode(\"This\
    \ is a message\") === \"tHKS KS C MGSSCGG\");\necho \"All tests passed\\n\";",
  "\t$encodedMessage = \"\";\n\t$vowels = array('a', 'e', 'i', 'o', 'u');\n\t$alphabet\
    \ = range('a', 'z');\n\tfor ($i = 0; $i < strlen($message); $i++) {\n\t\tif (in_array($message[$i],\
    \ $vowels)) {\n\t\t\t$index = array_search($message[$i], $alphabet);\n\t\t\t$encodedMessage\
    \ .= $alphabet[$index + 2];\n\t\t} else {\n\t\t\t$encodedMessage .= $message[$i];\n\
    \t\t}\n\t}\n\treturn $encodedMessage;\n}\necho encode('test');\necho \"\\n\";\n\
    echo encode('This is a message');\necho \"\\n\";", "    // Your code here\n  \
    \  $vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n    $alphabet = range('a', 'z');\n\
    \    $alphabet = array_combine($alphabet, array_keys($alphabet));\n    $message\
    \ = strtolower($message);\n    $message_array = str_split($message);\n    for\
    \ ($i=0; $i < count($message_array); $i++) { \n        if (in_array($message_array[$i],\
    \ $vowels)) {\n            $message_array[$i] = $alphabet[$message_array[$i]]\
    \ + 2;\n            if ($message_array[$i] > 26) {\n                $message_array[$i]\
    \ = $message_array[$i] - 26;\n            }\n            $message_array[$i] =\
    \ array_search($message_array[$i], $alphabet);\n        } else {\n           \
    \ $message_array[$i] = strtoupper($message_array[$i]);\n        }\n    }\n   \
    \ $message = implode($message_array);\n    return $message;\n}\n\nprint encode('test')\
    \ . \"\\n\";\nprint encode('This is a message') . \"\\n\";\n", "  // your solution\
    \ here\n}\n", "\t$characters = str_split($message);\n\t$result = '';\n\tforeach\
    \ ($characters as $character) {\n\t\t$letter = ord($character);\n\t\t$result .=\
    \ ($letter >= 65 && $letter <= 90) ? chr($letter + 32) : chr($letter - 32);\n\t\
    }\n\treturn $result;\n}\n", "\t$vowels = ['a', 'e', 'i', 'o', 'u'];\n\tfor ($i\
    \ = 0; $i < strlen($message); $i++) {\n\t\tif (in_array($message[$i], $vowels))\
    \ {\n\t\t\t$message[$i] = $vowels[array_search($message[$i], $vowels) + 2];\n\t\
    \t}\n\t\telse {\n\t\t\t$message[$i] = strtoupper($message[$i]);\n\t\t}\n\t}\n\t\
    return $message;\n}\n\necho encode('test') . \"\\n\";\necho encode('This is a\
    \ message') . \"\\n\";\n", "  $alphabet = range('a', 'z');\n  $vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n  $encoded_message = '';\n  $count = 0;\n  $message =\
    \ strtolower($message);\n  while ($count < strlen($message)) {\n    $current_letter\
    \ = $message[$count];\n    if (in_array($current_letter, $vowels)) {\n      $current_letter_index\
    \ = array_search($current_letter, $alphabet);\n      $current_letter = $alphabet[$current_letter_index\
    \ + 2];\n    }\n    $encoded_message .= $current_letter;\n    $count++;\n  }\n\
    \  return $encoded_message;\n}", "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n \
    \   $encoded = '';\n    $len = strlen($message);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $char = strtolower($message[$i]);\n        if (in_array($char,\
    \ $vowels)) {\n            $char = $vowels[($vowels[$char]+2)%5];\n        }\n\
    \        $encoded .= $char;\n    }\n    return $encoded;\n}\n", "\t$vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n\t$alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\t$encoded_message\
    \ = \"\";\n\t$message = strtolower($message);\n\tfor ($i = 0; $i < strlen($message);\
    \ $i++) {\n\t\tif (in_array($message[$i], $vowels)) {\n\t\t\t$index = strpos($alphabet,\
    \ $message[$i]) + 2;\n\t\t\tif ($index > 25) {\n\t\t\t\t$index -= 26;\n\t\t\t\
    }\n\t\t\t$encoded_message .= $alphabet[$index];\n\t\t} else {\n\t\t\t$encoded_message\
    \ .= $message[$i];\n\t\t}\n\t}\n\treturn $encoded_message;\n}\n\necho encode('test');\n\
    echo encode('This is a message');", "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    $message_length = strlen($message);\n    $i = 0;\n    $coded_message = '';\n\
    \    while ($i < $message_length) {\n        $char = $message[$i];\n        $char_code\
    \ = ord($char);\n        $is_lowercase = $char_code >= 97 && $char_code <= 122;\n\
    \        $is_uppercase = $char_code >= 65 && $char_code <= 90;\n        if ($is_lowercase)\
    \ {\n            $char_code = (($char_code - 97 + 1) % 26) + 97;\n           \
    \ $char = chr($char_code);\n        } else if ($is_uppercase) {\n            $char_code\
    \ = (($char_code - 65 + 1) % 26) + 65;\n            $char = chr($char_code);\n\
    \        }\n        if (in_array($char, $vowels)) {\n            $char_code =\
    \ ord($char);\n            $char_code = (($char_code - 97 + 2) % 26) + 97;\n \
    \           $char = chr($char_code);\n        }\n        $coded_message .= $char;\n\
    \        $i++;\n    }\n    return $coded_message;\n}\n$message = 'test';\necho\
    \ encode($message) . \"\\n\";\n$message = 'This is a message';\necho encode($message)\
    \ . \"\\n\";\n", "    $alphabet = array(\n        \"a\" => \"c\",\n        \"\
    b\" => \"d\",\n        \"c\" => \"e\",\n        \"d\" => \"f\",\n        \"e\"\
    \ => \"g\",\n        \"f\" => \"h\",\n        \"g\" => \"i\",\n        \"h\" =>\
    \ \"j\",\n        \"i\" => \"k\",\n        \"j\" => \"l\",\n        \"k\" => \"\
    m\",\n        \"l\" => \"n\",\n        \"m\" => \"o\",\n        \"n\" => \"p\"\
    ,\n        \"o\" => \"q\",\n        \"p\" => \"r\",\n        \"q\" => \"s\",\n\
    \        \"r\" => \"t\",\n        \"s\" => \"u\",\n        \"t\" => \"v\",\n \
    \       \"u\" => \"w\",\n        \"v\" => \"x\",\n        \"w\" => \"y\",\n  \
    \      \"x\" => \"z\",\n        \"y\" => \"a\",\n        \"z\" => \"b\"\n    );\n\
    \    $message = strtolower($message);\n    $new_message = \"\";\n    for ($i =\
    \ 0; $i < strlen($message); $i++) {\n        if (array_key_exists($message[$i],\
    \ $alphabet)) {\n            $new_message .= $alphabet[$message[$i]];\n      \
    \  } else {\n            $new_message .= $message[$i];\n        }\n    }\n   \
    \ return $new_message;\n}\n\n$tests = array(\"test\", \"This is a message\");\n\
    foreach ($tests as $test) {\n    echo encode($test) . \"<br />\";\n}", "\t// Character\
    \ array to hold the message.\n\t$result = array();\n\t// Possible vowels.\n\t\
    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n\t// Iterate through the\
    \ message.\n\tfor ($i = 0; $i < strlen($message); $i++) {\n\t\t// Grab the current\
    \ letter.\n\t\t$letter = $message[$i];\n\t\t// If the letter is a vowel, replace\
    \ with correct letter.\n\t\tif (in_array($letter, $vowels)) {\n\t\t\t// Calculate\
    \ the position in the alphabet.\n\t\t\t$position = ord($letter) - ord(\"a\");\n\
    \t\t\t// Calculate the index to start at.\n\t\t\t$start = $position + 2;\n\t\t\
    \t// Find the letter that is 2 places ahead.\n\t\t\t$letter = chr(ord(\"a\") +\
    \ ($start % 5));\n\t\t}\n\t\t// If the letter is a capital, convert to lowercase.\n\
    \t\tif (ord($letter) >= ord(\"A\") && ord($letter) <= ord(\"Z\")) {\n\t\t\t$letter\
    \ = strtolower($letter);\n\t\t}\n\t\t// Add to the result array.\n\t\t$result[]\
    \ = $letter;\n\t}\n\t// Join the result and return.\n\treturn implode(\"\", $result);\n\
    }", "    $encoded = '';\n    for ($i = 0; $i < strlen($message); $i++) {\n   \
    \     $encoded .= $message[$i] == strtoupper($message[$i]) ? strtolower($message[$i])\
    \ : strtoupper($message[$i]);\n    }\n    return $encoded;\n}\n\necho encode('test')\
    \ . PHP_EOL;\necho encode('This is a message') . PHP_EOL;", "    $vowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n    $encoded = '';\n    for ($i = 0; $i < strlen($message);\
    \ $i++) {\n        $position = strpos($vowels, strtolower($message[$i]));\n  \
    \      if ($position) {\n            $encoded .= $vowels[($position + 2) % count($vowels)];\n\
    \        } else if (ctype_upper($message[$i])) {\n            $encoded .= strtolower($message[$i]);\n\
    \        } else {\n            $encoded .= strtoupper($message[$i]);\n       \
    \ }\n    }\n    return $encoded;\n}\necho encode('test') . \"\\n\";\necho encode('This\
    \ is a message') . \"\\n\";", "\treturn implode('', array_map(function($char)\
    \ {\n\t\t$letter = strtolower($char);\n\t\tif(in_array($letter, ['a', 'e', 'i',\
    \ 'o', 'u'])) {\n\t\t\treturn transform($letter);\n\t\t}\n\t\treturn $char;\n\t\
    }, str_split($message)));\n}\n", "    $vowels = array('a', 'e', 'i', 'o', 'u');\n\
    \    $new_message = \"\";\n    for ($i = 0; $i < strlen($message); $i++) {\n \
    \       if (in_array($message[$i], $vowels)) {\n            $new_message .= $vowels[(array_search($message[$i],\
    \ $vowels) + 2) % 5];\n        } else if ($message[$i] === strtoupper($message[$i]))\
    \ {\n            $new_message .= strtolower($message[$i]);\n        } else {\n\
    \            $new_message .= strtoupper($message[$i]);\n        }\n    }\n   \
    \ return $new_message;\n}\necho encode('This is a message') . PHP_EOL;", "   \
    \ $message = strtolower($message);\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    $encoded = '';\n    for ($i = 0; $i < strlen($message); $i++) {\n       \
    \ if ($message[$i] == strtoupper($message[$i])) {\n            $encoded .= strtolower($message[$i]);\n\
    \        } else {\n            $encoded .= strtoupper($message[$i]);\n       \
    \ }\n        if (in_array($message[$i], $vowels)) {\n            $key = array_search($message[$i],\
    \ $vowels);\n            $encoded[$i] = $vowels[($key + 2) % 5];\n        }\n\
    \    }\n    return $encoded;\n}\n\necho encode('This is a message') . \"\\n\";",
  "  if (!$message) {\n    return null;\n  }\n  $output = [];\n  $vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n  $letters = array_merge(range('a', 'z'), range('A', 'Z'));\n\
    \  $count = 0;\n  $characterMap = [];\n  foreach ($letters as $letter) {\n   \
    \ $characterMap[$letter] = $count;\n    $count++;\n  }\n  $l = strlen($message);\n\
    \  for ($i = 0; $i < $l; $i++) {\n    $char = $message[$i];\n    if (in_array($char,\
    \ $vowels)) {\n      $index = $characterMap[$char];\n      $newIndex = $index\
    \ + 2;\n      $index = $newIndex % 52;\n      $key = array_search($index, $characterMap);\n\
    \      $output[] = $key;\n    } else {\n      $output[] = $char;\n    }\n  }\n\
    \  $o = '';\n  foreach ($output as $ch) {\n    $o .= $ch;\n  }\n  return $o;\n\
    }", "    // write your code here\n    $alphabet = array(\n        'a', 'b', 'c',\
    \ 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\n        'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'\n    );\n    $vowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n    $message = strtolower($message);\n    $message = str_split($message);\n\
    \    $new_message = '';\n    foreach ($message as $char) {\n        if (in_array($char,\
    \ $vowels)) {\n            $replace_with = array_search($char, $vowels) + 2;\n\
    \            $new_message .= $vowels[$replace_with];\n        } else {\n     \
    \       $new_message .= $char;\n        }\n    }\n    $new_message = str_split($new_message);\n\
    \    foreach ($new_message as $key => $char) {\n        if (in_array($char, $alphabet))\
    \ {\n            $place = array_search($char, $alphabet);\n            if ($place\
    \ % 2) {\n                $new_message[$key] = strtoupper($char);\n          \
    \  }\n        }\n    }\n    return implode($new_message);\n}", "    $alphabet\
    \ = array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
    \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n    $new_message\
    \ = '';\n    for ($i = 0; $i < strlen($message); $i++) {\n        $letter = strtolower($message[$i]);\n\
    \        $position = array_search($letter, $alphabet);\n        $new_letter =\
    \ $alphabet[$position + 2];\n        if ($new_letter == NULL) {\n            $new_letter\
    \ = $alphabet[($position + 2) - count($alphabet)];\n        }\n        if ($message[$i]\
    \ == strtoupper($message[$i])) {\n            $new_message .= strtoupper($new_letter);\n\
    \        } else {\n            $new_message .= $new_letter;\n        }\n    }\n\
    \    return $new_message;\n}\n\n$message = 'This is a message.';\necho encode($message);\n\
    echo '<br>';", "\t// Your code here\n\t\n}\n$message = \"this is a test\";\n$encoded\
    \ = encode($message);\necho $encoded;\necho \"</br>\";\necho $message;\necho \"\
    </br>\";\n$decoded = encode($encoded);\necho $decoded;", "  // your code here\n\
    }", "\t\n\t//your code goes here\n}\n", "\t$vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \t$encoded = [];\n\tforeach (str_split($message) as $char) {\n\t\tif (in_array($char,\
    \ $vowels)) {\n\t\t\t$encoded[] = $vowels[(array_search($char, $vowels) + 2) %\
    \ 5];\n\t\t} else {\n\t\t\t$encoded[] = ($char === strtoupper($char)) ? strtolower($char)\
    \ : strtoupper($char);\n\t\t}\n\t}\n\treturn implode('', $encoded);\n}\n\nforeach\
    \ ([\n\t'invalid' => 'abc',\n\t'invalid' => 'abcdefghijklmnopqrstuvwxyz',\n\t\
    'valid' => 'test',\n\t'valid' => 'This is a message',\n] as $test_name => $test_case)\
    \ {\n\t$result = encode($test_case);\n\tif ($result !== false) {\n\t\techo \"\
    {$test_name}: {$result}\\n\";\n\t} else {\n\t\techo \"{$test_name}: failed\\n\"\
    ;\n\t}\n}", "    $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    $alphabetArray\
    \ = str_split($alphabet);\n    $vowels = array('a', 'e', 'i', 'o', 'u');\n   \
    \ $message = strtolower($message);\n    $encodedMessage = '';\n    $messageArray\
    \ = str_split($message);\n    foreach ($messageArray as $char) {\n        if (in_array($char,\
    \ $vowels)) {\n            $vowelKey = array_search($char, $alphabetArray);\n\
    \            $nextKey = $vowelKey + 2;\n            $newVowel = $alphabetArray[$nextKey];\n\
    \            $encodedMessage .= $newVowel;\n        } else if ($char === ' ')\
    \ {\n            $encodedMessage .= ' ';\n        } else {\n            $charKey\
    \ = array_search($char, $alphabetArray);\n            $nextKey = $charKey + 1;\n\
    \            $newChar = $alphabetArray[$nextKey];\n            $encodedMessage\
    \ .= $newChar;\n        }\n    }\n    return $encodedMessage;\n}\n\n$message =\
    \ 'This is a message';\necho $message . PHP_EOL;\necho encode($message) . PHP_EOL;\n\
    $message = 'test';\necho $message . PHP_EOL;\necho encode($message) . PHP_EOL;",
  "    $message = strtolower($message);\n    $message = str_split($message);\n   \
    \ foreach ($message as $key => $letter) {\n        $message[$key] = switchCase($letter);\n\
    \        $message[$key] = switchVowel($letter);\n    }\n    return implode('',\
    \ $message);\n}", "    $alphabet = array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\
    \ 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',\
    \ 'y', 'z');\n    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $encoded_message\
    \ = \"\";\n    for ($i = 0; $i < strlen($message); $i++) {\n        if ($message[$i]\
    \ == ' ') {\n            $encoded_message .= ' ';\n        } else {\n        \
    \    $key = array_search(strtolower($message[$i]), $alphabet);\n            if\
    \ (in_array(strtolower($message[$i]), $vowels)) {\n                $key = ($key\
    \ + 2) % 26;\n            }\n            if (strtoupper($message[$i]) == $message[$i])\
    \ {\n                $encoded_message .= strtoupper($alphabet[$key]);\n      \
    \      } else {\n                $encoded_message .= $alphabet[$key];\n      \
    \      }\n        }\n    }\n    return $encoded_message;\n}\necho encode('This\
    \ is a message');", "\t// loop through each letter\n\t// is it a vowel?\n\t//\
    \ if so, swap with the following letter\n\t// preserve case\n\t// keep track of\
    \ position\n\t$count = 0;\n\t$encoded = '';\n\t$vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n\t$alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\
    \ 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n\
    \tforeach (str_split($message) as $letter) {\n\t\t$num = (array_search($letter,\
    \ $alphabet) + 1) % count($alphabet);\n\t\tif (in_array($letter, $vowels)) {\n\
    \t\t\tif ($num == count($alphabet)) {\n\t\t\t\t$encoded .= strtoupper($alphabet[0]);\n\
    \t\t\t} else {\n\t\t\t\t$encoded .= strtoupper($alphabet[$num]);\n\t\t\t}\n\t\t\
    } else {\n\t\t\tif ($num == count($alphabet)) {\n\t\t\t\t$encoded .= strtolower($alphabet[0]);\n\
    \t\t\t} else {\n\t\t\t\t$encoded .= strtolower($alphabet[$num]);\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn $encoded;\n}\n", "    $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    $encoded = \"\";\n    $length = strlen($message);\n    for ($i = 0; $i\
    \ < $length; $i++) {\n        $char = $message[$i];\n        if ($char == strtoupper($char))\
    \ {\n            $encoded = $encoded . strtolower($char);\n        } else {\n\
    \            $encoded = $encoded . strtoupper($char);\n        }\n        $char\
    \ = strtolower($char);\n        if (strpos($alphabet, $char) !== false) {\n  \
    \          $position = strpos($alphabet, $char);\n            $position = ($position\
    \ + 2) % 26;\n            $encoded = $encoded . $alphabet[$position];\n      \
    \  } else {\n            $encoded = $encoded . $char;\n        }\n    }\n    return\
    \ $encoded;\n}\n$message = \"This is a message\";\necho encode($message);", "\t\
    if (empty($message)) {\n\t\treturn '';\n\t}\n\n\t$letter = $message[0];\n\t$output\
    \ = '';\n\tswitch (strtolower($letter)) {\n\t\tcase 'a':\n\t\t\t$output = 'C';\n\
    \t\t\tbreak;\n\t\tcase 'e':\n\t\t\t$output = 'G';\n\t\t\tbreak;\n\t\tcase 'i':\n\
    \t\t\t$output = 'K';\n\t\t\tbreak;\n\t\tcase 'o':\n\t\t\t$output = 'M';\n\t\t\t\
    break;\n\t\tcase 'u':\n\t\t\t$output = 'O';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t\
    $output = $letter;\n\t\t\tbreak;\n\t}\n\n\treturn ($letter == $output) ? \n\t\t\
    strtoupper($output) . encode(substr($message, 1)) : \n\t\t$output . encode(substr($message,\
    \ 1));\n}\n", "\t$message = strtolower($message);\n\t$vowels = [\"a\",\"e\",\"\
    i\",\"o\",\"u\"];\n\t$encoded = \"\";\n\tfor ($i=0; $i < strlen($message); $i++)\
    \ { \n\t\t$letter = $message[$i];\n\t\tif (is_numeric($letter)) {\n\t\t\t$encoded\
    \ .= $letter;\n\t\t} else if(strpos($vowels, $letter)) {\n\t\t\t$encoded .= $vowels[($vowels.indexOf($letter)+2)%5];\n\
    \t\t} else {\n\t\t\t$encoded .= $letter;\n\t\t}\n\t}\n\treturn $encoded;\n}\n",
  "\t\n\t$encoded = \"\";\n\n\t$vowels = \"aeiou\";\n\t$shifted_vowels = \"cfow\"\
    ;\n\n\t$upper_case = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\t$shifted_upper_case =\
    \ \"CDEFGHIJKLMNOPQRSTUVWXYZAB\";\n\n\t$lower_case = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n\t$shifted_lower_case = \"cdefghijklmnopqrstuvwxyzab\";\n\n\t$message_len =\
    \ strlen($message);\n\n\tfor ($i = 0; $i < $message_len; $i++) {\n\n\t\t$current_char\
    \ = $message[$i];\n\n\t\t$current_char_lower = strtolower($current_char);\n\n\t\
    \t$vowel_idx = strpos($vowels, $current_char_lower);\n\n\t\tif ($vowel_idx !==\
    \ false) {\n\t\t\t$encoded .= $shifted_vowels[$vowel_idx];\n\t\t} else {\n\t\t\
    \t$upper_idx = strpos($upper_case, $current_char);\n\t\t\t$lower_idx = strpos($lower_case,\
    \ $current_char);\n\n\t\t\tif ($upper_idx !== false) {\n\t\t\t\t$encoded .= $shifted_upper_case[$upper_idx];\n\
    \t\t\t} else if ($lower_idx !== false) {\n\t\t\t\t$encoded .= $shifted_lower_case[$lower_idx];\n\
    \t\t\t} else {\n\t\t\t\t$encoded .= $current_char;\n\t\t\t}\n\t\t}\n\t}\n\n\t\
    return $encoded;\n}\n\necho encode('test') . \"\\n\";\necho encode('This is a\
    \ message') . \"\\n\";", "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $encoded_message\
    \ = '';\n    for ($i = 0; $i < strlen($message); $i++) {\n        $pos = $i %\
    \ 26;\n        $vowel_found = false;\n        foreach ($vowels as $vowel) {\n\
    \            if ($message[$i] == $vowel) {\n                $encoded_message .=\
    \ chr(ord($vowel) + $pos);\n                $vowel_found = true;\n           \
    \     break;\n            }\n        }\n        if (!$vowel_found) {\n       \
    \     $encoded_message .= strtoupper($message[$i]);\n        }\n    }\n    return\
    \ $encoded_message;\n}\necho encode('test');\necho \"\\n\";\necho encode('This\
    \ is a message');\necho \"\\n\";", "\t// your code here\n\t$message = strtolower($message);\n\
    \t$message = str_split($message);\n\tfor ($i=0; $i < count($message); $i++) {\
    \ \n\t\t$message[$i] = strtoupper($message[$i]);\n\t}\n\t$message = implode(\"\
    \", $message);\n\treturn $message;\n}", "    $result = '';\n    $length = strlen($message);\n\
    \    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    for ($i = 0; $i < $length; $i++)\
    \ {\n        $c = $message[$i];\n        if (in_array($c, $vowels)) {\n      \
    \      $result .= $vowels[(array_search($c, $vowels) + 2) % 5];\n        } else\
    \ if (ctype_upper($c)) {\n            $result .= strtolower($c);\n        } else\
    \ {\n            $result .= strtoupper($c);\n        }\n    }\n    return $result;\n\
    }\n\necho encode('test') . \"\\n\";\necho encode('This is a message') . \"\\n\"\
    ;"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
