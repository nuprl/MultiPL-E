name: HumanEval_127_intersection
language: php
results:
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $start1 = $interval1[0];\n  $end1 = $interval1[1];\n  $start2 = $interval2[0];\n\
    \  $end2 = $interval2[1];\n  $size = min($end1, $end2) - max($start1, $start2);\n\
    \  if ($size < 0) return \"NO\";\n  if ($size == 1) return \"NO\";\n  for ($i\
    \ = 2; $i < $size; $i++) {\n    if ($size % $i == 0) return \"NO\";\n  }\n  return\
    \ \"YES\";\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl26ynj41.php:36\n\
    Stack trace:\n#0 /tmp/tmpl26ynj41.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpl26ynj41.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [];\n    $intersection = getIntersection($interval1, $interval2);\n\
    \    if (isPrime($intersection[1] - $intersection[0])) {\n        return \"YES\"\
    ;\n    } else {\n        return \"NO\";\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function getIntersection()\
    \ in /tmp/tmpdun8socy.php:20\nStack trace:\n#0 /tmp/tmpdun8socy.php(29): intersection(Array,\
    \ Array)\n#1 /tmp/tmpdun8socy.php(33): candidate(Array, Array)\n#2 /tmp/tmpdun8socy.php(43):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpdun8socy.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if($start > $end) return \"NO\";\n    $length = $end -\
    \ $start + 1;\n    return isPrime($length) ? \"YES\" : \"NO\";\n}\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpgbc0fho8.php:23\nStack trace:\n#0 /tmp/tmpgbc0fho8.php(26): intersection(Array,\
    \ Array)\n#1 /tmp/tmpgbc0fho8.php(30): candidate(Array, Array)\n#2 /tmp/tmpgbc0fho8.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpgbc0fho8.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    function isPrime($num) {\n        for ($i = 2; $i < $num; $i++) {\n     \
    \       if ($num % $i == 0) {\n                return false;\n            }\n\
    \        }\n        return true;\n    }\n    $start = $interval1[0] > $interval2[0]\
    \ ? $interval1[0] : $interval2[0];\n    $end = $interval1[1] < $interval2[1] ?\
    \ $interval1[1] : $interval2[1];\n    if ($start > $end) {\n        return \"\
    NO\";\n    }\n    return isPrime($end - $start + 1) ? \"YES\" : \"NO\";\n}\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjnki3jzm.php:39\n\
    Stack trace:\n#0 /tmp/tmpjnki3jzm.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpjnki3jzm.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    function isPrime($num) {\n        if ($num < 2) return false;\n        for\
    \ ($i = 2; $i < $num; $i++) {\n            if ($num % $i == 0) {\n           \
    \     return false;\n            }\n        }\n        return true;\n    }\n \
    \   if ($interval1[0] > $interval2[1] || $interval2[0] > $interval1[1]) {\n  \
    \      return \"NO\";\n    }\n    $a = max($interval1[0], $interval2[0]);\n  \
    \  $b = min($interval1[1], $interval2[1]);\n    return (isPrime($b - $a + 1))\
    \ ? \"YES\" : \"NO\";\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Cannot redeclare isPrime() (previously declared in /tmp/tmpizy3nud9.php:19)\
    \ in /tmp/tmpizy3nud9.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \t$common = [];\n\t$j = 0;\n\t$prime = 0;\n\tfor ($i = $interval1[0]; $i <= $interval1[1];\
    \ $i++) {\n\t\t$common[$j] = $i;\n\t\t$j++;\n\t}\n\tfor ($i = $interval2[0]; $i\
    \ <= $interval2[1]; $i++) {\n\t\tif (in_array($i, $common)) {\n\t\t\t$prime++;\n\
    \t\t}\n\t}\n\tif (isPrime($prime)) {\n\t\treturn \"YES\";\n\t} else {\n\t\treturn\
    \ \"NO\";\n\t}\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpq819guh1.php:31\nStack trace:\n#0 /tmp/tmpq819guh1.php(39): intersection(Array,\
    \ Array)\n#1 /tmp/tmpq819guh1.php(43): candidate(Array, Array)\n#2 /tmp/tmpq819guh1.php(53):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpq819guh1.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [];\n    for ($i = $interval1[0]; $i <= $interval1[1]; $i++)\
    \ {\n        for ($j = $interval2[0]; $j <= $interval2[1]; $j++) {\n         \
    \   if ($i == $j) {\n                $intersection[] = $i;\n            }\n  \
    \      }\n    }\n    if (empty($intersection)) {\n        return \"NO\";\n   \
    \ }\n    $length = count($intersection);\n    if ($length == 1) {\n        return\
    \ \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1),\
    \ array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf5r9ee94.php:47\n\
    Stack trace:\n#0 /tmp/tmpf5r9ee94.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpf5r9ee94.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $start1 = $interval1[0];\n  $end1 = $interval1[1];\n  $start2 = $interval2[0];\n\
    \  $end2 = $interval2[1];\n  if(($start1 >= $end2) || ($start2 >= $end1)) {\n\
    \    return \"NO\";\n  } else {\n    $intersection = \"\";\n    if($start1 >=\
    \ $start2) {\n      $intersection = array($start1,$end2);\n    } else {\n    \
    \  $intersection = array($start2,$end1);\n    }\n    return (isPrime($intersection[1]\
    \ - $intersection[0])) ? \"YES\" : \"NO\";\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpzfftx7dz.php:32\nStack trace:\n#0 /tmp/tmpzfftx7dz.php(37): intersection(Array,\
    \ Array)\n#1 /tmp/tmpzfftx7dz.php(42): candidate(Array, Array)\n#2 /tmp/tmpzfftx7dz.php(51):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpzfftx7dz.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $intersection = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \  return $intersection[0] > $intersection[1] ? \"NO\" : isPrime($intersection[1]\
    \ - $intersection[0] + 1) ? \"YES\" : \"NO\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmp5w9rbaot.php:20\nStack trace:\n#0 /tmp/tmp5w9rbaot.php(24): intersection(Array,\
    \ Array)\n#1 /tmp/tmp5w9rbaot.php(28): candidate(Array, Array)\n#2 /tmp/tmp5w9rbaot.php(38):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp5w9rbaot.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $result = [];\n    for ($i = 0; $i < count($interval1); $i++) {\n       \
    \ for ($j = 0; $j < count($interval2); $j++) {\n            if ($interval1[$i]\
    \ == $interval2[$j]) {\n                $result[] = $interval1[$i];\n        \
    \    }\n        }\n    }\n    if (count($result) === 0) {\n        return \"NO\"\
    ;\n    }\n    $number = count($result);\n    for ($i = 2; $i < sqrt($number);\
    \ $i++) {\n        if ($number % $i === 0) {\n            return \"NO\";\n   \
    \     }\n    }\n    return \"YES\";\n}\n\n$interval1 = [2, 3];\n$interval2 = [2,\
    \ 4];\nprint_r(intersection($interval1, $interval2));\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "YES\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo9fct4p4.php:47\n\
    Stack trace:\n#0 /tmp/tmpo9fct4p4.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpo9fct4p4.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [];\n    if ($interval1[0] >= $interval2[0] && $interval1[0]\
    \ <= $interval2[1]) {\n        array_push($intersection, $interval1[0]);\n   \
    \ }\n    if ($interval1[1] >= $interval2[0] && $interval1[1] <= $interval2[1])\
    \ {\n        array_push($intersection, $interval1[1]);\n    }\n    if ($interval2[0]\
    \ >= $interval1[0] && $interval2[0] <= $interval1[1]) {\n        array_push($intersection,\
    \ $interval2[0]);\n    }\n    if ($interval2[1] >= $interval1[0] && $interval2[1]\
    \ <= $interval1[1]) {\n        array_push($intersection, $interval2[1]);\n   \
    \ }\n    if (count($intersection) < 2) {\n        return \"NO\";\n    }\n    $a\
    \ = $intersection[0];\n    $b = $intersection[1];\n    $r = range($a, $b);\n \
    \   $i = 2;\n    $count = 0;\n    while ($i <= $b) {\n        if ($b % $i == 0)\
    \ {\n            $count++;\n        }\n        $i++;\n    }\n    if ($count ==\
    \ 1) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\necho intersection([1,\
    \ 2], [2, 3]) . \"<br>\";\necho intersection([-1, 1], [0, 4]) . \"<br>\";\necho\
    \ intersection([-3, -1], [-5, 5]) . \"<br>\";\necho intersection([1, 5], [2, 4])\
    \ . \"<br>\";\necho intersection([1, 3], [2, 4]) . \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "YES<br>NO<br>NO<br>NO<br>YES<br>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpby29yxao.php:61\nStack trace:\n#0 /tmp/tmpby29yxao.php(71):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpby29yxao.php on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  if($interval1[0] <= $interval2[0] && $interval1[1] >= $interval2[0]) {\n  \
    \  return (abs($interval1[0] - $interval2[0]) + 1) . \" \" . (abs($interval1[1]\
    \ - $interval2[1]) + 1);\n  }\n  elseif($interval1[0] <= $interval2[1] && $interval1[1]\
    \ >= $interval2[1]) {\n    return (abs($interval1[0] - $interval2[0]) + 1) . \"\
    \ \" . (abs($interval1[1] - $interval2[1]) + 1);\n  }\n  elseif($interval1[0]\
    \ >= $interval2[0] && $interval1[1] <= $interval2[1]) {\n    return (abs($interval1[0]\
    \ - $interval2[0]) + 1) . \" \" . (abs($interval1[1] - $interval2[1]) + 1);\n\
    \  }\n  else {\n    return \"NO\";\n  }\n}\n\necho intersection((1, 2), (2, 3))\
    \ . \"\\n\";\necho intersection((-1, 1), (0, 4)) . \"\\n\";\necho intersection((-3,\
    \ -1), (-5, 5)) . \"\\n\";\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdt8pujju.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $firstStart = $interval1[0];\n    $firstEnd = $interval1[1];\n    $secondStart\
    \ = $interval2[0];\n    $secondEnd = $interval2[1];\n    if ($firstStart <= $secondStart)\
    \ {\n        $start = $secondStart;\n        $end = $firstEnd;\n    } else {\n\
    \        $start = $firstStart;\n        $end = $secondEnd;\n    }\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $start; $i++)\
    \ {\n        if ($start % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\necho intersection([-3, -1], [-5, 5]) . \"<br>\"\
    ; // YES\necho intersection([1, 2], [2, 3]) . \"<br>\"; // NO\necho intersection([-1,\
    \ 1], [0, 4]) . \"<br>\"; // NO\necho intersection([1, 2], [1, 5]) . \"<br>\"\
    ; // YES\necho intersection([1, 2], [2, 3]) . \"<br>\"; // NO\necho intersection([1,\
    \ 2], [3, 5]) . \"<br>\"; // NO\necho intersection([1, 2], [3, 4]) . \"<br>\"\
    ; // NO\necho intersection([1, 2], [3, 5]) . \"<br>\"; // NO\necho intersection([1,\
    \ 2], [2, 3]) . \"<br>\"; // NO\necho intersection([1, 2], [2, 3]) . \"<br>\"\
    ; // NO\necho intersection([1, 2], [2, 3]) . \"<br>\"; // NO\necho intersection([1,\
    \ 2], [2, 3]) . \"<br>\"; // NO\necho intersection([1, 2], [2, 3]) . \"<br>\"\
    ; // NO\necho intersection([1, 2], [2, 3]) . \"<br>\"; // NO\necho intersection([1,\
    \ 2], [2, 3]) . \"<br>\"; // NO\necho intersection([1, 2], [2, 3]) . \"<br>\"\
    ; // NO\necho intersection([1, 2], [2,\nfunction candidate(...$args) {\n    return\
    \ intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprsqbkjue.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $a1 = $interval1[0];\n    $a2 = $interval1[1];\n    $b1 = $interval2[0];\n\
    \    $b2 = $interval2[1];\n    $intsct = [];\n    for ($i = $a1; $i <= $a2; $i++)\
    \ {\n        for ($j = $b1; $j <= $b2; $j++) {\n            if ($i == $j) {\n\
    \                $intsct[] = $i;\n            }\n        }\n    }\n    if (count($intsct)\
    \ == 0) {\n        return \"NO\";\n    }\n    $ctr = 0;\n    for ($i = 1; $i <=\
    \ count($intsct); $i++) {\n        if (count($intsct) % $i == 0) {\n         \
    \   $ctr++;\n        }\n    }\n    if ($ctr == 2) {\n        return \"YES\";\n\
    \    } else {\n        return \"NO\";\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj30qssnz.php:53\n\
    Stack trace:\n#0 /tmp/tmpj30qssnz.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpj30qssnz.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \t$begin1 = $interval1[0];\n\t$end1 = $interval1[1];\n\t$begin2 = $interval2[0];\n\
    \t$end2 = $interval2[1];\n\tif ($begin1 <= $begin2 && $begin2 <= $end1) {\n\t\t\
    if ($end1 < $end2) {\n\t\t\treturn $end1 - $begin2 + 1;\n\t\t} else {\n\t\t\t\
    return $end2 - $begin2 + 1;\n\t\t}\n\t} elseif ($begin2 <= $begin1 && $begin1\
    \ <= $end2) {\n\t\tif ($end2 < $end1) {\n\t\t\treturn $end2 - $begin1 + 1;\n\t\
    \t} else {\n\t\t\treturn $end1 - $begin1 + 1;\n\t\t}\n\t} else {\n\t\treturn 0;\n\
    \t}\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"\
    NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmjbmu09l.php:44\n\
    Stack trace:\n#0 /tmp/tmpmjbmu09l.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpmjbmu09l.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    if ($interval1[0] <= $interval2[0] && $interval2[0] <= $interval1[1]) {\n\
    \        $start = $interval2[0];\n    } else if ($interval2[0] <= $interval1[0]\
    \ && $interval1[0] <= $interval2[1]) {\n        $start = $interval1[0];\n    }\
    \ else {\n        return \"NO\";\n    }\n    if ($interval1[0] <= $interval2[1]\
    \ && $interval2[1] <= $interval1[1]) {\n        $end = $interval2[1];\n    } else\
    \ if ($interval2[0] <= $interval1[1] && $interval1[1] <= $interval2[1]) {\n  \
    \      $end = $interval1[1];\n    } else {\n        return \"NO\";\n    }\n  \
    \  return isPrime($end - $start) ? \"YES\" : \"NO\";\n}\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpvkjmfopk.php:33\nStack trace:\n#0 /tmp/tmpvkjmfopk.php(36): intersection(Array,\
    \ Array)\n#1 /tmp/tmpvkjmfopk.php(40): candidate(Array, Array)\n#2 /tmp/tmpvkjmfopk.php(50):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpvkjmfopk.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = range(max($interval1[0], $interval2[0]), min($interval1[1],\
    \ $interval2[1]));\n    if (count($intersection) < 2) {\n        return \"NO\"\
    ;\n    }\n    $count = count($intersection);\n    if ($count < 2) {\n        return\
    \ \"NO\";\n    }\n    for ($i = 2; $i < sqrt($count); $i++) {\n        if ($count\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1],\
    \ [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "NO\nYES\nYES\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpppijah5s.php:43\n\
    Stack trace:\n#0 /tmp/tmpppijah5s.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpppijah5s.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n\
    \  $length = $end - $start;\n  if ($length <= 0) {\n    return \"NO\";\n  }\n\
    \  for ($i = 2; $i < $length; $i++) {\n    if ($length % $i == 0) {\n      return\
    \ \"NO\";\n    }\n  }\n  return \"YES\";\n}\necho \"Test 1: \" . intersection([1,\
    \ 2], [2, 3]) . \"\\n\";\necho \"Test 2: \" . intersection([-1, 1], [0, 4]) .\
    \ \"\\n\";\necho \"Test 3: \" . intersection([-3, -1], [-5, 5]) . \"\\n\";\n\n\
    function candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Test 1: NO\nTest 2: YES\nTest 3: YES\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpnhjifcpo.php:42\nStack trace:\n#0 /tmp/tmpnhjifcpo.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnhjifcpo.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    $length = $end - $start;\n    if ($length < 0) {\n    \
    \    return \"NO\";\n    }\n    if (isPrime($length)) {\n        return \"YES\"\
    ;\n    }\n    return \"NO\";\n}\n\nfunction candidate(...$args) {\n    return\
    \ intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpfhq4ubze.php:25\nStack trace:\n#0 /tmp/tmpfhq4ubze.php(32): intersection(Array,\
    \ Array)\n#1 /tmp/tmpfhq4ubze.php(36): candidate(Array, Array)\n#2 /tmp/tmpfhq4ubze.php(46):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpfhq4ubze.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    $length = $end - $start;\n    if ($length <= 0) return\
    \ \"NO\";\n    if ($length == 1) return \"NO\";\n    if ($length == 2) return\
    \ \"YES\";\n    if ($length % 2 == 0) return \"NO\";\n    for ($i = 3; $i <= sqrt($length);\
    \ $i++) {\n        if ($length % $i == 0) return \"NO\";\n    }\n    return \"\
    YES\";\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $length1 = $interval1[1] - $interval1[0];\n    $length2 = $interval2[1] -\
    \ $interval2[0];\n    $interval = [];\n    $length = 0;\n    if ($interval1[0]\
    \ < $interval2[0]) {\n        $start = $interval2[0];\n        $end = $interval1[1];\n\
    \    } else {\n        $start = $interval1[0];\n        $end = $interval2[1];\n\
    \    }\n    if ($start > $end) {\n        return \"NO\";\n    }\n    for ($i =\
    \ $start; $i <= $end; $i++) {\n        $interval[] = $i;\n    }\n    $length =\
    \ count($interval);\n    if ($length <= 1) {\n        return \"NO\";\n    }\n\
    \    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n  \
    \          return \"NO\";\n        }\n    }\n    return \"YES\";\n}\necho intersection([1,\
    \ 2], [2, 3]);\necho \"\\n\";\necho intersection([-1, 1], [0, 4]);\necho \"\\\
    n\";\necho intersection([-3, -1], [-5, 5]);\necho \"\\n\";\necho intersection([1,\
    \ 7], [5, 5]);\necho \"\\n\";\necho intersection([1, 7], [5, 8]);\necho \"\\n\"\
    ;\necho intersection([-5, -2], [-6, -1]);\necho \"\\n\";\necho intersection([1,\
    \ 7], [4, 4]);\necho \"\\n\";\necho intersection([1, 7], [4, 5]);\necho \"\\n\"\
    ;\necho intersection([1, 5], [2, 3]);\necho \"\\n\";\necho intersection([2, 3],\
    \ [1, 7]);\necho \"\\n\";\necho intersection([1, 7], [2, 5]);\necho \"\\n\";\n\
    echo intersection([2, 7], [1, 5]);\necho \"\\n\";\necho intersection([-5, -1],\
    \ [-6, -2]);\necho \"\\n\";\necho intersection([-1, -5\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppgwmq1us.php on line 74\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    $length = $end - $start;\n    $prime = [2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97];\n    if ($length < 0) {\n        return \"NO\";\n    }\n    if (in_array($length,\
    \ $prime)) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\necho intersection([-1,\
    \ 1], [0, 4]) . \"\\n\";\necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-3,\
    \ -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "NO\nNO\nYES\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $starts = [$interval1[0], $interval2[0]];\n  $ends = [$interval1[1], $interval2[1]];\n\
    \  sort($starts);\n  sort($ends);\n  $intersects = $starts[1] - $ends[0];\n  if\
    \ ($intersects < 0) return \"NO\";\n  for ($i = 2; $i < $intersects; $i++) {\n\
    \    if ($intersects % $i == 0) return \"NO\";\n  }\n  return \"YES\";\n}\necho\
    \ intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4])\
    \ . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "YES\nNO\nNO\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_nm7gms.php:38\n\
    Stack trace:\n#0 /tmp/tmp3_nm7gms.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp3_nm7gms.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $overlap = overlap(\n        $interval1[0], $interval1[1],\n        $interval2[0],\
    \ $interval2[1]\n    );\n    if ($overlap === false) {\n        return \"NO\"\
    ;\n    }\n    if (isPrime($overlap[1] - $overlap[0])) {\n        return \"YES\"\
    ;\n    }\n    return \"NO\";\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function overlap() in\
    \ /tmp/tmpf0_1v66l.php:19\nStack trace:\n#0 /tmp/tmpf0_1v66l.php(32): intersection(Array,\
    \ Array)\n#1 /tmp/tmpf0_1v66l.php(36): candidate(Array, Array)\n#2 /tmp/tmpf0_1v66l.php(46):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpf0_1v66l.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start1 = min($interval1[0], $interval1[1]);\n    $end1 = max($interval1[0],\
    \ $interval1[1]);\n    $start2 = min($interval2[0], $interval2[1]);\n    $end2\
    \ = max($interval2[0], $interval2[1]);\n    $intersection = [];\n    if ($start1\
    \ <= $start2 && $start2 <= $end1) {\n        $intersection[] = $start2;\n    }\n\
    \    if ($start1 <= $end2 && $end2 <= $end1) {\n        $intersection[] = $end2;\n\
    \    }\n    if ($start2 <= $start1 && $start1 <= $end2) {\n        $intersection[]\
    \ = $start1;\n    }\n    if ($start2 <= $end1 && $end1 <= $end2) {\n        $intersection[]\
    \ = $end1;\n    }\n    if (empty($intersection)) {\n        return \"NO\";\n \
    \   }\n    $length = abs($intersection[0] - $intersection[1]);\n    $prime = false;\n\
    \    for ($i = 2; $i <= $length / 2; $i++) {\n        if ($length % $i == 0) {\n\
    \            $prime = true;\n            break;\n        }\n    }\n    return\
    \ $prime ? \"NO\" : \"YES\";\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1kmxltbb.php:54\n\
    Stack trace:\n#0 /tmp/tmp1kmxltbb.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp1kmxltbb.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $intersect = false;\n  $interval1[0] = (int)$interval1[0];\n  $interval1[1]\
    \ = (int)$interval1[1];\n  $interval2[0] = (int)$interval2[0];\n  $interval2[1]\
    \ = (int)$interval2[1];\n  if ($interval1[0] <= $interval2[0] && $interval2[0]\
    \ <= $interval1[1]) {\n    $intersect = true;\n    $interval2[0] = $interval1[0];\n\
    \  }\n  if ($interval1[0] <= $interval2[1] && $interval2[1] <= $interval1[1])\
    \ {\n    $intersect = true;\n    $interval2[1] = $interval1[1];\n  }\n  if ($interval2[0]\
    \ <= $interval1[0] && $interval1[0] <= $interval2[1]) {\n    $intersect = true;\n\
    \    $interval1[0] = $interval2[0];\n  }\n  if ($interval2[0] <= $interval1[1]\
    \ && $interval1[1] <= $interval2[1]) {\n    $intersect = true;\n    $interval1[1]\
    \ = $interval2[1];\n  }\n  if ($intersect) {\n    $result = $interval1[1] - $interval1[0];\n\
    \    if ($result == 0) {\n      return \"NO\";\n    }\n    if ($result == 1) {\n\
    \      return \"NO\";\n    }\n    for ($i = 2; $i < $result; $i++) {\n      if\
    \ ($result % $i == 0) {\n        return \"NO\";\n      }\n    }\n    return \"\
    YES\";\n  }\n  return \"NO\";\n}\necho intersection((1, 2), (2, 3));\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpu8ihfuk2.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    if ($interval1[0] <= $interval2[0] && $interval2[0] <= $interval1[1]) {\n\
    \        $min = $interval2[0];\n    } elseif ($interval2[0] <= $interval1[0] &&\
    \ $interval1[0] <= $interval2[1]) {\n        $min = $interval1[0];\n    } else\
    \ {\n        return \"NO\";\n    }\n    if ($interval1[0] <= $interval2[1] &&\
    \ $interval2[1] <= $interval1[1]) {\n        $max = $interval2[1];\n    } elseif\
    \ ($interval2[0] <= $interval1[1] && $interval1[1] <= $interval2[1]) {\n     \
    \   $max = $interval1[1];\n    } else {\n        return \"NO\";\n    }\n    return\
    \ $min == $max ? \"NO\" : isPrime($max - $min) ? \"YES\" : \"NO\";\n}\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8hwqwe7_.php:40\n\
    Stack trace:\n#0 /tmp/tmp8hwqwe7_.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp8hwqwe7_.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    $interval1 = [min($interval1), max($interval1)];\n    $interval2\
    \ = [min($interval2), max($interval2)];\n    $interval = [];\n    if ($interval1[0]\
    \ > $interval2[0]) {\n        if ($interval1[0] <= $interval2[1]) {\n        \
    \    $interval = [$interval1[0], $interval2[1]];\n        }\n    } else {\n  \
    \      if ($interval2[0] <= $interval1[1]) {\n            $interval = [$interval2[0],\
    \ $interval1[1]];\n        }\n    }\n    if (count($interval) == 0) {\n      \
    \  return \"NO\";\n    }\n    $interval = abs($interval[0] - $interval[1]);\n\
    \    if ($interval < 2) {\n        return \"NO\";\n    }\n    for ($i = 2; $i\
    \ < $interval; $i++) {\n        if ($interval % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwnyfomky.php:54\n\
    Stack trace:\n#0 /tmp/tmpwnyfomky.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpwnyfomky.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $length = abs($interval1[0] - $interval2[0]);\n    if ($length > 1) {\n \
    \       $limit = min($interval1[1], $interval2[1]);\n        while ($length <\
    \ $limit) {\n            if ($length == 1) {\n                return \"NO\";\n\
    \            }\n            if ($limit % $length == 0) {\n                return\
    \ \"NO\";\n            }\n            $length++;\n        }\n    }\n    return\
    \ \"YES\";\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi7wouts7.php:39\n\
    Stack trace:\n#0 /tmp/tmpi7wouts7.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpi7wouts7.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $a1 = $interval1[0];\n    $a2 = $interval1[1];\n    $b1 = $interval2[0];\n\
    \    $b2 = $interval2[1];\n    if ($a1 > $a2) {\n        $a1 = $interval1[1];\n\
    \        $a2 = $interval1[0];\n    }\n    if ($b1 > $b2) {\n        $b1 = $interval2[1];\n\
    \        $b2 = $interval2[0];\n    }\n    $min = max($a1, $b1);\n    $max = min($a2,\
    \ $b2);\n    if ($min <= $max) {\n        $s = range($min, $max);\n        $s\
    \ = array_unique($s);\n        if (count($s) > 1) {\n            return \"NO\"\
    ;\n        }\n        return \"YES\";\n    }\n    return \"NO\";\n}\n\nprint_r(intersection([1,\
    \ 2], [2, 3]));\necho \"\\n\";\nprint_r(intersection([-1, 1], [0, 4]));\necho\
    \ \"\\n\";\nprint_r(intersection([-3, -1], [-5, 5]));\necho \"\\n\";\nprint_r(intersection([-3,\
    \ 3], [-3, 3]));\necho \"\\n\";\nprint_r(intersection([-1, -1], [-1, -1]));\n\
    echo \"\\n\";\nprint_r(intersection([1, 1], [2, 3]));\necho \"\\n\";\nprint_r(intersection([1,\
    \ 2], [1, 1]));\necho \"\\n\";\nprint_r(intersection([1, 2], [1, 1]));\necho \"\
    \\n\";\nprint_r(intersection([-3, -2], [-3, -1]));\necho \"\\n\";\nprint_r(intersection([-3,\
    \ -2], [-2, -1]));\necho \"\\n\";\nprint_r(intersection([-3, -2], [-2, -1]));\n\
    echo \"\\n\";\nprint_r(intersection([-\nfunction candidate(...$args) {\n    return\
    \ intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyyk_zfeo.php on line 67\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $start1 = min($interval1[0], $interval1[1]);\n  $end1 = max($interval1[0],\
    \ $interval1[1]);\n  $start2 = min($interval2[0], $interval2[1]);\n  $end2 = max($interval2[0],\
    \ $interval2[1]);\n  $length = 0;\n  if ($start1 <= $start2 && $start2 <= $end1)\
    \ {\n    $length = $end1 - $start2;\n  } else if ($start2 <= $start1 && $start1\
    \ <= $end2) {\n    $length = $end2 - $start1;\n  } else {\n    return \"NO\";\n\
    \  }\n  if ($length < 2) {\n    return \"NO\";\n  }\n  if ($length == 2) {\n \
    \   return \"YES\";\n  }\n  for ($i = 2; $i < $length; $i++) {\n    if ($length\
    \ % $i == 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}\n\necho\
    \ intersection([1, 2], [2, 3]) . \"<br>\";\necho intersection([-1, 1], [0, 4])\
    \ . \"<br>\";\necho intersection([-3, -1], [-5, 5]) . \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO<br>NO<br>NO<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnb0wpn_d.php:55\n\
    Stack trace:\n#0 /tmp/tmpnb0wpn_d.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpnb0wpn_d.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \t$arr1 = range($interval1[0], $interval1[1]);\n\t$arr2 = range($interval2[0],\
    \ $interval2[1]);\n\t$intersection = array_intersect($arr1, $arr2);\n\tif (empty($intersection))\n\
    \t\treturn \"NO\";\n\tif (is_prime(count($intersection)))\n\t\treturn \"YES\"\
    ;\n\treturn \"NO\";\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpe8hkkpc3.php:24\nStack trace:\n#0 /tmp/tmpe8hkkpc3.php(29): intersection(Array,\
    \ Array)\n#1 /tmp/tmpe8hkkpc3.php(33): candidate(Array, Array)\n#2 /tmp/tmpe8hkkpc3.php(43):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpe8hkkpc3.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $first = max($interval1[0], $interval2[0]);\n  $second = min($interval1[1],\
    \ $interval2[1]);\n  $diff = $second - $first;\n  $squares = array(1, 4, 9, 16,\
    \ 25, 36, 49, 64, 81, 100);\n  if ($diff < 0) {\n    return \"NO\";\n  } elseif\
    \ (in_array($diff, $squares)) {\n    return \"NO\";\n  } else {\n    return \"\
    YES\";\n  }\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpglwuhrf3.php:37\n\
    Stack trace:\n#0 /tmp/tmpglwuhrf3.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpglwuhrf3.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \tlist($a, $b) = $interval1;\n\tlist($c, $d) = $interval2;\n\tif ($b < $c || $d\
    \ < $a) {\n\t\treturn \"NO\";\n\t}\n\t$length = max($a, $c) - min($b, $d);\n\t\
    if ($length > 1) {\n\t\t$length = $length + 1;\n\t}\n\treturn isPrime($length)\
    \ ? \"YES\" : \"NO\";\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmp14_p85fh.php:28\nStack trace:\n#0 /tmp/tmp14_p85fh.php(32): intersection(Array,\
    \ Array)\n#1 /tmp/tmp14_p85fh.php(36): candidate(Array, Array)\n#2 /tmp/tmp14_p85fh.php(46):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp14_p85fh.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersectStart = max($interval1[0], $interval2[0]);\n    $intersectEnd =\
    \ min($interval1[1], $interval2[1]);\n    $length = $intersectEnd - $intersectStart;\n\
    \    $primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97];\n    return ($length > 0 && in_array($length,\
    \ $primes)) ? \"YES\" : \"NO\";\n}\n\nfunction candidate(...$args) {\n    return\
    \ intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $start1 = $interval1[0];\n  $end1 = $interval1[1];\n  $start2 = $interval2[0];\n\
    \  $end2 = $interval2[1];\n  $maxStart = max($start1, $start2);\n  $minEnd = min($end1,\
    \ $end2);\n  if ($maxStart > $minEnd) return \"NO\";\n  if ($maxStart === $minEnd)\
    \ return \"YES\";\n  $length = $minEnd - $maxStart;\n  for ($i = 2; $i < $length;\
    \ $i++) {\n    if ($length % $i === 0) return \"NO\";\n  }\n  return \"YES\";\n\
    }\n\n$res = intersection([0, 1], [0, 2]);\necho $res;\n\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "YES\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv7jk7aym.php:42\n\
    Stack trace:\n#0 /tmp/tmpv7jk7aym.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpv7jk7aym.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $interval1Start = $interval1[0];\n  $interval1End = $interval1[1];\n  $interval2Start\
    \ = $interval2[0];\n  $interval2End = $interval2[1];\n  $intersectionStart = max($interval1Start,\
    \ $interval2Start);\n  $intersectionEnd = min($interval1End, $interval2End);\n\
    \  $intersectionLength = $intersectionEnd - $intersectionStart;\n  $isPrime =\
    \ $intersectionLength > 1 && !hasDivisor($intersectionLength);\n  return $isPrime\
    \ ? \"YES\" : \"NO\";\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function hasDivisor()\
    \ in /tmp/tmp0vi99xdc.php:26\nStack trace:\n#0 /tmp/tmp0vi99xdc.php(31): intersection(Array,\
    \ Array)\n#1 /tmp/tmp0vi99xdc.php(37): candidate(Array, Array)\n#2 /tmp/tmp0vi99xdc.php(45):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0vi99xdc.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length <= 1) {\n        return \"NO\"\
    ;\n    }\n    $half = floor($length / 2);\n    for ($i = 2; $i <= $half; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp45fofs_1.php:42\n\
    Stack trace:\n#0 /tmp/tmp45fofs_1.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp45fofs_1.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersectionStart = max($interval1[0], $interval2[0]);\n    $intersectionEnd\
    \ = min($interval1[1], $interval2[1]);\n    if ($intersectionStart > $intersectionEnd)\
    \ {\n        return \"NO\";\n    }\n    $length = $intersectionEnd - $intersectionStart\
    \ + 1;\n    if ($length <= 1) {\n        return \"NO\";\n    }\n    $isPrime =\
    \ true;\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            $isPrime = false;\n            break;\n        }\n    }\n   \
    \ return $isPrime ? \"YES\" : \"NO\";\n}\necho intersection([-3, -1], [-5, 5]);\n\
    function candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "YES\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz6sw_lfo.php:44\n\
    Stack trace:\n#0 /tmp/tmpz6sw_lfo.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpz6sw_lfo.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    list($start1, $end1) = $interval1;\n    list($start2, $end2) = $interval2;\n\
    \    if($start1 > $end1 || $start2 > $end2) {\n        return \"NO\";\n    }\n\
    \    $intersection_start = max($start1, $start2);\n    $intersection_end = min($end1,\
    \ $end2);\n    if($intersection_start <= $intersection_end) {\n        return\
    \ (is_prime($intersection_end - $intersection_start + 1)) ? \"YES\" : \"NO\";\n\
    \    }\n    return \"NO\";\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0k1jzs0o.php:27\nStack trace:\n#0 /tmp/tmp0k1jzs0o.php(33): intersection(Array,\
    \ Array)\n#1 /tmp/tmp0k1jzs0o.php(37): candidate(Array, Array)\n#2 /tmp/tmp0k1jzs0o.php(47):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0k1jzs0o.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    list($start1, $end1) = $interval1;\n    list($start2, $end2) = $interval2;\n\
    \    if ($start1 > $end1 || $start2 > $end2) {\n        return \"NO\";\n    }\n\
    \    $minStart = min($start1, $start2);\n    $maxEnd = max($end1, $end2);\n  \
    \  $intersection = [];\n    for ($i = $minStart; $i <= $maxEnd; $i++) {\n    \
    \    if (($i >= $start1 && $i <= $end1) && ($i >= $start2 && $i <= $end2)) {\n\
    \            $intersection[] = $i;\n        }\n    }\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    return isPrime(count($intersection))\
    \ ? \"YES\" : \"NO\";\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmp6tr93usk.php:35\nStack trace:\n#0 /tmp/tmp6tr93usk.php(38): intersection(Array,\
    \ Array)\n#1 /tmp/tmp6tr93usk.php(42): candidate(Array, Array)\n#2 /tmp/tmp6tr93usk.php(52):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp6tr93usk.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    if (is_intersecting($interval1, $interval2)) {\n        $intersection = get_intersection($interval1,\
    \ $interval2);\n        if (is_prime($intersection[1] - $intersection[0])) {\n\
    \            return \"YES\";\n        }\n    }\n    return \"NO\";\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_intersecting()\
    \ in /tmp/tmpxh7b4mdt.php:19\nStack trace:\n#0 /tmp/tmpxh7b4mdt.php(29): intersection(Array,\
    \ Array)\n#1 /tmp/tmpxh7b4mdt.php(33): candidate(Array, Array)\n#2 /tmp/tmpxh7b4mdt.php(43):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpxh7b4mdt.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $array1 = [$interval1[0], $interval1[1]];\n  $array2 = [$interval2[0], $interval2[1]];\n\
    \  $sortArray = array_merge($array1, $array2);\n  sort($sortArray);\n  $start1\
    \ = $interval1[0];\n  $end1 = $interval1[1];\n  $start2 = $interval2[0];\n  $end2\
    \ = $interval2[1];\n  $start = $start1 > $start2 ? $start1 : $start2;\n  $end\
    \ = $end1 < $end2 ? $end1 : $end2;\n  if ($start <= $end) {\n    $primeNumber\
    \ = 0;\n    for ($i = 2; $i <= $end - $start; $i++) {\n      if (($end - $start)\
    \ % $i == 0) {\n        $primeNumber++;\n      }\n    }\n    if ($primeNumber\
    \ == 1) {\n      return \"YES\";\n    } else {\n      return \"NO\";\n    }\n\
    \  } else {\n    return \"NO\";\n  }\n}\n\necho intersection([1, 2], [2, 3]) .\
    \ '<br>';\necho intersection([-1, 1], [0, 4]) . '<br>';\necho intersection([-3,\
    \ -1], [-5, 5]) . '<br>';\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: NO<br>NO<br>YES<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    $l = $end - $start;\n    if($l < 0) return \"NO\";\n  \
    \  return isPrime($l) ? \"YES\" : \"NO\";\n}\nfunction candidate(...$args) {\n\
    \    return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpj3gzuzzr.php:23\nStack trace:\n#0 /tmp/tmpj3gzuzzr.php(26): intersection(Array,\
    \ Array)\n#1 /tmp/tmpj3gzuzzr.php(30): candidate(Array, Array)\n#2 /tmp/tmpj3gzuzzr.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpj3gzuzzr.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n  \
    \  $interval2Start = $interval2[0];\n    $interval2End = $interval2[1];\n    $interval1StartIsLessThanOrEqualToInterval2Start\
    \ = $interval1Start <= $interval2Start;\n    $interval1EndIsGreaterThanOrEqualToInterval2End\
    \ = $interval1End >= $interval2End;\n    $intersection = [null, null];\n    if\
    \ ($interval1StartIsLessThanOrEqualToInterval2Start) {\n        $intersection[0]\
    \ = $interval2Start;\n    } else {\n        $intersection[0] = $interval1Start;\n\
    \    }\n    if ($interval1EndIsGreaterThanOrEqualToInterval2End) {\n        $intersection[1]\
    \ = $interval2End;\n    } else {\n        $intersection[1] = $interval1End;\n\
    \    }\n    $lengthOfIntersection = abs($intersection[0] - $intersection[1]);\n\
    \    $lengthOfIntersectionIsPrime = isPrime($lengthOfIntersection);\n    return\
    \ $lengthOfIntersectionIsPrime ? \"YES\" : \"NO\";\n}\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpe_gmlm63.php:37\nStack trace:\n#0 /tmp/tmpe_gmlm63.php(41): intersection(Array,\
    \ Array)\n#1 /tmp/tmpe_gmlm63.php(45): candidate(Array, Array)\n#2 /tmp/tmpe_gmlm63.php(55):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpe_gmlm63.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    if($interval1[0] > $interval2[1] || $interval2[0] > $interval1[1]) return\
    \ \"NO\";\n    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    $length = $end - $start + 1;\n    return isPrime($length)\
    \ ? \"YES\" : \"NO\";\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmp3_2ief0o.php:23\nStack trace:\n#0 /tmp/tmp3_2ief0o.php(26): intersection(Array,\
    \ Array)\n#1 /tmp/tmp3_2ief0o.php(30): candidate(Array, Array)\n#2 /tmp/tmp3_2ief0o.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp3_2ief0o.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \   $start = max($interval1[0], $interval2[0]);\n   $end = min($interval1[1],\
    \ $interval2[1]);\n   if ($start <= $end) {\n      return $end - $start + 1 ==\
    \ 2 ? \"YES\" : \"NO\";\n   }\n   return \"NO\";\n}\n\necho intersection([1, 2],\
    \ [2, 3]);\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "NO\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_ox_7r8.php:34\n\
    Stack trace:\n#0 /tmp/tmpf_ox_7r8.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpf_ox_7r8.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    // TODO\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpweu_hvug.php:27\n\
    Stack trace:\n#0 /tmp/tmpweu_hvug.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpweu_hvug.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  if ($interval1[0] <= $interval2[0] && $interval2[0] <= $interval1[1]) {\n \
    \   $start = $interval2[0];\n  } elseif ($interval2[0] <= $interval1[0] && $interval1[0]\
    \ <= $interval2[1]) {\n    $start = $interval1[0];\n  } else {\n    return \"\
    NO\";\n  }\n  if ($interval1[0] <= $interval2[1] && $interval2[1] <= $interval1[1])\
    \ {\n    $end = $interval2[1];\n  } elseif ($interval2[0] <= $interval1[1] &&\
    \ $interval1[1] <= $interval2[1]) {\n    $end = $interval1[1];\n  } else {\n \
    \   return \"NO\";\n  }\n  $result = isPrime($end - $start);\n  return $result\
    \ ? \"YES\" : \"NO\";\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpcyfyfavs.php:33\nStack trace:\n#0 /tmp/tmpcyfyfavs.php(37): intersection(Array,\
    \ Array)\n#1 /tmp/tmpcyfyfavs.php(41): candidate(Array, Array)\n#2 /tmp/tmpcyfyfavs.php(51):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpcyfyfavs.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    function isPrime($num) {\n        if($num == 1) {\n            return false;\n\
    \        }\n        for($i = 2; $i < $num; $i++) {\n            if($num % $i ==\
    \ 0) {\n                return false;\n            }\n        }\n        return\
    \ true;\n    }\n    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if($start >= $end) {\n        return \"NO\";\n    }\n \
    \   return isPrime($end - $start) ? \"YES\" : \"NO\";\n}\necho intersection([1,\
    \ 2], [2, 3]);\necho \"<br>\";\necho intersection([-1, 1], [0, 4]);\necho \"<br>\"\
    ;\necho intersection([-3, -1], [-5, 5]);\nfunction candidate(...$args) {\n   \
    \ return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO<br>\nFatal error: Cannot redeclare isPrime() (previously declared in\
    \ /tmp/tmpx4adjidi.php:19) in /tmp/tmpx4adjidi.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n\
    \  $length = $end - $start;\n  if ($length < 0) {\n    return \"NO\";\n  }\n \
    \ if (isPrime($length)) {\n    return \"YES\";\n  }\n  return \"NO\";\n}\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpfm3rd9d4.php:25\nStack trace:\n#0 /tmp/tmpfm3rd9d4.php(31): intersection(Array,\
    \ Array)\n#1 /tmp/tmpfm3rd9d4.php(35): candidate(Array, Array)\n#2 /tmp/tmpfm3rd9d4.php(45):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpfm3rd9d4.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $intersection = [];\n  $newInterval = [];\n  if($interval1[0] < $interval2[0]){\n\
    \    $newInterval = [$interval1[0], $interval2[0]];\n  } else {\n    $newInterval\
    \ = [$interval2[0], $interval1[0]];\n  }\n  $newIntervalLength = $newInterval[1]\
    \ - $newInterval[0];\n  for($i = 2; $i <= $newIntervalLength; $i++){\n    if($newIntervalLength\
    \ % $i == 0){\n      $intersection[] = $i;\n    }\n  }\n  if(empty($intersection)){\n\
    \    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n\necho intersection([-2,\
    \ -1], [-2, -1]) . PHP_EOL;\necho intersection([-2, -1], [-2, -3]) . PHP_EOL;\n\
    echo intersection([-2, -1], [-2, -4]) . PHP_EOL;\necho intersection([1, 3], [2,\
    \ 4]) . PHP_EOL;\necho intersection([-1, 1], [0, 4]) . PHP_EOL;\necho intersection([-3,\
    \ -1], [-5, 5]) . PHP_EOL;\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "YES\nYES\nYES\nYES\nYES\nNO\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp9un1fup7.php:50\nStack trace:\n#0 /tmp/tmp9un1fup7.php(60): test()\n\
    #1 {main}\n  thrown in /tmp/tmp9un1fup7.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $interval1 = $interval1[0] < $interval1[1] ? $interval1 : [$interval1[1], $interval1[0]];\n\
    \  $interval2 = $interval2[0] < $interval2[1] ? $interval2 : [$interval2[1], $interval2[0]];\n\
    \  $intersectionStart = max($interval1[0], $interval2[0]);\n  $intersectionEnd\
    \ = min($interval1[1], $interval2[1]);\n  if ($intersectionStart > $intersectionEnd)\
    \ return \"NO\";\n  $intersectionLength = $intersectionEnd - $intersectionStart\
    \ + 1;\n  return $intersectionLength % 2 && \n    $intersectionLength % 3 && \n\
    \    $intersectionLength % 5 && \n    $intersectionLength % 7 && \n    $intersectionLength\
    \ % 11 && \n    $intersectionLength % 13 ? \"YES\" : \"NO\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy2x7hsps.php:38\n\
    Stack trace:\n#0 /tmp/tmpy2x7hsps.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpy2x7hsps.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $possible = [];\n  for ($i = $interval1[0]; $i <= $interval1[1]; $i++) {\n\
    \    for ($j = $interval2[0]; $j <= $interval2[1]; $j++) {\n      if ($i === $j)\
    \ {\n        $possible[] = $i;\n      }\n    }\n  }\n  if (!empty($possible))\
    \ {\n    $found = false;\n    for ($k = 0; $k < count($possible); $k++) {\n  \
    \    for ($l = 2; $l < $possible[$k]; $l++) {\n        if ($possible[$k] % $l\
    \ === 0) {\n          $found = true;\n        }\n      }\n    }\n    if ($found)\
    \ {\n      return \"NO\";\n    } else {\n      return \"YES\";\n    }\n  } else\
    \ {\n    return \"NO\";\n  }\n}\n\necho \"<pre>\";\necho intersection([1, 2],\
    \ [2, 3]);\necho \"</pre>\";\necho \"<pre>\";\necho intersection([-1, 1], [0,\
    \ 4]);\necho \"</pre>\";\necho \"<pre>\";\necho intersection([-3, -1], [-5, 5]);\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>YES</pre><pre>YES</pre><pre>YES</pre>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp5fwi8d71.php:60\nStack trace:\n#0 /tmp/tmp5fwi8d71.php(70):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5fwi8d71.php on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \t$start1 = $interval1[0];\n\t$end1 = $interval1[1];\n\t$start2 = $interval2[0];\n\
    \t$end2 = $interval2[1];\n\tif ($start1 <= $start2 && $start2 <= $end1) {\n\t\t\
    $intersection = [$start2, min($end1, $end2)];\n\t} else if ($start2 <= $start1\
    \ && $start1 <= $end2) {\n\t\t$intersection = [$start1, min($end1, $end2)];\n\t\
    } else {\n\t\treturn \"NO\";\n\t}\n\tif (isPrime($intersection[1] - $intersection[0]))\
    \ {\n\t\treturn \"YES\";\n\t} else {\n\t\treturn \"NO\";\n\t}\n}\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpkpvggo1w.php:30\nStack trace:\n#0 /tmp/tmpkpvggo1w.php(37): intersection(Array,\
    \ Array)\n#1 /tmp/tmpkpvggo1w.php(41): candidate(Array, Array)\n#2 /tmp/tmpkpvggo1w.php(51):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpkpvggo1w.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($interval[0] > $interval[1]) {\n        return \"NO\";\n    }\n    $len\
    \ = $interval[1] - $interval[0] + 1;\n    for ($i = 2; $i <= $len / 2; $i++) {\n\
    \        if ($len % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n\nintersection([1, 2], [2, 3]);\nintersection([-1, 1],\
    \ [0, 4]);\nintersection([-3, -1], [-5, 5]);\nfunction candidate(...$args) {\n\
    \    return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7luwrpe0.php:40\n\
    Stack trace:\n#0 /tmp/tmp7luwrpe0.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp7luwrpe0.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $intersection = array();\n  $intersection[0] = $interval1[0] > $interval2[0]\
    \ ? $interval1[0] : $interval2[0];\n  $intersection[1] = $interval1[1] < $interval2[1]\
    \ ? $interval1[1] : $interval2[1];\n  if ($intersection[0] > $intersection[1])\
    \ return \"NO\";\n  $result = \"NO\";\n  for ($i = 2; $i <= $intersection[1] -\
    \ $intersection[0]; $i++) {\n    if (($intersection[1] - $intersection[0]) % $i\
    \ == 0) return \"NO\";\n  }\n  return \"YES\";\n}\necho intersection([1, 2], [2,\
    \ 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3,\
    \ -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "YES\nYES\nNO\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc1lbu2cp.php:37\n\
    Stack trace:\n#0 /tmp/tmpc1lbu2cp.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpc1lbu2cp.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $a = $interval1[0];\n    $b = $interval1[1];\n    $c = $interval2[0];\n \
    \   $d = $interval2[1];\n    $l1 = $b - $a;\n    $l2 = $d - $c;\n    $maxA = max($a,\
    \ $c);\n    $minB = min($b, $d);\n    $interval = [];\n    for ($i = $maxA; $i\
    \ <= $minB; $i++) {\n        array_push($interval, $i);\n    }\n    $intersectionLength\
    \ = count($interval);\n    $result = true;\n    if ($intersectionLength == 0)\
    \ {\n        return \"NO\";\n    }\n    if ($intersectionLength == 1) {\n    \
    \    return \"YES\";\n    }\n    for ($i = 2; $i < $intersectionLength; $i++)\
    \ {\n        if ($intersectionLength % $i == 0) {\n            $result = false;\n\
    \            break;\n        }\n    }\n    if ($result) {\n        return \"YES\"\
    ;\n    } else {\n        return \"NO\";\n    }\n}\n$interval1 = [1, 2];\n$interval2\
    \ = [2, 3];\necho intersection($interval1, $interval2);\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "YES\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3yzp2n8e.php:59\n\
    Stack trace:\n#0 /tmp/tmp3yzp2n8e.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3yzp2n8e.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $arr1 = range($interval1[0], $interval1[1]);\n  $arr2 = range($interval2[0],\
    \ $interval2[1]);\n  if (count(array_intersect($arr1, $arr2)) == 0) {\n    return\
    \ \"NO\";\n  }\n  if (is_prime(count(array_intersect($arr1, $arr2)))) {\n    return\
    \ \"YES\";\n  }\n  return \"NO\";\n}\nfunction candidate(...$args) {\n    return\
    \ intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpci0u9_90.php:24\nStack trace:\n#0 /tmp/tmpci0u9_90.php(30): intersection(Array,\
    \ Array)\n#1 /tmp/tmpci0u9_90.php(34): candidate(Array, Array)\n#2 /tmp/tmpci0u9_90.php(44):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpci0u9_90.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1_length = $interval1[1] - $interval1[0];\n    $interval2_length\
    \ = $interval2[1] - $interval2[0];\n    $max_intersection_length = $interval1_length\
    \ > $interval2_length ? $interval1_length : $interval2_length;\n    $smaller_interval\
    \ = $interval1_length > $interval2_length ? $interval2 : $interval1;\n    $intersecting_region\
    \ = array();\n    for ($i = $smaller_interval[0]; $i <= $smaller_interval[1];\
    \ $i++) {\n        if ($i >= $interval1[0] && $i <= $interval1[1] && $i >= $interval2[0]\
    \ && $i <= $interval2[1]) {\n            $intersecting_region[] = $i;\n      \
    \  }\n    }\n    $intersecting_region_length = count($intersecting_region);\n\
    \    if ($intersecting_region_length == 0) {\n        return \"NO\";\n    }\n\
    \    $prime_numbers = array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97);\n    if (in_array($intersecting_region_length,\
    \ $prime_numbers)) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n\
    function candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpemyqdfpn.php:45\n\
    Stack trace:\n#0 /tmp/tmpemyqdfpn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpemyqdfpn.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  function isPrime($num) {\n    for ($i = 2; $i < $num; $i++) {\n      if ($num\
    \ % $i == 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\
    \  $i1_left = min($interval1[0], $interval1[1]);\n  $i1_right = max($interval1[0],\
    \ $interval1[1]);\n  $i2_left = min($interval2[0], $interval2[1]);\n  $i2_right\
    \ = max($interval2[0], $interval2[1]);\n  if ($i1_left > $i2_right || $i2_left\
    \ > $i1_right) {\n    return \"NO\";\n  }\n  $result = [];\n  for ($i = $i1_left;\
    \ $i <= $i1_right; $i++) {\n    for ($j = $i2_left; $j <= $i2_right; $j++) {\n\
    \      if ($i == $j) {\n        $result[] = $i;\n      }\n    }\n  }\n  return\
    \ isPrime(count($result)) ? \"YES\" : \"NO\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp16t9ifz_.php:50\n\
    Stack trace:\n#0 /tmp/tmp16t9ifz_.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp16t9ifz_.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $result = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \  $length = $result[1] - $result[0];\n  $primes = [2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  if ($length\
    \ > 1) {\n    if (in_array($length, $primes)) {\n      return \"YES\";\n    }\
    \ else {\n      return \"NO\";\n    }\n  } else {\n    return \"NO\";\n  }\n}\n\
    \nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    list($i1_start, $i1_end) = $interval1;\n    list($i2_start, $i2_end) = $interval2;\n\
    \    if ($i1_start > $i1_end || $i2_start > $i2_end) return \"NO\";\n    if ($i1_end\
    \ < $i2_start || $i2_end < $i1_start) return \"NO\";\n    $start = $i1_start >\
    \ $i2_start ? $i1_start : $i2_start;\n    $end = $i1_end < $i2_end ? $i1_end :\
    \ $i2_end;\n    if ($start == $end) return \"NO\";\n    return isPrime($end -\
    \ $start) ? \"YES\" : \"NO\";\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpzbxjm62m.php:26\nStack trace:\n#0 /tmp/tmpzbxjm62m.php(29): intersection(Array,\
    \ Array)\n#1 /tmp/tmpzbxjm62m.php(34): candidate(Array, Array)\n#2 /tmp/tmpzbxjm62m.php(43):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpzbxjm62m.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start1 = $interval1[0];\n    $end1 = $interval1[1];\n    $start2 = $interval2[0];\n\
    \    $end2 = $interval2[1];\n    $intersect = [];\n    $cond = ($start1 >= $start2\
    \ && $start1 <= $end2) || ($start2 >= $start1 && $start2 <= $end1);\n    if ($cond)\
    \ {\n        if ($start1 >= $start2 && $start1 <= $end2) {\n            $intersect[]\
    \ = $start1;\n        } else {\n            $intersect[] = $start2;\n        }\n\
    \        if ($end1 >= $start2 && $end1 <= $end2) {\n            $intersect[] =\
    \ $end1;\n        } else {\n            $intersect[] = $end2;\n        }\n   \
    \     $length = $intersect[1] - $intersect[0];\n        if ($length == 1) {\n\
    \            return \"NO\";\n        }\n        $prime = \"YES\";\n        for\
    \ ($i = 2; $i < $length; $i++) {\n            if ($length % $i == 0) {\n     \
    \           $prime = \"NO\";\n                break;\n            }\n        }\n\
    \        return $prime;\n    } else {\n        return \"NO\";\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6s_iwcuy.php:58\n\
    Stack trace:\n#0 /tmp/tmp6s_iwcuy.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp6s_iwcuy.php\
    \ on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $arr1 = [min($interval1), max($interval1)];\n    $arr2 = [min($interval2),\
    \ max($interval2)];\n    if ($arr1[0] < $arr2[0]) {\n        if ($arr1[1] >= $arr2[0])\
    \ {\n            if ($arr1[1] >= $arr2[1]) {\n                $res = [$arr2[0],\
    \ $arr2[1]];\n            } else {\n                $res = [$arr2[0], $arr1[1]];\n\
    \            }\n        } else {\n            return \"NO\";\n        }\n    }\
    \ elseif ($arr1[0] > $arr2[0]) {\n        if ($arr2[1] >= $arr1[0]) {\n      \
    \      if ($arr2[1] >= $arr1[1]) {\n                $res = [$arr1[0], $arr1[1]];\n\
    \            } else {\n                $res = [$arr1[0], $arr2[1]];\n        \
    \    }\n        } else {\n            return \"NO\";\n        }\n    } else {\n\
    \        $res = [$arr1[0], $arr1[1]];\n    }\n    $length = $res[1] - $res[0]\
    \ + 1;\n    if (isPrime($length)) {\n        return \"YES\";\n    } else {\n \
    \       return \"NO\";\n    }\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmp475sa23b.php:45\nStack trace:\n#0 /tmp/tmp475sa23b.php(52): intersection(Array,\
    \ Array)\n#1 /tmp/tmp475sa23b.php(56): candidate(Array, Array)\n#2 /tmp/tmp475sa23b.php(66):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp475sa23b.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  list($start1, $end1) = $interval1;\n  list($start2, $end2) = $interval2;\n\
    \  if ($start1 > $end1 || $start2 > $end2) {\n    return 'NO';\n  }\n  $intersection\
    \ = ($start1 <= $start2) ? $start2 : $start1;\n  $intersection .= ($end1 <= $end2)\
    \ ? $end1 : $end2;\n  return isPrime($intersection) ? 'YES' : 'NO';\n}\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpyig6yv7l.php:26\nStack trace:\n#0 /tmp/tmpyig6yv7l.php(29): intersection(Array,\
    \ Array)\n#1 /tmp/tmpyig6yv7l.php(33): candidate(Array, Array)\n#2 /tmp/tmpyig6yv7l.php(43):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpyig6yv7l.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start1 = $interval1[0];\n    $end1 = $interval1[1];\n    $start2 = $interval2[0];\n\
    \    $end2 = $interval2[1];\n    if ($start1 > $end1) {\n        $tmp = $start1;\n\
    \        $start1 = $end1;\n        $end1 = $tmp;\n    }\n    if ($start2 > $end2)\
    \ {\n        $tmp = $start2;\n        $start2 = $end2;\n        $end2 = $tmp;\n\
    \    }\n    $interval_start = $start1 > $start2 ? $start1 : $start2;\n    $interval_end\
    \ = $end1 < $end2 ? $end1 : $end2;\n    if ($interval_start > $interval_end) {\n\
    \        return \"NO\";\n    }\n    $prime = true;\n    for ($i = 2; $i < $interval_end\
    \ - $interval_start; $i++) {\n        if (($interval_end - $interval_start) %\
    \ $i == 0) {\n            $prime = false;\n            break;\n        }\n   \
    \ }\n    return $prime ? \"YES\" : \"NO\";\n}\n\necho intersection([1, 2], [2,\
    \ 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3,\
    \ -1], [-5, 5]) . \"\\n\";\necho intersection([-3, -1], [-1, 1]) . \"\\n\";\n\
    echo intersection([0, 0], [0, 0]) . \"\\n\";\necho intersection([-3, -1], [-1,\
    \ -1]) . \"\\n\";\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "YES\nYES\nYES\nYES\nYES\nYES\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp4rjxmqe2.php:59\nStack trace:\n#0 /tmp/tmp4rjxmqe2.php(69): test()\n\
    #1 {main}\n  thrown in /tmp/tmp4rjxmqe2.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n\
    \  $interval = $end - $start;\n  if ($interval < 0) {\n    return \"NO\";\n  }\n\
    \  for ($i = 2; $i < $interval; $i++) {\n    if ($interval % $i == 0) {\n    \
    \  return \"NO\";\n    }\n  }\n  return \"YES\";\n}\necho intersection([1, 2],\
    \ [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3,\
    \ -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "YES\nYES\nYES\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4fdw0oay.php:40\n\
    Stack trace:\n#0 /tmp/tmp4fdw0oay.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp4fdw0oay.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \t$interval1 = $interval1[0] < $interval1[1] ? $interval1 : [$interval1[1], $interval1[0]];\n\
    \t$interval2 = $interval2[0] < $interval2[1] ? $interval2 : [$interval2[1], $interval2[0]];\n\
    \tif ($interval1[0] > $interval2[1] || $interval2[0] > $interval1[1]) return \"\
    NO\";\n\telse if ($interval1[0] <= $interval2[0] && $interval2[0] <= $interval1[1])\
    \ {\n\t\t$res = $interval1[1] < $interval2[1] ? $interval1[1] : $interval2[1];\n\
    \t\t$length = $res - $interval2[0] + 1;\n\t} else {\n\t\t$res = $interval1[0]\
    \ < $interval2[0] ? $interval1[0] : $interval2[0];\n\t\t$length = $res - $interval1[0]\
    \ + 1;\n\t}\n\tif ($length < 2) return \"NO\";\n\tfor ($i = 2; $i <= $length;\
    \ $i++) {\n\t\tif ($length % $i == 0) return \"NO\";\n\t}\n\treturn \"YES\";\n\
    }\necho intersection([1, 2], [2, 3]);\nfunction candidate(...$args) {\n    return\
    \ intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpybr2ahjk.php:43\n\
    Stack trace:\n#0 /tmp/tmpybr2ahjk.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpybr2ahjk.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  // Your code here\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmdem66ho.php:26\n\
    Stack trace:\n#0 /tmp/tmpmdem66ho.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpmdem66ho.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    list($interval1_start, $interval1_end) = $interval1;\n    list($interval2_start,\
    \ $interval2_end) = $interval2;\n    $interval1_start = max($interval1_start,\
    \ $interval2_start);\n    $interval1_end = min($interval1_end, $interval2_end);\n\
    \    if ($interval1_start > $interval1_end) {\n        return \"NO\";\n    }\n\
    \    if ($interval1_start == $interval1_end) {\n        return is_prime($interval1_start)\
    \ ? \"YES\" : \"NO\";\n    }\n    $length = $interval1_end - $interval1_start\
    \ + 1;\n    return is_prime($length) ? \"YES\" : \"NO\";\n}\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqd38lj96.php:27\nStack trace:\n#0 /tmp/tmpqd38lj96.php(33): intersection(Array,\
    \ Array)\n#1 /tmp/tmpqd38lj96.php(37): candidate(Array, Array)\n#2 /tmp/tmpqd38lj96.php(47):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqd38lj96.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $interval1[0] > $interval2[0] ?\n    $start = $interval1[0] :\n    $start =\
    \ $interval2[0];\n  $interval1[1] < $interval2[1] ?\n    $end = $interval1[1]\
    \ :\n    $end = $interval2[1];\n  if ($start > $end) {\n    return \"NO\";\n \
    \ }\n  $length = $end - $start + 1;\n  $isPrime = true;\n  for ($i = 2; $i < $length;\
    \ $i++) {\n    if ($length % $i == 0) {\n      $isPrime = false;\n      break;\n\
    \    }\n  }\n  return $isPrime ? \"YES\" : \"NO\";\n}\necho \"Intersection of\
    \ (1, 2), (2, 3) is prime: \" . intersection([1, 2], [2, 3]) . \"\\n\";\necho\
    \ \"Intersection of (-1, 1), (0, 4) is prime: \" . intersection([-1, 1], [0, 4])\
    \ . \"\\n\";\necho \"Intersection of (-3, -1), (-5, 5) is prime: \" . intersection([-3,\
    \ -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Intersection of (1, 2), (2, 3) is prime: YES\nIntersection of (-1, 1),\
    \ (0, 4) is prime: YES\nIntersection of (-3, -1), (-5, 5) is prime: YES\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmprmpvs5uf.php:46\nStack trace:\n\
    #0 /tmp/tmprmpvs5uf.php(56): test()\n#1 {main}\n  thrown in /tmp/tmprmpvs5uf.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    $length = $end - $start;\n    if ($length == 0) return\
    \ \"NO\";\n    if ($length == 1) return \"YES\";\n    if ($length % 2 == 0) return\
    \ \"NO\";\n    for ($i = 3; $i <= sqrt($length); $i += 2) {\n        if ($length\
    \ % $i == 0) return \"NO\";\n    }\n    return \"YES\";\n}\n\necho intersection([-4,\
    \ 2], [-3, 6]) . PHP_EOL;\necho intersection([1, 3], [2, 4]) . PHP_EOL;\necho\
    \ intersection([-1, 1], [0, 4]) . PHP_EOL;\necho intersection([-3, -1], [-5, 5])\
    \ . PHP_EOL;\necho intersection([-8, -3], [-3, 0]) . PHP_EOL;\necho intersection([-1,\
    \ -1], [-1, -1]) . PHP_EOL;\necho intersection([-4, -3], [-4, -3]) . PHP_EOL;\n\
    echo intersection([1, 2], [2, 3]) . PHP_EOL;\necho intersection([7, 9], [11, 12])\
    \ . PHP_EOL;\necho intersection([5, 10], [7, 14]) . PHP_EOL;\necho intersection([-7,\
    \ -1], [-5, -1]) . PHP_EOL;\necho intersection([-4, 6], [-3, 2]) . PHP_EOL;\n\
    echo intersection([-3, 1], [-6, 2]) . PHP_EOL;\necho intersection([-6, -3], [-5,\
    \ 1]) . PHP_EOL;\necho intersection([-6, -1], [-2, 0]) . PHP_EOL;\necho intersection([-3,\
    \ -2], [-3, -2]) . PHP_EOL;\necho intersection([-1, -1], [-1, -1]) . PHP_EOL;\n\
    echo intersection([-8, -1], [-7, 3]) . PHP_EOL;\necho intersection\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9hdt80tn.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $newInterval = [];\n  if ($interval1[0] <= $interval2[0]) {\n    $newInterval[0]\
    \ = $interval2[0];\n  } else {\n    $newInterval[0] = $interval1[0];\n  }\n  if\
    \ ($interval1[1] >= $interval2[1]) {\n    $newInterval[1] = $interval2[1];\n \
    \ } else {\n    $newInterval[1] = $interval1[1];\n  }\n  $intervalLength = $newInterval[1]\
    \ - $newInterval[0];\n  if ($intervalLength < 0) {\n    return \"NO\";\n  }\n\
    \  for ($i = 2; $i < $intervalLength; $i++) {\n    if ($intervalLength % $i ==\
    \ 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdlpzvy2w.php:47\n\
    Stack trace:\n#0 /tmp/tmpdlpzvy2w.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpdlpzvy2w.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $start1 = $interval1[0];\n  $end1 = $interval1[1];\n  $start2 = $interval2[0];\n\
    \  $end2 = $interval2[1];\n  if ($start1 > $end1 || $start2 > $end2) return \"\
    NO\";\n  if ($start1 > $start2) {\n    $start1 = $interval2[0];\n    $end1 = $interval2[1];\n\
    \    $start2 = $interval1[0];\n    $end2 = $interval1[1];\n  }\n  if ($start2\
    \ > $end1) return \"NO\";\n  if ($end2 < $end1) $end1 = $end2;\n  $length = $end1\
    \ - $start2 + 1;\n  if ($length == 1) return \"NO\";\n  if ($length == 2) return\
    \ \"YES\";\n  for ($i = 2; $i <= sqrt($length); $i++) {\n    if ($length % $i\
    \ == 0) return \"NO\";\n  }\n  return \"YES\";\n}\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppzne2ofi.php:46\n\
    Stack trace:\n#0 /tmp/tmppzne2ofi.php(55): test()\n#1 {main}\n  thrown in /tmp/tmppzne2ofi.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $diff = [];\n  $diff[0] = abs($interval1[0] - $interval2[0]);\n  $diff[1] =\
    \ abs($interval1[1] - $interval2[1]);\n  if($diff[0] == 0) {\n    $diff[0] = 1;\n\
    \  }\n  if($diff[1] == 0) {\n    $diff[1] = 1;\n  }\n  $gcd = gcd($diff[0], $diff[1]);\n\
    \  return isPrime($gcd) ? \"YES\" : \"NO\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function gcd() in /tmp/tmpylk5qjcg.php:28\n\
    Stack trace:\n#0 /tmp/tmpylk5qjcg.php(33): intersection(Array, Array)\n#1 /tmp/tmpylk5qjcg.php(37):\
    \ candidate(Array, Array)\n#2 /tmp/tmpylk5qjcg.php(47): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpylk5qjcg.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  // cek awal\n  if ($interval1[0] > $interval2[0]) {\n    $start = $interval1[0];\n\
    \  } else {\n    $start = $interval2[0];\n  }\n  // cek akhir\n  if ($interval1[1]\
    \ < $interval2[1]) {\n    $end = $interval1[1];\n  } else {\n    $end = $interval2[1];\n\
    \  }\n  // cek jika tidak ada intersction\n  if ($start > $end) {\n    return\
    \ \"NO\";\n  }\n  // cek ada intersction\n  $length = $end - $start + 1;\n  $count\
    \ = 0;\n  for ($i = 2; $i < $length; $i++) {\n    if ($length % $i == 0) {\n \
    \     $count++;\n    }\n  }\n  if ($count > 0) {\n    return \"NO\";\n  } else\
    \ {\n    return \"YES\";\n  }\n}\n\nfunction candidate(...$args) {\n    return\
    \ intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsttgu2e_.php:55\n\
    Stack trace:\n#0 /tmp/tmpsttgu2e_.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpsttgu2e_.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \tlist($a, $b) = $interval1;\n\tlist($c, $d) = $interval2;\n\tif (min($b, $d)\
    \ < max($a, $c)) return \"NO\";\n\t$intersection = min($b, $d) - max($a, $c) +\
    \ 1;\n\treturn isPrime($intersection) ? \"YES\" : \"NO\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmp5g1s0g_p.php:23\nStack trace:\n#0 /tmp/tmp5g1s0g_p.php(27): intersection(Array,\
    \ Array)\n#1 /tmp/tmp5g1s0g_p.php(31): candidate(Array, Array)\n#2 /tmp/tmp5g1s0g_p.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp5g1s0g_p.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \t$start1 = $interval1[0];\n\t$end1 = $interval1[1];\n\t$start2 = $interval2[0];\n\
    \t$end2 = $interval2[1];\n\tif ($start1 > $end1) {\n\t\treturn \"NO\";\n\t}\n\t\
    if ($start2 > $end2) {\n\t\treturn \"NO\";\n\t}\n\t$min = max($start1, $start2);\n\
    \t$max = min($end1, $end2);\n\tif ($min > $max) {\n\t\treturn \"NO\";\n\t}\n\t\
    $length = $max - $min + 1;\n\tif ($length == 1) {\n\t\treturn \"NO\";\n\t}\n\t\
    if ($length < 1) {\n\t\treturn \"NO\";\n\t}\n\tif ($length == 2) {\n\t\treturn\
    \ \"YES\";\n\t}\n\tfor ($i = 2; $i < $length; $i++) {\n\t\tif ($length % $i ==\
    \ 0) {\n\t\t\treturn \"NO\";\n\t\t}\n\t}\n\treturn \"YES\";\n}\necho intersection([1,\
    \ 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho\
    \ intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nYES\nYES\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6z9erj1s.php:60\n\
    Stack trace:\n#0 /tmp/tmp6z9erj1s.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp6z9erj1s.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $larger = $interval1[1] > $interval2[1] ? $interval1 : $interval2;\n    $smaller\
    \ = $interval1[1] < $interval2[1] ? $interval1 : $interval2;\n    if ($larger[0]\
    \ < $smaller[1]) {\n        $interval = [$larger[0], $smaller[1]];\n        return\
    \ isPrime($interval[1] - $interval[0]) ? \"YES\" : \"NO\";\n    }\n    return\
    \ \"NO\";\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmp7ggmr5lb.php:23\nStack trace:\n#0 /tmp/tmp7ggmr5lb.php(28): intersection(Array,\
    \ Array)\n#1 /tmp/tmp7ggmr5lb.php(33): candidate(Array, Array)\n#2 /tmp/tmp7ggmr5lb.php(42):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp7ggmr5lb.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $interval1 = range(...$interval1);\n  $interval2 = range(...$interval2);\n\
    \  $intersection = array_intersect($interval1, $interval2);\n  $intersection =\
    \ count($intersection);\n  if (!$intersection) return \"NO\";\n  $prime = true;\n\
    \  if ($intersection < 2) return \"YES\";\n  for ($i = 2; $i < $intersection /\
    \ 2; $i++) {\n    if ($intersection % $i == 0) $prime = false;\n  }\n  return\
    \ $prime ? \"YES\" : \"NO\";\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_zr_bqyh.php:36\n\
    Stack trace:\n#0 /tmp/tmp_zr_bqyh.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp_zr_bqyh.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $min1 = min($interval1[0], $interval1[1]);\n  $max1 = max($interval1[0], $interval1[1]);\n\
    \  $min2 = min($interval2[0], $interval2[1]);\n  $max2 = max($interval2[0], $interval2[1]);\n\
    \  $arr = range($min1, $max1);\n  $arr2 = range($min2, $max2);\n  $arr2 = array_flip($arr2);\n\
    \  $intersect = array_intersect_key($arr, $arr2);\n  if (empty($intersect)) {\n\
    \    return \"NO\";\n  }\n  $result = count($intersect);\n  $isPrime = function($number)\
    \ {\n    if ($number === 1) {\n      return false;\n    }\n    if ($number ===\
    \ 2) {\n      return true;\n    }\n    if ($number % 2 === 0) {\n      return\
    \ false;\n    }\n    for ($i = 3; $i <= ceil(sqrt($number)); $i = $i + 2) {\n\
    \      if ($number % $i === 0) {\n        return false;\n      }\n    }\n    return\
    \ true;\n  };\n  if ($isPrime($result)) {\n    return \"YES\";\n  }\n  return\
    \ \"NO\";\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplc7j74k8.php:59\n\
    Stack trace:\n#0 /tmp/tmplc7j74k8.php(68): test()\n#1 {main}\n  thrown in /tmp/tmplc7j74k8.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $intersect = [];\n  foreach ($interval1 as $int) {\n    if (in_array($int,\
    \ $interval2)) {\n      $intersect[] = $int;\n    }\n  }\n  if (!empty($intersect))\
    \ {\n    sort($intersect);\n    $intersect_length = $intersect[1] - $intersect[0];\n\
    \    if ($intersect_length < 2) {\n      return \"NO\";\n    }\n    for ($i =\
    \ 2; $i < $intersect_length; $i++) {\n      if ($intersect_length % $i == 0) {\n\
    \        return \"NO\";\n      }\n    }\n    return \"YES\";\n  }\n  return \"\
    NO\";\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoumdbkll.php:47\n\
    Stack trace:\n#0 /tmp/tmpoumdbkll.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpoumdbkll.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $a = $interval1[0];\n  $b = $interval1[1];\n  $c = $interval2[0];\n  $d = $interval2[1];\n\
    \  $min = max($a, $c);\n  $max = min($b, $d);\n  if ($min > $max) {\n    return\
    \ \"NO\";\n  }\n  $length = $max - $min + 1;\n  $prime = [\"NO\", \"YES\"];\n\
    \  for ($i = 2; $i < $length; $i++) {\n    if ($length % $i == 0) {\n      return\
    \ $prime[0];\n    }\n  }\n  return $prime[1];\n}\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_swzo8o.php:42\n\
    Stack trace:\n#0 /tmp/tmp5_swzo8o.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp5_swzo8o.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $interval = getIntersection($interval1, $interval2);\n  if ($interval[0] ===\
    \ null) {\n    return \"NO\";\n  }\n  $length = $interval[1] - $interval[0] +\
    \ 1;\n  if ($length === 1) {\n    return \"NO\";\n  }\n  return isPrime($length)\
    \ ? \"YES\" : \"NO\";\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function getIntersection()\
    \ in /tmp/tmpos0s_s9t.php:19\nStack trace:\n#0 /tmp/tmpos0s_s9t.php(31): intersection(Array,\
    \ Array)\n#1 /tmp/tmpos0s_s9t.php(35): candidate(Array, Array)\n#2 /tmp/tmpos0s_s9t.php(45):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpos0s_s9t.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start1 = $interval1[0];\n    $end1 = $interval1[1];\n    $start2 = $interval2[0];\n\
    \    $end2 = $interval2[1];\n    if($start1 > $end1 || $start2 > $end2) return\
    \ \"NO\";\n    if($start1 <= $start2 && $end1 <= $start2) return \"NO\";\n   \
    \ if($start1 >= $end2 && $end1 >= $end2) return \"NO\";\n    $start = $start1\
    \ <= $start2 ? $start2 : $start1;\n    $end = $end1 <= $end2 ? $end1 : $end2;\n\
    \    if($start >= $end) return \"NO\";\n    $sub = $end - $start;\n    $sub_arr\
    \ = [];\n    for($i = 1; $i <= $sub; $i++) {\n        if($sub % $i == 0) {\n \
    \           $sub_arr[] = $i;\n        }\n    }\n    if(count($sub_arr) == 2) return\
    \ \"YES\";\n    return \"NO\";\n}\n\nfunction candidate(...$args) {\n    return\
    \ intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $x1 = $interval1[0];\n  $x2 = $interval1[1];\n  $y1 = $interval2[0];\n  $y2\
    \ = $interval2[1];\n  $primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  $intersection = 0;\n  if($x1\
    \ > $y1) {\n    if($x1 <= $y2) {\n      if($x2 <= $y2) {\n        $intersection\
    \ = $x2 - $x1;\n      } else {\n        $intersection = $y2 - $x1;\n      }\n\
    \    }\n  } else {\n    if($y1 <= $x2) {\n      if($y2 <= $x2) {\n        $intersection\
    \ = $y2 - $y1;\n      } else {\n        $intersection = $x2 - $y1;\n      }\n\
    \    }\n  }\n  return in_array($intersection, $primes) ? \"YES\" : \"NO\";\n}\n\
    function candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = array();\n    $intersection[] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $diff = abs($intersection[0]\
    \ - $intersection[1]);\n    if ($diff == 1) {\n        return \"NO\";\n    }\n\
    \    $prime = true;\n    for ($i = 2; $i < $diff; $i++) {\n        if ($diff %\
    \ $i == 0) {\n            $prime = false;\n            break;\n        }\n   \
    \ }\n    if ($prime) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n\
    function candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkwsxgacx.php:46\n\
    Stack trace:\n#0 /tmp/tmpkwsxgacx.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpkwsxgacx.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  list($start1, $end1) = $interval1;\n  list($start2, $end2) = $interval2;\n\
    \  if($start1 > $end1) {\n    list($start1, $end1) = $interval1;\n  }\n  if($start2\
    \ > $end2) {\n    list($start2, $end2) = $interval2;\n  }\n  $intersect = [];\n\
    \  $intersect[] = max($start1, $start2);\n  $intersect[] = min($end1, $end2);\n\
    \  if($intersect[0] > $intersect[1]) {\n    return \"NO\";\n  }\n  return isPrime(abs($intersect[1]\
    \ - $intersect[0])) ? \"YES\" : \"NO\";\n}\n\nfunction candidate(...$args) {\n\
    \    return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmplin7yzh8.php:33\nStack trace:\n#0 /tmp/tmplin7yzh8.php(37): intersection(Array,\
    \ Array)\n#1 /tmp/tmplin7yzh8.php(41): candidate(Array, Array)\n#2 /tmp/tmplin7yzh8.php(51):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmplin7yzh8.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n\
    \  if ($start > $end) {\n    return \"NO\";\n  }\n  $length = $end - $start +\
    \ 1;\n  if ($length == 1) {\n    return \"NO\";\n  }\n  if ($length == 2) {\n\
    \    return \"YES\";\n  }\n  for ($i = 2; $i < $length; $i++) {\n    if ($length\
    \ % $i == 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}\necho intersection([1,\
    \ 2], [2, 3]) . \"<br>\";\necho intersection([-1, 1], [0, 4]) . \"<br>\";\necho\
    \ intersection([-3, -1], [-5, 5]) . \"<br>\";\necho intersection([-12, -5], [-13,\
    \ -9]) . \"<br>\";\necho intersection([-12, -5], [-13, -6]) . \"<br>\";\necho\
    \ intersection([-12, -5], [-10, -6]) . \"<br>\";\necho intersection([-3, -1],\
    \ [-5, -1]) . \"<br>\";\necho intersection([-3, -1], [-5, -3]) . \"<br>\";\necho\
    \ intersection([-3, -1], [-3, -1]) . \"<br>\";\necho intersection([-3, -1], [-1,\
    \ -1]) . \"<br>\";\necho intersection([-3, -1], [-1, -3]) . \"<br>\";\necho intersection([-3,\
    \ -1], [-1, -2]) . \"<br>\";\necho intersection([-3, -1], [-3, -3]) . \"<br>\"\
    ;\necho intersection([-3, -1], [-3, -2]) . \"<br>\";\necho intersection([-3, -1],\
    \ [-2, -2]) . \"<br>\";\necho intersection([-3, -1], [-2, -1]) . \"<br>\";\necho\
    \ intersection([-3, -1], [-2, -3]) . \"<br>\";\necho intersection\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_g5ggy_n.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start1 = $interval1[0];\n    $end1 = $interval1[1];\n    $start2 = $interval2[0];\n\
    \    $end2 = $interval2[1];\n    $from = max($start1, $start2);\n    $to = min($end1,\
    \ $end2);\n    if ($from <= $to) {\n        return isPrime($to - $from + 1) ?\
    \ \"YES\" : \"NO\";\n    }\n    return \"NO\";\n}\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmp630xsf8k.php:26\nStack trace:\n#0 /tmp/tmp630xsf8k.php(31): intersection(Array,\
    \ Array)\n#1 /tmp/tmp630xsf8k.php(35): candidate(Array, Array)\n#2 /tmp/tmp630xsf8k.php(45):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp630xsf8k.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $minX = max($interval1[0], $interval2[0]);\n  $maxX = min($interval1[1], $interval2[1]);\n\
    \  if ($minX <= $maxX) {\n    return isPrime($maxX - $minX + 1) ? \"YES\" : \"\
    NO\";\n  }\n  return \"NO\";\n}\n\nfunction candidate(...$args) {\n    return\
    \ intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmptqm26ba8.php:22\nStack trace:\n#0 /tmp/tmptqm26ba8.php(28): intersection(Array,\
    \ Array)\n#1 /tmp/tmptqm26ba8.php(32): candidate(Array, Array)\n#2 /tmp/tmptqm26ba8.php(42):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptqm26ba8.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $result = \"NO\";\n    list($start1, $end1) = $interval1;\n    list($start2,\
    \ $end2) = $interval2;\n    $min_start = max($start1, $start2);\n    $max_end\
    \ = min($end1, $end2);\n    if ($min_start <= $max_end) {\n        $intersect_length\
    \ = $max_end - $min_start + 1;\n        $result = is_prime($intersect_length)\
    \ ? \"YES\" : \"NO\";\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpnbj233sb.php:26\nStack trace:\n#0 /tmp/tmpnbj233sb.php(32): intersection(Array,\
    \ Array)\n#1 /tmp/tmpnbj233sb.php(36): candidate(Array, Array)\n#2 /tmp/tmpnbj233sb.php(46):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpnbj233sb.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $newInterval1 = range($interval1[0], $interval1[1]);\n  $newInterval2 = range($interval2[0],\
    \ $interval2[1]);\n  $intersection = array_intersect($newInterval1, $newInterval2);\n\
    \  if (count($intersection) === 0) {\n    return \"NO\";\n  }\n  if (count($intersection)\
    \ === 1) {\n    return \"YES\";\n  }\n  if (count($intersection) % 2 === 0) {\n\
    \    return \"NO\";\n  }\n  if (count($intersection) % 2 === 1) {\n    return\
    \ \"YES\";\n  }\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpei4z77wv.php:40\n\
    Stack trace:\n#0 /tmp/tmpei4z77wv.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpei4z77wv.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  if ($interval1[0] > $interval2[1] || $interval2[0] > $interval1[1]) return\
    \ \"NO\";\n  $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1],\
    \ $interval2[1]);\n  $length = $end - $start + 1;\n  return isPrime($length) ?\
    \ \"YES\" : \"NO\";\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpxnz3vf_3.php:23\nStack trace:\n#0 /tmp/tmpxnz3vf_3.php(27): intersection(Array,\
    \ Array)\n#1 /tmp/tmpxnz3vf_3.php(31): candidate(Array, Array)\n#2 /tmp/tmpxnz3vf_3.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpxnz3vf_3.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $a = ($interval1[0] > $interval2[0]) ? $interval1[0] : $interval2[0];\n  $b\
    \ = ($interval1[1] < $interval2[1]) ? $interval1[1] : $interval2[1];\n  $c = $b\
    \ - $a;\n  if ($c < 0) {\n    return \"NO\";\n  }\n  if ($c == 0) {\n    return\
    \ \"YES\";\n  }\n  for ($i = 2; $i < $c; $i++) {\n    if ($c % $i == 0) {\n  \
    \    return \"NO\";\n    }\n  }\n  return \"YES\";\n}\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcf_hd94l.php:40\n\
    Stack trace:\n#0 /tmp/tmpcf_hd94l.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpcf_hd94l.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  // Your code here\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporqqh0er.php:27\n\
    Stack trace:\n#0 /tmp/tmporqqh0er.php(37): test()\n#1 {main}\n  thrown in /tmp/tmporqqh0er.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $intersect = min($interval1[1], $interval2[1]) - max($interval1[0], $interval2[0]);\n\
    \  return ($intersect < 0) ? \"NO\" : (isPrime($intersect) ? \"YES\" : \"NO\"\
    );\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"\
    NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpaajrck0g.php:20\nStack trace:\n#0 /tmp/tmpaajrck0g.php(23): intersection(Array,\
    \ Array)\n#1 /tmp/tmpaajrck0g.php(27): candidate(Array, Array)\n#2 /tmp/tmpaajrck0g.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpaajrck0g.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  // your code here\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcm_z6gbd.php:26\n\
    Stack trace:\n#0 /tmp/tmpcm_z6gbd.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpcm_z6gbd.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    // return \"NO\";\n    $arr = [];\n    if ($interval1[0] > $interval2[0])\
    \ {\n        for ($i = $interval2[0]; $i <= $interval2[1]; $i++) {\n         \
    \   $arr[] = $i;\n        }\n        for ($i = $interval1[0]; $i <= $interval1[1];\
    \ $i++) {\n            if (in_array($i, $arr)) {\n                $arr[] = $i;\n\
    \            }\n        }\n    } else {\n        for ($i = $interval1[0]; $i <=\
    \ $interval1[1]; $i++) {\n            $arr[] = $i;\n        }\n        for ($i\
    \ = $interval2[0]; $i <= $interval2[1]; $i++) {\n            if (in_array($i,\
    \ $arr)) {\n                $arr[] = $i;\n            }\n        }\n    }\n  \
    \  if (count($arr) <= 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i\
    \ < count($arr); $i++) {\n        if ($arr[count($arr) - 1] % $i == 0) {\n   \
    \         return \"NO\";\n        }\n    }\n    return \"YES\";\n}\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1xcjjle7.php:56\n\
    Stack trace:\n#0 /tmp/tmp1xcjjle7.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp1xcjjle7.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $intersect = [];\n  $array = array_merge($interval1, $interval2);\n  $min =\
    \ min($array);\n  $max = max($array);\n  if($min >= $max) {\n    return 'NO';\n\
    \  }\n  for($i = $min; $i <= $max; $i++) {\n    if($i >= $interval1[0] && $i <=\
    \ $interval1[1] && $i >= $interval2[0] && $i <= $interval2[1]) {\n      $intersect[]\
    \ = $i;\n    }\n  }\n  if(count($intersect) < 2) {\n    return 'NO';\n  }\n  $isPrime\
    \ = true;\n  $primeArray = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  if(in_array(count($intersect),\
    \ $primeArray)) {\n    return 'YES';\n  }\n  return 'NO';\n}\n\necho intersection([1,\
    \ 2], [2, 3]);\necho '<br>';\necho intersection([-1, 1], [0, 4]);\necho '<br>';\n\
    echo intersection([-3, -1], [-5, 5]);\necho '<br>';\necho intersection([-10, 0],\
    \ [0, 10]);\necho '<br>';\necho intersection([-10, 0], [5, 5]);\necho '<br>';\n\
    echo intersection([-5, 5], [0, 0]);\necho '<br>';\necho intersection([2, 2], [1,\
    \ 3]);\necho '<br>';\necho intersection([2, 3], [2, 2]);\necho '<br>';\necho intersection([1,\
    \ 1], [1, 1]);\necho '<br>';\necho intersection([1, 2], [1, 2]);\necho '<br>';\n\
    echo intersection([3, 4], [3, 4]);\necho '<br>';\necho intersection([1, 2], [2,\
    \ 3]);\necho '<br\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpuvtirz8o.php on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  //list($start1, $end1) = $interval1;\n  //list($start2, $end2) = $interval2;\n\
    \  $result = \"NO\";\n  for ($i = $interval1[0]; $i <= $interval1[1]; $i++) {\n\
    \    for ($j = $interval2[0]; $j <= $interval2[1]; $j++) {\n      if ($i == $j)\
    \ {\n        $num = $i - $j;\n        if ($num == 1 || $num == 2 || $num == 3\
    \ || $num == 5 || $num == 7) {\n          $result = \"YES\";\n        }\n    \
    \  }\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_4pkpjlv.php:42\n\
    Stack trace:\n#0 /tmp/tmp_4pkpjlv.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp_4pkpjlv.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersect = [max($interval1[0], $interval2[0]),\n                  min($interval1[1],\
    \ $interval2[1])];\n    $len = $intersect[1] - $intersect[0];\n    if ($len <\
    \ 1) {\n        return \"NO\";\n    }\n    return isPrime($len) ? \"YES\" : \"\
    NO\";\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmptdrv7gz0.php:25\nStack trace:\n#0 /tmp/tmptdrv7gz0.php(28): intersection(Array,\
    \ Array)\n#1 /tmp/tmptdrv7gz0.php(33): candidate(Array, Array)\n#2 /tmp/tmptdrv7gz0.php(42):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptdrv7gz0.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start1 = $interval1[0];\n    $end1 = $interval1[1];\n    $start2 = $interval2[0];\n\
    \    $end2 = $interval2[1];\n    $intersection = [];\n    $intersection[0] = max($start1,\
    \ $start2);\n    $intersection[1] = min($end1, $end2);\n    if ($intersection[0]\
    \ <= $intersection[1]) {\n        $length = $intersection[1] - $intersection[0]\
    \ + 1;\n        if ($length == 1) {\n            return \"NO\";\n        }\n \
    \       for ($i = 2; $i < $length; $i++) {\n            if ($length % $i == 0)\
    \ {\n                return \"NO\";\n            }\n        }\n        return\
    \ \"YES\";\n    }\n    return \"NO\";\n}\n\nfunction candidate(...$args) {\n \
    \   return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp03tqfiu4.php:47\n\
    Stack trace:\n#0 /tmp/tmp03tqfiu4.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp03tqfiu4.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $prime = [\n        2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137,\
    \ 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227,\
    \ 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313,\
    \ 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,\
    \ 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509,\
    \ 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617,\
    \ 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727,\
    \ 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829,\
    \ 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947,\
    \ 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039,\
    \ 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123,\
    \ 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9s7thatz.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $range = array_intersect(range($interval1[0], $interval1[1]), range($interval2[0],\
    \ $interval2[1]));\n    if(empty($range)) {\n        return \"NO\";\n    }\n \
    \   $range = array_values($range);\n    $length = $range[count($range) - 1] -\
    \ $range[0];\n    return $length <= 1 || $length % 2 == 0 || $length % 3 == 0\
    \ || $length % 5 == 0 || $length % 7 == 0 ? \"NO\" : \"YES\";\n}\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4fewftry.php:34\n\
    Stack trace:\n#0 /tmp/tmp4fewftry.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp4fewftry.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $arr1 = range($interval1[0], $interval1[1]);\n  $arr2 = range($interval2[0],\
    \ $interval2[1]);\n  $intersection = array_intersect($arr1, $arr2);\n  if (count($intersection)\
    \ === 0) {\n    return \"NO\";\n  }\n  return (isPrime(count($intersection)))\
    \ ? \"YES\" : \"NO\";\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpxr2o_g2t.php:25\nStack trace:\n#0 /tmp/tmpxr2o_g2t.php(28): intersection(Array,\
    \ Array)\n#1 /tmp/tmpxr2o_g2t.php(32): candidate(Array, Array)\n#2 /tmp/tmpxr2o_g2t.php(42):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpxr2o_g2t.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    list($a, $b) = $interval1;\n    list($c, $d) = $interval2;\n    $start =\
    \ max($a, $c);\n    $end = min($b, $d);\n    if ($start > $end) return \"NO\"\
    ;\n    $intersection_len = $end - $start + 1;\n    if ($intersection_len == 1)\
    \ return \"NO\";\n    for ($i = 2; $i < $intersection_len; $i++) {\n        if\
    \ ($intersection_len % $i == 0) return \"NO\";\n    }\n    return \"YES\";\n}\n\
    \nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj1o0gynw.php:38\n\
    Stack trace:\n#0 /tmp/tmpj1o0gynw.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpj1o0gynw.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $isIntersect = false;\n  $intersection = [];\n  $isIntersect =  (($interval1[0]\
    \ < $interval2[0] && $interval1[1] > $interval2[0])\n                    || ($interval1[0]\
    \ >= $interval2[0] && $interval1[0] <= $interval2[1]));\n  if($isIntersect) {\n\
    \    $intersection[0] = ($interval1[0] >= $interval2[0]) ? $interval1[0] : $interval2[0];\n\
    \    $intersection[1] = ($interval1[1] <= $interval2[1]) ? $interval1[1] : $interval2[1];\n\
    \    $intersectionLength = $intersection[1] - $intersection[0];\n    if($intersectionLength\
    \ > 1) {\n      for($i = 2; $i < $intersectionLength; $i++) {\n        if($intersectionLength\
    \ % $i == 0) {\n          return \"NO\";\n        }\n      }\n    }\n    return\
    \ \"YES\";\n  }\n  return \"NO\";\n}\n\necho intersection([1, 2], [2, 3]) . \"\
    \\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3,\
    \ -1], [-5, 5]) . \"\\n\";\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "NO\nYES\nYES\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx3972lo0.php:49\n\
    Stack trace:\n#0 /tmp/tmpx3972lo0.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpx3972lo0.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $int1 = $interval1[1] - $interval1[0];\n    $int2 = $interval2[1] - $interval2[0];\n\
    \    $intersect = ($int1 < $int2) ? $int1 : $int2;\n    return (isPrime($intersect))\
    \ ? \"YES\" : \"NO\";\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmphrtbw7zw.php:22\nStack trace:\n#0 /tmp/tmphrtbw7zw.php(26): intersection(Array,\
    \ Array)\n#1 /tmp/tmphrtbw7zw.php(30): candidate(Array, Array)\n#2 /tmp/tmphrtbw7zw.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmphrtbw7zw.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \t$start = max($interval1[0], $interval2[0]);\n\t$end = min($interval1[1], $interval2[1]);\n\
    \t$length = $end - $start;\n\t$sqrt = (int) sqrt($length);\n\tfor ($i = 2; $i\
    \ <= $sqrt; $i++) {\n\t\tif ($length % $i == 0) {\n\t\t\treturn \"NO\";\n\t\t\
    }\n\t}\n\treturn $length > 1 ? \"YES\" : \"NO\";\n}\necho intersection([1, 2],\
    \ [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3,\
    \ -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "NO\nNO\nYES\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $len = count($interval1);\n  if ($len != count($interval2)) {\n    return \"\
    NO\";\n  }\n  $ret = [];\n  for ($i = 0; $i < $len; $i++) {\n    $ret[] = max($interval1[$i],\
    \ $interval2[$i]);\n  }\n  if ($ret[0] > $ret[1]) {\n    return \"NO\";\n  }\n\
    \  if ($ret[0] == $ret[1]) {\n    return isPrime($ret[0]) ? \"YES\" : \"NO\";\n\
    \  }\n  $sum = 0;\n  for ($i = $ret[0]; $i <= $ret[1]; $i++) {\n    $sum += $i;\n\
    \  }\n  return isPrime($sum) ? \"YES\" : \"NO\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmp290w69dz.php:37\nStack trace:\n#0 /tmp/tmp290w69dz.php(41): intersection(Array,\
    \ Array)\n#1 /tmp/tmp290w69dz.php(45): candidate(Array, Array)\n#2 /tmp/tmp290w69dz.php(55):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp290w69dz.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  // your code here\n}\n\nvar_dump(intersection([1, 2], [2, 3]));\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NULL\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpigwu9qx6.php:28\n\
    Stack trace:\n#0 /tmp/tmpigwu9qx6.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpigwu9qx6.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = [min($interval1), max($interval1)];\n    $interval2 = [min($interval2),\
    \ max($interval2)];\n    $length = null;\n    if($interval1[0] <= $interval2[0]\
    \ && $interval1[1] >= $interval2[0]) {\n        $length = min($interval1[1], $interval2[1])\
    \ - $interval2[0];\n    } else if($interval2[0] <= $interval1[0] && $interval2[1]\
    \ >= $interval1[0]) {\n        $length = min($interval1[1], $interval2[1]) - $interval1[0];\n\
    \    } else {\n        return \"NO\";\n    }\n    if($length === 1) {\n      \
    \  return \"NO\";\n    }\n    for($i = 2; $i <= sqrt($length); $i++) {\n     \
    \   if($length % $i === 0) {\n            return \"NO\";\n        }\n    }\n \
    \   return \"YES\";\n}\n$interval1 = [1, 2];\n$interval2 = [2, 3];\nprint_r(intersection($interval1,\
    \ $interval2));\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "YES\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv971qrra.php:47\n\
    Stack trace:\n#0 /tmp/tmpv971qrra.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpv971qrra.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $left = max($interval1[0], $interval2[0]);\n  $right = min($interval1[1], $interval2[1]);\n\
    \  if ($left > $right) {\n    return \"NO\";\n  }\n  $length = $right - $left\
    \ + 1;\n  $prime = true;\n  for ($i = 2; $i < $length; $i++) {\n    if ($length\
    \ % $i == 0) {\n      $prime = false;\n      break;\n    }\n  }\n  return $prime\
    \ ? \"YES\" : \"NO\";\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpryl56v_q.php:39\n\
    Stack trace:\n#0 /tmp/tmpryl56v_q.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpryl56v_q.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $length1 = $interval1[1] - $interval1[0];\n    $length2 = $interval2[1] -\
    \ $interval2[0];\n    $min = max($interval1[0], $interval2[0]);\n    $max = min($interval1[1],\
    \ $interval2[1]);\n    $intersection = array($min, $max);\n    $length = $intersection[1]\
    \ - $intersection[0];\n    if (is_prime($length)) {\n        return \"YES\";\n\
    \    } else {\n        return \"NO\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp52jijs8j.php:25\nStack trace:\n#0 /tmp/tmp52jijs8j.php(32): intersection(Array,\
    \ Array)\n#1 /tmp/tmp52jijs8j.php(36): candidate(Array, Array)\n#2 /tmp/tmp52jijs8j.php(46):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp52jijs8j.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $len = $end - $start + 1;\n    if ($len < 2) {\n        return \"NO\";\n \
    \   }\n    if ($len === 2) {\n        return \"YES\";\n    }\n    for ($i = 2;\
    \ $i <= sqrt($len); $i++) {\n        if ($len % $i === 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n$interval1 = array(-1, 1);\n\
    $interval2 = array(0, 4);\necho intersection($interval1, $interval2);\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "YES\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphbs8aj6k.php:47\n\
    Stack trace:\n#0 /tmp/tmphbs8aj6k.php(56): test()\n#1 {main}\n  thrown in /tmp/tmphbs8aj6k.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    if ($interval1[0] > $interval2[1] || $interval2[0] > $interval1[1]) {\n \
    \       return \"NO\";\n    }\n    $intersected = [\n        max($interval1[0],\
    \ $interval2[0]),\n        min($interval1[1], $interval2[1])\n    ];\n    $intersectedLength\
    \ = $intersected[1] - $intersected[0] + 1;\n    $sqrt = floor(sqrt($intersectedLength));\n\
    \    return isPrime($intersectedLength) ? \"YES\" : \"NO\";\n}\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpw_s_5f3f.php:28\nStack trace:\n#0 /tmp/tmpw_s_5f3f.php(31): intersection(Array,\
    \ Array)\n#1 /tmp/tmpw_s_5f3f.php(35): candidate(Array, Array)\n#2 /tmp/tmpw_s_5f3f.php(45):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpw_s_5f3f.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \t$start = max($interval1[0], $interval2[0]);\n\t$end = min($interval1[1], $interval2[1]);\n\
    \tif ($start > $end) {\n\t\treturn \"NO\";\n\t}\n\t$primeFlag = isPrime(abs($end\
    \ - $start));\n\treturn $primeFlag ? \"YES\" : \"NO\";\n}\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpf0wwlx_x.php:24\nStack trace:\n#0 /tmp/tmpf0wwlx_x.php(28): intersection(Array,\
    \ Array)\n#1 /tmp/tmpf0wwlx_x.php(32): candidate(Array, Array)\n#2 /tmp/tmpf0wwlx_x.php(42):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpf0wwlx_x.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \t$result = ($interval1[0] < $interval2[0]) ? ($interval2[0] < $interval1[1])\
    \ : ($interval1[0] < $interval2[1]);\n\treturn ($result) ? ((($interval1[1] <=\
    \ $interval2[1]) ? ($interval1[1] - $interval2[0]) : ($interval2[1] - $interval1[0]))\
    \ == 2) ? \"YES\" : \"NO\" : \"NO\";\n}\necho intersection([-5,5], [-3,-1]).\"\
    \\n\";\necho intersection([0,4], [-1,1]).\"\\n\";\necho intersection([1,2], [2,3]).\"\
    \\n\";\nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"\
    NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "NO\nNO\nNO\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuzji7gi3.php:32\n\
    Stack trace:\n#0 /tmp/tmpuzji7gi3.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpuzji7gi3.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $prime = [\"YES\", \"NO\"];\n    $gap = 0;\n    $start1 = $interval1[0];\n\
    \    $end1 = $interval1[1];\n    $start2 = $interval2[0];\n    $end2 = $interval2[1];\n\
    \    //check if intervals are not intersecting\n    if ($start1 >= $end2 || $start2\
    \ >= $end1) {\n        return \"NO\";\n    }\n    //compare absolute values\n\
    \    if (abs($start1) >= abs($start2)) {\n        if (abs($end1) >= abs($end2))\
    \ {\n            $length = abs($end2) - abs($start1);\n        } else {\n    \
    \        $length = abs($end1) - abs($start1);\n        }\n    } else {\n     \
    \   if (abs($end1) >= abs($end2)) {\n            $length = abs($end2) - abs($start2);\n\
    \        } else {\n            $length = abs($end1) - abs($start2);\n        }\n\
    \    }\n    //check if the length is a prime number\n    if ($length <= 1) {\n\
    \        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n     \
    \   if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n \
    \   return \"YES\";\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwe6qv31l.php:61\n\
    Stack trace:\n#0 /tmp/tmpwe6qv31l.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpwe6qv31l.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    // interval1 is (0, 1)\n    // interval2 is (0, 2)\n    // intersection is\
    \ (0, 1)\n    // 1 is not a prime number\n    // if its length is 0, return no.\n\
    \    // if its length is a prime number, return yes.\n    // if length is not\
    \ prime, return no.\n    // if two intervals do not intersect, return no.\n  \
    \  // otherwise, return yes.\n    // [-100, 100]\n    // [-100, 100]\n    // [-100,\
    \ 100]\n    // [50, 75]\n    // [100, 200]\n    // [50, 75]\n    // [25, 100]\n\
    \    // [10, 50]\n    // [10, 50]\n    // [5, 20]\n    // [5, 20]\n    // [5,\
    \ 6]\n    // [5, 6]\n    // [5, 6]\n    // [5, 6]\n    // [5, 6]\n    // [5, 6]\n\
    \    // [5, 6]\n    // [5, 6]\n    // [5, 6]\n    // [5, 6]\n    // [5, 6]\n \
    \   // [5, 6]\n    // [5, 6]\n    // [5, 6]\n    // [5, 6]\n    // [5, 6]\n  \
    \  // [5, 6]\n    // [5, 6]\n    // [5, 6]\n    // [5, 6]\n    // [5, 6]\n   \
    \ // [5, 6]\n    // [5, 6]\n    // [5, 6]\n    // [5, 6]\n    // [5, 6]\n    //\
    \ [5, 6]\n    // [5, 6]\n    // [5, 6]\n    // [5, 6]\n    // [5, 6]\n    // [5,\
    \ 6]\n    // [5, 6]\n    // [5, 6]\n    // [5, 6]\n    // [5, 6]\n    // [5, 6]\n\
    \    // [5, 6]\n    // [5, 6]\n    // [5, 6]\n    // [\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3aaf4yc2.php on line 95\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $length = intersectionLength($interval1, $interval2);\n  if ($length === 0)\
    \ return \"NO\";\n  return (isPrime($length)) ? \"YES\" : \"NO\";\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function intersectionLength()\
    \ in /tmp/tmpi3lko1zo.php:19\nStack trace:\n#0 /tmp/tmpi3lko1zo.php(25): intersection(Array,\
    \ Array)\n#1 /tmp/tmpi3lko1zo.php(29): candidate(Array, Array)\n#2 /tmp/tmpi3lko1zo.php(39):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpi3lko1zo.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $x = max($interval1[0], $interval2[0]);\n  $y = min($interval1[1], $interval2[1]);\n\
    \  $l = $y - $x;\n  return isPrime($l) ? \"YES\" : \"NO\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmp9pwesp5k.php:22\nStack trace:\n#0 /tmp/tmp9pwesp5k.php(26): intersection(Array,\
    \ Array)\n#1 /tmp/tmp9pwesp5k.php(30): candidate(Array, Array)\n#2 /tmp/tmp9pwesp5k.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp9pwesp5k.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $res = [];\n    $intersection_length = 0;\n    $intersection_length = max($interval1[0],\
    \ $interval2[0]) - min($interval1[1], $interval2[1]);\n    return (is_prime($intersection_length))\
    \ ? \"YES\" : \"NO\";\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp645avqsb.php:22\nStack trace:\n#0 /tmp/tmp645avqsb.php(26): intersection(Array,\
    \ Array)\n#1 /tmp/tmp645avqsb.php(30): candidate(Array, Array)\n#2 /tmp/tmp645avqsb.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp645avqsb.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $arr1 = range($interval1[0], $interval1[1]);\n  $arr2 = range($interval2[0],\
    \ $interval2[1]);\n  $intersect = array_intersect($arr1, $arr2);\n  $length =\
    \ count($intersect);\n  if($length == 0){\n    return \"NO\";\n  }\n  if($length\
    \ == 1 || $length == 2){\n    return \"NO\";\n  }\n  $prime = true;\n  for($i\
    \ = 2; $i <= $length / 2; $i++){\n    if($length % $i == 0){\n      $prime = false;\n\
    \      break;\n    }\n  }\n  if($prime == true){\n    return \"YES\";\n  }\n \
    \ return \"NO\";\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $val1=$interval1[0];\n    $val2=$interval1[1];\n    $val3=$interval2[0];\n\
    \    $val4=$interval2[1];\n    if($val1<=$val3 && $val3<=$val2) {\n        if($val1<=$val4\
    \ && $val4<=$val2) {\n            $result = $val4-$val3;\n        } else {\n \
    \           $result = $val2-$val3;\n        }\n    } elseif($val3<=$val1 && $val1<=$val4)\
    \ {\n        if($val3<=$val2 && $val2<=$val4) {\n            $result = $val2-$val1;\n\
    \        } else {\n            $result = $val4-$val1;\n        }\n    } else {\n\
    \        $result = \"NO\";\n    }\n    for($i=2;$i<=$result;$i++) {\n        if($result%$i==0)\
    \ {\n            $result = \"NO\";\n            break;\n        }\n    }\n   \
    \ return $result;\n}\necho intersection([1, 2], [2, 3]);\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv3y60gwd.php:52\n\
    Stack trace:\n#0 /tmp/tmpv3y60gwd.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpv3y60gwd.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $primes = array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97);\n    $intersection = array_intersect(range($interval1[0],\
    \ $interval1[1]), range($interval2[0], $interval2[1]));\n    if(empty($intersection))\
    \ {\n        return \"NO\";\n    }\n    $diff = end($intersection) - reset($intersection);\n\
    \    return in_array($diff, $primes) ? \"YES\" : \"NO\";\n}\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $a = max($interval1[0], $interval2[0]);\n    $b = min($interval1[1], $interval2[1]);\n\
    \    $c = $b - $a;\n    if($c < 1) return \"NO\";\n    $i = 2;\n    while ($i\
    \ <= sqrt($c)){\n        if($c % $i == 0) return \"NO\";\n        $i++;\n    }\n\
    \    return \"YES\";\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqkxk5k3s.php:36\n\
    Stack trace:\n#0 /tmp/tmpqkxk5k3s.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpqkxk5k3s.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n\
    \  $dif = $end - $start;\n  if ($dif <= 0) return \"NO\";\n  $prime = true;\n\
    \  for ($i = 2; $i <= ceil($dif / 2); $i++) {\n    if ($dif % $i == 0) {\n   \
    \   $prime = false;\n      break;\n    }\n  }\n  return $prime ? \"YES\" : \"\
    NO\";\n}\necho intersection([1,2], [2,3]) . \" ==> NO\\n\";\necho intersection([-1,1],\
    \ [0,4]) . \" ==> NO\\n\";\necho intersection([-3,-1], [-5,5]) . \" ==> YES\\\
    n\";\necho intersection([-3,-1], [-5,4]) . \" ==> NO\\n\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO ==> NO\nYES ==> NO\nYES ==> YES\nYES ==> NO\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpei1tg8b5.php:42\nStack trace:\n#0 /tmp/tmpei1tg8b5.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpei1tg8b5.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    list($interval1Start, $interval1End) = $interval1;\n    list($interval2Start,\
    \ $interval2End) = $interval2;\n    $length = min($interval1End, $interval2End)\
    \ - max($interval1Start, $interval2Start);\n    if ($length < 0) return \"NO\"\
    ;\n    if ($length < 2) return \"NO\";\n    if ($length == 2) return \"YES\";\n\
    \    if ($length % 2 == 0) return \"NO\";\n    for ($i = 3; $i <= sqrt($length);\
    \ $i += 2) {\n        if ($length % $i == 0) return \"NO\";\n    }\n    return\
    \ \"YES\";\n}\necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1,\
    \ 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\necho\
    \ intersection([2, 3], [1, 4]) . \"\\n\";\necho intersection([1, 3], [2, 4]) .\
    \ \"\\n\";\necho intersection([-3, 2], [-1, 4]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nNO\nYES\nNO\nNO\nYES\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n\
    \  $length = $end - $start;\n  if ($length <= 0) return \"NO\";\n  $sqrt_length\
    \ = sqrt($length);\n  for ($i = 2; $i <= $sqrt_length; $i++) {\n    if ($length\
    \ % $i == 0) return \"NO\";\n  }\n  return \"YES\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5rgmy9x9.php:36\n\
    Stack trace:\n#0 /tmp/tmp5rgmy9x9.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp5rgmy9x9.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    if($interval1[0] > $interval2[1] || $interval2[0] > $interval1[1]) {\n  \
    \      return \"NO\";\n    } else {\n        $intersection = [max($interval1[0],\
    \ $interval2[0]), min($interval1[1], $interval2[1])];\n        $primes = [2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97];\n        if(!in_array($intersection[1] - $intersection[0] + 1,\
    \ $primes)) {\n            return \"NO\";\n        } else {\n            return\
    \ \"YES\";\n        }\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3g6rbbn1.php:38\n\
    Stack trace:\n#0 /tmp/tmp3g6rbbn1.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp3g6rbbn1.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    if($interval1[0] >= $interval2[1] || $interval2[0] >= $interval1[1]) {\n\
    \        return \"NO\";\n    }\n    $intersection = [max($interval1[0], $interval2[0]),\
    \ min($interval1[1], $interval2[1])];\n    $length = $intersection[1] - $intersection[0];\n\
    \    return isPrime($length) ? \"YES\" : \"NO\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpkps7dtxc.php:24\nStack trace:\n#0 /tmp/tmpkps7dtxc.php(28): intersection(Array,\
    \ Array)\n#1 /tmp/tmpkps7dtxc.php(33): candidate(Array, Array)\n#2 /tmp/tmpkps7dtxc.php(42):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpkps7dtxc.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \t$low = max($interval1[0], $interval2[0]);\n\t$high = min($interval1[1], $interval2[1]);\n\
    \tif ($low > $high) {\n\t\treturn \"NO\";\n\t}\n\t$count = $high - $low + 1;\n\
    \tfor ($i = 2; $i <= sqrt($count); $i++) {\n\t\tif ($count % $i == 0) {\n\t\t\t\
    return \"NO\";\n\t\t}\n\t}\n\treturn \"YES\";\n}\necho intersection([1, 2], [2,\
    \ 3]);\necho \"\\n\";\necho intersection([-1, 1], [0, 4]);\necho \"\\n\";\necho\
    \ intersection([-3, -1], [-5, 5]);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "YES\nYES\nYES\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_flrddz7.php:43\n\
    Stack trace:\n#0 /tmp/tmp_flrddz7.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp_flrddz7.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    if ($interval1[0] > $interval2[1] || $interval2[0] > $interval1[1]) {\n \
    \       return \"NO\";\n    }\n    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    $length = $end - $start +\
    \ 1;\n    return isPrime($length) ? \"YES\" : \"NO\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmp3saep5ks.php:25\nStack trace:\n#0 /tmp/tmp3saep5ks.php(29): intersection(Array,\
    \ Array)\n#1 /tmp/tmp3saep5ks.php(33): candidate(Array, Array)\n#2 /tmp/tmp3saep5ks.php(43):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp3saep5ks.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = $interval1[0] > $interval2[0] ? $interval1[0] : $interval2[0];\n\
    \    $end = $interval1[1] < $interval2[1] ? $interval1[1] : $interval2[1];\n \
    \   $length = $end - $start;\n    if($length < 0) {\n        return \"NO\";\n\
    \    }\n    $is_prime = true;\n    for($i = 2; $i < $length; $i++) {\n       \
    \ if($length % $i == 0) {\n            $is_prime = false;\n            break;\n\
    \        }\n    }\n    return $is_prime ? \"YES\" : \"NO\";\n}\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdagp2t7m.php:39\n\
    Stack trace:\n#0 /tmp/tmpdagp2t7m.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpdagp2t7m.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  // your code goes here\n  $l1 = $interval1[1] - $interval1[0];\n  $l2 = $interval2[1]\
    \ - $interval2[0];\n  $longest = max($l1, $l2);\n  $shortest = min($l1, $l2);\n\
    \  $possible = range($shortest + 1, $longest - 1);\n  $intersection = array_intersect($possible,\
    \ primeNumbers());\n  if (empty($intersection)) {\n    return \"NO\";\n  }\n \
    \ foreach ($intersection as $value) {\n    if ($value > $shortest && $value <\
    \ $longest) {\n      return \"YES\";\n    }\n  }\n  return \"NO\";\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function primeNumbers()\
    \ in /tmp/tmpoyxe93lo.php:25\nStack trace:\n#0 /tmp/tmpoyxe93lo.php(38): intersection(Array,\
    \ Array)\n#1 /tmp/tmpoyxe93lo.php(42): candidate(Array, Array)\n#2 /tmp/tmpoyxe93lo.php(52):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpoyxe93lo.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    list($start1, $end1) = $interval1;\n    list($start2, $end2) = $interval2;\n\
    \    if ($start1 > $end1 || $start2 > $end2) return \"NO\";\n    $start = max($start1,\
    \ $start2);\n    $end = min($end1, $end2);\n    if ($start > $end) return \"NO\"\
    ;\n    return isPrime($end - $start + 1) ? \"YES\" : \"NO\";\n}\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpzq8iac3i.php:25\nStack trace:\n#0 /tmp/tmpzq8iac3i.php(28): intersection(Array,\
    \ Array)\n#1 /tmp/tmpzq8iac3i.php(32): candidate(Array, Array)\n#2 /tmp/tmpzq8iac3i.php(42):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpzq8iac3i.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intervals = [$interval1, $interval2];\n    sort($intervals);\n    list($start,\
    \ $end) = array_pop($intervals);\n    list($start2, $end2) = array_pop($intervals);\n\
    \    if ($start2 <= $start && $end <= $end2) {\n        $intersection_length =\
    \ $end - $start;\n    } else if ($start2 >= $start && $end >= $end2) {\n     \
    \   $intersection_length = $end2 - $start2;\n    } else if ($start2 <= $start\
    \ && $end2 >= $end) {\n        $intersection_length = $end - $start;\n    } else\
    \ if ($start2 >= $start && $end2 <= $end) {\n        $intersection_length = $end2\
    \ - $start2;\n    } else {\n        return \"NO\";\n    }\n    if (is_prime($intersection_length))\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\
    \nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpds32i4q1.php:34\nStack trace:\n#0 /tmp/tmpds32i4q1.php(42): intersection(Array,\
    \ Array)\n#1 /tmp/tmpds32i4q1.php(48): candidate(Array, Array)\n#2 /tmp/tmpds32i4q1.php(56):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpds32i4q1.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection1 = max($interval1[0], $interval2[0]);\n    $intersection2 =\
    \ min($interval1[1], $interval2[1]);\n    if ($intersection1 > $intersection2)\
    \ {\n        return \"NO\";\n    } else {\n        $arr = range($intersection1,\
    \ $intersection2);\n        return isPrime(count($arr)) ? \"YES\" : \"NO\";\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmp4gl54c9i.php:25\nStack trace:\n#0 /tmp/tmp4gl54c9i.php(30): intersection(Array,\
    \ Array)\n#1 /tmp/tmp4gl54c9i.php(34): candidate(Array, Array)\n#2 /tmp/tmp4gl54c9i.php(44):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp4gl54c9i.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $arr = [];\n    $range1 = range($interval1[0], $interval1[1]);\n    $range2\
    \ = range($interval2[0], $interval2[1]);\n    foreach ($range1 as $key => $value)\
    \ {\n        if (in_array($value, $range2)) {\n            $arr[] = $value;\n\
    \        }\n    }\n    if (count($arr) == 0) {\n        return \"NO\";\n    }\n\
    \    if (count($arr) == 1) {\n        return \"NO\";\n    }\n    if (count($arr)\
    \ == 2) {\n        return \"YES\";\n    }\n    if (count($arr) > 2) {\n      \
    \  return \"NO\";\n    }\n}\n\nprint_r(intersection([1, 2], [2, 3]));\nprint_r(intersection([-1,\
    \ 1], [0, 4]));\nprint_r(intersection([-3, -1], [-5, 5]));\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NOYESNO\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph644l624.php:50\n\
    Stack trace:\n#0 /tmp/tmph644l624.php(59): test()\n#1 {main}\n  thrown in /tmp/tmph644l624.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    if ($interval1[0] >= $interval2[1] || $interval2[0] >= $interval1[1]) {\n\
    \        return \"NO\";\n    }\n\n    $length = getLength($interval1, $interval2);\n\
    \    if (isPrime($length)) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function getLength() in\
    \ /tmp/tmp6g_p7ojp.php:23\nStack trace:\n#0 /tmp/tmp6g_p7ojp.php(32): intersection(Array,\
    \ Array)\n#1 /tmp/tmp6g_p7ojp.php(37): candidate(Array, Array)\n#2 /tmp/tmp6g_p7ojp.php(46):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp6g_p7ojp.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \t$interval1 = $interval1[0] < $interval1[1] ? $interval1 : [$interval1[1], $interval1[0]];\n\
    \t$interval2 = $interval2[0] < $interval2[1] ? $interval2 : [$interval2[1], $interval2[0]];\n\
    \t$start = max($interval1[0], $interval2[0]);\n\t$end = min($interval1[1], $interval2[1]);\n\
    \t$prime = function($n) {\n\t\tif ($n <= 1) return false;\n\t\tfor ($i = 2; $i\
    \ <= sqrt($n); $i++) {\n\t\t\tif ($n % $i == 0) return false;\n\t\t}\n\t\treturn\
    \ true;\n\t};\n\treturn ($end - $start > 0) ? ($prime($end - $start) ? \"YES\"\
    \ : \"NO\") : \"NO\";\n}\n\necho intersection([1, 2], [2, 3]);\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: NO
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    if(abs($interval1[0] - $interval2[0]) <= 1 && abs($interval1[1] - $interval2[1])\
    \ <= 1) {\n        return isPrime(abs($interval1[0] - $interval2[0]));\n    }\
    \ else {\n        return \"NO\";\n    }\n}\nfunction candidate(...$args) {\n \
    \   return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpzni__wna.php:20\nStack trace:\n#0 /tmp/tmpzni__wna.php(26): intersection(Array,\
    \ Array)\n#1 /tmp/tmpzni__wna.php(30): candidate(Array, Array)\n#2 /tmp/tmpzni__wna.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpzni__wna.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    list($int1Start, $int1End) = $interval1;\n    list($int2Start, $int2End)\
    \ = $interval2;\n    if($int1Start > $int1End || $int2Start > $int2End){\n   \
    \     return \"NO\";\n    }\n    if($int1Start <= $int2Start && $int2Start <=\
    \ $int1End){\n        if($int1End <= $int2End){\n            $intersection = array($int2Start,\
    \ $int1End);\n        } else{\n            $intersection = array($int2Start, $int2End);\n\
    \        }\n    } elseif($int2Start <= $int1Start && $int1Start <= $int2End){\n\
    \        if($int2End <= $int1End){\n            $intersection = array($int1Start,\
    \ $int2End);\n        } else{\n            $intersection = array($int1Start, $int1End);\n\
    \        }\n    } else{\n        return \"NO\";\n    }\n    $intersectLength =\
    \ $intersection[1] - $intersection[0] + 1;\n    if($intersectLength == 1){\n \
    \       return \"NO\";\n    }\n    for($i = 2; $i < $intersectLength; $i++){\n\
    \        if($intersectLength % $i == 0){\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";\n}\nfunction candidate(...$args) {\n    return\
    \ intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsqlvfa7b.php:56\n\
    Stack trace:\n#0 /tmp/tmpsqlvfa7b.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpsqlvfa7b.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start <= $end) {\n        if (isPrime($end - $start\
    \ + 1)) {\n            return \"YES\";\n        }\n    }\n    return \"NO\";\n\
    }\nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmprfcc5e29.php:22\nStack trace:\n#0 /tmp/tmprfcc5e29.php(29): intersection(Array,\
    \ Array)\n#1 /tmp/tmprfcc5e29.php(33): candidate(Array, Array)\n#2 /tmp/tmprfcc5e29.php(43):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmprfcc5e29.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    if(max($interval1[0], $interval2[0]) < min($interval1[1], $interval2[1]))\
    \ {\n        return isPrime(abs(min($interval1[1], $interval2[1]) - max($interval1[0],\
    \ $interval2[0]))) ? \"YES\" : \"NO\";\n    }\n    return \"NO\";\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmppp0t8vdg.php:20\nStack trace:\n#0 /tmp/tmppp0t8vdg.php(26): intersection(Array,\
    \ Array)\n#1 /tmp/tmppp0t8vdg.php(31): candidate(Array, Array)\n#2 /tmp/tmppp0t8vdg.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmppp0t8vdg.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n\
    \  $length = $end - $start;\n  return isPrime($length) ? \"YES\" : \"NO\";\n}\n\
    \nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpjpfo3ggi.php:22\nStack trace:\n#0 /tmp/tmpjpfo3ggi.php(26): intersection(Array,\
    \ Array)\n#1 /tmp/tmpjpfo3ggi.php(30): candidate(Array, Array)\n#2 /tmp/tmpjpfo3ggi.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpjpfo3ggi.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $length = min($interval1[1], $interval2[1]) - max($interval1[0], $interval2[0]);\n\
    \    $length = ($length > 0) ? $length : 0;\n    return (isPrime($length)) ? \"\
    YES\" : \"NO\";\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpb8x3gx_6.php:21\nStack trace:\n#0 /tmp/tmpb8x3gx_6.php(24): intersection(Array,\
    \ Array)\n#1 /tmp/tmpb8x3gx_6.php(28): candidate(Array, Array)\n#2 /tmp/tmpb8x3gx_6.php(38):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpb8x3gx_6.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n\
    \  $intersection = $end - $start;\n  if($intersection <= 0) {\n    return \"NO\"\
    ;\n  }\n  for($i = 2; $i <= $intersection; $i++) {\n    if($intersection % $i\
    \ == 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}\necho \"intersection((1,\
    \ 2), (2, 3)) ==> \".intersection([1, 2], [2, 3]).\"\\n\";\necho \"intersection((-1,\
    \ 1), (0, 4)) ==> \".intersection([-1, 1], [0, 4]).\"\\n\";\necho \"intersection((-3,\
    \ -1), (-5, 5)) ==> \".intersection([-3, -1], [-5, 5]).\"\\n\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "intersection((1, 2), (2, 3)) ==> NO\nintersection((-1, 1), (0, 4)) ==>\
    \ YES\nintersection((-3, -1), (-5, 5)) ==> NO\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpf39ejiod.php:41\nStack trace:\n#0 /tmp/tmpf39ejiod.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpf39ejiod.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    $length = $end - $start;\n    $length <= 0 ? $result =\
    \ \"NO\" : $result = \"YES\";\n    for ($i = 2; $i < $length; $i++) {\n      \
    \  if ($length % $i == 0) {\n            $result = \"NO\";\n            break;\n\
    \        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyqg6_jv6.php:37\n\
    Stack trace:\n#0 /tmp/tmpyqg6_jv6.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpyqg6_jv6.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $range1 = range($interval1[0], $interval1[1]);\n    $range2 = range($interval2[0],\
    \ $interval2[1]);\n    $intersect = array_intersect($range1, $range2);\n    if\
    \ (empty($intersect)) {\n        return \"NO\";\n    }\n    if (isPrime(count($intersect)))\
    \ {\n        return \"YES\";\n    }\n    return \"NO\";\n}\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpamd5llg0.php:25\nStack trace:\n#0 /tmp/tmpamd5llg0.php(31): intersection(Array,\
    \ Array)\n#1 /tmp/tmpamd5llg0.php(35): candidate(Array, Array)\n#2 /tmp/tmpamd5llg0.php(45):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpamd5llg0.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    $intersection_length = $end - $start + 1;\n    if ($intersection_length\
    \ < 1) {\n        return \"NO\";\n    }\n    if (is_prime($intersection_length))\
    \ {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpsfrl1wzt.php:25\nStack trace:\n#0 /tmp/tmpsfrl1wzt.php(32): intersection(Array,\
    \ Array)\n#1 /tmp/tmpsfrl1wzt.php(36): candidate(Array, Array)\n#2 /tmp/tmpsfrl1wzt.php(46):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpsfrl1wzt.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  // I love you, PHP!\n  $intersection = array_intersect(range($interval1[0],\
    \ $interval1[1]), range($interval2[0], $interval2[1]));\n  $count = count($intersection);\n\
    \  if ($count <= 1) {\n    return \"NO\";\n  }\n  for ($i = 2; $i < $count; $i++)\
    \ {\n    if ($count % $i == 0) {\n      return \"NO\";\n    }\n  }\n  return \"\
    YES\";\n}\necho \"intersection((1, 2), (2, 3)) ==> \" . intersection([1, 2], [2,\
    \ 3]) . \"<br>\";\necho \"intersection((-1, 1), (0, 4)) ==> \" . intersection([-1,\
    \ 1], [0, 4]) . \"<br>\";\necho \"intersection((-3, -1), (-5, 5)) ==> \" . intersection([-3,\
    \ -1], [-5, 5]) . \"<br>\";\necho \"intersection((4, 8), (9, 10)) ==> \" . intersection([4,\
    \ 8], [9, 10]) . \"<br>\";\necho \"intersection((-10, -8), (-6, -3)) ==> \" .\
    \ intersection([-10, -8], [-6, -3]) . \"<br>\";\necho \"intersection((-4, -3),\
    \ (-5, -2)) ==> \" . intersection([-4, -3], [-5, -2]) . \"<br>\";\necho \"intersection((-6,\
    \ 0), (5, 7)) ==> \" . intersection([-6, 0], [5, 7]) . \"<br>\";\necho \"intersection((-7,\
    \ -5), (-6, 2)) ==> \" . intersection([-7, -5], [-6, 2]) . \"<br>\";\necho \"\
    intersection((1, 3), (2, 4)) ==> \" . intersection([1, 3], [2, 4]) . \"<br>\"\
    ;\necho \"intersection((-6, -5), (-7, 0)) ==> \" . intersection([-6, -5], [-7,\
    \ 0]) . \"<br>\";\necho \"intersection\nfunction candidate(...$args) {\n    return\
    \ intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpl8bs4lv6.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = array();\n    foreach($interval1 as $key => $value) {\n \
    \       foreach($interval2 as $key2 => $value2) {\n            if($value == $value2)\
    \ {\n                $intersection[] = $value;\n            }\n        }\n   \
    \ }\n    $length = count($intersection);\n    if($length == 0) {\n        return\
    \ \"NO\";\n    }\n    $prime = true;\n    for($i = 2; $i < $length; $i++) {\n\
    \        if($length % $i == 0) {\n            $prime = false;\n        }\n   \
    \ }\n    if($prime) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n\
    echo intersection([1,2], [2,3]) . \"<br>\";\necho intersection([-1,1], [0,4])\
    \ . \"<br>\";\necho intersection([-3,-1], [-5,5]) . \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "YES<br>NO<br>NO<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd982ol6s.php:50\n\
    Stack trace:\n#0 /tmp/tmpd982ol6s.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpd982ol6s.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $intervalInter = array_intersect($interval1, $interval2);\n  if (!$intervalInter)\
    \ {\n    return \"NO\";\n  }\n  $num = abs($intervalInter[0] - $intervalInter[1]);\n\
    \  return (isPrime($num)) ? \"YES\" : \"NO\";\n}\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpk8ou9z4v.php:24\nStack trace:\n#0 /tmp/tmpk8ou9z4v.php(27): intersection(Array,\
    \ Array)\n#1 /tmp/tmpk8ou9z4v.php(31): candidate(Array, Array)\n#2 /tmp/tmpk8ou9z4v.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpk8ou9z4v.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    //$interval1 & $interval2 format: (1, 2)\n    //create an array [1, 2] from\
    \ interval\n    $start1 = explode(',', $interval1);\n    $start2 = explode(',',\
    \ $interval2);\n    // echo \"Start1: \" . $start1[0] . \"<br>\";\n    // echo\
    \ \"Start2: \" . $start2[0] . \"<br>\";\n    // echo \"End1: \" . $start1[1] .\
    \ \"<br>\";\n    // echo \"End2: \" . $start2[1] . \"<br>\";\n    //conditional\n\
    \    if (($start1[0] >= $start2[0] && $start1[0] <= $start2[1]) || ($start2[0]\
    \ >= $start1[0] && $start2[0] <= $start1[1])) {\n        $intersect = [$start1[0],\
    \ $start2[1]];\n        return $intersect;\n    }\n    else {\n        return\
    \ false;\n    }\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: explode() expects parameter 2 to be string, array given in /tmp/tmp_vpcjy0g.php\
    \ on line 21\n\nWarning: explode() expects parameter 2 to be string, array given\
    \ in /tmp/tmp_vpcjy0g.php on line 22\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp_vpcjy0g.php:42\nStack trace:\n#0 /tmp/tmp_vpcjy0g.php(52):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_vpcjy0g.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \t$intervals = [$interval1, $interval2];\n\tusort($intervals, function($a, $b)\
    \ {\n\t\treturn $a[0] - $b[0];\n\t});\n\tif ($intervals[0][1] < $intervals[1][0])\
    \ {\n\t\treturn \"NO\";\n\t}\n\t$interval = [max($intervals[0][0], $intervals[1][0]),\
    \ min($intervals[0][1], $intervals[1][1])];\n\t$length = $interval[1] - $interval[0]\
    \ + 1;\n\tif ($length < 2) {\n\t\treturn \"NO\";\n\t}\n\tfor ($i = 2; $i < $length;\
    \ $i++) {\n\t\tif ($length % $i == 0) {\n\t\t\treturn \"NO\";\n\t\t}\n\t}\n\t\
    return \"YES\";\n}\n\nvar_dump(intersection([1, 2], [2, 3]));\nvar_dump(intersection([-1,\
    \ 1], [0, 4]));\nvar_dump(intersection([-3, -1], [-5, 5]));\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "string(2) \"NO\"\nstring(3) \"YES\"\nstring(3) \"YES\"\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpldpi3iru.php:48\nStack trace:\n\
    #0 /tmp/tmpldpi3iru.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpldpi3iru.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $l1 = range($interval1[0], $interval1[1]);\n    $l2 = range($interval2[0],\
    \ $interval2[1]);\n    $l = array_intersect($l1, $l2);\n    return is_prime(count($l))\
    \ ? \"YES\" : \"NO\";\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpzd11iu7k.php:22\nStack trace:\n#0 /tmp/tmpzd11iu7k.php(25): intersection(Array,\
    \ Array)\n#1 /tmp/tmpzd11iu7k.php(29): candidate(Array, Array)\n#2 /tmp/tmpzd11iu7k.php(39):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpzd11iu7k.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $x1 = max($interval1[0], $interval2[0]);\n    $x2 = min($interval1[1], $interval2[1]);\n\
    \    if($x1 > $x2) {\n        return \"NO\";\n    }\n    $length = $x2 - $x1 +\
    \ 1;\n    return isPrime($length) ? \"YES\" : \"NO\";\n}\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmptcbxklbb.php:25\nStack trace:\n#0 /tmp/tmptcbxklbb.php(28): intersection(Array,\
    \ Array)\n#1 /tmp/tmptcbxklbb.php(32): candidate(Array, Array)\n#2 /tmp/tmptcbxklbb.php(42):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptcbxklbb.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \t$start1 = $interval1[0];\n\t$end1 = $interval1[1];\n\t$start2 = $interval2[0];\n\
    \t$end2 = $interval2[1];\n\t\n\t$intersection_start = $start1 > $start2 ? $start1\
    \ : $start2;\n\t$intersection_end = $end1 < $end2 ? $end1 : $end2;\n\t$intersection_length\
    \ = $intersection_end - $intersection_start;\n\t\n\treturn is_prime($intersection_length)\
    \ ? \"YES\" : \"NO\";\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpzq04utxr.php:28\nStack trace:\n#0 /tmp/tmpzq04utxr.php(32): intersection(Array,\
    \ Array)\n#1 /tmp/tmpzq04utxr.php(36): candidate(Array, Array)\n#2 /tmp/tmpzq04utxr.php(46):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpzq04utxr.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $intersections = array_intersect(range($interval1[0], $interval1[1]), range($interval2[0],\
    \ $interval2[1]));\n  if (empty($intersections)) {\n    return \"NO\";\n  } else\
    \ {\n    return (isPrime(count($intersections))) ? \"YES\" : \"NO\";\n  }\n}\n\
    \nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpdqt4rp90.php:23\nStack trace:\n#0 /tmp/tmpdqt4rp90.php(28): intersection(Array,\
    \ Array)\n#1 /tmp/tmpdqt4rp90.php(32): candidate(Array, Array)\n#2 /tmp/tmpdqt4rp90.php(42):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpdqt4rp90.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval = [];\n    if ($interval1[0] <= $interval2[0]) {\n        $interval\
    \ = array($interval1[0], $interval2[1]);\n    } else {\n        $interval = array($interval2[0],\
    \ $interval1[1]);\n    }\n    $primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    $prime = false;\n\
    \    foreach ($primes as $p) {\n        if (($interval[1] - $interval[0]) ===\
    \ $p) {\n            $prime = true;\n        }\n    }\n    if ($prime === true)\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\
    function candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphk42yh6n.php:43\n\
    Stack trace:\n#0 /tmp/tmphk42yh6n.php(53): test()\n#1 {main}\n  thrown in /tmp/tmphk42yh6n.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $result = array_unique(array_merge($interval1, $interval2));\n  if (count($result)\
    \ === 2) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6va06e13.php:33\n\
    Stack trace:\n#0 /tmp/tmp6va06e13.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp6va06e13.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start1 = $interval1[0];\n    $end1 = $interval1[1];\n    $start2 = $interval2[0];\n\
    \    $end2 = $interval2[1];\n    if ($start1 > $end1 || $start2 > $end2) {\n \
    \       return \"NO\";\n    }\n    $maxStart = max($start1, $start2);\n    $minEnd\
    \ = min($end1, $end2);\n    if ($maxStart > $minEnd) {\n        return \"NO\"\
    ;\n    }\n    $intersectionLength = $minEnd - $maxStart + 1;\n    $primeArr =\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    if (in_array($intersectionLength, $primeArr)) {\n\
    \        return \"YES\";\n    }\n    return \"NO\";\n}\n\necho \"intersection((1,\
    \ 2), (2, 3)) ==> \" . intersection([1, 2], [2, 3]) . \"\\n\";\necho \"intersection((-1,\
    \ 1), (0, 4)) ==> \" . intersection([-1, 1], [0, 4]) . \"\\n\";\necho \"intersection((-3,\
    \ -1), (-5, 5)) ==> \" . intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "intersection((1, 2), (2, 3)) ==> NO\nintersection((-1, 1), (0, 4)) ==>\
    \ YES\nintersection((-3, -1), (-5, 5)) ==> YES\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpwa9pp_6w.php:48\nStack trace:\n#0 /tmp/tmpwa9pp_6w.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpwa9pp_6w.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  // your code here...\n  $arr1 = [$interval1[0], $interval1[1]];\n  $arr2 =\
    \ [$interval2[0], $interval2[1]];\n  sort($arr1);\n  sort($arr2);\n  $arr3 = [];\n\
    \  for ($i=0; $i < $arr1[1]; $i++) { \n  \tfor ($j=0; $j < $arr2[1]; $j++) { \n\
    \  \t\tif ($arr1[0] + $i == $arr2[0] + $j) {\n  \t\t\t$arr3[] = $arr1[0] + $i;\n\
    \  \t\t}\n  \t}\n  }\n  if (count($arr3) == 0) {\n  \treturn \"NO\";\n  }\n  if\
    \ (count($arr3) == 1) {\n  \treturn \"YES\";\n  }\n  for ($i=2; $i < $arr3[1];\
    \ $i++) { \n  \tif ($arr3[1] % $i == 0) {\n  \t\treturn \"NO\";\n  \t}\n  }\n\
    \  return \"YES\";\n}\necho \"<pre> intersection((1, 2), (2, 3))\\r\\n\";\nvar_dump(intersection([1,\
    \ 2], [2, 3]));\necho \"</pre>\";\necho \"<pre> intersection((-1, 1), (0, 4))\\\
    r\\n\";\nvar_dump(intersection([-1, 1], [0, 4]));\necho \"</pre>\";\necho \"<pre>\
    \ intersection((-3, -1), (-5, 5))\\r\\n\";\nvar_dump(intersection([-3, -1], [-5,\
    \ 5]));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre> intersection((1, 2), (2, 3))\nstring(3) \"YES\"\n</pre><pre> intersection((-1,\
    \ 1), (0, 4))\nstring(2) \"NO\"\n</pre><pre> intersection((-3, -1), (-5, 5))\n\
    string(2) \"NO\"\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpne92w1m_.php:59\n\
    Stack trace:\n#0 /tmp/tmpne92w1m_.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpne92w1m_.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1_start = $interval1[0];\n    $interval1_end = $interval1[1];\n\
    \    $interval2_start = $interval2[0];\n    $interval2_end = $interval2[1];\n\
    \    $interval_start = 0;\n    $interval_end = 0;\n    if ($interval1_start >\
    \ $interval2_start) {\n        $interval_start = $interval1_start;\n    } else\
    \ {\n        $interval_start = $interval2_start;\n    }\n    if ($interval1_end\
    \ < $interval2_end) {\n        $interval_end = $interval1_end;\n    } else {\n\
    \        $interval_end = $interval2_end;\n    }\n    if ($interval_start > $interval_end)\
    \ {\n        return \"NO\";\n    }\n    $interval_length = $interval_end - $interval_start\
    \ + 1;\n    if ($interval_length <= 1) {\n        return \"NO\";\n    }\n    if\
    \ ($interval_length % 2 == 0) {\n        return \"NO\";\n    }\n    if ($interval_length\
    \ % 3 == 0) {\n        return \"NO\";\n    }\n    if ($interval_length % 5 ==\
    \ 0) {\n        return \"NO\";\n    }\n    if ($interval_length % 7 == 0) {\n\
    \        return \"NO\";\n    }\n    return \"YES\";\n}\necho intersection([1,\
    \ 2], [2, 3]) . \"<br>\";\necho intersection([-1, 1], [0, 4]) . \"<br>\";\necho\
    \ intersection([-3, -1], [-5, 5]) . \"<br>\";\necho intersection([-1, -2], [-2,\
    \ -3]) . \"<br>\";\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "NO<br>NO<br>NO<br>NO<br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmphond66hv.php:67\nStack trace:\n#0 /tmp/tmphond66hv.php(75): test()\n\
    #1 {main}\n  thrown in /tmp/tmphond66hv.php on line 67\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97];\n  $start1 = $interval1[0];\n  $end1 = $interval1[1];\n\
    \  $start2 = $interval2[0];\n  $end2 = $interval2[1];\n  if ($start1 > $end1 ||\
    \ $start2 > $end2) {\n    return \"NO\";\n  }\n  $start = max($start1, $start2);\n\
    \  $end = min($end1, $end2);\n  if ($start >= $end) {\n    return \"NO\";\n  }\n\
    \  return in_array($end - $start + 1, $primes) ? \"YES\" : \"NO\";\n}\n\necho\
    \ intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4])\
    \ . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nYES\nYES\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3t0m1qpy.php:44\n\
    Stack trace:\n#0 /tmp/tmp3t0m1qpy.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp3t0m1qpy.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   return $start == $end || $start + 1 == $end ? \"YES\" : \"NO\";\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcwyuwhlw.php:32\n\
    Stack trace:\n#0 /tmp/tmpcwyuwhlw.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpcwyuwhlw.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \tif ($interval1[0] < $interval2[0]) {\n\t\tif ($interval1[1] > $interval2[0])\
    \ {\n\t\t\t$inter = [$interval2[0], $interval1[1]];\n\t\t} else {\n\t\t\treturn\
    \ \"NO\";\n\t\t}\n\t} else if ($interval1[0] == $interval2[0]) {\n\t\t$inter =\
    \ [$interval1[0], $interval1[1]];\n\t} else {\n\t\tif ($interval2[1] > $interval1[0])\
    \ {\n\t\t\t$inter = [$interval1[0], $interval2[1]];\n\t\t} else {\n\t\t\treturn\
    \ \"NO\";\n\t\t}\n\t}\n\t$length = $inter[1] - $inter[0];\n\tif ($length < 0)\
    \ {\n\t\treturn \"NO\";\n\t}\n\tif ($length == 1) {\n\t\treturn \"NO\";\n\t}\n\
    \tfor ($i = 2; $i < $length; $i++) {\n\t\tif ($length % $i == 0) {\n\t\t\treturn\
    \ \"NO\";\n\t\t}\n\t}\n\treturn \"YES\";\n}\necho intersection([-1, 1], [0, 4])\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "NO\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpplb7b3dn.php:56\n\
    Stack trace:\n#0 /tmp/tmpplb7b3dn.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpplb7b3dn.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    if ($interval1[0] < $interval2[0]) {\n        $temp = $interval1;\n     \
    \   $interval1 = $interval2;\n        $interval2 = $temp;\n    }\n    $start =\
    \ $interval1[0];\n    $end = $interval2[1];\n    if ($end > $interval1[1]) {\n\
    \        $end = $interval1[1];\n    }\n    if ($end < $start) {\n        return\
    \ \"NO\";\n    }\n    $number = $end - $start + 1;\n    for ($i = 2; $i < $number;\
    \ $i++) {\n        if ($number % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}\nfunction candidate(...$args) {\n    return\
    \ intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpadpc4pgk.php:45\n\
    Stack trace:\n#0 /tmp/tmpadpc4pgk.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpadpc4pgk.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    $length = $end - $start;\n    if ($length <= 0) return\
    \ \"NO\";\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) return \"NO\";\n    }\n    return \"YES\";\n}\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa7j4r8mc.php:34\n\
    Stack trace:\n#0 /tmp/tmpa7j4r8mc.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpa7j4r8mc.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $arr = [$interval1, $interval2];\n  sort($arr);\n  if ($arr[0][1] > $arr[1][0])\
    \ {\n    $new_arr = [$arr[1][0], $arr[0][1]];\n    sort($new_arr);\n    $len =\
    \ $new_arr[1] - $new_arr[0];\n    if ($len == 1) {\n      return \"NO\";\n   \
    \ }\n    $prim = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    if (in_array($len, $prim)) {\n   \
    \   return \"YES\";\n    }\n    return \"NO\";\n  }\n  return \"NO\";\n}\n\necho\
    \ intersection([-3, -1], [-5, 5]);\nfunction candidate(...$args) {\n    return\
    \ intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzw4yequ9.php:45\n\
    Stack trace:\n#0 /tmp/tmpzw4yequ9.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpzw4yequ9.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $a = $interval1[0];\n  $b = $interval1[1];\n  $c = $interval2[0];\n  $d = $interval2[1];\n\
    \  $start = max($a, $c);\n  $end = min($b, $d);\n  if ($start > $end) return \"\
    NO\";\n  $length = $end - $start + 1;\n  if ($length < 2) return \"NO\";\n  for\
    \ ($i = 2; $i < $length; $i++) {\n    if ($length % $i == 0) return \"NO\";\n\
    \  }\n  return \"YES\";\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiwurd0k5.php:40\n\
    Stack trace:\n#0 /tmp/tmpiwurd0k5.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpiwurd0k5.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $interval1 = explode(\",\", $interval1);\n  $interval2 = explode(\",\", $interval2);\n\
    \  $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n\
    \  $length = $end - $start;\n  if($length <= 0) return \"NO\";\n  $primes = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n  return in_array($length, $primes) ? \"YES\" : \"NO\";\n\
    }\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1),\
    \ array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: explode() expects parameter 2 to be string, array given in /tmp/tmpf75qfvli.php\
    \ on line 19\n\nWarning: explode() expects parameter 2 to be string, array given\
    \ in /tmp/tmpf75qfvli.php on line 20\n\nWarning: explode() expects parameter 2\
    \ to be string, array given in /tmp/tmpf75qfvli.php on line 19\n\nWarning: explode()\
    \ expects parameter 2 to be string, array given in /tmp/tmpf75qfvli.php on line\
    \ 20\n\nWarning: explode() expects parameter 2 to be string, array given in /tmp/tmpf75qfvli.php\
    \ on line 19\n\nWarning: explode() expects parameter 2 to be string, array given\
    \ in /tmp/tmpf75qfvli.php on line 20\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpf75qfvli.php:36\nStack trace:\n#0 /tmp/tmpf75qfvli.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpf75qfvli.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = array_intersect(range($interval1[0], $interval1[1]), range($interval2[0],\
    \ $interval2[1]));\n    return count($intersection) > 0 && isPrime(count($intersection))\
    \ ? \"YES\" : \"NO\";\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpd42ea47e.php:20\nStack trace:\n#0 /tmp/tmpd42ea47e.php(23): intersection(Array,\
    \ Array)\n#1 /tmp/tmpd42ea47e.php(27): candidate(Array, Array)\n#2 /tmp/tmpd42ea47e.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpd42ea47e.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $intersect = [];\n  if ($interval1[0] >= $interval2[0] && $interval1[0] <=\
    \ $interval2[1]) {\n    array_push($intersect, $interval1[0]);\n  }\n  if ($interval1[1]\
    \ >= $interval2[0] && $interval1[1] <= $interval2[1]) {\n    array_push($intersect,\
    \ $interval1[1]);\n  }\n  if ($interval2[0] >= $interval1[0] && $interval2[0]\
    \ <= $interval1[1]) {\n    array_push($intersect, $interval2[0]);\n  }\n  if ($interval2[1]\
    \ >= $interval1[0] && $interval2[1] <= $interval1[1]) {\n    array_push($intersect,\
    \ $interval2[1]);\n  }\n  if ($intersect[0] < $intersect[1]) {\n    $length =\
    \ $intersect[1] - $intersect[0];\n  } else {\n    $length = $intersect[0] - $intersect[1];\n\
    \  }\n  if ($length <= 1) {\n    return \"NO\";\n  }\n  for ($i = 2; $i < $length;\
    \ $i++) {\n    if ($length % $i == 0) {\n      return \"NO\";\n    }\n  }\n  return\
    \ \"YES\";\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if($start >= $end) {\n        return \"NO\";\n    }\n \
    \   $arr = range($start, $end);\n    $intervalLength = count($arr);\n    if($intervalLength\
    \ < 2) {\n        return \"NO\";\n    }\n    $primeNumbers = array_filter($arr,\
    \ function($v) {\n        return $v > 1 && !($v % 2 == 0 && $v != 2);\n    });\n\
    \    if(in_array($intervalLength, $primeNumbers)) {\n        return \"YES\";\n\
    \    }\n    return \"NO\";\n}\necho intersection([-1, 1], [0, 4]) . PHP_EOL;\n\
    function candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "NO\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp03dgql4x.php:45\n\
    Stack trace:\n#0 /tmp/tmp03dgql4x.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp03dgql4x.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  // determine intersection of intervals, if any\n  $interval1Start = $interval1[0];\n\
    \  $interval1End = $interval1[1];\n  $interval2Start = $interval2[0];\n  $interval2End\
    \ = $interval2[1];\n  if ($interval1Start > $interval2Start) {\n    $interval1Start\
    \ = $interval2Start;\n  }\n  if ($interval1End < $interval2End) {\n    $interval1End\
    \ = $interval2End;\n  }\n  if ($interval1Start < $interval2Start) {\n    $interval1End\
    \ = $interval2Start;\n  }\n  if ($interval1End > $interval2End) {\n    $interval1Start\
    \ = $interval2End;\n  }\n  // determine length of intersection\n  $intersectionLength\
    \ = $interval1End - $interval1Start;\n  if ($intersectionLength <= 0) {\n    return\
    \ \"NO\";\n  }\n  // determine if length is prime number\n  if ($intersectionLength\
    \ == 1) {\n    return \"NO\";\n  }\n  for ($i = 2; $i < $intersectionLength; $i++)\
    \ {\n    if ($intersectionLength % $i == 0) {\n      return \"NO\";\n    }\n \
    \ }\n  return \"YES\";\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe_nzkdng.php:59\n\
    Stack trace:\n#0 /tmp/tmpe_nzkdng.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpe_nzkdng.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersectionLength = 0;\n    $isIntersect = false;\n    $start1 = $interval1[0];\n\
    \    $end1 = $interval1[1];\n    $start2 = $interval2[0];\n    $end2 = $interval2[1];\n\
    \    if ($start1 > $end1) {\n        $start1 = $interval1[1];\n        $end1 =\
    \ $interval1[0];\n    }\n    if ($start2 > $end2) {\n        $start2 = $interval2[1];\n\
    \        $end2 = $interval2[0];\n    }\n    // 1st if-else = is the interval 1\
    \ bigger than interval 2 and vice versa\n    if ($start1 < $start2 && $end1 <\
    \ $end2) {\n        $intersectionLength = $end1 - $start2;\n        $isIntersect\
    \ = true;\n    } else if ($start1 > $start2 && $end1 > $end2) {\n        $intersectionLength\
    \ = $end2 - $start1;\n        $isIntersect = true;\n    } else if ($start1 < $start2\
    \ && $end1 > $end2) {\n        $intersectionLength = $end2 - $start2;\n      \
    \  $isIntersect = true;\n    } else if ($start1 > $start2 && $end1 < $end2) {\n\
    \        $intersectionLength = $end1 - $start1;\n        $isIntersect = true;\n\
    \    } else if ($start1 == $start2 && $end1 == $end2) {\n        $intersectionLength\
    \ = $end1 - $start1;\n        $isIntersect = true;\n    } else if ($start1 < $start2\
    \ && $end1 == $end2) {\n        $intersectionLength = $end1 - $start2;\n     \
    \   $isIntersect = true;\n    } else if ($start1 == $start2 && $end1 > $end2)\
    \ {\n        $intersectionLength = $end2 - $start1;\n        $isIntersect = true;\n\
    \    }\n    if ($isIntersect) {\n        $isPrime = true;\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptpdwxor5.php on line 73\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    [$s1, $e1] = $interval1;\n    [$s2, $e2] = $interval2;\n    $start = max($s1,\
    \ $s2);\n    $end = min($e1, $e2);\n    if ($start > $end) {\n        return \"\
    NO\";\n    }\n    return isPrime($end - $start + 1) ? \"YES\" : \"NO\";\n}\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpsxpavwys.php:26\nStack trace:\n#0 /tmp/tmpsxpavwys.php(29): intersection(Array,\
    \ Array)\n#1 /tmp/tmpsxpavwys.php(33): candidate(Array, Array)\n#2 /tmp/tmpsxpavwys.php(43):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpsxpavwys.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $result = \"NO\";\n  $interval = array();\n  $prime = array();\n  for ($i=1;\
    \ $i < 1000000; $i++) { \n    if (isPrime($i)) {\n      $prime[] = $i;\n    }\n\
    \  }\n  $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1],\
    \ $interval2[1]);\n  if ($start <= $end) {\n    $interval = array($start, $end);\n\
    \    if (in_array(abs($interval[1] - $interval[0]) + 1, $prime)) {\n      $result\
    \ = \"YES\";\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmp0betcq6r.php:23\nStack trace:\n#0 /tmp/tmp0betcq6r.php(39): intersection(Array,\
    \ Array)\n#1 /tmp/tmp0betcq6r.php(43): candidate(Array, Array)\n#2 /tmp/tmp0betcq6r.php(53):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0betcq6r.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  $start = max($interval1[0], $interval2[0]);\n\
    \  $end = min($interval1[1], $interval2[1]);\n  if($start > $end) {\n    return\
    \ \"NO\";\n  }\n  if(in_array($end - $start + 1, $primeNumbers)) {\n    return\
    \ \"YES\";\n  }\n  return \"NO\";\n}\nfunction candidate(...$args) {\n    return\
    \ intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpen6jevse.php:36\n\
    Stack trace:\n#0 /tmp/tmpen6jevse.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpen6jevse.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start1 = $interval1[0];\n    $end1 = $interval1[1];\n    $start2 = $interval2[0];\n\
    \    $end2 = $interval2[1];\n    $left = max($start1, $start2);\n    $right =\
    \ min($end1, $end2);\n    if ($left >= $right) {\n        return \"NO\";\n   \
    \ }\n    $length = $right - $left + 1;\n    if ($length == 1) {\n        return\
    \ \"NO\";\n    }\n    if ($length == 2) {\n        return \"YES\";\n    }\n  \
    \  for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n    \
    \        return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaz4f5zol.php:49\n\
    Stack trace:\n#0 /tmp/tmpaz4f5zol.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpaz4f5zol.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $interval = intersect($interval1, $interval2);\n  return isPrime($interval[1]\
    \ - $interval[0] + 1) ? \"YES\" : \"NO\";\n}\n\nfunction candidate(...$args) {\n\
    \    return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function intersect() in\
    \ /tmp/tmpnd62ds9z.php:19\nStack trace:\n#0 /tmp/tmpnd62ds9z.php(24): intersection(Array,\
    \ Array)\n#1 /tmp/tmpnd62ds9z.php(28): candidate(Array, Array)\n#2 /tmp/tmpnd62ds9z.php(38):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpnd62ds9z.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  if($interval1[0] <= $interval2[0] && $interval1[1] >= $interval2[0]) {\n  \
    \  $intersection = min($interval1[1], $interval2[1]) - $interval2[0];\n  } else\
    \ if($interval2[0] <= $interval1[0] && $interval2[1] >= $interval1[0]) {\n   \
    \ $intersection = min($interval1[1], $interval2[1]) - $interval1[0];\n  } else\
    \ {\n    return \"NO\";\n  }\n  return isPrime($intersection) ? \"YES\" : \"NO\"\
    ;\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"\
    NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmp5wocra53.php:26\nStack trace:\n#0 /tmp/tmp5wocra53.php(30): intersection(Array,\
    \ Array)\n#1 /tmp/tmp5wocra53.php(34): candidate(Array, Array)\n#2 /tmp/tmp5wocra53.php(44):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp5wocra53.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $intersection = false;\n  if ($interval1[0] <= $interval2[0] && $interval2[0]\
    \ <= $interval1[1]) {\n    $intersection = [$interval2[0], $interval1[1]];\n \
    \ } else if ($interval2[0] <= $interval1[0] && $interval1[0] <= $interval2[1])\
    \ {\n    $intersection = [$interval1[0], $interval2[1]];\n  }\n  if ($intersection)\
    \ {\n    if ($intersection[0] == $intersection[1]) {\n      return 'NO';\n   \
    \ }\n    $n = $intersection[1] - $intersection[0] + 1;\n    if ($n <= 1) {\n \
    \     return 'NO';\n    }\n    if ($n == 2) {\n      return 'YES';\n    }\n  \
    \  for ($i = 2; $i < $n; $i++) {\n      if ($n % $i == 0) {\n        return 'NO';\n\
    \      }\n    }\n    return 'YES';\n  }\n  return 'NO';\n}\n\n$interval1 = array(1,\
    \ 2);\n$interval2 = array(2, 3);\nprint intersection($interval1, $interval2) .\
    \ \"\\n\";\n\n$interval1 = array(-1, 1);\n$interval2 = array(0, 4);\nprint intersection($interval1,\
    \ $interval2) . \"\\n\";\n\n$interval1 = array(-3, -1);\n$interval2 = array(-5,\
    \ 5);\nprint intersection($interval1, $interval2) . \"\\n\";\n\n$interval1 = array(1,\
    \ 2);\n$interval2 = array(3, 4);\nprint intersection($interval1, $interval2) .\
    \ \"\\n\";\n\n$interval1 = array(1, 2);\n$interval2 = array(1, 2);\nprint intersection($interval1,\
    \ $interval2) . \"\\n\";\n\n$interval1 = array(1, 4);\n$interval2 = array(2, 3\n\
    function candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9ov9plm3.php on line 68\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    list($a, $b) = $interval1;\n    list($c, $d) = $interval2;\n    $start =\
    \ max($a, $c);\n    $end = min($b, $d);\n    $intLen = $end - $start + 1;\n  \
    \  if ($intLen < 0) return \"NO\";\n    $primes = [2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    if\
    \ (in_array($intLen, $primes)) return \"YES\";\n    return \"NO\";\n}\n\necho\
    \ intersection([1, 2], [2, 3]); // ==> \"NO\"\necho intersection([-1, 1], [0,\
    \ 4]); // ==> \"NO\"\necho intersection([-3, -1], [-5, 5]); // ==> \"YES\"\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "NOYESYES\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7sjxhvk_.php:39\n\
    Stack trace:\n#0 /tmp/tmp7sjxhvk_.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp7sjxhvk_.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    // your code here\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpksg2lud_.php:27\n\
    Stack trace:\n#0 /tmp/tmpksg2lud_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpksg2lud_.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  if ($interval1[0] <= $interval2[0] && $interval2[0] <= $interval1[1]) {\n \
    \   $start = $interval2[0];\n  } elseif ($interval2[0] <= $interval1[0] && $interval1[0]\
    \ <= $interval2[1]) {\n    $start = $interval1[0];\n  } else {\n    return \"\
    NO\";\n  }\n  if ($interval1[0] <= $interval2[1] && $interval2[1] <= $interval1[1])\
    \ {\n    $end = $interval2[1];\n  } elseif ($interval2[0] <= $interval1[1] &&\
    \ $interval1[1] <= $interval2[1]) {\n    $end = $interval1[1];\n  } else {\n \
    \   return \"NO\";\n  }\n  $interval = [$start, $end];\n  $length = $interval[1]\
    \ - $interval[0] + 1;\n  if ($length <= 1) {\n    return \"NO\";\n  }\n  if ($length\
    \ === 2) {\n    return \"YES\";\n  }\n  for ($i = 2; $i < $length; $i++) {\n \
    \   if ($length % $i === 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\"\
    ;\n}\n\necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1],\
    \ [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\necho intersection([-7,\
    \ -1], [-5, 5]) . \"\\n\";\necho intersection([-7, -1], [-5, 0]) . \"\\n\";\n\
    echo intersection([-7, -1], [-5, 1]) . \"\\n\";\necho intersection([-7, -1], [-5,\
    \ 2]) . \"\\n\";\necho intersection([-7, -1], [-5, 3]) . \"\\n\";\necho intersection([-7,\
    \ -1], [-5, 4]) . \"\\n\";\necho intersection\nfunction candidate(...$args) {\n\
    \    return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdhmm68a0.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \t$start1 = $interval1[0];\n\t$end1 = $interval1[1];\n\t$start2 = $interval2[0];\n\
    \t$end2 = $interval2[1];\n\tif ($start1 > $end1 || $start2 > $end2) {\n\t\treturn\
    \ 'NO';\n\t} else if ($start1 > $end2 || $start2 > $end1) {\n\t\treturn 'NO';\n\
    \t} else {\n\t\t$min = max($start1, $start2);\n\t\t$max = min($end1, $end2);\n\
    \t\treturn isPrime($max - $min) ? 'YES' : 'NO';\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpm1xx_hwe.php:30\nStack trace:\n#0 /tmp/tmpm1xx_hwe.php(35): intersection(Array,\
    \ Array)\n#1 /tmp/tmpm1xx_hwe.php(39): candidate(Array, Array)\n#2 /tmp/tmpm1xx_hwe.php(49):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpm1xx_hwe.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  // Write your code here\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx38zf9s9.php:26\n\
    Stack trace:\n#0 /tmp/tmpx38zf9s9.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpx38zf9s9.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \tlist($start1, $end1) = $interval1;\n\tlist($start2, $end2) = $interval2;\n\t\
    $result = max(min($end1, $end2) - max($start1, $start2), 0);\n\treturn isPrime($result)\
    \ ? \"YES\" : \"NO\";\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpcqm9irdj.php:22\nStack trace:\n#0 /tmp/tmpcqm9irdj.php(25): intersection(Array,\
    \ Array)\n#1 /tmp/tmpcqm9irdj.php(29): candidate(Array, Array)\n#2 /tmp/tmpcqm9irdj.php(39):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpcqm9irdj.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $firstLeft = $interval1[0];\n    $firstRight = $interval1[1];\n    $secondLeft\
    \ = $interval2[0];\n    $secondRight = $interval2[1];\n    if($firstLeft > $firstRight\
    \ || $secondLeft > $secondRight) return 'NO';\n    if($firstLeft > $secondRight\
    \ || $secondLeft > $firstRight) return 'NO';\n    $left = max($firstLeft, $secondLeft);\n\
    \    $right = min($firstRight, $secondRight);\n    $len = $right - $left + 1;\n\
    \    if($len <= 0) return 'NO';\n    for($i = 2; $i < $len; $i++) {\n        if($len\
    \ % $i == 0) return 'NO';\n    }\n    return 'YES';\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuruc1mih.php:40\n\
    Stack trace:\n#0 /tmp/tmpuruc1mih.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpuruc1mih.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  list($begin1, $end1) = $interval1;\n  list($begin2, $end2) = $interval2;\n\
    \  // first check if there is an intersection or not\n  $begin = max($begin1,\
    \ $begin2);\n  $end = min($end1, $end2);\n  if ($begin > $end) return \"NO\";\n\
    \  $len = $end - $begin + 1;\n  // from this point we know that there is an intersection\
    \ and it has length $len\n  // if $len <= 1, it means that the intersection is\
    \ a single number and it's \n  // not prime\n  if ($len <= 1) return \"NO\";\n\
    \  // now if $len > 1, this means that the intersection contains at least 2 numbers\n\
    \  // so we need to check if $len is prime or not\n  // a number $n is prime if\
    \ it has only 2 divisors, 1 and $n\n  // so iterate through [2, $len - 1] and\
    \ check if $len % i == 0\n  for ($i = 2; $i < $len; $i++) {\n    if ($len % $i\
    \ == 0) return \"NO\";\n  }\n  return \"YES\";\n}\n\n$interval1 = [1, 2];\n$interval2\
    \ = [2, 3];\n\necho intersection($interval1, $interval2);\necho \"\\n\";\n\n$interval1\
    \ = [-1, 1];\n$interval2 = [0, 4];\n\necho intersection($interval1, $interval2);\n\
    echo \"\\n\";\n\n$interval1 = [-3, -1];\n$interval2 = [-5, 5];\n\necho intersection($interval1,\
    \ $interval2);\necho \"\\n\";\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "NO\nYES\nYES\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsb9o8a9u.php:63\n\
    Stack trace:\n#0 /tmp/tmpsb9o8a9u.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpsb9o8a9u.php\
    \ on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  \n  $arr = [$interval1[0], $interval1[1], $interval2[0], $interval2[1]];\n\
    \  sort($arr);\n  if ($arr[1] < $arr[2]) {\n    $intersect = range($arr[1], $arr[2]);\n\
    \  } else {\n    $intersect = [];\n  }\n  if (count($intersect) > 0) {\n    $prime\
    \ = true;\n    for ($i = 2; $i < $intersect[0]; $i++) {\n      if ($intersect[0]\
    \ % $i == 0) {\n        $prime = false;\n      }\n    }\n    if ($prime) {\n \
    \     return \"YES\";\n    } else {\n      return \"NO\";\n    }\n  } else {\n\
    \    return \"NO\";\n  }\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdikkxa_t.php:50\n\
    Stack trace:\n#0 /tmp/tmpdikkxa_t.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpdikkxa_t.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    if ($interval1[0] <= $interval2[0] and $interval2[0] <= $interval1[1]) {\n\
    \        $start = $interval2[0];\n    } else if ($interval2[0] <= $interval1[0]\
    \ and $interval1[0] <= $interval2[1]) {\n        $start = $interval1[0];\n   \
    \ } else {\n        return \"NO\";\n    }\n    if ($interval1[0] <= $interval2[1]\
    \ and $interval2[1] <= $interval1[1]) {\n        $end = $interval2[1];\n    }\
    \ else if ($interval2[0] <= $interval1[1] and $interval1[1] <= $interval2[1])\
    \ {\n        $end = $interval1[1];\n    } else {\n        return \"NO\";\n   \
    \ }\n    if (isPrime($end - $start + 1)) {\n        return \"YES\";\n    } else\
    \ {\n        return \"NO\";\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmp5iuawcc2.php:33\nStack trace:\n#0 /tmp/tmp5iuawcc2.php(40): intersection(Array,\
    \ Array)\n#1 /tmp/tmp5iuawcc2.php(44): candidate(Array, Array)\n#2 /tmp/tmp5iuawcc2.php(54):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp5iuawcc2.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $x = range($interval1[0], $interval1[1]);\n    $y = range($interval2[0],\
    \ $interval2[1]);\n    $intersection = array_values(array_intersect($x, $y));\n\
    \    if (empty($intersection)) {\n        return \"NO\";\n    }\n    if (isPrime(count($intersection)))\
    \ {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpf6v_q12z.php:25\nStack trace:\n#0 /tmp/tmpf6v_q12z.php(32): intersection(Array,\
    \ Array)\n#1 /tmp/tmpf6v_q12z.php(36): candidate(Array, Array)\n#2 /tmp/tmpf6v_q12z.php(46):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpf6v_q12z.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersect = [];\n    $inters = [];\n    if ($interval1[0] < $interval2[0])\
    \ {\n        $intersect = $interval1;\n        $inters = $interval2;\n    } else\
    \ {\n        $intersect = $interval2;\n        $inters = $interval1;\n    }\n\
    \    if ($intersect[1] < $inters[0]) {\n        return \"NO\";\n    }\n    if\
    \ ($intersect[1] > $inters[1]) {\n        $intersect[1] = $inters[1];\n    }\n\
    \    if ($intersect[0] < $inters[0]) {\n        $intersect[0] = $inters[0];\n\
    \    }\n    $range = $intersect[1] - $intersect[0];\n    for ($i = 1; $i <= $range;\
    \ $i++) {\n        if ($range % $i == 0) {\n            $divisors[] = $i;\n  \
    \      }\n    }\n    if (count($divisors) == 2) {\n        return \"YES\";\n \
    \   } else {\n        return \"NO\";\n    }\n}\nfunction candidate(...$args) {\n\
    \    return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpq6c7xs1f.php on line 43\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpq6c7xs1f.php\
    \ on line 43\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpq6c7xs1f.php on line 43\n"
  stderr: ''
  exit_code: 0
  status: OK
