name: HumanEval_145_order_by_points
language: php
prompt: "<?php\n// Write a function which sorts the given list of integers\n// in\
  \ ascending order according to the sum of their digits.\n// Note: if there are several\
  \ items with similar sum of their digits,\n// order them based on their index in\
  \ original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\
  \ == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points($nums)\
  \ {\n"
tests: "function candidate(...$args) {\n    return order_by_points(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(array(1, 11, -1, -11, -12)) !== array(-1,\
  \ -11, 1, -12, 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1234,\
  \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46)) !== array(0, 2, 3,\
  \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, -11, -32, 43, 54, -98, 2, -3)) !==\
  \ array(-3, -32, -98, -11, 1, 2, 43, 54)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)) !== array(1, 10,\
  \ 2, 11, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(0, 6, 6, -76, -21, 23, 4)) !== array(-76, -21, 0, 4, 23, 6, 6))\
  \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $arr = [];\n  foreach ($nums as $num) {\n    $arr[] = [array_sum(str_split($num)),\
    \ $num];\n  }\n  usort($arr, function($a, $b) {\n    return $a[0] <=> $b[0];\n\
    \  });\n  return array_column($arr, 1);\n}\n", "  $sums = [];\n  foreach ($nums\
    \ as $i => $num) {\n    $sum = 0;\n    while ($num > 0) {\n      $sum += $num\
    \ % 10;\n      $num = (int)($num / 10);\n    }\n    if (!isset($sums[$sum])) {\n\
    \      $sums[$sum] = [];\n    }\n    $sums[$sum][] = $i;\n  }\n  ksort($sums);\n\
    \  $result = [];\n  foreach ($sums as $sum => $indices) {\n    foreach ($indices\
    \ as $index) {\n      $result[] = $nums[$index];\n    }\n  }\n  return $result;\n\
    }\n\necho implode(', ', order_by_points([1, 11, -1, -11, -12]));", "    $nums_temp\
    \ = [];\n    foreach ($nums as $index => $number) {\n        $number_temp = (string)\
    \ abs($number);\n        $points = 0;\n        foreach (str_split($number_temp)\
    \ as $digit) {\n            $points += $digit;\n        }\n        $nums_temp[$index]\
    \ = [$number, $points];\n    }\n    usort($nums_temp, function ($a, $b) {\n  \
    \      return $a[1] > $b[1] || ($a[1] == $b[1] && $a[0] > $b[0]);\n    });\n \
    \   $nums = [];\n    foreach ($nums_temp as $index => $num_temp) {\n        $nums[$index]\
    \ = $num_temp[0];\n    }\n    return $nums;\n}\n$ordered_arr = order_by_points([1,\
    \ 11, -1, -11, -12]);\necho '<pre>';\nprint_r($ordered_arr);\necho '</pre>';\n\
    $ordered_arr = order_by_points([]);\necho '<pre>';\nprint_r($ordered_arr);\necho\
    \ '</pre>';\n$ordered_arr = order_by_points([2, -22, -3, 33, 4, -44, 5, -55, -6,\
    \ 66, -7, 77, 8, -88, 9, -99, -10, 1010]);\necho '<pre>';\nprint_r($ordered_arr);\n\
    echo '</pre>';\n", "  // Write your code here\n}\n\n$result = [\n    '-1',\n \
    \   '-11',\n    '1',\n    '-12',\n    '11'\n];\nvar_dump(order_by_points([1, 11,\
    \ -1, -11, -12]) === $result);\n", "\t$nums_points = [];\n\tforeach ($nums as\
    \ $i => $n) {\n\t\t$nums_points[$i] = array_sum(str_split((string)$n));\n\t}\n\
    \tasort($nums_points);\n\t$sorted_nums = [];\n\tforeach ($nums_points as $i =>\
    \ $p) {\n\t\t$sorted_nums[] = $nums[$i];\n\t}\n\treturn $sorted_nums;\n}\n", " \
    \   $sum = [];\n    foreach ($nums as $key => $value) {\n        $sum[$key] =\
    \ array_sum(str_split($value));\n    }\n    array_multisort($sum, SORT_ASC, $nums);\n\
    \    return $nums;\n}\n", "\t// If we have nothing to sort return the empty list\n\
    \tif (count($nums) === 0) {\n\t\treturn [];\n\t}\n\t// The first element is the\
    \ one with the minimal sum\n\t$min = [$nums[0], array_sum(str_split($nums[0]))];\n\
    \t// The last element is the one with the maximal sum\n\t$max = [$nums[0], array_sum(str_split($nums[0]))];\n\
    \t// Iterate through the list of numbers, keeping track of the largest sum\n\t\
    // and the smallest sum, to start\n\tforeach ($nums as $num) {\n\t\t// Cache the\
    \ sum of the digits of the current number\n\t\t$sum = array_sum(str_split($num));\n\
    \t\t// Update the minimum\n\t\tif ($sum < $min[1]) {\n\t\t\t$min = [$num, $sum];\n\
    \t\t}\n\t\t// Update the maximum\n\t\tif ($sum > $max[1]) {\n\t\t\t$max = [$num,\
    \ $sum];\n\t\t}\n\t}\n\t// After iterating through the list of numbers, we know\
    \ the\n\t// maximum and minimum sums. We can now sort the list\n\t// in ascending\
    \ order according to the sum of their digits.\n\t$curr = $min;\n\t$sorted = [$curr[0]];\n\
    \twhile (count($sorted) < count($nums)) {\n\t\t$next = $curr;\n\t\tforeach ($nums\
    \ as $num) {\n\t\t\t// Cache the sum of the digits of the current number\n\t\t\
    \t$sum = array_sum(str_split($num));\n\t\t\t// If the sum is greater than the\
    \ current sum and\n\t\t\t// the number isn't already in the list of sorted\n\t\
    \t\t// numbers, it is the next number in the list\n\t\t\tif ($sum > $curr[1] &&\
    \ !in_array($num, $sorted)) {\n\t\t\t\t$next = [$num, $sum];\n\t\t\t}\n\t\t}\n\
    \t\t// Update the current number\n\t\t$curr = $next", "    $result = [];\n   \
    \ if (!empty($nums)) {\n        $buffer = [];\n        foreach ($nums as $idx\
    \ => $value) {\n            $sum = 0;\n            $tmpValue = $value;\n     \
    \       if ($value < 0) {\n                $tmpValue = $value * -1;\n        \
    \    }\n            while ($tmpValue > 0) {\n                $last = $tmpValue\
    \ % 10;\n                $sum += $last;\n                $tmpValue = floor($tmpValue\
    \ / 10);\n            }\n            $buffer[$sum][] = $value;\n        }\n  \
    \      ksort($buffer);\n        foreach ($buffer as $key => $value) {\n      \
    \      $result = array_merge($result, $value);\n        }\n    }\n    return $result;\n\
    }\n", "  $indexes = [];\n  foreach ($nums as $key => $num) {\n    $indexes[$key]\
    \ = digits_sum($num);\n  }\n  array_multisort($indexes, SORT_ASC, $nums);\n  return\
    \ $nums;\n}\n", "    if(empty($nums)) {\n        return [];\n    }\n    $arr =\
    \ [];\n    foreach($nums as $key => $value) {\n        $sum = 0;\n        $value\
    \ = abs($value);\n        while($value > 0) {\n            $sum += $value % 10;\n\
    \            $value = intval($value / 10);\n        }\n        $arr[$key] = $sum;\n\
    \    }\n    arsort($arr);\n    $result = [];\n    foreach($arr as $key => $value)\
    \ {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\nvar_dump(order_by_points([1,\
    \ 11, -1, -11, -12]));", "    $sort_arr = [];\n    for ($i = 0; $i < count($nums);\
    \ $i++) {\n        $sum = 0;\n        for ($j = 0; $j < strlen($nums[$i]); $j++)\
    \ {\n            $sum += $nums[$i][$j];\n        }\n        $sort_arr[$i] = $sum;\n\
    \    }\n    array_multisort($sort_arr, $nums);\n    return $nums;\n}", "\n}\n",
  "\t// Input: array of integers\n\t// Output: array of integers sorted by the sum\
    \ of their digits in ascending order\n\t// Edge cases:\n\t//\t\tIf input is empty\
    \ array, return empty array\n\t// Constraints:\n\t//\t\t- no negative numbers\n\
    \t// Test cases:\n\t//\t\t[]\n\t//\t\t[1, 11, -1, -11, -12]\n\t//\t\t[999, -999,\
    \ -1, 1, 0]\n\t// Algorithm:\n\t//\t\t- define helper function to sum digits of\
    \ a number (val)\n\t//\t\t\t- define stringified_num\n\t//\t\t\t- while stringified_num\
    \ is not empty\n\t//\t\t\t\t- get first character of stringified_num\n\t//\t\t\
    \t\t- convert to int\n\t//\t\t\t\t- add to running sum\n\t//\t\t\t\t- remove first\
    \ character of stringified_num\n\t//\t\t\t- return sum\n\t//\t\t- iterate through\
    \ nums\n\t//\t\t\t- for each num, sum the digits with helper function\n\t//\t\t\
    \t- push array (index, sum of digits) to results array\n\t//\t\t- sort results\
    \ array by 2nd value of each array\n\t//\t\t- iterate through results array\n\t\
    //\t\t\t- push 1st value of each array to output array\n\t//\t\t- return output\
    \ array\n\t\n\tif (empty($nums)) {\n\t\treturn [];\n\t}\n\t\n\t$sum_digits = function($val)\
    \ {\n\t\t$stringified_num = strval($val);\n\t\t$sum = 0;\n\t\twhile (!empty($stringified_num))\
    \ {\n\t\t\t$first_char = $stringified_num[0];\n\t\t\t$sum += intval($first_char);\n\
    \t\t\t$stringified_num = substr($stringified_num, 1);\n\t\t}\n\t\treturn $sum;\n\
    \t};\n\t\n\t$results = [];\n\tforeach ($nums as $index => $num) {\n\t\t$results[]\
    \ = [$index, $sum_digits($num)];\n\t}\n\t\n\tusort", "    $sums = [];\n    $sum_indexes\
    \ = [];\n    foreach ($nums as $i => $num) {\n        $sum = 0;\n        $x =\
    \ $num;\n        while ($x != 0) {\n            $sum += $x % 10;\n           \
    \ $x = floor($x / 10);\n        }\n        if (!isset($sums[$sum])) {\n      \
    \      $sums[$sum] = [$num];\n            $sum_indexes[$sum] = [$i];\n       \
    \ } else {\n            $sums[$sum][] = $num;\n            $sum_indexes[$sum][]\
    \ = $i;\n        }\n    }\n    ksort($sums);\n    $res = [];\n    foreach ($sums\
    \ as $nums) {\n        foreach ($nums as $num) {\n            $res[] = $num;\n\
    \        }\n    }\n    return $res;\n}\n\nprint_r(order_by_points([1, 11, -1,\
    \ -11, -12]));\nprint_r(order_by_points([]));", "\t$result = [];\n\tforeach ($nums\
    \ as $key => $num) {\n\t\t$sum = 0;\n\t\t$strNum = (string)$num;\n\t\tfor ($i\
    \ = 0; $i < strlen($strNum); $i++) {\n\t\t\t$sum += (int)$strNum[$i];\n\t\t}\n\
    \t\t$result[$key] = $sum;\n\t}\n\tasort($result);\n\t$keys = array_keys($result);\n\
    \t$sortedNums = [];\n\tforeach ($keys as $key) {\n\t\t$sortedNums[] = $nums[$key];\n\
    \t}\n\treturn $sortedNums;\n}\n\nvar_dump(order_by_points([1, 11, -1, -11, -12]));\n\
    var_dump(order_by_points([]));", "    $sort_points = [];\n    $sort_nums = [];\n\
    \    foreach ($nums as $index => $num) {\n        $sum = 0;\n        while ($num\
    \ != 0) {\n            $sum += $num % 10;\n            $num = (int)($num / 10);\n\
    \        }\n        $sort_points[] = $sum;\n        $sort_nums[] = $index;\n \
    \   }\n    for ($i = 0; $i < count($sort_points) - 1; $i++) {\n        for ($j\
    \ = $i + 1; $j < count($sort_points); $j++) {\n            if ($sort_points[$i]\
    \ > $sort_points[$j]) {\n                $temp = $sort_points[$i];\n         \
    \       $sort_points[$i] = $sort_points[$j];\n                $sort_points[$j]\
    \ = $temp;\n                $temp = $sort_nums[$i];\n                $sort_nums[$i]\
    \ = $sort_nums[$j];\n                $sort_nums[$j] = $temp;\n            }\n\
    \        }\n    }\n    $new_nums = [];\n    foreach ($sort_nums as $num) {\n \
    \       $new_nums[] = $nums[$num];\n    }\n    return $new_nums;\n}\necho '<pre>';\n\
    var_dump(order_by_points([1, 11, -1, -11, -12]));\nvar_dump(order_by_points([]));\n\
    var_dump(order_by_points([-1, -11, -12, 1, 11]));\nvar_dump(order_by_points([-11,\
    \ -12, -1, 1, 11]));\nvar_dump(order_by_points([11, -12, -1, 1, -11]));\nvar_dump(order_by_points([-11,\
    \ -12, -1, 11, 1]));\nvar_dump(order_by_points([-11, 1, -12, -1, 11]));\nvar_dump(order_by_points([-11,\
    \ 11", "    $arr = array();\n    foreach ($nums as $num) {\n        $sum = array_sum(str_split(abs($num)));\n\
    \        $arr[$sum][] = $num;\n    }\n    ksort($arr);\n    $res = array();\n\
    \    foreach ($arr as $key => $value) {\n        $res = array_merge($res, $value);\n\
    \    }\n    return $res;\n}\n", "\tusort($nums, function($a, $b) {\n\t\t$sum_a\
    \ = 0;\n\t\t$sum_b = 0;\n\t\tforeach (str_split(abs($a)) as $digit) {\n\t\t\t\
    $sum_a += $digit;\n\t\t}\n\t\tforeach (str_split(abs($b)) as $digit) {\n\t\t\t\
    $sum_b += $digit;\n\t\t}\n\t\treturn $sum_a - $sum_b;\n\t});\n\treturn $nums;\n\
    }\n\n$nums = [1, 11, -1, -11, -12];\necho \"Should return [-1, -11, 1, -12, 11]:\
    \ \";\nprint_r(order_by_points($nums));\necho \"\\n\";\n\n$nums = [];\necho \"\
    Should return []: \";\nprint_r(order_by_points($nums));\necho \"\\n\";\n\n$nums\
    \ = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3", "    $result = [];\n    foreach ($nums as\
    \ $i => $num) {\n        $result[$i] = $num;\n    }\n    usort($result, function\
    \ ($a, $b) {\n        $a_sum = sum_digits($a);\n        $b_sum = sum_digits($b);\n\
    \        if ($a_sum > $b_sum) {\n            return 1;\n        } elseif ($a_sum\
    \ < $b_sum) {\n            return -1;\n        } else {\n            return 0;\n\
    \        }\n    });\n    return $result;\n}", "\t$numsBySum = array();\n\tforeach\
    \ ($nums as $index => $num) {\n\t\t$numsBySum[$index] = array_sum(str_split($num));\n\
    \t}\n\tasort($numsBySum);\n\tforeach ($numsBySum as $key => $val) {\n\t\t$sorted[]\
    \ = $nums[$key];\n\t}\n\treturn $sorted;\n}\necho order_by_points([1, 11, -1,\
    \ -11, -12]);", "  if (empty($nums)) {\n    return [];\n  }\n  $ret = [];\n  $temp\
    \ = [];\n  $order = [];\n  foreach ($nums as $key => $num) {\n    $order[$key]\
    \ = array_sum(str_split(abs($num)));\n    $temp[$key] = $num;\n  }\n  asort($order);\n\
    \  foreach ($order as $key => $val) {\n    $ret[] = $temp[$key];\n  }\n  return\
    \ $ret;\n}\n\nvar_dump(order_by_points([1, 11, -1, -11, -12]));", "\t// write\
    \ your code here\n}\n\necho order_by_points([1, 11, -1, -11, -12]) . \"\\n\";\n\
    echo order_by_points([]) . \"\\n\";", "    $nums_sum = array_map(function($a)\
    \ { return array_sum(str_split($a)); }, $nums);\n    array_multisort($nums_sum,\
    \ $nums);\n    return $nums;\n}\n\n$a = [-1, -11, 1, -12, 11];\necho implode(',\
    \ ', order_by_points($a)) . \"\\n\";\n\n$a = [1, 11, -1, -11, -12];\necho implode(',\
    \ ', order_by_points($a)) . \"\\n\";\n\n$a = [];\necho implode(', ', order_by_points($a))\
    \ . \"\\n\";\n\n$a = [3, 5, 6, 7, 2, 1, 9, 8, 4];\necho implode(', ', order_by_points($a))\
    \ . \"\\n\";\n\n$a = [8, 7, 6, 5, 4, 3, 2, 1];\necho implode(', ', order_by_points($a))\
    \ . \"\\n\";\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8];\necho implode(', ', order_by_points($a))\
    \ . \"\\n\";\n\n$a = [22, 44, 33, 11, 55, 67, 77, 88, 9, 10];\necho implode(',\
    \ ', order_by_points($a)) . \"\\n\";\n\n$a = [1, 7, -1, -11, 7, -2, 2, 5, 9, 1,\
    \ -8, -9, -2, -5, -11, -11, -1, 0, -1, -3, -6, 1, -9, -11, 0, -2, 4, -5, -11,\
    \ -1, -3, -3, -5, -8, -6, 0, -11, -2, -8, -5, -1, -6, -1, -8, -8, -2, -2, -5,\
    \ -7, -11, -1, -5, -1, -4, -4, -9, -4, -1, -1, -4, -11, -2, -2,", "\t$sumArray\
    \ = array();\n\tforeach ($nums as $num) {\n\t\t$sumArray[] = array_sum(str_split($num));\n\
    \t}\n\tarray_multisort($sumArray, $nums);\n\treturn $nums;\n}\n", "  // Your code\
    \ goes here...\n}", "\t$result = [];\n\tforeach ($nums as $key => $num) {\n\t\t\
    $result[$key] = array_sum(str_split($num));\n\t}\n\tarray_multisort($result, SORT_ASC,\
    \ $nums);\n\treturn $nums;\n}\n", "  $sum = 0;\n  $result = [];\n  if(empty($nums))\
    \ {\n    return $result;\n  }\n  foreach($nums as $key => $val) {\n    $num =\
    \ $val;\n    while($num != 0) {\n      $sum += $num % 10;\n      $num = floor($num\
    \ / 10);\n    }\n    $result[$key] = $sum;\n    $sum = 0;\n  }\n  asort($result);\n\
    \  $res = [];\n  foreach($result as $key => $val) {\n    $res[] = $nums[$key];\n\
    \  }\n  return $res;\n}\necho implode(\", \", order_by_points([1, 11, -1, -11,\
    \ -12]));", "    $calculatedPoints = array();\n    $indexes = array();\n    foreach\
    \ ($nums as $index => $num) {\n        $points = calculatePoints($num);\n    \
    \    if (!isset($calculatedPoints[$points])) {\n            $calculatedPoints[$points]\
    \ = array();\n        }\n        $calculatedPoints[$points][] = $num;\n      \
    \  $indexes[$points][] = $index;\n    }\n    ksort($calculatedPoints);\n    ksort($indexes);\n\
    \    $result = array();\n    foreach ($indexes as $points => $arrayOfIndexes)\
    \ {\n        foreach ($arrayOfIndexes as $index) {\n            $result[$index]\
    \ = $calculatedPoints[$points][0];\n            array_shift($calculatedPoints[$points]);\n\
    \        }\n    }\n    return $result;\n}\n", "  $points = array();\n  foreach\
    \ ($nums as $index => $num) {\n    $points[$index] = sum_of_digits($num);\n  }\n\
    \  asort($points);\n  $ordered_nums = array();\n  foreach ($points as $index =>\
    \ $point) {\n    $ordered_nums[] = $nums[$index];\n  }\n  return $ordered_nums;\n\
    }\n", "    $result = [];\n    $points = [];\n    $tmp = [];\n    $k = 0;\n   \
    \ $sum = 0;\n    for ($i = 0; $i < count($nums); $i++) {\n        $tmp[$i] = $nums[$i];\n\
    \        if ($nums[$i] < 0) {\n            $tmp[$i] = -1 * $nums[$i];\n      \
    \  }\n        $sum = 0;\n        for ($j = 0; $j < strlen($tmp[$i]); $j++) {\n\
    \            $sum += $tmp[$i][$j];\n        }\n        $points[$i] = $sum;\n \
    \   }\n    for ($i = 0; $i < count($points); $i++) {\n        for ($j = $i + 1;\
    \ $j < count($points); $j++) {\n            if ($points[$i] > $points[$j]) {\n\
    \                $k = $points[$i];\n                $points[$i] = $points[$j];\n\
    \                $points[$j] = $k;\n                $k = $nums[$i];\n        \
    \        $nums[$i] = $nums[$j];\n                $nums[$j] = $k;\n           \
    \ }\n        }\n    }\n    return $nums;\n}\n", "  $result = [];\n  $pairs = [];\n\
    \  for ($i = 0; $i < count($nums); $i++) {\n    $sum = 0;\n    foreach (str_split(strval($nums[$i]))\
    \ as $digit) {\n      $sum += intval($digit);\n    }\n    $pairs[$i] = $sum;\n\
    \  }\n  asort($pairs);\n  foreach ($pairs as $k => $v) {\n    $result[] = $nums[$k];\n\
    \  }\n  return $result;\n}", "    if(!is_array($nums)){\n        return -1;\n\
    \    }\n    else{\n        $arr = [];\n        $arr_str = [];\n        foreach($nums\
    \ as $n){\n            $t = (string)$n;\n            $arr_str[] = $t;\n      \
    \      if(strlen($t) == 1){\n                $sum = (int)$t;\n            }\n\
    \            else{\n                $sum = 0;\n                $a = str_split($t);\n\
    \                foreach($a as $i){\n                    $sum += (int)$i;\n  \
    \              }\n            }\n            $arr[] = $sum;\n        }\n     \
    \   array_multisort($arr, SORT_ASC, $arr_str, SORT_ASC, $nums);\n        return\
    \ $nums;\n    }\n}", "  function sumOfDigits($num) {\n    $num = abs($num);\n\
    \    $sum = 0;\n    while ($num > 0) {\n      $sum += $num % 10;\n      $num =\
    \ (int)($num / 10);\n    }\n    return $sum;\n  }\n  usort($nums, function($a,\
    \ $b) {\n    $aSum = sumOfDigits($a);\n    $bSum = sumOfDigits($b);\n    if ($aSum\
    \ != $bSum) {\n      return $aSum - $bSum;\n    }\n    return 0;\n  });\n  return\
    \ $nums;\n}\n\necho \"order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n\";\necho order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11] ?\n  \"pass\\n\" : \"fail\\n\";\necho \"order_by_points([]) == []\\n\";\n\
    echo order_by_points([]) == [] ? \"pass\\n\" : \"fail\\n\";\necho \"order_by_points([53,\
    \ 343, -123, -433, 11]) == [-123, -433, 11, 53, 343]\\n\";\necho order_by_points([53,\
    \ 343, -123, -433, 11]) == [-123, -433, 11, 53, 343] ?\n  \"pass\\n\" : \"fail\\\
    n\";\necho \"order_by_points([76, 23, 76]) == [23, 76, 76]\\n\";\necho order_by_points([76,\
    \ 23, 76]) == [23, 76, 76] ? \"pass\\n\" : \"fail\\n\";", "    $sum = 0;\n   \
    \ $array = [];\n    foreach ($nums as $key => $value) {\n        if ($value <\
    \ 0) {\n            $value = abs($value);\n        }\n        $sum = array_sum(str_split($value));\n\
    \        $array[$key] = $sum;\n    }\n    asort($array);\n    foreach ($array\
    \ as $key => $value) {\n        $array[$key] = $nums[$key];\n    }\n    return\
    \ $array;\n}\n\nprint_r(order_by_points([1, 11, -1, -11, -12]));\n", "\t$result\
    \ = [];\n\tforeach ($nums as $key => $num) {\n\t\t$result[$key] = array_sum(str_split($num));\n\
    \t}\n\tasort($result);\n\tforeach ($result as $key => $sum) {\n\t\t$result[$key]\
    \ = $nums[$key];\n\t}\n\treturn $result;\n}", "    $ret = [];\n    if (count($nums)\
    \ === 0) return $ret;\n    if (count($nums) === 1) return $nums;\n    for ($i\
    \ = 0; $i < count($nums); $i++) {\n        $ret[$i] = 0;\n        $cur = $nums[$i];\n\
    \        while ($cur > 0) {\n            $ret[$i] += $cur % 10;\n            $cur\
    \ = floor($cur / 10);\n        }\n    }\n    $sorted = $nums;\n    asort($ret);\n\
    \    foreach ($ret as $key => $value) {\n        array_push($sorted, $nums[$key]);\n\
    \    }\n    return $sorted;\n}\n", "    if (!count($nums)) return [];\n    $results\
    \ = [];\n    foreach ($nums as $k => $num) {\n        $results[sum_of_digits($num)][]\
    \ = $num;\n    }\n    ksort($results);\n    $sorted_array = [];\n    foreach ($results\
    \ as $group) {\n        foreach ($group as $num) {\n            $sorted_array[]\
    \ = $num;\n        }\n    }\n    return $sorted_array;\n}\n", "    $res = [];\n\
    \    $n = [];\n    for ($i = 0; $i < count($nums); $i++) {\n        $s = 0;\n\
    \        for ($j = 0; $j < strlen((string) $nums[$i]); $j++) {\n            $s\
    \ += (int) substr((string) $nums[$i], $j, 1);\n        }\n        $n[] = $s;\n\
    \    }\n    $nums = array_combine($nums, $n);\n    asort($nums);\n    foreach\
    \ ($nums as $k => $v) {\n        $res[] = $k;\n    }\n    return $res;\n}\n\n\
    print_r(order_by_points([1, 11, -1, -11, -12]));\nprint_r(order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]);\nprint_r(order_by_points([]) ==\
    \ []);", "    $array = [];\n    foreach ($nums as $key => $value) {\n        $array[$key]\
    \ = explode('.', $value . '.' . abs($value));\n        $array[$key] = array_sum($array[$key]);\n\
    \    }\n    asort($array);\n    $result = [];\n    foreach ($array as $key =>\
    \ $value) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}",
  "    $nums_to_sort = [];\n    foreach ($nums as $i => $num) {\n        $nums_to_sort[$i]\
    \ = [\n            'num' => $num,\n            'sum' => array_sum(str_split(abs($num)))\n\
    \        ];\n    }\n    usort($nums_to_sort, function($a, $b) {\n        if ($a['sum']\
    \ > $b['sum']) {\n            return 1;\n        } elseif ($a['sum'] < $b['sum'])\
    \ {\n            return -1;\n        } else {\n            return 0;\n       \
    \ }\n    });\n    $res = [];\n    foreach ($nums_to_sort as $i => $num) {\n  \
    \      $res[$i] = $num['num'];\n    }\n    return $res;\n}", "    return [];\n\
    }", "    //calculate sum of digits\n    $sum_array = [];\n    foreach ($nums as\
    \ $key => $value) {\n        $sum = 0;\n        while ($value > 0) {\n       \
    \     $sum += $value % 10;\n            $value = intval($value / 10);\n      \
    \  }\n        $sum_array[$key] = $sum;\n    }\n    //order the array\n    asort($sum_array);\n\
    \    $output = [];\n    foreach ($sum_array as $key => $value) {\n        $output[]\
    \ = $nums[$key];\n    }\n    return $output;\n}\n", "    return $nums;\n}\n\n\
    echo \"Should return [-1, -11, 1, -12, 11]\\n\";\nvar_dump(order_by_points([1,\
    \ 11, -1, -11, -12]));\n\necho \"Should return []\\n\";\nvar_dump(order_by_points([]));\n\
    \necho \"Should return [1, 3, 2, 4]\\n\";\nvar_dump(order_by_points([4, 2, 3,\
    \ 1]));\n\necho \"Should return [1, 3, 2, 4]\\n\";\nvar_dump(order_by_points([4,\
    \ 2, 3, 1]));\n\necho \"Should return [1, 2, 3, 4]\\n\";\nvar_dump(order_by_points([0,\
    \ 1, 2, 3]));\n\necho \"Should return [2, 3, 4, 1]\\n\";\nvar_dump(order_by_points([4,\
    \ 1, 2, 3]));\n\necho \"Should return [2, 3, 4, 1]\\n\";\nvar_dump(order_by_points([4,\
    \ 1, 2, 3]));\n\necho \"Should return [1, -12, 1, -11, 11]\\n\";\nvar_dump(order_by_points([1,\
    \ 11, -1, -11, -12]));\n\necho \"Should return [1, 2, -12, -11, 11]\\n\";\nvar_dump(order_by_points([1,\
    \ 11, -1, -11, -12, 2]));\n\necho \"Should return [1, 11, -1, -11, -12, -21]\\\
    n\";\nvar_dump(order_by_points([1, 11, -1, -11, -12, -21]));\n\necho \"Should\
    \ return [1, 2, 11, 1, -11, -12, -21]\\n\";\nvar_dump(order_by_points([1, 11,\
    \ -1, -11, -12, -21, 2]));\n\necho \"Should return [1, 11, -1, -11, -12, -21,\
    \ 2]\\n\";\nvar_dump(order_by", "  $indexs = array_keys($nums);\n  $sumofdigits\
    \ = [];\n  foreach ($nums as $num) {\n    $sumofdigits[] = sum_of_digits($num);\n\
    \  }\n  array_multisort($sumofdigits, SORT_ASC, $indexs, SORT_ASC, $nums);\n \
    \ return $nums;\n}\n", "  // Your solution goes here.\n  $i = 0;\n  $nums_count\
    \ = count($nums);\n  $result = [];\n  foreach ($nums as $num) {\n    $sum = 0;\n\
    \    $num_str = strval($num);\n    for ($j = 0; $j < strlen($num_str); $j++) {\n\
    \      $sum += intval($num_str[$j]);\n    }\n    $result[$i] = $sum;\n    $i++;\n\
    \  }\n  asort($result);\n  $array_keys = array_keys($result);\n  $new_nums = [];\n\
    \  for ($i = 0; $i < $nums_count; $i++) {\n    $new_nums[$i] = $nums[$array_keys[$i]];\n\
    \  }\n  return $new_nums;\n}", "\tfunction get_sum_of_digits($num) {\n\t\treturn\
    \ array_sum(str_split(abs($num)));\n\t}\n\tfunction cmp($a, $b) {\n\t\t$sum_of_digits_a\
    \ = get_sum_of_digits($a);\n\t\t$sum_of_digits_b = get_sum_of_digits($b);\n\t\t\
    if ($sum_of_digits_a > $sum_of_digits_b) {\n\t\t\treturn 1;\n\t\t} elseif ($sum_of_digits_a\
    \ < $sum_of_digits_b) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\tglobal $nums;\n\
    \t\t\treturn array_search($a, $nums) - array_search($b, $nums);\n\t\t}\n\t}\n\t\
    usort($nums, \"cmp\");\n\treturn $nums;\n}\nprint_r(order_by_points([1, 11, -1,\
    \ -11, -12]));", "  // $nums_sorted_by_points = array();\n  $values_and_points\
    \ = array();\n  $points_and_values = array();\n  foreach ($nums as $key => $num)\
    \ {\n    $num_str = strval($num);\n    $sum = 0;\n    for ($i = 0; $i < strlen($num_str);\
    \ $i++) {\n      $sum += intval($num_str[$i]);\n    }\n    $values_and_points[$num]\
    \ = $sum;\n    $points_and_values[$sum][] = $num;\n  }\n  // print_r($values_and_points);\n\
    \  // print_r($points_and_values);\n  ksort($points_and_values);\n  // print_r($points_and_values);\n\
    \  $nums_sorted_by_points = array();\n  foreach ($points_and_values as $point\
    \ => $values) {\n    $values_str = implode(\",\", $values);\n    $values_str =\
    \ explode(\",\", $values_str);\n    $values_str = array_map('intval', $values_str);\n\
    \    $nums_sorted_by_points = array_merge($nums_sorted_by_points, $values_str);\n\
    \  }\n  return $nums_sorted_by_points;\n}\n", "    if(count($nums) == 0) return\
    \ [];\n    $points = array_map(function($x) {\n        return array_sum(str_split($x));\n\
    \    }, $nums);\n    $index = range(0, count($nums)-1);\n    array_multisort($points,\
    \ $index, $nums);\n    return $nums;\n}\n", "  // FILL IT HERE!\n  $sum_of_digits\
    \ = array();\n  $response = array();\n  foreach ($nums as $key => $value) {\n\
    \    $sum_of_digits[$key] = sum_of_digits($value);\n  }\n  asort($sum_of_digits);\n\
    \  foreach ($sum_of_digits as $key => $value) {\n    $response[] = $nums[$key];\n\
    \  }\n  return $response;\n}\n", "  $numsWithPoints = [];\n  foreach ($nums as\
    \ $key => $value) {\n    $points = 0;\n    $value = (string)$value;\n    for ($i\
    \ = 0; $i < strlen($value); $i++) {\n      $points += $value[$i];\n    }\n   \
    \ $numsWithPoints[$value] = $points;\n  }\n  asort($numsWithPoints);\n  $output\
    \ = [];\n  foreach ($numsWithPoints as $key => $value) {\n    $output[] = (int)$key;\n\
    \  }\n  return $output;\n}\n", "  if(count($nums) == 0) {\n    return $nums;\n\
    \  }\n  $points = [];\n  $count = count($nums);\n  $numStrings = [];\n  for($i\
    \ = 0; $i < $count; $i++) {\n    $points[$i] = 0;\n    $numStrings[$i] = (string)\
    \ $nums[$i];\n    $num = $nums[$i];\n    if($num < 0) {\n      $num = -1 * $num;\n\
    \    }\n    while($num > 0) {\n      $points[$i] += $num % 10;\n      $num = (int)\
    \ ($num / 10);\n    }\n  }\n  array_multisort($points, $numStrings);\n  $sortedNums\
    \ = [];\n  for($i = 0; $i < $count; $i++) {\n    $sortedNums[$i] = (int) $numStrings[$i];\n\
    \  }\n  return $sortedNums;\n}", "  for ($i = 0; $i < count($nums); $i++) {\n\
    \    $sum = 0;\n    $num = $nums[$i];\n    if ($num < 0) {\n      $num = -$num;\n\
    \    }\n    while ($num != 0) {\n      $sum += $num % 10;\n      $num = (int)($num\
    \ / 10);\n    }\n    $nums[$i] = $sum * 10 + $i;\n  }\n  sort($nums);\n  for ($i\
    \ = 0; $i < count($nums); $i++) {\n    $nums[$i] = $nums[$i] % 10;\n  }\n  return\
    \ $nums;\n}\n\n$nums = [1, 11, -1, -11, -12];\n$expected = [-1, -11, 1, -12, 11];\n\
    $result = order_by_points($nums);\nif ($result == $expected) {\n  echo 'Success!';\n\
    } else {\n  echo 'Failure...';\n}\n\necho \"\\n\";\n\n$nums = [];\n$expected =\
    \ [];\n$result = order_by_points($nums);\nif ($result == $expected) {\n  echo\
    \ 'Success!';\n} else {\n  echo 'Failure...';\n}\n\necho \"\\n\";\n\n$nums = [0,\
    \ 0, 0, 0, 0];\n$expected = [0, 0, 0, 0, 0];\n$result = order_by_points($nums);\n\
    if ($result == $expected) {\n  echo 'Success!';\n} else {\n  echo 'Failure...';\n\
    }\n\necho \"\\n\";\n\n$nums = [100, 100, -100, -100, -100];\n$expected = [-100,\
    \ -100, -100, 100, 100];\n$result = order_by_points($nums);\nif ($result == $expected)\
    \ {\n  echo 'Success!';\n} else {\n  echo 'Failure...';\n}\n\necho \"\\n\";\n\n\
    $nums = [1, 11, 10, 11, -12];\n$expected = [-12, 1,", "    usort($nums, function($a,\
    \ $b) {\n        $sum_a = array_sum(str_split(abs($a)));\n        $sum_b = array_sum(str_split(abs($b)));\n\
    \        if ($sum_a == $sum_b) {\n            return -1;\n        }\n        return\
    \ $sum_a > $sum_b ? 1 : -1;\n    });\n    return $nums;\n}\necho 'order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]: ';\necho order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11] ? 'PASS' : 'FAIL';\necho '<br>';\necho\
    \ 'order_by_points([]) == []: ';\necho order_by_points([]) == [] ? 'PASS' : 'FAIL';\n\
    echo '<br>';\necho 'order_by_points([-8, -5, -10, -9, -11, -5, -13, -11, -4, -10,\
    \ -6, -11, -12, -9, -6, -11, -8, -13, -12, -4, -7, -6, -4, -12, -12, -9, -11,\
    \ -8, -5, -11, -5, -7, -5, -11, -12, -9, -7, -13, -5, -7, -13, -6, -10, -8, -9,\
    \ -12, -9, -10, -13, -8, -7, -13, -7, -6, -8, -7, -9, -11, -10, -8, -7, -11, -8,\
    \ -12, -12, -11, -13, -11, -7, -9, -9, -7, -8, -11, -12, -5, -7, -11, -8, -12,\
    \ -9, -9, -6, -5, -7, -10, -10, -5", "  $result = array();\n  foreach ($nums as\
    \ $key => $num) {\n    $sum = 0;\n    $length = strlen((string)$num);\n    for\
    \ ($i = 0; $i < $length; $i++) {\n      $sum += (int)$num[$i];\n    }\n    $result[$key]\
    \ = $sum;\n  }\n  asort($result);\n  $return = array();\n  foreach ($result as\
    \ $key => $value) {\n    $return[] = $nums[$key];\n  }\n  return $return;\n}\n",
  "    $points = array_map(function($num) {\n        $digits = str_split(abs($num));\n\
    \        return array_sum($digits);\n    }, $nums);\n    array_multisort($points,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\n", "  $sums = array_map(function($n)\
    \ {\n    $sum = 0;\n    while ($n > 0) {\n      $sum += $n % 10;\n      $n = (int)($n\
    \ / 10);\n    }\n    return $sum;\n  }, $nums);\n  asort($sums);\n  return array_keys($sums);\n\
    }\n", "\n}\n\nclass TestCases extends TestCase\n{\n    public function test_examples()\
    \ {\n        $this->assertEquals(order_by_points([1, 11, -1, -11, -12]), [-1,\
    \ -11, 1, -12, 11]);\n        $this->assertEquals(order_by_points([]), []);\n\
    \    }\n}\n$t = new TestCases();\n$t->test_examples();", "\t// take each number,\
    \ find the sum of its digits, \n\t// and put it in an associative array,\n\t//\
    \ where the key is the sum and the value is the original number\n\n\t// then sort\
    \ the array by the keys\n\t// then loop through the array and add the value (number)\
    \ to the results\n\t// don't forget to sort the numbers in reverse order\n\n\t\
    if(count($nums) == 0) {\n\t\treturn $nums;\n\t}\n\n\t$results = [];\n\t$pointsArray\
    \ = [];\n\n\tforeach($nums as $number) {\n\t\t$points = get_points($number);\n\
    \t\t$pointsArray[$points] = $number;\n\t}\n\n\tksort($pointsArray);\n\n\tforeach($pointsArray\
    \ as $points => $number) {\n\t\tarray_push($results, $number);\n\t}\n\n\treturn\
    \ $results;\n}\n", "  $list = [];\n  $result = [];\n  $list_ints = [];\n  $list_idxs\
    \ = [];\n  $list_cnt = 0;\n  foreach ($nums as $idx => $num) {\n    $sum = 0;\n\
    \    $s = strval($num);\n    for ($i = 0; $i < strlen($s); $i++) {\n      $sum\
    \ += intval($s[$i]);\n    }\n    if (!isset($list[$sum])) {\n      $list[$sum]\
    \ = [];\n      $list_ints[$list_cnt] = $sum;\n      $list_idxs[$list_cnt] = $idx;\n\
    \      $list_cnt++;\n    }\n    $list[$sum][] = $num;\n  }\n  sort($list_ints);\n\
    \  for ($i = 0; $i < $list_cnt; $i++) {\n    $sum = $list_ints[$i];\n    foreach\
    \ ($list[$sum] as $num) {\n      $result[$list_idxs[$i]] = $num;\n      $list_idxs[$i]++;\n\
    \    }\n  }\n  return $result;\n}", "    $sums = [];\n    $result = [];\n    $i\
    \ = 0;\n    foreach ($nums as $num) {\n        $sums[$i] = array_sum(str_split($num));\n\
    \        $i++;\n    }\n    asort($sums);\n    foreach ($sums as $key => $sum)\
    \ {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}", "    $result\
    \ = [];\n    $temp = [];\n    for ($i = 0; $i < count($nums); $i++) {\n      \
    \  $temp[$i] = array_sum(str_split(strval($nums[$i])));\n    }\n    asort($temp);\n\
    \    foreach ($temp as $key => $value) {\n        $result[] = $nums[$key];\n \
    \   }\n    return $result;\n}\necho implode(\", \", order_by_points([1, 11, -1,\
    \ -11, -12]));", "  $result = [];\n  foreach ($nums as $index => $num) {\n   \
    \ $sum = 0;\n    $counter = 0;\n    while ($num > 0) {\n      $sum += $num % 10;\n\
    \      $num = (int)($num / 10);\n      $counter++;\n    }\n    $result[$index]\
    \ = $sum;\n  }\n  asort($result);\n  $sorted_nums = [];\n  foreach ($result as\
    \ $index => $num) {\n    $sorted_nums[] = $nums[$index];\n  }\n  return $sorted_nums;\n\
    }\n", "  $points = [];\n  foreach ($nums as $index => $num) {\n    if ($num >\
    \ 0) {\n      $points[$index] = array_sum(str_split($num));\n    } else {\n  \
    \    $points[$index] = array_sum(str_split(substr($num, 1)));\n    }\n  }\n  asort($points);\n\
    \  $result = [];\n  foreach ($points as $index => $point) {\n    $result[] = $nums[$index];\n\
    \  }\n  return $result;\n}\necho \"\\nOrder by Points\\n\";\necho json_encode(order_by_points([1,\
    \ 11, -1, -11, -12]));\necho \"\\n\";\necho json_encode(order_by_points([]));\n\
    echo \"\\n\";", "\t$nums_str = array_map(function($n) { return (string)$n; },\
    \ $nums);\n\t$res = [];\n\t$sums = [];\n\tfor ($i = 0; $i < count($nums); $i++)\
    \ {\n\t\t$sums[$i] = array_sum(str_split($nums_str[$i]));\n\t}\n\t$sums_sorted\
    \ = $sums;\n\tsort($sums_sorted);\n\tforeach ($sums_sorted as $v) {\n\t\t$res[]\
    \ = $nums[array_search($v, $sums)];\n\t}\n\treturn $res;\n}\n\n$tests = [\n\t\
    [\n\t\t\"input\" => [1, 11, -1, -11, -12],\n\t\t\"expected\" => [-1, -11, 1, -12,\
    \ 11]\n\t],\n\t[\n\t\t\"input\" => [],\n\t\t\"expected\" => []\n\t],\n\t[\n\t\t\
    \"input\" => [1, -1, -11, 12, -12],\n\t\t\"expected\" => [-1, -11, 1, -12, 12]\n\
    \t],\n\t[\n\t\t\"input\" => [1, 1, 1, 1, 1],\n\t\t\"expected\" => [1, 1, 1, 1,\
    \ 1]\n\t],\n\t[\n\t\t\"input\" => [1, -1, 1, -1, 1],\n\t\t\"expected\" => [-1,\
    \ -1, 1, 1, 1]\n\t],\n\t[\n\t\t\"input\" => [50, 10, -1, 2, -12],\n\t\t\"expected\"\
    \ => [-1, 10, -12, 2, 50]\n\t],\n\t[\n\t\t\"input\" => [2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,", "    $points = [];\n\
    \    foreach ($nums as $num) {\n        $points[] = array_sum(str_split($num));\n\
    \    }\n    array_multisort($points, SORT_ASC, $nums);\n    return $nums;\n}\n",
  "    return [];\n}", "    $res = [];\n    foreach ($nums as $key => $val) {\n  \
    \      $sum = 0;\n        while ($val != 0) {\n            $sum += $val % 10;\n\
    \            $val = floor($val / 10);\n        }\n        $res[$key] = $sum;\n\
    \    }\n    asort($res);\n    foreach ($res as $key => $val) {\n        $res[$key]\
    \ = $nums[$key];\n    }\n    return $res;\n}", "    $sums = array_map(function($num)\
    \ {\n        return array_sum(str_split($num));\n    }, $nums);\n    array_multisort($sums,\
    \ $nums);\n    return $nums;\n}\n\n$inputs = [\n    [1, 11, -1, -11, -12],\n \
    \   [],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    [4, 7, 2, 1, 3, -1, 8, 10,\
    \ 9, 5],\n    [2, 3, 4, 5, 6, 7, 8, 9, 10, 1],\n    [31, 42, 13, 14, 52, 16, 17,\
    \ 18, 19, 20],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20],\n    [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\
    \ 1, 2, 3, 4],\n    [56, 67, 78, 89, 90, 123, 234, 21, 34, 45, 56, 67, 78, 89,\
    \ 90, 123, 234, 56, 67, 78, 89, 90, 123, 234],\n    [10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4", "  \
    \  $sort_arr = array();\n    $sorted_arr = array();\n    foreach ($nums as $key\
    \ => $value) {\n        $sum = 0;\n        $digits = str_split($value);\n    \
    \    foreach ($digits as $key => $digit) {\n            $sum += $digit;\n    \
    \    }\n        $sort_arr[$key] = $sum;\n    }\n    asort($sort_arr);\n    foreach\
    \ ($sort_arr as $key => $value) {\n        $sorted_arr[] = $nums[$key];\n    }\n\
    \    return $sorted_arr;\n}", "    foreach ($nums as $key => $value) {\n     \
    \   $nums[$key] = [$value, array_sum(str_split($value))];\n    }\n    $points\
    \ = array_column($nums, 1);\n    array_multisort($points, SORT_ASC, $nums);\n\
    \    $nums = array_column($nums, 0);\n    return $nums;\n}\n", "\t$res = [];\n\
    \tforeach ($nums as $index => $value) {\n\t\t$tmp = array_sum(str_split($value));\n\
    \t\t$res[$index] = $tmp;\n\t}\n\tasort($res);\n\t$result = [];\n\tforeach ($res\
    \ as $index => $value) {\n\t\t$result[] = $nums[$index];\n\t}\n\treturn $result;\n\
    }\n", "\t$res = [];\n\tforeach ($nums as $key => $num) {\n\t\t$res[$key] = sumDigits($num);\n\
    \t}\n\tasort($res);\n\t$result = [];\n\tforeach ($res as $key => $value) {\n\t\
    \t$result[] = $nums[$key];\n\t}\n\treturn $result;\n}", "  return $nums;\n}\n\
    print_r(order_by_points([1, 11, -1, -11, -12]));\n", "\t// create a function to\
    \ sum the digits\n\tfunction sum_digits($n) {\n\t\t// check if it's negative\n\
    \t\tif ($n < 0) {\n\t\t\t$n = -$n;\n\t\t}\n\t\t$sum = 0;\n\t\twhile ($n > 0) {\n\
    \t\t\t$sum += $n % 10;\n\t\t\t$n = floor($n / 10);\n\t\t}\n\t\treturn $sum;\n\t\
    }\n\t// create a function to compare 2 number\n\tfunction sort_by_sum($a, $b)\
    \ {\n\t\t$sum_a = sum_digits($a);\n\t\t$sum_b = sum_digits($b);\n\t\tif ($sum_a\
    \ === $sum_b) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn ($sum_a < $sum_b) ? -1 : 1;\n\
    \t}\n\t// use usort\n\tusort($nums, 'sort_by_sum');\n\treturn $nums;\n}", "  $sums\
    \ = [];\n  foreach ($nums as $i => $n) {\n    $sums[$i] = array_sum(str_split(abs($n)));\n\
    \  }\n  asort($sums);\n  $result = [];\n  foreach ($sums as $i => $sum) {\n  \
    \  $result[] = $nums[$i];\n  }\n  return $result;\n}\n", "  // TODO: write your\
    \ code here\n}\necho order_by_points([1, 11, -1, -11, -12]);", "  $arr = [];\n\
    \  foreach ($nums as $key => $num) {\n    $arr[$key] = array_sum(str_split(abs($num)));\n\
    \  }\n  asort($arr);\n  $result = [];\n  foreach ($arr as $key => $num) {\n  \
    \  $result[] = $nums[$key];\n  }\n  return $result;\n}\n", "    $points = [];\n\
    \    foreach ($nums as $key => $num) {\n        $points[$key] = array_sum(str_split($num));\n\
    \    }\n    asort($points);\n    $result = [];\n    foreach ($points as $key =>\
    \ $point) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n",
  "  $result = [];\n  foreach ($nums as $num) {\n    $result[array_sum(str_split($num))][]\
    \ = $num;\n  }\n  ksort($result);\n  $result = call_user_func_array('array_merge',\
    \ $result);\n  return $result;\n}\necho \"<pre>\";\nvar_dump(order_by_points([1,\
    \ 11, -1, -11, -12]));\necho \"</pre>\";", "    $ordered = [];\n    $len = count($nums);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        $ordered[$i] = $nums[$i];\n    }\n\
    \    usort($ordered, function($a, $b) {\n        $sumA = array_sum(str_split(abs($a)));\n\
    \        $sumB = array_sum(str_split(abs($b)));\n        return $sumA == $sumB\
    \ ? 0 : ($sumA < $sumB ? -1 : 1);\n    });\n    return $ordered;\n}\n", "  $length\
    \ = count($nums);\n  for ($i = 0; $i < $length; $i++) {\n    for ($j = 0; $j <\
    \ $length - 1; $j++) {\n      $sum_j = array_sum(str_split($nums[$j]));\n    \
    \  $sum_j_plus_1 = array_sum(str_split($nums[$j + 1]));\n      if ($sum_j > $sum_j_plus_1)\
    \ {\n        $temp = $nums[$j];\n        $nums[$j] = $nums[$j + 1];\n        $nums[$j\
    \ + 1] = $temp;\n      }\n    }\n  }\n  return $nums;\n}\n\necho \"order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]:\";\nvar_dump(order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]);\necho \"<br>\";\necho \"order_by_points([])\
    \ == []:\";\nvar_dump(order_by_points([]) == []);", "  $output = [];\n  foreach\
    \ ($nums as $key => $num) {\n    $output[$key] = sum_of_digits($num);\n  }\n \
    \ asort($output);\n  $reordered = [];\n  foreach ($output as $key => $val) {\n\
    \    $reordered[] = $nums[$key];\n  }\n  return $reordered;\n}\n", "    // (1)\
    \ Calculate the sum of the digits for each number,\n    //     store it in an\
    \ array.\n    //     We don't need to worry about $nums being empty,\n    // \
    \    since PHP will return an empty array.\n    $sums = array_map(function($n)\
    \ {\n        return array_sum(str_split($n));\n    }, $nums);\n\n    // (2) Now\
    \ we can sort the array!\n    array_multisort($sums, $nums);\n\n    return $nums;\n\
    }\n", "    return [];\n}", "  $map = [];\n  foreach ($nums as $idx => $num) {\n\
    \    $map[$idx] = $num;\n  }\n  uasort($map, function($num1, $num2) {\n    return\
    \ strlen($num1) - strlen($num2);\n  });\n  return array_values($map);\n}\n\nprint_r(order_by_points([1,\
    \ 11, -1, -11, -12]));\nprint_r(order_by_points([]));", "\tif (empty($nums)) {\n\
    \t\treturn [];\n\t}\n\t$orderedNums = [];\n\tforeach ($nums as $key => $val) {\n\
    \t\tif ($val > 0) {\n\t\t\t$orderedNums[$key] = intval(array_sum(str_split($val)));\n\
    \t\t} else {\n\t\t\t$orderedNums[$key] = (intval(array_sum(str_split($val))) *\
    \ -1);\n\t\t}\n\t}\n\tasort($orderedNums);\n\tforeach ($orderedNums as $key =>\
    \ $val) {\n\t\t$orderedNums[$key] = $nums[$key];\n\t}\n\treturn $orderedNums;\n\
    }\n", "  if (count($nums) < 2) return $nums;\n  $points = array_map('calculate_points',\
    \ $nums);\n  array_multisort($points, SORT_ASC, $nums);\n  return $nums;\n}\n",
  "  return [];\n}\necho \"order_by_points([1, 11, -1, -11, -12]) = \" . order_by_points([1,\
    \ 11, -1, -11, -12]) . \"\\n\";\necho \"order_by_points([]) = \" . order_by_points([])\
    \ . \"\\n\";", "  $map = array();\n  foreach ($nums as $i => $num) {\n    $sum\
    \ = 0;\n    $n = abs($num);\n    while ($n > 0) {\n      $sum += $n % 10;\n  \
    \    $n = floor($n / 10);\n    }\n    $map[$i] = $sum;\n  }\n  asort($map);\n\
    \  $result = array();\n  foreach ($map as $i => $sum) {\n    $result[] = $nums[$i];\n\
    \  }\n  return $result;\n}", "    $nums_arr = [];\n    foreach ($nums as $key\
    \ => $val) {\n        $nums_arr[$key] = (string) $val;\n    }\n    $result = [];\n\
    \    foreach ($nums_arr as $key => $val) {\n        $split_num = str_split($val);\n\
    \        $sum = 0;\n        foreach ($split_num as $num) {\n            $sum +=\
    \ $num;\n        }\n        $result[$key] = $sum;\n    }\n    array_multisort($result,\
    \ SORT_ASC, $nums);\n    return $nums;\n}", "\tif(count($nums)==0) return [];\n\
    \t//get sum of digits per number\n\tforeach($nums as $k=>$v){\n\t\t$parts = explode('-',\
    \ $v);\n\t\t$sum=0;\n\t\tif(count($parts)>1){\n\t\t\t$parts = array_reverse($parts);\n\
    \t\t\tforeach($parts as $part){\n\t\t\t\t$digits = str_split($part);\n\t\t\t\t\
    foreach($digits as $digit){\n\t\t\t\t\t$sum+=intval($digit);\n\t\t\t\t}\n\t\t\t\
    }\n\t\t}\n\t\telse{\n\t\t\t$digits = str_split($v);\n\t\t\tforeach($digits as\
    \ $digit){\n\t\t\t\t$sum+=intval($digit);\n\t\t\t}\n\t\t}\n\t\t$sums[$v]=$sum;\n\
    \t}\n\t//sort in ascending order\n\tasort($sums);\n\t//return array of numbers\
    \ in ascending order of their sum of digits\n\tforeach($sums as $k=>$v){\n\t\t\
    $nums_sort[]=$k;\n\t}\n\treturn $nums_sort;\n}", "    // Your code here\n}\n\n\
    $desc = 'Basic tests';\n$result = order_by_points([1, 11, -1, -11, -12]);\n$expected\
    \ = [-1, -11, 1, -12, 11];\necho \"$desc: \" . (json_encode($result) == json_encode($expected)\
    \ ? \"PASS\\n\" : \"FAIL\\n\");\n\n$desc = 'Empty list';\n$result = order_by_points([]);\n\
    $expected = [];\necho \"$desc: \" . (json_encode($result) == json_encode($expected)\
    \ ? \"PASS\\n\" : \"FAIL\\n\");\n\n$desc = 'Sample input 1';\n$result = order_by_points([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1", "    // Write your solution here\n}", "\t\
    $unsorted_results = [];\n\tforeach ($nums as $num) {\n\t\t$unsorted_results[]\
    \ = [$num, sum_digits($num)];\n\t}\n\t$sorted_results = usort($unsorted_results,\
    \ function($a, $b) {\n\t\tif ($a[1] == $b[1]) {\n\t\t\treturn $a[0] - $b[0];\n\
    \t\t}\n\t\treturn $a[1] - $b[1];\n\t});\n\t$sorted_points = [];\n\tforeach ($unsorted_results\
    \ as $result) {\n\t\t$sorted_points[] = $result[0];\n\t}\n\treturn $sorted_points;\n\
    }\n", "  $order_by_points = array();\n  $sum_of_digit = array();\n  foreach ($nums\
    \ as $key => $num) {\n    $order_by_points[$key] = $num;\n    $sum_of_digit[$key]\
    \ = digit_sum($num);\n  }\n  array_multisort($sum_of_digit, SORT_ASC, $order_by_points);\n\
    \  return $order_by_points;\n}\n", "  $sum_array = array();\n  foreach ($nums\
    \ as $index => $num) {\n    $sum = 0;\n    for ($i = 0; $i < strlen($num); $i++)\
    \ {\n      $sum += intval($num[$i]);\n    }\n    $sum_array[$index] = $sum;\n\
    \  }\n  array_multisort($sum_array, $nums);\n  return $nums;\n}\n", "\t$new_nums\
    \ = [];\n\tfor ($i = 0; $i < count($nums); $i++) {\n\t\t$sum = 0;\n\t\tfor ($j\
    \ = 0; $j < strlen($nums[$i]); $j++) {\n\t\t\t$sum += $nums[$i][$j];\n\t\t}\n\t\
    \t$new_nums[$sum][] = $nums[$i];\n\t}\n\tksort($new_nums);\n\t$nums = [];\n\t\
    foreach ($new_nums as $new_num) {\n\t\tforeach ($new_num as $num) {\n\t\t\t$nums[]\
    \ = $num;\n\t\t}\n\t}\n\treturn $nums;\n}\n\n$tests = [\n\t[1, 11, -1, -11, -12],\n\
    \t[],\n\t[11, -2, 0, -1, -11, -10],\n\t[-1, -11, -111, -101, -2, 1, 0, 11, -1,\
    \ -11, -12, 12, -2, -22, 102],\n\t[-1, -11, -111, -101, -2, 1, 0, 11, -1, -11,\
    \ -12, 12, -2, -22, 102, 9, 10, 200],\n\t[11, -2, 0, -1, -11, -10, 22, 20, -101,\
    \ -100, 100, 101, -11, -22, -11, -10, -12, -10, 1, 0, -1, -11, -10, 1, 0, -1,\
    \ -11, -10, 1, 0, -1, -11, -10, 0, -1, -11, -10, 1, 0, -1, -11, -10, 1, 0, -1,\
    \ -11, -10, 11, -2, 0, -1, -11, -10, 1, 0, -1, -11, -10, 1, 0, -1, -11, -10, 1,\
    \ 0, -1, -11, -10, 1, 0, -1, -11, -", "    // your code goes here\n    $num_sum\
    \ = [];\n    $ordered_num = [];\n    $new_nums = [];\n    foreach ($nums as $key\
    \ => $num) {\n        $count = 0;\n        while ($num !== 0) {\n            $count\
    \ += $num % 10;\n            $num = floor($num / 10);\n        }\n        $num_sum[$key]\
    \ = $count;\n    }\n    asort($num_sum);\n    foreach ($num_sum as $key => $num)\
    \ {\n        $ordered_num[] = $nums[$key];\n    }\n    return $ordered_num;\n\
    }\n\necho \"<pre>\";\nprint_r(order_by_points([1, 11, -1, -11, -12]));\necho \"\
    </pre>\";\n", "\t$result = [];\n\t$index = [];\n\t$index = array_map(function($elem)\
    \ {\n\t\treturn array_sum(str_split($elem));\n\t}, $nums);\n\tarray_multisort($index,\
    \ $nums);\n\treturn $nums;\n}", "    $points = array_map(function($num) {\n  \
    \      $sum = 0;\n        $num = abs($num);\n        while ($num > 0) {\n    \
    \        $sum += $num % 10;\n            $num = (int)($num / 10);\n        }\n\
    \        return $sum;\n    }, $nums);\n    array_multisort($points, SORT_ASC,\
    \ $nums);\n    return $nums;\n}\necho \"Exercise 2:\\n\";\nvar_dump(order_by_points([1,\
    \ 11, -1, -11, -12]));\nvar_dump(order_by_points([]));\n", "    // This is a mistake.\n\
    \    // It sorts the points, but it doesn't remember what\n    // number it came\
    \ from.\n    // sort($nums);\n    // return $nums;\n\n    // Instead, create a\
    \ new array of points, then sort that.\n    // This keeps the original numbers\
    \ in place, but now\n    // we have to look them up.\n    $points = array();\n\
    \    foreach ($nums as $index => $num) {\n        $points[$index] = calc_point($num);\n\
    \    }\n    asort($points);\n\n    // Create a new array of sorted nums.\n   \
    \ $sorted_nums = array();\n    foreach ($points as $index => $point) {\n     \
    \   $sorted_nums[] = $nums[$index];\n    }\n    return $sorted_nums;\n}\n", " \
    \ $result = [];\n  $map = [];\n  $current_idx = 0;\n  foreach ($nums as $num)\
    \ {\n    $map[$num] = array_sum(str_split($num));\n  }\n  asort($map);\n  foreach\
    \ ($map as $num => $sum) {\n    $result[] = $num;\n  }\n  return $result;\n}\n",
  "    $keyed = [];\n    foreach ($nums as $i => $num) {\n        $sum = array_sum(str_split(abs($num)));\n\
    \        $keyed[$sum][] = $num;\n    }\n    ksort($keyed);\n    $sorted = [];\n\
    \    foreach ($keyed as $points => $items) {\n        sort($items);\n        foreach\
    \ ($items as $item) {\n            $sorted[] = $item;\n        }\n    }\n    return\
    \ $sorted;\n}\n", "  $array = array();\n  foreach ($nums as $key => $val) {\n\
    \    $array[$key] = array_sum(str_split($val));\n  }\n  array_multisort($array,\
    \ SORT_ASC, $nums);\n  return $nums;\n}", "  $sum_arr = [];\n  foreach ($nums\
    \ as $key => $value) {\n    $sum = 0;\n    foreach (str_split($value) as $val)\
    \ {\n      $sum += $val;\n    }\n    $sum_arr[$key] = $sum;\n  }\n  // $points_arr\
    \ = array_combine($sum_arr, $nums);\n  // asort($points_arr);\n  // var_dump($points_arr);\n\
    \  // var_dump($sum_arr);\n  asort($sum_arr);\n  foreach ($sum_arr as $key =>\
    \ $value) {\n    $points_arr[] = $nums[$key];\n  }\n  return $points_arr;\n}\n",
  "  $array_key_value = [];\n  foreach ($nums as $key => $num) {\n    $sum = 0;\n\
    \    foreach (str_split($num) as $value) {\n      $sum += (int)$value;\n    }\n\
    \    $array_key_value[$key] = $sum;\n  }\n  asort($array_key_value);\n  $sorted_array\
    \ = [];\n  foreach ($array_key_value as $key => $value) {\n    $sorted_array[]\
    \ = $nums[$key];\n  }\n  return $sorted_array;\n}\necho \"<pre>\";\nvar_dump(order_by_points([1,\
    \ 11, -1, -11, -12]));\nvar_dump(order_by_points([]));\nvar_dump(order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]);\nvar_dump(order_by_points([])\
    \ == []);\necho \"</pre>\";", "  usort($nums, 'compare_by_points');\n  return\
    \ $nums;\n}\n", "    if (count($nums) === 0) {\n        return $nums;\n    }\n\
    \n    for ($i = 0; $i < count($nums); $i++) {\n        $sum = 0;\n        $digits\
    \ = str_split($nums[$i]);\n        foreach ($digits as $digit) {\n           \
    \ $sum += intval($digit);\n        }\n        $nums[$i] = [$nums[$i], $sum];\n\
    \    }\n\n    // custom sort\n    $len = count($nums);\n    for ($i = 0; $i <\
    \ $len; $i++) {\n        for ($j = 0; $j < $len - 1; $j++) {\n            if ($nums[$j][1]\
    \ === $nums[$j + 1][1]) {\n                if ($nums[$j][0] > $nums[$j + 1][0])\
    \ {\n                    $t = $nums[$j];\n                    $nums[$j] = $nums[$j\
    \ + 1];\n                    $nums[$j + 1] = $t;\n                }\n        \
    \    } else if ($nums[$j][1] > $nums[$j + 1][1]) {\n                $t = $nums[$j];\n\
    \                $nums[$j] = $nums[$j + 1];\n                $nums[$j + 1] = $t;\n\
    \            }\n        }\n    }\n\n    for ($i = 0; $i < count($nums); $i++)\
    \ {\n        $nums[$i] = $nums[$i][0];\n    }\n\n    return $nums;\n}\n", "  \
    \  $sum = array_map(function($a) {\n        return array_sum(str_split($a));\n\
    \    }, $nums);\n    asort($sum);\n    $out = [];\n    foreach ($sum as $index\
    \ => $value) {\n        $out[] = $nums[$index];\n    }\n    return $out;\n}\n\n\
    echo var_export(order_by_points([1, 11, -1, -11, -12]), true) . PHP_EOL;", "\t\
    if(empty($nums)) {\n\t\treturn [];\n\t}\n\t\n\tfor($i = 0; $i < count($nums);\
    \ $i++) {\n\t\t$arr = explode('',$nums[$i]);\n\t\t$sum = 0;\n\t\tfor($j = 0; $j\
    \ < count($arr); $j++) {\n\t\t\t$sum += $arr[$j];\n\t\t}\n\t\t$nums[$i] = [$nums[$i],\
    \ $sum];\n\t}\n\tusort($nums, function($a, $b) {\n\t\tif($a[1] == $b[1]) {\n\t\
    \t\treturn $a[0] - $b[0];\n\t\t}\n\t\treturn $a[1] - $b[1];\n\t});\n\t\n\t$res\
    \ = [];\n\tfor($i = 0; $i < count($nums); $i++) {\n\t\t$res[] = $nums[$i][0];\n\
    \t}\n\treturn $res;\n}", "    usort($nums, function($a, $b) {\n        $sumA =\
    \ array_sum(str_split($a));\n        $sumB = array_sum(str_split($b));\n     \
    \   if ($sumA == $sumB) return $a < $b;\n        return $sumA > $sumB;\n    });\n\
    \    return $nums;\n}\n", "  $order_by_points = [];\n  $total = 0;\n  foreach\
    \ ($nums as $key => $num) {\n    for ($i = strlen($num); $i > 0; $i--) {\n   \
    \   $total += substr($num, $i-1, 1);\n    }\n    $order_by_points[$key] = $total;\n\
    \    $total = 0;\n  }\n  asort($order_by_points);\n  return array_keys($order_by_points);\n\
    }\n", "    // your code here\n}\n", "    $sumDigits = [];\n    foreach ($nums\
    \ as $key => $num) {\n        $sumDigits[$key] = array_sum(str_split(abs($num)));\n\
    \    }\n    asort($sumDigits);\n    $result = [];\n    foreach ($sumDigits as\
    \ $key => $val) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n\
    }\n\nvar_dump(order_by_points([1, 11, -1, -11, -12]));\nvar_dump(order_by_points([]));",
  "  $sums = [];\n  foreach ($nums as $key => $num) {\n    $sums[$key] = array_sum(str_split(abs($num)));\n\
    \  }\n  asort($sums);\n  $result = [];\n  foreach ($sums as $key => $sum) {\n\
    \    $result[] = $nums[$key];\n  }\n  return $result;\n}\n", "  if (empty($nums))\
    \ {\n    return $nums;\n  }\n\n  // Recursively sort numbers in ascending order\
    \ by their sum of digits\n  $sorted_nums = array();\n  while (!empty($nums)) {\n\
    \    $lowest_num = null;\n    $lowest_sum = null;\n    $lowest_index = null;\n\
    \    foreach ($nums as $index => $num) {\n      $sum = sum_digits($num);\n   \
    \   if ($lowest_num === null || $sum < $lowest_sum || ($sum === $lowest_sum &&\
    \ $index < $lowest_index)) {\n        $lowest_num = $num;\n        $lowest_sum\
    \ = $sum;\n        $lowest_index = $index;\n      }\n    }\n    $sorted_nums[]\
    \ = $lowest_num;\n    unset($nums[$lowest_index]);\n  }\n\n  return $sorted_nums;\n\
    }\n", "    $arr = [];\n    foreach ($nums as $key => $num) {\n        $string\
    \ = str_split(abs($num));\n        $sum = array_sum($string);\n        $arr[$key]\
    \ = [$sum, $num];\n    }\n    usort($arr, function ($a, $b) {\n        return\
    \ $a[0] - $b[0];\n    });\n    foreach ($arr as $key => $val) {\n        $nums[$key]\
    \ = $val[1];\n    }\n    return $nums;\n}\n", "    $points = [];\n    $output\
    \ = [];\n    $counter = 0;\n    foreach ($nums as $key => $num) {\n        $points[$key]\
    \ = array_sum(str_split($num));\n    }\n    asort($points);\n    foreach ($points\
    \ as $key => $point) {\n        $output[$counter] = $nums[$key];\n        $counter++;\n\
    \    }\n    return $output;\n}\n\nprint_r(order_by_points([1, 11, -1, -11, -12]));",
  "  if (empty($nums)) {\n    return $nums;\n  }\n  $sums = [];\n  foreach ($nums\
    \ as $key => $num) {\n    $sums[$key] = abs(sum_of_digits($num));\n  }\n  asort($sums);\n\
    \  $result = [];\n  foreach ($sums as $key => $sum) {\n    $result[] = $nums[$key];\n\
    \  }\n  return $result;\n}\n", "    $result = [];\n    $all = [];\n    foreach\
    \ ($nums as $key => $value) {\n        $temp = array_sum(str_split($value));\n\
    \        $all[$temp][] = $value;\n    }\n    ksort($all);\n    foreach ($all as\
    \ $key => $value) {\n        foreach ($value as $num) {\n            $result[]\
    \ = $num;\n        }\n    }\n    return $result;\n}\n\necho \"<pre>\";\nvar_dump(order_by_points([1,\
    \ 11, -1, -11, -12]));\nvar_dump(order_by_points([]));\necho \"</pre>\";", " \
    \   $vals = array_map(function($num) {\n        $sum = 0;\n        foreach (str_split($num)\
    \ as $digit) {\n            $sum += intval($digit);\n        }\n        return\
    \ $sum;\n    }, $nums);\n    asort($vals);\n    $res = [];\n    foreach ($vals\
    \ as $key => $val) {\n        $res[] = $nums[$key];\n    }\n    return $res;\n\
    }\n", "    $sum = [];\n    foreach ($nums as $key => $value) {\n        $sum[$key]\
    \ = 0;\n        for ($i = 0; $i < strlen($value); $i++) {\n            $sum[$key]\
    \ += intval($value[$i]);\n        }\n    }\n    array_multisort($sum, SORT_ASC,\
    \ $nums);\n    return $nums;\n}\n\necho \"<pre>\";\nprint_r(order_by_points([1,\
    \ 11, -1, -11, -12]));\necho \"</pre>\";", "\t$output = array();\n\t$buffer =\
    \ array();\n\tforeach ($nums as $key => $num) {\n\t\t$buffer[$key] = sum_digits($num);\n\
    \t}\n\tasort($buffer);\n\tforeach ($buffer as $key => $value) {\n\t\t$output[]\
    \ = $nums[$key];\n\t}\n\treturn $output;\n}\n", "    $digits = [];\n    foreach\
    \ ($nums as $k => $v) {\n        $digits[$k] = array_sum(str_split($v));\n   \
    \ }\n    asort($digits);\n    $result = [];\n    foreach ($digits as $k => $v)\
    \ {\n        $result[] = $nums[$k];\n    }\n    return $result;\n}\necho \"==\
    \ Should be 1, -1, 11, -11, -12 ==<br>\";\nprint_r(order_by_points([1, 11, -1,\
    \ -11, -12]));\necho \"<br>\";\necho \"== Should be -1, -11, 1, -12, 11 ==<br>\"\
    ;\nprint_r(order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]);\n\
    echo \"<br>\";\necho \"== Should be [] ==<br>\";\nprint_r(order_by_points([]));\n\
    echo \"<br>\";\necho \"== Should be [] ==<br>\";\nprint_r(order_by_points([])\
    \ == []);\necho \"<br>\";", "    if(!is_array($nums)) {\n        return NULL;\n\
    \    }\n    $size = count($nums);\n    for($i = 0; $i < $size - 1; $i++) {\n \
    \       for($j = $i + 1; $j < $size; $j++) {\n            if(sum_digits($nums[$i])\
    \ > sum_digits($nums[$j])) {\n                $temp = $nums[$i];\n           \
    \     $nums[$i] = $nums[$j];\n                $nums[$j] = $temp;\n           \
    \ }\n        }\n    }\n    return $nums;\n}\n", "    $newArray = [];\n    $sumsArray\
    \ = [];\n    foreach ($nums as $num) {\n        array_push($newArray, $num);\n\
    \        array_push($sumsArray, ($num % 10) + ($num / 10));\n    }\n    for ($i\
    \ = 0; $i < count($newArray); $i++) {\n        for ($j = 0; $j < count($newArray)\
    \ - 1; $j++) {\n            if ($sumsArray[$j] > $sumsArray[$j + 1]) {\n     \
    \           $temp = $sumsArray[$j];\n                $sumsArray[$j] = $sumsArray[$j\
    \ + 1];\n                $sumsArray[$j + 1] = $temp;\n                $temp =\
    \ $newArray[$j];\n                $newArray[$j] = $newArray[$j + 1];\n       \
    \         $newArray[$j + 1] = $temp;\n            }\n        }\n    }\n    return\
    \ $newArray;\n}\n", "  $nums_map = [];\n  foreach ($nums as $index => $num) {\n\
    \    $sum = 0;\n    $num_abs = abs($num);\n    while ($num_abs > 0) {\n      $sum\
    \ += $num_abs % 10;\n      $num_abs = floor($num_abs / 10);\n    }\n    $nums_map[$index]\
    \ = $sum;\n  }\n  asort($nums_map);\n  $result = [];\n  foreach ($nums_map as\
    \ $index => $sum) {\n    $result[] = $nums[$index];\n  }\n  return $result;\n}",
  "    $dict = [];\n    foreach ($nums as $idx => $num) {\n        $sum = 0;\n   \
    \     foreach (str_split($num) as $digit) {\n            $sum += $digit;\n   \
    \     }\n        $dict[$idx] = $sum;\n    }\n    asort($dict);\n    $arr = [];\n\
    \    foreach ($dict as $key => $value) {\n        $arr[] = $nums[$key];\n    }\n\
    \    return $arr;\n}", "  // TODO: implement the function here\n  if (count($nums)\
    \ === 0) {\n    return [];\n  }\n\n  $results = [];\n  foreach ($nums as $key\
    \ => $num) {\n    $results[$key] = 0;\n    for ($i = 0; $i < strlen($num); $i++)\
    \ {\n      $results[$key] += $num[$i];\n    }\n  }\n\n  // sort\n  asort($results);\n\
    \n  // reorder\n  $results = array_flip($results);\n  $results = array_keys($results);\n\
    \n  // append nums\n  foreach ($results as $key => $result) {\n    $results[$key]\
    \ = $nums[$result];\n  }\n\n  return $results;\n}", "    $i = 0;\n    $s = 0;\n\
    \    $sum = 0;\n    $count = count($nums);\n    while ($i < $count) {\n      \
    \  $s = $nums[$i];\n        while ($s != 0) {\n            $sum += $s % 10;\n\
    \            $s = (int)($s / 10);\n        }\n        $sum_arr[$i] = $sum;\n \
    \       $sum = 0;\n        $i++;\n    }\n    array_multisort($sum_arr, $nums);\n\
    \    return $nums;\n}\nprint_r(order_by_points([1, 11, -1, -11, -12]));", "  //\
    \ your code here\n}", "    // Implement me\n}\n", "    $buckets = array();\n \
    \   foreach ($nums as $i => $num) {\n        $points = digit_sum($num);\n    \
    \    if (!isset($buckets[$points])) {\n            $buckets[$points] = array();\n\
    \        }\n        $buckets[$points][] = $num;\n    }\n    ksort($buckets);\n\
    \    $result = array();\n    foreach ($buckets as $nums) {\n        $result =\
    \ array_merge($result, $nums);\n    }\n    return $result;\n}\n", "    $value_index_map\
    \ = [];\n    foreach ($nums as $index => $num) {\n        $value_index_map[$num]\
    \ = $index;\n    }\n    // convert values to sums of their digits\n    $value_index_map\
    \ = array_map(function($num) {\n        $sum = 0;\n        $num = abs($num);\n\
    \        while ($num != 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        return $sum;\n    }, $value_index_map);\n\
    \    // use custom compare function, which uses original index as second criterium\n\
    \    uasort($value_index_map, function($a, $b) use ($nums) {\n        if ($a <\
    \ $b) {\n            return -1;\n        } else if ($a > $b) {\n            return\
    \ 1;\n        } else {\n            return $nums[$a] < $nums[$b] ? -1 : 1;\n \
    \       }\n    });\n    // convert to array of values sorted by the sum of their\
    \ digits\n    $sorted_nums = array_keys($value_index_map);\n    return $sorted_nums;\n\
    }\n$test = [1, 11, -1, -11, -12];\nassert(order_by_points($test) == [-1, -11,\
    \ 1, -12, 11]);\nassert(order_by_points([]) == []);", "    $sums = array_map(\n\
    \        function($n) {\n            return [$n, array_sum(str_split($n))];\n\
    \        },\n        $nums\n    );\n    usort($sums, function($a, $b) {\n    \
    \    if ($a[1] == $b[1]) {\n            return $a[0] < $b[0] ? -1 : 1;\n     \
    \   }\n        return $a[1] < $b[1] ? -1 : 1;\n    });\n    return array_map(function($e)\
    \ {\n        return $e[0];\n    }, $sums);\n}\n", "    $nums = array_map(\n  \
    \      function($val) {\n            return abs($val);\n        },\n        $nums\n\
    \    );\n    $nums = array_map(\n        function($val) {\n            return\
    \ str_split($val);\n        },\n        $nums\n    );\n    $nums = array_map(\n\
    \        function($val) {\n            return array_sum($val);\n        },\n \
    \       $nums\n    );\n    asort($nums);\n    return array_keys($nums);\n}\necho\
    \ \"TEST 1:\" . PHP_EOL;\nprint_r(order_by_points([1, 11, -1, -11, -12]));\necho\
    \ PHP_EOL;\necho \"TEST 2:\" . PHP_EOL;\nprint_r(order_by_points([]));\necho PHP_EOL;\n",
  "  usort($nums, function($a, $b) {\n    $a_sum = array_sum(str_split($a));\n   \
    \ $b_sum = array_sum(str_split($b));\n    if ($a_sum == $b_sum) {\n      return\
    \ $a < $b ? -1 : 1;\n    }\n    return $a_sum < $b_sum ? -1 : 1;\n  });\n  return\
    \ $nums;\n}\n", "    if(empty($nums)){\n        return [];\n    }\n\n    $sums\
    \ = array_map('sum_digits', $nums);\n    arsort($sums);\n    $nums_sorted = [];\n\
    \    foreach($sums as $index => $sum){\n        $nums_sorted[] = $nums[$index];\n\
    \    }\n    return $nums_sorted;\n}\n", "  if(sizeof($nums) == 0) {\n    return\
    \ $nums;\n  }\n  $result = array();\n  $nums_sum = array();\n  for($i = 0; $i\
    \ < sizeof($nums); $i++) {\n    $sum = 0;\n    for($j = 0; $j < strlen((string)$nums[$i]);\
    \ $j++) {\n      $sum += (int)$nums[$i][$j];\n    }\n    $nums_sum[$i] = $sum;\n\
    \  }\n  asort($nums_sum);\n  foreach($nums_sum as $key => $value) {\n    array_push($result,\
    \ $nums[$key]);\n  }\n  return $result;\n}\n", "    return $nums;\n}", "    $nums_by_sum\
    \ = [];\n    foreach ($nums as $key => $num) {\n        $num_abs = abs($num);\n\
    \        $sum = 0;\n        while ($num_abs > 0) {\n            $sum += $num_abs\
    \ % 10;\n            $num_abs = intval($num_abs / 10);\n        }\n        $nums_by_sum[$key]\
    \ = $sum;\n    }\n    asort($nums_by_sum);\n    $result = [];\n    foreach ($nums_by_sum\
    \ as $key => $sum) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n\
    }\n\n$nums = [1, 11, -1, -11, -12];\n$result = order_by_points($nums);\necho 'Input:\
    \ ', implode(', ', $nums), PHP_EOL;\necho 'Result: ', implode(', ', $result),\
    \ PHP_EOL;", "    for ($i = 0; $i < count($nums); $i++) {\n        for ($j = 0;\
    \ $j < count($nums); $j++) {\n            if ($j === count($nums) - 1) {\n   \
    \             break;\n            }\n            $firstNum = str_split($nums[$j]);\n\
    \            $secondNum = str_split($nums[$j + 1]);\n            $sumFirstNum\
    \ = array_sum($firstNum);\n            $sumSecondNum = array_sum($secondNum);\n\
    \            if ($sumFirstNum > $sumSecondNum) {\n                $temp = $nums[$j];\n\
    \                $nums[$j] = $nums[$j + 1];\n                $nums[$j + 1] = $temp;\n\
    \            }\n        }\n    }\n    return $nums;\n}\necho implode(', ', order_by_points([1,\
    \ 11, -1, -11, -12]));\necho \"\\n\";\necho implode(', ', order_by_points([]));",
  "    if (empty($nums)) return $nums;\n    $sums = [];\n    foreach ($nums as $key\
    \ => $num) {\n        $sum = 0;\n        while($num > 0) {\n            $sum +=\
    \ $num % 10;\n            $num = (int)($num / 10);\n        }\n        $sums[$key]\
    \ = $sum;\n    }\n    array_multisort($sums, SORT_ASC, $nums);\n    return $nums;\n\
    }\n", "  $arr = [];\n  foreach ($nums as $n) {\n    $arr[] = [abs($n), $n];\n\
    \  }\n  usort($arr, function($a, $b) {\n    $asum = getDigitSum($a[0]);\n    $bsum\
    \ = getDigitSum($b[0]);\n    if ($asum === $bsum) {\n      return $a[1] - $b[1];\n\
    \    }\n    return $asum - $bsum;\n  });\n  return array_column($arr, 1);\n}\n",
  "    $newArray = [];\n    $i = 0;\n    while (isset($nums[$i])) {\n        if (!isset($newArray[array_sum(str_split($nums[$i]))]))\
    \ {\n            $newArray[array_sum(str_split($nums[$i]))] = [$nums[$i]];\n \
    \       } else {\n            $newArray[array_sum(str_split($nums[$i]))][] = $nums[$i];\n\
    \        }\n        $i++;\n    }\n    ksort($newArray);\n    $array = [];\n  \
    \  foreach ($newArray as $value) {\n        foreach ($value as $val) {\n     \
    \       $array[] = $val;\n        }\n    }\n    return $array;\n}", "    if (empty($nums))\
    \ {\n        return [];\n    }\n    $result = [];\n    foreach ($nums as $i =>\
    \ $num) {\n        $result[$i] = array_sum(str_split($num));\n    }\n    array_multisort($result,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\n$nums = [1, 11, -1, -11, -12];\nvar_dump(order_by_points($nums));",
  "    function sumDigits($item, $key) {\n        $item += 0;\n        $digitSum =\
    \ 0;\n        while ($item > 0) {\n            $digitSum += $item % 10;\n    \
    \        $item = floor($item / 10);\n        }\n        return $digitSum;\n  \
    \  }\n    uasort($nums, function ($a, $b) {\n        $aSum = sumDigits($a);\n\
    \        $bSum = sumDigits($b);\n        if ($aSum == $bSum) {\n            return\
    \ 0;\n        }\n        return ($aSum < $bSum) ? -1 : 1;\n    });\n    return\
    \ $nums;\n}\n$array = array(1, 11, -1, -11, -12);\nvar_dump(order_by_points($array));",
  "  if (empty($nums)) {\n    return [];\n  }\n\n  $summed = [];\n  foreach ($nums\
    \ as $idx => $num) {\n    $summed[$idx] = 0;\n    while ($num != 0) {\n      $summed[$idx]\
    \ += $num % 10;\n      $num = (int)($num / 10);\n    }\n  }\n\n  asort($summed);\n\
    \  $res = [];\n  foreach ($summed as $idx => $sum) {\n    $res[] = $nums[$idx];\n\
    \  }\n\n  return $res;\n}\n\nprint_r(order_by_points([1, 11, -1, -11, -12]));\n\
    print_r(order_by_points([]));", "\t\n\t$result = array();\n\t$stored = array();\n\
    \t$sort = array();\n\t\n\tforeach($nums as $num){\n\t\t$sum = $num;\n\t\t\n\t\t\
    while($sum > 0){\n\t\t\t$sum = intval($sum/10);\n\t\t\t$sum = $sum + ($num % 10);\n\
    \t\t\t$num = intval($num/10);\n\t\t}\n\t\t\n\t\tarray_push($stored, $sum);\n\t\
    }\n\t\n\tasort($stored);\n\t$count = count($stored);\n\t\n\tfor($i = 0; $i < $count;\
    \ $i++){\n\t\tarray_push($sort, array_search($stored[$i], $stored));\n\t\tarray_push($result,\
    \ $nums[array_search($stored[$i], $stored)]);\n\t}\n\t\n\treturn $result;\n}",
  "  $result = [];\n  $mapping = [];\n  foreach ($nums as $index => $num) {\n    $result[$index]\
    \ = $num;\n    $total = 0;\n    foreach (str_split($num) as $digit) {\n      $total\
    \ += $digit;\n    }\n    $mapping[$index] = $total;\n  }\n  asort($mapping);\n\
    \  $keys = array_keys($mapping);\n  $output = [];\n  foreach ($keys as $key) {\n\
    \    $output[] = $result[$key];\n  }\n  return $output;\n}\n", "    $arr = [];\n\
    \    foreach ($nums as $key => $num) {\n        $n = abs($num);\n        $sum\
    \ = 0;\n        while ($n) {\n            $sum += $n % 10;\n            $n = (int)($n\
    \ / 10);\n        }\n        $arr[$key] = [$sum, $num];\n    }\n    sort($arr);\n\
    \    $res = [];\n    foreach ($arr as $key => $value) {\n        $res[] = $value[1];\n\
    \    }\n    return $res;\n}\nprint_r(order_by_points([1, 11, -1, -11, -12]));\n\
    print_r(order_by_points([]));", "  if (empty($nums)) return [];\n  $sum_map =\
    \ [];\n  foreach ($nums as $i => $num) {\n    $sum = array_sum(str_split($num));\n\
    \    if (!array_key_exists($sum, $sum_map)) {\n      $sum_map[$sum] = [];\n  \
    \  }\n    $sum_map[$sum][] = $num;\n  }\n  ksort($sum_map);\n  $result = [];\n\
    \  foreach ($sum_map as $nums) {\n    $result = array_merge($result, $nums);\n\
    \  }\n  return $result;\n}\n", "    $nums_with_points = [];\n    foreach ($nums\
    \ as $key => $num) {\n        $sum = 0;\n        foreach (str_split(abs($num))\
    \ as $n) {\n            $sum += $n;\n        }\n        $nums_with_points[$sum][]\
    \ = $num;\n    }\n    ksort($nums_with_points);\n    $result = [];\n    foreach\
    \ ($nums_with_points as $arr) {\n        foreach ($arr as $num) {\n          \
    \  $result[] = $num;\n        }\n    }\n    return $result;\n}\n", "    $digit_sum\
    \ = array_map('digit_sum', $nums);\n    $combined = array_combine($nums, $digit_sum);\n\
    \    asort($combined);\n    return array_keys($combined);\n}\n", "    // Write\
    \ your code here\n    $sorted = [];\n    $result = [];\n    foreach ($nums as\
    \ $key => $value) {\n        $sorted[$key] = sumDigits($value);\n    }\n    //\
    \ print_r($sorted);\n    array_multisort($sorted, SORT_ASC, $nums);\n    return\
    \ $nums;\n}\n", "\t$array = array();\n\tif(empty($nums)) {\n\t\treturn $array;\n\
    \t}\n\t\n\t$result = array();\n\tforeach($nums as $key => $value) {\n\t\t$sum\
    \ = sum($value);\n\t\t$result[$key] = $sum;\n\t}\n\tasort($result);\n\t\n\tforeach($result\
    \ as $key => $value) {\n\t\t$array[] = $nums[$key];\n\t}\n\treturn $array;\n}\n",
  "    if (empty($nums)) return [];\n    usort($nums, function($a, $b) {\n       \
    \ $sum_a = array_sum(str_split($a));\n        $sum_b = array_sum(str_split($b));\n\
    \        if ($sum_a == $sum_b) return 0;\n        return $sum_a < $sum_b ? -1\
    \ : 1;\n    });\n    return $nums;\n}\n$arr = [1, 11, -1, -11, -12];\nprint_r(order_by_points($arr));",
  "    if (!count($nums)) return [];\n    $map = [];\n    foreach ($nums as $i =>\
    \ $n) {\n        $sum = 0;\n        foreach (str_split(abs($n)) as $digit) {\n\
    \            $sum += $digit;\n        }\n        $map[$i] = $sum;\n    }\n   \
    \ asort($map);\n    $ret = [];\n    foreach ($map as $i => $sum) {\n        $ret[]\
    \ = $nums[$i];\n    }\n    return $ret;\n}", "    $arr = [];\n    $sum = [];\n\
    \    for ($i = 0; $i < count($nums); $i++) {\n        $arr[$i] = $nums[$i];\n\
    \        $sum[$i] = 0;\n        while ($nums[$i] != 0) {\n            $mod = $nums[$i]\
    \ % 10;\n            $sum[$i] += $mod;\n            $nums[$i] = floor($nums[$i]\
    \ / 10);\n        }\n    }\n    array_multisort($sum, $arr);\n    return $arr;\n\
    }\necho \"<pre>\";\nprint_r(order_by_points([1, 11, -1, -11, -12]));\necho \"\
    </pre>\";\n", "    $result = [];\n    $count = 0;\n    foreach ($nums as $num)\
    \ {\n        $result[$count][0] = $num;\n        $result[$count][1] = $num;\n\
    \        $result[$count][2] = $count;\n        $count++;\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[1] === $b[1]) {\n            return $a[2]\
    \ - $b[2];\n        }\n        return $a[1] - $b[1];\n    });\n    $final = [];\n\
    \    foreach ($result as $item) {\n        $final[] = $item[0];\n    }\n    return\
    \ $final;\n}\nprint_r(order_by_points([1, 11, -1, -11, -12]));\necho \"\\n\";\n\
    print_r(order_by_points([]));\necho \"\\n\";", "    // Your code here\n}", " \
    \ usort($nums, function($a, $b) {\n    $a_points = array_sum(str_split($a));\n\
    \    $b_points = array_sum(str_split($b));\n    if ($a_points < $b_points) {\n\
    \      return -1;\n    } elseif ($a_points > $b_points) {\n      return 1;\n \
    \   } else {\n      return 0;\n    }\n  });\n  return $nums;\n}\n\n$output = order_by_points([1,\
    \ 11, -1, -11, -12]);\nvar_dump($output);", "    $sums = array_map(function($num)\
    \ {\n        $sum = 0;\n        $num = abs($num);\n        while ($num > 0) {\n\
    \            $sum += $num % 10;\n            $num = floor($num / 10);\n      \
    \  }\n        return $sum;\n    }, $nums);\n    array_multisort($sums, SORT_ASC,\
    \ $nums);\n    return $nums;\n}\necho implode(\", \", order_by_points([1, 11,\
    \ -1, -11, -12])), \"\\n\";\necho implode(\", \", order_by_points([])), \"\\n\"\
    ;", "\tif(count($nums) == 0) return $nums;\n\t$points = array();\n\tforeach($nums\
    \ as $k => $v) {\n\t\t$points[$k] = sum_digits($v);\n\t}\n\tarray_multisort($points,\
    \ SORT_ASC, $nums);\n\treturn $nums;\n}\n", "    foreach ($nums as $key => $value)\
    \ {\n        $str_val = (string)$value;\n        $sum = 0;\n        for ($i =\
    \ 0; $i < strlen($str_val); $i++) {\n            $sum += (int)$str_val[$i];\n\
    \        }\n        $ordered_by_points[$key] = $sum;\n    }\n    asort($ordered_by_points);\n\
    \    foreach ($ordered_by_points as $key => $value) {\n        $res[] = $nums[$key];\n\
    \    }\n    return $res;\n}", "    $sums = array_map(function($x) { return array_sum(str_split($x));\
    \ }, $nums);\n    array_multisort($sums, SORT_ASC, $nums);\n    return $nums;\n\
    }\n", "    $nums_sums = [];\n    $result = [];\n    $i = 0;\n    foreach ($nums\
    \ as $number) {\n        $sum = 0;\n        while ($number != 0) {\n         \
    \   $sum += $number % 10;\n            $number = (int)($number / 10);\n      \
    \  }\n        $nums_sums[$i++] = $sum;\n    }\n    $i = 0;\n    while ($i < count($nums))\
    \ {\n        $j = 0;\n        while ($j < count($nums)) {\n            if ($nums_sums[$i]\
    \ < $nums_sums[$j]) {\n                $tmp = $nums_sums[$i];\n              \
    \  $nums_sums[$i] = $nums_sums[$j];\n                $nums_sums[$j] = $tmp;\n\
    \                $tmp = $nums[$i];\n                $nums[$i] = $nums[$j];\n \
    \               $nums[$j] = $tmp;\n            }\n            $j++;\n        }\n\
    \        $i++;\n    }\n    return $nums;\n}", "    if (empty($nums)) {\n     \
    \   return $nums;\n    }\n    $num_points = array();\n    foreach ($nums as $key\
    \ => $value) {\n        $point = array_sum(str_split($value));\n        $num_points[$key]\
    \ = $point;\n    }\n    array_multisort($num_points, SORT_ASC, $nums);\n    return\
    \ $nums;\n}\n", "\t$results = array();\n\t$result = array();\n\t$merged_arr =\
    \ array();\n\t$i = 0;\n\tforeach ($nums as $num) {\n\t\t$sum = 0;\n\t\t$arr =\
    \ str_split($num);\n\t\tforeach ($arr as $a) {\n\t\t\t$sum += $a;\n\t\t}\n\t\t\
    $result = array($sum, $i, $num);\n\t\tarray_push($results, $result);\n\t\t$i++;\n\
    \t}\n\tarray_multisort($results);\n\tforeach ($results as $res) {\n\t\tarray_push($merged_arr,\
    \ $res[2]);\n\t}\n\treturn $merged_arr;\n}\n\n$arr = [12, -3, 11, -5, 0, 11, 12,\
    \ -7, 8, -1, -3, -11, -8, -2, -2, 3, -10, -2, 3, -1, -11, 11, 2, -12, 1, -7, -5,\
    \ 12, -7, 0, -1, -1, -9, -6, -4, -12, -2, 11, -4, -4, -6, -5, -7, 4, -10, -2,\
    \ -5, -12, -5, -3, 10, -1, 11, -5, -10, 1, -2, -6, -5, -7, -3, -3, -5, -11, 10,\
    \ -5, -9, 1, -9, -4, -4, -6, -4, 8, -6, 2, -12, -9, 2, 10, 2, -8, -8, 8, -11,\
    \ -11, 2, 1, -12, -7, -11, -3, -3, -3, -8, 0, -11, 3, -2, -6, -2, -9, -9, -6,\
    \ -11, -11, -8, -10, 2, -10, -3, -7, -9, -3, -3, -1, -7, -8, -2, -2", "  $nums\
    \ = array_filter($nums, function($val) {\n    if (is_int($val)) return $val;\n\
    \  });\n  $result = array();\n  $index = array();\n  foreach ($nums as $key =>\
    \ $val) {\n    $index[$key] = array_sum(str_split($val));\n  }\n  asort($index);\n\
    \  foreach ($index as $key => $val) {\n    $result[] = $nums[$key];\n  }\n  return\
    \ $result;\n}", "    if (empty($nums)) {\n        return $nums;\n    }\n    $len\
    \ = count($nums);\n    $sum = [];\n    $index = [];\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $tmp = $nums[$i];\n        $tmpSum = 0;\n        while ($tmp)\
    \ {\n            $tmpSum += $tmp % 10;\n            $tmp = intval($tmp / 10);\n\
    \        }\n        $sum[] = $tmpSum;\n        $index[] = $i;\n    }\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        for ($j = $i + 1; $j < $len; $j++) {\n\
    \            if ($sum[$i] > $sum[$j]) {\n                $tmp = $sum[$i];\n  \
    \              $sum[$i] = $sum[$j];\n                $sum[$j] = $tmp;\n      \
    \          $tmp = $index[$i];\n                $index[$i] = $index[$j];\n    \
    \            $index[$j] = $tmp;\n            }\n        }\n    }\n    $res = [];\n\
    \    for ($i = 0; $i < $len; $i++) {\n        $res[] = $nums[$index[$i]];\n  \
    \  }\n    return $res;\n}\n", "  $results = [];\n  foreach ($nums as $index =>\
    \ $num) {\n    $sum = 0;\n    foreach (str_split(abs($num)) as $digit) {\n   \
    \   $sum += $digit;\n    }\n    $results[$index] = $sum;\n  }\n  arsort($results);\n\
    \  $ordered_nums = [];\n  foreach ($results as $index => $sum) {\n    $ordered_nums[]\
    \ = $nums[$index];\n  }\n  return $ordered_nums;\n}\n\necho '<pre>';\nvar_dump(order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]);\nvar_dump(order_by_points([])\
    \ == []);\necho '</pre>';", "    if (sizeof($nums) == 0) return [];\n    $sum\
    \ = array_sum($nums);\n    $sum = implode('', $sum);\n    $sum = str_split($sum);\n\
    \    rsort($sum);\n    $result = [];\n    for ($i = 0; $i < sizeof($sum); $i++)\
    \ {\n        $result[] = $sum[$i];\n    }\n    return $result;\n}\n", "    $sums\
    \ = array_map(function($num) {\n        $sum = 0;\n        while ($num) {\n  \
    \          $sum += $num % 10;\n            $num = intval($num / 10);\n       \
    \ }\n        return $sum;\n    }, $nums);\n    array_multisort($sums, SORT_ASC,\
    \ $nums);\n    return $nums;\n}\n", "    $a = [];\n    foreach ($nums as $i =>\
    \ $n) {\n        $s = 0;\n        foreach (str_split(abs($n)) as $d) $s += $d;\n\
    \        $a[$i] = [$s, $n];\n    }\n    usort($a, function($a, $b) {\n       \
    \ return $a[0] == $b[0] ? $a[1] - $b[1] : $a[0] - $b[0];\n    });\n    $nums =\
    \ [];\n    foreach ($a as $t) $nums[] = $t[1];\n    return $nums;\n}\n", "   \
    \ $nums = array_map(function($num) {\n        return [$num, array_sum(str_split(abs($num)))];\n\
    \    }, $nums);\n    usort($nums, function($a, $b) {\n        return $a[1] > $b[1]\
    \ ? 1 : -1;\n    });\n    return array_map(function($num) {\n        return $num[0];\n\
    \    }, $nums);\n}\n", "    $array = [];\n    $result = [];\n    foreach ($nums\
    \ as $key => $value) {\n        $array[$key] = sum_digits($value);\n    }\n  \
    \  sort($array);\n    foreach ($array as $key => $value) {\n        $result[]\
    \ = $nums[$key];\n    }\n    return $result;\n}", "\tfor ($i = 0; $i < count($nums);\
    \ $i++) {\n\t\t$nums[$i] = str_split($nums[$i]);\n\t\t$suma = 0;\n\t\tfor ($j\
    \ = 0; $j < count($nums[$i]); $j++) {\n\t\t\t$suma += $nums[$i][$j];\n\t\t}\n\t\
    \t$nums[$i] = $suma;\n\t}\n\tsort($nums);\n\tfor ($i = 0; $i < count($nums); $i++)\
    \ {\n\t\tif ($nums[$i] < 10) {\n\t\t\t$nums[$i] = \"0\" . $nums[$i];\n\t\t}\n\t\
    \t$nums[$i] = str_split($nums[$i]);\n\t}\n\tprint_r($nums);\n}\n$nums = [1, 11,\
    \ -1, -11, -12];\necho \"<pre>\";\necho order_by_points($nums);\necho \"</pre>\"\
    ;", "\t$nums = array_map(function($num) {\n\t\t$digits = preg_split('//', $num,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n\t\t$sum = array_sum($digits);\n\t\treturn array($num,\
    \ $sum);\n\t}, $nums);\n\tusort($nums, function($a, $b) {\n\t\treturn $a[1] <=>\
    \ $b[1];\n\t});\n\treturn array_map(function($num) {\n\t\treturn $num[0];\n\t\
    }, $nums);\n}\nvar_dump(order_by_points([1, 11, -1, -11, -12]));\nvar_dump(order_by_points([]));\n",
  "    $sums = [];\n    $results = [];\n    foreach ($nums as $key => $num) {\n  \
    \      $sums[$key] = array_sum(str_split(abs($num)));\n    }\n    asort($sums);\n\
    \    foreach ($sums as $key => $sum) {\n        $results[] = $nums[$key];\n  \
    \  }\n    return $results;\n}", "    $sort_by_points = array();\n    foreach ($nums\
    \ as $key => $value) {\n        $sort_by_points[$key] = array_sum(str_split($value));\n\
    \    }\n    asort($sort_by_points);\n    $array_by_sort = array();\n    foreach\
    \ ($sort_by_points as $key => $value) {\n        $array_by_sort[] = $nums[$key];\n\
    \    }\n    return $array_by_sort;\n}\n", "    $arr = array();\n    for ($i =\
    \ 0; $i < count($nums); $i++) {\n        $arr[$i] = $nums[$i];\n    }\n    for\
    \ ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr);\
    \ $j++) {\n            if (array_sum(str_split($arr[$i])) > array_sum(str_split($arr[$j])))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\nprint_r(order_by_points([0, 1, 11, -1, -11, -12]));", "    $result\
    \ = [];\n    for ($i = 0; $i < count($nums); $i++) {\n        $result[$i] = 0;\n\
    \        $cur_num = $nums[$i];\n        while ($cur_num != 0) {\n            $result[$i]\
    \ += $cur_num % 10;\n            $cur_num = floor($cur_num / 10);\n        }\n\
    \    }\n    $nums_tmp = $nums;\n    array_multisort($result, $nums_tmp);\n   \
    \ return $nums_tmp;\n}\n\nprint_r(order_by_points([1, 11, -1, -11, -12]));\nprint_r(order_by_points([]));",
  "\t$res = [];\n\tforeach ($nums as $k => $v) {\n\t\t$sum = 0;\n\t\t$i = 0;\n\t\t\
    while (1) {\n\t\t\t$sum += $v % 10;\n\t\t\t$v = intval($v / 10);\n\t\t\tif ($v\
    \ === 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t$res[$k] = $sum;\n\t}\n\tasort($res);\n\
    \t$nums_res = [];\n\tforeach ($res as $k => $v) {\n\t\t$nums_res[] = $nums[$k];\n\
    \t}\n\treturn $nums_res;\n}\n", "    return sort_by($nums, function($num) {\n\
    \        return sum_digits($num);\n    });\n}\n", "  $results = [];\n  $sums =\
    \ [];\n  foreach ($nums as $key => $num) {\n    $sum = 0;\n    while ($num > 0)\
    \ {\n      $sum += $num % 10;\n      $num = floor($num / 10);\n    }\n    $sums[$key]\
    \ = $sum;\n  }\n  asort($sums);\n  foreach ($sums as $key => $sum) {\n    $results[]\
    \ = $nums[$key];\n  }\n  return $results;\n}", "    $sum = [];\n    for ($i =\
    \ 0; $i < count($nums); $i++) {\n        $sum_of_digits = array_sum(str_split($nums[$i]));\n\
    \        $sum[$sum_of_digits][] = $nums[$i];\n    }\n    ksort($sum);\n    $new_nums\
    \ = [];\n    foreach ($sum as $key => $value) {\n        foreach ($value as $key2\
    \ => $value2) {\n            $new_nums[] = $value2;\n        }\n    }\n    return\
    \ $new_nums;\n}\nprint_r(order_by_points([1, 11, -1, -11, -12]));\n", "  $sums\
    \ = [];\n  foreach ($nums as $key => $num) {\n    $sums[$key] = array_sum(str_split(abs($num)));\n\
    \  }\n  array_multisort($sums, SORT_ASC, $nums);\n  return $nums;\n}\n", "\t//\
    \ your solution goes here\n\t// $nums is an array of integers\n\t$result = [];\n\
    \tforeach ($nums as $num) {\n\t\t$sum = 0;\n\t\t$digits = str_split($num);\n\t\
    \tfor ($i = 0; $i < count($digits); $i++) {\n\t\t\t$sum += $digits[$i];\n\t\t\
    }\n\t\t$result[$num] = $sum;\n\t}\n\tasort($result);\n\treturn array_keys($result);\n\
    }", "  if(count($nums) < 2) {\n    return $nums;\n  }\n\n  for($i = 0; $i < count($nums);\
    \ $i++) {\n    for($j = 0; $j < count($nums); $j++) {\n      if(digit_sum($nums[$i])\
    \ < digit_sum($nums[$j])) {\n        $temp = $nums[$i];\n        $nums[$i] = $nums[$j];\n\
    \        $nums[$j] = $temp;\n      }\n    }\n  }\n\n  return $nums;\n}\n", " \
    \   $result = array();\n    foreach ($nums as $i => $n) {\n        $sum = array_sum(str_split($n));\n\
    \        $result[$i] = $sum;\n    }\n    asort($result);\n    $keys = array_keys($result);\n\
    \    $return = array();\n    foreach ($keys as $key) {\n        $return[] = $nums[$key];\n\
    \    }\n    return $return;\n}\n", "    if(!$nums) {\n        return [];\n   \
    \ }\n    // create hash map of numbers and their sum of digits\n    $numsDigitsSum\
    \ = array();\n    foreach($nums as $idx => $num) {\n        $sum = 0;\n      \
    \  $numStr = strval($num);\n        for($i = 0; $i < strlen($numStr); $i++) {\n\
    \            $sum += intval($numStr[$i]);\n        }\n        $numsDigitsSum[$num]\
    \ = $sum;\n    }\n    // create a hash map of sums of digits and its corresponding\
    \ numbers\n    $digitsSumNums = array();\n    foreach($numsDigitsSum as $num =>\
    \ $sum) {\n        if(array_key_exists($sum, $digitsSumNums)) {\n            $digitsSumNums[$sum][]\
    \ = $num;\n        } else {\n            $digitsSumNums[$sum] = [$num];\n    \
    \    }\n    }\n    // sort the hash map of sums of digits and its corresponding\
    \ numbers\n    ksort($digitsSumNums);\n    // flatten hash map of sums of digits\
    \ and its corresponding numbers\n    $digitsSumNums = call_user_func_array('array_merge',\
    \ $digitsSumNums);\n    // sort the hash map of numbers and their sum of digits\n\
    \    asort($numsDigitsSum);\n    // flatten hash map of numbers and their sum\
    \ of digits\n    $numsDigitsSum = array_keys($numsDigitsSum);\n    // create result\
    \ hash map of numbers with its corresponding index in original list\n    $result\
    \ = array();\n    foreach($digitsSumNums as $num) {\n        $result[$num] = array_search($num,\
    \ $numsDigitsSum);\n    }\n    // sort the result hash map\n    asort($result);\n\
    \    // flatten the result hash map\n    $result = array_keys($result);\n    return\
    \ $result;\n}\nvar_dump(order_by_points([1, 11, -1, -11, -12])); // [-1, -11,\
    \ 1, -12", "    $sums = [];\n    foreach ($nums as $i => $num) {\n        $sums[$i]\
    \ = sumDigits($num);\n    }\n    asort($sums);\n    $ordered = [];\n    foreach\
    \ ($sums as $i => $sum) {\n        $ordered[] = $nums[$i];\n    }\n    return\
    \ $ordered;\n}\n", "    $pairs = [];\n    foreach ($nums as $key => $val) {\n\
    \        $sum = 0;\n        while ($val != 0) {\n            $sum += $val % 10;\n\
    \            $val = floor($val / 10);\n        }\n        $pairs[$key] = $sum;\n\
    \    }\n    asort($pairs);\n    $result = [];\n    foreach ($pairs as $key =>\
    \ $val) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}", " \
    \ $sums = [];\n  foreach ($nums as $i => $n) {\n    $sum = 0;\n    for ($j = 0;\
    \ $j < strlen($n); $j++) {\n      $sum += $n[$j];\n    }\n    $sums[$i] = $sum;\n\
    \  }\n  asort($sums);\n  $result = [];\n  foreach ($sums as $k => $s) {\n    $result[]\
    \ = $nums[$k];\n  }\n  return $result;\n}\n", "    $sums = array_map(function($n)\
    \ {\n        return array_sum(str_split($n));\n    }, $nums);\n    array_multisort($sums,\
    \ $nums);\n    return $nums;\n}\necho implode(', ', order_by_points([1, 11, -1,\
    \ -11, -12])), \"\\n\";", "    return $nums;\n}\n", "  $out = [];\n  foreach ($nums\
    \ as $key => $value) {\n    $out[$key] = array_sum(str_split(abs($value)));\n\
    \  }\n  asort($out);\n  $res = [];\n  foreach ($out as $key => $value) {\n   \
    \ $res[] = $nums[$key];\n  }\n  return $res;\n}\n", "    if (empty($nums)) {\n\
    \        return $nums;\n    }\n    $idx = 0;\n    $pivot = array_shift($nums);\n\
    \    $left = $right = [];\n    while (!empty($nums)) {\n        $num = array_shift($nums);\n\
    \        if (sum_of_digits($num) < sum_of_digits($pivot)) {\n            $left[]\
    \ = $num;\n        } elseif (sum_of_digits($num) > sum_of_digits($pivot)) {\n\
    \            $right[] = $num;\n        } else {\n            if ($idx < array_search($num,\
    \ $nums)) {\n                $left[] = $num;\n            } else {\n         \
    \       $right[] = $num;\n            }\n        }\n        $idx++;\n    }\n \
    \   return array_merge(order_by_points($left), [$pivot], order_by_points($right));\n\
    }\n", "\t$compare = function($a, $b) {\n\t\t$suma = 0;\n\t\t$sumb = 0;\n\t\tfor\
    \ ($i = 0; $i < strlen($a); $i++) {\n\t\t\t$suma += $a[$i];\n\t\t}\n\t\tfor ($i\
    \ = 0; $i < strlen($b); $i++) {\n\t\t\t$sumb += $b[$i];\n\t\t}\n\t\tif ($suma\
    \ == $sumb) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn ($suma < $sumb) ? -1 : 1;\n\t\
    };\n\tusort($nums, $compare);\n\treturn $nums;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
