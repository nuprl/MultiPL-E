name: HumanEval_26_remove_duplicates
language: php
results:
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    return implode('', array_unique(str_split(implode('', $numbers))));\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvqiqlmjv.php:15\n\
    Stack trace:\n#0 /tmp/tmpvqiqlmjv.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpvqiqlmjv.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $occurrences = array_count_values($numbers);\n  $uniques = array_keys($occurrences,\
    \ 1);\n  return $uniques;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $numbers = array_count_values($numbers);\n    $final = [];\n    foreach\
    \ ($numbers as $key => $value) {\n        if ($value == 1) {\n            $final[]\
    \ = $key;\n        }\n    }\n    return $final;\n}\n\n$numbers = [1, 2, 3, 2,\
    \ 4];\nprint_r(remove_duplicates($numbers));\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 4\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    // your code goes here\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6042_qy1.php:14\n\
    Stack trace:\n#0 /tmp/tmp6042_qy1.php(19): test()\n#1 {main}\n  thrown in /tmp/tmp6042_qy1.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $uniques = [];\n  foreach ($numbers as $number) {\n    if (! in_array($number,\
    \ $uniques)) {\n      $uniques[] = $number;\n    }\n  }\n  return $uniques;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpits3i5ad.php:23\n\
    Stack trace:\n#0 /tmp/tmpits3i5ad.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpits3i5ad.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $result)) {\n      $result[] = $number;\n    }\n  }\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqdp6xs_8.php:23\n\
    Stack trace:\n#0 /tmp/tmpqdp6xs_8.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpqdp6xs_8.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $unique = [];\n    $duplicates = [];\n    foreach ($numbers as $number)\
    \ {\n        if (in_array($number, $unique)) {\n            $duplicates[] = $number;\n\
    \        } else {\n            $unique[] = $number;\n        }\n    }\n    foreach\
    \ ($duplicates as $duplicate) {\n        unset($unique[array_search($duplicate,\
    \ $unique)]);\n    }\n    return $unique;\n}\n\n$a = [1, 2, 3, 2, 4];\necho implode(remove_duplicates($a),\
    \ ',') . \"\\n\";\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1,3,4\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6wjzztuw.php:31\n\
    Stack trace:\n#0 /tmp/tmp6wjzztuw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp6wjzztuw.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $numbers_seen = [];\n  foreach ($numbers as $num) {\n    if (in_array($num,\
    \ $numbers_seen)) {\n      continue;\n    } else {\n      $numbers_seen[] = $num;\n\
    \    }\n  }\n  return $numbers_seen;\n}\n\nfunction candidate(...$args) {\n  \
    \  return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp12vtujb0.php:25\n\
    Stack trace:\n#0 /tmp/tmp12vtujb0.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp12vtujb0.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $unique_numbers = [];\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $unique_numbers)) {\n      $unique_numbers[] = $number;\n    }\n  }\n  return\
    \ $unique_numbers;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptvx_fvc4.php:23\n\
    Stack trace:\n#0 /tmp/tmptvx_fvc4.php(26): test()\n#1 {main}\n  thrown in /tmp/tmptvx_fvc4.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t$count = array_count_values($numbers);\n\t$removedDuplicates = [];\n\t\
    foreach ($count as $key => $value) {\n\t\tif ($value < 2) {\n\t\t\tarray_push($removedDuplicates,\
    \ $key);\n\t\t}\n\t}\n\treturn $removedDuplicates;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $numbers_occurences = array_count_values($numbers);\n    $result = [];\n\
    \    foreach ($numbers as $number) {\n        if ($numbers_occurences[$number]\
    \ == 1) {\n            $result[] = $number;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    foreach ($numbers as $number) {\n        if (array_search($number,\
    \ $result) === false) {\n            $result[] = $number;\n        }\n    }\n\
    \    return $result;\n}\necho implode(', ', remove_duplicates([1, 2, 3, 2, 4]))\
    \ . \"\\n\";\necho implode(', ', remove_duplicates([0, 1, 2, 2, 3, 1, 4, 0, 5,\
    \ 2, 6, 7, 3, 8, 0, 9, 8, 2, 1, 2, 3, 2, 4])) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1, 2, 3, 4\n0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp69b0c_ys.php:24\nStack trace:\n#0 /tmp/tmp69b0c_ys.php(27):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp69b0c_ys.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $length = count($numbers);\n  $result = [];\n  $result_length = 0;\n  for\
    \ ($i = 0; $i < $length; $i++) {\n    $cur_val = $numbers[$i];\n    $found = false;\n\
    \    for ($j = 0; $j < $result_length; $j++) {\n      if ($result[$j] == $cur_val)\
    \ {\n        $found = true;\n        break;\n      }\n    }\n    if (!$found)\
    \ {\n      $result[$result_length] = $cur_val;\n      $result_length++;\n    }\n\
    \  }\n  $result = array_slice($result, 0, $result_length);\n  return $result;\n\
    }\n\nassert(remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]);\nassert(remove_duplicates([])\
    \ == []);\nassert(remove_duplicates([1, 1, 1, 1, 1]) == [1]);\nassert(remove_duplicates([1,\
    \ 2, 3, 2, 1]) == [3]);\nassert(remove_duplicates([1, 2, 3, 2, 1, 1, 1, 1, 1])\
    \ == [3]);\nassert(remove_duplicates([1, 2, 3, 2, 1, 3, 1, 1, 1]) == [1]);\n\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: assert(): assert(remove_duplicates([1, 2, 3, 2, 4]) == [1, 3,\
    \ 4]) failed in /tmp/tmpcyp91kjz.php on line 28\n\nWarning: assert(): assert(remove_duplicates([1,\
    \ 2, 3, 2, 1]) == [3]) failed in /tmp/tmpcyp91kjz.php on line 31\n\nWarning: assert():\
    \ assert(remove_duplicates([1, 2, 3, 2, 1, 1, 1, 1, 1]) == [3]) failed in /tmp/tmpcyp91kjz.php\
    \ on line 32\n\nWarning: assert(): assert(remove_duplicates([1, 2, 3, 2, 1, 3,\
    \ 1, 1, 1]) == [1]) failed in /tmp/tmpcyp91kjz.php on line 33\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpcyp91kjz.php:42\nStack trace:\n\
    #0 /tmp/tmpcyp91kjz.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpcyp91kjz.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $uniques = [];\n    foreach ($numbers as $n) {\n        if (!in_array($n,\
    \ $uniques)) {\n            $uniques[] = $n;\n        }\n    }\n    return $uniques;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvti9l34h.php:23\n\
    Stack trace:\n#0 /tmp/tmpvti9l34h.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpvti9l34h.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t$result = [];\n\tforeach ($numbers as $number) {\n\t\tif (! in_array($number,\
    \ $result)) {\n\t\t\t$result[] = $number;\n\t\t}\n\t}\n\treturn $result;\n}\n\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdxoytm4f.php:23\n\
    Stack trace:\n#0 /tmp/tmpdxoytm4f.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpdxoytm4f.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $uniqueNumbers = [];\n    foreach ($numbers as $number) {\n        if\
    \ (!in_array($number, $uniqueNumbers)) {\n            $uniqueNumbers[] = $number;\n\
    \        }\n    }\n    return $uniqueNumbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsf7l7z5h.php:23\n\
    Stack trace:\n#0 /tmp/tmpsf7l7z5h.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpsf7l7z5h.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $numbers = array_unique($numbers);\n  return $numbers;\n}\n\nprint_r(remove_duplicates([1,\
    \ 2, 3, 2, 4]));\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [4] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpf98uvlno.php:19\nStack\
    \ trace:\n#0 /tmp/tmpf98uvlno.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpf98uvlno.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $map = [];\n    $result = [];\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        $number = $numbers[$i];\n        if (!isset($map[$number]))\
    \ {\n            $map[$number] = 1;\n            $result[] = $number;\n      \
    \  }\n    }\n    return $result;\n}\n\necho implode(', ', remove_duplicates([1,\
    \ 2, 3, 2, 4])) . \"\\n\";\necho implode(', ', remove_duplicates([1, 1, 1, 1,\
    \ 1])) . \"\\n\";\necho implode(', ', remove_duplicates([1, 2, 3, 4, 5])) . \"\
    \\n\";\necho implode(', ', remove_duplicates([1, 2, 3, 2, 3, 2, 4])) . \"\\n\"\
    ;\necho implode(', ', remove_duplicates([1, 2, 3, 2, 3, 2, 4, 2, 3, 2, 3, 2, 4]))\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1, 2, 3, 4\n1\n1, 2, 3, 4, 5\n1, 2, 3, 4\n1, 2, 3, 4\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpk9corthw.php:31\nStack trace:\n#0 /tmp/tmpk9corthw.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpk9corthw.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $unique_numbers = [];\n    foreach ($numbers as $number) {\n        if\
    \ (!in_array($number, $unique_numbers)) {\n            $unique_numbers[] = $number;\n\
    \        }\n    }\n    return $unique_numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp81nu2dz7.php:23\n\
    Stack trace:\n#0 /tmp/tmp81nu2dz7.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp81nu2dz7.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t$output = [];\n\t$list = [];\n\t$output = [];\n\tforeach ($numbers as $element)\
    \ {\n\t\tif (!in_array($element, $list)) {\n\t\t\t$list[] = $element;\n\t\t\t\
    $output[] = $element;\n\t\t}\n\t}\n\treturn $output;\n}\n\n$output = remove_duplicates([1,\
    \ 2, 3, 2, 4]);\nprint_r($output);\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp309o0f4m.php:28\nStack\
    \ trace:\n#0 /tmp/tmp309o0f4m.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp309o0f4m.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  $map = [];\n  foreach ($numbers as $number) {\n    if\
    \ (!array_key_exists($number, $map)) {\n      $map[$number] = 0;\n    }\n    $map[$number]\
    \ += 1;\n  }\n  foreach ($numbers as $number) {\n    if ($map[$number] == 1) {\n\
    \      $result[] = $number;\n    }\n  }\n  return $result;\n}\nvar_dump(remove_duplicates([1,\
    \ 2, 3, 2, 4]));\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(3)\n  [2]=>\n  int(4)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    return array_values(array_unique($numbers));\n}\n$a = remove_duplicates([1,\
    \ 2, 3, 2, 4]);\necho 'remove_duplicates([1, 2, 3, 2, 4]) : ';\nprint_r($a);\n\
    \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "remove_duplicates([1, 2, 3, 2, 4]) : Array\n(\n    [0] => 1\n    [1] =>\
    \ 2\n    [2] => 3\n    [3] => 4\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp1bb5ndnj.php:20\nStack trace:\n#0 /tmp/tmp1bb5ndnj.php(23): test()\n\
    #1 {main}\n  thrown in /tmp/tmp1bb5ndnj.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $count = array_count_values($numbers);\n    foreach ($count as $key =>\
    \ $value) {\n        if ($value > 1) {\n            $numbers = array_diff($numbers,\
    \ [$key]);\n        }\n    }\n    return $numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb4wk0reo.php:23\n\
    Stack trace:\n#0 /tmp/tmpb4wk0reo.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpb4wk0reo.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $counted_numbers = array_count_values($numbers);\n    $distinct_numbers\
    \ = array_keys($counted_numbers, 1);\n    return $distinct_numbers;\n}\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $unique = [];\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $unique)) {\n            $unique[] = $number;\n        }\n    }\n    return\
    \ $unique;\n}\n\necho \"remove_duplicates(1, 2, 3, 2, 4): \";\nvar_dump(remove_duplicates([1,\
    \ 2, 3, 2, 4]));\necho \"\\n\";\n\necho \"remove_duplicates(1, 2, 3, 4): \";\n\
    var_dump(remove_duplicates([1, 2, 3, 4]));\necho \"\\n\";\n\necho \"remove_duplicates():\
    \ \";\nvar_dump(remove_duplicates([]));\necho \"\\n\";\n\necho \"remove_duplicates(1,\
    \ 1, 1, 1): \";\nvar_dump(remove_duplicates([1, 1, 1, 1]));\necho \"\\n\";\n\n\
    echo \"remove_duplicates(1, 1, 2, 2): \";\nvar_dump(remove_duplicates([1, 1, 2,\
    \ 2]));\necho \"\\n\";\n\necho \"remove_duplicates(1, 1, 2, 2, 2): \";\nvar_dump(remove_duplicates([1,\
    \ 1, 2, 2, 2]));\necho \"\\n\";\n\necho \"remove_duplicates(1, 2, 2, 2, 2): \"\
    ;\nvar_dump(remove_duplicates([1, 2, 2, 2, 2]));\necho \"\\n\";\n\necho \"remove_duplicates(2,\
    \ 2, 2, 2, 2): \";\nvar_dump(remove_duplicates([2, 2, 2, 2, 2]));\necho \"\\n\"\
    ;\n\necho \"remove_duplicates(2, 2, 2, 2, 2, 1): \";\nvar_dump(remove_duplicates([2,\
    \ 2, 2, 2, 2, 1]));\necho \"\\n\";\n\necho \"remove_duplicates(1, 1, 1, 1, 2,\
    \ 2, 2, 2, 2): \";\nvar_dump(remove_duplicates([1,\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmpjvy3nt.php on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $count_values = array_count_values($numbers);\n    $result = [];\n  \
    \  foreach ($numbers as $value) {\n        if ($count_values[$value] == 1) {\n\
    \            $result[] = $value;\n        }\n    }\n    return $result;\n}\n$numbers\
    \ = [1, 2, 3, 2, 4];\nprint_r(remove_duplicates($numbers));\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 4\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    $table = [];\n    foreach ($numbers as $number) {\n\
    \        if (array_key_exists($number, $table)) {\n            continue;\n   \
    \     }\n        $table[$number] = true;\n        $result[] = $number;\n    }\n\
    \    return $result;\n}\n\nvar_dump(remove_duplicates([1, 2, 3, 2, 4]));\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n \
    \ [3]=>\n  int(4)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3zsckuq6.php:27\n\
    Stack trace:\n#0 /tmp/tmp3zsckuq6.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp3zsckuq6.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $occurrences = [];\n    $result = [];\n    foreach ($numbers as $number)\
    \ {\n        if (empty($occurrences[$number])) {\n            $occurrences[$number]\
    \ = 0;\n        }\n        $occurrences[$number]++;\n    }\n    foreach ($numbers\
    \ as $number) {\n        if ($occurrences[$number] == 1) {\n            $result[]\
    \ = $number;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $output = [];\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $output)) {\n            $output[] = $number;\n        }\n    }\n    return\
    \ $output;\n}\n\n$input = [1, 2, 3, 2, 4];\nprint_r(remove_duplicates($input));\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp5dum11fy.php:25\nStack\
    \ trace:\n#0 /tmp/tmp5dum11fy.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp5dum11fy.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t$duplicates = array();\n\t$unique = array();\n\t$output = array();\n\t\
    foreach ($numbers as $number) {\n\t\tif (!in_array($number, $unique)) {\n\t\t\t\
    $unique[] = $number;\n\t\t} else {\n\t\t\t$duplicates[] = $number;\n\t\t}\n\t\
    }\n\tforeach ($numbers as $number) {\n\t\tif (!in_array($number, $duplicates))\
    \ {\n\t\t\t$output[] = $number;\n\t\t}\n\t}\n\treturn $output;\n}\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $unique = [];\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $unique)) {\n      $unique[] = $number;\n    }\n  }\n  return $unique;\n}\n\
    $num = [1, 2, 3, 2, 4];\nprint_r(remove_duplicates($num));\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpesvo0wv7.php:24\nStack\
    \ trace:\n#0 /tmp/tmpesvo0wv7.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpesvo0wv7.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $non_duplicates = [];\n    foreach ($numbers as $number) {\n        if\
    \ ( ! in_array($number, $non_duplicates)) {\n            $non_duplicates[] = $number;\n\
    \        }\n    }\n    return $non_duplicates;\n}\n\necho implode(remove_duplicates([1,\
    \ 2, 3, 2, 4]));\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1234\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk6os4lcv.php:24\n\
    Stack trace:\n#0 /tmp/tmpk6os4lcv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpk6os4lcv.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $unique = [];\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $unique)) {\n            $unique[] = $number;\n        }\n    }\n    return\
    \ $unique;\n}\nprint_r(remove_duplicates([1, 2, 3, 2, 4]));\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmphefo079r.php:23\nStack\
    \ trace:\n#0 /tmp/tmphefo079r.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphefo079r.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t// $numbers = [1, 2, 3, 2, 4];\n\t$array = [];\n\tfor ($i = 0; $i < count($numbers);\
    \ $i++) {\n\t\tif (!in_array($numbers[$i], $array)) {\n\t\t\t$array[] = $numbers[$i];\n\
    \t\t}\n\t}\n\treturn $array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy6vsfvtz.php:24\n\
    Stack trace:\n#0 /tmp/tmpy6vsfvtz.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpy6vsfvtz.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $unique = [];\n  $duplicates = [];\n  foreach ($numbers as $number) {\n\
    \    if (in_array($number, $unique)) {\n      $duplicates[] = $number;\n    }\
    \ else {\n      $unique[] = $number;\n    }\n  }\n  return array_diff($numbers,\
    \ $duplicates);\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp90eibexx.php:26\n\
    Stack trace:\n#0 /tmp/tmp90eibexx.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp90eibexx.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $new = [];\n    $length = count($numbers);\n    for ($i = 0; $i < $length;\
    \ $i++) {\n        $is_duplicate = false;\n        for ($j = $i + 1; $j < $length;\
    \ $j++) {\n            if ($numbers[$i] == $numbers[$j]) {\n                $is_duplicate\
    \ = true;\n                break;\n            }\n        }\n        if (!$is_duplicate)\
    \ {\n            $new[] = $numbers[$i];\n        }\n    }\n    return $new;\n\
    }\n$numbers = [1, 2, 3, 2, 4];\necho implode(', ', remove_duplicates($numbers))\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1, 3, 2, 4\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_pv9axc_.php:32\n\
    Stack trace:\n#0 /tmp/tmp_pv9axc_.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp_pv9axc_.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\tforeach ($numbers as $key => $value) {\n\t\tif (substr_count($numbers,\
    \ $value) > 1) {\n\t\t\tunset($numbers[$key]);\n\t\t}\n\t}\n\treturn $numbers;\n\
    }\necho '<h2>Remove duplicates</h2>';\n$example = [1, 2, 3, 2, 4];\necho 'original\
    \ array: '.implode(', ', $example).'<br>';\n$new_array = remove_duplicates($example);\n\
    echo 'new array: '.implode(', ', $new_array);\necho '<hr>';\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<h2>Remove duplicates</h2>original array: 1, 2, 3, 2, 4<br>\nWarning: substr_count()\
    \ expects parameter 1 to be string, array given in /tmp/tmpjrg03vfp.php on line\
    \ 8\n\nWarning: substr_count() expects parameter 1 to be string, array given in\
    \ /tmp/tmpjrg03vfp.php on line 8\n\nWarning: substr_count() expects parameter\
    \ 1 to be string, array given in /tmp/tmpjrg03vfp.php on line 8\n\nWarning: substr_count()\
    \ expects parameter 1 to be string, array given in /tmp/tmpjrg03vfp.php on line\
    \ 8\n\nWarning: substr_count() expects parameter 1 to be string, array given in\
    \ /tmp/tmpjrg03vfp.php on line 8\nnew array: 1, 2, 3, 2, 4<hr>\nWarning: substr_count()\
    \ expects parameter 1 to be string, array given in /tmp/tmpjrg03vfp.php on line\
    \ 8\n\nWarning: substr_count() expects parameter 1 to be string, array given in\
    \ /tmp/tmpjrg03vfp.php on line 8\n\nWarning: substr_count() expects parameter\
    \ 1 to be string, array given in /tmp/tmpjrg03vfp.php on line 8\n\nWarning: substr_count()\
    \ expects parameter 1 to be string, array given in /tmp/tmpjrg03vfp.php on line\
    \ 8\n\nWarning: substr_count() expects parameter 1 to be string, array given in\
    \ /tmp/tmpjrg03vfp.php on line 8\n\nWarning: substr_count() expects parameter\
    \ 1 to be string, array given in /tmp/tmpjrg03vfp.php on line 8\n\nWarning: substr_count()\
    \ expects parameter 1 to be string, array given in /tmp/tmpjrg03vfp.php on line\
    \ 8\n\nWarning: substr_count() expects parameter 1 to be string, array given in\
    \ /tmp/tmpjrg03vfp.php on line 8\n\nWarning: substr_count() expects parameter\
    \ 1 to be string, array given in /tmp/tmpjrg03vfp.php on line 8\n\nWarning: substr_count()\
    \ expects parameter 1 to be string, array given in /tmp/tmpjrg03vfp.php on line\
    \ 8\n\nWarning: substr_count() expects parameter 1 to be string, array given in\
    \ /tmp/tmpjrg03vfp.php on line 8\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpjrg03vfp.php:28\nStack trace:\n#0 /tmp/tmpjrg03vfp.php(31): test()\n\
    #1 {main}\n  thrown in /tmp/tmpjrg03vfp.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $new_numbers = [];\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $new_numbers)) {\n      $new_numbers[] = $number;\n    }\n  }\n  return $new_numbers;\n\
    }\nprint_r(remove_duplicates([1, 2, 3, 2, 4]));\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpn6o42yrl.php:23\nStack\
    \ trace:\n#0 /tmp/tmpn6o42yrl.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpn6o42yrl.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t$uniques = [];\n\tforeach ($numbers as $number) {\n\t\tif (!in_array($number,\
    \ $uniques)) {\n\t\t\t$uniques[] = $number;\n\t\t}\n\t}\n\treturn $uniques;\n\
    }\n\n$numbers = [1, 2, 3, 2, 4];\n\necho \"\\n------------------------------------\\\
    n\";\nprint_r(remove_duplicates($numbers));\necho \"\\n------------------------------------\\\
    n\";\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\n------------------------------------\nArray\n(\n    [0] => 1\n    [1]\
    \ => 2\n    [2] => 3\n    [3] => 4\n)\n\n------------------------------------\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwxgfkku_.php:28\nStack\
    \ trace:\n#0 /tmp/tmpwxgfkku_.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpwxgfkku_.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $result)) {\n            $result[] = $number;\n        }\n    }\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr9z7xa5l.php:22\n\
    Stack trace:\n#0 /tmp/tmpr9z7xa5l.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpr9z7xa5l.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    $encountered = [];\n    foreach ($numbers as $number)\
    \ {\n        if (!in_array($number, $encountered)) {\n            $result[] =\
    \ $number;\n            $encountered[] = $number;\n        }\n    }\n    return\
    \ $result;\n}\n\n$numbers = [1, 2, 3, 2, 4];\nprint_r(remove_duplicates($numbers));\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpxerm6s5_.php:27\nStack\
    \ trace:\n#0 /tmp/tmpxerm6s5_.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpxerm6s5_.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $output = [];\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $output)) {\n            $output[] = $number;\n        }\n    }\n    return\
    \ $output;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvncvwqhv.php:23\n\
    Stack trace:\n#0 /tmp/tmpvncvwqhv.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpvncvwqhv.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    // your code here\n    $hash_table = [];\n    $result = [];\n    foreach\
    \ ($numbers as $key => $value) {\n      if (array_key_exists($value, $hash_table))\
    \ {\n        unset($numbers[$key]);\n      } else {\n        $hash_table[$value]\
    \ = 1;\n      }\n    }\n    return $numbers;\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfw6lz190.php:26\n\
    Stack trace:\n#0 /tmp/tmpfw6lz190.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpfw6lz190.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $arr = [];\n    foreach ($numbers as $number) {\n        if (in_array($number,\
    \ $arr)) {\n            continue;\n        }\n        $arr[] = $number;\n    }\n\
    \    return $arr;\n}\nprint_r(remove_duplicates([1, 2, 3, 2, 4]));\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpaaeztscv.php:24\nStack\
    \ trace:\n#0 /tmp/tmpaaeztscv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpaaeztscv.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  return array_values(array_flip(array_flip($numbers)));\n}\n\nprint_r(remove_duplicates([1,\
    \ 2, 3, 2, 4]));\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpy4se_q8b.php:18\nStack\
    \ trace:\n#0 /tmp/tmpy4se_q8b.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpy4se_q8b.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  $occurences = [];\n  foreach ($numbers as $number) {\n\
    \    if (isset($occurences[$number])) {\n      $occurences[$number]++;\n    }\
    \ else {\n      $occurences[$number] = 1;\n    }\n  }\n  foreach ($numbers as\
    \ $number) {\n    if ($occurences[$number] == 1) {\n      $result[] = $number;\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $numbers = array_values(array_unique($numbers));\n    return $numbers;\n\
    }\n$output = remove_duplicates([1, 2, 3, 2, 4]);\nprint_r($output);\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp06mtvsru.php:19\nStack\
    \ trace:\n#0 /tmp/tmp06mtvsru.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp06mtvsru.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $numbers = array_unique($numbers);\n    return $numbers;\n}\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpevjfhrhu.php:17\n\
    Stack trace:\n#0 /tmp/tmpevjfhrhu.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpevjfhrhu.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t$number = array_shift($numbers);\n\t\n\t$temp = remove_duplicates($numbers);\n\
    \t\n\tif (in_array($number, $temp)) {\n\t\treturn $temp;\n\t}\n\t\n\tarray_unshift($temp,\
    \ $number);\n\t\n\treturn $temp;\n}\n\nprint_r(remove_duplicates([1, 2, 3, 2,\
    \ 4]));\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $uniques = [];\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $uniques)) {\n      $uniques[] = $number;\n    }\n  }\n  return $uniques;\n\
    }\n\necho \"<pre>\";\nvar_dump(remove_duplicates([1, 2, 3, 2, 4]));\necho \"</pre>\"\
    ;\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n\
    \  [3]=>\n  int(4)\n}\n</pre>\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpq9fhdfjc.php:26\nStack trace:\n#0 /tmp/tmpq9fhdfjc.php(29): test()\n\
    #1 {main}\n  thrown in /tmp/tmpq9fhdfjc.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $result)) {\n      $result[] = $number;\n    }\n  }\n  return $result;\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzova556e.php:22\n\
    Stack trace:\n#0 /tmp/tmpzova556e.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpzova556e.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    // TODO\n\n    $result = [];\n    foreach ($numbers as $number) {\n \
    \       if (!in_array($number, $result)) {\n            $result[] = $number;\n\
    \        }\n    }\n    return $result;\n}\n\necho \"<pre>\";\nvar_dump(remove_duplicates([1,\
    \ 2, 3, 2, 4]));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n\
    \  [3]=>\n  int(4)\n}\n</pre>\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp8n2ina_c.php:28\nStack trace:\n#0 /tmp/tmp8n2ina_c.php(31): test()\n\
    #1 {main}\n  thrown in /tmp/tmp8n2ina_c.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t$unique_numbers = [];\n\tfor ($i = 0; $i < count($numbers); $i++) {\n\t\
    \tif (!in_array($numbers[$i], $unique_numbers)) {\n\t\t\t$unique_numbers[] = $numbers[$i];\n\
    \t\t}\n\t}\n\treturn $unique_numbers;\n}\n$numbers = [1, 2, 3, 2, 4];\nprint_r(remove_duplicates($numbers));\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpv47vmnut.php:24\nStack\
    \ trace:\n#0 /tmp/tmpv47vmnut.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpv47vmnut.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $result)) {\n            $result[] = $number;\n        }\n    }\n    return\
    \ $result;\n}\n\nvar_dump(remove_duplicates([1, 2, 3, 2, 4]));\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n \
    \ [3]=>\n  int(4)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph9g3vqal.php:24\n\
    Stack trace:\n#0 /tmp/tmph9g3vqal.php(27): test()\n#1 {main}\n  thrown in /tmp/tmph9g3vqal.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $no_dupes = [];\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $no_dupes)) {\n            $no_dupes[] = $number;\n        }\n    }\n    return\
    \ $no_dupes;\n}\n\nprint_r(remove_duplicates([1, 2, 3, 2, 4]));\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp2k0grvy_.php:24\nStack\
    \ trace:\n#0 /tmp/tmp2k0grvy_.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp2k0grvy_.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $new_numbers = [];\n    foreach ($numbers as $number) {\n        if (in_array($number,\
    \ $new_numbers)) {\n            // array_search get the index of element in an\
    \ array\n            $index = array_search($number, $new_numbers);\n         \
    \   unset($new_numbers[$index]);\n        } else {\n            $new_numbers[]\
    \ = $number;\n        }\n    }\n    return $new_numbers;\n}\n$result = remove_duplicates([1,\
    \ 2, 3, 2, 4]);\necho implode(' ', $result);\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1 3 4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3qzfee9v.php:28\n\
    Stack trace:\n#0 /tmp/tmp3qzfee9v.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp3qzfee9v.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t// do something\n\tfor ($i = 0; $i < count($numbers); $i++) {\n\t\tfor\
    \ ($j = $i + 1; $j < count($numbers); $j++) {\n\t\t\tif ($numbers[$i] == $numbers[$j])\
    \ {\n\t\t\t\tunset($numbers[$j]);\n\t\t\t}\n\t\t}\n\t}\n\treturn $numbers;\n}\n\
    \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_kj9s95h.php:25\n\
    Stack trace:\n#0 /tmp/tmp_kj9s95h.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp_kj9s95h.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $unique_numbers = [];\n  foreach ($numbers as $num) {\n    if (!in_array($num,\
    \ $unique_numbers)) {\n      $unique_numbers[] = $num;\n    }\n  }\n  return $unique_numbers;\n\
    }\nprint_r(remove_duplicates([1, 2, 3, 2, 4]));\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpjs8mpj75.php:23\nStack\
    \ trace:\n#0 /tmp/tmpjs8mpj75.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpjs8mpj75.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    $number_occurrences = array_count_values($numbers);\n\
    \    foreach ($numbers as $number) {\n        if ($number_occurrences[$number]\
    \ == 1) {\n            $result[] = $number;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    $length = count($numbers);\n    for ($i = 0; $i <\
    \ $length; $i++) {\n        $temp = $numbers[$i];\n        if (!in_array($temp,\
    \ $result)) {\n            array_push($result, $temp);\n        }\n    }\n   \
    \ return $result;\n}\necho '<pre>';\nprint_r(remove_duplicates([1, 2, 3, 2, 4]));\n\
    echo '</pre>';\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphivb6hll.php:28\n\
    Stack trace:\n#0 /tmp/tmphivb6hll.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphivb6hll.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\treturn array_unique($numbers);\n}\n\nfunction candidate(...$args) {\n \
    \   return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt8uyn412.php:17\n\
    Stack trace:\n#0 /tmp/tmpt8uyn412.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpt8uyn412.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    foreach ($numbers as $n) {\n        if (!in_array($n,\
    \ $result)) {\n            $result[] = $n;\n        }\n    }\n    return $result;\n\
    }\nprint_r(remove_duplicates([1, 2, 3, 2, 4]));\necho \"<br>\";\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n<br>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpy63sggi9.php:25\nStack\
    \ trace:\n#0 /tmp/tmpy63sggi9.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpy63sggi9.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $unique = [];\n    foreach ($numbers as $n) {\n        if (!in_array($n,\
    \ $unique)) {\n            $unique[] = $n;\n        }\n    }\n    return $unique;\n\
    }\n$numbers = [1,2,3,2,4];\nprint_r(remove_duplicates($numbers));\n\necho '<hr>';\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n<hr>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp4qcmhdn9.php:26\nStack\
    \ trace:\n#0 /tmp/tmp4qcmhdn9.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp4qcmhdn9.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t$unique = [];\n\tforeach ($numbers as $number) {\n\t\tif (!in_array($number,\
    \ $unique)) {\n\t\t\t$unique[] = $number;\n\t\t}\n\t}\n\treturn $unique;\n}\n\n\
    print_r(remove_duplicates([1, 2, 3, 2, 4]));\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmparvdw8zg.php:24\nStack\
    \ trace:\n#0 /tmp/tmparvdw8zg.php(27): test()\n#1 {main}\n  thrown in /tmp/tmparvdw8zg.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $unique = [];\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $unique)) {\n      $unique[] = $number;\n    }\n  }\n  return $unique;\n}\n\
    $a = [2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11, 11, 12, 14, 14, 16, 17, 17, 18, 19,\
    \ 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 25, 25, 25, 26, 27, 27, 27,\
    \ 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34,\
    \ 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39, 39, 40, 40,\
    \ 40, 41, 41, 41, 42, 42, 42, 43, 43, 43, 44, 44, 44, 45, 45, 45, 46, 46, 46,\
    \ 47, 47, 47, 48, 48, 48, 49, 49, 49, 50, 50, 50, 51, 51, 51, 52, 52, 52, 53,\
    \ 53, 53, 54, 54, 54, 55, 55, 55, 56, 56, 56, 57, 57, 57, 58, 58, 58, 59, 59,\
    \ 59, 60, 60, 60, 61, 61, 61, 62, 62, 62, 63, 63, 63, 64, 64, 64, 65, 65, 65,\
    \ 66, 66, 66, 67, 67, 67, 68, 68, 68, 69, 69, 69, 70, 70, 70, 71, 71, 71, 72,\
    \ 72, 72, 73, 73, 73, 74, 74, 74, 75, 75, 75, 76, 76, 76, 77, 77, 77, 78, 78,\
    \ 78, 79, 79, 79, 80, 80, 80, 81, 81, 81, 82, 82, 82, 83, 83, 83, 84, 84, 84,\
    \ 85, 85, 85, 86, 86, 86, 87, 87, 87, 88, 88, 88, 89, 89, 89,\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpiq79v3uf.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t// Initialize an empty array\n\t$unique_numbers = [];\n\t// Loop through\
    \ the numbers array\n\tforeach ($numbers as $number) {\n\t\t// If the number has\
    \ already been added to the unique_numbers array,\n\t\t// then don't add it again,\
    \ otherwise add it\n\t\tif (!in_array($number, $unique_numbers)) {\n\t\t\t$unique_numbers[]\
    \ = $number;\n\t\t}\n\t}\n\t// Return the unique_numbers array\n\treturn $unique_numbers;\n\
    }\n\n$numbers = [1, 2, 3, 2, 4];\nvar_dump(remove_duplicates($numbers));\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n \
    \ [3]=>\n  int(4)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe_3aezkw.php:30\n\
    Stack trace:\n#0 /tmp/tmpe_3aezkw.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpe_3aezkw.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $result)) {\n            $result[] = $number;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgmmx3pe2.php:23\n\
    Stack trace:\n#0 /tmp/tmpgmmx3pe2.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpgmmx3pe2.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $seen = [];\n  $result = [];\n  foreach ($numbers as $number) {\n    if\
    \ (!isset($seen[$number])) {\n      $seen[$number] = 1;\n      $result[] = $number;\n\
    \    }\n  }\n  return $result;\n}\n\n$a = [1, 2, 3, 2, 4];\nvar_dump(remove_duplicates($a));\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n \
    \ [3]=>\n  int(4)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy121ji8i.php:27\n\
    Stack trace:\n#0 /tmp/tmpy121ji8i.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpy121ji8i.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $counts = array_count_values($numbers);\n    return array_diff($numbers,\
    \ array_keys($counts, 2));\n}\nprint_r(remove_duplicates([1, 2, 3, 2, 4]));\n\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [2] => 3\n    [4] => 4\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpjdioon19.php:19\nStack trace:\n#0 /tmp/tmpjdioon19.php(22):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpjdioon19.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t$count = count($numbers);\n\t$new = [];\n\tfor ($i = 0; $i < $count; $i++)\
    \ {\n\t\tif ( !in_array($numbers[$i], $new) ) {\n\t\t\t$new[] = $numbers[$i];\n\
    \t\t}\n\t}\n\treturn $new;\n}\n\nvar_dump(remove_duplicates([1, 2, 3, 2, 4]));\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n \
    \ [3]=>\n  int(4)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz04mvp02.php:25\n\
    Stack trace:\n#0 /tmp/tmpz04mvp02.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpz04mvp02.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $solution = [];\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $solution)) {\n            $solution[] = $number;\n        }\n    }\n    return\
    \ $solution;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp9919lgv.php:22\n\
    Stack trace:\n#0 /tmp/tmpp9919lgv.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp9919lgv.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $no_duplicates = [];\n  foreach ($numbers as $number) {\n    if (array_search($number,\
    \ $no_duplicates) === false) {\n      $no_duplicates[] = $number;\n    }\n  }\n\
    \  return $no_duplicates;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpntqta29o.php:22\n\
    Stack trace:\n#0 /tmp/tmpntqta29o.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpntqta29o.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    $uniques = [];\n    foreach ($numbers as $number)\
    \ {\n        if (!in_array($number, $uniques)) {\n            $uniques[] = $number;\n\
    \            $result[] = $number;\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuo_zoiaq.php:25\n\
    Stack trace:\n#0 /tmp/tmpuo_zoiaq.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpuo_zoiaq.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $unique_numbers = [];\n    foreach ($numbers as $number) {\n        if\
    \ (!isset($unique_numbers[$number])) {\n            $unique_numbers[$number] =\
    \ 0;\n        }\n        $unique_numbers[$number]++;\n    }\n    $result = [];\n\
    \    foreach ($numbers as $number) {\n        if ($unique_numbers[$number] ==\
    \ 1) {\n            $result[] = $number;\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    // https://www.php.net/manual/en/function.array-count-values.php\n  \
    \  // https://www.php.net/manual/en/function.array-keys.php\n    // https://www.php.net/manual/en/function.array-diff.php\n\
    \    // https://www.php.net/manual/en/function.array-unique.php\n    // https://www.php.net/manual/en/function.array-values.php\n\
    \    $result = array_values(array_diff($numbers, array_keys(array_count_values($numbers),\
    \ 1)));\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpodxbey1o.php:22\n\
    Stack trace:\n#0 /tmp/tmpodxbey1o.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpodxbey1o.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $numbers = array_unique($numbers);\n    return $numbers;\n}\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd27yn2sd.php:18\n\
    Stack trace:\n#0 /tmp/tmpd27yn2sd.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpd27yn2sd.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $output = [];\n    $keys = [];\n    $count = count($numbers);\n    for\
    \ ($i = 0; $i < $count; $i++) {\n        $number = $numbers[$i];\n        if (!isset($keys[$number]))\
    \ {\n            $keys[$number] = 1;\n            $output[] = $number;\n     \
    \   }\n    }\n    return $output;\n}\nprint_r(remove_duplicates([1, 2, 3, 2, 4]));\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpgurgmftn.php:27\nStack\
    \ trace:\n#0 /tmp/tmpgurgmftn.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpgurgmftn.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $duplicates = array();\n  $non_duplicates = array();\n  foreach ($numbers\
    \ as $number) {\n    if (in_array($number, $non_duplicates)) {\n      $duplicates[]\
    \ = $number;\n    } else {\n      $non_duplicates[] = $number;\n    }\n  }\n \
    \ $filtered_numbers = array_diff($numbers, $duplicates);\n  return $filtered_numbers;\n\
    }\nprint_r(remove_duplicates([1, 2, 3, 2, 4]));\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [2] => 3\n    [4] => 4\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp0gr43v1a.php:27\nStack trace:\n#0 /tmp/tmp0gr43v1a.php(30):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0gr43v1a.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\treturn array_values(array_unique($numbers));\n}\n\nprint_r(remove_duplicates([1,\
    \ 2, 3, 2, 4]));\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpzc0uprpz.php:18\nStack\
    \ trace:\n#0 /tmp/tmpzc0uprpz.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpzc0uprpz.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $res = [];\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $res)) {\n            $res[] = $number;\n        }\n    }\n    return $res;\n\
    }\n\necho implode(', ', remove_duplicates([1, 2, 3, 2, 4]));\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1, 2, 3, 4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcjxq_ozq.php:24\n\
    Stack trace:\n#0 /tmp/tmpcjxq_ozq.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcjxq_ozq.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $temp = [];\n  $output = [];\n  foreach ($numbers as $number) {\n    if\
    \ (!in_array($number, $temp)) {\n      $temp[] = $number;\n      $output[] = $number;\n\
    \    }\n  }\n  return $output;\n}\n\necho implode(', ', remove_duplicates([1,\
    \ 2, 3, 2, 4]));\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1, 2, 3, 4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb2ysn3fx.php:26\n\
    Stack trace:\n#0 /tmp/tmpb2ysn3fx.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpb2ysn3fx.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t$kata = [];\n\tfor ($i=0; $i < count($numbers); $i++) { \n\t\tif (!in_array($numbers[$i],\
    \ $kata)) {\n\t\t\t$kata[] = $numbers[$i];\n\t\t}\n\t}\n\treturn $kata;\n}\nprint_r(remove_duplicates([1,\
    \ 2, 3, 2, 4]));\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp7d04nyi6.php:23\nStack\
    \ trace:\n#0 /tmp/tmp7d04nyi6.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp7d04nyi6.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $unique = [];\n    $unique_count = [];\n    foreach ($numbers as $key\
    \ => $number) {\n        if (isset($unique_count[$number])) {\n            $unique_count[$number]++;\n\
    \        } else {\n            $unique_count[$number] = 1;\n        }\n    }\n\
    \    foreach ($numbers as $key => $number) {\n        if ($unique_count[$number]\
    \ == 1) {\n            $unique[] = $number;\n        }\n    }\n    return $unique;\n\
    }\necho '<br>';\necho '<br>';\necho \"<h1>Remove duplicates</h1>\";\nvar_dump(remove_duplicates([1,\
    \ 2, 3, 2, 4]));\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<br><br><h1>Remove duplicates</h1>array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n\
    \  int(3)\n  [2]=>\n  int(4)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $index = 0;\n  $numbers_count = count($numbers);\n  $result = [];\n  for\
    \ ($i = 0; $i < $numbers_count; $i++) {\n    $number = $numbers[$i];\n    $number_index\
    \ = array_search($number, $numbers);\n    if ($number_index == $i) {\n      $result[$index]\
    \ = $number;\n      $index++;\n    }\n  }\n  return $result;\n}\n\necho '<p>'.\
    \ implode(', ', remove_duplicates([1, 2, 3, 2, 4])) .'</p>';\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<p>1, 2, 3, 4</p>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmx48kzs9.php:29\n\
    Stack trace:\n#0 /tmp/tmpmx48kzs9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpmx48kzs9.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $values = array_count_values($numbers);\n    $counted_values = [];\n\
    \    foreach ($values as $key => $value) {\n        if ($value == 1) {\n     \
    \       $counted_values[] = $key;\n        }\n    }\n    return $counted_values;\n\
    }\n\nprint_r(remove_duplicates([1, 2, 3, 2, 4]));\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 4\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $result)) {\n            $result[] = $number;\n        }\n    }\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwm41tjfy.php:22\n\
    Stack trace:\n#0 /tmp/tmpwm41tjfy.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpwm41tjfy.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $arr = [];\n    foreach ($numbers as $num) {\n        if (!in_array($num,\
    \ $arr)) {\n            $arr[] = $num;\n        }\n    }\n    return $arr;\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1c0_r75h.php:22\n\
    Stack trace:\n#0 /tmp/tmp1c0_r75h.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp1c0_r75h.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $unique_numbers = [];\n  $duplicates = [];\n  foreach ($numbers as $number)\
    \ {\n    if (in_array($number, $unique_numbers)) {\n      $duplicates[] = $number;\n\
    \    } else {\n      $unique_numbers[] = $number;\n    }\n  }\n  return array_diff($numbers,\
    \ $duplicates);\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmbs5__8o.php:26\n\
    Stack trace:\n#0 /tmp/tmpmbs5__8o.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpmbs5__8o.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $newNumbers = [];\n    $newNumbers[] = $numbers[0];\n    $duplicate =\
    \ false;\n    for ($i = 1; $i < count($numbers); $i++) {\n        foreach ($newNumbers\
    \ as $number) {\n            if ($numbers[$i] == $number) {\n                $duplicate\
    \ = true;\n            }\n        }\n        if (!$duplicate) {\n            $newNumbers[]\
    \ = $numbers[$i];\n        }\n        $duplicate = false;\n    }\n    return $newNumbers;\n\
    }\nprint_r(remove_duplicates([1, 2, 3, 2, 4]));\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp4oi3af3a.php:29\nStack\
    \ trace:\n#0 /tmp/tmp4oi3af3a.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp4oi3af3a.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $filtered = [];\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $filtered)) {\n            $filtered[] = $number;\n        }\n    }\n    return\
    \ $filtered;\n}\necho '>>> ' . implode(', ', remove_duplicates([1, 2, 3, 2, 4]))\
    \ . \"\\n\";\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ">>> 1, 2, 3, 4\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwbc_00yi.php:24\n\
    Stack trace:\n#0 /tmp/tmpwbc_00yi.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpwbc_00yi.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $temp = [];\n    $result = [];\n    foreach ($numbers as $number) {\n\
    \        if (!in_array($number, $temp)) {\n            $temp[] = $number;\n  \
    \          $result[] = $number;\n        }\n    }\n    return $result;\n}\nprint_r(remove_duplicates([1,\
    \ 2, 3, 2, 4]));\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpriymehw0.php:25\nStack\
    \ trace:\n#0 /tmp/tmpriymehw0.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpriymehw0.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t$array = array_unique($numbers);\n\treturn $array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcne4bf01.php:18\n\
    Stack trace:\n#0 /tmp/tmpcne4bf01.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpcne4bf01.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $numbers_without_duplicates = [];\n    foreach ($numbers as $number)\
    \ {\n        if (!in_array($number, $numbers_without_duplicates)) {\n        \
    \    $numbers_without_duplicates[] = $number;\n        }\n    }\n    return $numbers_without_duplicates;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8fl9lav5.php:23\n\
    Stack trace:\n#0 /tmp/tmp8fl9lav5.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp8fl9lav5.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $output = [];\n    $count = [];\n    foreach ($numbers as $number) {\n\
    \        if (!isset($count[$number])) {\n            $count[$number] = 0;\n  \
    \      }\n        $count[$number]++;\n    }\n    foreach ($numbers as $number)\
    \ {\n        if ($count[$number] < 2) {\n            $output[] = $number;\n  \
    \      }\n    }\n    return $output;\n}\n\nfunction candidate(...$args) {\n  \
    \  return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    return array_unique($numbers);\n}\nprint_r(remove_duplicates([1, 2, 3,\
    \ 2, 4]));\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [4] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpjeofvd_h.php:18\nStack\
    \ trace:\n#0 /tmp/tmpjeofvd_h.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpjeofvd_h.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t$duplicates = array();\n\tforeach ($numbers as $number) {\n\t\tif (in_array($number,\
    \ $duplicates)) {\n\t\t\tcontinue;\n\t\t}\n\t\t$duplicates[] = $number;\n\t}\n\
    \treturn $duplicates;\n}\n\n$test1 = array(1, 2, 3, 2, 4);\n$test2 = array(1,\
    \ 2, 3, 2, 4, 2, 3, 3, 1, 2, 4, 2, 3, 2, 1, 2, 3, 2, 4, 2, 3, 2, 1, 2, 3, 2, 4,\
    \ 2, 3, 2, 1, 2, 3, 2, 4, 2, 3, 2, 1, 2, 3, 2, 4, 2, 3, 2, 1, 2, 3, 2, 4, 2, 3,\
    \ 2, 1, 2, 3, 2, 4, 2, 3, 2, 1, 2, 3, 2, 4, 2, 3, 2, 1, 2, 3, 2, 4, 2, 3, 2, 1,\
    \ 2, 3, 2, 4, 2, 3, 2, 1, 2, 3, 2, 4, 2, 3, 2, 1, 2, 3, 2, 4, 2, 3, 2, 1, 2, 3,\
    \ 2, 4, 2, 3, 2, 1, 2, 3, 2, 4, 2, 3, 2, 1, 2, 3, 2, 4, 2, 3, 2, 1, 2, 3, 2, 4,\
    \ 2, 3, 2, 1, 2, 3, 2, 4, 2, 3, 2, 1, 2, 3, 2, 4, 2, 3, 2, 1, 2, 3, 2, 4, 2, 3,\
    \ 2, 1, 2, 3, 2, 4, 2, 3, 2, 1, 2, 3, 2, 4, 2, 3, 2, 1, 2, 3, 2, 4, 2, 3, 2, 1,\
    \ 2, 3, 2, 4, 2, 3, 2, 1, 2, 3, 2, 4, 2, 3, 2, 1, 2, 3, 2, 4, 2, 3, 2, 1,\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmzpc11gc.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    $uniq = [];\n    foreach ($numbers as $number) {\n\
    \        if (!in_array($number, $uniq)) {\n            $uniq[] = $number;\n  \
    \          $result[] = $number;\n        }\n    }\n    return $result;\n}\n\n\
    echo print_r(remove_duplicates([1, 2, 3, 2, 4]));\necho PHP_EOL;\necho print_r(remove_duplicates([3,\
    \ 5, 4, 1, 3, 4, 9, 6, 5, 1, 6, 4, 4, 5, 9, 8, 5, 5, 8, 2, 8, 2, 1, 8, 8, 2, 9,\
    \ 2, 1, 3, 9, 2, 3, 3, 1, 2, 3, 1, 9, 2, 1, 2, 9, 2, 1, 2, 9, 2, 3, 3, 1, 2, 3,\
    \ 1, 9, 2, 1, 2, 9, 2, 1, 2, 9, 2, 3, 3, 1, 2, 3, 1, 9, 2, 1, 2, 9, 2, 1, 2, 9,\
    \ 2, 3, 3, 1, 2, 3, 1, 9, 2, 1, 2, 9, 2, 1, 2, 9, 2, 3, 3, 1, 2, 3, 1, 9, 2, 1,\
    \ 2, 9, 2, 1, 2, 9, 2, 3, 3, 1, 2, 3, 1, 9, 2, 1, 2, 9, 2, 1, 2, 9, 2, 3, 3, 1,\
    \ 2, 3, 1, 9, 2, 1, 2, 9, 2, 1, 2, 9, 2, 3, 3, 1, 2, 3, 1, 9, 2, 1, 2, 9, 2, 1,\
    \ 2, 9, 2, 3, 3, 1, 2, 3, 1, 9, 2, 1, 2, 9, 2, 1, 2, 9, 2, 3, 3, 1, 2, 3, 1, 9,\
    \ 2, 1, 2, 9, 2, 1, 2, 9, 2, 3, 3, 1, 2, 3, 1,\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4uk90_sf.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $result)) {\n            $result[] = $number;\n        }\n    }\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2bqf7eci.php:22\n\
    Stack trace:\n#0 /tmp/tmp2bqf7eci.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp2bqf7eci.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    return array_values(array_unique($numbers));\n}\necho \"<h1>remove_duplicates</h1>\"\
    ;\necho \"<pre>\";\nprint_r(remove_duplicates([1, 2, 3, 2, 4]));\necho \"</pre>\"\
    ;\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<h1>remove_duplicates</h1><pre>Array\n(\n    [0] => 1\n    [1] => 2\n \
    \   [2] => 3\n    [3] => 4\n)\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpl2edfvf_.php:21\nStack trace:\n#0 /tmp/tmpl2edfvf_.php(24): test()\n\
    #1 {main}\n  thrown in /tmp/tmpl2edfvf_.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $duplicates = [];\n    foreach ($numbers as $n) {\n        if (in_array($n,\
    \ $duplicates)) {\n            // remove all instances of $n\n            while\
    \ (($i = array_search($n, $numbers)) !== false) {\n                unset($numbers[$i]);\n\
    \            }\n        } else {\n            $duplicates[] = $n;\n        }\n\
    \    }\n    return $numbers;\n}\n\nprint_r(remove_duplicates([1, 2, 3, 2, 4]));\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [2] => 3\n    [4] => 4\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp5er4hm1x.php:29\nStack trace:\n#0 /tmp/tmp5er4hm1x.php(32):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5er4hm1x.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  // your code here!\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6plgjspn.php:14\n\
    Stack trace:\n#0 /tmp/tmp6plgjspn.php(19): test()\n#1 {main}\n  thrown in /tmp/tmp6plgjspn.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t// create an array to store unique values\n\t$unique_values = [];\n\t//\
    \ loop through the input array\n\tforeach ($numbers as $number) {\n\t\t// check\
    \ to see if the value is in the unique array\n\t\tif (!in_array($number, $unique_values))\
    \ {\n\t\t\t// add to the unique array if not already there\n\t\t\t$unique_values[]\
    \ = $number;\n\t\t}\n\t}\n\t// return unique array\n\treturn $unique_values;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaekpq7q3.php:28\n\
    Stack trace:\n#0 /tmp/tmpaekpq7q3.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpaekpq7q3.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    foreach ($numbers as $number) {\n        if ( ! in_array($number,\
    \ $result)) {\n            $result[] = $number;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpquxrk93f.php:23\n\
    Stack trace:\n#0 /tmp/tmpquxrk93f.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpquxrk93f.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t$numbers_unique = array_unique($numbers);\n\treturn $numbers_unique;\n\
    }\nprint_r(remove_duplicates([1, 2, 3, 2, 4]));\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [4] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp2qq6d6k9.php:19\nStack\
    \ trace:\n#0 /tmp/tmp2qq6d6k9.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp2qq6d6k9.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t$new_numbers = [];\n\tforeach ($numbers as $number) {\n\t\tif (!in_array($number,\
    \ $new_numbers)) {\n\t\t\t$new_numbers[] = $number;\n\t\t}\n\t}\n\treturn $new_numbers;\n\
    }\n\n$test_numbers = [1, 2, 3, 2, 4];\nprint_r(remove_duplicates($test_numbers));\n\
    \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp4bk0y3ui.php:26\nStack\
    \ trace:\n#0 /tmp/tmp4bk0y3ui.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp4bk0y3ui.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $new_numbers = [];\n    $occurrences = array_count_values($numbers);\n\
    \    foreach ($numbers as $number) {\n        if ($occurrences[$number] == 1)\
    \ {\n            $new_numbers[] = $number;\n        }\n    }\n    return $new_numbers;\n\
    }\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t$uniq_numbers = [];\n\tforeach ($numbers as $number) {\n\t\tif (!in_array($number,\
    \ $uniq_numbers)) {\n\t\t\t$uniq_numbers[] = $number;\n\t\t}\n\t}\n\treturn $uniq_numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph9z1gtp8.php:23\n\
    Stack trace:\n#0 /tmp/tmph9z1gtp8.php(26): test()\n#1 {main}\n  thrown in /tmp/tmph9z1gtp8.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t$numbers_count = array_count_values($numbers);\n\t$result = [];\n\tforeach\
    \ ($numbers as $num) {\n\t\tif ($numbers_count[$num] < 2) {\n\t\t\t$result[] =\
    \ $num;\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    $duplicates = [];\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        if (!in_array($numbers[$i], $duplicates)) {\n            if\
    \ (in_array($numbers[$i], $numbers)) {\n                array_push($duplicates,\
    \ $numbers[$i]);\n            } else {\n                array_push($result, $numbers[$i]);\n\
    \            }\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfnlex1p2.php:26\n\
    Stack trace:\n#0 /tmp/tmpfnlex1p2.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpfnlex1p2.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    // your code here\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr1x7rqz0.php:15\n\
    Stack trace:\n#0 /tmp/tmpr1x7rqz0.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpr1x7rqz0.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t// TODO: Implement this function\n\t$arr = array();\n\t$arr = array_unique($numbers);\n\
    \treturn $arr;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfyf4hdm2.php:20\n\
    Stack trace:\n#0 /tmp/tmpfyf4hdm2.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpfyf4hdm2.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $unique_numbers = [];\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $unique_numbers)) {\n      $unique_numbers[] = $number;\n    }\n  }\n  return\
    \ $unique_numbers;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp54hj_bya.php:22\n\
    Stack trace:\n#0 /tmp/tmp54hj_bya.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp54hj_bya.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $finalArray = [];\n  $duplicatesArray = [];\n  foreach ($numbers as $num)\
    \ {\n    if (!in_array($num, $finalArray)) {\n      $finalArray[] = $num;\n  \
    \  } else {\n      $duplicatesArray[] = $num;\n    }\n  }\n  return array_diff($numbers,\
    \ $duplicatesArray);\n}\n\nprint_r(remove_duplicates([1, 2, 3, 2, 4]));\nprint_r(remove_duplicates([1,\
    \ 2, 3, 2, 4, 1, 4, 5, 6, 7, 8, 5, 9, 0, 9, 5, 5, 5, 9, 5, 5, 5, 9, 5, 5, 5, 9,\
    \ 5, 5, 5, 9, 5, 5, 5, 9, 5, 5, 5, 9, 5, 5, 5, 9, 5, 5, 5, 9, 5, 5, 5, 9, 5, 5,\
    \ 5, 9, 5, 5, 5, 9, 5, 5, 5, 9, 5, 5, 5, 9, 5, 5, 5, 9, 5, 5, 5, 9, 5, 5, 5, 9,\
    \ 5, 5, 5, 9, 5, 5, 5, 9, 5, 5, 5, 9, 5, 5, 5, 9, 5, 5, 5, 9, 5, 5, 5, 9, 5, 5,\
    \ 5, 9, 5, 5, 5, 9, 5, 5, 5, 9, 5, 5, 5, 9, 5, 5, 5, 9, 5, 5, 5, 9, 5, 5, 5, 9,\
    \ 5, 5, 5, 9, 5, 5, 5, 9, 5, 5, 5, 9, 5, 5, 5, 9, 5, 5, 5, 9, 5, 5, 5, 9, 5, 5,\
    \ 5, 9, 5, 5, 5, 9, 5, 5, 5, 9, 5, 5, 5, 9, 5, 5, 5, 9, 5, 5, 5, 9, 5, 5, 5, 9,\
    \ 5, 5, 5, 9, 5, 5, 5, 9, 5,\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4dbkr0o9.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $counts = array_count_values($numbers);\n  $result = [];\n  foreach ($numbers\
    \ as $number) {\n    if ($counts[$number] == 1) {\n      $result[] = $number;\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  // your code here\n  $result = [];\n  foreach ($numbers as $number) {\n\
    \    if (!in_array($number, $result)) {\n      $result[] = $number;\n    }\n \
    \ }\n  return $result;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaa13ron4.php:23\n\
    Stack trace:\n#0 /tmp/tmpaa13ron4.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpaa13ron4.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    foreach ($numbers as $value) {\n        if (!in_array($value,\
    \ $result)) {\n            $result[] = $value;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg73fl25p.php:23\n\
    Stack trace:\n#0 /tmp/tmpg73fl25p.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpg73fl25p.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t$unique = [];\n\tforeach ($numbers as $number) {\n\t\tif (!in_array($number,\
    \ $unique)) {\n\t\t\t$unique[] = $number;\n\t\t}\n\t}\n\treturn $unique;\n}\n\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp03qq_whz.php:23\n\
    Stack trace:\n#0 /tmp/tmp03qq_whz.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp03qq_whz.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $result)) {\n      $result[] = $number;\n    }\n  }\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgkzig8sl.php:23\n\
    Stack trace:\n#0 /tmp/tmpgkzig8sl.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpgkzig8sl.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $occurrence = array_count_values($numbers);\n    $output = [];\n    foreach\
    \ ($occurrence as $key => $value) {\n        if ($value == 1) {\n            $output[]\
    \ = $key;\n        }\n    }\n    return $output;\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    if(!is_array($numbers)) return false;\n    foreach ($numbers as $key\
    \ => $number) {\n        if(is_int($number)) {\n            if(isset($new_array))\
    \ {\n                if(in_array($number, $new_array)) {\n                   \
    \ continue;\n                } else {\n                    $new_array[] = $number;\n\
    \                }\n            } else {\n                $new_array[] = $number;\n\
    \            }\n        } else {\n            return false;\n        }\n    }\n\
    \    return $new_array;\n}\n\n$list = [1, 2, 3, 2, 4];\nprint_r(remove_duplicates($list));\n\
    \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpj26sa294.php:34\nStack\
    \ trace:\n#0 /tmp/tmpj26sa294.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpj26sa294.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t// create an array to store the unique values\n\t$unique = [];\n\t// iterate\
    \ through each number in the array\n\tforeach ($numbers as $number) {\n\t\t//\
    \ if the number is not already in the unique array\n\t\tif (!in_array($number,\
    \ $unique)) {\n\t\t\t// add the number to the unique array\n\t\t\t$unique[] =\
    \ $number;\n\t\t}\n\t}\n\t// return the unique array\n\treturn $unique;\n}\n\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx_tf6ke4.php:28\n\
    Stack trace:\n#0 /tmp/tmpx_tf6ke4.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpx_tf6ke4.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    for ($i = 0; $i < count($numbers); $i++) {\n     \
    \   if (!in_array($numbers[$i], $result)) {\n            $result[] = $numbers[$i];\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiu0qv8pr.php:23\n\
    Stack trace:\n#0 /tmp/tmpiu0qv8pr.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpiu0qv8pr.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t$no_duplicates = [];\n\tforeach ($numbers as $number) {\n\t\tif (!isset($no_duplicates[$number]))\
    \ {\n\t\t\t$no_duplicates[$number] = $number;\n\t\t}\n\t}\n\treturn array_values($no_duplicates);\n\
    }\n\necho implode(', ', remove_duplicates([1, 2, 3, 2, 4]));\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1, 2, 3, 4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp74eifwam.php:24\n\
    Stack trace:\n#0 /tmp/tmp74eifwam.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp74eifwam.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    // TODO\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe38gztr9.php:15\n\
    Stack trace:\n#0 /tmp/tmpe38gztr9.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpe38gztr9.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    $numbers_counts = array_count_values($numbers);\n\
    \    foreach ($numbers_counts as $number => $count) {\n        if ($count == 1)\
    \ {\n            $result[] = $number;\n        }\n    }\n    return $result;\n\
    }\n\n$numbers = [1, 2, 3, 2, 4];\nvar_dump(remove_duplicates($numbers));\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(3)\n  [2]=>\n  int(4)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  return array_unique($numbers);\n}\n\nfunction candidate(...$args) {\n \
    \   return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkgw5n0bj.php:17\n\
    Stack trace:\n#0 /tmp/tmpkgw5n0bj.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpkgw5n0bj.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $counts = array_count_values($numbers);\n    return array_filter($numbers,\
    \ function($num) use ($counts) {\n        return $counts[$num] == 1;\n    });\n\
    }\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8g_eg9s.php:19\n\
    Stack trace:\n#0 /tmp/tmpl8g_eg9s.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpl8g_eg9s.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $unique = [];\n    foreach ($numbers as $n) {\n        if (!in_array($n,\
    \ $unique)) {\n            $unique[] = $n;\n        }\n    }\n    return $unique;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd2hdd22j.php:23\n\
    Stack trace:\n#0 /tmp/tmpd2hdd22j.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpd2hdd22j.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t$arr = [];\n\tforeach ($numbers as $k => $v) {\n\t\tif (!in_array($v, $arr))\
    \ {\n\t\t\t$arr[] = $v;\n\t\t}\n\t}\n\treturn $arr;\n}\n\nprint_r(remove_duplicates([1,\
    \ 2, 3, 2, 4]));\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpmbxh0fnb.php:25\nStack\
    \ trace:\n#0 /tmp/tmpmbxh0fnb.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpmbxh0fnb.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $no_duplicates = [];\n    foreach ($numbers as $n) {\n        if (!in_array($n,\
    \ $no_duplicates)) {\n            $no_duplicates[] = $n;\n        }\n    }\n \
    \   return $no_duplicates;\n}\nprint_r(remove_duplicates([1, 2, 3, 2, 4]));\n\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpzm3yx1dj.php:24\nStack\
    \ trace:\n#0 /tmp/tmpzm3yx1dj.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpzm3yx1dj.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t$duplicates = array();\n\t$uniques = array();\n\tforeach ($numbers as $number)\
    \ {\n\t\tif (in_array($number, $uniques)) {\n\t\t\t$duplicates[] = $number;\n\t\
    \t} else {\n\t\t\t$uniques[] = $number;\n\t\t}\n\t}\n\treturn array_diff($numbers,\
    \ $duplicates);\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8c5crz7s.php:26\n\
    Stack trace:\n#0 /tmp/tmp8c5crz7s.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8c5crz7s.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $result)) {\n            $result[] = $number;\n        }\n    }\n    return\
    \ $result;\n}\n\nvar_dump(remove_duplicates([1, 2, 3, 2, 4]));\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n \
    \ [3]=>\n  int(4)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3g8q29no.php:24\n\
    Stack trace:\n#0 /tmp/tmp3g8q29no.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp3g8q29no.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $new_numbers = [];\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $new_numbers)) {\n            $new_numbers[] = $number;\n        }\n    }\n\
    \    return $new_numbers;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7yli_2rl.php:23\n\
    Stack trace:\n#0 /tmp/tmp7yli_2rl.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp7yli_2rl.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $new_array = [];\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $new_array)) {\n            $new_array[] = $number;\n        }\n    }\n    return\
    \ $new_array;\n}\n\nprint_r(remove_duplicates([1, 2, 3, 2, 4]));\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp1dtbvyn4.php:24\nStack\
    \ trace:\n#0 /tmp/tmp1dtbvyn4.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp1dtbvyn4.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $uniques = [];\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $uniques)) {\n      $uniques[] = $number;\n    }\n  }\n  return $uniques;\n\
    }\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyi55id_g.php:22\n\
    Stack trace:\n#0 /tmp/tmpyi55id_g.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpyi55id_g.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $only_once = [];\n  $once = [];\n  foreach ($numbers as $number) {\n  \
    \  if (in_array($number, $once)) {\n      $only_once[] = $number;\n    } else\
    \ {\n      $once[] = $number;\n    }\n  }\n  $result = array_diff($numbers, $only_once);\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7lv2y8_5.php:27\n\
    Stack trace:\n#0 /tmp/tmp7lv2y8_5.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp7lv2y8_5.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $filteredNumbers = [];\n    foreach ($numbers as $number) {\n       \
    \ if (!in_array($number, $filteredNumbers)) {\n            $filteredNumbers[]\
    \ = $number;\n        }\n    }\n    return $filteredNumbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp45lmcf1p.php:23\n\
    Stack trace:\n#0 /tmp/tmp45lmcf1p.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp45lmcf1p.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $numbers_hash = array_count_values($numbers);\n  $answer = [];\n  foreach\
    \ ($numbers_hash as $key => $value) {\n    if ($value === 1) {\n      array_push($answer,\
    \ $key);\n    }\n  }\n  return $answer;\n}\necho \"remove_duplicates([1, 2, 3,\
    \ 2, 4])\\n\";\nvar_dump(remove_duplicates([1, 2, 3, 2, 4]));\necho \"remove_duplicates([1,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfyk9gddn.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    $count = array_count_values($numbers);\n    foreach\
    \ ($numbers as $number) {\n        if ($count[$number] == 1) {\n            $result[]\
    \ = $number;\n        }\n    }\n    return $result;\n}\n\n$result = remove_duplicates([1,\
    \ 2, 3, 2, 4]);\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $uniques = [];\n  $duplicates = [];\n  foreach ($numbers as $number) {\n\
    \    if (isset($uniques[$number])) {\n      $duplicates[$number] = $number;\n\
    \    } else {\n      $uniques[$number] = $number;\n    }\n  }\n  $numbers = array_diff($numbers,\
    \ $duplicates);\n  return $numbers;\n}\nprint_r(remove_duplicates([1, 2, 3, 2,\
    \ 4]));\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [2] => 3\n    [4] => 4\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpjc7kacsm.php:28\nStack trace:\n#0 /tmp/tmpjc7kacsm.php(31):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpjc7kacsm.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    $count = count($numbers);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        if (count(array_keys($numbers, $numbers[$i])) == 1) {\n   \
    \         $result[] = $numbers[$i];\n        }\n    }\n    return $result;\n}\n\
    \nvar_dump(remove_duplicates([1, 2, 3, 2, 4]));\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(3)\n  [2]=>\n  int(4)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    $unique_numbers = array_unique($numbers);\n    for\
    \ ($i = 0; $i < count($numbers); $i++) {\n        if (in_array($numbers[$i], $unique_numbers))\
    \ {\n            array_push($result, $numbers[$i]);\n            $number_to_delete\
    \ = array_search($numbers[$i], $unique_numbers);\n            unset($unique_numbers[$number_to_delete]);\n\
    \        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxultw5tt.php:25\n\
    Stack trace:\n#0 /tmp/tmpxultw5tt.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpxultw5tt.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $return = [];\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $return)) {\n            $return[] = $number;\n        }\n    }\n    return\
    \ $return;\n}\n\necho '<pre>';\nvar_dump(remove_duplicates([1, 2, 3, 2, 4]));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n\
    \  [3]=>\n  int(4)\n}\n</pre>\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpgha2ssqi.php:26\nStack trace:\n#0 /tmp/tmpgha2ssqi.php(29): test()\n\
    #1 {main}\n  thrown in /tmp/tmpgha2ssqi.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $arr_count = array_count_values($numbers);\n  $result = [];\n  foreach\
    \ ($numbers as $key => $value) {\n    if ($arr_count[$value] == 1) {\n      $result[]\
    \ = $value;\n    }\n  }\n  return $result;\n}\n$numbers = [1, 2, 3, 2, 4];\nprint_r(remove_duplicates($numbers));\n\
    echo \"<br>\";\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 4\n)\n<br>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $numbers = array_unique($numbers);\n    sort($numbers);\n    return $numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc7e3jjpo.php:19\n\
    Stack trace:\n#0 /tmp/tmpc7e3jjpo.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpc7e3jjpo.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $seen = [];\n    $unique = [];\n    foreach ($numbers as $number) {\n\
    \        if (!in_array($number, $seen)) {\n            $seen[] = $number;\n  \
    \          $unique[] = $number;\n        }\n    }\n    return $unique;\n}\n\n\
    $expected = [1, 3, 4];\n$actual = remove_duplicates([1, 2, 3, 2, 4]);\nassert($expected\
    \ == $actual);\necho \"Test 1 passed\\n\";\n\n$expected = [7, 8, 9];\n$actual\
    \ = remove_duplicates([7, 8, 9]);\nassert($expected == $actual);\necho \"Test\
    \ 2 passed\\n\";\n\n$expected = [];\n$actual = remove_duplicates([]);\nassert($expected\
    \ == $actual);\necho \"Test 3 passed\\n\";\n\n$expected = [1, 2, 3, 4, 5];\n$actual\
    \ = remove_duplicates([1, 2, 3, 4, 5]);\nassert($expected == $actual);\necho \"\
    Test 4 passed\\n\";\n\n$expected = [1, 2, 3, 4, 5];\n$actual = remove_duplicates([1,\
    \ 2, 3, 2, 4, 3, 5, 2, 1, 3, 4, 4, 5, 3, 2, 1]);\nassert($expected == $actual);\n\
    echo \"Test 5 passed\\n\";\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert($expected == $actual) failed in /tmp/tmpfmlvds_i.php\
    \ on line 20\nTest 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest\
    \ 5 passed\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfmlvds_i.php:49\n\
    Stack trace:\n#0 /tmp/tmpfmlvds_i.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpfmlvds_i.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    // keep a count of the number of times each element appears\n    $count\
    \ = array_count_values($numbers);\n    // only keep the elements that appear once\n\
    \    $result = array_keys($count, 1);\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t$unique = [];\n\tforeach ($numbers as $number) {\n\t\tif (!isset($unique[$number]))\
    \ {\n\t\t\t$unique[$number] = true;\n\t\t}\n\t}\n\treturn array_keys($unique);\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtag0bbh.php:23\n\
    Stack trace:\n#0 /tmp/tmpjtag0bbh.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpjtag0bbh.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    return array_values(array_flip(array_flip($numbers)));\n}\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ifpji4u.php:17\n\
    Stack trace:\n#0 /tmp/tmp6ifpji4u.php(20): test()\n#1 {main}\n  thrown in /tmp/tmp6ifpji4u.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $duplicates = [];\n    $count = count($numbers);\n    for ($i = 0; $i\
    \ < $count; $i++) {\n        $item = $numbers[$i];\n        if (isset($duplicates[$item]))\
    \ {\n            unset($numbers[$i]);\n        } else {\n            $duplicates[$item]\
    \ = true;\n        }\n    }\n    return array_values($numbers);\n}\n$numbers =\
    \ [1, 2, 3, 2, 4];\nprint_r(remove_duplicates($numbers));\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpvd0x12j3.php:28\nStack\
    \ trace:\n#0 /tmp/tmpvd0x12j3.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpvd0x12j3.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    //\n    // YOUR CODE GOES HERE\n    //\n    foreach ($numbers as $number)\
    \ {\n        if (!isset($map[$number])) {\n            $map[$number] = 1;\n  \
    \      } else {\n            $map[$number] += 1;\n        }\n    }\n    foreach\
    \ ($map as $key => $value) {\n        if ($value === 1) {\n            $result[]\
    \ = $key;\n        }\n    }\n    return $result;\n}\n\n$input = [1, 2, 3, 2, 4];\n\
    $expected = [1, 3, 4];\n$output = remove_duplicates($input);\n\necho \"Input:\
    \ \\n\";\necho implode(', ', $input);\necho \"\\n\\n\";\n\necho \"Expected: \\\
    n\";\necho implode(', ', $expected);\necho \"\\n\\n\";\n\necho \"Output: \\n\"\
    ;\necho implode(', ', $output);\necho \"\\n\\n\";\n\nif ($expected === $output)\
    \ {\n    echo \"CORRECT :) \\n\";\n} else {\n    echo \"INCORRECT :( \\n\";\n\
    }\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Input: \n1, 2, 3, 2, 4\n\nExpected: \n1, 3, 4\n\nOutput: \n1, 3, 4\n\n\
    CORRECT :) \n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpmd197gs2.php\
    \ on line 17\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmd197gs2.php:51\n\
    Stack trace:\n#0 /tmp/tmpmd197gs2.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpmd197gs2.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  // I need to use an empty array to store the values.\n  $unique_numbers\
    \ = [];\n  foreach ($numbers as $number) {\n    // Check if there is an index\
    \ of $unique_numbers for the current $number.\n    if (!in_array($number, $unique_numbers))\
    \ {\n      // Add the number to the array and return the array.\n      $unique_numbers[]\
    \ = $number;\n    }\n  }\n  return $unique_numbers;\n}\n$numbers = [1, 2, 3, 2,\
    \ 4];\nprint_r(remove_duplicates($numbers));\n\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpculiaxbe.php:28\nStack\
    \ trace:\n#0 /tmp/tmpculiaxbe.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpculiaxbe.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    // $result = [];\n    // foreach ($numbers as $number) {\n    //    \
    \ if (count(array_keys($numbers, $number)) === 1) {\n    //         $result[]\
    \ = $number;\n    //     }\n    // }\n    // return $result;\n\n    // return\
    \ array_unique($numbers);\n\n    return array_keys(array_flip($numbers));\n}\n\
    \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprlu7_yg3.php:27\n\
    Stack trace:\n#0 /tmp/tmprlu7_yg3.php(30): test()\n#1 {main}\n  thrown in /tmp/tmprlu7_yg3.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $map = [];\n    foreach ($numbers as $number) {\n        if (isset($map[$number]))\
    \ {\n            $map[$number] = false;\n        } else {\n            $map[$number]\
    \ = true;\n        }\n    }\n    $result = [];\n    foreach ($map as $key => $value)\
    \ {\n        if ($value) {\n            $result[] = $key;\n        }\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $new_numbers = [];\n    foreach ($numbers as $number) {\n        if (count(array_keys($numbers,\
    \ $number)) === 1) {\n            $new_numbers[] = $number;\n        }\n    }\n\
    \    return $new_numbers;\n}\n\necho implode(remove_duplicates([1, 2, 3, 2, 4]),\
    \ ' ');\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: 1 3 4
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $unique_numbers = [];\n  $seen_numbers = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!array_key_exists($number, $seen_numbers)) {\n      $unique_numbers[]\
    \ = $number;\n      $seen_numbers[$number] = true;\n    }\n  }\n  return $unique_numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpma24b73q.php:25\n\
    Stack trace:\n#0 /tmp/tmpma24b73q.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpma24b73q.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $result)) {\n      $result[] = $number;\n    }\n  }\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm98n2vlc.php:23\n\
    Stack trace:\n#0 /tmp/tmpm98n2vlc.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpm98n2vlc.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $uniques = [];\n  foreach ($numbers as $number) {\n    $uniques[$number]\
    \ = true;\n  }\n  return array_keys($uniques);\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgkar132o.php:21\n\
    Stack trace:\n#0 /tmp/tmpgkar132o.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpgkar132o.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $occurences = [];\n    $result = [];\n    foreach ($numbers as $number)\
    \ {\n        if (!array_key_exists($number, $occurences)) {\n            $occurences[$number]\
    \ = 1;\n            $result[] = $number;\n        } elseif ($occurences[$number]\
    \ === 1) {\n            $occurences[$number]++;\n        }\n    }\n    return\
    \ $result;\n}\n\n$input = [1, 2, 3, 2, 4];\n$result = remove_duplicates($input);\n\
    var_dump($result);\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n \
    \ [3]=>\n  int(4)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf5q1p03y.php:30\n\
    Stack trace:\n#0 /tmp/tmpf5q1p03y.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpf5q1p03y.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    return array_values(array_unique($numbers));\n}\n\nvar_dump(remove_duplicates([1,\
    \ 2, 3, 2, 4]));\nvar_dump(remove_duplicates([1, 2, 3, 2, 1]));\nvar_dump(remove_duplicates([1,\
    \ 1, 2, 3, 2, 1]));\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n \
    \ [3]=>\n  int(4)\n}\narray(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n\
    \  int(3)\n}\narray(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n\
    }\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplazqmcue.php:21\n\
    Stack trace:\n#0 /tmp/tmplazqmcue.php(24): test()\n#1 {main}\n  thrown in /tmp/tmplazqmcue.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t$result = [];\n\tforeach ($numbers as $num) {\n\t\tif (in_array($num, $result))\
    \ {\n\t\t\tunset($result[array_search($num, $result)]);\n\t\t} else {\n\t\t\t\
    $result[] = $num;\n\t\t}\n\t}\n\treturn $result;\n}\n\n$tests = [\n\t[[1, 2, 3,\
    \ 2, 4], [1, 3, 4]],\n\t[[1, 1, 2, 3, 2, 4], [3, 4]],\n\t[[1, 1, 2, 2, 3, 4],\
    \ [3, 4]],\n\t[[1, 1, 2, 2, 3, 3, 4], [4]],\n\t[[1, 1, 2, 2, 3, 3, 4, 4], []],\n\
    \t[[1, 1, 2, 2, 3, 3, 4, 4, 5], [5]],\n\t[[1, 1, 2, 2, 3, 3, 4, 4, 5, 5], []],\n\
    \t[[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6], [6]],\n\t[[1, 1, 2, 2, 3, 3, 4, 4, 5, 5,\
    \ 6, 6], []],\n\t[[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7], [7]],\n\t[[1, 1, 2,\
    \ 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7], []],\n\t[[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6,\
    \ 6, 7, 7, 8], [8]],\n\t[[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8], []],\n\
    \t[[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9], [9]],\n\t[[1, 1, 2, 2,\
    \ 3, 3, 4, 4, 5, 5, 6, 6, 7\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3vei92a3.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $res = [];\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $res)) {\n      $res[] = $number;\n    }\n  }\n  return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0co670sl.php:23\n\
    Stack trace:\n#0 /tmp/tmp0co670sl.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp0co670sl.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $uniqueNumbers = [];\n    $uniqueNumbers = array_unique($numbers);\n\
    \    return $uniqueNumbers;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgi6wup2g.php:19\n\
    Stack trace:\n#0 /tmp/tmpgi6wup2g.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpgi6wup2g.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t$result = [];\n\tforeach ($numbers as $number) {\n\t\tif (!in_array($number,\
    \ $result)) {\n\t\t\t$result[] = $number;\n\t\t}\n\t}\n\treturn $result;\n}\n\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5qrew500.php:23\n\
    Stack trace:\n#0 /tmp/tmp5qrew500.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp5qrew500.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $original_num = $numbers;\n    $new_array = [];\n    for ($i = 0; $i\
    \ < count($numbers); $i++) {\n        $new_array[] = $numbers[$i];\n        for\
    \ ($x = 0; $x < count($original_num); $x++) {\n            if ($numbers[$i] ==\
    \ $original_num[$x] && $i != $x) {\n                unset($new_array[$i]);\n \
    \           }\n        }\n    }\n    return $new_array;\n}\necho '<h1>' . remove_duplicates([1,\
    \ 2, 3, 2, 4]) . '</h1>';\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<h1>Array</h1>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe4gsvrms.php:28\n\
    Stack trace:\n#0 /tmp/tmpe4gsvrms.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpe4gsvrms.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $n) {\n    if (!in_array($n, $result))\
    \ {\n      $result[] = $n;\n    }\n  }\n  return $result;\n}\n\n$numbers = [1,2,3,2,4];\n\
    print_r(remove_duplicates($numbers));\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpyt5n1ql2.php:25\nStack\
    \ trace:\n#0 /tmp/tmpyt5n1ql2.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpyt5n1ql2.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t$temp = array();\n\t$counter = 0;\n\tforeach ($numbers as $number) {\n\t\
    \t$temp[$number] = ($temp[$number] ?? 0) + 1;\n\t}\n\t$result = array();\n\tforeach\
    \ ($numbers as $number) {\n\t\tif ($temp[$number] == 1) {\n\t\t\t$result[$counter]\
    \ = $number;\n\t\t\t$counter++;\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $freq = array_count_values($numbers);\n    $unique = array_unique($numbers);\n\
    \    return array_values(array_diff($unique, array_keys($freq, 2)));\n}\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    $uniques = [];\n    foreach ($numbers as $number)\
    \ {\n        if (!in_array($number, $uniques)) {\n            $uniques[] = $number;\n\
    \            $result[] = $number;\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp60fwm8sd.php:25\n\
    Stack trace:\n#0 /tmp/tmp60fwm8sd.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp60fwm8sd.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $single_numbers = [];\n    foreach ($numbers as $number) {\n        if\
    \ (!in_array($number, $single_numbers)) {\n            $single_numbers[] = $number;\n\
    \        }\n    }\n    return $single_numbers;\n}\n\nvar_dump(remove_duplicates([1,\
    \ 2, 3, 2, 4]));\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n \
    \ [3]=>\n  int(4)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu7go_0m7.php:24\n\
    Stack trace:\n#0 /tmp/tmpu7go_0m7.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpu7go_0m7.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $uniques = [];\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $uniques)) {\n      $uniques[] = $number;\n    }\n  }\n  return $uniques;\n\
    }\n\n$tests = [\n  [[1, 2, 3, 2, 4], [1, 3, 4]],\n  [[2, 3, 1, 1, 2, 3, 4, 4,\
    \ 5, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 1, 4, 5, 6, 7, 8, 9]],\n\
    \  [[], []],\n  [[1], [1]],\n  [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9]],\n  [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2686osrk.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $uniques = [];\n  foreach ($numbers as $num) {\n    if (!in_array($num,\
    \ $uniques)) $uniques[] = $num;\n  }\n  return $uniques;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpose303n1.php:21\n\
    Stack trace:\n#0 /tmp/tmpose303n1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpose303n1.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  return array_unique($numbers);\n}\n\nvar_dump(remove_duplicates([1, 2,\
    \ 3, 2, 4]));\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n \
    \ [4]=>\n  int(4)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp53g9j8xg.php:19\n\
    Stack trace:\n#0 /tmp/tmp53g9j8xg.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp53g9j8xg.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $number) {\n    if (count(array_keys($numbers,\
    \ $number)) == 1) {\n      $result[] = $number;\n    }\n  }\n  return $result;\n\
    }\n\n$tests = [\n  [[1, 2, 3, 2, 4], [1, 3, 4]],\n  [[1, 2, 3, 4], [1, 2, 3, 4]],\n\
    \  [[1, 2, 2, 3, 3, 4], [1, 4]],\n  [[1, 2, 3, 4, 4, 4], [1, 2, 3]],\n  [[], []],\n\
    ];\n\n$fails = 0;\nforeach ($tests as $test) {\n  $input = $test[0];\n  $expected\
    \ = $test[1];\n  $output = remove_duplicates($input);\n  if ($output != $expected)\
    \ {\n    $fails++;\n    print(\"Fail: input=$input expected=$expected output=$output\\\
    n\");\n  }\n}\nif ($fails == 0) {\n  print(\"All tests pass\\n\");\n}\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "All tests pass\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $uniques = [];\n  foreach ($numbers as $num) {\n    if (!in_array($num,\
    \ $uniques)) {\n      $uniques[] = $num;\n    }\n  }\n  return $uniques;\n}\n\
    echo implode(' ', remove_duplicates([1, 2, 3, 2, 4]));\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1 2 3 4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_fzgt_jb.php:23\n\
    Stack trace:\n#0 /tmp/tmp_fzgt_jb.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp_fzgt_jb.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\tif (!is_array($numbers)) {\n\t\treturn;\n\t}\n\t$output = [];\n\tforeach\
    \ ($numbers as $number) {\n\t\tif (!in_array($number, $output)) {\n\t\t\t$output[]\
    \ = $number;\n\t\t}\n\t}\n\treturn $output;\n}\necho '<pre>';\nvar_dump(remove_duplicates([1,\
    \ 2, 3, 2, 4]));\necho '</pre>';\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n\
    \  [3]=>\n  int(4)\n}\n</pre>\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpupzex1ih.php:29\nStack trace:\n#0 /tmp/tmpupzex1ih.php(32): test()\n\
    #1 {main}\n  thrown in /tmp/tmpupzex1ih.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t$unique_numbers = [];\n\tforeach ($numbers as $number) {\n\t\tif (!in_array($number,\
    \ $unique_numbers)) {\n\t\t\t$unique_numbers[] = $number;\n\t\t}\n\t}\n\treturn\
    \ $unique_numbers;\n}\n\n$data = [\n\t[1, 2, 3, 2, 4],\n\t[2, 2, 4, 4, 8, 16],\n\
    \t[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n];\n\nforeach\
    \ ($data as $items) {\n\tvar_dump(remove_duplicates($items));\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n \
    \ [3]=>\n  int(4)\n}\narray(4) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(4)\n  [2]=>\n\
    \  int(8)\n  [3]=>\n  int(16)\n}\narray(1) {\n  [0]=>\n  int(1)\n}\narray(10)\
    \ {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n  [3]=>\n  int(4)\n\
    \  [4]=>\n  int(5)\n  [5]=>\n  int(6)\n  [6]=>\n  int(7)\n  [7]=>\n  int(8)\n\
    \  [8]=>\n  int(9)\n  [9]=>\n  int(10)\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpyn2dtu4w.php:33\nStack trace:\n#0 /tmp/tmpyn2dtu4w.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpyn2dtu4w.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $new_array = [];\n  $new_array[] = $numbers[0];\n  $is_number_duplicate\
    \ = false;\n  for ($i = 1; $i < count($numbers); $i++) {\n    $is_number_duplicate\
    \ = false;\n    for ($j = 0; $j < count($new_array); $j++) {\n      if ($numbers[$i]\
    \ == $new_array[$j]) {\n        $is_number_duplicate = true;\n        break;\n\
    \      }\n    }\n    if (!$is_number_duplicate) {\n      $new_array[] = $numbers[$i];\n\
    \    }\n  }\n  return $new_array;\n}\n\necho '<pre>';\nprint_r(remove_duplicates([1,\
    \ 2, 3, 2, 4]));\necho '</pre>';\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt5b1_izx.php:33\n\
    Stack trace:\n#0 /tmp/tmpt5b1_izx.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpt5b1_izx.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $result)) {\n            $result[] = $number;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(remove_duplicates([1, 2, 3, 2, 4]));\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpx7fp82c8.php:25\nStack\
    \ trace:\n#0 /tmp/tmpx7fp82c8.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpx7fp82c8.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $numbers_without_duplicates = [];\n    foreach ($numbers as $number)\
    \ {\n        if (!in_array($number, $numbers_without_duplicates)) {\n        \
    \    $numbers_without_duplicates[] = $number;\n        }\n    }\n    return $numbers_without_duplicates;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbexm33wb.php:23\n\
    Stack trace:\n#0 /tmp/tmpbexm33wb.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpbexm33wb.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $unique = [];\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $unique)) {\n            $unique[] = $number;\n        }\n    }\n    return\
    \ $unique;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtqqn30x.php:23\n\
    Stack trace:\n#0 /tmp/tmpjtqqn30x.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpjtqqn30x.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    // YOUR CODE HERE\n    $numbers_to_count = array_count_values($numbers);\n\
    \    $numbers_to_keep = [];\n    foreach ($numbers_to_count as $num => $times)\
    \ {\n        if ($times === 1) {\n            $numbers_to_keep[] = $num;\n   \
    \     }\n    }\n    return $numbers_to_keep;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t$unique_numbers = [];\n\tforeach ($numbers as $number) {\n\t\tif (!in_array($number,\
    \ $unique_numbers)) {\n\t\t\t$unique_numbers[] = $number;\n\t\t}\n\t}\n\treturn\
    \ $unique_numbers;\n}\n\nvar_dump(remove_duplicates([1, 2, 3, 2, 4]));\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n \
    \ [3]=>\n  int(4)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6jtnl_sj.php:25\n\
    Stack trace:\n#0 /tmp/tmp6jtnl_sj.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp6jtnl_sj.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $arr = [];\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $arr)) {\n            $arr[] = $number;\n        }\n    }\n    return $arr;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp58rwv2dm.php:23\n\
    Stack trace:\n#0 /tmp/tmp58rwv2dm.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp58rwv2dm.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    $occurences = [];\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        if (!isset($occurences[$numbers[$i]])) {\n            $occurences[$numbers[$i]]\
    \ = 0;\n        }\n        $occurences[$numbers[$i]]++;\n    }\n    for ($i =\
    \ 0; $i < count($numbers); $i++) {\n        if ($occurences[$numbers[$i]] == 1)\
    \ {\n            $result[] = $numbers[$i];\n        }\n    }\n    return $result;\n\
    }\necho \"remove_duplicates \\n\";\nvar_dump(remove_duplicates([1, 2, 3, 2, 4]));\n\
    \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "remove_duplicates \narray(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(3)\n\
    \  [2]=>\n  int(4)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    // remove duplicates\n    $unique = array_unique($numbers);\n    // Compare\
    \ count of 2 arrays to determine if the array was altered\n    if (count($numbers)\
    \ === count($unique)) {\n        return $numbers;\n    }\n    else {\n       \
    \ return $unique;\n    }\n}\nvar_dump(remove_duplicates([1, 2, 3, 2, 4]));\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n \
    \ [4]=>\n  int(4)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp24gbarw5.php:25\n\
    Stack trace:\n#0 /tmp/tmp24gbarw5.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp24gbarw5.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t$numbers = array_unique($numbers);\n\treturn $numbers;\n}\necho implode(\"\
    , \", remove_duplicates([1, 2, 3, 2, 4]));\nfunction candidate(...$args) {\n \
    \   return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1, 2, 3, 4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7pt2gooe.php:18\n\
    Stack trace:\n#0 /tmp/tmp7pt2gooe.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp7pt2gooe.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $newarr = [];\n    $i = 0;\n    foreach ($numbers as $value) {\n    \
    \    if (!in_array($value, $newarr)) {\n            $newarr[$i] = $value;\n  \
    \          $i++;\n        }\n    }\n    return $newarr;\n}\n$numbers = [1, 2,\
    \ 3, 2, 4];\nprint_r(remove_duplicates($numbers));\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp3h_z9x1d.php:26\nStack\
    \ trace:\n#0 /tmp/tmp3h_z9x1d.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp3h_z9x1d.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  // your code here!\n  $uniques = [];\n  foreach ($numbers as $number) {\n\
    \    if (!in_array($number, $uniques)) {\n      $uniques[] = $number;\n    }\n\
    \  }\n  return $uniques;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnd0dnpbw.php:23\n\
    Stack trace:\n#0 /tmp/tmpnd0dnpbw.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpnd0dnpbw.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $result)) {\n      $result[] = $number;\n    }\n  }\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb2lte3ig.php:23\n\
    Stack trace:\n#0 /tmp/tmpb2lte3ig.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpb2lte3ig.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    // TODO\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdtg1r5ty.php:14\n\
    Stack trace:\n#0 /tmp/tmpdtg1r5ty.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpdtg1r5ty.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    $occurences = [];\n    foreach ($numbers as $number)\
    \ {\n        if (!in_array($number, $occurences)) {\n            $occurences[]\
    \ = $number;\n            $result[] = $number;\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptlbiu8rb.php:24\n\
    Stack trace:\n#0 /tmp/tmptlbiu8rb.php(27): test()\n#1 {main}\n  thrown in /tmp/tmptlbiu8rb.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $found_numbers = [];\n    $output = [];\n    foreach ($numbers as $number)\
    \ {\n        if (!in_array($number, $found_numbers)) {\n            $found_numbers[]\
    \ = $number;\n            $output[] = $number;\n        }\n    }\n    return $output;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgaettsi2.php:25\n\
    Stack trace:\n#0 /tmp/tmpgaettsi2.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpgaettsi2.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    // create an array to hold the numbers\n    $new_numbers = [];\n    //\
    \ loop through each number\n    foreach ($numbers as $number) {\n        // check\
    \ if it's in our new array\n        if (!in_array($number, $new_numbers)) {\n\
    \            // if not, then add it\n            $new_numbers[] = $number;\n \
    \       }\n    }\n    // return the new array\n    return $new_numbers;\n}\n\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpee2r6u4b.php:28\n\
    Stack trace:\n#0 /tmp/tmpee2r6u4b.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpee2r6u4b.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $non_duplicates = [];\n    $duplicates = [];\n    foreach ($numbers as\
    \ $number) {\n        if (array_key_exists($number, $non_duplicates)) {\n    \
    \        $duplicates[$number] = true;\n        } else {\n            $non_duplicates[$number]\
    \ = true;\n        }\n    }\n    $result = [];\n    foreach ($numbers as $number)\
    \ {\n        if (!array_key_exists($number, $duplicates)) {\n            $result[]\
    \ = $number;\n        }\n    }\n    return $result;\n}\n\n$input = [1, 2, 3, 2,\
    \ 4];\nvar_dump(remove_duplicates($input));\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(3)\n  [2]=>\n  int(4)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t$output = [];\n\tforeach ($numbers as $number) {\n\t\tif (count(array_keys($numbers,\
    \ $number)) == 1) {\n\t\t\t$output[] = $number;\n\t\t}\n\t}\n\treturn $output;\n\
    }\n\nprint_r(remove_duplicates([1, 2, 3, 2, 4]));\nprint_r(remove_duplicates([1,\
    \ 2, 3, 3, 4]));\nprint_r(remove_duplicates([1, 2, 3, 4, 4]));\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 4\n)\nArray\n(\n    [0]\
    \ => 1\n    [1] => 2\n    [2] => 4\n)\nArray\n(\n    [0] => 1\n    [1] => 2\n\
    \    [2] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    // TODO: implement this using only array_reduce\n    // Hint: use array_reduce\
    \ to build an associative array, with the numbers\n    // as keys, and the occurrence\
    \ count as values.\n    // Then use array_filter to remove all the numbers that\
    \ have an occurrence\n    // count larger than 1.\n    // Finally use array_keys\
    \ to get the values from the associative array.\n    return array_keys(array_filter(array_reduce($numbers,\
    \ function($result, $number) {\n        if (!array_key_exists($number, $result))\n\
    \            $result[$number] = 0;\n        $result[$number]++;\n        return\
    \ $result;\n    }, []), function($occurrences) {\n        return $occurrences\
    \ < 2;\n    }));\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $new_array = [];\n    foreach ($numbers as $number) {\n        if (array_count_values($numbers)[$number]\
    \ == 1) {\n            $new_array[] = $number;\n        }\n    }\n    return $new_array;\n\
    }\nprint_r(remove_duplicates([1, 2, 3, 2, 4]));\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 4\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $result)) {\n            $result[] = $number;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkqm4kaqv.php:23\n\
    Stack trace:\n#0 /tmp/tmpkqm4kaqv.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpkqm4kaqv.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $seen = [];\n    $result = [];\n    foreach ($numbers as $number) {\n\
    \        if (!array_key_exists($number, $seen)) {\n            $seen[$number]\
    \ = true;\n            $result[] = $number;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp50nqv33w.php:25\n\
    Stack trace:\n#0 /tmp/tmp50nqv33w.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp50nqv33w.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
