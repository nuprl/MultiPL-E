name: HumanEval_69_search
language: php
prompt: "<?php\n// You are given a non-empty list of positive integers. Return the\
  \ greatest integer that is greater than \n// zero, and has a frequency greater than\
  \ or equal to the value of the integer itself. \n// The frequency of an integer\
  \ is the number of times it appears in the list.\n// If no such a value exist, return\
  \ -1.\n// Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3,\
  \ 3, 3, 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunction search($lst)\
  \ {\n"
tests: "function candidate(...$args) {\n    return search(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(5, 5, 5, 5, 1)) !== 1) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(4, 1, 4, 1, 4, 4)) !== 4) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3)) !== -1) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 8, 8, 8, 8, 8,\
  \ 8, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
  \ 3, 3, 2, 2)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
  \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1)) !== 1) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 8, 2)) !== 2)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 7, 1, 8,\
  \ 8, 10, 5, 8, 5, 3, 10)) !== 1) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(array(8, 8, 3, 6, 5, 6, 4)) !== -1) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array(6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10,\
  \ 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9)) !== 1) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 9, 10, 1, 3)) !== 1) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array(6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3,\
  \ 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10)) !== 5) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4,\
  \ 2, 1, 10, 2, 1, 1, 5)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
  \ if (candidate(array(2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10))\
  \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3)) !== 1) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4,\
  \ 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4)) !== 4) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array(2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3,\
  \ 7, 8, 8, 3, 1, 4, 2, 2, 10, 7)) !== 4) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2,\
  \ 3, 1)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8)) !== -1) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(10)) !== -1) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 7, 7, 2, 4, 7,\
  \ 2, 10, 9, 7, 5, 7, 2)) !== 2) { throw new Exception(\"Test failed!\"); }\n   \
  \ if (candidate(array(5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8)) !== 1) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1,\
  \ 1, 10, 7, 5, 6, 7, 6, 7, 7, 6)) !== 1) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(3, 10, 10, 9, 2)) !== -1) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["   $counter = array_count_values($lst);\n   arsort($counter);\n   foreach\
    \ ($counter as $key => $value) {\n      if($key <= $value) return $key;\n   }\n\
    \   return -1;\n}\n\necho search([4, 1, 2, 2, 3, 1]);\necho search([1, 2, 2, 3,\
    \ 3, 3, 4, 4, 4]);\necho search([5, 5, 4, 4, 4]);", "  $biggest = max($lst);\n\
    \  $freq = array_count_values($lst);\n  for ($i = $biggest; $i > 0; $i--) {\n\
    \    if ($freq[$i] >= $i) {\n      return $i;\n    }\n  }\n  return -1;\n}", " \
    \   $output = -1;\n    $map = [];\n    foreach ($lst as $value) {\n        if\
    \ (!isset($map[$value])) {\n            $map[$value] = 1;\n        } else {\n\
    \            $map[$value]++;\n        }\n    }\n    krsort($map);\n    foreach\
    \ ($map as $key => $value) {\n        if ($key <= $value) {\n            $output\
    \ = $key;\n            break;\n        }\n    }\n    return $output;\n}\n", "\t\
    $result = -1;\n\t$count = 0;\n\tforeach($lst as $value) {\n\t\tif($value > $result)\
    \ {\n\t\t\t$result = $value;\n\t\t\t$count = 1;\n\t\t}\n\t\telseif($value == $result)\
    \ {\n\t\t\t$count++;\n\t\t}\n\t}\n\tif($count < $result) {\n\t\t$result = -1;\n\
    \t}\n\treturn $result;\n}", "    $map = array_count_values($lst);\n    $arr =\
    \ array_keys($map);\n    sort($arr);\n    $res = -1;\n    for ($i = count($arr)\
    \ - 1; $i >= 0; $i--) {\n        if ($map[$arr[$i]] >= $arr[$i])\n           \
    \ $res = $arr[$i];\n    }\n    return $res;\n}\necho search([4, 1, 2, 2, 3, 1])\
    \ . \"<br>\";\necho search([1, 2, 2, 3, 3, 3, 4, 4, 4]) . \"<br>\";\necho search([5,\
    \ 5, 4, 4, 4]) . \"<br>\";", "  // set defaults\n  $counts = [];\n  $greatest_int\
    \ = 0;\n  // count frequency of each element in the list\n  foreach ($lst as $elem)\
    \ {\n    if (array_key_exists($elem, $counts)) {\n      $counts[$elem] += 1;\n\
    \    } else {\n      $counts[$elem] = 1;\n    }\n  }\n  // loop through frequency\
    \ array and find greatest value that meets requirements\n  foreach ($counts as\
    \ $key => $val) {\n    if ($key > $greatest_int && $val >= $key) {\n      $greatest_int\
    \ = $key;\n    }\n  }\n  // return -1 if no value meets requirements\n  if ($greatest_int\
    \ == 0) {\n    return -1;\n  }\n  return $greatest_int;\n}", "    $result = -1;\n\
    \    for ($i = 1; $i <= count($lst); $i++) {\n        $count = 0;\n        for\
    \ ($j = 0; $j < count($lst); $j++) {\n            if ($lst[$j] == $i) {\n    \
    \            $count++;\n            }\n        }\n        if ($count >= $i) {\n\
    \            $result = $i;\n        }\n    }\n    return $result;\n}\n\necho(search([4,\
    \ 1, 2, 2, 3, 1]));\n", "    $count = array_count_values($lst);\n    $result =\
    \ 0;\n    foreach ($count as $key => $value) {\n        if ($key <= $value) {\n\
    \            $result = $key;\n        }\n    }\n    return $result ? $result :\
    \ -1;\n}\n", "    $max = $lst[0];\n    foreach ($lst as $n) {\n        if ($n\
    \ > $max) {\n            $max = $n;\n        }\n    }\n    $lst_count = array_count_values($lst);\n\
    \    for ($i = $max; $i > 0; $i--) {\n        if (array_key_exists($i, $lst_count)\
    \ && $lst_count[$i] >= $i) {\n            return $i;\n        }\n    }\n    return\
    \ -1;\n}", "    $freqArr = array_count_values($lst);\n    $result = -1;\n    foreach\
    \ ($freqArr as $num => $count) {\n        if ($num <= $count) {\n            $result\
    \ = max($result, $num);\n        }\n    }\n    return $result;\n}\n\necho search([4,\
    \ 1, 2, 2, 3, 1]);\necho search([1, 2, 2, 3, 3, 3, 4, 4, 4]);\necho search([5,\
    \ 5, 4, 4, 4]);", "    $count = [];\n    foreach ($lst as $num) {\n        if\
    \ (isset($count[$num])) {\n            $count[$num]++;\n        } else {\n   \
    \         $count[$num] = 1;\n        }\n    }\n    rsort($count);\n    $max =\
    \ 0;\n    foreach ($count as $k => $v) {\n        if ($k <= $v) {\n          \
    \  return $k;\n        }\n    }\n    return -1;\n}", "    $count = array_count_values($lst);\n\
    \    arsort($count);\n    foreach ($count as $key => $value) {\n        if ($key\
    \ >= $value) {\n            return $key;\n        }\n    }\n    return -1;\n}\n",
  "  $map = [];\n  foreach ($lst as $int) {\n    if (!array_key_exists($int, $map))\
    \ {\n      $map[$int] = 1;\n    } else {\n      $map[$int]++;\n    }\n  }\n  $result\
    \ = -1;\n  foreach ($map as $key => $value) {\n    if ($key > $value) {\n    \
    \  continue;\n    }\n    if ($value >= $key) {\n      $result = $key;\n    }\n\
    \  }\n  return $result;\n}\n\nprint_r(search([4, 1, 2, 2, 3, 1]) . PHP_EOL);\n\
    print_r(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) . PHP_EOL);\nprint_r(search([5, 5,\
    \ 4, 4, 4]) . PHP_EOL);", "  $list = array_count_values($lst);\n  $result = max(array_diff(array_keys($list),\
    \ array_values($list)));\n  if(!$result){\n    return -1;\n  }\n  return $result;\n\
    }", "  $frequencies = [];\n  foreach ($lst as $value) {\n    $frequencies[$value]\
    \ = (isset($frequencies[$value])) ? $frequencies[$value] + 1 : 1;\n  }\n  arsort($frequencies);\n\
    \  foreach ($frequencies as $key => $value) {\n    if ($key >= $value) {\n   \
    \   return $key;\n    }\n  }\n  return -1;\n}\n", "    $highest = -1;\n    $frequency\
    \ = -1;\n    foreach($lst as $number) {\n        $times = 0;\n        foreach($lst\
    \ as $another_number) {\n            if($number == $another_number) {\n      \
    \          $times++;\n            }\n        }\n        if($times >= $number &&\
    \ $number > $highest) {\n            $highest = $number;\n            $frequency\
    \ = $times;\n        }\n    }\n    return $highest;\n}", "    $result = -1;\n\
    \    $cnt = 0;\n    foreach($lst as $val) {\n        if($val > $cnt) {\n     \
    \       $cnt = 1;\n            $result = $val;\n        } elseif($val == $cnt)\
    \ {\n            $cnt++;\n        }\n    }\n    return $cnt > 0 ? $result : -1;\n\
    }\necho search([4, 1, 2, 2, 3, 1]);", "    $map = array_count_values($lst);\n\
    \    $result = -1;\n    foreach ($map as $num => $count) {\n        if ($num >\
    \ $count) {\n            continue;\n        }\n        if ($count > $result) {\n\
    \            $result = $count;\n        }\n    }\n    return $result;\n}\n\n$test\
    \ = [\n    [4, 1, 2, 2, 3, 1],\n    [1, 2, 2, 3, 3, 3, 4, 4, 4],\n    [5, 5, 4,\
    \ 4, 4],\n    [1, 2, 3, 4, 5],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1,", "    $search = -1;\n    $max = 0;\n    $arr = array_count_values($lst);\n\
    \    foreach ($arr as $key => $value) {\n        if ($key > $max && $value >=\
    \ $key) {\n            $max = $key;\n        }\n    }\n    return $max;\n}\n",
  "    $sorted = array_unique($lst);\n    rsort($sorted);\n    foreach ($sorted as\
    \ $n) {\n        if ($n <= array_count_values($lst)[$n]) {\n            return\
    \ $n;\n        }\n    }\n    return -1;\n}", "    $arr = array_count_values($lst);\n\
    \    arsort($arr);\n    $lst = array_values($arr);\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($lst[$i] >= $i + 1) {\n            return $i + 1;\n   \
    \     }\n    }\n    return -1;\n}\necho \"<pre>search([4, 1, 2, 2, 3, 1])\\r\\\
    n\";\nvar_dump(search([4, 1, 2, 2, 3, 1]));\necho \"</pre>\";\necho \"<pre>search([1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4])\\r\\n\";\nvar_dump(search([1, 2, 2, 3, 3, 3, 4, 4,\
    \ 4]));\necho \"</pre>\";\necho \"<pre>search([5, 5, 4, 4, 4])\\r\\n\";\nvar_dump(search([5,\
    \ 5, 4, 4, 4]));\necho \"</pre>\";\necho \"<pre>search([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\
    \ 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\
    \ 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,\
    \ 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\
    \ 120, 121, 122, 123, 124, 125, 126,", "\tif(count($lst)==0) return -1;\n\t$max\
    \ = max($lst);\n\t$counts = array_count_values($lst);\n\tfor($i=$max;$i>0;$i--){\n\
    \t\tif(isset($counts[$i]) && $counts[$i]>=$i) return $i;\n\t}\n\treturn -1;\n\
    }\n", "    $value = 0;\n    $max = 0;\n    $count = 0;\n    $arr = array_count_values($lst);\n\
    \    foreach ($arr as $key => $val) {\n        if ($val >= $key && $val > $max)\
    \ {\n            $max = $val;\n            $value = $key;\n        }\n    }\n\
    \    return $value ? $value : -1;\n}", "\t$arr = array_count_values($lst);\n\t\
    $max = max($lst);\n\t$result = -1;\n\tfor ($i = 1; $i <= $max; $i++) {\n\t\tif\
    \ ($arr[$i] >= $i) {\n\t\t\t$result = $i;\n\t\t}\n\t}\n\treturn $result;\n}\n",
  "    sort($lst);\n    $cnt = array_count_values($lst);\n    $res = -1;\n    foreach\
    \ ($cnt as $key => $value) {\n        if ($key <= $value) $res = $key;\n    }\n\
    \    return $res;\n}", "\t$counts = array_count_values($lst);\n\t$max = max($lst);\n\
    \t$result = -1;\n\tfor ($i = 1; $i <= $max; $i++) {\n\t\tif ($counts[$i] >= $i)\
    \ $result = $i;\n\t}\n\treturn $result;\n}\necho search([4, 1, 2, 2, 3, 1]);",
  "    $arr = array_count_values($lst);\n    foreach ($arr as $k => $v) {\n      \
    \  if ($k <= $v) {\n            return $k;\n        }\n    }\n    return -1;\n\
    }\n", "    $max = 0;\n    $counts = array_count_values($lst);\n    foreach ($counts\
    \ as $key => $value) {\n        if ($key >= $value && $key > $max) {\n       \
    \     $max = $key;\n        }\n    }\n    return $max ? $max : -1;\n}", "    $count\
    \ = array_count_values($lst);\n    foreach ($count as $key => $value) {\n    \
    \    if ($key <= $value) {\n            return $key;\n        }\n    }\n    return\
    \ -1;\n}", "    $freq = array_count_values($lst);\n    $max = max($lst);\n   \
    \ for ($i = $max; $i > 0; $i--) {\n        if (isset($freq[$i]) && $freq[$i] >=\
    \ $i) {\n            return $i;\n        }\n    }\n    return -1;\n}", "  $freq_arr\
    \ = [];\n  foreach ($lst as $n) {\n    if (!isset($freq_arr[$n])) {\n      $freq_arr[$n]\
    \ = 1;\n    } else {\n      $freq_arr[$n]++;\n    }\n  }\n  krsort($freq_arr);\n\
    \  foreach ($freq_arr as $n => $freq) {\n    if ($n <= $freq) {\n      return\
    \ $n;\n    }\n  }\n  return -1;\n}\nprint_r(search([4, 1, 2, 2, 3, 1]) . \"\\\
    n\");\nprint_r(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) . \"\\n\");\nprint_r(search([5,\
    \ 5, 4, 4, 4]) . \"\\n\");", "    $freq = [];\n    foreach ($lst as $value) {\n\
    \        if (array_key_exists($value, $freq)) {\n            $freq[$value]++;\n\
    \        } else {\n            $freq[$value] = 1;\n        }\n    }\n    $result\
    \ = -1;\n    foreach ($freq as $value => $count) {\n        if ($value <= $count)\
    \ {\n            $result = max($result, $value);\n        }\n    }\n    return\
    \ $result;\n}\necho search([5, 5, 4, 4, 4]) . \"\\n\";\necho search([1, 2, 2,\
    \ 3, 3, 3, 4, 4, 4]) . \"\\n\";\necho search([4, 1, 2, 2, 3, 1]) . \"\\n\";",
  "    $result = -1;\n    foreach($lst as $i) {\n        if ($result < $i) {\n   \
    \         $result = $i;\n        }\n    }\n    $frequency = array_count_values($lst);\n\
    \    for ($i = $result; $i > 0; $i--) {\n        if ($frequency[$i] >= $i) {\n\
    \            return $i;\n        }\n    }\n    return -1;\n}", "    if(count($lst)\
    \ == 0) return -1;\n    $map = [];\n    foreach($lst as $val) {\n        $map[$val]++;\n\
    \    }\n    $max = 0;\n    $maxCount = -1;\n    foreach($map as $key => $count)\
    \ {\n        if($key > $count && $count >= $maxCount) {\n            $max = $key;\n\
    \            $maxCount = $count;\n        }\n    }\n    return $max;\n}\n\n$lst\
    \ = [4, 1, 2, 2, 3, 1];\necho search($lst).\"\\n\";\n$lst = [1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4];\necho search($lst).\"\\n\";\n$lst = [5, 5, 4, 4, 4];\necho search($lst).\"\
    \\n\";\n$lst = [];\necho search($lst).\"\\n\";", "  $integerFrequency = array_count_values($lst);\n\
    \  rsort($lst);\n  foreach ($lst as $num) {\n    if ($integerFrequency[$num] >=\
    \ $num) {\n      return $num;\n    }\n  }\n  return -1;\n}\necho search([4, 1,\
    \ 2, 2, 3, 1]) . \"\\n\";\necho search([1, 2, 2, 3, 3, 3, 4, 4, 4]) . \"\\n\"\
    ;\necho search([5, 5, 4, 4, 4]) . \"\\n\";", "    $freq = [];\n    foreach ($lst\
    \ as $value) {\n        if (!array_key_exists($value, $freq)) {\n            $freq[$value]\
    \ = 1;\n        } else {\n            $freq[$value] += 1;\n        }\n    }\n\
    \    $result = -1;\n    foreach ($freq as $key => $value) {\n        if ($key\
    \ <= $value && $key > $result) {\n            $result = $key;\n        }\n   \
    \ }\n    return $result;\n}\n$arr = [4, 1, 2, 2, 3, 1];\necho search($arr) . PHP_EOL;\n\
    $arr = [1, 2, 2, 3, 3, 3, 4, 4, 4];\necho search($arr) . PHP_EOL;\n$arr = [5,\
    \ 5, 4, 4, 4];\necho search($arr) . PHP_EOL;\n$arr = [100, 1, 101, 101, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 101, 101, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1", "    $res = [];\n    foreach ($lst as $item) {\n  \
    \      $res[$item] = ($res[$item] ?? 0) + 1;\n    }\n    arsort($res);\n    $key\
    \ = null;\n    foreach ($res as $k => $v) {\n        if ($k > $v) return -1;\n\
    \        if ($k == $v) $key = $k;\n    }\n    return $key;\n}\necho search([4,\
    \ 1, 2, 2, 3, 1]);", "  $values = array_count_values($lst);\n  $max = max($lst);\n\
    \  $result = -1;\n  for ($i = $max; $i > 0; $i--) {\n    if (array_key_exists($i,\
    \ $values) && $values[$i] >= $i) {\n      $result = $i;\n      break;\n    }\n\
    \  }\n  return $result;\n}\nprint_r(search([4, 1, 2, 2, 3, 1])); // 2\nprint_r(search([1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4])); // 3\nprint_r(search([5, 5, 4, 4, 4])); // -1\n",
  "  $counts = array_count_values($lst);\n  return max(array_filter($counts, function($v,\
    \ $k) use ($counts) {\n    return $v >= $k;\n  }, ARRAY_FILTER_USE_BOTH));\n}\n",
  "    $max = -1;\n    $arr = array_count_values($lst);\n    foreach ($arr as $key\
    \ => $value) {\n        if($key>$value && $key>$max) $max = $key;\n    }\n   \
    \ return $max;\n}", "    $counts = array_count_values($lst);\n    foreach($counts\
    \ as $key => $value) {\n        if ($key <= $value) {\n            return $key;\n\
    \        }\n    }\n    return -1;\n}\necho search([4, 1, 2, 2, 3, 1]) . \"\\n\"\
    ;\necho search([1, 2, 2, 3, 3, 3, 4, 4, 4]) . \"\\n\";\necho search([5, 5, 4,\
    \ 4, 4]) . \"\\n\";", "    $n = count($lst);\n    for ($i = 1; $i <= $n; $i++)\
    \ {\n        $cnt = 0;\n        for ($j = 0; $j < $n; $j++) {\n            if\
    \ ($lst[$j] == $i) {\n                $cnt++;\n            }\n        }\n    \
    \    if ($cnt >= $i) {\n            return $i;\n        }\n    }\n    return -1;\n\
    }\n", "    $new = array_count_values($lst);\n    // echo $new;\n    $c = 0;\n\
    \    $count = 0;\n    foreach($new as $key => $value){\n        if($value >= $key){\n\
    \            $count++;\n            $c = $key;\n        }\n    }\n    if($count\
    \ == 0){\n        return -1;\n    }\n    return $c;\n}\necho search([4, 1, 2,\
    \ 2, 3, 1]);\necho search([1, 2, 2, 3, 3, 3, 4, 4, 4]);\necho search([5, 5, 4,\
    \ 4, 4]);", "    \n}", "    $arr = array_unique($lst);\n    $arr_with_freq = array_map('array_count_values',\
    \ [$lst]);\n    foreach ($arr as $key => $value) {\n        if ($arr_with_freq[0][$value]\
    \ >= $value) {\n            return $value;\n        }\n    }\n    return -1;\n\
    }", "    $arr = array_count_values($lst);\n    $result = -1;\n    foreach ($arr\
    \ as $key => $value) {\n        if ($key <= $value) {\n            $result = $key;\n\
    \        }\n    }\n    return $result;\n}\n", "    $counts = array_count_values($lst);\n\
    \    $values = array_flip($counts);\n    krsort($counts);\n    foreach ($counts\
    \ as $k => $v) {\n        if ($v >= $k) {\n            return $values[$k];\n \
    \       }\n    }\n    return -1;\n}", "    $map = array_count_values($lst);\n\
    \    foreach($map as $key => $value) {\n        if($key >= $value) {\n       \
    \     return $key;\n        }\n    }\n    return -1;\n}", "\t$counter = 0;\n\t\
    $result = -1;\n\t$greatest = 0;\n\tforeach($lst as $value) {\n\t\tif($value >\
    \ $greatest) {\n\t\t\t$greatest = $value;\n\t\t}\n\t}\n\tfor($i = 1; $i <= $greatest;\
    \ $i++) {\n\t\t$counter = 0;\n\t\tforeach($lst as $value) {\n\t\t\tif($value ==\
    \ $i) {\n\t\t\t\t$counter++;\n\t\t\t}\n\t\t}\n\t\tif($counter >= $i) {\n\t\t\t\
    $result = $i;\n\t\t}\n\t}\n\treturn $result;\n}", "    $values = array_count_values($lst);\n\
    \    $max_values = [];\n    foreach ($values as $key => $value) {\n        if\
    \ ($key == $value) {\n            $max_values[] = $key;\n        }\n    }\n  \
    \  if (empty($max_values)) {\n        return -1;\n    }\n    return max($max_values);\n\
    }", "    $freq = [];\n    foreach ($lst as $int) {\n        if (!array_key_exists($int,\
    \ $freq)) {\n            $freq[$int] = 1;\n        } else {\n            $freq[$int]++;\n\
    \        }\n    }\n    krsort($freq);\n    foreach ($freq as $key => $val) {\n\
    \        if ($key <= $val) {\n            return $key;\n        }\n    }\n   \
    \ return -1;\n}\n", "    $counts = array_count_values($lst);\n    arsort($counts);\n\
    \    $list = array_keys($counts);\n    foreach ($list as $key => $val) {\n   \
    \     if($val >= $counts[$val]) {\n            return $val;\n        }\n    }\n\
    \    return -1;\n}\n\nprint_r(search([5, 5, 4, 4, 4]));", "  $arr = array_count_values($lst);\n\
    \  foreach ($arr as $key => $value) {\n    if ($key <= $value) {\n      return\
    \ $key;\n    }\n  }\n  return -1;\n}", "\t$num = -1;\n\t$cnt = 0;\n\tfor ($i =\
    \ 0; $i < count($lst); $i++) {\n\t\t$tmp = $lst[$i];\n\t\t$tCnt = 0;\n\t\tfor\
    \ ($j = 0; $j < count($lst); $j++) {\n\t\t\tif ($tmp == $lst[$j]) {\n\t\t\t\t\
    $tCnt++;\n\t\t\t}\n\t\t}\n\t\tif ($tCnt >= $tmp && $tCnt > $cnt) {\n\t\t\t$num\
    \ = $tmp;\n\t\t\t$cnt = $tCnt;\n\t\t}\n\t}\n\treturn $num;\n}\n", "    $freq =\
    \ array_count_values($lst);\n    arsort($freq);\n    $max = 0;\n    foreach ($freq\
    \ as $key => $value) {\n        if ($key > $value) {\n            $max = -1;\n\
    \            break;\n        }\n        if ($key == $value) {\n            $max\
    \ = $key;\n        }\n    }\n    return $max;\n}", "  if (count($lst) === 0) return\
    \ -1;\n  $count = array_count_values($lst);\n  $keys = array_keys($count);\n \
    \ sort($keys);\n  return $keys[count($keys) - 1] >= $count[$keys[count($keys)\
    \ - 1]] ? $keys[count($keys) - 1] : -1;\n}\n", "    $table = [];\n    foreach\
    \ ($lst as $value) {\n        if (array_key_exists($value, $table)) {\n      \
    \      $table[$value] += 1;\n        } else {\n            $table[$value] = 1;\n\
    \        }\n    }\n    krsort($table);\n    foreach ($table as $key => $value)\
    \ {\n        if ($key == $value) {\n            return $key;\n        }\n    }\n\
    \    return -1;\n}", "    // Sort the array for simplicity\n    sort($lst);\n\
    \    // If the first element of the list is greater than zero, the next element\
    \ is the first that needs to be\n    // searched for. If the first element isn't\
    \ greater than zero, the next element is the second element.\n    $nextElement\
    \ = $lst[0] > 0 ? $lst[0] : $lst[1];\n    // Go through the list and find the\
    \ first matching element.\n    for ($i = 0; $i < count($lst); $i++) {\n      \
    \  if ($lst[$i] == $nextElement) {\n            // If the current element is equal\
    \ to the next element, increase the number of appearances.\n            $appearances++;\n\
    \        } else {\n            // If it is a different element, reset the number\
    \ of appearances.\n            $appearances = 1;\n        }\n        // If the\
    \ number of appearances of the current element is greater than the value of the\
    \ element\n        // (meaning the value of the element is its frequency) return\
    \ the element.\n        if ($appearances >= $lst[$i]) {\n            return $lst[$i];\n\
    \        }\n        // If the current element is greater than zero, the next element\
    \ is the current element.\n        // If the current element is zero, the next\
    \ element is the next element after the current element.\n        $nextElement\
    \ = $lst[$i] > 0 ? $lst[$i] : $lst[$i + 1];\n    }\n    // If no matching element\
    \ was found, return -1.\n    return -1;\n}", "    $result = [];\n    $max = 0;\n\
    \    foreach ($lst as $key => $value) {\n        if (array_key_exists($value,\
    \ $result)) {\n            $result[$value] += 1;\n        } else {\n         \
    \   $result[$value] = 1;\n        }\n        if ($result[$value] > $value) {\n\
    \            $max = $value;\n        }\n    }\n    return $max > 0 ? $max : -1;\n\
    }\necho search([4, 1, 2, 2, 3, 1]);\necho search([1, 2, 2, 3, 3, 3, 4, 4, 4]);\n\
    echo search([5, 5, 4, 4, 4]);", "\t// $new_lst = [];\n\t$lst = array_count_values($lst);\n\
    \tarsort($lst);\n\tforeach ($lst as $k => $v) {\n\t\tif ($k === $v) {\n\t\t\t\
    return $k;\n\t\t}\n\t}\n\treturn -1;\n}\n\necho search([4, 1, 2, 2, 3, 1]); //\
    \ -> 2\necho search([1, 2, 2, 3, 3, 3, 4, 4, 4]); // -> 3\necho search([5, 5,\
    \ 4, 4, 4]); // -> -1", "    $freq = array_count_values($lst);\n    arsort($freq);\n\
    \    foreach ($freq as $value => $occurance) {\n        if ($value == $occurance)\
    \ {\n            return $value;\n        }\n    }\n    return -1;\n}", "    //takes\
    \ in an array of integers\n    //makes a new array with all of the integers and\
    \ their frequency\n    //returns the first value that fits the parameter, or -1\n\
    \    $newArray = [];\n    $firstValue = $lst[0];\n    $arrayLength = count($lst);\n\
    \    $currentValue = $firstValue;\n    $currentCount = 0;\n    $newArray[$currentValue]\
    \ = $currentCount;\n    for ($i = 0; $i < $arrayLength; $i++) {\n        if ($lst[$i]\
    \ == $currentValue) {\n            $currentCount += 1;\n            $newArray[$currentValue]\
    \ = $currentCount;\n        } else {\n            $currentValue = $lst[$i];\n\
    \            $currentCount = 1;\n            $newArray[$currentValue] = $currentCount;\n\
    \        }\n    }\n    $returnVal = -1;\n    foreach ($newArray as $key => $value)\
    \ {\n        if ($key <= $value) {\n            $returnVal = $key;\n         \
    \   break;\n        }\n    }\n    return $returnVal;\n}", "\t$count = [];\n\t\
    foreach ($lst as $v) $count[$v] = (isset($count[$v]) ? $count[$v] : 0) + 1;\n\t\
    for ($i = max($lst); $i > 0; $i--) {\n\t\tif (isset($count[$i]) && $count[$i]\
    \ >= $i) return $i;\n\t}\n\treturn -1;\n}\necho search([4, 1, 2, 2, 3, 1]).PHP_EOL;\n\
    echo search([1, 2, 2, 3, 3, 3, 4, 4, 4]).PHP_EOL;\necho search([5, 5, 4, 4, 4]).PHP_EOL;",
  "    $frequencies = array_count_values($lst);\n    $result = -1;\n    foreach ($frequencies\
    \ as $key => $value) {\n        if ($key >= $value && $key > $result) {\n    \
    \        $result = $key;\n        }\n    }\n    return $result;\n}\n\necho search([4,\
    \ 1, 2, 2, 3, 1]);", "  $max = max($lst);\n  for ($i = $max; $i > 0; $i--) {\n\
    \    if (array_filter($lst, function($val) use ($i) {\n      return $val == $i;\n\
    \    }) >= $i) {\n      return $i;\n    }\n  }\n  return -1;\n}\n", "    \n  \
    \  $unique_numbers = array_unique($lst);\n    rsort($unique_numbers);\n    $max_frequency\
    \ = array_count_values($lst);\n    foreach($unique_numbers as $key=>$value){\n\
    \        if($value == $max_frequency[$value]){\n            return $value;\n \
    \       }\n    }\n    return -1;\n}\n", "    $results = [];\n    $max = 0;\n \
    \   $max_key = 0;\n    foreach ($lst as $key => $value) {\n        $results[$value]++;\n\
    \        if ($results[$value] >= $value) {\n            if ($value > $max) {\n\
    \                $max = $value;\n                $max_key = $key;\n          \
    \  }\n        }\n    }\n    if ($max > 0) {\n        return $lst[$max_key];\n\
    \    } else {\n        return -1;\n    }\n}\n\n$test = [4, 1, 2, 2, 3, 1];\necho\
    \ search($test) . PHP_EOL;\n$test = [1, 2, 2, 3, 3, 3, 4, 4, 4];\necho search($test)\
    \ . PHP_EOL;\n$test = [5, 5, 4, 4, 4];\necho search($test) . PHP_EOL;", "    $max\
    \ = 0;\n    foreach($lst as $v) {\n        if ($v > $max) $max = $v;\n    }\n\
    \    for ($i = $max; $i > 0; $i--) {\n        $count = 0;\n        foreach($lst\
    \ as $v) {\n            if ($v == $i) $count++;\n        }\n        if ($count\
    \ >= $i) return $i;\n    }\n    return -1;\n}", "    $arr = array_count_values($lst);\n\
    \    $newArr = [];\n    foreach ($arr as $key => $value) {\n        if ($key ===\
    \ $value) {\n            $newArr[] = $key;\n        }\n    }\n    return empty($newArr)\
    \ ? -1 : max($newArr);\n}\n", "    $freq = [];\n    $max = -1;\n    foreach ($lst\
    \ as $v) {\n        if ($v > $max) {\n            $max = $v;\n        }\n    \
    \    if (!isset($freq[$v])) {\n            $freq[$v] = 0;\n        }\n       \
    \ $freq[$v]++;\n    }\n    for ($i = 1; $i <= $max; $i++) {\n        if (!isset($freq[$i]))\
    \ {\n            continue;\n        }\n        if ($freq[$i] >= $i) {\n      \
    \      return $i;\n        }\n    }\n    return -1;\n}\n\n$tests = [\n    [4,\
    \ 1, 2, 2, 3, 1],\n    [1, 2, 2, 3, 3, 3, 4, 4, 4],\n    [5, 5, 4, 4, 4],\n  \
    \  [2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5],\n    [3, 3, 2, 2, 2, 1, 1, 1, 2, 3, 3, 3,\
    \ 2, 2, 2],\n    [1, 2, 3, 4, 4, 3, 3, 2, 2, 1, 1],\n    [5, 4, 5, 4, 5, 4, 5,\
    \ 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4],\n    [1, 2, 3, 4, 5, 4, 3, 2, 1, 2,\
    \ 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1],\n    [4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4],\n    [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,", "  // your code\
    \ here\n  $dic = [];\n  foreach($lst as $key=>$val){\n    if(!array_key_exists($val,$dic)){\n\
    \      $dic[$val] = 1;\n    }else{\n      $dic[$val]++;\n    }\n  }\n  $result\
    \ = -1;\n  foreach($dic as $key=>$val){\n    if($key<=$val){\n      $result =\
    \ $key;\n    }\n  }\n  return $result;\n}\n\n$answer = search([4, 1, 2, 2, 3,\
    \ 1]);\necho \"answer: \".$answer.\"\\n\";", "    $cnt = 0;\n    $result = 0;\n\
    \    $lst = array_unique($lst);\n    foreach ($lst as $val) {\n        $newCnt\
    \ = 0;\n        foreach ($lst as $item) {\n            if ($val == $item) {\n\
    \                $newCnt++;\n            }\n        }\n        if ($val <= $newCnt)\
    \ {\n            $cnt = $newCnt;\n            $result = $val;\n        }\n   \
    \ }\n    if ($cnt == 0) {\n        return -1;\n    }\n    return $result;\n}\n",
  "    $arr = array_count_values($lst);\n    arsort($arr);\n    foreach ($arr as $key\
    \ => $value) {\n        if ($key <= $value) return $key;\n    }\n    return -1;\n\
    }", "    $result = -1;\n    $arr = array_fill(0, max($lst), 0);\n    foreach ($lst\
    \ as $v) {\n        $arr[$v - 1]++;\n    }\n    for ($i = count($arr) - 1; $i\
    \ >= 0; $i--) {\n        if ($arr[$i] >= $i + 1) {\n            $result = $i +\
    \ 1;\n            break;\n        }\n    }\n    return $result;\n}\n", "    $map\
    \ = array_count_values($lst);\n    rsort($lst);\n    foreach ($lst as $value)\
    \ {\n        if ($map[$value] >= $value) {\n            return $value;\n     \
    \   }\n    }\n    return -1;\n}\n\nprint(search([4, 1, 2, 2, 3, 1]) . \"<br>\"\
    );\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) . \"<br>\");\nprint(search([5, 5,\
    \ 4, 4, 4]) . \"<br>\");", "    $d = array_count_values($lst);\n    $result =\
    \ -1;\n    foreach ($d as $k => $v) {\n        if ($k <= $v) {\n            $result\
    \ = max($result, $k);\n        }\n    }\n    return $result;\n}\n\nprint_r(search([5,\
    \ 5, 4, 4, 4]));", "    $returnValue = -1;\n    $map = array();\n    foreach ($lst\
    \ as $item) {\n        $map[$item] = true;\n    }\n    foreach ($lst as $item)\
    \ {\n        if ($item == count($map[$item])) {\n            $returnValue = $item;\n\
    \        }\n    }\n    return $returnValue;\n}", "\tforeach ($lst as $int) {\n\
    \t\t$count = 0;\n\t\tforeach ($lst as $int2) {\n\t\t\tif ($int2 == $int) {\n\t\
    \t\t\t$count++;\n\t\t\t}\n\t\t}\n\t\tif ($count >= $int) {\n\t\t\treturn $int;\n\
    \t\t}\n\t}\n\treturn -1;\n}\necho search([4, 1, 2, 2, 3, 1]) . '<br>';\necho search([1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4]) . '<br>';\necho search([5, 5, 4, 4, 4]) . '<br>';",
  "    $freq = array_count_values($lst);\n    $result = -1;\n    foreach ($freq as\
    \ $key => $value) {\n        if ($key <= $value && $key > $result) {\n       \
    \     $result = $key;\n        }\n    }\n    return $result;\n}\necho search([4,\
    \ 1, 2, 2, 3, 1]) . \"\\n\";\necho search([1, 2, 2, 3, 3, 3, 4, 4, 4]) . \"\\\
    n\";\necho search([5, 5, 4, 4, 4]) . \"\\n\";\n", "    $r = max($lst);\n    for\
    \ ($i = $r; $i > 0; $i--) {\n        if (array_count_values($lst)[$i] >= $i) return\
    \ $i;\n    }\n    return -1;\n}\n\necho search([4, 1, 2, 2, 3, 1]) . PHP_EOL;\
    \ // 2\necho search([1, 2, 2, 3, 3, 3, 4, 4, 4]) . PHP_EOL; // 3\necho search([5,\
    \ 5, 4, 4, 4]) . PHP_EOL; // -1", "  $integers = array_count_values($lst);\n\n\
    \  arsort($integers);\n\n  foreach ($integers as $key => $value) {\n    if ($key\
    \ > $value) {\n      return -1;\n    } elseif ($key == $value) {\n      return\
    \ $key;\n    }\n  }\n}\n", "    $max = 0;\n    $m = [];\n    foreach ($lst as\
    \ $i) {\n        if (!isset($m[$i])) {\n            $m[$i] = 0;\n        }\n \
    \       $m[$i]++;\n        if ($i >= $m[$i] && $i > $max) {\n            $max\
    \ = $i;\n        }\n    }\n    return $max > 0 ? $max : -1;\n}\n", "    // //\
    \ \u0440\u0435\u0448\u0435\u043D\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438\
    \ \u043D\u0430 \u0442\u0435\u0441\u0442\u044B\n    // $freq = [];\n    // foreach\
    \ ($lst as $item) {\n    //     if (!isset($freq[$item])) {\n    //         $freq[$item]\
    \ = 0;\n    //     }\n    //     $freq[$item]++;\n    // }\n    // $res = -1;\n\
    \    // foreach ($freq as $item => $count) {\n    //     if ($item > $count) {\n\
    \    //         continue;\n    //     }\n    //     if ($item > $res) {\n    //\
    \         $res = $item;\n    //     }\n    // }\n    // return $res;\n\n    //\
    \ \u0432\u0430\u0440\u0438\u0430\u043D\u0442 \u0440\u0435\u0448\u0435\u043D\u0438\
    \u044F \u0437\u0430\u0434\u0430\u0447\u0438 \u0441\u0430\u043C\u043E\u0441\u0442\
    \u043E\u044F\u0442\u0435\u043B\u044C\u043D\u043E\n    $count = [];\n    foreach\
    \ ($lst as $item) {\n        if (!isset($count[$item])) {\n            $count[$item]\
    \ = 0;\n        }\n        $count[$item]++;\n    }\n    $res = -1;\n    foreach\
    \ ($count as $key => $value) {\n        if ($value >= $key && $key > $res) {\n\
    \            $res = $key;\n        }\n    }\n    return $res;\n}\necho search([5,\
    \ 5, 4, 4, 4]);", "    for ($i = count($lst); $i > 0; $i--) {\n        $a = array_count_values($lst);\n\
    \        if ($a[$i] >= $i) {\n            return $i;\n        }\n    }\n    return\
    \ -1;\n}", "  $result = -1;\n  $count = array_count_values($lst);\n  // echo 'count:\
    \ ';\n  // print_r($count);\n  foreach ($count as $key => $value) {\n    if ($key\
    \ == $value) {\n      $result = $key;\n    }\n  }\n  return $result;\n}", "  \
    \  $cnt = 0;\n    $values = array_count_values($lst);\n    foreach ($values as\
    \ $key => $value) {\n        if ($key >= $value) {\n            $cnt = $key;\n\
    \        }\n    }\n    return $cnt != 0 ? $cnt : -1;\n}", "    $arr = array_count_values($lst);\n\
    \    foreach ($arr as $k => $v) {\n        if ($k == $v) return $k;\n    }\n \
    \   return -1;\n}\n", "    foreach($lst as $i){\n        $a[$i] = count($lst)\
    \ - count(array_diff($lst, [$i]));\n    }\n    $b = max(array_keys($a, max($a)));\n\
    \    return $b < max($a) ? -1 : $b;\n}\n", "  $r = [];\n  foreach ($lst as $v)\
    \ {\n    if (!isset($r[$v])) $r[$v] = 0;\n    $r[$v]++;\n  }\n  foreach ($r as\
    \ $k => $v) {\n    if ($k <= $v) return $k;\n  }\n  return -1;\n}\n\n$lst = [4,\
    \ 1, 2, 2, 3, 1];\necho \"search($lst) = \" . search($lst) . \"\\n\";\n$lst =\
    \ [1, 2, 2, 3, 3, 3, 4, 4, 4];\necho \"search($lst) = \" . search($lst) . \"\\\
    n\";\n$lst = [5, 5, 4, 4, 4];\necho \"search($lst) = \" . search($lst) . \"\\\
    n\";\n", "    if(in_array(1, $lst)) {\n        return 1;\n    }\n    for($i =\
    \ 2; $i < count($lst); $i++) {\n        if(in_array($i, $lst) && array_count_values($lst)[$i]\
    \ >= $i) {\n            return $i;\n        }\n    }\n    return -1;\n}", "  \
    \  $counted = array_count_values($lst);\n    $filtered = array_filter($counted,\
    \ function($item) use ($counted) {\n        return ($item >= $counted[$item]);\n\
    \    });\n    $answer = max($filtered);\n    return ($answer < 1) ? -1 : $answer;\n\
    }\necho search([4, 1, 2, 2, 3, 1]);\necho search([1, 2, 2, 3, 3, 3, 4, 4, 4]);\n\
    echo search([5, 5, 4, 4, 4]);", "  $frequencies = count_values($lst);\n  $result\
    \ = -1;\n  foreach($frequencies as $key => $val) {\n    if($key == $val && $key\
    \ > $result) {\n      $result = $key;\n    }\n  }\n  return $result;\n}\n", " \
    \   // Your code here\n}", "  $cnt = [];\n  foreach ($lst as $v) $cnt[$v] = ($cnt[$v]\
    \ ?? 0) + 1;\n  foreach ($cnt as $v => $c) if ($v <= $c) return $v;\n  return\
    \ -1;\n}", "    $count = array_count_values($lst);\n    foreach($count as $key\
    \ => $value) {\n        if($key <= $value) {\n            return $key;\n     \
    \   }\n    }\n    return -1;\n}\n", "    $counts = array_count_values($lst);\n\
    \    $max = max($lst);\n    $result = -1;\n    for ($i = 1; $i <= $max; $i++)\
    \ {\n        if ($counts[$i] >= $i) {\n            $result = $i;\n        }\n\
    \    }\n    return $result;\n}", "    $map = array_count_values($lst);\n    $max\
    \ = max($lst);\n    $arr = [];\n    foreach ($map as $key => $value) {\n     \
    \   if($key <= $value) {\n            array_push($arr, $key);\n        }\n   \
    \ }\n    if(count($arr) == 0) {\n        return -1;\n    }\n    $max = max($arr);\n\
    \    return $max;\n}\n", "    if(!$lst) return -1;\n    $arr = array_count_values($lst);\n\
    \    $max = array_search(max($arr), $arr);\n    return ($arr[$max] >= $max) ?\
    \ $max : -1;\n}\n\necho search([4, 1, 2, 2, 3, 1]);", "    $frequencies = [];\n\
    \    $result = -1;\n    foreach ($lst as $l) {\n        isset($frequencies[$l])\
    \ ? $frequencies[$l]++ : $frequencies[$l] = 1;\n    }\n    foreach ($frequencies\
    \ as $key => $value) {\n        if ($key == $value && $key > $result) {\n    \
    \        $result = $key;\n        }\n    }\n    return $result;\n}\n", "  $arr\
    \ = array_count_values($lst);\n  // Sort $arr in reverse order by value and then\
    \ by key\n  arsort($arr);\n  foreach ($arr as $key => $value) {\n    if ($key\
    \ == $value) {\n      return $key;\n    }\n  }\n  return -1;\n}\necho search([4,\
    \ 1, 2, 2, 3, 1]) . \"<br>\"; // Should be 2\necho search([1, 2, 2, 3, 3, 3, 4,\
    \ 4, 4]) . \"<br>\"; // Should be 3\necho search([5, 5, 4, 4, 4]) . \"<br>\";\
    \ // Should be -1\n", "    $uniques = array_unique($lst);\n    rsort($uniques);\n\
    \    foreach ($uniques as $number) {\n        if ($number == array_search($number,\
    \ $lst) + 1) {\n            return $number;\n        }\n    }\n    return -1;\n\
    }\nprint_r(search([4, 1, 2, 2, 3, 1]));\nprint_r(search([1, 2, 2, 3, 3, 3, 4,\
    \ 4, 4]));\nprint_r(search([5, 5, 4, 4, 4]));", "    $result = [];\n    $greaterThanZero\
    \ = [];\n    foreach ($lst as $num) {\n        $result[$num] = isset($result[$num])\
    \ ? $result[$num] + 1 : 1;\n        if ($num > 0) {\n            $greaterThanZero[]\
    \ = $num;\n        }\n    }\n    foreach ($greaterThanZero as $num) {\n      \
    \  if ($result[$num] >= $num) {\n            return $num;\n        }\n    }\n\
    \    return -1;\n}", "  $freq = array_count_values($lst);\n  $max = 0;\n  foreach\
    \ ($freq as $key => $value) {\n    if ($key > $value) {\n      continue;\n   \
    \ }\n    $max = $key;\n  }\n  return $max ? $max : -1;\n}\n\n$answer = search([4,\
    \ 1, 2, 2, 3, 1]);\necho \"$answer \\n\";\n", "    $temp = array_count_values($lst);\n\
    \    if (empty($temp)) {\n        return -1;\n    }\n    foreach ($temp as $key\
    \ => $value) {\n        if ($key <= $value) {\n            return $key;\n    \
    \    }\n    }\n    return -1;\n}\n", "    $count = 0;\n    $result = -1;\n   \
    \ rsort($lst);\n    foreach ($lst as $num) {\n        if ($num == $lst[0]) {\n\
    \            $count++;\n        }\n        if ($num < $lst[0]) {\n           \
    \ if ($count >= $lst[0]) {\n                $result = $lst[0];\n            }\n\
    \            break;\n        }\n    }\n    return $result;\n}\n", "  $num_list\
    \ = [];\n  foreach ($lst as $val) {\n    array_push($num_list, $val);\n  }\n \
    \ $num_list = array_unique($num_list);\n  sort($num_list);\n  $result = -1;\n\
    \  for ($i = count($num_list) - 1; $i >= 0; $i--) {\n    $times = 0;\n    foreach\
    \ ($lst as $val) {\n      if ($val == $num_list[$i]) {\n        $times++;\n  \
    \    }\n    }\n    if ($times >= $num_list[$i]) {\n      $result = $num_list[$i];\n\
    \      break;\n    }\n  }\n  return $result;\n}\n", "    $max = max($lst);\n \
    \   if($max == 1){\n        return -1;\n    }\n    $keys = array_count_values($lst);\n\
    \    for($i=$max; $i>=1; $i--){\n        if(array_key_exists($i, $keys) && $keys[$i]\
    \ >= $i){\n            return $i;\n        }\n    }\n    return -1;\n}\n", " \
    \   $times = array_count_values($lst);\n    arsort($times);\n    foreach ($times\
    \ as $val => $count) {\n        if ($val <= $count) {\n            return $val;\n\
    \        }\n    }\n    return -1;\n}\n\nvar_dump(search([4, 1, 2, 2, 3, 1]));\n\
    var_dump(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nvar_dump(search([5, 5, 4, 4, 4]));",
  "    $count = [];\n    foreach ($lst as $number) {\n        isset($count[$number])\
    \ ? $count[$number]++ : $count[$number] = 1;\n    }\n    $result = -1;\n    foreach\
    \ ($count as $number => $frequency) {\n        if ($number <= $frequency) {\n\
    \            $result = $number;\n        }\n    }\n    return $result;\n}", " \
    \   $freqArr = [];\n    $maxFreq = 0;\n    $maxVal = 0;\n    foreach ($lst as\
    \ $val) {\n        if (!isset($freqArr[$val])) {\n            $freqArr[$val] =\
    \ 1;\n        } else {\n            $freqArr[$val]++;\n        }\n        if ($val\
    \ >= $freqArr[$val] && $freqArr[$val] >= $maxFreq) {\n            $maxFreq = $freqArr[$val];\n\
    \            $maxVal = $val;\n        }\n    }\n    return $maxVal;\n}\n\necho\
    \ \"Test #1: \" . (search([4, 1, 2, 2, 3, 1]) == 2 ? \"Pass\" : \"Fail\") . \"\
    <br>\";\necho \"Test #2: \" . (search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3 ? \"Pass\"\
    \ : \"Fail\") . \"<br>\";\necho \"Test #3: \" . (search([5, 5, 4, 4, 4]) == -1\
    \ ? \"Pass\" : \"Fail\") . \"<br>\";\necho \"Test #4: \" . (search([4, 3, 3, 3,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
  "  $max = max($lst);\n  foreach (array_count_values($lst) as $k => $v) {\n    if\
    \ ($k > $v && $k <= $max) $max = $k;\n  }\n  return $max == max($lst) ? -1 : $max;\n\
    }\n", "    $uniques = array_unique($lst);\n    $max = max($uniques);\n    for\
    \ ($i = $max; $i > 0; $i--) {\n        if (in_array($i, $lst) && count(array_keys($lst,\
    \ $i)) >= $i) {\n            return $i;\n        }\n    }\n    return -1;\n}\n",
  "    $greatestNum = -1;\n    $result = -1;\n    $countArray = array_count_values($lst);\n\
    \    foreach ($countArray as $num => $count) {\n        if ($num > $greatestNum\
    \ && $count >= $num) {\n            $greatestNum = $num;\n            $result\
    \ = $num;\n        }\n    }\n    return $result;\n}", "    $counts = array_count_values($lst);\n\
    \    $uniques = array_unique($lst);\n    sort($uniques);\n    rsort($uniques);\n\
    \    $answer = -1;\n    foreach ($uniques as $unique) {\n        if ($counts[$unique]\
    \ >= $unique) {\n            $answer = $unique;\n            break;\n        }\n\
    \    }\n    return $answer;\n}\necho search([4, 1, 2, 2, 3, 1]);\necho search([1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4]);\necho search([5, 5, 4, 4, 4]);", "    $res = $max\
    \ = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        $lst[$i] > $max ?\
    \ $max = $lst[$i] : $lst[$i];\n    }\n    for ($i = 0; $i < count($lst); $i++)\
    \ {\n        if ($lst[$i] == $max) {\n            $res = $max;\n            break;\n\
    \        }\n        if ($max - $lst[$i] <= 1) {\n            $res = $max - 1;\n\
    \            break;\n        }\n    }\n    return $res;\n}\n", "    $result =\
    \ -1;\n    $numbers = array_count_values($lst);\n    foreach ($numbers as $number\
    \ => $amount) {\n        if ($number <= $amount) {\n            $result = $number;\n\
    \        }\n    }\n    return $result;\n}\n\n$lst = [4, 1, 2, 2, 3, 1];\necho\
    \ search($lst);", "    $frequency = [];\n    foreach ($lst as $number) {\n   \
    \     if (isset($frequency[$number])) {\n            $frequency[$number] += 1;\n\
    \        } else {\n            $frequency[$number] = 1;\n        }\n    }\n  \
    \  krsort($frequency);\n    foreach ($frequency as $number => $count) {\n    \
    \    if ($number <= $count) {\n            return $number;\n        }\n    }\n\
    \    return -1;\n}", "    $counts = array_count_values($lst);\n    arsort($counts);\n\
    \    foreach ($counts as $k => $v) {\n        if ($k > $v) break;\n        return\
    \ $k;\n    }\n    return -1;\n}\n", "    $data = [];\n    foreach ($lst as $value)\
    \ {\n        if (array_key_exists($value, $data)) {\n            $data[$value]\
    \ += 1;\n        } else {\n            $data[$value] = 1;\n        }\n    }\n\
    \    $index = -1;\n    $max = -1;\n    foreach ($data as $key => $value) {\n \
    \       if ($key <= $value && $key > $max) {\n            $max = $key;\n     \
    \       $index = $key;\n        }\n    }\n    return $index;\n}\n\nprint_r(search([4,\
    \ 1, 2, 2, 3, 1]));", "  $max = max($lst);\n  for ($i = $max; $i > 0; $i--) {\n\
    \    if (count($lst) - count(array_diff($lst, array($i))) >= $i) {\n      return\
    \ $i;\n    }\n  }\n  return -1;\n}\n", "\t// $new_arr = [];\n\t// foreach ($lst\
    \ as $num) {\n\t// \t$new_arr[$num] = ($new_arr[$num] ?? 0) + 1;\n\t// }\n\t//\
    \ foreach ($new_arr as $key => $value) {\n\t// \tif ($key >= $value) {\n\t// \t\
    \t$res = $key;\n\t// \t}\n\t// }\n\t// return $res ?? -1;\n\t// \u0412\u0442\u043E\
    \u0440\u043E\u0439 \u0432\u0430\u0440\u0438\u0430\u043D\u0442 \u0440\u0435\u0448\
    \u0435\u043D\u0438\u044F\n\t$new_arr = [];\n\tforeach ($lst as $num) {\n\t\t$new_arr[$num]\
    \ = ($new_arr[$num] ?? 0) + 1;\n\t}\n\tforeach ($new_arr as $key => $value) {\n\
    \t\tif ($key >= $value) {\n\t\t\treturn $key;\n\t\t}\n\t}\n\treturn -1;\n}\n\n\
    $arr = [5, 5, 4, 4, 4];\necho search($arr);", "    $frequencies = array_count_values($lst);\n\
    \    $greatest = -1;\n    foreach ($frequencies as $num => $frequency) {\n   \
    \     if ($num <= $frequency && $num > $greatest) {\n            $greatest = $num;\n\
    \        }\n    }\n    return $greatest;\n}\n\necho search([4, 1, 2, 2, 3, 1])\
    \ . \"<br>\"; // 2\necho search([1, 2, 2, 3, 3, 3, 4, 4, 4]) . \"<br>\"; // 3\n\
    echo search([5, 5, 4, 4, 4]) . \"<br>\"; // -1", "    // write your code here\n\
    }", "\tif (empty($lst)) {\n\t\treturn -1;\n\t}\n\t$cnt = count($lst);\n\t$max\
    \ = max($lst);\n\t$min = min($lst);\n\t$cntMap = [];\n\tfor ($i=0; $i < $cnt;\
    \ $i++) { \n\t\t$tmp = $lst[$i];\n\t\tif (!isset($cntMap[$tmp])) {\n\t\t\t$cntMap[$tmp]\
    \ = 1;\n\t\t} else {\n\t\t\t$cntMap[$tmp] += 1;\n\t\t}\n\t}\n\tfor ($i=$max; $i\
    \ >= $min; $i--) { \n\t\tif (isset($cntMap[$i]) && $cntMap[$i] >= $i) {\n\t\t\t\
    return $i;\n\t\t}\n\t}\n\treturn -1;\n}\n\nprint_r(search([5, 5, 4, 4, 4]));",
  "    if (empty($lst)) return -1;\n    sort($lst);\n    // \u0421\u0447\u0438\u0442\
    \u0430\u0435\u043C \u043A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E\
    \ \u043F\u043E\u0432\u0442\u043E\u0440\u0435\u043D\u0438\u0439 \u044D\u043B\u0435\
    \u043C\u0435\u043D\u0442\u043E\u0432 \u043C\u0430\u0441\u0441\u0438\u0432\u0430\
    \n    $cnt = array_count_values($lst);\n    // \u041F\u0435\u0440\u0435\u0432\u043E\
    \u0434\u0438\u043C \u043A\u043B\u044E\u0447\u0438 \u043C\u0430\u0441\u0441\u0438\
    \u0432\u0430 \u0432 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F \u0438 \u043F\
    \u043E\u043B\u0443\u0447\u0430\u0435\u043C \u043C\u0430\u0441\u0441\u0438\u0432\
    \ \u0431\u0435\u0437 \u043F\u043E\u0432\u0442\u043E\u0440\u044F\u044E\u0449\u0438\
    \u0445\u0441\u044F \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432\n  \
    \  $keys = array_keys($cnt);\n    // \u0421\u0440\u0430\u0432\u043D\u0438\u0432\
    \u0430\u0435\u043C \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F \u0438 \u043A\
    \u043B\u044E\u0447\u0438 \u043C\u0430\u0441\u0441\u0438\u0432\u0430. \u0415\u0441\
    \u043B\u0438 \u043F\u0440\u0435\u0434\u0448\u0435\u0441\u0442\u0432\u0443\u044E\
    \u0449\u0435\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u0431\u043E\
    \u043B\u044C\u0448\u0435 \u0438\u043B\u0438 \u0440\u0430\u0432\u043D\u043E \u043A\
    \u043B\u044E\u0447\u0443 - \u043F\u0440\u043E\u043F\u0443\u0441\u043A\u0430\u0435\
    \u043C.\n    for ($i = 0; $i < count($keys); $i++) {\n        if ($cnt[$keys[$i]]\
    \ >= $keys[$i]) return $keys[$i];\n    }\n    return -1;\n}", "    $result = -1;\n\
    \    if (!empty($lst)) {\n        $counts = array_count_values($lst);\n      \
    \  $greatest = max($lst);\n        for ($i = $greatest; $i > 0; $i--) {\n    \
    \        if ($counts[$i] >= $i) {\n                $result = $i;\n           \
    \     break;\n            }\n        }\n    }\n    return $result;\n}\n\necho\
    \ \"search([4, 1, 2, 2, 3, 1]) -> \" . search([4, 1, 2, 2, 3, 1]) . \"\\n\";\n\
    echo \"search([1, 2, 2, 3, 3, 3, 4, 4, 4]) -> \" . search([1, 2, 2, 3, 3, 3, 4,\
    \ 4, 4]) . \"\\n\";\necho \"search([5, 5, 4, 4, 4]) -> \" . search([5, 5, 4, 4,\
    \ 4]) . \"\\n\";\necho \"search([]) -> \" . search([]) . \"\\n\";\necho \"search([1])\
    \ -> \" . search([1]) . \"\\n\";\necho \"search([1, 1]) -> \" . search([1, 1])\
    \ . \"\\n\";\necho \"search([1, 1, 1]) -> \" . search([1, 1, 1]) . \"\\n\";\n\
    echo \"search([2, 1, 1]) -> \" . search([2, 1, 1]) . \"\\n\";\necho \"search([2,\
    \ 1, 1, 1]) -> \" . search([2, 1, 1, 1]) . \"\\n\";\necho \"search([2, 1, 1, 1,\
    \ 1]) -> \" . search([2, 1, 1, 1, 1]) . \"\\n\";\necho \"search([2, 1, 1, 1, 1,\
    \ 1]) -> \" . search([2, 1, 1, 1, 1, 1]) . \"\\n\";\necho \"search([3, 1, 1, 1,\
    \ 1, 1]) -> \" . search([3, 1, 1, 1, 1, 1]) . \"\\n\";\necho \"search([3, 1, 1,\
    \ 1, 1, 1, 1]) -> \" . search([3, 1, 1, 1, 1", "    $result = -1;\n    $frequencies\
    \ = array_count_values($lst);\n    $values = array_values($frequencies);\n   \
    \ $keys = array_keys($frequencies);\n    for ($i = 0; $i < count($values); $i++)\
    \ {\n        if ($values[$i] >= $keys[$i] && $keys[$i] > $result) {\n        \
    \    $result = $keys[$i];\n        }\n    }\n    return $result;\n}", "    if\
    \ (empty($lst)) {\n        return -1;\n    }\n    $freq = array_count_values($lst);\n\
    \    $max_key = max(array_keys($freq));\n    if ($freq[$max_key] >= $max_key)\
    \ {\n        return $max_key;\n    }\n    return -1;\n}\n", "    $a = [];\n  \
    \  foreach ($lst as $n) $a[$n] = $a[$n] ?? 0 + 1;\n    rsort($lst);\n    $n =\
    \ $lst[0];\n    while ($n > 0) {\n        if ($a[$n] >= $n) return $n;\n     \
    \   $n--;\n    }\n    return -1;\n}\n\nvar_dump(search([4, 1, 2, 2, 3, 1])); //\
    \ 2\nvar_dump(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // 3\nvar_dump(search([5,\
    \ 5, 4, 4, 4])); // -1", "  $temp = array_flip($lst);\n  foreach ($temp as $key\
    \ => $value) {\n    if ($key >= $value) {\n      return $key;\n    }\n  }\n  return\
    \ -1;\n}", "  $max = -1;\n  foreach ($lst as $el) {\n    if (count(array_keys($lst,\
    \ $el)) >= $el) {\n      $max = $el;\n    }\n  }\n  return $max;\n}\n\necho search([4,\
    \ 1, 2, 2, 3, 1]);\necho search([1, 2, 2, 3, 3, 3, 4, 4, 4]);\necho search([5,\
    \ 5, 4, 4, 4]);", "  $max = -1;\n  foreach ($lst as $elem) {\n    if ($elem >\
    \ $max) {\n      $count = 0;\n      foreach ($lst as $elem2) {\n        if ($elem2\
    \ == $elem) {\n          $count++;\n        }\n      }\n      if ($count >= $elem)\
    \ {\n        $max = $elem;\n      }\n    }\n  }\n  return $max;\n}", "    $newArr\
    \ = [];\n    $arr = [];\n    $x = null;\n    $y = null;\n    for ($i = 0; $i <\
    \ count($lst); $i++) {\n        if (isset($arr[$lst[$i]])) {\n            $arr[$lst[$i]]++;\n\
    \        } else {\n            $arr[$lst[$i]] = 1;\n        }\n    }\n    foreach\
    \ ($arr as $key => $value) {\n        if ($key >= $value) {\n            $newArr[$key]\
    \ = $value;\n        }\n    }\n    if (count($newArr) > 0) {\n        $x = max(array_keys($newArr));\n\
    \        $y = max($newArr);\n        if ($x == $y) {\n            return $x;\n\
    \        } else {\n            return -1;\n        }\n    } else {\n        return\
    \ -1;\n    }\n}\n\n$array = [4, 1, 2, 2, 3, 1];\necho search($array);", "    $c=array_count_values($lst);\n\
    \    $p=[];\n    foreach($c as $k=>$v){\n        if($k<=$v) $p[]=$k;\n    }\n\
    \    return empty($p)?-1:max($p);\n}\n", "  $x = max($lst);\n  $counts = array_count_values($lst);\n\
    \  return isset($counts[$x]) && $counts[$x] >= $x ? $x : -1;\n}", "    $array\
    \ = array_count_values($lst);\n    foreach ($array as $key => $value) {\n    \
    \    if ($key === $value) {\n            $result = $key;\n        } else {\n \
    \           $result = -1;\n        }\n    }\n    return $result;\n}\n", "    $arr\
    \ = array_count_values($lst);\n    arsort($arr);\n    return array_key_first($arr)\
    \ >= array_search(array_key_first($arr), $arr) ? array_key_first($arr) : -1;\n\
    }\n", "  $answer = -1;\n  $max = -1;\n  $max_freq = -1;\n  $freq = array_count_values($lst);\n\
    \  foreach ($freq as $key => $value) {\n    if ($value >= $key) {\n      if ($key\
    \ > $max) {\n        $max = $key;\n        $max_freq = $value;\n      }\n    }\n\
    \  }\n  if ($max > 0 && $max_freq >= $max) {\n    $answer = $max;\n  }\n  return\
    \ $answer;\n}", "    $max = 0;\n    foreach ($lst as $number) {\n        if ($number\
    \ > $max) {\n            $max = $number;\n        }\n    }\n    $counters = array_fill(0,\
    \ $max + 1, 0);\n    foreach ($lst as $number) {\n        $counters[$number]++;\n\
    \    }\n    for ($i = $max; $i > 0; $i--) {\n        if ($counters[$i] >= $i)\
    \ {\n            return $i;\n        }\n    }\n    return -1;\n}\n", "\t$result\
    \ = -1;\n\tforeach ($lst as $value) {\n\t\tif (substr_count($lst, $value) >= $value)\
    \ {\n\t\t\t$result = $value;\n\t\t}\n\t}\n\treturn $result;\n}\n", "  $count =\
    \ count($lst);\n  if($count == 0) {\n    return -1;\n  }\n  $max = 1;\n  $freq\
    \ = [];\n  for($i = 0; $i < $count; $i++) {\n    $val = $lst[$i];\n    if(isset($freq[$val]))\
    \ {\n      $freq[$val]++;\n    } else {\n      $freq[$val] = 1;\n    }\n    if($freq[$val]\
    \ >= $val && $val > $max) {\n      $max = $val;\n    }\n  }\n  return $max;\n\
    }\necho search([4, 1, 2, 2, 3, 1]) . \"\\n\";\necho search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) . \"\\n\";\necho search([5, 5, 4, 4, 4]) . \"\\n\";", "    $freq =\
    \ array_count_values($lst);\n    $mFreq = 0;\n    $val = -1;\n    foreach ($freq\
    \ as $item => $count) {\n        if ($count >= $item && $count >= $mFreq) {\n\
    \            $mFreq = $count;\n            $val = $item;\n        }\n    }\n \
    \   return $val;\n}\necho search([4, 1, 2, 2, 3, 1]);", "    // your code here\n\
    \    $frequencies = array_count_values($lst);\n    $max = max($lst);\n    for\
    \ ($i = $max; $i > 0; $i--) {\n        if ($frequencies[$i] >= $i) {\n       \
    \     return $i;\n        }\n    }\n    return -1;\n}", "    // your code here\n\
    }\n", "    $frequency = array_count_values($lst);\n    arsort($frequency);\n \
    \   foreach ($frequency as $key => $val) {\n        if ($key >= $val) {\n    \
    \        return $key;\n        }\n    }\n    return -1;\n}\n", "    $res = -1;\n\
    \    $temp = array_count_values($lst);\n    foreach ($temp as $k => $v) {\n  \
    \      if ($k <= $v) {\n            $res = $k;\n        }\n    }\n    return $res;\n\
    }\necho search([4, 1, 2, 2, 3, 1]);\necho \"<br/>\";\necho search([1, 2, 2, 3,\
    \ 3, 3, 4, 4, 4]);\necho \"<br/>\";\necho search([5, 5, 4, 4, 4]);\necho \"<br/>\"\
    ;\n", "  $gInt = 0;\n  foreach($lst as $l){\n    if ($l > $gInt){\n      $gInt\
    \ = $l;\n    }\n  }\n  $newLst = array_count_values($lst);\n  foreach($newLst\
    \ as $k => $v){\n    if ($v >= $k){\n      return $k;\n    } else {\n      return\
    \ -1;\n    }\n  }\n}\nprint_r(search([4, 1, 2, 2, 3, 1]));\nprint_r(search([1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4]));\nprint_r(search([5, 5, 4, 4, 4]));", "    $lst =\
    \ array_count_values($lst);\n    arsort($lst);\n    foreach ($lst as $num => $freq)\
    \ {\n        if ($num <= $freq) {\n            return $num;\n        }\n    }\n\
    \    return -1;\n}", "    $result = -1;\n    $len = count($lst);\n    for ($i\
    \ = 0; $i < $len; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $len;\
    \ $j++) {\n            if ($lst[$i] == $lst[$j]) {\n                $count++;\n\
    \            }\n        }\n        if ($count >= $lst[$i]) {\n            if ($result\
    \ < $lst[$i]) {\n                $result = $lst[$i];\n            }\n        }\n\
    \    }\n    return $result;\n}\necho search([4, 1, 2, 2, 3, 1]);", "    $count\
    \ = array_count_values($lst);\n    $max = 0;\n    foreach ($count as $key => $value)\
    \ {\n        if ($key > $value) {\n            if ($key > $max) {\n          \
    \      $max = $key;\n            }\n        }\n    }\n    if ($max == 0) {\n \
    \       return -1;\n    }\n    return $max;\n}\necho search([4, 1, 2, 2, 3, 1]);",
  "    $elements = array_count_values($lst);\n    $max = 0;\n    foreach ($elements\
    \ as $key => $value) {\n        if ($key == $value && $key > $max) {\n       \
    \     $max = $key;\n        }\n    }\n    return $max > 0 ? $max : -1;\n}\n\n\
    print_r(search([4, 1, 2, 2, 3, 1]));\nprint_r(search([1, 2, 2, 3, 3, 3, 4, 4,\
    \ 4]));\nprint_r(search([5, 5, 4, 4, 4]));", "  $counter = [];\n  foreach ($lst\
    \ as $value) {\n    if (!isset($counter[$value])) {\n      $counter[$value] =\
    \ 1;\n    } else {\n      $counter[$value]++;\n    }\n  }\n  foreach ($counter\
    \ as $value => $count) {\n    if ($value == $count) {\n      return $value;\n\
    \    }\n  }\n  return -1;\n}\n\necho search([4, 1, 2, 2, 3, 1]); // 2\necho \"\
    <br/>\";\necho search([1, 2, 2, 3, 3, 3, 4, 4, 4]); // 3\necho \"<br/>\";\necho\
    \ search([5, 5, 4, 4, 4]); // -1", "    $maxFrequency = 1;\n    $maxFrequencyValue\
    \ = -1;\n    $maxValue = -1;\n    $lstCount = array_count_values($lst);\n    arsort($lstCount);\n\
    \    foreach ($lstCount as $key => $value) {\n        if ($key >= $value && $value\
    \ >= $maxFrequency) {\n            $maxFrequency = $value;\n            $maxFrequencyValue\
    \ = $key;\n        }\n        if ($key > $maxValue) {\n            $maxValue =\
    \ $key;\n        }\n    }\n    if ($maxFrequencyValue == -1) {\n        return\
    \ $maxValue;\n    }\n    return $maxFrequencyValue;\n}\n", "    $count = array_count_values($lst);\n\
    \    $max = max($lst);\n    $result = -1;\n    foreach ($count as $key => $value)\
    \ {\n        if ($key >= $value && $key > $result) {\n            $result = $key;\n\
    \        }\n    }\n    return $result;\n}\n", "    $result = -1;\n    $frequencies\
    \ = array_count_values($lst);\n    foreach ($frequencies as $key => $value) {\n\
    \        if ($key <= $value) {\n            $result = $key;\n        }\n    }\n\
    \    return $result;\n}", "    // your code here\n}\n", "    $frequencies = [];\n\
    \    foreach ($lst as $val) {\n        $frequencies[$val] = ($frequencies[$val]\
    \ ?? 0) + 1;\n    }\n    krsort($frequencies);\n    foreach ($frequencies as $val\
    \ => $freq) {\n        if ($val <= $freq) {\n            return $val;\n      \
    \  }\n    }\n    return -1;\n}\n", "    $frequencies = array_count_values($lst);\n\
    \    arsort($frequencies);\n    foreach ($frequencies as $key => $value) {\n \
    \       if ($key > $value) {\n            return -1;\n        }\n        if ($key\
    \ == $value) {\n            return $key;\n        }\n    }\n}", "    $freq = [];\n\
    \    foreach ($lst as $num) {\n        if (isset($freq[$num])) {\n           \
    \ $freq[$num]++;\n        } else {\n            $freq[$num] = 1;\n        }\n\
    \    }\n    $answer = -1;\n    foreach ($freq as $num => $cnt) {\n        if ($num\
    \ == $cnt && $num > $answer) {\n            $answer = $num;\n        }\n    }\n\
    \    return $answer;\n}", "    $count = array_count_values($lst);\n    $result\
    \ = -1;\n    foreach ($count as $key => $value) {\n        if ($key <= $value)\
    \ {\n            $result = $key;\n        }\n    }\n    return $result;\n}\n",
  "    foreach($lst as $key=>$value){\n        if($value == 1){\n            return\
    \ -1;\n        }else{\n            if(count(array_keys($lst, $value)) >= $value){\n\
    \                return $value;\n            }\n        }\n    }\n}\n", "    if\
    \ (!$lst) return -1;\n    sort($lst);\n    $max = 0;\n    $current = $lst[0];\n\
    \    $cnt = 1;\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ === $current) {\n            $cnt++;\n        } else {\n            if ($cnt\
    \ >= $current) {\n                $max = $current;\n            }\n          \
    \  $current = $lst[$i];\n            $cnt = 1;\n        }\n    }\n    if ($cnt\
    \ >= $current) {\n        $max = $current;\n    }\n    return $max;\n}", "  $count\
    \ = 0;\n  foreach ($lst as $key => $value) {\n    $count++;\n    if($count ==\
    \ $value){\n      return $value;\n    }\n  }\n  return -1;\n}\necho search([4,\
    \ 1, 2, 2, 3, 1]);", "    $max = max($lst);\n    $arr = array_fill(1, $max, 0);\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        $arr[$lst[$i]]++;\n    }\n\
    \    for ($i = $max; $i > 0; $i--) {\n        if ($arr[$i] >= $i) return $i;\n\
    \    }\n    return -1;\n}", "    if(count($lst) < 2) {\n        return -1;\n \
    \   }\n\n    $count = array_count_values($lst);\n    $duplicate = array_filter($count,\
    \ function($value) {\n        return $value >= $value;\n    });\n\n    if(empty($duplicate))\
    \ {\n        return -1;\n    }\n\n    $result = 0;\n    foreach($duplicate as\
    \ $key => $value) {\n        if($key > $result) {\n            $result = $key;\n\
    \        }\n    }\n\n    return $result;\n}\n", "    $map = array_count_values($lst);\n\
    \    foreach ($map as $k => $v) {\n        if ($k <= $v) {\n            return\
    \ $k;\n        }\n    }\n    return -1;\n}", "    $cnt = array_count_values($lst);\n\
    \    arsort($cnt);\n    $cnt = array_filter($cnt, function($v) { return $v >=\
    \ $v; });\n    $res = array_keys($cnt);\n    return (empty($res)) ? -1 : $res[0];\n\
    }\n\nclass SearchTest extends \\PHPUnit\\Framework\\TestCase {\n    public function\
    \ testBasics() {\n        $this->assertEquals(2, search([4, 1, 2, 2, 3, 1]));\n\
    \        $this->assertEquals(3, search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\n      \
    \  $this->assertEquals(-1, search([5, 5, 4, 4, 4]));\n    }\n}", "    // sort\
    \ the list\n    sort($lst);\n    // set the frequency and the highest value to\
    \ 0\n    $freq = 0;\n    $highest = 0;\n    // start the loop\n    for ($i = 0;\
    \ $i < count($lst); $i++) {\n        // assign the current element to the next\
    \ one\n        $next = $lst[$i];\n        // if the element to the left is the\
    \ same as the current one, increment the frequency\n        if ($lst[$i - 1] ==\
    \ $next) {\n            $freq++;\n        }\n        // if the next element is\
    \ not the same as the previous\n        if ($lst[$i + 1] != $next) {\n       \
    \     // if the frequency of the current element is bigger than the one of the\
    \ previous element,\n            // set the highest to the current element\n \
    \           if ($freq >= $next) {\n                $highest = $next;\n       \
    \     }\n            // reset the frequency\n            $freq = 0;\n        }\n\
    \    }\n    // if the highest equals 0, return -1\n    if ($highest == 0) {\n\
    \        return -1;\n    }\n    // return the highest\n    return $highest;\n\
    }\n", "\tfor ($i = count($lst) - 1; $i >= 0; $i--) {\n\t\t$count = 0;\n\t\tfor\
    \ ($j = 0; $j < count($lst); $j++) {\n\t\t\tif ($lst[$i] == $lst[$j]) {\n\t\t\t\
    \t$count++;\n\t\t\t}\n\t\t}\n\t\tif ($count >= $lst[$i]) {\n\t\t\treturn $lst[$i];\n\
    \t\t}\n\t}\n\treturn -1;\n}\necho search([4, 1, 2, 2, 3, 1]) . \"\\n\";\necho\
    \ search([1, 2, 2, 3, 3, 3, 4, 4, 4]) . \"\\n\";\necho search([5, 5, 4, 4, 4])\
    \ . \"\\n\";", "  $lst = array_flip($lst);\n  $lst = array_flip($lst);\n  sort($lst);\n\
    \  foreach($lst as $x) {\n    if($x == $freq) {\n      return $x;\n    }\n   \
    \ $freq = 0;\n    for($i = 0; $i < count($lst); $i++) {\n      if($lst[$i] ==\
    \ $x) {\n        $freq++;\n      }\n    }\n  }\n  return -1;\n}\necho search([4,\
    \ 1, 2, 2, 3, 1]);", "    $counts = array_count_values($lst);\n    foreach ($counts\
    \ as $value => $count) {\n        if ($value <= $count) {\n            return\
    \ $value;\n        }\n    }\n    return -1;\n}\n", "    $max = max($lst);\n  \
    \  for ($i = $max; $i > 0; $i--) {\n        if (substr_count(implode($lst), $i)\
    \ >= $i) {\n            return $i;\n        }\n    }\n    return -1;\n}\n", " \
    \   $sort = array_count_values($lst);\n    $min = 1;\n    $max = max($lst);\n\
    \    for ($i = $min; $i <= $max; $i++) {\n        if (isset($sort[$i]) && $sort[$i]\
    \ >= $i) {\n            return $i;\n        }\n    }\n    return -1;\n}\n", " \
    \   if (empty($lst)) return -1;\n    $cnt = array_count_values($lst);\n    $max\
    \ = max($lst);\n    $res = -1;\n    foreach ($cnt as $key => $val) {\n       \
    \ if ($key > $val) continue;\n        if ($key > $max) continue;\n        if ($key\
    \ > $res) $res = $key;\n    }\n    return $res;\n}", "  $max = 0;\n  $dict = [];\n\
    \  foreach ($lst as $key => $val) {\n    if ($val > $max) $max = $val;\n    if\
    \ (!isset($dict[$val])) $dict[$val] = 0;\n    $dict[$val]++;\n  }\n  for ($i =\
    \ $max; $i > 0; $i--) {\n    if (isset($dict[$i]) && $dict[$i] >= $i) return $i;\n\
    \  }\n  return -1;\n}\necho \"test1: \" . (search([4, 1, 2, 2, 3, 1]) == 2 ? \"\
    Success\" : \"Fail\") . \"\\n\";\necho \"test2: \" . (search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3 ? \"Success\" : \"Fail\") . \"\\n\";\necho \"test3: \" . (search([5,\
    \ 5, 4, 4, 4]) == -1 ? \"Success\" : \"Fail\") . \"\\n\";\necho \"test4: \" .\
    \ (search([2, 3, 3, 3, 4, 4, 4, 5, 5]) == 4 ? \"Success\" : \"Fail\") . \"\\n\"\
    ;\necho \"test5: \" . (search([]) == -1 ? \"Success\" : \"Fail\") . \"\\n\";\n\
    echo \"test6: \" . (search([1]) == -1 ? \"Success\" : \"Fail\") . \"\\n\";\necho\
    \ \"test7: \" . (search([1, 1]) == 1 ? \"Success\" : \"Fail\") . \"\\n\";\necho\
    \ \"test8: \" . (search([1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7,\
    \ 8, 8, 8, 9, 9, 9, 10, 10, 10]) == 9 ? \"Success\" : \"Fail\") . \"\\n\";\necho\
    \ \"test9: \" . (search([12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13", "    $tab = array_count_values($lst);\n\
    \    $result = -1;\n    foreach ($tab as $key => $value) {\n        if ($key ==\
    \ $value && $key > $result) $result = $key;\n    }\n    return $result;\n}", " \
    \   $greatest_int = 0;\n    $values = array_count_values($lst);\n    foreach ($values\
    \ as $key => $value) {\n        if ($key <= $value && $key > $greatest_int) {\n\
    \            $greatest_int = $key;\n        }\n    }\n    return $greatest_int\
    \ ? $greatest_int : -1;\n}\n", "    $freq = array_count_values($lst);\n    $max\
    \ = max($lst);\n    for ($i = $max; $i > 0; $i--) {\n        if ($freq[$i] >=\
    \ $i) {\n            return $i;\n        }\n    }\n    return -1;\n}\n", "  //\
    \ calculating the frequencies\n  $freq = array_count_values($lst);\n  // sorting\
    \ the frequencies\n  ksort($freq);\n  // selecting the highest frequency\n  $max\
    \ = end($freq);\n  // selecting the number that has the frequency of max\n  $n\
    \ = array_search($max, $freq);\n  // comparing the frequency with the number\n\
    \  if ($max >= $n) {\n    return $n;\n  } else {\n    return -1;\n  }\n}\n", " \
    \   $occurrences = [];\n    $max = -1;\n    foreach ($lst as $key => $value) {\n\
    \        if (in_array($value, $occurrences)) {\n            $occurrences[$value]++;\n\
    \        } else {\n            $occurrences[$value] = 1;\n        }\n        if\
    \ ($occurrences[$value] >= $value && $value > $max) {\n            $max = $value;\n\
    \        }\n    }\n    return $max;\n}\necho search([4, 1, 2, 2, 3, 1]);\necho\
    \ search([1, 2, 2, 3, 3, 3, 4, 4, 4]);\necho search([5, 5, 4, 4, 4]);", "    $counts\
    \ = array_count_values($lst);\n    $counts = array_filter($counts, function($c){return\
    \ $c >= 1;});\n    $max = max($counts);\n    $max_key = array_search($max, $counts);\n\
    \    if ($max_key == NULL || $max_key > $max) {\n        return -1;\n    }\n \
    \   return $max_key;\n}", "    $table = array_count_values($lst);\n    krsort($table);\n\
    \    foreach ($table as $key => $value) {\n        if ($key <= $value) {\n   \
    \         return $key;\n        }\n    }\n    return -1;\n}\necho search([4, 1,\
    \ 2, 2, 3, 1]);", "    $max = -1;\n    $numOf = 1;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($lst); $j++) {\n            if\
    \ ($lst[$i] == $lst[$j]) {\n                $numOf++;\n            }\n       \
    \ }\n        if ($numOf >= $lst[$i] && $lst[$i] > $max) {\n            $max =\
    \ $lst[$i];\n        }\n        $numOf = 1;\n    }\n    return $max;\n}\necho\
    \ search([4, 1, 2, 2, 3, 1]).\"\\n\";\necho search([1, 2, 2, 3, 3, 3, 4, 4, 4]).\"\
    \\n\";\necho search([5, 5, 4, 4, 4]).\"\\n\";", "    $arr = array_count_values($lst);\n\
    \    $max = max($lst);\n    for ($i=1; $i <= $max; $i++) { \n        if ($arr[$i]\
    \ >= $i) {\n            return $i;\n        }\n    }\n    return -1;\n}\necho\
    \ search([4, 1, 2, 2, 3, 1]);", "    $freq = array_count_values($lst);\n    $max\
    \ = 0;\n    foreach ($freq as $n => $f) {\n        if ($n >= $f && $n > $max)\
    \ {\n            $max = $n;\n        }\n    }\n    return $max === 0 ? -1 : $max;\n\
    }", "\t$cnt = [];\n\tforeach ($lst as $key => $value) {\n\t\tif(isset($cnt[$value]))\n\
    \t\t\t$cnt[$value]++;\n\t\telse\n\t\t\t$cnt[$value] = 1;\n\t}\n\trsort($cnt);\n\
    \tif($cnt[0] < max($lst))\n\t\treturn -1;\n\treturn array_search($cnt[0], $cnt);\n\
    }", "\t$nums = array_count_values($lst);\n\t$max = max($lst);\n\tfor ($i = $max;\
    \ $i > 0; $i--) {\n\t\tif ($nums[$i] >= $i) return $i;\n\t}\n\treturn -1;\n}\n\
    \n$answer = search([4, 1, 2, 2, 3, 1]);\necho '<pre>';\nvar_dump($answer);\necho\
    \ '</pre>';\n\n$answer = search([1, 2, 2, 3, 3, 3, 4, 4, 4]);\necho '<pre>';\n\
    var_dump($answer);\necho '</pre>';\n\n$answer = search([5, 5, 4, 4, 4]);\necho\
    \ '<pre>';\nvar_dump($answer);\necho '</pre>';", "  $freq = array_count_values($lst);\n\
    \  $res = -1;\n  foreach ($freq as $k => $v) {\n    if ($k >= $v && $k > $res)\
    \ {\n      $res = $k;\n    }\n  }\n  return $res;\n}\n\nprint_r(search([4, 1,\
    \ 2, 2, 3, 1]) . \"\\n\");\nprint_r(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) . \"\\\
    n\");\nprint_r(search([5, 5, 4, 4, 4]) . \"\\n\");", "    $element = 0;\n    $frequency\
    \ = 0;\n    foreach ($lst as $item) {\n        $count = array_count_values($lst)[$item];\n\
    \        if ($count >= $item && $item > $element) {\n            $element = $item;\n\
    \            $frequency = $count;\n        }\n    }\n    return $element > 0 ?\
    \ $element : -1;\n}\n", "    // your code\n    return 0;\n}\n\nvar_dump(search([4,\
    \ 1, 2, 2, 3, 1])); // 2\nvar_dump(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // 3\n\
    var_dump(search([5, 5, 4, 4, 4])); // -1", "\t\n}", "    $res = 0;\n    foreach\
    \ ($lst as $value) {\n        if (count(array_keys($lst, $value)) >= $value &&\
    \ $value > $res) {\n            $res = $value;\n        }\n    }\n    return $res\
    \ ? $res : -1;\n}\n", "    $counts = array_count_values($lst);\n    $max = max($lst);\n\
    \    for ($i = $max; $i > 0; $i--) {\n        if ($counts[$i] >= $i) return $i;\n\
    \    }\n    return -1;\n}\necho search([4, 1, 2, 2, 3, 1]);\necho \"<br>\";\n\
    echo search([1, 2, 2, 3, 3, 3, 4, 4, 4]);\necho \"<br>\";\necho search([5, 5,\
    \ 4, 4, 4]);", "\t$c = count($lst);\n\tfor ($i = 0; $i < $c; $i++) {\n\t\tif ($lst[$i]\
    \ > 0 && array_count_values($lst)[$lst[$i]] >= $lst[$i]) {\n\t\t\treturn $lst[$i];\n\
    \t\t}\n\t}\n\treturn -1;\n}\nprint_r(search([4, 1, 2, 2, 3, 1]));\necho \"\\n\"\
    ;\nprint_r(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\necho \"\\n\";\nprint_r(search([5,\
    \ 5, 4, 4, 4]));\necho \"\\n\";", "    $count = 0;\n    $count2 = 0;\n    $f =\
    \ array_unique($lst);\n    foreach ($f as $k) {\n        foreach ($lst as $v)\
    \ {\n            if ($k == $v) {\n                $count++;\n            }\n \
    \       }\n        if ($count >= $k && $k > $count2) {\n            $count2 =\
    \ $k;\n        }\n        $count = 0;\n    }\n    if ($count2 != 0) {\n      \
    \  return $count2;\n    } else {\n        return -1;\n    }\n}\n", "    foreach($lst\
    \ as $k => $v) {\n        $count = 0;\n        foreach($lst as $i => $j) {\n \
    \           if($v == $j) {\n                $count++;\n            }\n       \
    \ }\n        if($count >= $v) {\n            return $v;\n        }\n    }\n  \
    \  return -1;\n}\necho search([4, 1, 2, 2, 3, 1]);\necho '<br>';\necho search([1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4]);\necho '<br>';\necho search([5, 5, 4, 4, 4]);", " \
    \   $map = array_count_values($lst);\n    foreach ($map as $key => $value) {\n\
    \        if ($key <= $value) {\n            return $key;\n        }\n    }\n \
    \   return -1;\n}\n$lst = [4, 1, 2, 2, 3, 1];\necho search($lst);", "  $max =\
    \ 0;\n  foreach ($lst as $k => $v) {\n    if (count(array_keys($lst, $v)) >= $v\
    \ && $v > $max) {\n      $max = $v;\n    }\n  }\n  return $max > 0 ? $max : -1;\n\
    }\necho search([4, 1, 2, 2, 3, 1]); // 2\necho \"\\n\";\necho search([1, 2, 2,\
    \ 3, 3, 3, 4, 4, 4]); // 3\necho \"\\n\";\necho search([5, 5, 4, 4, 4]); // -1\n\
    echo \"\\n\";\n", "    $freq = array_count_values($lst);\n    $max = max($lst);\n\
    \    for ($i = $max; $i > 0; $i--) {\n        if (isset($freq[$i]) && $freq[$i]\
    \ >= $i) {\n            return $i;\n        }\n    }\n    return -1;\n}\n", " \
    \   $counts = array_count_values($lst);\n    $counts = array_filter($counts, function($v,\
    \ $k) {\n        return $v >= $k;\n    }, ARRAY_FILTER_USE_BOTH);\n    return\
    \ count($counts) ? max(array_keys($counts)) : -1;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
