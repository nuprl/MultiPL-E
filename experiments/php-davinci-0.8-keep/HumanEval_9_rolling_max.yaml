name: HumanEval_9_rolling_max
language: php
prompt: "<?php\n// From a given list of integers, generate a list of rolling maximum\
  \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
  \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max($numbers) {\n"
tests: "function candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 1))\
  \ !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
  \ 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["  // $result array\n  $result = [];\n  $max = -INF;\n\n  // traverse\
    \ input array\n  foreach ($numbers as $key => $value) {\n    $max = max($max,\
    \ $value);\n    $result[$key] = $max;\n  }\n\n  return $result;\n}", "    $rolling_max\
    \ = [];\n    $max = 0;\n    foreach ($numbers as $number) {\n        if ($number\
    \ > $max) {\n            $max = $number;\n        }\n        $rolling_max[] =\
    \ $max;\n    }\n    return $rolling_max;\n}\n", "    $max_so_far = $numbers[0];\n\
    \    $max_sequence = [$max_so_far];\n    for ($i = 1; $i < count($numbers); $i++)\
    \ {\n        $max_so_far = max($max_so_far, $numbers[$i]);\n        $max_sequence[]\
    \ = $max_so_far;\n    }\n    return $max_sequence;\n}\necho json_encode(rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2]));\n", "    $max = 0;\n    $return_list = [];\n    foreach\
    \ ($numbers as $number) {\n        if ($number > $max) {\n            $max = $number;\n\
    \        }\n        $return_list[] = $max;\n    }\n    return $return_list;\n\
    }\n", "  $maximums = [];\n  $maximum = $numbers[0];\n  for ($i = 0; $i < count($numbers);\
    \ $i++) {\n    $current = $numbers[$i];\n    if ($current > $maximum) {\n    \
    \  $maximum = $current;\n    }\n    $maximums[] = $maximum;\n  }\n  return $maximums;\n\
    }\n", "  $answer = array();\n  $max = NULL;\n  foreach ($numbers as $number) {\n\
    \    if ($max === NULL) {\n      $max = $number;\n    } else {\n      $max = max($max,\
    \ $number);\n    }\n    $answer[] = $max;\n  }\n  return $answer;\n}\n", "  $out\
    \ = [];\n  $currentMax = $numbers[0];\n  $out[] = $currentMax;\n  $length = count($numbers);\n\
    \  for ($i = 1; $i < $length; $i++) {\n    $currentMax = max($currentMax, $numbers[$i]);\n\
    \    $out[] = $currentMax;\n  }\n  return $out;\n}\n$input = [1, 2, 3, 2, 3, 4,\
    \ 2];\n$output = rolling_max($input);\necho implode(', ', $output);", "    $len\
    \ = count($numbers);\n    $max_list = array_fill(0, $len, NULL);\n    $max_list[0]\
    \ = $numbers[0];\n    for ($i = 1; $i < $len; $i++) {\n        $max_list[$i] =\
    \ max($max_list[$i - 1], $numbers[$i]);\n    }\n    return $max_list;\n}\n", " \
    \ $max_so_far = null;\n  $max_current = [];\n  foreach ($numbers as $number) {\n\
    \    if ($max_so_far === null || $number > $max_so_far) {\n      $max_so_far =\
    \ $number;\n    }\n    $max_current[] = $max_so_far;\n  }\n  return $max_current;\n\
    }\n", "    $max = $numbers[0];\n    $result = [];\n    foreach ($numbers as $number)\
    \ {\n        if ($number > $max) {\n            $max = $number;\n        }\n \
    \       $result[] = $max;\n    }\n    return $result;\n}\n", "    $max_so_far\
    \ = $numbers[0];\n    $list = [];\n    for ($i = 0; $i < count($numbers); $i++)\
    \ {\n        $max_so_far = max($max_so_far, $numbers[$i]);\n        $list[] =\
    \ $max_so_far;\n    }\n    return $list;\n}\n\nprint_r(rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2]));", "    $max = null;\n    $result = [];\n    foreach ($numbers as\
    \ $number) {\n        if ($max === null || $number > $max) {\n            $max\
    \ = $number;\n        }\n        $result[] = $max;\n    }\n    return $result;\n\
    }\n", "    // TODO\n}", "  $count = count($numbers);\n  if ($count == 0) {\n \
    \   return [];\n  }\n\n  $result = [];\n  $current_max = $numbers[0];\n  $result[]\
    \ = $current_max;\n  for ($i = 1; $i < $count; $i++) {\n    $current_max = max($current_max,\
    \ $numbers[$i]);\n    $result[] = $current_max;\n  }\n\n  return $result;\n}\n",
  "    $result = [];\n    $max = $numbers[0];\n    foreach ($numbers as $n) {\n  \
    \      $max = max($max, $n);\n        $result[] = $max;\n    }\n    return $result;\n\
    }\n", "    $rolling_max = array();\n    $max = null;\n    foreach ($numbers as\
    \ $number) {\n        if ($max === null || $number > $max) {\n            $max\
    \ = $number;\n        }\n        $rolling_max[] = $max;\n    }\n    return $rolling_max;\n\
    }", "    $length = count($numbers);\n    $result = array();\n    for ($i = 0;\
    \ $i < $length; $i++) {\n        $num = $numbers[$i];\n        $max = $num;\n\
    \        for ($j = $i + 1; $j < $length; $j++) {\n            $next = $numbers[$j];\n\
    \            if ($next > $max) {\n                $max = $next;\n            }\n\
    \        }\n        $result[] = $max;\n    }\n    return $result;\n}\n", "   \
    \ $max = $numbers[0];\n    $result = [];\n    foreach ($numbers as $index => $number)\
    \ {\n        if ($number > $max) {\n            $max = $number;\n        }\n \
    \       $result[$index] = $max;\n    }\n    return $result;\n}\n", "  // $numbers\
    \ = (1, 2, 3, 2, 3, 4, 2)\n  $result = [];\n  // $result = []\n  $max = $numbers[0];\n\
    \  // $max = 1\n  foreach ($numbers as $number) {\n    // $number = 1\n    //\
    \ $number = 2\n    // $number = 3\n    // $number = 2\n    // $number = 3\n  \
    \  // $number = 4\n    // $number = 2\n    if ($number > $max) {\n      // $number\
    \ = 2 is > $max = 1\n      // $number = 3 is > $max = 2\n      // $number = 2\
    \ is not > $max = 3\n      // $number = 3 is not > $max = 3\n      // $number\
    \ = 4 is > $max = 3\n      // $number = 2 is not > $max = 4\n      $max = $number;\n\
    \      // $max = 2\n      // $max = 3\n      // $max = 4\n    }\n    $result[]\
    \ = $max;\n    // $result = [1]\n    // $result = [1, 2]\n    // $result = [1,\
    \ 2, 3]\n    // $result = [1, 2, 3, 3]\n    // $result = [1, 2, 3, 3, 3]\n   \
    \ // $result = [1, 2, 3, 3, 3, 4]\n    // $result = [1, 2, 3, 3, 3, 4, 4]\n  }\n\
    \  return $result;\n  // $result = [1, 2, 3, 3, 3, 4, 4]\n}\nvar_dump(rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2]));", "    $rolling_max = [];\n    $current_max = $numbers[0];\n\
    \    for ($i = 0; $i < count($numbers); $i++) {\n        $current_max = max($current_max,\
    \ $numbers[$i]);\n        $rolling_max[] = $current_max;\n    }\n    return $rolling_max;\n\
    }\n", "  $max = 0;\n  $result = [];\n  foreach ($numbers as $number) {\n    $max\
    \ = max($max, $number);\n    $result[] = $max;\n  }\n  return $result;\n}\n\n\
    assert_options(ASSERT_BAIL, 1);\nassert(rolling_max([1, 2, 3, 2, 3, 4, 2]) ==\
    \ [1, 2, 3, 3, 3, 4, 4]);\nprint \"OK\\n\";", "    $maxes = [];\n    $current_max\
    \ = null;\n    foreach ($numbers as $i => $number) {\n        if ($current_max\
    \ === null || $number > $current_max) {\n            $current_max = $number;\n\
    \        }\n        $maxes[] = $current_max;\n    }\n    return $maxes;\n}\n\n\
    $numbers = [1, 2, 3, 2, 3, 4, 2];\nvar_dump(rolling_max($numbers));", "  $maximum\
    \ = -INF;\n  foreach ($numbers as $n) {\n    $maximum = max($maximum, $n);\n \
    \   yield $maximum;\n  }\n}\n", "    $result = [];\n    $len = count($numbers);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        $value = $numbers[$i];\n       \
    \ $res = [];\n        for ($j = $i; $j < $len; $j++) {\n            $res[] = $numbers[$j];\n\
    \        }\n        $result[] = max($res);\n    }\n    return $result;\n}\n",
  "    $rolling_max = [];\n    $max = 0;\n    foreach ($numbers as $number) {\n  \
    \      if ($number > $max) {\n            $max = $number;\n        }\n       \
    \ $rolling_max[] = $max;\n    }\n    return $rolling_max;\n}\n", "    $max = [];\n\
    \    $max[0] = $numbers[0];\n    for ($i = 1; $i < count($numbers); $i++) {\n\
    \        $max[$i] = max($max[$i - 1], $numbers[$i]);\n    }\n    return $max;\n\
    }\n", "  $rolling_max = [];\n  $max = array_shift($numbers);\n  $rolling_max[]\
    \ = $max;\n  foreach ($numbers as $number) {\n    if ($number >= $max) {\n   \
    \   $max = $number;\n    }\n    $rolling_max[] = $max;\n  }\n  return $rolling_max;\n\
    }\n", "    $len = count($numbers);\n    $result = [];\n    $current_max = $numbers[0];\n\
    \    $result[] = $current_max;\n    for ($i = 1; $i < $len; $i++) {\n        $current_max\
    \ = max($current_max, $numbers[$i]);\n        $result[] = $current_max;\n    }\n\
    \    return $result;\n}\n", "    $arrayLength = count($numbers);\n    $rollingMax\
    \ = array();\n    for ($i = 0; $i < $arrayLength; $i++) {\n        $tempMax =\
    \ array();\n        for ($j = 0; $j <= $i; $j++) {\n            $tempMax[] = $numbers[$j];\n\
    \        }\n        $rollingMax[] = max($tempMax);\n    }\n    return $rollingMax;\n\
    }\n$numbers = array(1, 2, 3, 2, 3, 4, 2);\necho \"input array: \";\nprint_r($numbers);\n\
    echo \"<br>\";\necho \"rolling maximum array: \";\nprint_r(rolling_max($numbers));",
  "  $maximum = [];\n  $maximum_value = NULL;\n  foreach ($numbers as $number) {\n\
    \    if ($maximum_value === NULL || $number > $maximum_value) {\n      $maximum_value\
    \ = $number;\n    }\n    $maximum[] = $maximum_value;\n  }\n  return $maximum;\n\
    }\n\nclass RollingMaximumTest extends \\PHPUnit_Framework_TestCase {\n  public\
    \ function testRollingMaximum() {\n    $this->assertEquals([1, 2, 3, 3, 3, 4,\
    \ 4], rolling_max([1, 2, 3, 2, 3, 4, 2]));\n  }\n}", "    $result = [];\n    $current_max\
    \ = null;\n    foreach ($numbers as $number) {\n        if ($current_max === null\
    \ || $number > $current_max) {\n            $current_max = $number;\n        }\n\
    \        $result[] = $current_max;\n    }\n    return $result;\n}\n\n$stdin =\
    \ fopen(\"php://stdin\", \"r\");\n\nfscanf($stdin, \"%d\\n\", $n);\n\nfscanf($stdin,\
    \ \"%[^\\n]\", $arr_temp);\n\n$arr = array_map('intval', preg_split('/ /', $arr_temp,\
    \ -1, PREG_SPLIT_NO_EMPTY));\n\n$result = rolling_max($arr);\n\nfwrite(STDOUT,\
    \ implode(\" \", $result) . \"\\n\");\n\nfclose($stdin);", "    $max = [];\n \
    \   $cur_max = -1;\n    foreach ($numbers as $number) {\n        if ($number >\
    \ $cur_max) {\n            $cur_max = $number;\n        }\n        $max[] = $cur_max;\n\
    \    }\n    return $max;\n}\n", "    $max = 0;\n    $maxes = [];\n    foreach\
    \ ($numbers as $number) {\n        if ($number > $max) {\n            $max = $number;\n\
    \        }\n        $maxes[] = $max;\n    }\n    return $maxes;\n}\n", "    $result\
    \ = [];\n    $max = NULL;\n    foreach ($numbers as $number) {\n        if ($max\
    \ === NULL || $number > $max) {\n            $max = $number;\n        }\n    \
    \    $result[] = $max;\n    }\n    return $result;\n}\n\n$input = [1, 2, 3, 2,\
    \ 3, 4, 2];\n$result = rolling_max($input);\nassert(array_equal($result, [1, 2,\
    \ 3, 3, 3, 4, 4]));\n\n$input = [7, 2, 5, 4, 1, 9, 5, 4, 6, 2, 5, 4, 3, 2, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 2, 3, 4, 5, 6, 7, 9, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3,\
    \ 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5,\
    \ 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3,\
    \ 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5,\
    \ 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3,\
    \ 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5,\
    \ 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2, 5, 4, 3, 2,", "  $max = 0;\n  $output\
    \ = [];\n  foreach ($numbers as $number) {\n    $max = max($max, $number);\n \
    \   $output[] = $max;\n  }\n  return $output;\n}\n", "  $max = $numbers[0];\n\
    \  $rolling_max_list = [$max];\n  for ($i = 1; $i < count($numbers); $i++) {\n\
    \    $max = max($max, $numbers[$i]);\n    $rolling_max_list[] = $max;\n  }\n \
    \ return $rolling_max_list;\n}\n", "    $max = 0;\n    $maxes = [];\n    foreach\
    \ ($numbers as $number) {\n        if ($number > $max) {\n            $max = $number;\n\
    \        }\n        $maxes[] = $max;\n    }\n    return $maxes;\n}\n\necho implode(',\
    \ ', rolling_max([1, 2, 3, 2, 3, 4, 2]));", "    $max = [];\n    for ($i = 0;\
    \ $i < count($numbers); $i++) {\n        if ($i === 0) {\n            $max[$i]\
    \ = $numbers[$i];\n        } elseif ($numbers[$i] > $max[$i - 1]) {\n        \
    \    $max[$i] = $numbers[$i];\n        } else {\n            $max[$i] = $max[$i\
    \ - 1];\n        }\n    }\n    return $max;\n}\n", "  $max = [];\n  for ($i =\
    \ 0; $i < count($numbers); $i++) {\n    $max[$i] = $numbers[$i];\n    for ($j\
    \ = 0; $j < $i; $j++) {\n      if ($numbers[$j] > $max[$i]) {\n        $max[$i]\
    \ = $numbers[$j];\n      }\n    }\n  }\n  return $max;\n}\n", "    $max = -INF;\n\
    \    $result = [];\n    foreach ($numbers as $number) {\n        $max = max($max,\
    \ $number);\n        $result[] = $max;\n    }\n    return $result;\n}\n\nvar_dump(rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2]));", "  $numbers_count = count($numbers);\n  $max_numbers\
    \ = [];\n  for ($i = 0; $i < $numbers_count; $i++) {\n    $current_max = $numbers[$i];\n\
    \    for ($j = $i + 1; $j < $numbers_count; $j++) {\n      if ($numbers[$j] >\
    \ $current_max) {\n        $current_max = $numbers[$j];\n      }\n    }\n    $max_numbers[]\
    \ = $current_max;\n  }\n  return $max_numbers;\n}\n", "    $output = array();\n\
    \    $current_max = $numbers[0];\n    for ($i = 0; $i < count($numbers); $i++)\
    \ {\n        $current_max = max($current_max, $numbers[$i]);\n        $output[]\
    \ = $current_max;\n    }\n    return $output;\n}\n\nassert_options(ASSERT_BAIL,\
    \ 1);\nassert(rolling_max(array(1, 2, 3, 2, 3, 4, 2)) == array(1, 2, 3, 3, 3,\
    \ 4, 4));\necho \"All assertions passed\\n\";", "    $max = null;\n    $result\
    \ = [];\n    foreach ($numbers as $number) {\n        if ($max === null || $number\
    \ > $max) {\n            $max = $number;\n        }\n        $result[] = $max;\n\
    \    }\n    return $result;\n}\n", "    $maximums = [];\n    foreach ($numbers\
    \ as $index => $value) {\n        $maximums[$index] = max(array_slice($numbers,\
    \ 0, $index + 1));\n    }\n    return $maximums;\n}\n", "    $max_element = 0;\n\
    \    $max_elements = [];\n    foreach ($numbers as $number) {\n        if ($number\
    \ > $max_element) {\n            $max_element = $number;\n        }\n        $max_elements[]\
    \ = $max_element;\n    }\n    return $max_elements;\n}\n", "    $result = [];\n\
    \    foreach ($numbers as $i => $num) {\n        $currentMax = null;\n       \
    \ for ($j = 0; $j <= $i; $j++) {\n            if ($currentMax === null || $numbers[$j]\
    \ > $currentMax) {\n                $currentMax = $numbers[$j];\n            }\n\
    \        }\n        $result[] = $currentMax;\n    }\n    return $result;\n}\n",
  "    $max = $numbers[0];\n    $acc = [];\n    $acc[] = $max;\n    for ($i = 1; $i\
    \ < count($numbers); $i++) {\n        $max = max($max, $numbers[$i]);\n      \
    \  $acc[] = $max;\n    }\n    return $acc;\n}\n\nassert_options(ASSERT_BAIL, 1);\n\
    assert(rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]);\nassert(rolling_max([])\
    \ == []);\nassert(rolling_max([1]) == [1]);\nassert(rolling_max([1, 2]) == [1,\
    \ 2]);\nassert(rolling_max([2, 1]) == [2, 2]);\nassert(rolling_max([1, 2, 1])\
    \ == [1, 2, 2]);\n\necho \"OK\\n\";", "    $rolling_max = array();\n    $rolling_max[]\
    \ = $numbers[0];\n    for ($i = 1; $i < count($numbers); $i++) {\n        $rolling_max[]\
    \ = max($rolling_max[$i - 1], $numbers[$i]);\n    }\n    return $rolling_max;\n\
    }\n", "  // precompute the maximum for first item in the sequence\n  $len = count($numbers);\n\
    \  $maxes = array($numbers[0]);\n  // Next, iterate over the rest of the list,\
    \ and see if the current number is\n  // greater than the current maximum. If\
    \ it is, replace the maximum with this\n  // new value. Otherwise, leave the maximum\
    \ as is. Append the maximum to the\n  // list of maxima.\n  for ($i = 1; $i <\
    \ $len; $i++) {\n    $maxes[] = max($maxes[$i - 1], $numbers[$i]);\n  }\n  return\
    \ $maxes;\n}\n", "    $result = [];\n    $running_max = null;\n    foreach ($numbers\
    \ as $number) {\n        if ($running_max === null || $number > $running_max)\
    \ {\n            $running_max = $number;\n        }\n        $result[] = $running_max;\n\
    \    }\n    return $result;\n}\n", "    $result = array();\n    $rolling_max =\
    \ 0;\n    foreach ($numbers as $number) {\n        $rolling_max = max($rolling_max,\
    \ $number);\n        $result[] = $rolling_max;\n    }\n    return $result;\n}\n\
    \n$test = array(1, 2, 3, 2, 3, 4, 2);\nprint_r(rolling_max($test));", "    $rolling_max\
    \ = array();\n    $max = 0;\n    for ($i = 0; $i < count($numbers); $i++) {\n\
    \        $max = $numbers[$i] > $max ? $numbers[$i] : $max;\n        $rolling_max[]\
    \ = $max;\n    }\n    return $rolling_max;\n}\n\n$numbers = array(1, 2, 3, 2,\
    \ 3, 4, 2);\n$rolling_max = rolling_max($numbers);\nforeach ($rolling_max as $num)\
    \ {\n    print \"$num \";\n}\nprint \"\\n\";", "    $count = count($numbers);\n\
    \    $max = $numbers[0];\n    $results = [];\n    for ($i = 0; $i < $count; $i++)\
    \ {\n        $results[] = $max;\n        if ($numbers[$i] > $max) {\n        \
    \    $max = $numbers[$i];\n        }\n    }\n    return $results;\n}\n", "   \
    \ $result = array();\n    $count = count($numbers);\n    $result[0] = $numbers[0];\n\
    \    for ($i = 1; $i < $count; $i++) {\n        $result[$i] = max($result[$i -\
    \ 1], $numbers[$i]);\n    }\n    return $result;\n}\n", "    // Write your code\
    \ here...\n}\n```\n", "    $index = 0;\n    $max_sofar = 0;\n    $solutions =\
    \ [];\n    while ($index < count($numbers)) {\n        $n = $numbers[$index];\n\
    \        if ($n > $max_sofar) {\n            $max_sofar = $n;\n        }\n   \
    \     $solutions[] = $max_sofar;\n        $index++;\n    }\n    return $solutions;\n\
    }\n\nprint_r(rolling_max([1, 2, 3, 2, 3, 4, 2]));", "  $maxes = array();\n  $maxes[]\
    \ = $numbers[0];\n  $max = $numbers[0];\n  foreach ($numbers as $number) {\n \
    \   if ($number > $max) {\n      $max = $number;\n    }\n    $maxes[] = $max;\n\
    \  }\n  return $maxes;\n}\n", "    $len = count($numbers);\n    $result = [];\n\
    \    $result[0] = $numbers[0];\n    for ($i = 1; $i < $len; $i++) {\n        $result[$i]\
    \ = max($result[$i - 1], $numbers[$i]);\n    }\n    return $result;\n}\n", " \
    \ $results = [];\n  $maximum = $numbers[0];\n  foreach ($numbers as $number) {\n\
    \    $maximum = max($maximum, $number);\n    $results[] = $maximum;\n  }\n  return\
    \ $results;\n}", "    $result = [];\n    $max = $numbers[0];\n    foreach ($numbers\
    \ as $num) {\n        if ($num > $max) {\n            $max = $num;\n        }\n\
    \        $result[] = $max;\n    }\n    return $result;\n}\n\nprint_r(rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2]));", "    $rolling_max = [];\n    $max = null;\n    foreach\
    \ ($numbers as $number) {\n        if (is_null($max) || $number > $max) {\n  \
    \          $max = $number;\n        }\n        $rolling_max[] = $max;\n    }\n\
    \    return $rolling_max;\n}\n\nprint_r(rolling_max([1, 2, 3, 2, 3, 4, 2]));\n",
  "    $max_values = [];\n    $current_max = null;\n    foreach ($numbers as $number)\
    \ {\n        if ($current_max === null || $number > $current_max) {\n        \
    \    $current_max = $number;\n        }\n        $max_values[] = $current_max;\n\
    \    }\n    return $max_values;\n}\n", "    $rolls = [];\n    $roll = 0;\n   \
    \ for ($i = 0; $i < count($numbers); $i++) {\n        if ($numbers[$i] > $roll)\
    \ {\n            $roll = $numbers[$i];\n        }\n        $rolls[] = $roll;\n\
    \    }\n    return $rolls;\n}\n", "    $output = array();\n    $max_until_now\
    \ = PHP_INT_MIN;\n    foreach ($numbers as $number) {\n        $max_until_now\
    \ = max($max_until_now, $number);\n        $output[] = $max_until_now;\n    }\n\
    \    return $output;\n}\n", "  $result = [];\n  $currentMax = 0;\n  foreach ($numbers\
    \ as $number) {\n    if ($number > $currentMax) {\n      $currentMax = $number;\n\
    \    }\n    $result[] = $currentMax;\n  }\n  return $result;\n}\n\n$numbers =\
    \ [1, 2, 3, 2, 3, 4, 2];\nprint_r(rolling_max($numbers));", "    $max = [];\n\
    \    $max[0] = $numbers[0];\n    for ($i = 1; $i < count($numbers); $i++) {\n\
    \        $max[$i] = max($max[$i - 1], $numbers[$i]);\n    }\n    return $max;\n\
    }\n", "    $rolling_max = array();\n    $max = $numbers[0];\n    $rolling_max[]\
    \ = $max;\n    $size = count($numbers);\n    for ($i = 1; $i < $size; $i++) {\n\
    \        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n      \
    \  }\n        $rolling_max[] = $max;\n    }\n    return $rolling_max;\n}\n", " \
    \ $p = count($numbers);\n  $result = array();\n  for ($i = 0; $i < $p; $i++) {\n\
    \    $largest = $numbers[$i];\n    for ($j = 0; $j <= $i; $j++) {\n      if ($numbers[$j]\
    \ > $largest) {\n        $largest = $numbers[$j];\n      }\n    }\n    $result[]\
    \ = $largest;\n  }\n  return $result;\n}\n", "    $result = [];\n    $max = $numbers[0];\n\
    \    foreach ($numbers as $number) {\n        if ($number > $max) {\n        \
    \    $max = $number;\n        }\n        $result[] = $max;\n    }\n    return\
    \ $result;\n}\n\nvar_dump(rolling_max([1, 2, 3, 2, 3, 4, 2]));", "    $max = $numbers[0];\n\
    \    $rolling_max = [$max];\n    $n = count($numbers);\n    for ($i = 1; $i <\
    \ $n; $i++) {\n        $num = $numbers[$i];\n        if ($num > $max) {\n    \
    \        $max = $num;\n        }\n        $rolling_max[] = $max;\n    }\n    return\
    \ $rolling_max;\n}", "    $maxes = array();\n    $max = null;\n    foreach ($numbers\
    \ as $number) {\n        if ($max === null || $number > $max) {\n            $max\
    \ = $number;\n        }\n        $maxes[] = $max;\n    }\n    return $maxes;\n\
    }", "    $max_seen = [];\n    $max = PHP_INT_MIN;\n    foreach ($numbers as $number)\
    \ {\n        if ($number > $max) {\n            $max = $number;\n        }\n \
    \       $max_seen[] = $max;\n    }\n    return $max_seen;\n}\n", "    $ret = array();\n\
    \    $cur = $numbers[0];\n    $ret[] = $cur;\n    for ($i = 1; $i < count($numbers);\
    \ $i++) {\n        if ($numbers[$i] > $cur) {\n            $cur = $numbers[$i];\n\
    \        }\n        $ret[] = $cur;\n    }\n    return $ret;\n}\n$res = rolling_max(array(1,\
    \ 2, 3, 2, 3, 4, 2));\nprint_r($res);", "    $result = [];\n    $max = null;\n\
    \    foreach ($numbers as $number) {\n        if ($max === null || $number > $max)\
    \ {\n            $max = $number;\n        }\n        $result[] = $max;\n    }\n\
    \    return $result;\n}\n\nprint_r(rolling_max([1, 2, 3, 2, 3, 4, 2]));\n", " \
    \   $result = array();\n    $current_max = $numbers[0];\n    foreach ($numbers\
    \ as $number) {\n        if ($number > $current_max) {\n            $current_max\
    \ = $number;\n        }\n        $result[] = $current_max;\n    }\n    return\
    \ $result;\n}\n\n$numbers = array(1, 2, 3, 2, 3, 4, 2);\nprint_r(rolling_max($numbers));",
  "    $output = [];\n    $max = PHP_INT_MIN;\n    foreach ($numbers as $number) {\n\
    \        $max = max($max, $number);\n        $output[] = $max;\n    }\n    return\
    \ $output;\n}\n\n$input = [1, 2, 3, 2, 3, 4, 2];\n$expected_output = [1, 2, 3,\
    \ 3, 3, 4, 4];\nassert(rolling_max($input) === $expected_output);\n\necho \"DONE\\\
    n\";", "    $maximums = [];\n    $current_max = null;\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        $number = $numbers[$i];\n        if ($current_max === null\
    \ || $number > $current_max) {\n            $current_max = $number;\n        }\n\
    \        $maximums[] = $current_max;\n    }\n    return $maximums;\n}\n\n$input\
    \ = trim(fgets(STDIN));\n$numbers = explode(' ', $input);\necho implode(' ', rolling_max($numbers))\
    \ . PHP_EOL;", "    $result = [];\n    $max = $numbers[0];\n    for ($i = 0; $i\
    \ < count($numbers); $i++) {\n        $max = max($max, $numbers[$i]);\n      \
    \  $result[] = $max;\n    }\n    return $result;\n}\n", "  $max = 0;\n  $result\
    \ = [];\n  foreach ($numbers as $n) {\n    $max = max($max, $n);\n    $result[]\
    \ = $max;\n  }\n  return $result;\n}\n$result = rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2]);\necho implode(' ', $result) . \"\\n\";", "  $result = [];\n  $max = $numbers[0];\n\
    \  $result[] = $max;\n  for ($i = 1; $i < count($numbers); $i++) {\n    if ($numbers[$i]\
    \ > $max) {\n      $max = $numbers[$i];\n    }\n    $result[] = $max;\n  }\n \
    \ return $result;\n}\n", "    $result = [];\n    $max = $numbers[0];\n    $result[]\
    \ = $max;\n    for ($i = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i]\
    \ > $max) {\n            $max = $numbers[$i];\n        }\n        $result[] =\
    \ $max;\n    }\n    return $result;\n}\n\n$numbers = [1, 2, 3, 2, 3, 4, 2];\n\
    var_dump(rolling_max($numbers));", "    $result = [];\n    $result[] = $numbers[0];\n\
    \    for ($i = 1; $i < count($numbers); $i++) {\n        $result[] = max($result[$i\
    \ - 1], $numbers[$i]);\n    }\n    return $result;\n}\n\n$my_array = [1, 2, 3,\
    \ 2, 3, 4, 2];\nprint_r(rolling_max($my_array));", "    $max = NULL;\n    $max_list\
    \ = [];\n    foreach ($numbers as $number) {\n        if ($max === NULL || $number\
    \ > $max) {\n            $max = $number;\n        }\n        $max_list[] = $max;\n\
    \    }\n    return $max_list;\n}\n\necho implode(', ', rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2]));", "    $length = count($numbers);\n    $max = [];\n    $max_number\
    \ = $numbers[0];\n    $max[] = $max_number;\n    for ($i = 1; $i < $length; $i++)\
    \ {\n        if ($numbers[$i] > $max_number) {\n            $max_number = $numbers[$i];\n\
    \        }\n        $max[] = $max_number;\n    }\n    return $max;\n}\n", "  \
    \  $result = [];\n    $max = null;\n    foreach ($numbers as $number) {\n    \
    \    if (is_null($max) || $number > $max) {\n            $max = $number;\n   \
    \     }\n        $result[] = $max;\n    }\n    return $result;\n}\n", "    $ans\
    \ = [];\n    $max = $numbers[0];\n    $ans[] = $max;\n    for ($i = 1; $i < count($numbers);\
    \ $i++) {\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n\
    \        }\n        $ans[] = $max;\n    }\n    return $ans;\n}\n", "    $result\
    \ = array();\n    $max = null;\n    foreach ($numbers as $n) {\n        if ($max\
    \ === null || $n > $max) {\n            $max = $n;\n        }\n        $result[]\
    \ = $max;\n    }\n    return $result;\n}", "    $result = [];\n    $max = -INF;\n\
    \    foreach ($numbers as $number) {\n        $max = max($max, $number);\n   \
    \     $result[] = $max;\n    }\n    return $result;\n}\n$fptr = fopen(getenv(\"\
    OUTPUT_PATH\"), \"w\");\n$stdin = fopen(\"php://stdin\", \"r\");\nfscanf($stdin,\
    \ \"%d\\n\", $n);\nfscanf($stdin, \"%[^\\n]\", $arr_temp);\n$arr = array_map('intval',\
    \ preg_split('/ /', $arr_temp, -1, PREG_SPLIT_NO_EMPTY));\n$result = rolling_max($arr);\n\
    fwrite($fptr, implode(\" \", $result) . \"\\n\");\nfclose($stdin);\nfclose($fptr);",
  "  $maxs = [];\n  $max = $numbers[0];\n  foreach ($numbers as $number) {\n    if\
    \ ($number > $max) {\n      $max = $number;\n    }\n    $maxs[] = $max;\n  }\n\
    \  return $maxs;\n}\n", "    // TODO: Implement me!\n}\n", "    // Do a suffix\
    \ max scan\n    $max = 0;\n    $maxes = [];\n    for ($i = count($numbers) - 1;\
    \ $i >= 0; $i--) {\n        $max = max($max, $numbers[$i]);\n        $maxes[$i]\
    \ = $max;\n    }\n    return $maxes;\n}\n\nvar_dump(rolling_max([1, 2, 3, 2, 3,\
    \ 4, 2]));", "  $size = count($numbers);\n  $result = [];\n  for ($i = 0; $i <\
    \ $size; $i++) {\n    $result[$i] = max(array_slice($numbers, 0, $i + 1));\n \
    \ }\n  return $result;\n}", "    $max = $numbers[0];\n    $max_by_number = [$max];\n\
    \    for ($i = 1; $i < count($numbers); $i++) {\n        $number = $numbers[$i];\n\
    \        if ($number > $max) {\n            $max = $number;\n        }\n     \
    \   $max_by_number[] = $max;\n    }\n    return $max_by_number;\n}\n", "    //\
    \ algorithm 1\n    $new_numbers = [];\n    $new_numbers[] = $numbers[0];\n   \
    \ for ($i = 1; $i < count($numbers); $i++) {\n        $new_numbers[] = max($new_numbers[$i\
    \ - 1], $numbers[$i]);\n    }\n    return $new_numbers;\n}", "    $result = [];\n\
    \    $max_element = $numbers[0];\n    foreach ($numbers as $element) {\n     \
    \   if ($element > $max_element) {\n            $max_element = $element;\n   \
    \     }\n        $result[] = $max_element;\n    }\n    return $result;\n}\n",
  "  $output = [];\n  $running_max = null;\n  foreach ($numbers as $number) {\n  \
    \  if ($running_max === null || $number > $running_max) {\n      $running_max\
    \ = $number;\n    }\n    $output[] = $running_max;\n  }\n  return $output;\n}\n",
  "  $count = count($numbers);\n  $result = [];\n  for ($i = 0; $i < $count; $i++)\
    \ {\n    $current_max = $numbers[$i];\n    for ($j = $i; $j < $count; $j++) {\n\
    \      if ($numbers[$j] > $current_max) {\n        $current_max = $numbers[$j];\n\
    \      }\n    }\n    $result[] = $current_max;\n  }\n  return $result;\n}\n",
  "    $output = [];\n    $max = null;\n    foreach ($numbers as $number) {\n    \
    \    if (is_null($max) || $number > $max) {\n            $max = $number;\n   \
    \     }\n        $output[] = $max;\n    }\n    return $output;\n}\n", "    //\
    \ Create a list with all elements equal to the first element in given numbers\n\
    \    $solution = array_fill(0, count($numbers), $numbers[0]);\n    // Iterate\
    \ over elements and compare them with current maximum element in the solution\
    \ list.\n    // The maximum element is always the next element in the solution\
    \ array, since we always compare\n    // a greater element from the given numbers\
    \ array.\n    for ($i = 1; $i < count($numbers); $i++) {\n        $solution[$i]\
    \ = max($solution[$i - 1], $numbers[$i]);\n    }\n    return $solution;\n}\n\n\
    $numbers = array(1, 2, 3, 2, 3, 4, 2);\n$solution = rolling_max($numbers);\nprint_r($solution);",
  "    $result = [];\n    $length = count($numbers);\n    for ($i = 0; $i < $length;\
    \ $i++) {\n        $max = $numbers[$i];\n        for ($j = $i + 1; $j < $length;\
    \ $j++) {\n            if ($numbers[$j] > $max) {\n                $max = $numbers[$j];\n\
    \            }\n        }\n        $result[] = $max;\n    }\n    return $result;\n\
    }\n\n$result = rolling_max([1, 2, 3, 2, 3, 4, 2]);\nprint_r($result);", "    $max\
    \ = $numbers[0];\n    $maxes = [];\n    foreach ($numbers as $n) {\n        if\
    \ ($n > $max) {\n            $max = $n;\n        }\n        $maxes[] = $max;\n\
    \    }\n    return $maxes;\n}\n", "  $maxes = [];\n  $max = $numbers[0];\n  $maxes[]\
    \ = $max;\n  for ($i = 1; $i < count($numbers); $i++) {\n    $max = max($max,\
    \ $numbers[$i]);\n    $maxes[] = $max;\n  }\n  return $maxes;\n}\n", "  $result\
    \ = [];\n  $current_max = -1;\n  foreach ($numbers as $number) {\n    if ($number\
    \ > $current_max) {\n      $current_max = $number;\n    }\n    $result[] = $current_max;\n\
    \  }\n  return $result;\n}\n\nprint_r(rolling_max([1, 2, 3, 2, 3, 4, 2]));\nprint_r(rolling_max([4,\
    \ 2, 1, 2, 3, 4, 5]));\nprint_r(rolling_max([4, 2, 3, 2, 3, 4, 5]));\nprint_r(rolling_max([4,\
    \ 2, 3, 2, 3, 4, 5, 2, 1, 2, 5, 2, 1, 2, 5, 2, 1, 2, 5, 2, 1, 2, 5, 2, 1, 2, 5,\
    \ 2, 1, 2, 5, 2, 1, 2, 5, 2, 1, 2, 5, 2, 1, 2, 5, 2, 1, 2, 5, 2, 1, 2, 5, 2, 1,\
    \ 2, 5, 2, 1, 2, 5, 2, 1, 2, 5, 2, 1, 2, 5, 2, 1, 2, 5, 2, 1, 2, 5, 2, 1, 2, 5,\
    \ 2, 1, 2, 5, 2, 1, 2, 5, 2, 1, 2, 5, 2, 1, 2, 5, 2, 1, 2, 5, 2, 1, 2, 5, 2, 1,\
    \ 2, 5, 2, 1, 2, 5, 2, 1, 2, 5, 2, 1, 2, 5, 2, 1, 2, 5, 2, 1, 2, 5, 2, 1, 2, 5,\
    \ 2, 1, 2, 5, 2, 1, 2, 5, 2, 1, 2, 5, 2, 1, 2, 5, 2, 1, 2, 5, 2, 1, 2, 5, 2, 1,\
    \ 2, 5, 2, 1, 2, 5, 2, 1, 2, 5, 2, 1, 2, 5, 2, 1, 2, 5, 2, 1, 2", "    $result\
    \ = array();\n    $i = 0;\n    $n = count($numbers);\n    $max_until_now = $numbers[0];\n\
    \    while ($i < $n) {\n        $j = $i + 1;\n        while ($j < $n && $numbers[$j]\
    \ <= $max_until_now) {\n            $j += 1;\n        }\n        $max_until_now\
    \ = $numbers[$j - 1];\n        $result[] = $max_until_now;\n        $i = $j;\n\
    \    }\n    return $result;\n}\n\n$numbers = [1, 2, 3, 2, 3, 4, 2];\nprint_r(rolling_max($numbers));",
  "    $rolling_max = array_fill(0, count($numbers), 0);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        if ($i == 0) {\n            $rolling_max[$i] = $numbers[$i];\n\
    \        } else {\n            $rolling_max[$i] = max($rolling_max[$i - 1], $numbers[$i]);\n\
    \        }\n    }\n    return $rolling_max;\n}", "  $result = array();\n  for\
    \ ($i = 0; $i < count($numbers); $i++) {\n    $result[] = max(array_slice($numbers,\
    \ 0, $i + 1));\n  }\n  return $result;\n}\n\n$testcases = array(\n  array(\n \
    \   'numbers' => array(1, 2, 3, 2, 3, 4, 2),\n    'expected' => array(1, 2, 3,\
    \ 3, 3, 4, 4),\n  ),\n  array(\n    'numbers' => array(1, 1, 1, 1, 1, 1, 1),\n\
    \    'expected' => array(1, 1, 1, 1, 1, 1, 1),\n  ),\n  array(\n    'numbers'\
    \ => array(1, 1, 2, 1, 2, 3, 2),\n    'expected' => array(1, 1, 2, 2, 2, 3, 3),\n\
    \  ),\n  array(\n    'numbers' => array(2, 1, 2, 1, 2, 3, 2),\n    'expected'\
    \ => array(2, 2, 2, 2, 2, 3, 3),\n  ),\n  array(\n    'numbers' => array(2, 2,\
    \ 2, 2, 2, 2, 2),\n    'expected' => array(2, 2, 2, 2, 2, 2, 2),\n  ),\n  array(\n\
    \    'numbers' => array(2, 2, 2, 2, 1, 2, 2),\n    'expected' => array(2, 2, 2,\
    \ 2, 2, 2, 2),\n  ),\n  array(\n    'numbers' => array(2, 2, 2, 2, 1, 2, 1),\n\
    \    'expected' => array(2, 2, 2, 2, 2, 2, 2),\n  ),\n  array(\n    'numbers'\
    \ => array(1, 2, 3, 4, 5, 6, 7),\n    'expected' => array(1, 2, 3, 4, 5, 6, 7),\n\
    \  ),\n  array(\n    'numbers' => array(7, 6, 5, 4, 3, 2, 1),\n", "    $result\
    \ = [];\n    $running_max = $numbers[0];\n    foreach ($numbers as $number) {\n\
    \        $running_max = max($running_max, $number);\n        $result[] = $running_max;\n\
    \    }\n    return $result;\n}\n", "  $max_so_far = $numbers[0];\n  $ans = [];\n\
    \  for ($i = 0; $i < count($numbers); $i++) {\n    $n = $numbers[$i];\n    $max_so_far\
    \ = max($max_so_far, $n);\n    $ans[] = $max_so_far;\n  }\n  return $ans;\n}\n",
  "  $max = $numbers[0];\n  $rolling_max = [$max];\n  for ($i = 1; $i < count($numbers);\
    \ $i++) {\n    $max = max($max, $numbers[$i]);\n    $rolling_max[] = $max;\n \
    \ }\n  return $rolling_max;\n}\n", "  // Validate.\n  if (empty($numbers)) {\n\
    \    return array();\n  }\n\n  // Assign first element in the sequence.\n  $max\
    \ = $numbers[0];\n  $rolling = array($max);\n\n  // Iterate through the number\
    \ of numbers in the list.\n  for ($i = 1; $i < count($numbers); $i++) {\n    //\
    \ If the number being looked at is greater than the current maximum value, update\
    \ it.\n    if ($numbers[$i] > $max) {\n      $max = $numbers[$i];\n    }\n\n \
    \   // Append the current maximum value.\n    $rolling[] = $max;\n  }\n\n  return\
    \ $rolling;\n}\n", "    $return = [];\n    $max = null;\n    foreach ($numbers\
    \ as $number) {\n        if ($max === null || $number > $max) {\n            $max\
    \ = $number;\n        }\n        $return[] = $max;\n    }\n    return $return;\n\
    }\n", "    $max = 0;\n    $result = [];\n    foreach ($numbers as $number) {\n\
    \        $max = max($max, $number);\n        $result[] = $max;\n    }\n    return\
    \ $result;\n}\n\nprint_r(rolling_max([1, 2, 3, 2, 3, 4, 2]));", "  $maxes = array();\n\
    \  $current_max = null;\n  foreach ($numbers as $number) {\n    if ($current_max\
    \ === null || $number > $current_max) {\n      $current_max = $number;\n    }\n\
    \    $maxes[] = $current_max;\n  }\n  return $maxes;\n}\n", "  $result = [];\n\
    \  $max    = 0;\n  for ($i = 0; $i < count($numbers); $i++) {\n    $max    = max($max,\
    \ $numbers[$i]);\n    $result = [...$result, $max];\n  }\n  return $result;\n\
    }\n\nprint_r(rolling_max([1, 2, 3, 2, 3, 4, 2]));", "    $len = count($numbers);\n\
    \    $result = [];\n    for ($i = 0; $i < $len; $i++) {\n        $result[] = max(array_slice($numbers,\
    \ 0, $i + 1));\n    }\n    return $result;\n}\n", "  $output = [];\n  $curMax\
    \ = null;\n  foreach ($numbers as $number) {\n    if ($curMax === null || $number\
    \ > $curMax) {\n      $curMax = $number;\n    }\n    $output[] = $curMax;\n  }\n\
    \  return $output;\n}\n", "  $maxes = [];\n  $max = $numbers[0];\n  foreach ($numbers\
    \ as $number) {\n    if ($number > $max) {\n      $max = $number;\n    }\n   \
    \ $maxes[] = $max;\n  }\n  return $maxes;\n}\n", "  $size = count($numbers);\n\
    \  $running_max = array();\n  $current_max = $numbers[0];\n  $running_max[] =\
    \ $current_max;\n  for ($i = 1; $i < $size; $i++) {\n    if ($numbers[$i] > $current_max)\
    \ {\n      $current_max = $numbers[$i];\n    }\n    $running_max[] = $current_max;\n\
    \  }\n  return $running_max;\n}\n", "    $maxes = [];\n    $max = 0;\n    foreach\
    \ ($numbers as $n) {\n        if ($n > $max) {\n            $max = $n;\n     \
    \   }\n        $maxes[] = $max;\n    }\n    return $maxes;\n}\n", "    $result\
    \ = array();\n    $rolling_max = 0;\n    foreach ($numbers as $number) {\n   \
    \     $rolling_max = max($rolling_max, $number);\n        $result[] = $rolling_max;\n\
    \    }\n    return $result;\n}\n", "    $result = array();\n    $max = $numbers[0];\n\
    \    $result[] = $max;\n    for ($i = 1; $i < count($numbers); $i++) {\n     \
    \   if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n        }\n\
    \        $result[] = $max;\n    }\n    return $result;\n}\n", "    $max_number\
    \ = array_shift($numbers);\n    $result = [$max_number];\n    for ($i = 0; $i\
    \ < count($numbers); $i++) {\n        $max_number = max($max_number, $numbers[$i]);\n\
    \        $result[] = $max_number;\n    }\n    return $result;\n}\n\necho implode(',\
    \ ', rolling_max([1, 2, 3, 2, 3, 4, 2]));\necho \"\\n\";\n", "    $len = count($numbers);\n\
    \    if ($len == 0) {\n        return [];\n    }\n    $maxes = [$numbers[0]];\n\
    \    for ($i = 1; $i < $len; $i++) {\n        $maxes[] = max($maxes[$i - 1], $numbers[$i]);\n\
    \    }\n    return $maxes;\n}\n", "    $result = [];\n    $currentMax = $numbers[0];\n\
    \    foreach ($numbers as $num) {\n        if ($num > $currentMax) {\n       \
    \     $currentMax = $num;\n        }\n        $result[] = $currentMax;\n    }\n\
    \    return $result;\n}\n", "    $max = $numbers[0];\n    for ($i = 1; $i < count($numbers);\
    \ $i++) {\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n\
    \        }\n        $numbers[$i] = $max;\n    }\n    return $numbers;\n}\n\necho\
    \ implode(' ', rolling_max([1, 2, 3, 2, 3, 4, 2]));", "  $max = null;\n  $ans\
    \ = [];\n  foreach ($numbers as $number) {\n    if ($max === null || $number >\
    \ $max) {\n      $max = $number;\n    }\n    $ans[] = $max;\n  }\n  return $ans;\n\
    }\n", "  $rolling_maxes = [];\n  $rolling_max = null;\n  foreach ($numbers as\
    \ $number) {\n    if ($rolling_max === null || $number > $rolling_max) {\n   \
    \   $rolling_max = $number;\n    }\n    $rolling_maxes[] = $rolling_max;\n  }\n\
    \  return $rolling_maxes;\n}\n", "  $len = count($numbers);\n  if ($len == 0)\
    \ {\n    return [];\n  }\n  if ($len == 1) {\n    return [$numbers[0]];\n  }\n\
    \  $result = [$numbers[0]];\n  for ($i = 1; $i < $len; $i++) {\n    $result[]\
    \ = max($result[$i - 1], $numbers[$i]);\n  }\n  return $result;\n}\nprint_r(rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2]));", "    $max = null;\n    $result = [];\n    foreach ($numbers\
    \ as $number) {\n        if ($max === null || $number > $max) {\n            $max\
    \ = $number;\n        }\n        $result[] = $max;\n    }\n    return $result;\n\
    }\n\necho '<h1>Test rolling_max()</h1>';\necho '<p>Should be [1, 2, 3, 3, 3, 4,\
    \ 4]: ';\nvar_dump(rolling_max([1, 2, 3, 2, 3, 4, 2]));\n", "    $current_max\
    \ = -INF;\n    $result = [];\n    foreach ($numbers as $number) {\n        $current_max\
    \ = max($current_max, $number);\n        $result[] = $current_max;\n    }\n  \
    \  return $result;\n}\n", "    $result = [];\n    $max = $numbers[0];\n    foreach\
    \ ($numbers as $number) {\n        if ($number > $max) {\n            $max = $number;\n\
    \        }\n        $result[] = $max;\n    }\n    return $result;\n}\n", "   \
    \ $result = [];\n    $max = null;\n    foreach ($numbers as $number) {\n     \
    \   if ($max === null || $number > $max) {\n            $max = $number;\n    \
    \    }\n        $result[] = $max;\n    }\n    return $result;\n}\n\necho implode(\"\
    , \", rolling_max([1, 2, 3, 2, 3, 4, 2]));", "  $result = [];\n  $max = -1;\n\
    \  foreach ($numbers as $num) {\n    if ($num > $max) {\n      $max = $num;\n\
    \    }\n    $result[] = $max;\n  }\n  return $result;\n}\n", "    $maximums =\
    \ [];\n    $max = null;\n    foreach ($numbers as $number) {\n        if ($max\
    \ == null || $number > $max) {\n            $max = $number;\n        }\n     \
    \   $maximums[] = $max;\n    }\n    return $maximums;\n}\n", "    $max = [];\n\
    \    $tmp_max = $numbers[0];\n    for ($i = 0; $i < count($numbers); $i++) {\n\
    \        if ($numbers[$i] > $tmp_max) {\n            $tmp_max = $numbers[$i];\n\
    \        }\n        $max[] = $tmp_max;\n    }\n    return $max;\n}\n", "    $current_max\
    \ = $numbers[0];\n    $result = [$current_max];\n    for ($i = 1; $i < count($numbers);\
    \ $i++) {\n        $number = $numbers[$i];\n        if ($number > $current_max)\
    \ {\n            $current_max = $number;\n        }\n        $result[] = $current_max;\n\
    \    }\n    return $result;\n}\n", "    $window = [];\n    $result = [];\n   \
    \ foreach ($numbers as $num) {\n        while (!empty($window) && $window[0] <\
    \ $num) {\n            array_shift($window);\n        }\n        array_unshift($window,\
    \ $num);\n        $result[] = $window[0];\n    }\n    return $result;\n}\n", " \
    \   $len = count($numbers);\n    $rolling_max = [];\n    $current_max = $numbers[0];\n\
    \    for ($i = 0; $i < $len; $i++) {\n        $current_max = max($current_max,\
    \ $numbers[$i]);\n        $rolling_max[] = $current_max;\n    }\n    return $rolling_max;\n\
    }\n", "    $rolling_max = [];\n    $current_max = null;\n    foreach ($numbers\
    \ as $number) {\n        if (is_null($current_max) || $number > $current_max)\
    \ {\n            $current_max = $number;\n        }\n        $rolling_max[] =\
    \ $current_max;\n    }\n    return $rolling_max;\n}\n", "    $count = count($numbers);\n\
    \    $max = [];\n    for ($i = 0; $i < $count; $i++) {\n        $max[$i] = $numbers[$i];\n\
    \        for ($j = 0; $j < $i; $j++) {\n            if ($numbers[$j] > $max[$i])\
    \ {\n                $max[$i] = $numbers[$j];\n            }\n        }\n    }\n\
    \    return $max;\n}\n\necho implode(', ', rolling_max([1, 2, 3, 2, 3, 4, 2]));",
  "  $max = $numbers[0];\n  $out = [$max];\n  foreach ($numbers as $num) {\n    if\
    \ ($num > $max) {\n      $max = $num;\n    }\n    $out[] = $max;\n  }\n  return\
    \ $out;\n}\n", "    $maxs = [];\n    $max = $numbers[0];\n    for ($i = 0; $i\
    \ < count($numbers); $i++) {\n        $max = max($max, $numbers[$i]);\n      \
    \  $maxs[] = $max;\n    }\n    return $maxs;\n}\n", "  $max_so_far = 0;\n  $length\
    \ = count($numbers);\n  $rolling_max = array();\n  for ($i = 0; $i < $length;\
    \ $i++) {\n    $max_so_far = max($max_so_far, $numbers[$i]);\n    $rolling_max[]\
    \ = $max_so_far;\n  }\n  return $rolling_max;\n}\n\n$numbers = [1, 2, 3, 2, 3,\
    \ 4, 2];\nprint_r(rolling_max($numbers));", "  $result = array();\n  $current_max\
    \ = $numbers[0];\n  $result[] = $current_max;\n  foreach ($numbers as $i => $number)\
    \ {\n    if ($i == 0) {\n      continue;\n    }\n    if ($number > $current_max)\
    \ {\n      $current_max = $number;\n    }\n    $result[] = $current_max;\n  }\n\
    \  return $result;\n}\n", "    $rolling_max = array();\n    $max = 0;\n    for\
    \ ($i = 0; $i < count($numbers); $i++) {\n        $max = max($max, $numbers[$i]);\n\
    \        $rolling_max[] = $max;\n    }\n    return $rolling_max;\n}\n", "    $length\
    \ = count($numbers);\n    $max = array_fill(0, $length, 0);\n    $current_max\
    \ = 0;\n    for ($i = 0; $i < $length; $i++) {\n        $current_max = max($current_max,\
    \ $numbers[$i]);\n        $max[$i] = $current_max;\n    }\n    return $max;\n\
    }\n\n$numbers = [1, 2, 3, 2, 3, 4, 2];\necho implode(', ', rolling_max($numbers));\n\
    echo PHP_EOL;", "    $max_so_far = -PHP_INT_MAX;\n    $rolling_max = [];\n   \
    \ foreach ($numbers as $number) {\n        $max_so_far = max($max_so_far, $number);\n\
    \        $rolling_max[] = $max_so_far;\n    }\n    return $rolling_max;\n}\n",
  "    $max = $numbers[0];\n    $results = [];\n    foreach ($numbers as $num) {\n\
    \        if ($num > $max) {\n            $max = $num;\n        }\n        $results[]\
    \ = $max;\n    }\n    return $results;\n}\n", "    $max_found = [];\n    $current_max\
    \ = null;\n    foreach ($numbers as $n) {\n        if ($current_max === null ||\
    \ $n > $current_max) {\n            $current_max = $n;\n        }\n        $max_found[]\
    \ = $current_max;\n    }\n    return $max_found;\n}\n", "    $roll_max = [];\n\
    \    $max = 0;\n    foreach ($numbers as $number) {\n        if ($number > $max)\
    \ {\n            $max = $number;\n        }\n        $roll_max[] = $max;\n   \
    \ }\n    return $roll_max;\n}\n", "  $maximum = null;\n  foreach ($numbers as\
    \ $number) {\n    if ($maximum === null || $number > $maximum) {\n      $maximum\
    \ = $number;\n    }\n    yield $maximum;\n  }\n}\n\nforeach (rolling_max([1, 2,\
    \ 3, 2, 3, 4, 2]) as $maximum) {\n  print \"$maximum\\n\";\n}", "    $max_number\
    \ = 0;\n    $max_numbers = [];\n    foreach ($numbers as $number) {\n        if\
    \ ($number > $max_number) {\n            $max_number = $number;\n        }\n \
    \       $max_numbers[] = $max_number;\n    }\n    return $max_numbers;\n}\n",
  "    $maxes = [];\n    $max = $numbers[0];\n    foreach ($numbers as $number) {\n\
    \        if ($number > $max) {\n            $max = $number;\n        }\n     \
    \   $maxes[] = $max;\n    }\n    return $maxes;\n}\n", "    $rolling_max = [];\n\
    \    $current_max = $numbers[0];\n    foreach ($numbers as $number) {\n      \
    \  if ($number > $current_max) {\n            $current_max = $number;\n      \
    \  }\n        $rolling_max[] = $current_max;\n    }\n    return $rolling_max;\n\
    }\n", "  $maxes = [];\n  $max = $numbers[0];\n  $maxes[] = $max;\n  for ($i =\
    \ 1; $i < count($numbers); $i++) {\n    $max = max($max, $numbers[$i]);\n    $maxes[]\
    \ = $max;\n  }\n  return $maxes;\n}\n", "    $max = $numbers[0];\n    $res = [$max];\n\
    \    $len = count($numbers);\n    for ($i = 1; $i < $len; $i++) {\n        $max\
    \ = max($max, $numbers[$i]);\n        $res[] = $max;\n    }\n    return $res;\n\
    }\n\necho implode(', ', rolling_max([1, 2, 3, 2, 3, 4, 2]));\necho \"\\n\";\n\
    echo implode(', ', rolling_max([1, 2, 3, 2, 3, 4, 2, 5, 6, 7, 7, 8, 9, 10, 0,\
    \ -1]));\necho \"\\n\";", "    $max = $numbers[0];\n    $rolling_max = [$max];\n\
    \    for ($i = 1; $i < count($numbers); $i++) {\n        $max = max($max, $numbers[$i]);\n\
    \        $rolling_max[] = $max;\n    }\n    return $rolling_max;\n}\n", "  $result\
    \ = [];\n  $max = NULL;\n  foreach ($numbers as $number) {\n    if ($max === NULL\
    \ || $number > $max) {\n      $max = $number;\n    }\n    $result[] = $max;\n\
    \  }\n  return $result;\n}\n$numbers = [1, 2, 3, 2, 3, 4, 2];\necho json_encode(rolling_max($numbers))\
    \ . \"\\n\";", "  $acc = array();\n  $previous = null;\n  foreach ($numbers as\
    \ $number) {\n    if ($previous === null) {\n      $previous = $number;\n    }\
    \ else {\n      $previous = max($previous, $number);\n    }\n    $acc[] = $previous;\n\
    \  }\n  return $acc;\n}", "  $length = count($numbers);\n  if ($length == 0) {\n\
    \    return [];\n  }\n  $result = [$numbers[0]];\n  for ($i = 1; $i < $length;\
    \ $i++) {\n    $prev_max = $result[$i - 1];\n    $current = $numbers[$i];\n  \
    \  $result[] = max($prev_max, $current);\n  }\n  return $result;\n}\n\n$data =\
    \ [\n  [1, 2, 3, 2, 3, 4, 2],\n  []\n];\n\nforeach ($data as $numbers) {\n  echo\
    \ implode(', ', $numbers) . ' => ' . implode(', ', rolling_max($numbers)) . PHP_EOL;\n\
    }", "    $output = [];\n    $max = -1;\n    foreach ($numbers as $number) {\n\
    \        if ($number > $max) {\n            $max = $number;\n        }\n     \
    \   $output[] = $max;\n    }\n    return $output;\n}\n", "    $rolling_max = [];\n\
    \    $max = $numbers[0];\n    $rolling_max[] = $max;\n    $length = count($numbers);\n\
    \    for ($i = 1; $i < $length; $i++) {\n        if ($numbers[$i] > $max) {\n\
    \            $max = $numbers[$i];\n        }\n        $rolling_max[] = $max;\n\
    \    }\n    return $rolling_max;\n}\n", "  $result = [];\n  $max_so_far = -1;\n\
    \  foreach ($numbers as $n) {\n    $max_so_far = max($max_so_far, $n);\n    $result[]\
    \ = $max_so_far;\n  }\n  return $result;\n}\n", "    $max = [];\n    $max[] =\
    \ $numbers[0];\n    for ($i = 1; $i < count($numbers); $i++) {\n        $max[]\
    \ = max($max[$i - 1], $numbers[$i]);\n    }\n    return $max;\n}\n\necho implode(',\
    \ ', rolling_max([1, 2, 3, 2, 3, 4, 2]));", "    $max_values = [];\n    $current_max\
    \ = null;\n    foreach ($numbers as $index => $number) {\n        if ($index ===\
    \ 0) {\n            $current_max = $number;\n        } else {\n            $current_max\
    \ = max($current_max, $number);\n        }\n        $max_values[] = $current_max;\n\
    \    }\n    return $max_values;\n}", "    $result = array();\n    $max = $numbers[0];\n\
    \    $result[] = $max;\n    for ($i = 1; $i < count($numbers); $i++) {\n     \
    \   if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n        }\n\
    \        $result[] = $max;\n    }\n    return $result;\n}\n", "  $max = 0;\n \
    \ $result = [];\n  foreach ($numbers as $value) {\n    $max = max($max, $value);\n\
    \    $result[] = $max;\n  }\n  return $result;\n}\n", "    $max_so_far = $numbers[0];\n\
    \    for ($i = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i] > $max_so_far)\
    \ {\n            $max_so_far = $numbers[$i];\n        }\n        $numbers[$i]\
    \ = $max_so_far;\n    }\n    return $numbers;\n}\n", "    // ...\n}\n", "    $maxes\
    \ = [];\n    $max = $numbers[0];\n    foreach ($numbers as $number) {\n      \
    \  if ($number > $max) {\n            $max = $number;\n        }\n        $maxes[]\
    \ = $max;\n    }\n    return $maxes;\n}\n", "    $result = array();\n    $max\
    \ = PHP_INT_MIN;\n    foreach ($numbers as $number) {\n        $max = max($max,\
    \ $number);\n        $result[] = $max;\n    }\n    return $result;\n}\n", "  \
    \  $result = array();\n    $max    = 0;\n    foreach ($numbers as $number) {\n\
    \        $max = max($max, $number);\n        $result[] = $max;\n    }\n    return\
    \ $result;\n}\n\necho implode(', ', rolling_max([1, 2, 3, 2, 3, 4, 2]));\necho\
    \ \"\\n\";\n", "  $return = [];\n  $max = null;\n  foreach ($numbers as $n) {\n\
    \    if ($max === null || $n > $max) {\n      $max = $n;\n    }\n    $return[]\
    \ = $max;\n  }\n  return $return;\n}\nprint_r(rolling_max([1, 2, 3, 2, 3, 4, 2]));\n",
  "  $current_max = NULL;\n  $rolling_max = [];\n  foreach ($numbers as $number) {\n\
    \    if ($current_max === NULL || $number > $current_max) {\n      $current_max\
    \ = $number;\n    }\n    $rolling_max[] = $current_max;\n  }\n  return $rolling_max;\n\
    }\n", "  $max = $numbers[0];\n  $maxs = [$max];\n  $length = count($numbers);\n\
    \  for ($i = 1; $i < $length; $i++) {\n    $n = $numbers[$i];\n    if ($n >= $max)\
    \ {\n      $max = $n;\n    }\n    $maxs[] = $max;\n  }\n  return $maxs;\n}\n",
  "  $rolling_max = [];\n  $current_max = null;\n  foreach ($numbers as $number) {\n\
    \    if ($current_max === null || $number > $current_max) {\n      $current_max\
    \ = $number;\n    }\n    $rolling_max[] = $current_max;\n  }\n  return $rolling_max;\n\
    }\n", "  $result = [];\n  $max = null;\n  foreach ($numbers as $number) {\n  \
    \  if ($max === null || $number > $max) {\n      $max = $number;\n    }\n    $result[]\
    \ = $max;\n  }\n  return $result;\n}\n", "    $maximum = array();\n    $max =\
    \ -1;\n    foreach ($numbers as $number) {\n        if ($number > $max) {\n  \
    \          $max = $number;\n        }\n        $maximum[] = $max;\n    }\n   \
    \ return $maximum;\n}\n", "    $max = -INF;\n    foreach ($numbers as $number)\
    \ {\n        $max = max($max, $number);\n        $results[] = $max;\n    }\n \
    \   return $results;\n}\n", "  $max_so_far = $numbers[0];\n  for ($i = 1; $i <\
    \ count($numbers); $i++) {\n    $max_so_far = max($max_so_far, $numbers[$i]);\n\
    \    $numbers[$i] = $max_so_far;\n  }\n  return $numbers;\n}\n", "  $max = array_shift($numbers);\n\
    \  $rolling_max = [$max];\n  foreach ($numbers as $number) {\n    $max = max($max,\
    \ $number);\n    $rolling_max[] = $max;\n  }\n  return $rolling_max;\n}\n", " \
    \ $max = -PHP_INT_MAX;\n  $out = [];\n  foreach ($numbers as $number) {\n    $max\
    \ = max($max, $number);\n    $out[] = $max;\n  }\n  return $out;\n}\n", "    $res\
    \ = array_fill(0, count($numbers), null);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = 0; $j <= $i; $j++) {\n            if ($res[$i] ==\
    \ null || $res[$i] < $numbers[$j]) {\n                $res[$i] = $numbers[$j];\n\
    \            }\n        }\n    }\n    return $res;\n}\n", "    $rolling = [];\n\
    \    $max = 0;\n    foreach ($numbers as $i => $number) {\n        if ($number\
    \ > $max) {\n            $max = $number;\n        }\n        $rolling[$i] = $max;\n\
    \    }\n    return $rolling;\n}", "  $result = [];\n  $max_so_far = null;\n  foreach\
    \ ($numbers as $number) {\n    if ($max_so_far === null || $number > $max_so_far)\
    \ {\n      $max_so_far = $number;\n    }\n    $result[] = $max_so_far;\n  }\n\
    \  return $result;\n}\n", "  $rolling_max = [];\n  $max = null;\n  foreach ($numbers\
    \ as $number) {\n    if ($max === null || $number > $max) {\n      $max = $number;\n\
    \    }\n    $rolling_max[] = $max;\n  }\n  return $rolling_max;\n}\nprint_r(rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2]));\nprint_r(rolling_max([1, 2, 3, 2, 3, 4, 2, 6, 8, 7, 4,\
    \ 3, 2, 1]));\nprint_r(rolling_max([6, 8, 7, 4, 3, 2, 1]));\nprint_r(rolling_max([2,\
    \ 3, 2, 3, 4, 2]));\n", "    $max_so_far = $numbers[0];\n    for ($i = 1; $i <\
    \ count($numbers); $i++) {\n        if ($numbers[$i] > $max_so_far) {\n      \
    \      $max_so_far = $numbers[$i];\n        }\n        $numbers[$i] = $max_so_far;\n\
    \    }\n    return $numbers;\n}\n", "    $result = [];\n    $max_value = $numbers[0];\n\
    \    $result[] = $max_value;\n    for ($i = 1; $i < count($numbers); $i++) {\n\
    \        $max_value = max($max_value, $numbers[$i]);\n        $result[] = $max_value;\n\
    \    }\n    return $result;\n}\n", "    $answer = [];\n    $max_so_far = $numbers[0];\n\
    \    foreach ($numbers as $number) {\n        $max_so_far = max($max_so_far, $number);\n\
    \        $answer[] = $max_so_far;\n    }\n    return $answer;\n}\n", "    $max\
    \ = [];\n    $max_so_far = null;\n    foreach ($numbers as $number) {\n      \
    \  if ($max_so_far === null || $number > $max_so_far) {\n            $max_so_far\
    \ = $number;\n        }\n        $max[] = $max_so_far;\n    }\n    return $max;\n\
    }\n\n$a = rolling_max([1, 2, 3, 2, 3, 4, 2]);\nassert($a === [1, 2, 3, 3, 3, 4,\
    \ 4]);\n", "  $rolling = [];\n  $rolling_max = null;\n  foreach ($numbers as $number)\
    \ {\n    if ($rolling_max === null || $number > $rolling_max) {\n      $rolling_max\
    \ = $number;\n    }\n    $rolling[] = $rolling_max;\n  }\n  return $rolling;\n\
    }\n", "    // TODO: Write your code here!\n}\necho \"<b>Assertion tests:</b><br>\"\
    ;\nassert(serialize(rolling_max([1, 2, 3, 2, 3, 4, 2])) == serialize([1, 2, 3,\
    \ 3, 3, 4, 4]));\nassert(serialize(rolling_max([1, 2, 3, 2, 3, 4, 2, 5])) == serialize([1,\
    \ 2, 3, 3, 3, 4, 4, 5]));\nassert(serialize(rolling_max([1, 2, 3, 2, 3, 4, 2,\
    \ 5, 6])) == serialize([1, 2, 3, 3, 3, 4, 4, 5, 6]));\nassert(serialize(rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2, 5, 6, 5])) == serialize([1, 2, 3, 3, 3, 4, 4, 5, 6, 6]));",
  "  $result = [];\n  $max = 0;\n  foreach ($numbers as $number) {\n    $max = max($max,\
    \ $number);\n    $result[] = $max;\n  }\n  return $result;\n}\n\nprint_r(rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2]));", "    $result = [];\n    $current_max = null;\n    foreach\
    \ ($numbers as $number) {\n        if (is_null($current_max) || $number > $current_max)\
    \ {\n            $current_max = $number;\n        }\n        $result[] = $current_max;\n\
    \    }\n    return $result;\n}\n", "    $length = count($numbers);\n    $max =\
    \ $numbers[0];\n    $result = [$max];\n    for ($i = 1; $i < $length; $i++) {\n\
    \        $num = $numbers[$i];\n        if ($num > $max) {\n            $max =\
    \ $num;\n        }\n        $result[] = $max;\n    }\n    return $result;\n}\n\
    \n$numbers = [1, 2, 3, 2, 3, 4, 2];\n$results = rolling_max($numbers);\nprint_r($results);",
  "    $maxes = array();\n    $max = $numbers[0];\n    $maxes[] = $max;\n    for ($i\
    \ = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i] > $max) {\n   \
    \         $max = $numbers[$i];\n        }\n        $maxes[] = $max;\n    }\n \
    \   return $maxes;\n}\n", "  $result = array();\n  $max = 0;\n  for ($i = 0; $i\
    \ < count($numbers); $i++) {\n    $max = max($max, $numbers[$i]);\n    $result[]\
    \ = $max;\n  }\n  return $result;\n}\n", "    $roll_max = [];\n    $i = 0;\n \
    \   while ($i < count($numbers)) {\n        $roll_max[] = max(array_slice($numbers,\
    \ 0, $i + 1));\n        $i++;\n    }\n    return $roll_max;\n}\n\n$numbers = [1,\
    \ 2, 3, 2, 3, 4, 2];\necho implode(', ', rolling_max($numbers));\necho PHP_EOL;",
  "    $result = [];\n    $max_seen = PHP_INT_MIN;\n    foreach ($numbers as $number)\
    \ {\n        $max_seen = max($max_seen, $number);\n        $result[] = $max_seen;\n\
    \    }\n    return $result;\n}\n", "  $maximum = 0;\n  $output = [];\n  foreach\
    \ ($numbers as $n) {\n    $maximum = max($maximum, $n);\n    $output[] = $maximum;\n\
    \  }\n  return $output;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
