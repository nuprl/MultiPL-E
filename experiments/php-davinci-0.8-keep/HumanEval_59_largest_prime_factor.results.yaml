name: HumanEval_59_largest_prime_factor
language: php
results:
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <=\
    \ $n) {\n        if ($n % $i) {\n            $i += 1;\n        } else {\n    \
    \        $n = $n / $i;\n        }\n    }\n    return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    // TODO\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6fxqgh81.php:16\n\
    Stack trace:\n#0 /tmp/tmp6fxqgh81.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp6fxqgh81.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $largest_factor = 1;\n  for ($i =\
    \ 2; $i < $n; $i++) {\n    if ($n % $i == 0) {\n      $largest_factor = $i;\n\
    \      $n /= $i;\n      $i--;\n    }\n  }\n  return $largest_factor;\n}\n\necho\
    \ largest_prime_factor(600851475143);\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1471\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjet82jgv.php:25\n\
    Stack trace:\n#0 /tmp/tmpjet82jgv.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpjet82jgv.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $prime_factors = [];\n  $i = 2;\n\
    \  while ($n > 1) {\n    if ($n % $i == 0) {\n      $prime_factors[] = $i;\n \
    \     $n /= $i;\n    } else {\n      $i++;\n    }\n  }\n  return max($prime_factors);\n\
    }\necho 'largest_prime_factor(13195) = ' . largest_prime_factor(13195) . PHP_EOL;\n\
    echo 'largest_prime_factor(2048) = ' . largest_prime_factor(2048) . PHP_EOL;\n\
    echo 'largest_prime_factor(600851475143) = ' . largest_prime_factor(600851475143)\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "largest_prime_factor(13195) = 29\nlargest_prime_factor(2048) = 2\nlargest_prime_factor(600851475143)\
    \ = 6857\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    for ($i = $n - 1; $i > 1; $i--)\
    \ {\n        if ($n % $i == 0) {\n            if (is_prime($i)) {\n          \
    \      return $i;\n            }\n        }\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpp62o66s7.php:10\nStack trace:\n#0 /tmp/tmpp62o66s7.php(18): largest_prime_factor(15)\n\
    #1 /tmp/tmpp62o66s7.php(22): candidate(15)\n#2 /tmp/tmpp62o66s7.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpp62o66s7.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $p = 2;\n  while (true) {\n    if\
    \ ($n % $p == 0) {\n      $n /= $p;\n    } else {\n      $p += 1;\n    }\n   \
    \ if ($n == 1) {\n      return $p;\n    }\n  }\n}\n\nvar_dump(largest_prime_factor(13195));\n\
    var_dump(largest_prime_factor(2048));\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "int(29)\nint(2)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $p = 2;\n    while ($n > 1) {\n\
    \        while ($n % $p == 0) {\n            $n /= $p;\n        }\n        $p++;\n\
    \    }\n    return $p - 1;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $factor = 1;\n    for ($i = 2;\
    \ $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            $n /= $i;\n    \
    \        $factor = $i;\n        }\n    }\n    return $factor;\n}\necho largest_prime_factor(13195).\"\
    \\n\";\necho largest_prime_factor(2048).\"\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "29\n16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ybvd74p.php:25\n\
    Stack trace:\n#0 /tmp/tmp4ybvd74p.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp4ybvd74p.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $largest_prime_factor = 1;\n  \
    \  // Find all primes <= sqrt(n)\n    $primes = array(2);\n    for ($p = 3; $p\
    \ <= floor(sqrt($n)); $p += 2) {\n        $is_prime = true;\n        for ($i =\
    \ 0; $primes[$i] <= floor(sqrt($p)); $i++) {\n            if ($p % $primes[$i]\
    \ == 0) {\n                $is_prime = false;\n                break;\n      \
    \      }\n        }\n        if ($is_prime) {\n            $primes[] = $p;\n \
    \       }\n    }\n    // Divide n by primes until no primes remain\n    foreach\
    \ ($primes as $p) {\n        while ($n % $p == 0) {\n            $n /= $p;\n \
    \           $largest_prime_factor = $p;\n        }\n    }\n    return $largest_prime_factor;\n\
    }\necho largest_prime_factor(600851475143) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "6857\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp75hseg5r.php:38\n\
    Stack trace:\n#0 /tmp/tmp75hseg5r.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp75hseg5r.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $prime_factors = array();\n   \
    \ $i = 2;\n    while ($n > 1) {\n        if ($n % $i == 0) {\n            array_push($prime_factors,\
    \ $i);\n            $n /= $i;\n        } else {\n            $i++;\n        }\n\
    \    }\n    return max($prime_factors);\n}\nfunction candidate(...$args) {\n \
    \   return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $new_number = $n;\n\
    \  $i = 2;\n  while ($i <= $new_number) {\n    if ($new_number % $i == 0) {\n\
    \      $new_number = $new_number / $i;\n    } else {\n      $i++;\n    }\n  }\n\
    \  return $i;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $lpf = 1;\n    $divisor = 2;\n\
    \    while ($n > 1) {\n        while ($n % $divisor == 0) {\n            $lpf\
    \ = $divisor;\n            $n /= $divisor;\n        }\n        $divisor++;\n \
    \   }\n    return $lpf;\n}\necho largest_prime_factor(600851475143);\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: '6857'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  for ($i = 2; $i <= $n; $i++) {\n\
    \    if ($n % $i == 0) {\n      return largest_prime_factor($n / $i);\n    }\n\
    \  }\n  return $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzeg89n7q.php:21\n\
    Stack trace:\n#0 /tmp/tmpzeg89n7q.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpzeg89n7q.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $f = 2;\n    while($n > 1) {\n\
    \        if ($n % $f == 0) {\n            $n /= $f;\n        } else {\n      \
    \      $f++;\n        }\n    }\n    return $f;\n}\n\nlargest_prime_factor(600851475143);\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    for ($i = floor(sqrt($n)); $i >\
    \ 1; $i--) {\n        if ($n % $i == 0) {\n            // Check if i is prime.\n\
    \            $j = 2;\n            while ($j <= sqrt($i)) {\n                if\
    \ ($i % $j == 0) {\n                    break;\n                }\n          \
    \      $j++;\n            }\n            if ($j == floor(sqrt($i)) + 1) {\n  \
    \              return $i;\n            }\n        }\n    }\n}\n\necho largest_prime_factor(13195).\"\
    \\n\";\necho largest_prime_factor(2048).\"\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "29\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa6d3cv12.php:32\n\
    Stack trace:\n#0 /tmp/tmpa6d3cv12.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpa6d3cv12.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    for ($i = 2; $i <= $n; $i++) {\n\
    \        if ($n % $i == 0) {\n            $n /= $i;\n            $i--;\n     \
    \   }\n    }\n    return $i;\n}\necho largest_prime_factor(13195).\"\\n\";\necho\
    \ largest_prime_factor(2048).\"\\n\";\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "29\n2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    for ($i = 2; $i < $n; $i++) {\n\
    \        if (is_prime($i) && $n % $i == 0) {\n            return $i;\n       \
    \ }\n    }\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmplsic3voi.php:9\nStack trace:\n#0 /tmp/tmplsic3voi.php(16): largest_prime_factor(15)\n\
    #1 /tmp/tmplsic3voi.php(20): candidate(15)\n#2 /tmp/tmplsic3voi.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmplsic3voi.php on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  // The smallest prime number is 2,\
    \ so we can start from there.\n  $i = 2;\n  while ($i < $n) {\n    // If $n is\
    \ divisible by $i, we have found a factor of $n.\n    if ($n % $i == 0) {\n  \
    \    // Divide $n by $i to remove it as a factor.\n      $n /= $i;\n      // Reset\
    \ $i to 2 so that it can check the new number.\n      $i = 2;\n    } else {\n\
    \      // Otherwise, just increase $i by 1.\n      $i++;\n    }\n  }\n  // $i\
    \ is now the largest prime factor of $n.\n  return $i;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    if ($n == 1) {\n        return\
    \ false;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    $largest =\
    \ 0;\n    for ($i = 2; $i < $n; $i++) {\n        if ($n % $i == 0) {\n       \
    \     $factor = true;\n            for ($j = 2; $j < $i; $j++) {\n           \
    \     if ($i % $j == 0) {\n                    $factor = false;\n            \
    \        break;\n                }\n            }\n            if ($factor) {\n\
    \                $largest = $i;\n            }\n        }\n    }\n    return $largest;\n\
    }\n\n$largest_prime_factor = largest_prime_factor(600851475143);\necho $largest_prime_factor\
    \ . \"\\n\";\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $prime = 2;\n    while ($n > $prime)\
    \ {\n        if ($n % $prime == 0) {\n            $n /= $prime;\n        } else\
    \ {\n            $prime++;\n        }\n    }\n    return $prime;\n}\n\nif ($argc\
    \ > 1) {\n    $n = $argv[1];\n    echo largest_prime_factor($n);\n}\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <=\
    \ $n) {\n        if ($n % $i) {\n            $i++;\n        } else {\n       \
    \     $n /= $i;\n        }\n    }\n    return $n;\n}\n\necho largest_prime_factor(13195)\
    \ . PHP_EOL;\necho largest_prime_factor(2048) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "29\n2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  if ($n % 2 == 0) {\n    return largest_prime_factor($n\
    \ / 2);\n  }\n  $factors = array_filter(range(1, $n), function($i) use ($n) {\n\
    \    return $n % $i == 0;\n  });\n  $primes = array_filter($factors, function($i)\
    \ {\n    return is_prime($i);\n  });\n  return max($primes);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpt2zhcaq6.php:15\nStack trace:\n#0 [internal function]: {closure}(1)\n\
    #1 /tmp/tmpt2zhcaq6.php(16): array_filter(Array, Object(Closure))\n#2 /tmp/tmpt2zhcaq6.php(21):\
    \ largest_prime_factor(15)\n#3 /tmp/tmpt2zhcaq6.php(25): candidate(15)\n#4 /tmp/tmpt2zhcaq6.php(32):\
    \ test()\n#5 {main}\n  thrown in /tmp/tmpt2zhcaq6.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $counter = 2;\n  while ($counter\
    \ * $counter <= $n) {\n    if ($n % $counter == 0) {\n      $n /= $counter;\n\
    \    } else {\n      $counter++;\n    }\n  }\n  return $n;\n}\n\necho largest_prime_factor(13195);\n\
    echo \"\\n\";\necho largest_prime_factor(2048);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "29\n2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <=\
    \ $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n\
    \            $i++;\n        }\n    }\n    return $n;\n}\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $m = 1;\n    while ($n % 2 == 0)\
    \ {\n        $m = 2;\n        $n = $n / 2;\n    }\n    for ($i = 3; $i < $n; $i\
    \ += 2) {\n        while ($n % $i == 0) {\n            $m = $i;\n            $n\
    \ = $n / $i;\n        }\n    }\n    if ($n > 2) {\n        $m = $n;\n    }\n \
    \   return $m;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $max = 0;\n    $p = 2;\n    while($n\
    \ >= $p) {\n        if($n % $p == 0) {\n            $max = $p;\n            $n\
    \ /= $p;\n        } else {\n            $p++;\n        }\n    }\n    return $max;\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  // Initialization\n  $factor = 2;\n\
    \  $largest_factor = 1;\n\n  // Loop over all factors between 2 and n\n  while\
    \ ($factor <= $n) {\n    if ($n % $factor == 0) {\n      $largest_factor = $factor;\n\
    \      $n /= $factor;\n    } else {\n      $factor++;\n    }\n  }\n\n  return\
    \ $largest_factor;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $largestPrimeFactor = 0;\n    $i\
    \ = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $n /=\
    \ $i;\n            $largestPrimeFactor = $i;\n        } else {\n            $i++;\n\
    \        }\n    }\n    return $largestPrimeFactor;\n}\n\necho largest_prime_factor(600851475143)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "6857\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  // TODO: Fill this in!\n  return\
    \ $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8allnzgk.php:17\n\
    Stack trace:\n#0 /tmp/tmp8allnzgk.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp8allnzgk.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $divisor = 2;\n  while ($n > 1) {\n\
    \    if ($n % $divisor == 0) {\n      $n /= $divisor;\n    } else {\n      $divisor++;\n\
    \    }\n  }\n  return $divisor;\n}\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <=\
    \ $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n\
    \            $i++;\n        }\n    }\n    return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $largest = 1;\n    for ($i = 2;\
    \ $i < $n; $i++) {\n        if ($n % $i == 0) {\n            if (is_prime($i))\
    \ {\n                $largest = $i;\n            }\n        }\n    }\n    return\
    \ $largest;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2gtu1mpv.php:11\nStack trace:\n#0 /tmp/tmp2gtu1mpv.php(20): largest_prime_factor(15)\n\
    #1 /tmp/tmp2gtu1mpv.php(24): candidate(15)\n#2 /tmp/tmp2gtu1mpv.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmp2gtu1mpv.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    for ($i = 2; $i <= sqrt($n); $i++)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n            $i--;\n \
    \       }\n    }\n    return $n;\n}\n\necho largest_prime_factor(600851475143)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "6857\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $factors = array();\n  for ($i =\
    \ 2; $i < $n / 2; $i++) {\n    if ($n % $i == 0) {\n      $factors[] = $i;\n \
    \   }\n  }\n  $prime_factors = array();\n  foreach ($factors as $f) {\n    $is_prime\
    \ = true;\n    for ($i = 2; $i < $f / 2; $i++) {\n      if ($f % $i == 0) {\n\
    \        $is_prime = false;\n        break;\n      }\n    }\n    if ($is_prime)\
    \ {\n      $prime_factors[] = $f;\n    }\n  }\n  return max($prime_factors);\n\
    }\n\n$result = largest_prime_factor(600851475143);\nvar_dump($result);\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $largest_factor = 1;\n    for ($factor\
    \ = 2; $factor < sqrt($n); $factor++) {\n        if ($n % $factor == 0) {\n  \
    \          $largest_factor = $factor;\n            // Reset n in case the prime\
    \ factor is not prime.\n            $n = $n / $factor;\n        }\n    }\n   \
    \ return $largest_factor;\n}\n\necho largest_prime_factor(600851475143);\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "1471\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzxlagz23.php:25\n\
    Stack trace:\n#0 /tmp/tmpzxlagz23.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpzxlagz23.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $divisor = 2;\n    while ($n >\
    \ 1) {\n        while ($n % $divisor == 0) {\n            $n /= $divisor;\n  \
    \      }\n        $divisor++;\n    }\n    return $divisor - 1;\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $prime_factors = [];\n  for ($i =\
    \ 2; $i < $n; $i++) {\n    if ($n % $i == 0) {\n      $prime_factors[] = $i;\n\
    \    }\n  }\n  return end($prime_factors);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjjhasjwc.php:23\n\
    Stack trace:\n#0 /tmp/tmpjjhasjwc.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjjhasjwc.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i < $n) {\n\
    \        if ($n % $i == 0) {\n            $n = $n / $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\necho largest_prime_factor(600851475143);\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: '6857'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while($i * $i <= $n) {\n\
    \    if ($n % $i == 0) {\n      while ($n % $i == 0) {\n        $n /= $i;\n  \
    \    }\n    }\n    $i++;\n  }\n  if ($n > 1) {\n    return $n;\n  }\n  return\
    \ --$i;\n}\n\necho largest_prime_factor(2048) . \"\\n\";\necho largest_prime_factor(13195)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "2\n29\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  // Write your code here.\n}\n\n$__fp\
    \ = fopen(\"php://stdin\", \"r\");\nfscanf($__fp, \"%d\", $_t_cases);\n\nfor ($_t_i\
    \ = 0; $_t_i < $_t_cases; $_t_i++) {\n  fscanf($__fp, \"%d\", $_n);\n  $_result\
    \ = largest_prime_factor($_n);\n  echo $_result . \"\\n\";\n}\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv0k5lf0v.php:24\n\
    Stack trace:\n#0 /tmp/tmpv0k5lf0v.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpv0k5lf0v.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $p = 2;\n    while ($n != 1) {\n\
    \        while ($n % $p == 0) {\n            $n /= $p;\n        }\n        $p\
    \ += 1;\n    }\n    return $p - 1;\n}\n\necho largest_prime_factor(13195);\necho\
    \ \"\\n\";\necho largest_prime_factor(2048);\necho \"\\n\";\necho largest_prime_factor(600851475143);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "29\n2\n6857\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $prime_factors = array();\n  for\
    \ ($i = 2; $i < $n; $i++) {\n    if ($n % $i == 0) {\n      $prime_factors[] =\
    \ $i;\n    }\n  }\n  return max($prime_factors);\n}\n\n$problems = array(\n  array(\n\
    \    'largest_prime_factor',\n    array(13195),\n    29\n  ),\n  array(\n    'largest_prime_factor',\n\
    \    array(2048),\n    2\n  ),\n);\n\ninclude 'solve.php';\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: include(solve.php): failed to open stream: No such file or directory\
    \ in /tmp/tmpxazozhj2.php on line 30\n\nWarning: include(): Failed opening 'solve.php'\
    \ for inclusion (include_path='.:') in /tmp/tmpxazozhj2.php on line 30\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpxazozhj2.php:37\nStack trace:\n\
    #0 /tmp/tmpxazozhj2.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpxazozhj2.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $factors = [];\n    $prime_factors\
    \ = [];\n    // find factors\n    for ($i = 2; $i <= $n; $i++) {\n        if ($n\
    \ % $i == 0) {\n            $factors[] = $i;\n        }\n    }\n    // find primes\n\
    \    foreach ($factors as $factor) {\n        $prime = true;\n        for ($i\
    \ = 2; $i < $factor; $i++) {\n            if ($factor % $i == 0) {\n         \
    \       $prime = false;\n                break;\n            }\n        }\n  \
    \      if ($prime) {\n            $prime_factors[] = $factor;\n        }\n   \
    \ }\n    return max($prime_factors);\n}\necho largest_prime_factor(600851475143);\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $factors = array();\n    while\
    \ ($n % 2 == 0) {\n        $factors[] = 2;\n        $n /= 2;\n    }\n    for ($p\
    \ = 3; $p <= $n; $p += 2) {\n        while ($n % $p == 0) {\n            $factors[]\
    \ = $p;\n            $n /= $p;\n        }\n    }\n    return max($factors);\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i <= $n) {\n\
    \        if ($n % $i == 0) {\n            $lastFactor = $i;\n            $n /=\
    \ $i;\n            while ($n % $i == 0) {\n                $n /= $i;\n       \
    \     }\n        }\n        $i += 1;\n    }\n    return $lastFactor;\n}\n\necho\
    \ largest_prime_factor(13195).\"\\n\";\necho largest_prime_factor(2048).\"\\n\"\
    ;\necho largest_prime_factor(600851475143).\"\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "29\n2\n6857\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    $limit = sqrt($n);\n\
    \    while ($i <= $limit) {\n        if ($n % $i == 0) {\n            $n /= $i;\n\
    \            $limit = sqrt($n);\n        } else {\n            $i++;\n       \
    \ }\n    }\n    return $n;\n}\necho largest_prime_factor(600851475143) . \"\\\
    n\";\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "6857\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  for ($i = 2; $i <= $n / 2; $i++)\
    \ {\n    if ($n % $i == 0) {\n      return largest_prime_factor($n / $i);\n  \
    \  }\n  }\n  return $n;\n}\necho(largest_prime_factor(13195).\"\\n\");\necho(largest_prime_factor(2048).\"\
    \\n\");\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "29\n2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  if ($n < 2) {\n    return $n;\n \
    \ }\n\n  for ($i = 2; $i <= $n; $i++) {\n    if ($n % $i == 0) {\n      return\
    \ largest_prime_factor($n / $i);\n    }\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpch4ghaeb.php:24\n\
    Stack trace:\n#0 /tmp/tmpch4ghaeb.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpch4ghaeb.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $primes = array(2);\n    $m = $n;\n\
    \    while (1) {\n        $isPrime = true;\n        for ($i = 0; $i < count($primes);\
    \ $i++) {\n            if ($m % $primes[$i] == 0) {\n                $isPrime\
    \ = false;\n                break;\n            }\n        }\n        if ($isPrime)\
    \ {\n            if ($m == $n) {\n                return $m;\n            } else\
    \ {\n                array_push($primes, $m);\n                $m = $n;\n    \
    \        }\n        } else {\n            $m = $m / $primes[$i];\n        }\n\
    \    }\n}\necho \"print the largest prime factor of 600851475143\" . PHP_EOL;\n\
    echo largest_prime_factor(600851475143) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "print the largest prime factor of 600851475143\n600851475143\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpfbbmtp26.php:37\nStack trace:\n\
    #0 /tmp/tmpfbbmtp26.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpfbbmtp26.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <=\
    \ $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n\
    \            $i++;\n        }\n    }\n    return $n;\n}\n\n$max = 600851475143;\n\
    \n$t = microtime(true);\n$n = largest_prime_factor($max);\n$t = microtime(true)\
    \ - $t;\n\necho \"$n\\n\";\necho \"$t sec\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "6857\n5.6982040405273E-5 sec\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    // TODO\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd37ekdqv.php:16\n\
    Stack trace:\n#0 /tmp/tmpd37ekdqv.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpd37ekdqv.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $answer = 1;\n    $prime_factor\
    \ = 2;\n    while ($n > 1) {\n        if ($n % $prime_factor == 0) {\n       \
    \     $answer = $prime_factor;\n            $n /= $prime_factor;\n        } else\
    \ {\n            $prime_factor++;\n        }\n    }\n    return $answer;\n}\n\
    echo largest_prime_factor(13195);\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '29'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $cur = 2;\n    while ($n > 1) {\n\
    \        if ($n % $cur == 0) {\n            $n /= $cur;\n        } else {\n  \
    \          $cur++;\n        }\n    }\n    return $cur;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $lastFactor = 1;\n    if ($n %\
    \ 2 == 0) {\n        $lastFactor = 2;\n        while ($n % 2 == 0) {\n       \
    \     $n = $n / 2;\n        }\n    }\n    for ($factor = 3; $factor * $factor\
    \ <= $n; $factor += 2) {\n        if ($n % $factor == 0) {\n            $lastFactor\
    \ = $factor;\n            while ($n % $factor == 0) {\n                $n = $n\
    \ / $factor;\n            }\n        }\n    }\n    if ($n == 1) {\n        return\
    \ $lastFactor;\n    } else {\n        return $n;\n    }\n}\n\nprint largest_prime_factor(13195)\
    \ . \"\\n\";\nprint largest_prime_factor(2048) . \"\\n\";\nprint largest_prime_factor(600851475143)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "29\n2\n6857\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    if ($n === 2) {\n        return\
    \ 2;\n    }\n\n    $i = 2;\n    while ($i <= $n) {\n        if ($n % $i === 0)\
    \ {\n            $n /= $i;\n        } else {\n            $i++;\n        }\n \
    \   }\n\n    return $i;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $factor = 1;\n  while ($n % 2 ==\
    \ 0) {\n    $factor = 2;\n    $n /= 2;\n  }\n  for ($x = 3; $x < sqrt($n); $x\
    \ += 2) {\n    while ($n % $x == 0) {\n      $factor = $x;\n      $n /= $x;\n\
    \    }\n  }\n  if ($n > 2) {\n    $factor = $n;\n  }\n  return $factor;\n}\n\n\
    echo largest_prime_factor(600851475143) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "6857\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    if (is_prime($n)) return $n;\n\
    \    $i = 2;\n    while ($i < $n) {\n        if ($n % $i == 0) {\n           \
    \ return largest_prime_factor($n / $i);\n        }\n        $i++;\n    }\n}\n\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp81lw3tua.php:8\nStack trace:\n#0 /tmp/tmp81lw3tua.php(19): largest_prime_factor(15)\n\
    #1 /tmp/tmp81lw3tua.php(23): candidate(15)\n#2 /tmp/tmp81lw3tua.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmp81lw3tua.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <=\
    \ $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n\
    \            $i += 1;\n        }\n    }\n    return $n;\n}\n\necho largest_prime_factor(600851475143);\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: '6857'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $p = 2;\n    while ($n > 1) {\n\
    \        while ($n % $p == 0) {\n            $n /= $p;\n        }\n        $p++;\n\
    \    }\n    return $p - 1;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    for ($i = $n; $i > 1; $i--) {\n\
    \        if ($n % $i == 0) {\n            if (is_prime($i)) {\n              \
    \  return $i;\n            }\n        }\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpk3eu9q6e.php:10\nStack trace:\n#0 /tmp/tmpk3eu9q6e.php(18): largest_prime_factor(15)\n\
    #1 /tmp/tmpk3eu9q6e.php(22): candidate(15)\n#2 /tmp/tmpk3eu9q6e.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpk3eu9q6e.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $r = 2;\n  while ($n > 1) {\n   \
    \ if ($n % $r == 0) {\n      $n /= $r;\n    } else {\n      $r++;\n    }\n  }\n\
    \  return $r;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $factors = [];\n  // Find factors\
    \ of $n and save them in $factors.\n  // We only need to search up to sqrt($n)\
    \ because every factor\n  // of $n will have a partner that we can find below\
    \ sqrt($n).\n  for ($i = 2; $i < $n; $i++) {\n    if ($n % $i == 0) {\n      $factors[]\
    \ = $i;\n    }\n  }\n  // Now $factors has all the factors of $n, which are all\
    \ the primes\n  // from 2 up to sqrt($n).\n  // Now search $factors to find the\
    \ largest prime factor.\n  $largest_prime_factor = 0;\n  foreach ($factors as\
    \ $factor) {\n    if (is_prime($factor)) {\n      $largest_prime_factor = $factor;\n\
    \    }\n  }\n  return $largest_prime_factor;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp_i5lwjc7.php:22\nStack trace:\n#0 /tmp/tmp_i5lwjc7.php(30): largest_prime_factor(15)\n\
    #1 /tmp/tmp_i5lwjc7.php(34): candidate(15)\n#2 /tmp/tmp_i5lwjc7.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp_i5lwjc7.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    // Brute force solution.\n    for\
    \ ($i = 2; $i < $n; $i++) {\n        if ($n % $i == 0) {\n            $n /= $i;\n\
    \            $i = 1;\n        }\n    }\n    return $n;\n}\necho \"The largest\
    \ prime factor of 13195 is \" . largest_prime_factor(13195) . \"\\n\";\necho \"\
    The largest prime factor of 2048 is \" . largest_prime_factor(2048) . \"\\n\"\
    ;\necho \"The largest prime factor of 600851475143 is \" . largest_prime_factor(600851475143)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "The largest prime factor of 13195 is 29\nThe largest prime factor of 2048\
    \ is 2\nThe largest prime factor of 600851475143 is 6857\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i < $n) {\n  \
    \  if (is_prime($i) && $n % $i == 0) {\n      return $i;\n    }\n    $i += 1;\n\
    \  }\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpy4rwwalq.php:10\nStack trace:\n#0 /tmp/tmpy4rwwalq.php(18): largest_prime_factor(15)\n\
    #1 /tmp/tmpy4rwwalq.php(22): candidate(15)\n#2 /tmp/tmpy4rwwalq.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpy4rwwalq.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  for ($i = 2; $i < $n; $i++) {\n \
    \   if ($n % $i == 0) {\n      $isPrime = true;\n      for ($j = 2; $j < $i; $j++)\
    \ {\n        if ($i % $j == 0) {\n          $isPrime = false;\n          break;\n\
    \        }\n      }\n      if ($isPrime) {\n        return $i;\n      }\n    }\n\
    \  }\n}\necho largest_prime_factor(13195);\necho \"\\n\";\necho largest_prime_factor(2048);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "5\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpux_wsple.php:32\n\
    Stack trace:\n#0 /tmp/tmpux_wsple.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpux_wsple.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $prime_factors = [];\n    for ($i\
    \ = 2; $i < $n; $i++) {\n        if ($n % $i == 0) {\n            $prime_factors[]\
    \ = $i;\n        }\n    }\n    return $prime_factors[count($prime_factors) - 1];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpee1ek274.php:23\n\
    Stack trace:\n#0 /tmp/tmpee1ek274.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpee1ek274.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $largest_prime_factor = 1;\n  \
    \  $factor = 2;\n    while ($n > 1) {\n        if ($n % $factor == 0) {\n    \
    \        $largest_prime_factor = $factor;\n            $n /= $factor;\n      \
    \  } else {\n            $factor++;\n        }\n    }\n    return $largest_prime_factor;\n\
    }\n\n$n = 13195;\n$start_time = microtime(true);\n$ret = largest_prime_factor($n);\n\
    $end_time = microtime(true);\n$time_elapsed = $end_time - $start_time;\necho \"\
    n = $n, largest prime factor = $ret\\n\";\necho \"Time Elapsed: \" . $time_elapsed\
    \ . \" seconds\\n\";\n\n$n = 2048;\n$start_time = microtime(true);\n$ret = largest_prime_factor($n);\n\
    $end_time = microtime(true);\n$time_elapsed = $end_time - $start_time;\necho \"\
    n = $n, largest prime factor = $ret\\n\";\necho \"Time Elapsed: \" . $time_elapsed\
    \ . \" seconds\\n\";\n\n$n = 600851475143;\n$start_time = microtime(true);\n$ret\
    \ = largest_prime_factor($n);\n$end_time = microtime(true);\n$time_elapsed = $end_time\
    \ - $start_time;\necho \"n = $n, largest prime factor = $ret\\n\";\necho \"Time\
    \ Elapsed: \" . $time_elapsed . \" seconds\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "n = 13195, largest prime factor = 29\nTime Elapsed: 1.215934753418E-5 seconds\n\
    n = 2048, largest prime factor = 2\nTime Elapsed: 0 seconds\nn = 600851475143,\
    \ largest prime factor = 6857\nTime Elapsed: 0.00014686584472656 seconds\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= $n) {\n \
    \   if (is_prime($i) && ($n % $i == 0)) {\n      $n = $n / $i;\n    } else {\n\
    \      $i++;\n    }\n  }\n  return $i;\n}\nfunction candidate(...$args) {\n  \
    \  return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !==\
    \ 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmph2a6uzph.php:10\nStack trace:\n#0 /tmp/tmph2a6uzph.php(19): largest_prime_factor(15)\n\
    #1 /tmp/tmph2a6uzph.php(23): candidate(15)\n#2 /tmp/tmph2a6uzph.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmph2a6uzph.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  for ($p = 2; $p <= sqrt($n); $p++)\
    \ {\n    while (bcmod($n, $p) == 0) $n = bcdiv($n, $p);\n  }\n  return $n;\n}\n\
    \n$n = isset($argv[1]) ? $argv[1] : \"13195\";\n$result = largest_prime_factor($n);\n\
    echo \"$result\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bcmod() in /tmp/tmp_a7248q5.php:9\n\
    Stack trace:\n#0 /tmp/tmp_a7248q5.php(15): largest_prime_factor('13195')\n#1 {main}\n\
    \  thrown in /tmp/tmp_a7248q5.php on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    // fill here\n}\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0gf2cywm.php:15\n\
    Stack trace:\n#0 /tmp/tmp0gf2cywm.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp0gf2cywm.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $r = $n;\n  $i = 2;\n  while ($i\
    \ <= sqrt($n)) {\n    if (fmod($r, $i) == 0) {\n      $r = $r / $i;\n      $p\
    \ = $i;\n    }\n    $i++;\n  }\n  return max($p, $r);\n}\necho largest_prime_factor(13195)\
    \ . PHP_EOL;\necho largest_prime_factor(2048) . PHP_EOL;\necho largest_prime_factor(600851475143)\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "29\n16\n6857\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxkzh6sn7.php:28\n\
    Stack trace:\n#0 /tmp/tmpxkzh6sn7.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpxkzh6sn7.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  return -1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjc_i13xi.php:16\n\
    Stack trace:\n#0 /tmp/tmpjc_i13xi.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpjc_i13xi.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  // factor out 2\n  $n = reduce_to_odd($n);\n\
    \  // factor out 3\n  $n = reduce_to_odd($n);\n  // factor out 5\n  $n = reduce_to_odd($n);\n\
    \  // factor out 7\n  $n = reduce_to_odd($n);\n  // factor out 11\n  $n = reduce_to_odd($n);\n\
    \  // and so on...\n  if ($n == 1) {\n    // we're done\n    return $n;\n  } else\
    \ {\n    // there's still a composite number, so try a higher prime number\n \
    \   // note: we haven't yet tried 13, so try it next\n    return largest_prime_factor($n);\n\
    \  }\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function reduce_to_odd()\
    \ in /tmp/tmpvttksi0g.php:9\nStack trace:\n#0 /tmp/tmpvttksi0g.php(29): largest_prime_factor(15)\n\
    #1 /tmp/tmpvttksi0g.php(33): candidate(15)\n#2 /tmp/tmpvttksi0g.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpvttksi0g.php on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    for ($i = 2; $i <= sqrt($n); $i++)\
    \ {\n        while ($n % $i == 0) {\n            $n /= $i;\n        }\n    }\n\
    \    return $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwiysuhq.php:22\n\
    Stack trace:\n#0 /tmp/tmpgwiysuhq.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpgwiysuhq.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <=\
    \ $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n\
    \            $i++;\n        }\n    }\n    return $n;\n}\n\necho largest_prime_factor(13195);\n\
    echo PHP_EOL;\necho largest_prime_factor(2048);\necho PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "29\n2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <=\
    \ $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n\
    \            $i++;\n        }\n    }\n    return $n;\n}\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <=\
    \ $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n\
    \            $i += 1;\n        }\n    }\n    return $n;\n}\n\nassert(largest_prime_factor(13195)\
    \ == 29);\nassert(largest_prime_factor(2048) == 2);\n\n$n = 600851475143;\necho\
    \ largest_prime_factor($n);\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: '6857'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $primeFactors = [];\n    $p = 2;\n\
    \    while ($n > 1) {\n        while ($n % $p == 0) {\n            $primeFactors[]\
    \ = $p;\n            $n /= $p;\n        }\n        $p++;\n    }\n    return max($primeFactors);\n\
    }\n\necho largest_prime_factor(600851475143);\nfunction candidate(...$args) {\n\
    \    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '6857'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $largest = 1;\n  while ($n % 2 ==\
    \ 0) {\n    $largest = 2;\n    $n /= 2;\n  }\n  for ($i = 3; $i <= $n; $i += 2)\
    \ {\n    while ($n % $i == 0) {\n      $largest = $i;\n      $n /= $i;\n    }\n\
    \  }\n  return $largest;\n}\n\n$n = 13195;\necho largest_prime_factor($n) . \"\
    \\n\";\n$n = 2048;\necho largest_prime_factor($n) . \"\\n\";\n$n = 600851475143;\n\
    echo largest_prime_factor($n) . \"\\n\";\nfunction candidate(...$args) {\n   \
    \ return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !==\
    \ 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "29\n2\n6857\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $prime_factors = array();\n  for\
    \ ($i = 2; $i <= sqrt($n); $i++) {\n    if (is_prime($i) && $n % $i == 0) {\n\
    \      $prime_factors[] = $i;\n    }\n  }\n  return max($prime_factors);\n}\n\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpm1u7go_i.php:10\nStack trace:\n#0 /tmp/tmpm1u7go_i.php(18): largest_prime_factor(15)\n\
    #1 /tmp/tmpm1u7go_i.php(22): candidate(15)\n#2 /tmp/tmpm1u7go_i.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpm1u7go_i.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    // find the largest prime factor\
    \ of $n\n    // first find all prime factors of $n\n    // then return the max\
    \ of the array\n    // if prime factor, then it is not divisible by anything else\
    \ in the array\n    // if not prime factor, then it is divisible by something\
    \ else in the array\n    // so we will filter out the non prime factors\n    \n\
    \    // Find all factors of n\n    $factors = find_factors($n);\n    $primes =\
    \ array();\n    // filter out non prime factors\n    foreach ($factors as $factor)\
    \ {\n        if (count(find_factors($factor)) == 2) {\n            $primes[] =\
    \ $factor;\n        }\n    }\n    // find the largest prime factor\n    return\
    \ max($primes);\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function find_factors()\
    \ in /tmp/tmppvfod10p.php:16\nStack trace:\n#0 /tmp/tmppvfod10p.php(29): largest_prime_factor(15)\n\
    #1 /tmp/tmppvfod10p.php(33): candidate(15)\n#2 /tmp/tmppvfod10p.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmppvfod10p.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while($i < $n) {\n\
    \        if ($n % $i == 0) {\n            return largest_prime_factor($n / $i);\n\
    \        }\n        $i++;\n    }\n    return $n;\n}\n\necho largest_prime_factor(13195);\n\
    echo largest_prime_factor(2048);\n\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '292'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $largest_factor = 0;\n    $max_factor\
    \ = sqrt($n);\n    for ($i = 2; $i <= $max_factor; $i++) {\n        if ($n % $i\
    \ == 0) {\n            $largest_factor = $i;\n            $n /= $i;\n        \
    \    $max_factor = sqrt($n);\n        }\n    }\n    if ($n > 1) {\n        $largest_factor\
    \ = $n;\n    }\n    return $largest_factor;\n}\necho(largest_prime_factor(13195)\
    \ . PHP_EOL);\necho(largest_prime_factor(2048) . PHP_EOL);\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "29\n32\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph937d11g.php:30\n\
    Stack trace:\n#0 /tmp/tmph937d11g.php(36): test()\n#1 {main}\n  thrown in /tmp/tmph937d11g.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    // To start, we will check if the\
    \ number is a prime itself. If it is, we can return it.\n    if(is_prime($n))\
    \ {\n        return $n;\n    }\n    // Next, we start looping from 2 to half the\
    \ size of the number. We do not need to iterate\n    // through all numbers up\
    \ to n, as we are looking for factors. We only need to iterate through\n    //\
    \ the numbers below half of n.\n    for($i = 2; $i <= $n / 2; $i++) {\n      \
    \  // If $i is a factor of n and is prime, we can return it.\n        if($n %\
    \ $i == 0 && is_prime($i)) {\n            return $i;\n        }\n    }\n}\n\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpjs7w4xep.php:9\nStack trace:\n#0 /tmp/tmpjs7w4xep.php(24): largest_prime_factor(15)\n\
    #1 /tmp/tmpjs7w4xep.php(28): candidate(15)\n#2 /tmp/tmpjs7w4xep.php(35): test()\n\
    #3 {main}\n  thrown in /tmp/tmpjs7w4xep.php on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    // Your code here\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptd6pv66u.php:16\n\
    Stack trace:\n#0 /tmp/tmptd6pv66u.php(23): test()\n#1 {main}\n  thrown in /tmp/tmptd6pv66u.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $p = 2;\n  while ($n > 1) {\n   \
    \ while ($n % $p == 0) {\n      $n /= $p;\n    }\n    $p++;\n  }\n  return $p-1;\n\
    }\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $divisor = 2;\n    $last_divisor\
    \ = 1;\n    while ($n > 1) {\n        while ($n % $divisor == 0) {\n         \
    \   $last_divisor = $divisor;\n            $n /= $divisor;\n        }\n      \
    \  $divisor += 1;\n    }\n    return $last_divisor;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $prime_factors = array();\n   \
    \ $primes = array();\n    for ($i = 2; $i <= $n; $i++) {\n        if ($n % $i\
    \ == 0) {\n            array_push($prime_factors, $i);\n            $n = $n /\
    \ $i;\n            $i = 1;\n        }\n    }\n    return max($prime_factors);\n\
    }\n\nprint_r(largest_prime_factor(13195));\nprint_r(largest_prime_factor(2048));\n\
    \nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: '292'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i < $n) {\n\
    \        if ($n % $i == 0) {\n            $n = $n / $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $largest = 1;\n  // factor out 2s\n\
    \  while ($n % 2 == 0) {\n    $largest = 2;\n    $n /= 2;\n  }\n  // factor out\
    \ primes\n  for ($i = 3; $i <= sqrt($n); $i += 2) {\n    while ($n % $i == 0)\
    \ {\n      $largest = $i;\n      $n /= $i;\n    }\n  }\n  // if n is a prime >\
    \ 2, it's its own largest prime factor\n  if ($n > 2) {\n    $largest = $n;\n\
    \  }\n  return $largest;\n}\necho largest_prime_factor(600851475143);\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: '6857'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <=\
    \ $n) {\n        if ($n % $i) {\n            $i++;\n        } else {\n       \
    \     $n /= $i;\n        }\n    }\n    return $n;\n}\n\necho \"The answer is \"\
    \ . largest_prime_factor(600851475143) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "The answer is 6857\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $max_prime = 2;\n  $max_factor =\
    \ sqrt($n);\n  while ($max_prime <= $max_factor) {\n    if ($n % $max_prime ==\
    \ 0) {\n      $n /= $max_prime;\n      $max_factor = sqrt($n);\n    } else {\n\
    \      $max_prime++;\n    }\n  }\n  return $n;\n}\necho largest_prime_factor(600851475143)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "6857\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    if (is_prime($n)) return $n;\n\
    \    for ($i = 2; $i < $n; $i++) {\n        if ($n % $i == 0) return largest_prime_factor($n\
    \ / $i);\n    }\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpk6gqfgrx.php:8\nStack trace:\n#0 /tmp/tmpk6gqfgrx.php(15): largest_prime_factor(15)\n\
    #1 /tmp/tmpk6gqfgrx.php(19): candidate(15)\n#2 /tmp/tmpk6gqfgrx.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpk6gqfgrx.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n$n = 13195;\nprint_r(largest_prime_factor($n));\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: '29'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $largest_prime_factor = 1;\n  \
    \  $i = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $largest_prime_factor\
    \ = $i;\n            $n /= $i;\n        } else {\n            $i++;\n        }\n\
    \    }\n    return $largest_prime_factor;\n}\nfunction candidate(...$args) {\n\
    \    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $factor = 2;\n    while ($n > 1)\
    \ {\n        if ($n % $factor == 0) {\n            $n /= $factor;\n        } else\
    \ {\n            $factor++;\n        }\n    }\n    return $factor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $divisor = 2;\n    while ($n >\
    \ 1) {\n        while ($n % $divisor == 0) {\n            $n /= $divisor;\n  \
    \      }\n        $divisor++;\n    }\n    return $divisor-1;\n}\n\nassert(largest_prime_factor(13195)\
    \ == 29);\nassert(largest_prime_factor(2048) == 2);\nprint_r(largest_prime_factor(600851475143));\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: '6857'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $factor = 2;\n  while ($n > 1) {\n\
    \    if ($n % $factor == 0) {\n      $n /= $factor;\n    } else {\n      $factor\
    \ += 1;\n    }\n  }\n  return $factor;\n}\n\n$expected = 29;\n$n = 13195;\n$output\
    \ = largest_prime_factor($n);\nfwrite(STDOUT, 'Output: ' . $output . PHP_EOL);\n\
    fwrite(STDOUT, 'Expected: ' . $expected . PHP_EOL);\n\n$expected = 2;\n$n = 2048;\n\
    $output = largest_prime_factor($n);\nfwrite(STDOUT, 'Output: ' . $output . PHP_EOL);\n\
    fwrite(STDOUT, 'Expected: ' . $expected . PHP_EOL);\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Output: 29\nExpected: 29\nOutput: 2\nExpected: 2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $count = $n/2;\n    while ($count\
    \ >= 2) {\n        if (is_prime($count) && $n % $count == 0) {\n            return\
    \ $count;\n        }\n        $count -= 1;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmppm2f7hbn.php:10\nStack trace:\n#0 /tmp/tmppm2f7hbn.php(18): largest_prime_factor(15)\n\
    #1 /tmp/tmppm2f7hbn.php(22): candidate(15)\n#2 /tmp/tmppm2f7hbn.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmppm2f7hbn.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $factor = 2;\n    $lastFactor =\
    \ 1;\n    while ($n > 1) {\n        if ($n % $factor == 0) {\n            $lastFactor\
    \ = $factor;\n            $n = $n / $factor;\n            while ($n % $factor\
    \ == 0) {\n                $n = $n / $factor;\n            }\n        }\n    \
    \    $factor++;\n    }\n    return $lastFactor;\n}\n\nprint largest_prime_factor(13195);\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: '29'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $factor = 1;\n    $i = 2;\n   \
    \ while ($i * $i <= $n) {\n        if ($n % $i == 0) {\n            $factor =\
    \ $i;\n            $n /= $i;\n        } else {\n            $i++;\n        }\n\
    \    }\n    return max($factor, $n);\n}\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $current_largest_prime_factor =\
    \ 1;\n    for ($i = 2; $i <= $n / 2; $i++) {\n        if ($n % $i == 0) {\n  \
    \          $current_largest_prime_factor = $i;\n            $n /= $i;\n      \
    \      $i--;\n        }\n    }\n    return $current_largest_prime_factor;\n}\n\
    \nassert(largest_prime_factor(13195) == 29);\nassert(largest_prime_factor(2048)\
    \ == 2);\necho largest_prime_factor(600851475143);\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert(largest_prime_factor(13195) == 29) failed in\
    \ /tmp/tmpdwlpe4lo.php on line 19\n1471\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpdwlpe4lo.php:27\nStack trace:\n#0 /tmp/tmpdwlpe4lo.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpdwlpe4lo.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $last_factor = 0;\n    $factor\
    \ = 2;\n    while ($n > 1) {\n        while ($n % $factor == 0) {\n          \
    \  $last_factor = $factor;\n            $n /= $factor;\n        }\n        $factor++;\n\
    \    }\n    return $last_factor;\n}\n\nvar_dump(largest_prime_factor(13195));\n\
    var_dump(largest_prime_factor(2048));\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "int(29)\nint(2)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    // find the largest divisor of\
    \ $n that is prime.\n    $d = 2;\n    while ($n % $d) {\n        $d += 1;\n  \
    \  }\n    // if $d is $n, then $n is a prime, so the largest prime factor is $n\
    \ itself.\n    // Otherwise, the largest prime factor of $n is the largest prime\
    \ factor of\n    // $n / $d.\n    return $d == $n ? $n : largest_prime_factor($n\
    \ / $d);\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $largest = 1;\n    // Go through\
    \ all the factors from 2 to sqrt(n)\n    for ($i = 2; $i <= sqrt($n); $i++) {\n\
    \        if ($n % $i == 0) {\n            // If $i is a factor, see if it is prime.\n\
    \            $prime = true;\n            for ($j = 2; $j <= sqrt($i); $j++) {\n\
    \                if ($i % $j == 0) {\n                    $prime = false;\n  \
    \                  break;\n                }\n            }\n            if ($prime)\
    \ {\n                // A prime factor was found.\n                $largest =\
    \ $i;\n            }\n        }\n    }\n    return $largest;\n}\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppm4s40xt.php:33\n\
    Stack trace:\n#0 /tmp/tmppm4s40xt.php(40): test()\n#1 {main}\n  thrown in /tmp/tmppm4s40xt.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    // Your code here.\n}\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpls981sn1.php:15\n\
    Stack trace:\n#0 /tmp/tmpls981sn1.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpls981sn1.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $max_factor = 0;\n  for ($factor\
    \ = 2; $factor <= $n; $factor++) {\n    if ($n % $factor == 0) {\n      // We\
    \ found a factor of n. Since we are looking for the largest factor,\n      //\
    \ we should recursively check the largest factor of the quotient.\n      $max_factor\
    \ = max($max_factor, largest_prime_factor($n / $factor));\n    }\n  }\n  return\
    \ $max_factor;\n}\n\necho largest_prime_factor(600851475143);\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    // All primes are of the form 6k\
    \ \xB1 1, with the exception of 2 and 3.\n    // Find a number of this form which\
    \ is a factor of n.\n    for ($x = 6; $x <= sqrt($n); $x += 6) {\n        if ($n\
    \ % ($x - 1) == 0) {\n            // If a factor is found, factor it out from\
    \ n to see if it is prime.\n            return largest_prime_factor($n / ($x -\
    \ 1));\n        }\n        if ($n % ($x + 1) == 0) {\n            return largest_prime_factor($n\
    \ / ($x + 1));\n        }\n    }\n    // If no factor of the form 6k \xB1 1 is\
    \ found, n must be prime.\n    return $n;\n}\nprint_r(largest_prime_factor(600851475143));\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "6857\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0ciqjoi2.php:28\n\
    Stack trace:\n#0 /tmp/tmp0ciqjoi2.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp0ciqjoi2.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $factor = 2;\n  while ($n > 1) {\n\
    \    while ($n % $factor == 0) {\n      $n /= $factor;\n    }\n    $factor++;\n\
    \  }\n  return $factor - 1;\n}\nvar_dump(largest_prime_factor(2048));\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "int(2)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $next = $n;\n  for ($i = 2; $i <=\
    \ $n; $i++) {\n    while ($next % $i == 0) {\n      $next = $next / $i;\n    }\n\
    \  }\n  return $next;\n}\n\n$inputs = array(13195, 2048);\nforeach ($inputs as\
    \ $input) {\n  echo \"largest_prime_factor($input) = \" . largest_prime_factor($input)\
    \ . \"\\n\";\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "largest_prime_factor(13195) = 1\nlargest_prime_factor(2048) = 1\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp4oq1182h.php:26\nStack trace:\n\
    #0 /tmp/tmp4oq1182h.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4oq1182h.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $nextPrime = 2;\n  while ($n != 1)\
    \ {\n    if ($n % $nextPrime == 0) {\n      $n /= $nextPrime;\n    } else {\n\
    \      $nextPrime++;\n    }\n  }\n  return $nextPrime;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  // write your solution here...\n\
    \  $prime_factors = array();\n  for ($i = 2; $i <= $n; $i++) {\n    if ($n % $i\
    \ == 0) {\n      array_push($prime_factors, $i);\n      $n = $n / $i;\n      //\
    \ echo $n . \"\\n\";\n    }\n  }\n  return end($prime_factors);\n}\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt2thziy_.php:25\n\
    Stack trace:\n#0 /tmp/tmpt2thziy_.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpt2thziy_.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $max = floor(sqrt($n));\n    $factors\
    \ = [];\n    for ($i = 2; $i <= $max; $i++) {\n        if ($n % $i == 0) {\n \
    \           $factors[] = $i;\n        }\n    }\n    $max_factor = max($factors);\n\
    \    if ($max_factor == $n) {\n        return $n;\n    }\n    return largest_prime_factor($max_factor);\n\
    }\n\necho largest_prime_factor(600851475143);\nfunction candidate(...$args) {\n\
    \    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: max(): Array must contain at least one element in /tmp/tmp9vxbz89o.php\
    \ on line 15\n\nWarning: max(): Array must contain at least one element in /tmp/tmp9vxbz89o.php\
    \ on line 15\n\nWarning: max(): Array must contain at least one element in /tmp/tmp9vxbz89o.php\
    \ on line 15\n\nWarning: max(): Array must contain at least one element in /tmp/tmp9vxbz89o.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9vxbz89o.php:28\n\
    Stack trace:\n#0 /tmp/tmp9vxbz89o.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp9vxbz89o.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $found = false;\n    $primes =\
    \ get_primes(round(sqrt($n)));\n    while (!$found) {\n        $prime = array_pop($primes);\n\
    \        if ($n % $prime == 0) {\n            $found = true;\n        }\n    }\n\
    \    return $prime;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_primes()\
    \ in /tmp/tmpwwoaayl0.php:9\nStack trace:\n#0 /tmp/tmpwwoaayl0.php(20): largest_prime_factor(15)\n\
    #1 /tmp/tmpwwoaayl0.php(24): candidate(15)\n#2 /tmp/tmpwwoaayl0.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmpwwoaayl0.php on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $p = 2;\n    while ($n % $p !=\
    \ 0) {\n        $p++;\n    }\n    $q = $n / $p;\n    if ($q > $p) {\n        return\
    \ largest_prime_factor($q);\n    } else {\n        return $p;\n    }\n}\n\necho\
    \ \"largest_prime_factor(13195): \" . largest_prime_factor(13195) . \"\\n\";\n\
    echo \"largest_prime_factor(2048): \" . largest_prime_factor(2048) . \"\\n\";\n\
    echo \"largest_prime_factor(600851475143): \" . largest_prime_factor(600851475143)\
    \ . \"\\n\";\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "largest_prime_factor(13195): 29\nlargest_prime_factor(2048): 2\nlargest_prime_factor(600851475143):\
    \ 6857\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    // fill in the function\n}\n\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq5tyy86m.php:16\n\
    Stack trace:\n#0 /tmp/tmpq5tyy86m.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpq5tyy86m.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    for ($i = 2; $i < $n; $i++) {\n\
    \        if ($n % $i == 0) {\n            $n /= $i;\n            $i--;\n     \
    \   }\n    }\n    return $n;\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 1;\n    $prime_factors = array();\n\
    \    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $prime_factors[]\
    \ = $i;\n            $prime_factors[] = $n / $i;\n        }\n        $i++;\n \
    \   }\n    $max = 0;\n    foreach ($prime_factors as $prime_factor) {\n      \
    \  if (is_prime($prime_factor) && $prime_factor > $max) {\n            $max =\
    \ $prime_factor;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp7fsz25za.php:19\nStack trace:\n#0 /tmp/tmp7fsz25za.php(27): largest_prime_factor(15)\n\
    #1 /tmp/tmp7fsz25za.php(31): candidate(15)\n#2 /tmp/tmp7fsz25za.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7fsz25za.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  // TODO\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8bdv7dbe.php:16\n\
    Stack trace:\n#0 /tmp/tmp8bdv7dbe.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp8bdv7dbe.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $factor = 1;\n    $index = 2;\n\
    \    while ($index * $index <= $n) {\n        if ($n % $index == 0) {\n      \
    \      $factor = $index;\n            $n /= $index;\n        } else {\n      \
    \      $index += 1;\n        }\n    }\n    return $factor > $n ? $factor : $n;\n\
    }\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  for ($f = 2; $f <= $n; $f++) {\n\
    \    if (is_prime($f) && $n % $f == 0)\n      $prime = $f;\n  }\n  return $prime;\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpmjgecss7.php:9\nStack trace:\n#0 /tmp/tmpmjgecss7.php(16): largest_prime_factor(15)\n\
    #1 /tmp/tmpmjgecss7.php(20): candidate(15)\n#2 /tmp/tmpmjgecss7.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmjgecss7.php on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $prime_factors = prime_factors($n);\n\
    \    return max($prime_factors);\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function prime_factors()\
    \ in /tmp/tmphm65ubfb.php:8\nStack trace:\n#0 /tmp/tmphm65ubfb.php(13): largest_prime_factor(15)\n\
    #1 /tmp/tmphm65ubfb.php(17): candidate(15)\n#2 /tmp/tmphm65ubfb.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmphm65ubfb.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $factor = 1;\n    $candidate =\
    \ 2;\n    while ($candidate <= $n / $factor) {\n        if ($n % $candidate ==\
    \ 0) {\n            $factor = $candidate;\n            while ($n % $factor ==\
    \ 0) {\n                $n /= $factor;\n            }\n        }\n        $candidate++;\n\
    \    }\n    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpau2_e34j.php:27\n\
    Stack trace:\n#0 /tmp/tmpau2_e34j.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpau2_e34j.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $last_factor = 1;\n    $i = 2;\n\
    \    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $last_factor\
    \ = $i;\n            $n /= $i;\n        } else {\n            $i++;\n        }\n\
    \    }\n    return $last_factor;\n}\n\n$largest_prime_factor = largest_prime_factor(600851475143);\n\
    echo \"$largest_prime_factor\\n\";\n\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "6857\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $factors = [];\n    $prime_factors\
    \ = [];\n    $largest_prime_factor = 2;\n    for ($i = 2; $i <= $n; $i++) {\n\
    \        if ($n % $i == 0) {\n            $factors[] = $i;\n        }\n    }\n\
    \    foreach ($factors as $factor) {\n        $count = 0;\n        for ($i = 2;\
    \ $i <= $factor; $i++) {\n            if ($factor % $i == 0) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == 1) {\n        \
    \    $prime_factors[] = $factor;\n        }\n    }\n    if (count($prime_factors)\
    \ == 1) {\n        $largest_prime_factor = $prime_factors[0];\n    } else {\n\
    \        $largest_prime_factor = end($prime_factors);\n    }\n    return $largest_prime_factor;\n\
    }\necho largest_prime_factor(2048);\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '2'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <=\
    \ $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n\
    \            $i++;\n        }\n    }\n    return $n;\n}\n\n$result = largest_prime_factor(600851475143);\n\
    echo \"The largest prime factor of 600851475143 is $result\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: The largest prime factor of 600851475143 is 6857
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $max_pf = 1;\n    $i = 2;\n   \
    \ while ($i <= $n) {\n        while ($n % $i == 0) {\n            $max_pf = $i;\n\
    \            $n /= $i;\n        }\n        $i += 1;\n    }\n    return $max_pf;\n\
    }\n\n$largest_prime_factor = largest_prime_factor(600851475143);\nprint $largest_prime_factor;\n\
    \nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: '6857'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $cur = 2;\n    while ($n > 1) {\n\
    \        if ($n % $cur == 0) {\n            $n /= $cur;\n        } else {\n  \
    \          $cur += 1;\n        }\n    }\n    return $cur;\n}\n\necho largest_prime_factor(600851475143)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "6857\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    if ($n <= 1) {\n        throw new\
    \ Exception(\"n must be greater than 1\");\n    }\n    $factors = [];\n    $counter\
    \ = 2;\n    while ($n > 1) {\n        if ($n % $counter == 0) {\n            $factors[]\
    \ = $counter;\n            $n /= $counter;\n        } else {\n            $counter++;\n\
    \        }\n    }\n    return end($factors);\n}\necho largest_prime_factor(13195)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "29\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $prime_factors = array();\n   \
    \ $factors = array();\n    for ($i = 2; $i <= $n; $i++) {\n        if ($n % $i\
    \ == 0) {\n            $factors[] = $i;\n        }\n    }\n    $factors = array_reverse($factors);\n\
    \    $prime_factors = array_intersect($factors, get_prime_numbers($n));\n    return\
    \ $prime_factors[0];\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_prime_numbers()\
    \ in /tmp/tmpwzd1wprb.php:16\nStack trace:\n#0 /tmp/tmpwzd1wprb.php(21): largest_prime_factor(15)\n\
    #1 /tmp/tmpwzd1wprb.php(25): candidate(15)\n#2 /tmp/tmpwzd1wprb.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmpwzd1wprb.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $result = null;\n    $factor =\
    \ 2;\n    while ($n > 1) {\n        while ($n % $factor == 0) {\n            $result\
    \ = $factor;\n            $n /= $factor;\n        }\n        $factor++;\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $factor = 0;\n    for ($i = 2;\
    \ $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            $factor = $i;\n\
    \            $n /= $i;\n            $i = 1;\n        }\n    }\n    return $factor;\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= $n) {\n \
    \   if ($n % $i == 0) {\n      $n /= $i;\n    } else {\n      $i++;\n    }\n \
    \ }\n  return $i;\n}\n\nvar_dump(largest_prime_factor(13195));\nvar_dump(largest_prime_factor(2048));\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "int(29)\nint(2)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  for ($i = 2; $i < $n; $i++) {\n \
    \   if ($n % $i == 0) {\n      $factors[] = $i;\n    }\n  }\n  foreach ($factors\
    \ as $factor) {\n    for ($i = 2; $i < $factor; $i++) {\n      if ($factor % $i\
    \ == 0) {\n        continue 2;\n      }\n    }\n    $primes[] = $factor;\n  }\n\
    \  return end($primes);\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $largest_prime_factor = 0;\n  $d\
    \ = 2;\n  while ($n > 1) {\n    while ($n % $d == 0) {\n      $largest_prime_factor\
    \ = $d;\n      $n /= $d;\n    }\n    $d += 1;\n    if ($d * $d > $n) {\n     \
    \ if ($n > 1) {\n        $largest_prime_factor = $n;\n      }\n      break;\n\
    \    }\n  }\n  return $largest_prime_factor;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $max_factor = 1;\n    for ($factor\
    \ = 2; $factor < $n; $factor++) {\n        if ($n % $factor == 0) {\n        \
    \    $max_factor = $factor;\n            $n /= $factor;\n        }\n    }\n  \
    \  return $max_factor;\n}\n\necho largest_prime_factor(13195);\necho \"\\n\";\n\
    echo largest_prime_factor(2048);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "13\n16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqflkwomu.php:27\n\
    Stack trace:\n#0 /tmp/tmpqflkwomu.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpqflkwomu.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $largest = 1;\n  $divisor = 2;\n\
    \  while ($n > 1) {\n    while ($n % $divisor == 0) {\n      $largest = $divisor;\n\
    \      $n /= $divisor;\n    }\n    $divisor++;\n  }\n  return $largest;\n}\n\n\
    echo largest_prime_factor(13195) . \"\\n\";\necho largest_prime_factor(2048) .\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "29\n2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  // n is even.\n  if ($n % 2 == 0)\
    \ {\n    return 2;\n  }\n  // Check for other even factors\n  for ($i = 3; $i\
    \ < $n; $i += 2) {\n    if ($n % $i == 0) {\n      // $i is a factor.\n      return\
    \ largest_prime_factor($n / $i);\n    }\n  }\n  // No other even factors.\n  return\
    \ $n;\n}\nprint \"The solution is \" . largest_prime_factor(600851475143) . \"\
    \\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "The solution is 6857\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpix2ydxwa.php:31\nStack trace:\n#0 /tmp/tmpix2ydxwa.php(35): test()\n\
    #1 {main}\n  thrown in /tmp/tmpix2ydxwa.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <=\
    \ $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n\
    \            $i++;\n        }\n    }\n    return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $factors = prime_factors($n);\n \
    \ return array_pop($factors);\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function prime_factors()\
    \ in /tmp/tmpx8s0g155.php:8\nStack trace:\n#0 /tmp/tmpx8s0g155.php(13): largest_prime_factor(15)\n\
    #1 /tmp/tmpx8s0g155.php(17): candidate(15)\n#2 /tmp/tmpx8s0g155.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmpx8s0g155.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i <= $n) {\n\
    \        while ($n % $i == 0) {\n            $n /= $i;\n        }\n        $i++;\n\
    \    }\n    return $i - 1;\n}\n\nfor ($i = 2; $i < 10000; $i++) {\n    $p = largest_prime_factor($i);\n\
    \    if ($p == $i) {\n        echo \"$i\\n\";\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n31\n37\n41\n43\n47\n53\n59\n61\n67\n\
    71\n73\n79\n83\n89\n97\n101\n103\n107\n109\n113\n127\n131\n137\n139\n149\n151\n\
    157\n163\n167\n173\n179\n181\n191\n193\n197\n199\n211\n223\n227\n229\n233\n239\n\
    241\n251\n257\n263\n269\n271\n277\n281\n283\n293\n307\n311\n313\n317\n331\n337\n\
    347\n349\n353\n359\n367\n373\n379\n383\n389\n397\n401\n409\n419\n421\n431\n433\n\
    439\n443\n449\n457\n461\n463\n467\n479\n487\n491\n499\n503\n509\n521\n523\n541\n\
    547\n557\n563\n569\n571\n577\n587\n593\n599\n601\n607\n613\n617\n619\n631\n641\n\
    643\n647\n653\n659\n661\n673\n677\n683\n691\n701\n709\n719\n727\n733\n739\n743\n\
    751\n757\n761\n769\n773\n787\n797\n809\n811\n821\n823\n827\n829\n839\n853\n857\n\
    859\n863\n877\n881\n883\n887\n907\n911\n919\n929\n937\n941\n947\n953\n967\n971\n\
    977\n983\n991\n997\n1009\n1013\n1019\n1021\n1031\n1033\n1039\n1049\n1051\n1061\n\
    1063\n1069\n1087\n1091\n1093\n1097\n1103\n1109\n1117\n1123\n1129\n1151\n1153\n\
    1163\n1171\n1181\n1187\n1193\n1201\n1213\n1217\n1223\n1229\n1231\n1237\n1249\n\
    1259\n1277\n1279\n1283\n1289\n1291\n1297\n1301\n1303\n1307\n1319\n1321\n1327\n\
    1361\n1367\n1373\n1381\n1399\n1409\n1423\n1427\n1429\n1433\n1439\n1447\n1451\n\
    1453\n1459\n1471\n1481\n1483\n1487\n1489\n1493\n1499\n1511\n1523\n1531\n1543\n\
    1549\n1553\n1559\n1567\n1571\n1579\n1583\n1597\n1601\n1607\n1609\n1613\n1619\n\
    1621\n1627\n1637\n1657\n1663\n1667\n1669\n1693\n1697\n1699\n1709\n1721\n1723\n\
    1733\n1741\n1747\n1753\n1759\n1777\n1783\n1787\n1789\n1801\n1811\n1823\n1831\n\
    1847\n1861\n1867\n1871\n1873\n1877\n1879\n1889\n1901\n1907\n1913\n1931\n1933\n\
    1949\n1951\n1973\n1979\n1987\n1993\n1997\n1999\n2003\n2011\n2017\n2027\n2029\n\
    2039\n2053\n2063\n2069\n2081\n2083\n2087\n2089\n2099\n2111\n2113\n2129\n2131\n\
    2137\n2141\n2143\n2153\n2161\n2179\n2203\n2207\n2213\n2221\n2237\n2239\n2243\n\
    2251\n2267\n2269\n2273\n2281\n2287\n2293\n2297\n2309\n2311\n2333\n2339\n2341\n\
    2347\n2351\n2357\n2371\n2377\n2381\n2383\n2389\n2393\n2399\n2411\n2417\n2423\n\
    2437\n2441\n2447\n2459\n2467\n2473\n2477\n2503\n2521\n2531\n2539\n2543\n2549\n\
    2551\n2557\n2579\n2591\n2593\n2609\n2617\n2621\n2633\n2647\n2657\n2659\n2663\n\
    2671\n2677\n2683\n2687\n2689\n2693\n2699\n2707\n2711\n2713\n2719\n2729\n2731\n\
    2741\n2749\n2753\n2767\n2777\n2789\n2791\n2797\n2801\n2803\n2819\n2833\n2837\n\
    2843\n2851\n2857\n2861\n2879\n2887\n2897\n2903\n2909\n2917\n2927\n2939\n2953\n\
    2957\n2963\n2969\n2971\n2999\n3001\n3011\n3019\n3023\n3037\n3041\n3049\n3061\n\
    3067\n3079\n3083\n3089\n3109\n3119\n3121\n3137\n3163\n3167\n3169\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $factors = array();\n  $i = 2;\n\
    \  while ($n > 1) {\n    if ($n % $i === 0) {\n      array_push($factors, $i);\n\
    \      $n /= $i;\n    } else {\n      $i++;\n    }\n  }\n  return end($factors);\n\
    }\n\necho 'The largest prime factor of 13195 is ' . largest_prime_factor(13195)\
    \ . \"\\n\";\necho 'The largest prime factor of 2048 is ' . largest_prime_factor(2048)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "The largest prime factor of 13195 is 29\nThe largest prime factor of 2048\
    \ is 2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $largest_prime_factor = 1;\n  \
    \  for ($i = 2; $i < $n; $i++) {\n        if ($n % $i == 0) {\n            $n\
    \ /= $i;\n            $largest_prime_factor = $i;\n        }\n    }\n    return\
    \ $largest_prime_factor;\n}\n\nassert(largest_prime_factor(13195) == 29);\nassert(largest_prime_factor(2048)\
    \ == 2);\n\necho(largest_prime_factor(600851475143));\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert(largest_prime_factor(13195) == 29) failed in\
    \ /tmp/tmpys6f4ukv.php on line 18\n\nWarning: assert(): assert(largest_prime_factor(2048)\
    \ == 2) failed in /tmp/tmpys6f4ukv.php on line 19\n1471\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpys6f4ukv.php:27\nStack trace:\n#0 /tmp/tmpys6f4ukv.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpys6f4ukv.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $array = array();\n  while ($n %\
    \ 2 == 0) {\n    $array[] = 2;\n    $n = $n / 2;\n  }\n  for ($i = 3; $i <= sqrt($n);\
    \ $i = $i + 2) {\n    while ($n % $i == 0) {\n      $array[] = $i;\n      $n =\
    \ $n / $i;\n    }\n  }\n  if ($n > 2) {\n    $array[] = $n;\n  }\n  return max($array);\n\
    }\n\necho \"Largest prime factor of 13195 is: \" . largest_prime_factor(13195)\
    \ . \"\\n\";\necho \"Largest prime factor of 2048 is: \" . largest_prime_factor(2048)\
    \ . \"\\n\";\necho \"Largest prime factor of 600851475143 is: \" . largest_prime_factor(600851475143)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "Largest prime factor of 13195 is: 29\nLargest prime factor of 2048 is:\
    \ 2\nLargest prime factor of 600851475143 is: 6857\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= $n) {\n \
    \   if ($n % $i == 0) {\n      $n /= $i;\n    } else {\n      $i++;\n    }\n \
    \ }\n  return $i;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $prime_factors = prime_factors($n);\n\
    \    return max($prime_factors);\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function prime_factors()\
    \ in /tmp/tmp0gob9brp.php:8\nStack trace:\n#0 /tmp/tmp0gob9brp.php(13): largest_prime_factor(15)\n\
    #1 /tmp/tmp0gob9brp.php(17): candidate(15)\n#2 /tmp/tmp0gob9brp.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmp0gob9brp.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $primes = array(2);\n    $largest_prime\
    \ = 2;\n    $largest_prime_factor = 2;\n    $factor = 2;\n    while ($factor <=\
    \ $n) {\n        while ($n % $factor == 0) {\n            $n /= $factor;\n   \
    \         $largest_prime_factor = $factor;\n        }\n        if (is_prime($factor))\
    \ {\n            $largest_prime = $factor;\n            $primes[] = $factor;\n\
    \        }\n        $factor++;\n    }\n    return $largest_prime_factor;\n}\n\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpxiqbz2p1.php:17\nStack trace:\n#0 /tmp/tmpxiqbz2p1.php(27): largest_prime_factor(15)\n\
    #1 /tmp/tmpxiqbz2p1.php(31): candidate(15)\n#2 /tmp/tmpxiqbz2p1.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpxiqbz2p1.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $largest = $n;\n    for ($i = 2;\
    \ $i < $n; $i++) {\n        if ($n % $i == 0) {\n            $largest = $i;\n\
    \            $n = $n / $i;\n            $i = 1;\n        }\n    }\n    return\
    \ $largest;\n}\n\necho largest_prime_factor(600851475143);\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1471\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe8kdpims.php:25\n\
    Stack trace:\n#0 /tmp/tmpe8kdpims.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpe8kdpims.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $result = 1;\n    for ($i = 2;\
    \ $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            if (is_prime($i))\
    \ {\n                $result = $i;\n            }\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp4wg1wkin.php:11\nStack trace:\n#0 /tmp/tmp4wg1wkin.php(20): largest_prime_factor(15)\n\
    #1 /tmp/tmp4wg1wkin.php(24): candidate(15)\n#2 /tmp/tmp4wg1wkin.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4wg1wkin.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $number = 1;\n    while ($n > 1)\
    \ {\n        $number++;\n        if ($n % $number == 0) {\n            $n /= $number;\n\
    \        }\n    }\n    return $number;\n}\n\n$start = microtime(true);\n$answer\
    \ = largest_prime_factor(600851475143);\n$end = microtime(true);\n\necho \"The\
    \ answer is $answer\\n\";\necho \"Execution time: \" . ($end - $start) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "The answer is 6857\nExecution time: 0.00015997886657715\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpyvd7ckvc.php:30\nStack trace:\n\
    #0 /tmp/tmpyvd7ckvc.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpyvd7ckvc.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $result = 0;\n  $p = 2;\n  while\
    \ ($n > 1) {\n    while ($n % $p == 0) {\n      $result = $p;\n      $n /= $p;\n\
    \    }\n    $p++;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <=\
    \ $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n\
    \            $i++;\n        }\n    }\n    return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $largest_prime_factor = 2;\n  \
    \  while ($n % $largest_prime_factor == 0) {\n        $n /= $largest_prime_factor;\n\
    \    }\n    while ($n > 1) {\n        $largest_prime_factor += 1;\n        while\
    \ ($n % $largest_prime_factor == 0) {\n            $n /= $largest_prime_factor;\n\
    \        }\n    }\n    return $largest_prime_factor;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $factors = factor($n);\n    $primeFactors\
    \ = [];\n    foreach ($factors as $f) {\n        if (is_prime($f)) {\n       \
    \     $primeFactors[] = $f;\n        }\n    }\n    return max($primeFactors);\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factor() in /tmp/tmppw_4ow1k.php:8\n\
    Stack trace:\n#0 /tmp/tmppw_4ow1k.php(19): largest_prime_factor(15)\n#1 /tmp/tmppw_4ow1k.php(23):\
    \ candidate(15)\n#2 /tmp/tmppw_4ow1k.php(30): test()\n#3 {main}\n  thrown in /tmp/tmppw_4ow1k.php\
    \ on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $largest_prime_factor = 2;\n  \
    \  $count = 2;\n    while ($count * $count <= $n) {\n        if ($n % $count ==\
    \ 0) {\n            $n /= $count;\n            $largest_prime_factor = $count;\n\
    \        } else {\n            $count++;\n        }\n    }\n    if ($n > $largest_prime_factor)\
    \ {\n        $largest_prime_factor = $n;\n    }\n    return $largest_prime_factor;\n\
    }\n\necho largest_prime_factor(600851475143) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "6857\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <=\
    \ $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n\
    \            $i++;\n        }\n    }\n    return $n;\n}\n\necho \"largest_prime_factor(13195)\
    \ = \" . largest_prime_factor(13195) . \"\\n\";\necho \"largest_prime_factor(2048)\
    \ = \" . largest_prime_factor(2048) . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "largest_prime_factor(13195) = 29\nlargest_prime_factor(2048) = 2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $factor = 2;\n  while ($n > 1) {\n\
    \    while ($n % $factor == 0) {\n      $n /= $factor;\n    }\n    $factor++;\n\
    \  }\n  return $factor - 1;\n}\necho 'largest_prime_factor(13195): '.largest_prime_factor(13195);\n\
    echo PHP_EOL;\necho 'largest_prime_factor(2048): '.largest_prime_factor(2048);\n\
    echo PHP_EOL;\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "largest_prime_factor(13195): 29\nlargest_prime_factor(2048): 2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    $max_factor = 1;\n\
    \    while ($i <= $n) {\n        if (fmod($n, $i) == 0) {\n            if (is_prime($i))\
    \ {\n                $max_factor = $i;\n            }\n            $n = $n / $i;\n\
    \        } else {\n            $i++;\n        }\n    }\n    return $max_factor;\n\
    }\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpuld3jyec.php:12\nStack trace:\n#0 /tmp/tmpuld3jyec.php(23): largest_prime_factor(15)\n\
    #1 /tmp/tmpuld3jyec.php(27): candidate(15)\n#2 /tmp/tmpuld3jyec.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmpuld3jyec.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    // make a list of factors\n   \
    \ $factors = [];\n    for ($i = 2; $i < $n; $i++) {\n        if ($n % $i == 0)\
    \ {\n            $factors[] = $i;\n        }\n    }\n    // filter out the non-primes\n\
    \    $primes = array_filter($factors, function($x) {\n        for ($i = 2; $i\
    \ < $x; $i++) {\n            if ($x % $i == 0) {\n                return false;\n\
    \            }\n        }\n        return true;\n    });\n    return max($primes);\n\
    }\n\necho largest_prime_factor(13195);\necho \"\\n\";\necho largest_prime_factor(2048);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "29\n2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= $n) {\n \
    \   if ($n % $i == 0) {\n      $n /= $i;\n    } else {\n      $i++;\n    }\n \
    \ }\n  return $i;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $result = 1;\n  $i = 2;\n  while\
    \ ($i <= $n) {\n    if ($n % $i == 0) {\n      $result = $i;\n      $n /= $i;\n\
    \    } else {\n      $i++;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  // TODO: Your code here.\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp6_flpm2.php:16\n\
    Stack trace:\n#0 /tmp/tmpp6_flpm2.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpp6_flpm2.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  // Return the largest prime factor\
    \ of n.\n  $divisor = 2;\n  while ($n > 1) {\n    if ($n % $divisor == 0) {\n\
    \      $n /= $divisor;\n    } else {\n      $divisor++;\n    }\n  }\n  return\
    \ $divisor;\n}\necho largest_prime_factor(600851475143) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "6857\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    if (is_prime($n)) return $n;\n\
    \    for ($i = 2; $i < $n; $i++) {\n        if ($n % $i == 0) return largest_prime_factor($n\
    \ / $i);\n    }\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpbz45z143.php:8\nStack trace:\n#0 /tmp/tmpbz45z143.php(15): largest_prime_factor(15)\n\
    #1 /tmp/tmpbz45z143.php(19): candidate(15)\n#2 /tmp/tmpbz45z143.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpbz45z143.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $answer = 1;\n  $i = 2;\n  $divisor\
    \ = 2;\n  while($i < $n) {\n    if($i % $divisor == 0) {\n      $i = $i + 1;\n\
    \      $divisor = 2;\n    } elseif($i == $divisor + 1) {\n      $answer = $i;\n\
    \      $divisor = 2;\n      $i = $i + 1;\n    } else {\n      $divisor = $divisor\
    \ + 1;\n    }\n  }\n  return $answer;\n}\necho largest_prime_factor(13195) . \"\
    \\n\";\necho largest_prime_factor(2048) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "13187\n2039\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphwi79irz.php:32\n\
    Stack trace:\n#0 /tmp/tmphwi79irz.php(39): test()\n#1 {main}\n  thrown in /tmp/tmphwi79irz.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i * $i <= $n)\
    \ {\n    if ($n % $i == 0) {\n      $n /= $i;\n    } else {\n      $i++;\n   \
    \ }\n  }\n  return $n;\n}\n\necho largest_prime_factor(13195) . \"\\n\";\necho\
    \ largest_prime_factor(2048) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "29\n2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $factor = 2;\n    while ($n > 1)\
    \ {\n        if ($n % $factor == 0) {\n            $n /= $factor;\n        } else\
    \ {\n            $factor++;\n        }\n    }\n    return $factor;\n}\necho \"\
    largest_prime_factor(13195) == 29 ? \" .\n(largest_prime_factor(13195) == 29 ?\
    \ \"true\" : \"false\") . \"\\n\";\necho \"largest_prime_factor(2048) == 2 ? \"\
    \ .\n(largest_prime_factor(2048) == 2 ? \"true\" : \"false\") . \"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "largest_prime_factor(13195) == 29 ? true\nlargest_prime_factor(2048) ==\
    \ 2 ? true\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $largest_prime_factor = 1;\n  $p\
    \ = 2;\n  while ($n != 1) {\n    while (($n % $p) == 0) {\n      $largest_prime_factor\
    \ = $p;\n      $n /= $p;\n    }\n    $p++;\n  }\n  return $largest_prime_factor;\n\
    }\n\nvar_dump(largest_prime_factor(13195));\nvar_dump(largest_prime_factor(2048));\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "int(29)\nint(2)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    if ($n == 1) {\n        return\
    \ 1;\n    }\n\n    for ($i = 2; $i < $n; $i++) {\n        if ($n % $i == 0) {\n\
    \            return largest_prime_factor($n / $i);\n        }\n    }\n\n    return\
    \ $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $divisor = 2;\n    while ($n >\
    \ 1) {\n        while ($n % $divisor == 0) {\n            $n /= $divisor;\n  \
    \      }\n        $divisor++;\n    }\n    return $divisor - 1;\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $result = 2;\n    $bound = (int)\
    \ sqrt($n);\n    for ($i = 2; $i <= $bound; $i++) {\n        if ($n % $i === 0)\
    \ {\n            $result = $i;\n            $n /= $i;\n            $bound = (int)\
    \ sqrt($n);\n            $i = 1;\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkljopzu.php:26\n\
    Stack trace:\n#0 /tmp/tmplkljopzu.php(33): test()\n#1 {main}\n  thrown in /tmp/tmplkljopzu.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    for ($i = 2; $i < sqrt($n); $i++)\
    \ {\n        if ($n % $i == 0) {\n            return largest_prime_factor($n /\
    \ $i);\n        }\n    }\n    return $n;\n}\n\nfunction candidate(...$args) {\n\
    \    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcx68_yfi.php:22\n\
    Stack trace:\n#0 /tmp/tmpcx68_yfi.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpcx68_yfi.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  // TODO: Implement this.\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpynfitg7u.php:16\n\
    Stack trace:\n#0 /tmp/tmpynfitg7u.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpynfitg7u.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i <= $n) {\n\
    \        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n      \
    \      $i++;\n        }\n    }\n    return $i;\n}\n\necho largest_prime_factor(600851475143)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "6857\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $factor = 1;\n  $prime = 1;\n  $primes\
    \ = array();\n  while ($factor <= $n) {\n    if ($n % $factor == 0) {\n      $is_prime\
    \ = true;\n      for ($i = 2; $i < $factor; $i++) {\n        if ($factor % $i\
    \ == 0) {\n          $is_prime = false;\n          break;\n        }\n      }\n\
    \      if ($is_prime) {\n        $prime = $factor;\n        $primes[] = $prime;\n\
    \      }\n    }\n    $factor++;\n  }\n  return $prime;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $largest_prime_factor = 1;\n  while($n\
    \ % 2 == 0) {\n    $largest_prime_factor = 2;\n    $n = $n / 2;\n  }\n  for($i\
    \ = 3; $i <= sqrt($n); $i += 2) {\n    while($n % $i == 0) {\n      $largest_prime_factor\
    \ = $i;\n      $n = $n / $i;\n    }\n  }\n  if($n > 2) {\n    $largest_prime_factor\
    \ = $n;\n  }\n  return $largest_prime_factor;\n}\n\necho largest_prime_factor(13195)\
    \ . \"\\n\";\necho largest_prime_factor(600851475143) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "29\n6857\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $primes = get_primes_to($n);\n\
    \    $n_divisors = array();\n    foreach ($primes as $prime) {\n        if ($n\
    \ % $prime == 0) {\n            $n_divisors[] = $prime;\n        }\n    }\n  \
    \  return max($n_divisors);\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_primes_to()\
    \ in /tmp/tmpiocdxs47.php:8\nStack trace:\n#0 /tmp/tmpiocdxs47.php(19): largest_prime_factor(15)\n\
    #1 /tmp/tmpiocdxs47.php(23): candidate(15)\n#2 /tmp/tmpiocdxs47.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpiocdxs47.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <=\
    \ $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n\
    \            $i += 1;\n        }\n    }\n    return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    for ($i = 2; $i <= $n; $i++) {\n\
    \        if ($n % $i == 0) {\n            $n /= $i;\n            $i--;\n     \
    \   }\n    }\n    return $i;\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $divisor = 2;\n  while ($n > 1) {\n\
    \    while ($n % $divisor == 0) {\n      $n /= $divisor;\n    }\n    $divisor++;\n\
    \  }\n  return $divisor - 1;\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  for ($i = floor(sqrt($n)); $i > 1;\
    \ $i--) {\n    if ($n % $i == 0) {\n      $factor = $n / $i;\n      if (is_prime($factor))\
    \ {\n        return $factor;\n      }\n    }\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpytn8y69o.php:11\nStack trace:\n#0 /tmp/tmpytn8y69o.php(19): largest_prime_factor(15)\n\
    #1 /tmp/tmpytn8y69o.php(23): candidate(15)\n#2 /tmp/tmpytn8y69o.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpytn8y69o.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $test_num = 3;\n    while (true)\
    \ {\n        if ($n % $test_num == 0) {\n            $n = $n / $test_num;\n  \
    \          if ($n == 1) {\n                return $test_num;\n            }\n\
    \        } else {\n            $test_num += 2;\n        }\n    }\n}\n\necho largest_prime_factor(600851475143);\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: b'6857'
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n_sqrt = ceil(sqrt($n));\n   \
    \ for ($i = $n_sqrt; $i > 1; $i--) {\n        if ($n % $i == 0) {\n          \
    \  if (is_prime($i)) {\n                return $i;\n            }\n        }\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0tg666kh.php:11\nStack trace:\n#0 /tmp/tmp0tg666kh.php(19): largest_prime_factor(15)\n\
    #1 /tmp/tmp0tg666kh.php(23): candidate(15)\n#2 /tmp/tmp0tg666kh.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmp0tg666kh.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $max_prime = 2;\n    for ($i =\
    \ 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            if (is_prime($i))\
    \ {\n                $max_prime = $i;\n            }\n        }\n    }\n    return\
    \ $max_prime;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp1d3dpbre.php:11\nStack trace:\n#0 /tmp/tmp1d3dpbre.php(20): largest_prime_factor(15)\n\
    #1 /tmp/tmp1d3dpbre.php(24): candidate(15)\n#2 /tmp/tmp1d3dpbre.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1d3dpbre.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    // Fill this in.\n    $lpf = 0;\n\
    \    $i = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n          \
    \  $lpf = $i;\n            $n = $n / $i;\n        } else {\n            $i++;\n\
    \        }\n    }\n    return $lpf;\n}\n\necho largest_prime_factor(13195) . \"\
    \\n\";\necho largest_prime_factor(2048) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "29\n2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $max = 0;\n    for ($i = 2; $i\
    \ <= $n; $i++) {\n        if ($n % $i == 0) {\n            $max = $i;\n      \
    \      $n /= $i;\n            $i = 1;\n        }\n    }\n    return $max;\n}\n\
    \nfor ($i = 2; $i < 1000; $i++) {\n    echo \"$i: \" . largest_prime_factor($i)\
    \ . \"\\n\";\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "2: 2\n3: 3\n4: 2\n5: 5\n6: 3\n7: 7\n8: 2\n9: 3\n10: 5\n11: 11\n12: 3\n\
    13: 13\n14: 7\n15: 5\n16: 2\n17: 17\n18: 3\n19: 19\n20: 5\n21: 7\n22: 11\n23:\
    \ 23\n24: 3\n25: 5\n26: 13\n27: 3\n28: 7\n29: 29\n30: 5\n31: 31\n32: 2\n33: 11\n\
    34: 17\n35: 7\n36: 3\n37: 37\n38: 19\n39: 13\n40: 5\n41: 41\n42: 7\n43: 43\n44:\
    \ 11\n45: 5\n46: 23\n47: 47\n48: 3\n49: 7\n50: 5\n51: 17\n52: 13\n53: 53\n54:\
    \ 3\n55: 11\n56: 7\n57: 19\n58: 29\n59: 59\n60: 5\n61: 61\n62: 31\n63: 7\n64:\
    \ 2\n65: 13\n66: 11\n67: 67\n68: 17\n69: 23\n70: 7\n71: 71\n72: 3\n73: 73\n74:\
    \ 37\n75: 5\n76: 19\n77: 11\n78: 13\n79: 79\n80: 5\n81: 3\n82: 41\n83: 83\n84:\
    \ 7\n85: 17\n86: 43\n87: 29\n88: 11\n89: 89\n90: 5\n91: 13\n92: 23\n93: 31\n94:\
    \ 47\n95: 19\n96: 3\n97: 97\n98: 7\n99: 11\n100: 5\n101: 101\n102: 17\n103: 103\n\
    104: 13\n105: 7\n106: 53\n107: 107\n108: 3\n109: 109\n110: 11\n111: 37\n112: 7\n\
    113: 113\n114: 19\n115: 23\n116: 29\n117: 13\n118: 59\n119: 17\n120: 5\n121: 11\n\
    122: 61\n123: 41\n124: 31\n125: 5\n126: 7\n127: 127\n128: 2\n129: 43\n130: 13\n\
    131: 131\n132: 11\n133: 19\n134: 67\n135: 5\n136: 17\n137: 137\n138: 23\n139:\
    \ 139\n140: 7\n141: 47\n142: 71\n143: 13\n144: 3\n145: 29\n146: 73\n147: 7\n148:\
    \ 37\n149: 149\n150: 5\n151: 151\n152: 19\n153: 17\n154: 11\n155: 31\n156: 13\n\
    157: 157\n158: 79\n159: 53\n160: 5\n161: 23\n162: 3\n163: 163\n164: 41\n165: 11\n\
    166: 83\n167: 167\n168: 7\n169: 13\n170: 17\n171: 19\n172: 43\n173: 173\n174:\
    \ 29\n175: 7\n176: 11\n177: 59\n178: 89\n179: 179\n180: 5\n181: 181\n182: 13\n\
    183: 61\n184: 23\n185: 37\n186: 31\n187: 17\n188: 47\n189: 7\n190: 19\n191: 191\n\
    192: 3\n193: 193\n194: 97\n195: 13\n196: 7\n197: 197\n198: 11\n199: 199\n200:\
    \ 5\n201: 67\n202: 101\n203: 29\n204: 17\n205: 41\n206: 103\n207: 23\n208: 13\n\
    209: 19\n210: 7\n211: 211\n212: 53\n213: 71\n214: 107\n215: 43\n216: 3\n217: 31\n\
    218: 109\n219: 73\n220: 11\n221: 17\n222: 37\n223: 223\n224: 7\n225: 5\n226: 113\n\
    227: 227\n228: 19\n229: 229\n230: 23\n231: 11\n232: 29\n233: 233\n234: 13\n235:\
    \ 47\n236: 59\n237: 79\n238: 17\n239: 239\n240: 5\n241: 241\n242: 11\n243: 3\n\
    244: 61\n245: 7\n246: 41\n247: 19\n248: 31\n249: 83\n250: 5\n251: 251\n252: 7\n\
    253: 23\n254: 127\n255: 17\n256: 2\n257: 257\n258: 43\n259: 37\n260: 13\n261:\
    \ 29\n262: 131\n263: 263\n264: 11\n265: 53\n266: 19\n267: 89\n268: 67\n269: 269\n\
    270: 5\n271: 271\n272: 17\n273: 13\n274: 137\n275: 1"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    // As 2 is the smallest prime number,\
    \ check if $n is divisible by 2\n    while ($n % 2 == 0) {\n        $n /= 2;\n\
    \    }\n    // Now, $n must be odd number\n    // So, we only need to check if\
    \ $n is divisible by odd numbers less than square root of $n\n    for ($i = 3;\
    \ $i <= sqrt($n); $i += 2) {\n        // Check if $n is divisible by $i\n    \
    \    while ($n % $i == 0) {\n            $n /= $i;\n        }\n    }\n    // By\
    \ now, $n must be the largest prime factor\n    return $n;\n}\necho largest_prime_factor(13195);\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "29\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwq_fs06x.php:30\n\
    Stack trace:\n#0 /tmp/tmpwq_fs06x.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpwq_fs06x.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $largest_prime_factor = 1;\n  \
    \  $i = 2;\n    while ($i < $n) {\n        if ($n % $i == 0) {\n            $n\
    \ = $n / $i;\n            $largest_prime_factor = $i;\n        } else {\n    \
    \        $i++;\n        }\n    }\n    return $largest_prime_factor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8utdn94z.php:26\n\
    Stack trace:\n#0 /tmp/tmp8utdn94z.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp8utdn94z.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    // Your code here.\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpouwholrg.php:16\n\
    Stack trace:\n#0 /tmp/tmpouwholrg.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpouwholrg.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  for ($i = floor(sqrt($n)); $i > 0;\
    \ $i--) {\n    if ($n % $i == 0 && is_prime($i)) {\n      return $i;\n    }\n\
    \  }\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpukt81hsl.php:9\nStack trace:\n#0 /tmp/tmpukt81hsl.php(16): largest_prime_factor(15)\n\
    #1 /tmp/tmpukt81hsl.php(20): candidate(15)\n#2 /tmp/tmpukt81hsl.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmpukt81hsl.php on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $factor = 1;\n    while ($n % 2\
    \ == 0) {\n        $factor = 2;\n        $n /= 2;\n    }\n    $p = 3;\n    while\
    \ ($n != 1) {\n        while ($n % $p == 0) {\n            $factor = $p;\n   \
    \         $n /= $p;\n        }\n        $p += 2;\n    }\n    return $factor;\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $prime_factors = [];\n    $divisor\
    \ = 2;\n    while ($n > 1) {\n        if ($n % $divisor == 0) {\n            array_push($prime_factors,\
    \ $divisor);\n            $n /= $divisor;\n        } else {\n            $divisor++;\n\
    \        }\n    }\n    return end($prime_factors);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    if ($n < 2) {\n        return -1;\n\
    \    }\n    $sq = ceil(sqrt($n));\n    $divisor = 2;\n    while ($divisor <= $sq)\
    \ {\n        if ($n % $divisor == 0) {\n            return max(largest_prime_factor($n\
    \ / $divisor), largest_prime_factor($divisor));\n        }\n        $divisor++;\n\
    \    }\n    return $n;\n}\n\n$input = 600851475143;\n$result = largest_prime_factor($input);\n\
    \necho \"The largest prime factor of $input is $result.\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: The largest prime factor of 600851475143 is 6857.
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    //https://stackoverflow.com/questions/16846871/prime-factorization-algorithm-in-php\n\
    \    $half = floor($n / 2);\n    for ($div = 2; $div <= $half; $div++) {\n   \
    \     if ($n % $div == 0) {\n            return max(largest_prime_factor($n /\
    \ $div), largest_prime_factor($div));\n        }\n    }\n    return $n;\n}\n\n\
    $n = 13195;\necho largest_prime_factor($n);\nfunction candidate(...$args) {\n\
    \    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '29'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  // TODO\n}\n\nassert_options(ASSERT_BAIL,\
    \ 1);\nassert(largest_prime_factor(13195) == 29);\nassert(largest_prime_factor(2048)\
    \ == 2);\necho \"All tests passed.\\n\";\nfunction candidate(...$args) {\n   \
    \ return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !==\
    \ 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert(largest_prime_factor(13195) == 29) failed in\
    \ /tmp/tmpyby05jpf.php on line 12\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $k = 1;\n    for ($i = 2; $i <\
    \ sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            $n /= $i;\n    \
    \        $k = $i;\n        }\n    }\n    return $k;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfyc95e2t.php:23\n\
    Stack trace:\n#0 /tmp/tmpfyc95e2t.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpfyc95e2t.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    // fill me in\n}\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd5idq9ye.php:15\n\
    Stack trace:\n#0 /tmp/tmpd5idq9ye.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpd5idq9ye.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    for ($i = 2; $i < $n; $i++) {\n\
    \        if ($n % $i == 0) {\n            return max(largest_prime_factor($n /\
    \ $i), largest_prime_factor($i));\n        }\n    }\n    return $n;\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $i = 2;\n  $larger = 0;\n  while\
    \ ($i * $i <= $n) {\n    if ($n % $i == 0) {\n      $n /= $i;\n      $larger =\
    \ $i;\n    } else {\n      $i++;\n    }\n  }\n  return max($larger, $n);\n}\n\
    echo largest_prime_factor(13195);\n\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '29'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $last_prime = 1;\n  $prime = 2;\n\
    \  while ($n > 1) {\n    while ($n % $prime == 0) {\n      $last_prime = $prime;\n\
    \      $n /= $prime;\n    }\n    $prime++;\n  }\n  return $last_prime;\n}\n\n\
    echo largest_prime_factor(13195) . PHP_EOL;\necho largest_prime_factor(2048) .\
    \ PHP_EOL;\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "29\n2\n"
  stderr: ''
  exit_code: 0
  status: OK
