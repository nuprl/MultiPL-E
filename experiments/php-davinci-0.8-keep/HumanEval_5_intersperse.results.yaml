name: HumanEval_5_intersperse
language: php
results:
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$arr = [];\n\tforeach ($numbers as $number) {\n\t\tif (!empty($arr)) {\n\t\t\
    \t$arr[] = $delimeter;\n\t\t}\n\t\t$arr[] = $number;\n\t}\n\treturn $arr;\n}\n\
    \nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers)) return $numbers;\n    $interspersed = [$numbers[0]];\n\
    \    for ($i = 1; $i < count($numbers); $i++) {\n        $interspersed[] = $delimeter;\n\
    \        $interspersed[] = $numbers[$i];\n    }\n    return $interspersed;\n}\n\
    \nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \tif (empty($numbers)) {\n\t\treturn $numbers;\n\t}\n\n\t$result = array();\n\t\
    $result[] = $numbers[0];\n\tfor ($i = 1; $i < count($numbers); $i++) {\n\t\t$result[]\
    \ = $delimeter;\n\t\t$result[] = $numbers[$i];\n\t}\n\n\treturn $result;\n}\n\n\
    class IntersperseTest extends PHPUnit_Framework_TestCase {\n\tpublic function\
    \ test() {\n\t\t$this->assertEquals(array(), intersperse(array(), 4));\n\t\t$this->assertEquals(array(1,\
    \ 4, 2, 4, 3), intersperse(array(1, 2, 3), 4));\n\t}\n}\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Class 'PHPUnit_Framework_TestCase' not found\
    \ in /tmp/tmp2r4pngdn.php:22\nStack trace:\n#0 {main}\n  thrown in /tmp/tmp2r4pngdn.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $newArray = [];\n    $last = count($numbers) - 1;\n    $i = 0;\n    foreach\
    \ ($numbers as $number) {\n        $newArray[] = $number;\n        if ($i < $last)\
    \ {\n            $newArray[] = $delimeter;\n        }\n        $i++;\n    }\n\
    \    return $newArray;\n}\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    $first = TRUE;\n    foreach ($numbers as $num) {\n   \
    \     if ($first) {\n            $first = FALSE;\n        } else {\n         \
    \   $result[] = $delimeter;\n        }\n        $result[] = $num;\n    }\n   \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $intersperse = [];\n    $next = 0;\n    $count = count($numbers);\n    while\
    \ ($next < $count) {\n        array_push($intersperse, $numbers[$next]);\n   \
    \     if ($next < $count - 1) {\n            array_push($intersperse, $delimeter);\n\
    \        }\n        $next += 1;\n    }\n    return $intersperse;\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    $size = count($numbers);\n    if ($size === 0) {\n   \
    \     return $result;\n    }\n    $result[] = $numbers[0];\n    for ($i = 1; $i\
    \ < $size; $i++) {\n        $result[] = $delimeter;\n        $result[] = $numbers[$i];\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if ($numbers == []) {\n        return [];\n    } else {\n        $result\
    \ = [$numbers[0]];\n        $len = count($numbers);\n        for ($i = 1; $i <\
    \ $len; $i++) {\n            $result[] = $delimeter;\n            $result[] =\
    \ $numbers[$i];\n        }\n        return $result;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) == 0) {\n        return [];\n    }\n    $result = [ $numbers[0]\
    \ ];\n    $i = 1;\n    while ($i < count($numbers)) {\n        $result[] = $delimeter;\n\
    \        $result[] = $numbers[$i];\n        $i++;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), 7) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !==\
    \ array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (!$numbers) {\n        return $numbers;\n    }\n\n    $result = array();\n\
    \    for ($i = 0; $i < count($numbers); $i++) {\n        if ($i != 0) {\n    \
    \        $result[] = $delimeter;\n        }\n        $result[] = $numbers[$i];\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$result = [];\n\tforeach($numbers as $index => $number) {\n\t\t$result[] = $number;\n\
    \t\tif($index < count($numbers) - 1) {\n\t\t\t$result[] = $delimeter;\n\t\t}\n\
    \t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    for ($i = 0; $i < count($numbers); $i++) {\n        $result[]\
    \ = $numbers[$i];\n        if ($i < count($numbers) - 1) {\n            $result[]\
    \ = $delimeter;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers)) {\n        return [];\n    }\n    $result = [];\n  \
    \  foreach ($numbers as $key => $value) {\n        $result[] = $value;\n     \
    \   if ($key != count($numbers) - 1) {\n            $result[] = $delimeter;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers)) {\n        return $numbers;\n    }\n    $result = [$numbers[0]];\n\
    \    for ($i = 1; $i < count($numbers); $i++) {\n        $result[] = $delimeter;\n\
    \        $result[] = $numbers[$i];\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$result = [];\n\t$before = 0;\n\tforeach ($numbers as $n) {\n\t\tif ($before)\
    \ {\n\t\t\t$result[] = $delimeter;\n\t\t}\n\t\t$result[] = $n;\n\t\t$before =\
    \ 1;\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$len = count($numbers);\n\tif ($len < 2) {\n\t\treturn $numbers;\n\t} else {\n\
    \t\treturn array_merge(array($numbers[0]), array_map(function($e) use ($delimeter)\
    \ {\n\t\t\treturn array($delimeter, $e);\n\t\t}, array_slice($numbers, 1)));\n\
    \t}\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm6n2y96f.php:24\n\
    Stack trace:\n#0 /tmp/tmpm6n2y96f.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpm6n2y96f.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$result = [];\n\tfor ($i = 0; $i < count($numbers); $i++) {\n\t\t$result[] =\
    \ $numbers[$i];\n\t\tif ($i < count($numbers) - 1) {\n\t\t\t$result[] = $delimeter;\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$acc = array();\n\t$tail = $numbers;\n\twhile (!empty($tail)) {\n\t\t$x = array_shift($tail);\n\
    \t\t$acc[] = $x;\n\t\tif (!empty($tail)) {\n\t\t\t$acc[] = $delimeter;\n\t\t}\n\
    \t}\n\treturn $acc;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$interspersed = array();\n\tfor ($i = 0; $i < count($numbers); $i++) {\n\t\t\
    $interspersed[] = $numbers[$i];\n\t\tif ($i < count($numbers) - 1) {\n\t\t\t$interspersed[]\
    \ = $delimeter;\n\t\t}\n\t}\n\treturn $interspersed;\n}\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $res = [];\n    foreach($numbers as $index => $number) {\n        $res[]\
    \ = $number;\n        if ($index != count($numbers) - 1) {\n            $res[]\
    \ = $delimeter;\n        }\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers)) {\n        return $numbers;\n    }\n    return array_reduce($numbers,\
    \ function($result, $n) use ($delimeter) {\n        if (empty($result)) {\n  \
    \          $result[] = $n;\n        } else {\n            $result[] = $delimeter;\n\
    \            $result[] = $n;\n        }\n        return $result;\n    }, []);\n\
    }\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), 7) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !==\
    \ array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $numbersWithDelimeter = [];\n    foreach ($numbers as $index => $number)\
    \ {\n        $numbersWithDelimeter[] = $number;\n        if ($index < count($numbers)\
    \ - 1) {\n            $numbersWithDelimeter[] = $delimeter;\n        }\n    }\n\
    \    return $numbersWithDelimeter;\n}\n\nfunction candidate(...$args) {\n    return\
    \ intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$new_list = array();\n\tforeach ($numbers as $x) {\n\t\t$new_list[] = $x;\n\t\
    \t$new_list[] = $delimeter;\n\t}\n\tarray_pop($new_list);\n\treturn $new_list;\n\
    }\n\n$a = array(1, 2, 3);\nvar_dump(intersperse($a, 4));\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(5) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(4)\n  [2]=>\n  int(2)\n \
    \ [3]=>\n  int(4)\n  [4]=>\n  int(3)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$retval = array();\n\t$it = new ArrayIterator($numbers);\n\t$it->rewind();\n\
    \twhile ($it->valid()) {\n\t\t$retval[] = $it->current();\n\t\t$it->next();\n\t\
    \tif ($it->valid()) {\n\t\t\t$retval[] = $delimeter;\n\t\t}\n\t}\n\treturn $retval;\n\
    }\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), 7) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !==\
    \ array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    for ($i = 0; $i < count($numbers); $i++) {\n        $result[]\
    \ = $numbers[$i];\n        if ($i < count($numbers) - 1) {\n            $result[]\
    \ = $delimeter;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = $number;\n\
    \        $result[] = $delimeter;\n    }\n    return array_slice($result, 0, -1);\n\
    }\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), 7) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !==\
    \ array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    // your code here\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk94ivw0e.php:16\n\
    Stack trace:\n#0 /tmp/tmpk94ivw0e.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpk94ivw0e.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    foreach ($numbers as $index => $number) {\n        if\
    \ ($index == 0) {\n            $result[] = $number;\n        } else {\n      \
    \      $result[] = $delimeter;\n            $result[] = $number;\n        }\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $x = $numbers[0];\n    for ($i = 1; $i < count($numbers); $i++) {\n     \
    \   $x .= $delimeter . $numbers[$i];\n    }\n    return $x;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbac0y7wx.php:20\n\
    Stack trace:\n#0 /tmp/tmpbac0y7wx.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpbac0y7wx.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) <= 1) {\n        return $numbers;\n    }\n    $result\
    \ = [];\n    $end = count($numbers) - 1;\n    for ($i = 0; $i < $end; $i++) {\n\
    \        $result[] = $numbers[$i];\n        $result[] = $delimeter;\n    }\n \
    \   $result[] = $numbers[$end];\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    foreach ($numbers as $index => $value) {\n        if ($index\
    \ > 0) {\n            $result[] = $delimeter;\n        }\n        $result[] =\
    \ $value;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$result = [];\n\tfor ($i = 0; $i < count($numbers); $i++) {\n\t\tif ($i + 1\
    \ != count($numbers)) {\n\t\t\tarray_push($result, $numbers[$i], $delimeter);\n\
    \t\t} else {\n\t\t\tarray_push($result, $numbers[$i]);\n\t\t}\n\t}\n\treturn $result;\n\
    }\n\n$numbers = [1, 2, 3];\nprint_r(intersperse($numbers, 4));\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 4\n    [4]\
    \ => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers)) {\n        return $numbers;\n    }\n\n    $result =\
    \ array();\n    $result[] = $numbers[0];\n    $numbersCount = count($numbers);\n\
    \    for ($i = 1; $i < $numbersCount; $i++) {\n        $result[] = $delimeter;\n\
    \        $result[] = $numbers[$i];\n    }\n\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    foreach ($numbers as $i => $number) {\n        $result[]\
    \ = $number;\n        if ($i != count($numbers) - 1) {\n            $result[]\
    \ = $delimeter;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    // Your code here\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjshzh4pn.php:16\n\
    Stack trace:\n#0 /tmp/tmpjshzh4pn.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpjshzh4pn.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$res = array();\n\tforeach ($numbers as $k => $number) {\n\t\tif ($k > 0) {\n\
    \t\t\t$res[] = $delimeter;\n\t\t}\n\t\t$res[] = $number;\n\t}\n\treturn $res;\n\
    }\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), 7) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !==\
    \ array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    for ($i = 0; $i < count($numbers); $i++) {\n        $result[]\
    \ = $numbers[$i];\n        if ($i != count($numbers) - 1) {\n            $result[]\
    \ = $delimeter;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$result = [];\n\tfor ($i = 0; $i < count($numbers); $i++) {\n\t\t$result[] =\
    \ $numbers[$i];\n\t\tif ($i + 1 < count($numbers)) {\n\t\t\t$result[] = $delimeter;\n\
    \t\t}\n\t}\n\treturn $result;\n}\necho \"Example:\\n\";\necho \">>> intersperse([],\
    \ 4)\\n\";\necho var_export(intersperse([], 4), true);\necho \"\\n>>> intersperse([1,\
    \ 2, 3], 4)\\n\";\necho var_export(intersperse([1, 2, 3], 4), true);\necho \"\\\
    n\";\necho \"\\n\";\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Example:\n>>> intersperse([], 4)\narray (\n)\n>>> intersperse([1, 2, 3],\
    \ 4)\narray (\n  0 => 1,\n  1 => 4,\n  2 => 2,\n  3 => 4,\n  4 => 3,\n)\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    $count = count($numbers);\n    if ($count > 0) {\n   \
    \     $result[] = $numbers[0];\n        for ($i = 1; $i < $count; $i++) {\n  \
    \          $result[] = $delimeter;\n            $result[] = $numbers[$i];\n  \
    \      }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$result = [];\n\t$i = 0;\n\tforeach ($numbers as $number) {\n\t\tif ($i % 2\
    \ === 0) {\n\t\t\t$result[] = $number;\n\t\t} else {\n\t\t\t$result[] = $delimeter;\n\
    \t\t\t$result[] = $number;\n\t\t}\n\t\t$i++;\n\t}\n\treturn $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6v1vmjfm.php:28\n\
    Stack trace:\n#0 /tmp/tmp6v1vmjfm.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp6v1vmjfm.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers)) return [];\n    $result = [$numbers[0]];\n    foreach\
    \ (array_slice($numbers, 1) as $num) {\n        $result[] = $delimeter;\n    \
    \    $result[] = $num;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers)) {\n        return [];\n    }\n    $result = [array_shift($numbers)];\n\
    \    foreach ($numbers as $number) {\n        $result[] = $delimeter;\n      \
    \  $result[] = $number;\n    }\n    return $result;\n}\n\nclass IntersperseTest\
    \ extends PHPUnit_Framework_TestCase {\n    public function testEmpty() {\n  \
    \      $this->assertEquals([], intersperse([], 4));\n    }\n\n    public function\
    \ testOneNumber() {\n        $this->assertEquals([1], intersperse([1], 4));\n\
    \    }\n\n    public function testThreeNumbers() {\n        $this->assertEquals([1,\
    \ 4, 2, 4, 3], intersperse([1, 2, 3], 4));\n    }\n}\n\n$t = new IntersperseTest();\n\
    $t->testEmpty();\n$t->testOneNumber();\n$t->testThreeNumbers();\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Class 'PHPUnit_Framework_TestCase' not found\
    \ in /tmp/tmpfrh1g585.php:19\nStack trace:\n#0 {main}\n  thrown in /tmp/tmpfrh1g585.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$result = [];\n\tforeach($numbers as $index => $number) {\n\t\t$result[] = $number;\n\
    \t\tif ($index != count($numbers) - 1)\n\t\t\t$result[] = $delimeter;\n\t}\n\t\
    return $result;\n}\n\n$test_list = [1, 2, 3];\n$test_delimeter = 4;\nprint_r(intersperse($test_list,\
    \ $test_delimeter));\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 4\n    [4]\
    \ => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    for ($i = 0; $i < count($numbers); $i++) {\n        $result[]\
    \ = $numbers[$i];\n        if ($i < count($numbers) - 1) {\n            $result[]\
    \ = $delimeter;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) === 0) {\n        return $numbers;\n    } else {\n  \
    \      $first = array_shift($numbers);\n        return array_merge([$first], intersperse(array_merge([$delimeter],\
    \ $numbers), $delimeter));\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpjlqfhqrq.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$output = [];\n\tforeach($numbers as $key => $number) {\n\t\tif($key > 0) {\n\
    \t\t\t$output[] = $delimeter;\n\t\t}\n\t\t$output[] = $number;\n\t}\n\treturn\
    \ $output;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    foreach ($numbers as $n) {\n        $result[] = $n;\n\
    \        $result[] = $delimeter;\n    }\n    array_pop($result); // remove the\
    \ last `delimeter'\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$result = [];\n\tforeach ($numbers as $i => $v) {\n\t\tif ($i != 0) {\n\t\t\t\
    $result[] = $delimeter;\n\t\t}\n\t\t$result[] = $v;\n\t}\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), 7) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !==\
    \ array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    for ($i = 0; $i < count($numbers); $i++) {\n        $result[]\
    \ = $numbers[$i];\n        if ($i !== count($numbers) - 1) {\n            $result[]\
    \ = $delimeter;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers)) {\n        return [];\n    }\n    $numbers = array_slice($numbers,\
    \ 1);\n    $result = [$numbers[0]];\n    while (!empty($numbers)) {\n        $result[]\
    \ = $delimeter;\n        $result[] = array_shift($numbers);\n    }\n    return\
    \ $result;\n}\n\nassert_options(ASSERT_BAIL, 1);\nassert(array_diff(intersperse([],\
    \ 4), []) == []);\nassert(array_diff(intersperse([1, 2, 3], 4), [1, 4, 2, 4, 3])\
    \ == []);\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk980y74m.php:29\n\
    Stack trace:\n#0 /tmp/tmpk980y74m.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpk980y74m.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    for ($i = 0; $i < count($numbers); $i++) {\n        $result[]\
    \ = $numbers[$i];\n        if ($i !== count($numbers) - 1) {\n            $result[]\
    \ = $delimeter;\n        }\n    }\n    return $result;\n}\n\n$numbers = [1, 2,\
    \ 3];\n$delimeter = 0;\necho implode(intersperse($numbers, $delimeter), ' ');\n\
    \necho PHP_EOL;\n$numbers = [1, 2, 3];\n$delimeter = 4;\necho implode(intersperse($numbers,\
    \ $delimeter), ' ');\n\necho PHP_EOL;\n$numbers = [];\n$delimeter = 4;\necho implode(intersperse($numbers,\
    \ $delimeter), ' ');\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1 0 2 0 3\n1 4 2 4 3\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    $i = 0;\n    while ($i < count($numbers) - 1) {\n    \
    \    $result[] = $numbers[$i];\n        $result[] = $delimeter;\n        $i++;\n\
    \    }\n    $result[] = $numbers[$i];\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdevx3zib.php:24\n\
    Stack trace:\n#0 /tmp/tmpdevx3zib.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpdevx3zib.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers)) {\n        return $numbers;\n    }\n    $result = [$numbers[0]];\n\
    \    foreach (array_slice($numbers, 1) as $number) {\n        $result[] = $delimeter;\n\
    \        $result[] = $number;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \tif (empty($numbers)) {\n\t\treturn $numbers;\n\t}\n\t$result = array();\n\t\
    foreach ($numbers as $i => $number) {\n\t\tif ($i != 0) {\n\t\t\t$result[] = $delimeter;\n\
    \t\t}\n\t\t$result[] = $number;\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    // For empty list, return empty list\n    if(empty($numbers)) {\n       \
    \ return [];\n    }\n    // For singleton list, return singleton list\n    if(count($numbers)\
    \ == 1) {\n        return $numbers;\n    }\n    // For list of length 2 or more,\
    \ return head, delimeter, intersperse(tail)\n    $rest = intersperse(array_slice($numbers,\
    \ 1), $delimeter);\n    return array_merge([$numbers[0]], [$delimeter], $rest);\n\
    }\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$result = [];\n\tfor ($i = 0; $i < count($numbers); $i++) {\n\t\t$result[] =\
    \ $numbers[$i];\n\t\tif ($i < count($numbers) - 1) {\n\t\t\t$result[] = $delimeter;\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n$fh = fopen($argv[1], \"r\");\nwhile (!feof($fh))\
    \ {\n\t$val = fgets($fh);\n\tif ($val != \"\") {\n\t\t$numbers = explode(\",\"\
    , trim($val));\n\t\t$delimeter = intval(array_pop($numbers));\n\t\techo implode(\"\
    ,\", intersperse($numbers, $delimeter)) . \"\\n\";\n\t}\n}\nfclose($fh);\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "b'\\nWarning: fopen(): Filename cannot be empty in /tmp/tmplsr__w_4.php\
    \ on line 18\\n\\nWarning: feof() expects parameter 1 to be resource, bool given\
    \ in /tmp/tmplsr__w_4.php on line 19\\n\\nWarning: fgets() expects parameter 1\
    \ to be resource, bool given in /tmp/tmplsr__w_4.php on line 20\\n\\nWarning:\
    \ feof() expects parameter 1 to be resource, bool given in /tmp/tmplsr__w_4.php\
    \ on line 19\\n\\nWarning: fgets() expects parameter 1 to be resource, bool given\
    \ in /tmp/tmplsr__w_4.php on line 20\\n\\nWarning: feof() expects parameter 1\
    \ to be resource, bool given in /tmp/tmplsr__w_4.php on line 19\\n\\nWarning:\
    \ fgets() expects parameter 1 to be resource, bool given in /tmp/tmplsr__w_4.php\
    \ on line 20\\n\\nWarning: feof() expects parameter 1 to be resource, bool given\
    \ in /tmp/tmplsr__w_4.php on line 19\\n\\nWarning: fgets() expects parameter 1\
    \ to be resource, bool given in /tmp/tmplsr__w_4.php on line 20\\n\\nWarning:\
    \ feof() expects parameter 1 to be resource, bool given in /tmp/tmplsr__w_4.php\
    \ on line 19\\n\\nWarning: fgets() expects parameter 1 to be resource, bool given\
    \ in /tmp/tmplsr__w_4.php on line 20\\n\\nWarning: feof() expects parameter 1\
    \ to be resource, bool given in /tmp/tmplsr__w_4.php on line 19\\n\\nWarning:\
    \ fgets() expects parameter 1 to be resource, bool given in /tmp/tmplsr__w_4.php\
    \ on line 20\\n\\nWarning: feof() expects parameter 1 to be resource, bool given\
    \ in /tmp/tmplsr__w_4.php on line 19\\n\\nWarning: fgets() expects parameter 1\
    \ to be resource, bool given in /tmp/tmplsr__w_4.php on line 20\\n\\nWarning:\
    \ feof() expects parameter 1 to be resource, bool given in /tmp/tmplsr__w_4.php\
    \ on line 19\\n\\nWarning: fgets() expects parameter 1 to be resource, bool given\
    \ in /tmp/tmplsr__w_4.php on line 20\\n\\nWarning: feof() expects parameter 1\
    \ to be resource, bool given in /tmp/tmplsr__w_4.php on line 19\\n\\nWarning:\
    \ fgets() expects parameter 1 to be resource, bool given in /tmp/tmplsr__w_4.php\
    \ on line 20\\n\\nWarning: feof() expects parameter 1 to be resource, bool given\
    \ in /tmp/tmplsr__w_4.php on line 19\\n\\nWarning: fgets() expects parameter "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (!$numbers) {\n        return $numbers;\n    }\n\n    $res = [];\n   \
    \ foreach ($numbers as $value) {\n        $res[] = $value;\n        $res[] = $delimeter;\n\
    \    }\n    array_pop($res);\n\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) == 0) {\n        return $numbers;\n    }\n    else {\n\
    \        $current_number = array_shift($numbers);\n        return [$current_number]\
    \ + intersperse($numbers, $delimeter);\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc65u5k8j.php:23\n\
    Stack trace:\n#0 /tmp/tmpc65u5k8j.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpc65u5k8j.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    $len = count($numbers);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        $result[] = $numbers[$i];\n        if ($i != $len - 1) $result[]\
    \ = $delimeter;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $count = count($numbers);\n    if ($count == 0) {\n        return $numbers;\n\
    \    } else {\n        $result = array();\n        for ($i = 0; $i < $count; $i++)\
    \ {\n            array_push($result, $numbers[$i]);\n            if ($i < $count\
    \ - 1) {\n                array_push($result, $delimeter);\n            }\n  \
    \      }\n        return $result;\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    // your code here\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmavfkvuw.php:16\n\
    Stack trace:\n#0 /tmp/tmpmavfkvuw.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpmavfkvuw.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers)) return $numbers;\n    $intercalated = array();\n   \
    \ foreach ($numbers as $number) {\n        $intercalated[] = $number;\n      \
    \  $intercalated[] = $delimeter;\n    }\n    array_pop($intercalated);\n    return\
    \ $intercalated;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    $i = 0;\n    foreach ($numbers as $n) {\n        if ($i\
    \ > 0) {\n            $result[] = $delimeter;\n        }\n        $result[] =\
    \ $n;\n        $i++;\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \tif (empty($numbers)) {\n\t\treturn $numbers;\n\t}\n\t$new_array = [];\n\tforeach\
    \ ($numbers as $number) {\n\t\t$new_array[] = $number;\n\t\t$new_array[] = $delimeter;\n\
    \t}\n\tarray_pop($new_array);\n\treturn $new_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$result = [];\n\tfor ($i = 0; $i < count($numbers); $i++) {\n\t\tif ($i != 0)\n\
    \t\t\t$result[] = $delimeter;\n\t\t$result[] = $numbers[$i];\n\t}\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), 7) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !==\
    \ array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$output = [];\n\t$length = count($numbers);\n\tfor ($i = 0; $i < $length; $i++)\
    \ {\n\t\t$output[] = $numbers[$i];\n\t\tif ($i < $length - 1) {\n\t\t\t$output[]\
    \ = $delimeter;\n\t\t}\n\t}\n\treturn $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$result = [];\n\tif (empty($numbers)) {\n\t\treturn $result;\n\t}\n\t$result[]\
    \ = $numbers[0];\n\tfor ($i = 1; $i < count($numbers); $i++) {\n\t\t$result[]\
    \ = $delimeter;\n\t\t$result[] = $numbers[$i];\n\t}\n\treturn $result;\n}\n\n\
    function candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \tif (count($numbers) === 0) {\n\t\treturn $numbers;\n\t} else if (count($numbers)\
    \ === 1) {\n\t\treturn $numbers;\n\t} else {\n\t\t$inserted = [];\n\t\tfor ($i\
    \ = 0; $i < count($numbers); $i++) {\n\t\t\t$inserted[] = $numbers[$i];\n\t\t\t\
    if ($i !== count($numbers) - 1) {\n\t\t\t\t$inserted[] = $delimeter;\n\t\t\t}\n\
    \t\t}\n\t\treturn $inserted;\n\t}\n}\nfunction candidate(...$args) {\n    return\
    \ intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers)) {\n        return $numbers;\n    }\n\n    $results =\
    \ [];\n    foreach ($numbers as $i => $number) {\n        if ($i > 0) {\n    \
    \        $results[] = $delimeter;\n        }\n        $results[] = $number;\n\
    \    }\n\n    return $results;\n}\n\nfunction candidate(...$args) {\n    return\
    \ intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    $previous_number = null;\n    foreach ($numbers as $number)\
    \ {\n        if ($previous_number) {\n            $result[] = $previous_number;\n\
    \            $result[] = $delimeter;\n        }\n        $previous_number = $number;\n\
    \    }\n    if ($previous_number) {\n        $result[] = $previous_number;\n \
    \   }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$result = [];\n\tfor ($i = 0; $i < count($numbers); $i++) {\n\t\t$result[] =\
    \ $numbers[$i];\n\t\tif ($i < count($numbers) - 1) {\n\t\t\t$result[] = $delimeter;\n\
    \t\t}\n\t}\n\treturn $result;\n}\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    for ($i = 0; $i < count($numbers); $i++) {\n        if\
    \ ($i != 0) {\n            $result[] = $delimeter;\n        }\n        $result[]\
    \ = $numbers[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers)) {\n        return $numbers;\n    }\n\n    $results =\
    \ array();\n    $last_position = count($numbers) - 1;\n    foreach ($numbers as\
    \ $position => $number) {\n        $results[] = $number;\n        if ($position\
    \ != $last_position) {\n            $results[] = $delimeter;\n        }\n    }\n\
    \n    return $results;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $results = [];\n    foreach ($numbers as $number) {\n        $results[] =\
    \ $number;\n        $results[] = $delimeter;\n    }\n    array_pop($results);\n\
    \    return $results;\n}\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$interspersed = array();\n\t$count = count($numbers);\n\tif ($count > 0) {\n\
    \t\t$interspersed[] = $numbers[0];\n\t\tfor ($i = 1; $i < $count; $i++) {\n\t\t\
    \t$interspersed[] = $delimeter;\n\t\t\t$interspersed[] = $numbers[$i];\n\t\t}\n\
    \t}\n\treturn $interspersed;\n}\n\nfunction candidate(...$args) {\n    return\
    \ intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) == 0) {\n        return [];\n    } else {\n        return\
    \ array_merge([$numbers[0]], array_map(function($x) use ($delimeter) {\n     \
    \       return [$delimeter, $x];\n        }, array_slice($numbers, 1)));\n   \
    \ }\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk3zx9b0u.php:23\n\
    Stack trace:\n#0 /tmp/tmpk3zx9b0u.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpk3zx9b0u.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$ans = array();\n\tif (empty($numbers)) {\n\t\treturn $ans;\n\t}\n\tfor ($i\
    \ = 0; $i < count($numbers); $i++) {\n\t\t$ans[] = $numbers[$i];\n\t\tif ($i <\
    \ count($numbers) - 1) {\n\t\t\t$ans[] = $delimeter;\n\t\t}\n\t}\n\treturn $ans;\n\
    }\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), 7) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !==\
    \ array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$new_numbers = [];\n\t$max = count($numbers);\n\tfor ($i = 0; $i < $max; $i++)\
    \ {\n\t\t$new_numbers[] = $numbers[$i];\n\t\tif ($i != $max - 1) {\n\t\t\t$new_numbers[]\
    \ = $delimeter;\n\t\t}\n\t}\n\treturn $new_numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if ($numbers == []) {\n        return [];\n    } else {\n        $n = $numbers[0];\n\
    \        array_shift($numbers);\n        $rest = intersperse($numbers, $delimeter);\n\
    \        return array_merge([$n], [[$delimeter]], $rest);\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppyand5s5.php:24\n\
    Stack trace:\n#0 /tmp/tmppyand5s5.php(28): test()\n#1 {main}\n  thrown in /tmp/tmppyand5s5.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers)) {\n        return [];\n    } else {\n        return\
    \ array_merge([$numbers[0]], intersperse(array_slice($numbers, 1), $delimeter),\n\
    \            [$delimeter]);\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc1hdp9nr.php:22\n\
    Stack trace:\n#0 /tmp/tmpc1hdp9nr.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpc1hdp9nr.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    $count = count($numbers);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        $result[] = $numbers[$i];\n        if ($i != $count - 1) {\n\
    \            $result[] = $delimeter;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), 7) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !==\
    \ array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) <= 1) {\n        return $numbers;\n    } else {\n   \
    \     return array_merge(\n            array_slice($numbers, 0, 1),\n        \
    \    array($delimeter),\n            intersperse(array_slice($numbers, 1), $delimeter)\n\
    \        );\n    }\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    foreach ($numbers as $i => $value) {\n        if ($i >\
    \ 0) {\n            $result[] = $delimeter;\n        }\n        $result[] = $value;\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers)) {\n        return $numbers;\n    }\n    $data = array_shift($numbers);\n\
    \    $len = count($numbers);\n    for ($i = 0; $i < $len; $i++) {\n        $data\
    \ .= $delimeter . $numbers[$i];\n    }\n    return $data;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2e0mpr4l.php:25\n\
    Stack trace:\n#0 /tmp/tmp2e0mpr4l.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2e0mpr4l.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$result = [];\n\tforeach ($numbers as $i => $v) {\n\t\t$result[] = $v;\n\t\t\
    if ($i < count($numbers) - 1) {\n\t\t\t$result[] = $delimeter;\n\t\t}\n\t}\n\t\
    return $result;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    for ($i = 0; $i < count($numbers); $i++) {\n        $result[]\
    \ = $numbers[$i];\n        if ($i !== count($numbers) - 1) {\n            $result[]\
    \ = $delimeter;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$result = [];\n\t$size = count($numbers);\n\tif ($size > 0) {\n\t\tfor ($i =\
    \ 0; $i < $size - 1; $i++) {\n\t\t\t$result[] = $numbers[$i];\n\t\t\t$result[]\
    \ = $delimeter;\n\t\t}\n\t\t$result[] = $numbers[$size - 1];\n\t}\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), 7) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !==\
    \ array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $acc = [];\n    $length = count($numbers);\n    for ($i = 0; $i < $length;\
    \ $i++) {\n        $acc[] = $numbers[$i];\n        if ($i < $length - 1) {\n \
    \           $acc[] = $delimeter;\n        }\n    }\n    return $acc;\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) < 2) {\n        return $numbers;\n    }\n    $result\
    \ = array();\n    $result[] = $numbers[0];\n    for ($i = 1; $i < count($numbers);\
    \ $i++) {\n        $result[] = $delimeter;\n        $result[] = $numbers[$i];\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$result = [];\n\t$i = 0;\n\tforeach ($numbers as $number) {\n\t\t$result[] =\
    \ $number;\n\t\tif ($i != count($numbers) - 1) {\n\t\t\t$result[] = $delimeter;\n\
    \t\t}\n\t\t$i++;\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    foreach($numbers as $key => $number) {\n        if ($key\
    \ != 0) {\n            $result[] = $delimeter;\n        }\n        $result[] =\
    \ $number;\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) === 0) {\n        return [];\n    }\n    $result = [];\n\
    \    foreach ($numbers as $number) {\n        $result[] = $number;\n        $result[]\
    \ = $delimeter;\n    }\n    array_pop($result); // Remove last element\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $numbersWithDelimeter = array();\n    foreach ($numbers as $i => $number)\
    \ {\n        if ($i > 0) {\n            $numbersWithDelimeter[] = $delimeter;\n\
    \        }\n        $numbersWithDelimeter[] = $number;\n    }\n    return $numbersWithDelimeter;\n\
    }\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), 7) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !==\
    \ array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $r = [];\n    $len = count($numbers);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        $r[] = $numbers[$i];\n        if ($i < $len - 1) {\n            $r[]\
    \ = $delimeter;\n        }\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    for ($i = 0; $i < count($numbers); $i++) {\n        $result[]\
    \ = $numbers[$i];\n        if ($i !== count($numbers) - 1) {\n            $result[]\
    \ = $delimeter;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$result = [];\n\t$left = true;\n\tforeach ($numbers as $n) {\n\t\tif ($left)\
    \ {\n\t\t\t$result[] = $n;\n\t\t\t$left = false;\n\t\t} else {\n\t\t\t$result[]\
    \ = $delimeter;\n\t\t\t$result[] = $n;\n\t\t\t$left = true;\n\t\t}\n\t}\n\treturn\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdb0lhhmq.php:29\n\
    Stack trace:\n#0 /tmp/tmpdb0lhhmq.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpdb0lhhmq.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) < 2) {\n        return $numbers;\n    } else {\n    \
    \    return array_merge(array_slice($numbers, 0, 1), [$delimeter], intersperse(array_slice($numbers,\
    \ 1), $delimeter));\n    }\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$result = [];\n\t$count = count($numbers);\n\tfor ($i = 0; $i < $count; $i++)\
    \ {\n\t\tarray_push($result, $numbers[$i]);\n\t\tif ($i < $count - 1)\n\t\t\t\
    array_push($result, $delimeter);\n\t}\n\treturn $result;\n}\n\nassert(intersperse([],\
    \ 4) == []);\nassert(intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]);\n\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    $counter = 0;\n    foreach ($numbers as $number) {\n \
    \       $result[] = $number;\n        if ($counter < count($numbers) - 1) {\n\
    \            $result[] = $delimeter;\n        }\n        $counter++;\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    for ($i = 0; $i < count($numbers); $i++) {\n        $result[]\
    \ = $numbers[$i];\n        if ($i < count($numbers) - 1) {\n            $result[]\
    \ = $delimeter;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (!count($numbers)) return [];\n    $result = [];\n    foreach ($numbers\
    \ as $i => $number) {\n        if ($i) $result[] = $delimeter;\n        $result[]\
    \ = $number;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    // if array is empty just return it\n    if (count($numbers) == 0) {\n  \
    \      return $numbers;\n    }\n    $result = [];\n    $number = $numbers[0];\n\
    \    array_push($result, $number);\n    for ($i = 1; $i < count($numbers); $i++)\
    \ {\n        array_push($result, $delimeter);\n        array_push($result, $numbers[$i]);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    $delimeter = (int)$delimeter;\n    foreach ($numbers as\
    \ $index => $number) {\n        $result[] = $number;\n        if ($index != count($numbers)\
    \ - 1) {\n            $result[] = $delimeter;\n        }\n    }\n    return $result;\n\
    }\necho implode(intersperse([1, 2, 3], 4));\nfunction candidate(...$args) {\n\
    \    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '14243'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) == 0) {\n        return $numbers;\n    }\n    $result\
    \ = array($numbers[0]);\n    for ($i = 1; $i < count($numbers); $i++) {\n    \
    \    $result[] = $delimeter;\n        $result[] = $numbers[$i];\n    }\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    foreach ($numbers as $n) {\n        if (!empty($result))\
    \ {\n            $result[] = $delimeter;\n        }\n        $result[] = $n;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $interspersedNumbers = [];\n    $length = count($numbers);\n    for ($i =\
    \ 0; $i < $length; $i++) {\n        $interspersedNumbers[] = $numbers[$i];\n \
    \       if ($i != $length - 1) {\n            $interspersedNumbers[] = $delimeter;\n\
    \        }\n    }\n    return $interspersedNumbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) === 0) {\n        return [];\n    } else {\n        $first\
    \ = array_shift($numbers);\n        $rest = intersperse($numbers, $delimeter);\n\
    \        array_unshift($rest, $first);\n        $i = 0;\n        while ($i < count($rest)\
    \ - 1) {\n            array_splice($rest, $i + 1, 0, $delimeter);\n          \
    \  $i += 2;\n        }\n        return $rest;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7nkwy6ml.php:29\n\
    Stack trace:\n#0 /tmp/tmp7nkwy6ml.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp7nkwy6ml.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers)) return $numbers;\n    $result = [array_shift($numbers)];\n\
    \    foreach ($numbers as $number) {\n        $result[] = $delimeter;\n      \
    \  $result[] = $number;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    for ($i = 0; $i < count($numbers); $i++) {\n        $result[]\
    \ = $numbers[$i];\n        if ($i != count($numbers) - 1) {\n            $result[]\
    \ = $delimeter;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$size = count($numbers);\n\t$result = array();\n\tfor ($i = 0; $i < $size; $i++)\
    \ {\n\t\t$result[] = $numbers[$i];\n\t\tif ($i < $size - 1)\n\t\t\t$result[] =\
    \ $delimeter;\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    for ($i = 0; $i < count($numbers); $i++) {\n        $result[]\
    \ = $numbers[$i];\n        if ($i != count($numbers) - 1) {\n            $result[]\
    \ = $delimeter;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) == 0) {\n        return [];\n    } else if (count($numbers)\
    \ == 1) {\n        return $numbers;\n    } else {\n        $numbers[1] = $delimeter;\n\
    \        return intersperse(array_slice($numbers, 1), $delimeter);\n    }\n}\n\
    function candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfpqq3j0e.php:23\n\
    Stack trace:\n#0 /tmp/tmpfpqq3j0e.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpfpqq3j0e.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    $length = count($numbers);\n    for ($i = 0; $i < $length;\
    \ $i++) {\n        $result[] = $numbers[$i];\n        if ($i < $length - 1) {\n\
    \            $result[] = $delimeter;\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$result = [];\n\tforeach ($numbers as $i => $n) {\n\t\tif ($i !== 0) {\n\t\t\
    \t$result[] = $delimeter;\n\t\t}\n\t\t$result[] = $n;\n\t}\n\treturn $result;\n\
    }\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \tif (count($numbers) == 0) {\n\t\treturn $numbers;\n\t} else {\n\t\t$first =\
    \ array_shift($numbers);\n\t\t$last = array_pop($numbers);\n\t\treturn array_merge(array($first),\
    \ map(function($item) use ($delimeter) {\n\t\t\treturn array($delimeter, $item);\n\
    \t\t}, $numbers), array($last));\n\t}\n}\n\nfunction candidate(...$args) {\n \
    \   return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function map() in /tmp/tmpsse7_u87.php:13\n\
    Stack trace:\n#0 /tmp/tmpsse7_u87.php(20): intersperse(Array, 8)\n#1 /tmp/tmpsse7_u87.php(25):\
    \ candidate(Array, 8)\n#2 /tmp/tmpsse7_u87.php(29): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpsse7_u87.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) == 0) return $numbers;\n    $result = [array_shift($numbers)];\n\
    \    foreach ($numbers as $number) {\n        $result[] = $delimeter;\n      \
    \  $result[] = $number;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $inter_numbers = array();\n    for ($i = 0; $i < count($numbers); $i++) {\n\
    \        $inter_numbers[] = $numbers[$i];\n        if ($i < count($numbers) -\
    \ 1) {\n            $inter_numbers[] = $delimeter;\n        }\n    }\n    return\
    \ $inter_numbers;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    // '$arr1' and '$arr2' are arrays\n    // '$arr1' is non-empty\n    // '$arr2'\
    \ is non-empty\n    function append($arr1, $arr2) {\n        return array_merge($arr1,\
    \ $arr2);\n    }\n\n    function pair($arr1, $arr2) {\n        return array_merge([$arr1],\
    \ [$arr2]);\n    }\n\n    function head($xs) {\n        return $xs[0];\n    }\n\
    \n    function tail($xs) {\n        return array_slice($xs, 1);\n    }\n\n   \
    \ // '$xs' is a list\n    // '$fn' is a function\n    // '$acc' is a list\n  \
    \  function reduce($xs, $fn, $acc) {\n        if (count($xs) === 0) {\n      \
    \      return $acc;\n        } else {\n            return reduce(tail($xs), $fn,\
    \ $fn(head($xs), $acc));\n        }\n    }\n\n    function zip($xs, $ys) {\n \
    \       if (count($xs) === 0) {\n            return [];\n        } else {\n  \
    \          return append(pair(head($xs), head($ys)), zip(tail($xs), tail($ys)));\n\
    \        }\n    }\n\n    function explode($xs) {\n        return reduce($xs, 'append',\
    \ []);\n    }\n\n    return explode(zip($numbers, array_fill(0, count($numbers)\
    \ - 1, $delimeter)));\n}\n\nprint_r(intersperse([], 4));\nprint_r(intersperse([1,\
    \ 2, 3], 4));\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Cannot redeclare explode() in /tmp/tmpmcy40tj5.php on line\
    \ 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) == 0) {\n        return [];\n    }\n    $ret = [$numbers[0]];\n\
    \    for ($i = 1; $i < count($numbers); $i++) {\n        $ret[] = $delimeter;\n\
    \        $ret[] = $numbers[$i];\n    }\n    return $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    $len = count($numbers);\n    if ($len == 0) {\n      \
    \  return $result;\n    } else {\n        $result[] = $numbers[0];\n        for\
    \ ($i = 1; $i < $len; $i++) {\n            $result[] = $delimeter;\n         \
    \   $result[] = $numbers[$i];\n        }\n        return $result;\n    }\n}\n\n\
    function candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    foreach ($numbers as $number) {\n        if (!empty($result))\n\
    \            $result[] = $delimeter;\n        $result[] = $number;\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers)) {\n        return [];\n    } else {\n        $head =\
    \ $numbers[0];\n        array_shift($numbers);\n        return array_merge([$head],\
    \ array_map(function($x) use ($delimeter) {\n            return [$delimeter, $x];\n\
    \        }, intersperse($numbers, $delimeter)));\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp44of5qsd.php:25\n\
    Stack trace:\n#0 /tmp/tmp44of5qsd.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp44of5qsd.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if ($numbers === []) {\n        return [];\n    }\n    $result = [];\n  \
    \  foreach ($numbers as $index => $number) {\n        if ($index > 0) {\n    \
    \        $result[] = $delimeter;\n        }\n        $result[] = $number;\n  \
    \  }\n    return $result;\n}\n\n$numbers = [\n    [],\n    [1, 2, 3],\n    [2,\
    \ 4, 6, 8],\n    [9, 8, 7, 6, 5, 4, 3, 2, 1],\n];\n\nforeach ($numbers as $number)\
    \ {\n    $result = intersperse($number, 4);\n    echo implode(', ', $result),\
    \ \"\\n\";\n}\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1, 4, 2, 4, 3\n2, 4, 4, 4, 6, 4, 8\n9, 4, 8, 4, 7, 4, 6, 4, 5, 4, 4,\
    \ 4, 3, 4, 2, 4, 1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    foreach ($numbers as $value) {\n        $result[] = $value;\n\
    \        $result[] = $delimeter;\n    }\n    array_pop($result);\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), 7) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !==\
    \ array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    // base case\n    if (count($numbers) <= 1) return $numbers;\n    // recursive\
    \ case\n    $result = array();\n    for ($i = 0; $i < count($numbers) - 1; $i++)\
    \ {\n        $result[] = $numbers[$i];\n        $result[] = $delimeter;\n    }\n\
    \    $result[] = $numbers[count($numbers) - 1];\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers)) {\n        return $numbers;\n    }\n    $result = array($numbers[0]);\n\
    \    for ($i = 1; $i < count($numbers); $i++) {\n        $result[] = $delimeter;\n\
    \        $result[] = $numbers[$i];\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    // for every 2 consecutive elements of the input list\n    for ($i = 0; $i\
    \ < count($numbers) - 1; $i++) {\n        // insert the `delimeter' between the\
    \ two elements\n        array_splice($numbers, ($i + 1) * 2 - 1, 0, $delimeter);\n\
    \    }\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n    return\
    \ intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) < 2) {\n        return $numbers;\n    } else {\n    \
    \    return array_merge(array($numbers[0]), [$delimeter], intersperse(array_slice($numbers,\
    \ 1), $delimeter));\n    }\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if ($numbers == []) {\n        return [];\n    }\n    $result = [$numbers[0]];\n\
    \    $size = count($numbers);\n    for ($i = 1; $i < $size; $i++) {\n        $result[]\
    \ = $delimeter;\n        $result[] = $numbers[$i];\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), 7) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !==\
    \ array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (!is_array($numbers)) {\n        throw new InvalidArgumentException(\"\
    first argument must be array\");\n    }\n    $previous = array_shift($numbers);\n\
    \    $interspersed = [$previous];\n    foreach ($numbers as $number) {\n     \
    \   $interspersed[] = $delimeter;\n        $interspersed[] = $number;\n    }\n\
    \    return $interspersed;\n}\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdh91kgg0.php:24\n\
    Stack trace:\n#0 /tmp/tmpdh91kgg0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpdh91kgg0.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    $i = 1;\n    while ($i < count($numbers)) {\n        $result[]\
    \ = $numbers[$i - 1];\n        $result[] = $delimeter;\n        $i++;\n    }\n\
    \    if ($i == count($numbers)) {\n        $result[] = $numbers[$i - 1];\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$results = [];\n\tfor ($i = 0; $i < count($numbers); $i++) {\n\t\tif ($i !=\
    \ 0) {\n\t\t\t$results[] = $delimeter;\n\t\t}\n\t\t$results[] = $numbers[$i];\n\
    \t}\n\treturn $results;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$result = [];\n\tforeach($numbers as $number) {\n\t\t$result[] = $number;\n\t\
    \t$result[] = $delimeter;\n\t}\n\tarray_pop($result);\n\treturn $result;\n}\n\n\
    function candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    foreach ($numbers as $number) {\n        if (!empty($result))\
    \ {\n            $result[] = $delimeter;\n        }\n        $result[] = $number;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    for ($i = 0; $i < count($numbers); $i++) {\n        $result[]\
    \ = $numbers[$i];\n        if ($i < count($numbers) - 1) {\n            $result[]\
    \ = $delimeter;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    for ($i = 0; $i < count($numbers); $i++) {\n        if\
    \ ($i != 0) {\n            $result[] = $delimeter;\n        }\n        $result[]\
    \ = $numbers[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) == 0) {\n        return [];\n    } else {\n        $last\
    \ = array_pop($numbers);\n        return array_merge(intersperse($numbers, $delimeter),\
    \ [$last]);\n    }\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpztd6z6b_.php:22\n\
    Stack trace:\n#0 /tmp/tmpztd6z6b_.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpztd6z6b_.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers)) return [];\n    $result = [array_shift($numbers)];\n\
    \    foreach ($numbers as $number) {\n        $result[] = $delimeter;\n      \
    \  $result[] = $number;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    foreach ($numbers as $key => $number) {\n        $result[]\
    \ = $number;\n        if ($key !== count($numbers) - 1) $result[] = $delimeter;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    $count = count($numbers);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        $result[] = $numbers[$i];\n        if ($i < $count - 1) {\n\
    \            $result[] = $delimeter;\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers)) {\n        return [];\n    }\n    $accum = [];\n   \
    \ $i = 0;\n    while (isset($numbers[$i])) {\n        $accum[] = $numbers[$i];\n\
    \        if (isset($numbers[$i + 1])) {\n            $accum[] = $delimeter;\n\
    \        }\n        $i++;\n    }\n    return $accum;\n}\n\n$numbers = [];\n$delimeter\
    \ = 'a';\nprint_r(intersperse($numbers, $delimeter));\n\n$numbers = [1, 2, 3];\n\
    $delimeter = 'a';\nprint_r(intersperse($numbers, $delimeter));\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\nArray\n(\n    [0] => 1\n    [1] => a\n    [2] => 2\n    [3]\
    \ => a\n    [4] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if ($numbers == array()) {\n        return array();\n    } else {\n     \
    \   $tail = intersperse(array_slice($numbers, 1), $delimeter);\n        return\
    \ array_merge(array($numbers[0]), array($delimeter), $tail);\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu43jtycm.php:22\n\
    Stack trace:\n#0 /tmp/tmpu43jtycm.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpu43jtycm.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$newNumbers = array();\n\tif (empty($numbers)) {\n\t\treturn $newNumbers;\n\t\
    }\n\t$length = count($numbers);\n\tfor ($i = 0; $i < $length - 1; $i++) {\n\t\t\
    $newNumbers[] = $numbers[$i];\n\t\t$newNumbers[] = $delimeter;\n\t}\n\t$newNumbers[]\
    \ = $numbers[$length - 1];\n\treturn $newNumbers;\n}\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) == 0) {\n        return [];\n    } else {\n        $first_num\
    \ = $numbers[0];\n        array_shift($numbers);\n        return array_merge([$first_num],\
    \ intersperse_helper($numbers, $delimeter));\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function intersperse_helper()\
    \ in /tmp/tmpl5xcdsac.php:13\nStack trace:\n#0 /tmp/tmpl5xcdsac.php(18): intersperse(Array,\
    \ 8)\n#1 /tmp/tmpl5xcdsac.php(23): candidate(Array, 8)\n#2 /tmp/tmpl5xcdsac.php(27):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpl5xcdsac.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    for ($i = 0; $i < count($numbers); $i++) {\n        $result[]\
    \ = $numbers[$i];\n        if ($i < count($numbers) - 1) {\n            $result[]\
    \ = $delimeter;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    // fill me in!\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxaxr4psx.php:16\n\
    Stack trace:\n#0 /tmp/tmpxaxr4psx.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpxaxr4psx.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$result = [];\n\t$len = count($numbers);\n\tfor ($i = 0; $i < $len; $i++) {\n\
    \t\t$result[] = $numbers[$i];\n\t\tif ($i + 1 != $len) {\n\t\t\t$result[] = $delimeter;\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$result = [];\n\tforeach ($numbers as $number) {\n\t\t$result[] = $number;\n\
    \t\t$result[] = $delimeter;\n\t}\n\tarray_pop($result); // Remove the last $delimeter\n\
    \treturn $result;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) == 0) {\n        return [];\n    }\n    $result = [];\n\
    \    $i = 0;\n    foreach ($numbers as $number) {\n        $result[] = $number;\n\
    \        if ($i + 1 < count($numbers)) {\n            $result[] = $delimeter;\n\
    \        }\n        $i++;\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    for ($i = 0; $i < count($numbers); $i++) {\n        $result[]\
    \ = $numbers[$i];\n        if ($i != count($numbers) - 1) {\n            $result[]\
    \ = $delimeter;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$result = [];\n\tforeach ($numbers as $number) {\n\t\tif (!empty($result)) {\n\
    \t\t\t$result[] = $delimeter;\n\t\t}\n\t\t$result[] = $number;\n\t}\n\treturn\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (!$numbers) {\n        return [];\n    }\n\n    $ans = [];\n    foreach\
    \ ($numbers as $n) {\n        $ans[] = $n;\n        $ans[] = $delimeter;\n   \
    \ }\n    array_pop($ans);\n\n    return $ans;\n}\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    for ($i = 0; $i < count($numbers); $i++) {\n        $result[]\
    \ = $numbers[$i];\n        if ($i < count($numbers) - 1) {\n            $result[]\
    \ = $delimeter;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$ret = [];\n\tforeach ($numbers as $k => $v) {\n\t\tif ($k > 0) {\n\t\t\t$ret[]\
    \ = $delimeter;\n\t\t}\n\t\t$ret[] = $v;\n\t}\n\treturn $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $ret = [];\n    $len = count($numbers);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        array_push($ret, $numbers[$i]);\n        if ($i != $len - 1) {\n\
    \            array_push($ret, $delimeter);\n        }\n    }\n    return $ret;\n\
    }\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $ret = [];\n    $n = count($numbers);\n    for ($i = 0; $i < $n; $i++) {\n\
    \        array_push($ret, $numbers[$i]);\n        if ($i < $n - 1) {\n       \
    \     array_push($ret, $delimeter);\n        }\n    }\n    return $ret;\n}\n\n\
    function candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $items = [];\n    $len = count($numbers);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        $items[] = $numbers[$i];\n        if ($i < $len - 1) {\n        \
    \    $items[] = $delimeter;\n        }\n    }\n    return $items;\n}\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $length = count($numbers);\n    if ($length == 0) {\n        return $numbers;\n\
    \    }\n    $interspersed = [$numbers[0]];\n    for ($i = 1; $i < $length; $i++)\
    \ {\n        $interspersed[] = $delimeter;\n        $interspersed[] = $numbers[$i];\n\
    \    }\n    return $interspersed;\n}\n\nfunction candidate(...$args) {\n    return\
    \ intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) === 0) {\n        return $numbers;\n    } else {\n  \
    \      $next = array_slice($numbers, 1);\n        return array_merge([array_shift($numbers)],\
    \ array_merge([$delimeter], intersperse($next, $delimeter)));\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3097ormr.php:22\n\
    Stack trace:\n#0 /tmp/tmp3097ormr.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp3097ormr.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    for ($i = 0; $i < count($numbers); $i++) {\n        if\
    \ ($i == 0) {\n            $result[] = $numbers[$i];\n        } else {\n     \
    \       $result[] = $delimeter;\n            $result[] = $numbers[$i];\n     \
    \   }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \tif (count($numbers) == 0) {\n\t\treturn $numbers;\n\t} else {\n\t\t$head = array_shift($numbers);\n\
    \t\t$tail = $numbers;\n\t\treturn array_merge(array($head), array($delimeter),\
    \ intersperse($tail, $delimeter));\n\t}\n}\n\n$example = array(1, 2, 3);\nvar_dump(intersperse($example,\
    \ 4));\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "array(6) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(4)\n  [2]=>\n  int(2)\n \
    \ [3]=>\n  int(4)\n  [4]=>\n  int(3)\n  [5]=>\n  int(4)\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpxh4zk7zh.php:25\nStack trace:\n#0 /tmp/tmpxh4zk7zh.php(29):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxh4zk7zh.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \tif (count($numbers) == 0) {\n\t\treturn $numbers;\n\t} else if (count($numbers)\
    \ == 1) {\n\t\treturn $numbers;\n\t} else {\n\t\t$tmp = $numbers[0];\n\t\t$tmp2\
    \ = intersperse(array_slice($numbers, 1), $delimeter);\n\t\t$tmp3 = array_merge(array($tmp),\
    \ array($delimeter), $tmp2);\n\t\treturn $tmp3;\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \tif (count($numbers) == 0) {\n\t\treturn $numbers;\n\t} else {\n\t\t$head = $numbers[0];\n\
    \t\tarray_shift($numbers);\n\t\t$intersperse_tail = intersperse($numbers, $delimeter);\n\
    \t\treturn array_merge(array($head), array($delimeter), $intersperse_tail);\n\t\
    }\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5zgmeph3.php:24\n\
    Stack trace:\n#0 /tmp/tmp5zgmeph3.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp5zgmeph3.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    $n = count($numbers);\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $result[] = $numbers[$i];\n        if ($i != $n - 1) {\n        \
    \    $result[] = $delimeter;\n        }\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    // Not so good solution (and not functional)\n    // if (count($numbers)\
    \ <= 1) {\n    //     return $numbers;\n    // }\n    // $res = [];\n    // for\
    \ ($i = 0; $i < count($numbers) - 1; $i++) {\n    //     $res[] = $numbers[$i];\n\
    \    //     $res[] = $delimeter;\n    // }\n    // $res[] = $numbers[count($numbers)\
    \ - 1];\n    // return $res;\n\n    // Better solution:\n    // $res = [];\n \
    \   // foreach ($numbers as $number) {\n    //     $res[] = $number;\n    // \
    \    $res[] = $delimeter;\n    // }\n    // return array_slice($res, 0, count($res)\
    \ - 1);\n\n    // Best solution:\n    // return array_slice(array_merge(array_fill(0,\
    \ count($numbers) * 2 - 1, $delimeter), $numbers), 1);\n\n    // Very good solution\n\
    \    // return array_reduce($numbers, function ($a, $b) use ($delimeter) {\n \
    \   //     return array_merge($a, [$b, $delimeter]);\n    // }, []);\n\n    //\
    \ Very good solution\n    return array_reduce($numbers, function ($a, $b) use\
    \ ($delimeter) {\n        return $a === null ? [$b] : array_merge($a, [$delimeter,\
    \ $b]);\n    }, null);\n}\n\nvar_dump(intersperse([], 4));\nvar_dump(intersperse([1,\
    \ 2, 3], 4));\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "NULL\narray(5) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(4)\n  [2]=>\n  int(2)\n\
    \  [3]=>\n  int(4)\n  [4]=>\n  int(3)\n}\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp5wgb4e6m.php:49\nStack trace:\n#0 /tmp/tmp5wgb4e6m.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5wgb4e6m.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers)) {\n        return [];\n    }\n    if (count($numbers)\
    \ == 1) {\n        return $numbers;\n    }\n    $result = [];\n    foreach ($numbers\
    \ as $index => $number) {\n        $result[] = $number;\n        if ($index <\
    \ count($numbers) - 1) {\n            $result[] = $delimeter;\n        }\n   \
    \ }\n    return $result;\n}\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) == 0) {\n        return [];\n    }\n    else if (count($numbers)\
    \ == 1) {\n        return $numbers;\n    }\n    else {\n        $result = [$numbers[0]];\n\
    \        $i = 1;\n        while ($i < count($numbers)) {\n            array_push($result,\
    \ $delimeter);\n            array_push($result, $numbers[$i]);\n            $i++;\n\
    \        }\n        return $result;\n    }\n}\nfunction candidate(...$args) {\n\
    \    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    foreach($numbers as $index => $number) {\n        if ($index\
    \ != 0) {\n            $result[] = $delimeter;\n        }\n        $result[] =\
    \ $number;\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (!$numbers) {\n        return [];\n    }\n\n    $result = [\n        array_shift($numbers)\n\
    \    ];\n\n    foreach ($numbers as $number) {\n        $result[] = $delimeter;\n\
    \        $result[] = $number;\n    }\n\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    $length = count($numbers);\n    for ($i = 0; $i < $length;\
    \ $i++) {\n        $result[] = $numbers[$i];\n        if ($i < $length - 1) {\n\
    \            $result[] = $delimeter;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), 7) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !==\
    \ array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    $length = count($numbers);\n    if ($length > 0) {\n \
    \       $result[] = $numbers[0];\n        for ($i = 1; $i < $length; $i++) {\n\
    \            $result[] = $delimeter;\n            $result[] = $numbers[$i];\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    // TODO\n}\n```\n\n```php\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5kqu9q5s.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    $n = count($numbers);\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $result[] = $numbers[$i];\n        if ($i < $n - 1) {\n         \
    \   $result[] = $delimeter;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (!count($numbers)) return $numbers;\n    return array_slice($numbers,\
    \ 0, 1) + [$delimeter] + intersperse(array_slice($numbers, 1), $delimeter);\n\
    }\n\n$test_case = [[], 4];\nassert(intersperse($test_case[0], $test_case[1]) ===\
    \ $test_case[0]);\n\n$test_case = [[1, 2, 3], 4];\nassert(intersperse($test_case[0],\
    \ $test_case[1]) === [1, 4, 2, 4, 3]);\n\nfunction candidate(...$args) {\n   \
    \ return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert(intersperse($test_case[0], $test_case[1]) ===\
    \ [1, 4, 2, 4, 3]) failed in /tmp/tmppgvrr8xu.php on line 16\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmppgvrr8xu.php:24\nStack trace:\n#0 /tmp/tmppgvrr8xu.php(28):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppgvrr8xu.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    $n = count($numbers);\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $result[] = $numbers[$i];\n        if ($i < $n - 1) {\n         \
    \   $result[] = $delimeter;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) == 0) {\n        return [];\n    } else if (count($numbers)\
    \ == 1) {\n        return $numbers;\n    } else {\n        return [$numbers[0],\
    \ $delimeter] + intersperse(array_slice($numbers, 1), $delimeter);\n    }\n}\n\
    \nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp063uirt0.php:23\n\
    Stack trace:\n#0 /tmp/tmp063uirt0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp063uirt0.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers)) {\n        return $numbers;\n    }\n    if (sizeof($numbers)\
    \ == 1) {\n        return $numbers;\n    }\n    $result = array();\n    foreach($numbers\
    \ as $i => $x) {\n        if ($i != 0) {\n            $result[] = $delimeter;\n\
    \        }\n        $result[] = $x;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) == 0) {\n        return [];\n    }\n    $new_array =\
    \ [];\n    $i = 0;\n    foreach ($numbers as $number) {\n        if ($i != 0)\
    \ {\n            $new_array[] = $delimeter;\n        }\n        $new_array[] =\
    \ $number;\n        $i += 1;\n    }\n    return $new_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$result = [];\n\t$length = count($numbers);\n\tfor ($i = 0; $i < $length; $i++)\
    \ {\n\t\t$result[] = $numbers[$i];\n\t\tif ($i + 1 < $length) {\n\t\t\t$result[]\
    \ = $delimeter;\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    foreach ($numbers as $key => $number) {\n        if ($key\
    \ != 0) {\n            $result[] = $delimeter;\n        }\n        $result[] =\
    \ $number;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    foreach ($numbers as $number) {\n        if (!$result)\
    \ {\n            $result[] = $number;\n        } else {\n            $result[]\
    \ = $delimeter;\n            $result[] = $number;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    $len = count($numbers);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        $result[] = $numbers[$i];\n        if ($i < $len - 1) {\n       \
    \     $result[] = $delimeter;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) == 0) {\n        return $numbers;\n    }\n    else {\n\
    \        $numbers2 = intersperse(array_slice($numbers, 1), $delimeter);\n    \
    \    return array_merge([$numbers[0]], array_merge([$delimeter], $numbers2));\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz845a8ir.php:23\n\
    Stack trace:\n#0 /tmp/tmpz845a8ir.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpz845a8ir.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers)) {\n        return [];\n    }\n    $result = [$numbers[0]];\n\
    \    for ($i = 1; $i < count($numbers); $i++) {\n        $result[] = $delimeter;\n\
    \        $result[] = $numbers[$i];\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \tif(count($numbers) === 0) {\n\t\treturn [];\n\t}\n\t$output = [];\n\t$length\
    \ = count($numbers);\n\tfor($i = 0; $i < $length; $i++) {\n\t\t$output[] = $numbers[$i];\n\
    \t\tif($i < $length - 1) {\n\t\t\t$output[] = $delimeter;\n\t\t}\n\t}\n\treturn\
    \ $output;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    $len = count($numbers);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        $result[] = $numbers[$i];\n        if ($i != $len - 1) {\n      \
    \      $result[] = $delimeter;\n        }\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    $count = count($numbers);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        array_push($result, $numbers[$i]);\n        if ($i < $count\
    \ - 1) {\n            array_push($result, $delimeter);\n        }\n    }\n   \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    $length = count($numbers);\n    if ($length == 0) {\n\
    \        return $result;\n    }\n    $result[] = $numbers[0];\n    for ($i = 1;\
    \ $i < $length; $i++) {\n        $result[] = $delimeter;\n        $result[] =\
    \ $numbers[$i];\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n\
    \    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \tif (empty($numbers)) {\n\t\treturn [];\n\t} else {\n\t\t$hd = array_shift($numbers);\n\
    \t\treturn array_merge([$hd], array_fill(0, count($numbers), $delimeter), $numbers);\n\
    \t}\n}\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr3g53dfc.php:21\n\
    Stack trace:\n#0 /tmp/tmpr3g53dfc.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpr3g53dfc.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$newNumbers = array();\n\tforeach ($numbers as $k => $v) {\n\t\t$newNumbers[]\
    \ = $v;\n\t\tif ($k < count($numbers) - 1) {\n\t\t\t$newNumbers[] = $delimeter;\n\
    \t\t}\n\t}\n\treturn $newNumbers;\n}\nfunction candidate(...$args) {\n    return\
    \ intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$result = [];\n\tforeach ($numbers as $number) {\n\t\t$result[] = $number;\n\
    \t\t$result[] = $delimeter;\n\t}\n\tarray_pop($result);\n\treturn $result;\n}\n\
    \nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) <= 1) {\n        return $numbers;\n    }\n    $result\
    \ = array();\n    $result[] = $numbers[0];\n    for ($i = 1; $i < count($numbers);\
    \ $i++) {\n        $result[] = $delimeter;\n        $result[] = $numbers[$i];\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$result = [];\n\tforeach ($numbers as $index => $number) {\n\t\t$result[] =\
    \ $number;\n\t\tif ($index < count($numbers) - 1) {\n\t\t\t$result[] = $delimeter;\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) == 0) {\n        return [];\n    } else {\n        $head\
    \ = $numbers[0];\n        $tail = array_slice($numbers, 1);\n        return array_merge([$head],\
    \ intersperse($tail, $delimeter), [$delimeter]);\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7kmwzlcd.php:23\n\
    Stack trace:\n#0 /tmp/tmp7kmwzlcd.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp7kmwzlcd.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$inter = array();\n\tfor ($i = 0; $i < count($numbers); $i++) {\n\t\t$inter[]\
    \ = $numbers[$i];\n\t\tif ($i < count($numbers) - 1)\n\t\t\t$inter[] = $delimeter;\n\
    \t}\n\treturn $inter;\n}\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if ($numbers == []) {\n        return [];\n    }\n    if (count($numbers)\
    \ == 1) {\n        return $numbers;\n    }\n    $lhs = $numbers[0];\n    $rhs\
    \ = intersperse(array_slice($numbers, 1), $delimeter);\n    return array_merge([$lhs],\
    \ array_merge([$delimeter], $rhs));\n}\n\nfunction candidate(...$args) {\n   \
    \ return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (sizeof($numbers) < 2) {\n        return $numbers;\n    }\n    $result\
    \ = [];\n    for ($i = 0; $i < sizeof($numbers) - 1; $i++) {\n        $result[]\
    \ = $numbers[$i];\n        $result[] = $delimeter;\n    }\n    $result[] = $numbers[sizeof($numbers)\
    \ - 1];\n    return $result;\n}\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    foreach ($numbers as $index => $number) {\n        $result[]\
    \ = $number;\n        if ($index + 1 < count($numbers)) {\n            $result[]\
    \ = $delimeter;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) <= 1) {\n        return $numbers;\n    }\n    $result\
    \ = array();\n    foreach ($numbers as $index => $value) {\n        $result[]\
    \ = $value;\n        if ($index < count($numbers) - 1) {\n            $result[]\
    \ = $delimeter;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $interspersed = array();\n    for ($i = 0; $i < count($numbers); $i++) {\n\
    \        $interspersed[] = $numbers[$i];\n        if ($i < count($numbers) - 1)\
    \ {\n            $interspersed[] = $delimeter;\n        }\n    }\n    return $interspersed;\n\
    }\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), 7) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !==\
    \ array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
