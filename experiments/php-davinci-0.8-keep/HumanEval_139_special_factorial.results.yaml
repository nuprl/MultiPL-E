name: HumanEval_139_special_factorial
language: php
results:
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = $n;\n    for ($i = $n - 1; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgmx7ew9o.php:22\n\
    Stack trace:\n#0 /tmp/tmpgmx7ew9o.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpgmx7ew9o.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ // This is your job. :)\n  $f = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $f\
    \ *= $i;\n  }\n  return $f;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm_tonjq2.php:25\n\
    Stack trace:\n#0 /tmp/tmpm_tonjq2.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpm_tonjq2.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $f=1;\n  for($i=$n;$i>0;$i--){\n    $f*=$i;\n  }\n  for($i=$n-1;$i>0;$i--){\n\
    \    $f*=$i;\n  }\n  for($i=$n-2;$i>0;$i--){\n    $f*=$i;\n  }\n  return $f;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hmsqqk.php:30\n\
    Stack trace:\n#0 /tmp/tmpd1hmsqqk.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpd1hmsqqk.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0) return 1;\n    $ret = 1;\n    while ($n > 0) {\n        $ret\
    \ *= factorial($n);\n        $n--;\n    }\n    return $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpzm6bnp2x.php:14\nStack trace:\n#0 /tmp/tmpzm6bnp2x.php(21): special_factorial(4)\n\
    #1 /tmp/tmpzm6bnp2x.php(25): candidate(4)\n#2 /tmp/tmpzm6bnp2x.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzm6bnp2x.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if($n > 0) {\n    $fact = 1;\n    for($i = $n; $i > 0; $i--) {\n      $fact\
    \ *= $i;\n    }\n    for($i = $n - 1; $i > 0; $i--) {\n      $fact *= $i;\n  \
    \  }\n    for($i = $n - 2; $i > 0; $i--) {\n      $fact *= $i;\n    }\n    return\
    \ $fact;\n  }\n  return 0;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8sr9lmjh.php:32\n\
    Stack trace:\n#0 /tmp/tmp8sr9lmjh.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp8sr9lmjh.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if($n == 0) {\n    return 1;\n  }\n  $output = 1;\n  for($i = $n; $i > 0; $i--)\
    \ {\n    $output *= $i;\n  }\n  return $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1ri75mc.php:26\n\
    Stack trace:\n#0 /tmp/tmpd1ri75mc.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpd1ri75mc.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if (is_int($n) and $n > 0) {\n        $numbers = range(1, $n);\n        $factorials\
    \ = array_map('factorial', $numbers);\n        return array_product($factorials);\n\
    \    }\n    return 0;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_map() expects parameter 1 to be a valid callback, function\
    \ 'factorial' not found or invalid function name in /tmp/tmpvrivow1c.php on line\
    \ 13\n\nWarning: array_product() expects parameter 1 to be array, null given in\
    \ /tmp/tmpvrivow1c.php on line 14\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpvrivow1c.php:24\nStack trace:\n#0 /tmp/tmpvrivow1c.php(30): test()\n\
    #1 {main}\n  thrown in /tmp/tmpvrivow1c.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $acum = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $acum *= factorial($i);\n\
    \    }\n    return $acum;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpwdixn0y3.php:13\nStack trace:\n#0 /tmp/tmpwdixn0y3.php(19): special_factorial(4)\n\
    #1 /tmp/tmpwdixn0y3.php(23): candidate(4)\n#2 /tmp/tmpwdixn0y3.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpwdixn0y3.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmphrryrabj.php:13\nStack trace:\n#0 /tmp/tmphrryrabj.php(19): special_factorial(4)\n\
    #1 /tmp/tmphrryrabj.php(23): candidate(4)\n#2 /tmp/tmphrryrabj.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmphrryrabj.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   // Initialize the product to 1.\n    $product = 1;\n    // Write a for loop\
    \ that goes from n to 1.\n    for ($i = $n; $i > 0; $i--) {\n        // Update\
    \ the product by multiplying it by i.\n        $product *= $i;\n    }\n    //\
    \ Return the product.\n    return $product;\n}\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdkz9nd2y.php:26\n\
    Stack trace:\n#0 /tmp/tmpdkz9nd2y.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpdkz9nd2y.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  while ($n >= 1) {\n    $result *= $n;\n    $n--;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2s80jfz5.php:24\n\
    Stack trace:\n#0 /tmp/tmp2s80jfz5.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp2s80jfz5.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $res = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $res *= $i;\n  }\n  for ($i\
    \ = $n - 1; $i > 0; $i--) {\n    $res *= $i;\n  }\n  for ($i = $n - 2; $i > 0;\
    \ $i--) {\n    $res *= $i;\n  }\n  return $res;\n}\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcpv3guzk.php:29\n\
    Stack trace:\n#0 /tmp/tmpcpv3guzk.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpcpv3guzk.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = function($number) use (&$factorial) {\n        if ($number ==\
    \ 0) {\n            return 1;\n        }\n        return $number * $factorial($number\
    \ - 1);\n    };\n    return $factorial($n) ** $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk2imdyic.php:25\n\
    Stack trace:\n#0 /tmp/tmpk2imdyic.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpk2imdyic.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $sum = 1;\n\tfor ($i = 1; $i <= $n; $i++) {\n\t\t$sum *= $i;\n\t}\n\treturn $sum;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq1qxojpx.php:23\n\
    Stack trace:\n#0 /tmp/tmpq1qxojpx.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpq1qxojpx.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n > 0) {\n    $factorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n    \
    \  $factorial *= $i;\n    }\n    return $factorial * special_factorial($n - 1);\n\
    \  } else {\n    return 1;\n  }\n}\n\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\n\nprint special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpakm9rj43.php:24\n\
    Stack trace:\n#0 /tmp/tmpakm9rj43.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpakm9rj43.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = $n;\n    while ($n-- > 1) {\n        $result *= $n;\n    }\n   \
    \ return $result;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw88vuogm.php:24\n\
    Stack trace:\n#0 /tmp/tmpw88vuogm.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpw88vuogm.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $fact = 1;\n    while ($n > 0) {\n        $fact *= $n--;\n    }\n    return\
    \ $fact;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphb9cxnll.php:23\n\
    Stack trace:\n#0 /tmp/tmphb9cxnll.php(29): test()\n#1 {main}\n  thrown in /tmp/tmphb9cxnll.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $value = 1;\n  while ($n > 0) {\n    $value *= $n;\n    $n--;\n  }\n  return\
    \ $value;\n}\n\nassert(special_factorial(4) == 288);\nassert(special_factorial(5)\
    \ == 34560);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert(special_factorial(4) == 288) failed in /tmp/tmpks35asx5.php\
    \ on line 19\n\nWarning: assert(): assert(special_factorial(5) == 34560) failed\
    \ in /tmp/tmpks35asx5.php on line 20\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpks35asx5.php:26\nStack trace:\n#0 /tmp/tmpks35asx5.php(32):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpks35asx5.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $specialFactorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $specialFactorial\
    \ *= getFactorial($i);\n    }\n    return $specialFactorial;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function getFactorial()\
    \ in /tmp/tmpck3_n2p7.php:13\nStack trace:\n#0 /tmp/tmpck3_n2p7.php(19): special_factorial(4)\n\
    #1 /tmp/tmpck3_n2p7.php(23): candidate(4)\n#2 /tmp/tmpck3_n2p7.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpck3_n2p7.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $res = 1;\n\tfor ($i = 1; $i <= $n; $i++) {\n\t\t$res *= $i;\n\t}\n\tfor ($i =\
    \ $n-1; $i > 0; $i--) {\n\t\t$res *= $i;\n\t}\n\treturn $res;\n}\n\necho special_factorial(4)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "144\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkdccro8f.php:27\n\
    Stack trace:\n#0 /tmp/tmpkdccro8f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpkdccro8f.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n <= 0) return 1;\n    return $n * special_factorial($n - 1);\n}\n\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb4wkq1dd.php:20\n\
    Stack trace:\n#0 /tmp/tmpb4wkq1dd.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpb4wkq1dd.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ return $n ? $n * special_factorial($n - 1) : 1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppeku6hm5.php:19\n\
    Stack trace:\n#0 /tmp/tmppeku6hm5.php(25): test()\n#1 {main}\n  thrown in /tmp/tmppeku6hm5.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $solution = 1;\n    for ($i = 1; $i <= $n; $i++){\n        $solution *= $i;\n\
    \    }\n    for ($i = 1; $i <= $n-1; $i++){\n        $solution *= $i;\n    }\n\
    \    for ($i = 1; $i <= $n-2; $i++){\n        $solution *= $i;\n    }\n    return\
    \ $solution;\n}\n\necho special_factorial(4) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "288\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph7xpo5s6.php:31\n\
    Stack trace:\n#0 /tmp/tmph7xpo5s6.php(36): test()\n#1 {main}\n  thrown in /tmp/tmph7xpo5s6.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ \n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdc30kge_.php:18\n\
    Stack trace:\n#0 /tmp/tmpdc30kge_.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpdc30kge_.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n == 0 || $n == 1) {\n    return 1;\n  }\n  $sum = 1;\n  for ($i = $n;\
    \ $i > 0; $i--) {\n    $sum *= $i;\n  }\n  return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpybcmq4ao.php:26\n\
    Stack trace:\n#0 /tmp/tmpybcmq4ao.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpybcmq4ao.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorail = function($n) use (&$factorail) {\n    if ($n == 1) {\n      return\
    \ 1;\n    } else {\n      return $n * $factorail($n - 1);\n    }\n  };\n  $result\
    \ = 1;\n  while ($n > 0) {\n    $result *= $factorail($n);\n    $n--;\n  }\n \
    \ return $result;\n}\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '288'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = function($n) use (&$factorial) {\n    if ($n === 0) {\n      return\
    \ 1;\n    } else {\n      return $n * $factorial($n - 1);\n    }\n  };\n\n  $acc\
    \ = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $acc *= $factorial($i);\n  }\n\n\
    \  return $acc;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '288'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\n\
    }\n\necho special_factorial(4); // should print 288\necho special_factorial(5);\
    \ // should print 34560\necho special_factorial(6); // should print 5913920\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpascrrsuf.php:22\n\
    Stack trace:\n#0 /tmp/tmpascrrsuf.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpascrrsuf.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if($n <= 0) return 0;\n  return factorial($n) * special_factorial($n - 1);\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp1j7whuvh.php:12\nStack trace:\n#0 /tmp/tmp1j7whuvh.php(16): special_factorial(4)\n\
    #1 /tmp/tmp1j7whuvh.php(20): candidate(4)\n#2 /tmp/tmp1j7whuvh.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1j7whuvh.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ // your code here\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmpjbssc_.php:18\n\
    Stack trace:\n#0 /tmp/tmpmpjbssc_.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpmpjbssc_.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  while ($n > 0) {\n    $factorial *= $n;\n    $n--;\n  }\n\
    \  return $factorial;\n}\n\nprint special_factorial(4) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn1hak5_a.php:25\n\
    Stack trace:\n#0 /tmp/tmpn1hak5_a.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpn1hak5_a.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n <= 0) {\n        return 1;\n    }\n    $factorial = 1;\n    for ($i\
    \ = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n    return $factorial\
    \ * special_factorial($n - 1);\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '288'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if($n < 0){\n    return null;\n  }\n\n  $result = 1;\n  for($i=1; $i<=$n; $i++){\n\
    \    $result *= $i;\n  }\n\n  for($i=$n-1; $i>=1; $i--){\n    $result *= $i;\n\
    \  }\n\n  return $result;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp76av3ces.php:31\n\
    Stack trace:\n#0 /tmp/tmp76av3ces.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp76av3ces.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $fac = 1;\n    for ($i=1; $i <= $n; $i++) {\n        $fac *= $i;\n    }\n\
    \    for ($i=1; $i < $n; $i++) {\n        $fac *= $i;\n    }\n    return $fac;\n\
    }\necho special_factorial(4) . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "144\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsney_ogk.php:26\n\
    Stack trace:\n#0 /tmp/tmpsney_ogk.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpsney_ogk.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $total = 1;\n\tfor ($i = $n; $i > 0; $i--) {\n\t\t$total *= $i;\n\t}\n\treturn\
    \ $total;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcp9oxonb.php:22\n\
    Stack trace:\n#0 /tmp/tmpcp9oxonb.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpcp9oxonb.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  while ($n > 0) {\n    $factorial *= $n--;\n  }\n  return\
    \ $factorial;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqao8h1lg.php:22\n\
    Stack trace:\n#0 /tmp/tmpqao8h1lg.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpqao8h1lg.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   // Write your code here...\n}\necho \"special_factorial(1) = \" . special_factorial(1)\
    \ . \"\\n\";\necho \"special_factorial(2) = \" . special_factorial(2) . \"\\n\"\
    ;\necho \"special_factorial(3) = \" . special_factorial(3) . \"\\n\";\necho \"\
    special_factorial(4) = \" . special_factorial(4) . \"\\n\";\necho \"special_factorial(5)\
    \ = \" . special_factorial(5) . \"\\n\";\necho \"special_factorial(7) = \" . special_factorial(7)\
    \ . \"\\n\";\necho \"special_factorial(9) = \" . special_factorial(9) . \"\\n\"\
    ;\necho \"special_factorial(12) = \" . special_factorial(12) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "special_factorial(1) = \nspecial_factorial(2) = \nspecial_factorial(3)\
    \ = \nspecial_factorial(4) = \nspecial_factorial(5) = \nspecial_factorial(7) =\
    \ \nspecial_factorial(9) = \nspecial_factorial(12) = \n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp20yigrnm.php:26\nStack trace:\n#0 /tmp/tmp20yigrnm.php(32):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp20yigrnm.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  for\
    \ ($i = $n-1; $i > 0; $i--) {\n    $result *= $i;\n  }\n  for ($i = $n-2; $i >\
    \ 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp257gj6ng.php:30\n\
    Stack trace:\n#0 /tmp/tmp257gj6ng.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp257gj6ng.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n <= 0) return 1;\n  return factorial($n) * special_factorial($n - 1);\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmppfvvfodz.php:12\nStack trace:\n#0 /tmp/tmppfvvfodz.php(16): special_factorial(4)\n\
    #1 /tmp/tmppfvvfodz.php(20): candidate(4)\n#2 /tmp/tmppfvvfodz.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmppfvvfodz.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if($n == 0) {\n    return 1;\n  }\n  $sum = 1;\n  for($i = $n; $i > 0; $i--)\
    \ {\n    $sum *= $i;\n  }\n  return $sum * special_factorial($n - 1);\n}\necho\
    \ special_factorial(4) . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "288\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = [];\n  for ($i = 1; $i <= $n; $i++) {\n    $result[] = $i;\n  }\n\
    \  return array_product($result);\n}\n\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0e1b78gt.php:23\n\
    Stack trace:\n#0 /tmp/tmp0e1b78gt.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp0e1b78gt.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ // TODO: implement the function\n}\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpskfh51hd.php:18\n\
    Stack trace:\n#0 /tmp/tmpskfh51hd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpskfh51hd.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpdnh5itgi.php:13\nStack trace:\n#0 /tmp/tmpdnh5itgi.php(19): special_factorial(4)\n\
    #1 /tmp/tmpdnh5itgi.php(23): candidate(4)\n#2 /tmp/tmpdnh5itgi.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdnh5itgi.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0) {\n        return 1;\n    } else {\n        return $n * special_factorial($n\
    \ - 1);\n    }\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcax3skew.php:23\n\
    Stack trace:\n#0 /tmp/tmpcax3skew.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpcax3skew.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $total = 1;\n\t$factorial = 1;\n\tfor ($i = $n; $i > 0; $i--) {\n\t\t$factorial\
    \ *= $i;\n\t\t$total *= $factorial;\n\t}\n\treturn $total;\n}\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk37g7yx2.php:24\n\
    Stack trace:\n#0 /tmp/tmpk37g7yx2.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpk37g7yx2.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   // Your code here\n}\n\necho special_factorial(3);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw5ie7s77.php:20\n\
    Stack trace:\n#0 /tmp/tmpw5ie7s77.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpw5ie7s77.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $i = $n;\n    $factorial = $n;\n    $finalFactorial = $n;\n    while ($i >\
    \ 1) {\n        $factorial = $factorial * ($i - 1);\n        $finalFactorial =\
    \ $finalFactorial * $factorial;\n        $i--;\n    }\n    return $finalFactorial;\n\
    }\necho special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "27648\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgttq0vqo.php:27\n\
    Stack trace:\n#0 /tmp/tmpgttq0vqo.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpgttq0vqo.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmppy0tfod4.php:13\nStack trace:\n#0 /tmp/tmppy0tfod4.php(18): special_factorial(4)\n\
    #1 /tmp/tmppy0tfod4.php(22): candidate(4)\n#2 /tmp/tmppy0tfod4.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmppy0tfod4.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkfzg19hb.php:24\n\
    Stack trace:\n#0 /tmp/tmpkfzg19hb.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpkfzg19hb.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n === 0) return 1;\n    return brazilian_factorial($n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function brazilian_factorial()\
    \ in /tmp/tmpjul48i60.php:12\nStack trace:\n#0 /tmp/tmpjul48i60.php(16): special_factorial(4)\n\
    #1 /tmp/tmpjul48i60.php(20): candidate(4)\n#2 /tmp/tmpjul48i60.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpjul48i60.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  while ($n > 0) {\n    $factorial *= factorial($n);\n    $n--;\n\
    \  }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp4171cokx.php:13\nStack trace:\n#0 /tmp/tmp4171cokx.php(20): special_factorial(4)\n\
    #1 /tmp/tmp4171cokx.php(24): candidate(4)\n#2 /tmp/tmp4171cokx.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4171cokx.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $fac = 1;\n  for ($i=1; $i <= $n; $i++) {\n    $fac *= $i;\n  }\n  for ($i=1;\
    \ $i < $n; $i++) {\n    $fac *= $i;\n  }\n  return $fac;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmdbym7ix.php:26\n\
    Stack trace:\n#0 /tmp/tmpmdbym7ix.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpmdbym7ix.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $fact = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $fact *= $i;\n    }\n\
    \    return $fact;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp65fpkrgj.php:24\n\
    Stack trace:\n#0 /tmp/tmp65fpkrgj.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp65fpkrgj.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $total = 1;\n    while ($n > 0) {\n        $total *= $n;\n        $n--;\n\
    \    }\n    return $total;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvnzaf791.php:24\n\
    Stack trace:\n#0 /tmp/tmpvnzaf791.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpvnzaf791.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n <= 0) {\n        throw new InvalidArgumentException(\"$n must be greater\
    \ than 0\");\n    }\n    $prod = 1;\n    for ($i = 1; $i <= $n; $i++) {\n    \
    \    $prod *= factorial($i);\n    }\n    return $prod;\n}\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp34r16w37.php:16\nStack trace:\n#0 /tmp/tmp34r16w37.php(21): special_factorial(4)\n\
    #1 /tmp/tmp34r16w37.php(25): candidate(4)\n#2 /tmp/tmp34r16w37.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmp34r16w37.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $total = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $total *= $i;\n  }\n  for\
    \ ($i = $n - 1; $i > 0; $i--) {\n    $total *= $i;\n  }\n  for ($i = $n - 2; $i\
    \ > 0; $i--) {\n    $total *= $i;\n  }\n  return $total;\n}\n\necho special_factorial(1)\
    \ . \"\\n\";\necho special_factorial(2) . \"\\n\";\necho special_factorial(3)\
    \ . \"\\n\";\necho special_factorial(4) . \"\\n\";\necho special_factorial(6)\
    \ . \"\\n\";\necho special_factorial(10) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "1\n2\n12\n288\n2073600\n53094139822080000\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpautjqya1.php:36\nStack trace:\n#0 /tmp/tmpautjqya1.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpautjqya1.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $f = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $f *= $i;\n  }\n  return $f;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfg2g2hwf.php:23\n\
    Stack trace:\n#0 /tmp/tmpfg2g2hwf.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpfg2g2hwf.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $f = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $f *= $i;\n  }\n  return $f *\
    \ special_factorial($n - 1);\n}\n\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpw1g5kr28.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $prod = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $prod *= factorial($i);\n\
    \    }\n    return $prod;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpydfkc7q7.php:13\nStack trace:\n#0 /tmp/tmpydfkc7q7.php(19): special_factorial(4)\n\
    #1 /tmp/tmpydfkc7q7.php(23): candidate(4)\n#2 /tmp/tmpydfkc7q7.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpydfkc7q7.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0) {\n        return 1;\n    }\n    $result = 1;\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n        $result *= factorial($i);\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpcbase40e.php:16\nStack trace:\n#0 /tmp/tmpcbase40e.php(21): special_factorial(4)\n\
    #1 /tmp/tmpcbase40e.php(25): candidate(4)\n#2 /tmp/tmpcbase40e.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmpcbase40e.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $total = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $total *= $i;\n  }\n  return\
    \ $total;\n}\n\n$n = 4;\necho special_factorial($n);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfk02r890.php:25\n\
    Stack trace:\n#0 /tmp/tmpfk02r890.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpfk02r890.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $total = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $total *= factorial($i);\n\
    \    }\n    return $total;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpoxqbgkcx.php:13\nStack trace:\n#0 /tmp/tmpoxqbgkcx.php(19): special_factorial(4)\n\
    #1 /tmp/tmpoxqbgkcx.php(23): candidate(4)\n#2 /tmp/tmpoxqbgkcx.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpoxqbgkcx.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = function($n) use (&$factorial) {\n    if ($n == 0) {\n      return\
    \ 1;\n    } else {\n      return $n * $factorial($n - 1);\n    }\n  };\n  $result\
    \ = 1;\n  while ($n >= 1) {\n    $result *= $factorial($n);\n    $n--;\n  }\n\
    \  return $result;\n}\n\necho special_factorial(4) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "288\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $n = (int)$n;\n    if ($n < 0) {\n        return 0;\n    }\n    $f = 1;\n\
    \    for ($i = $n; $i > 0; $i--) {\n        $f *= $i;\n    }\n    return $f;\n\
    }\n\nclass test {\n    function __construct($a, $e) {\n        $this->a = $a;\n\
    \        $this->e = $e;\n    }\n}\n\n$tests = [\n    new test(4, 288),\n    new\
    \ test(5, 34560),\n    new test(6, 112320),\n    new test(7, 4275200),\n    new\
    \ test(8, 229346560),\n    new test(9, 169869312000),\n    new test(10, 20143449408000),\n\
    \    new test(11, 2998186168614400),\n    new test(12, 617583542077699200),\n\
    \    new test(13, 1807856255212088320000),\n    new test(14, 666993726283744358400000),\n\
    \    new test(15, 3405165749600032061868800000),\n    new test(16, 23574716098655565574294732800000),\n\
    \    new test(17, 2375594899481677615444430206976000000),\n    new test(18, 3335944516104656711185353657651200000000),\n\
    \    new test(19, 6248216176313347956239898984224561459200000000),\n    new test(20,\
    \ 165664502781198841757534988145864688218777600000000),\n    new test(21, 6428368065975605939109638583332563649769195545600000000),\n\
    \    new test(22, 3324988809415894779797695774626133697383412986060800000000),\n\
    \    new test(23, 23464259328338001419041855748849409630017009025226342400000000),\n\
    \nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbf12x4u2.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $product = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $product *= factorial($i);\n\
    \  }\n  return $product;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp9esmpwo9.php:13\nStack trace:\n#0 /tmp/tmp9esmpwo9.php(19): special_factorial(4)\n\
    #1 /tmp/tmp9esmpwo9.php(23): candidate(4)\n#2 /tmp/tmp9esmpwo9.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9esmpwo9.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $array=[];\n  $result=1;\n  for($i=$n;$i>0;$i--){\n    $result*=$i;\n    $array[]=$result;\n\
    \  }\n  return array_product($array);\n}\n\nvar_dump(special_factorial(4));\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "int(27648)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkczturop.php:26\n\
    Stack trace:\n#0 /tmp/tmpkczturop.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpkczturop.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  for\
    \ ($i = $n - 1; $i > 0; $i--) {\n    $result *= $i;\n  }\n  for ($i = $n - 2;\
    \ $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ojf2040.php:29\n\
    Stack trace:\n#0 /tmp/tmp7ojf2040.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp7ojf2040.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $array = [];\n  for ($i = $n; $i > 0; $i--) {\n    $array[] = $i;\n  }\n  $factorial\
    \ = array_product($array);\n  return $factorial;\n}\nprint special_factorial(4);\n\
    print \"\\n\";\nprint special_factorial(5);\nprint \"\\n\";\nprint special_factorial(1);\n\
    print \"\\n\";\nprint special_factorial(0);\nprint \"\\n\";\nprint special_factorial(3);\n\
    print \"\\n\";\nprint special_factorial(2);\nprint \"\\n\";\nprint special_factorial(6);\n\
    print \"\\n\";\nprint special_factorial(7);\nprint \"\\n\";\nprint special_factorial(8);\n\
    print \"\\n\";\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "24\n120\n1\n1\n6\n2\n720\n5040\n40320\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpab01lnd6.php:41\nStack trace:\n#0 /tmp/tmpab01lnd6.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpab01lnd6.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  $aux_n = $n;\n  $i = 1;\n  while ($i <= $n) {\n    $factorial\
    \ *= $aux_n;\n    $aux_n--;\n    $i++;\n  }\n  $i = 1;\n  while ($i < $n) {\n\
    \    $factorial *= $i;\n    $i++;\n  }\n  return $factorial;\n}\necho special_factorial(6);\n\
    \ ?>\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "86400function candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpkph7zlie.php:13\nStack trace:\n#0 /tmp/tmpkph7zlie.php(19): special_factorial(4)\n\
    #1 /tmp/tmpkph7zlie.php(23): candidate(4)\n#2 /tmp/tmpkph7zlie.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpkph7zlie.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   // CODE HERE\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7_t7_dcg.php:19\n\
    Stack trace:\n#0 /tmp/tmp7_t7_dcg.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp7_t7_dcg.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorials = [];\n  for ($i = $n; $i > 0; $i--) {\n    $factorials[] = $i;\n\
    \  }\n  $factorial = array_product($factorials);\n  return $factorial;\n}\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4r6tszzi.php:23\n\
    Stack trace:\n#0 /tmp/tmp4r6tszzi.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp4r6tszzi.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $res = 1;\n    for ($i=1; $i <= $n; $i++) {\n        $res *= $i;\n    }\n\
    \    for ($i=$n-1; $i > 0; $i--) {\n        $res *= $i;\n    }\n    return $res;\n\
    }\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyiqi0n0z.php:25\n\
    Stack trace:\n#0 /tmp/tmpyiqi0n0z.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpyiqi0n0z.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $fac = 1;\n    for ($i=1; $i<=$n; $i++) {\n        $fac *= $i;\n    }\n  \
    \  return $fac;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbn71g_s3.php:22\n\
    Stack trace:\n#0 /tmp/tmpbn71g_s3.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpbn71g_s3.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $total = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $total *= $i;\n  }\n  return\
    \ $total;\n}\n\necho special_factorial(4);\nfunction candidate(...$args) {\n \
    \   return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp88y6zwdz.php:24\n\
    Stack trace:\n#0 /tmp/tmp88y6zwdz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp88y6zwdz.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n > 0) {\n    $total = 1;\n    for ($i = $n; $i > 0; $i--) {\n      $total\
    \ *= factorial($i);\n    }\n    return $total;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp4c_wk3_d.php:14\nStack trace:\n#0 /tmp/tmp4c_wk3_d.php(21): special_factorial(4)\n\
    #1 /tmp/tmp4c_wk3_d.php(25): candidate(4)\n#2 /tmp/tmp4c_wk3_d.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4c_wk3_d.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $counter = $n;\n  $result = 1;\n  while ($counter > 0) {\n    $result *= $counter;\n\
    \    $counter--;\n  }\n  while ($n > 1) {\n    $result *= $n - 1;\n    $n--;\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpule7us86.php:29\n\
    Stack trace:\n#0 /tmp/tmpule7us86.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpule7us86.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $number = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $number *= $i;\n\
    \    }\n    for ($i = $n - 1; $i > 0; $i--) {\n        $number *= $i;\n    }\n\
    \    for ($i = $n - 2; $i > 0; $i--) {\n        $number *= $i;\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphjc0u3hh.php:30\n\
    Stack trace:\n#0 /tmp/tmphjc0u3hh.php(35): test()\n#1 {main}\n  thrown in /tmp/tmphjc0u3hh.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ // return $n * ($n - 1) * ($n - 2) * ($n - 3) * ($n - 4) * ($n - 5) * ($n -\
    \ 6) * ($n - 7) * ($n - 8) * ($n - 9) * ($n - 10) * ($n - 11) * ($n - 12) * ($n\
    \ - 13) * ($n - 14) * ($n - 15) * ($n - 16) * ($n - 17) * ($n - 18) * ($n - 19)\
    \ * ($n - 20) * ($n - 21) * ($n - 22) * ($n - 23) * ($n - 24) * ($n - 25) * ($n\
    \ - 26) * ($n - 27) * ($n - 28) * ($n - 29) * ($n - 30) * ($n - 31) * ($n - 32)\
    \ * ($n - 33) * ($n - 34) * ($n - 35) * ($n - 36) * ($n - 37) * ($n - 38) * ($n\
    \ - 39) * ($n - 40) * ($n - 41) * ($n - 42) * ($n - 43) * ($n - 44) * ($n - 45)\
    \ * ($n - 46) * ($n - 47) * ($n - 48) * ($n - 49) * ($n - 50) * ($n - 51) * ($n\
    \ - 52) * ($n - 53) * ($n - 54) * ($n - 55) * ($n - 56) * ($n - 57) * ($n - 58)\
    \ * ($n - 59) * ($n - 60) * ($n - 61) * ($n - 62) * ($n - 63) * ($n - 64) * ($n\
    \ - 65) * ($n - 66) * ($n - 67) * ($n - 68) * ($n - 69) * ($n - 70) * ($n - 71)\
    \ * ($n - 72) * ($n - 73) * ($n - 74) * ($n - 75) * ($n - 76) * ($n - 77) * ($n\
    \ - 78) * ($n - 79) * ($n - 80) * ($n - 81) * ($n - 82) * ($n - 83) * ($n - 84)\
    \ * ($\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp32fwf9gu.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ // Write your code here\n  $specialFactorial = 1;\n  for ($i = $n; $i > 0; $i--)\
    \ {\n    $specialFactorial *= factorial($i);\n  }\n  return $specialFactorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpjztlv1f1.php:14\nStack trace:\n#0 /tmp/tmpjztlv1f1.php(20): special_factorial(4)\n\
    #1 /tmp/tmpjztlv1f1.php(24): candidate(4)\n#2 /tmp/tmpjztlv1f1.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpjztlv1f1.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  while ($n > 0) {\n    $result *= factorial($n);\n    $n--;\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpnzqicblm.php:13\nStack trace:\n#0 /tmp/tmpnzqicblm.php(20): special_factorial(4)\n\
    #1 /tmp/tmpnzqicblm.php(24): candidate(4)\n#2 /tmp/tmpnzqicblm.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpnzqicblm.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $val = $n;\n    for ($i = $n - 1; $i > 0; $i--) {\n        $val *= $i;\n \
    \   }\n    return $val;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpljuri5b7.php:23\n\
    Stack trace:\n#0 /tmp/tmpljuri5b7.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpljuri5b7.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  for ($i = $n - 1; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  for ($i =\
    \ $n - 2; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpor55zbu0.php:30\n\
    Stack trace:\n#0 /tmp/tmpor55zbu0.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpor55zbu0.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp4p0tmy9x.php:13\nStack trace:\n#0 /tmp/tmp4p0tmy9x.php(19): special_factorial(4)\n\
    #1 /tmp/tmp4p0tmy9x.php(23): candidate(4)\n#2 /tmp/tmp4p0tmy9x.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4p0tmy9x.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n == 0) return 1;\n  return factorial($n)*special_factorial($n-1);\n}\n\
    \nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpgnzy1g5v.php:12\nStack trace:\n#0 /tmp/tmpgnzy1g5v.php(16): special_factorial(4)\n\
    #1 /tmp/tmpgnzy1g5v.php(20): candidate(4)\n#2 /tmp/tmpgnzy1g5v.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgnzy1g5v.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   // YOUR CODE HERE\n    if ($n == 0) {\n        return 1;\n    } else {\n \
    \       $result = $n;\n        for ($i = $n - 1; $i > 0; $i--) {\n           \
    \ $result *= $i;\n        }\n        return $result;\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdlm0_909.php:27\n\
    Stack trace:\n#0 /tmp/tmpdlm0_909.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpdlm0_909.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n <= 0) {\n        return 0;\n    }\n    $result = 1;\n    for ($i =\
    \ $n; $i > 0; $i--) {\n        $result *= $i;\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplmbhr6op.php:26\n\
    Stack trace:\n#0 /tmp/tmplmbhr6op.php(32): test()\n#1 {main}\n  thrown in /tmp/tmplmbhr6op.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $fact = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $fact *= $i;\n  }\n  return\
    \ $fact;\n}\necho special_factorial(6);\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "720\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc92zmeug.php:23\n\
    Stack trace:\n#0 /tmp/tmpc92zmeug.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpc92zmeug.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $total = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $total *= $i;\n  }\n  for\
    \ ($i = $n - 1; $i > 0; $i--) {\n    $total *= $i;\n  }\n  for ($i = $n - 2; $i\
    \ > 0; $i--) {\n    $total *= $i;\n  }\n  return $total;\n}\necho special_factorial(4);\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "288\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn4__rxmh.php:30\n\
    Stack trace:\n#0 /tmp/tmpn4__rxmh.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpn4__rxmh.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $output = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $output *= $i;\n  }\n  for\
    \ ($i = $n - 1; $i > 0; $i--) {\n    $output *= $i;\n  }\n  return $output;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9vbzy4ce.php:26\n\
    Stack trace:\n#0 /tmp/tmp9vbzy4ce.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp9vbzy4ce.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ // Your code here\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzvubki6o.php:18\n\
    Stack trace:\n#0 /tmp/tmpzvubki6o.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpzvubki6o.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n}\n\
    \nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb86op4pf.php:18\n\
    Stack trace:\n#0 /tmp/tmpb86op4pf.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpb86op4pf.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $result *= factorial($i);\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpl8f_89u8.php:13\nStack trace:\n#0 /tmp/tmpl8f_89u8.php(19): special_factorial(4)\n\
    #1 /tmp/tmpl8f_89u8.php(23): candidate(4)\n#2 /tmp/tmpl8f_89u8.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpl8f_89u8.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $x = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $x *= $i;\n  }\n  return $x;\n\
    }\n\n$random_number = rand(1, 10);\necho \"Random number is $random_number\\n\"\
    ;\necho \"Factorial is: \" . special_factorial($random_number) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "Random number is 1\nFactorial is: 1\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpzebalyns.php:26\nStack trace:\n#0 /tmp/tmpzebalyns.php(32):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzebalyns.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $result *= factorial($i);\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpsmfm0294.php:13\nStack trace:\n#0 /tmp/tmpsmfm0294.php(19): special_factorial(4)\n\
    #1 /tmp/tmpsmfm0294.php(23): candidate(4)\n#2 /tmp/tmpsmfm0294.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpsmfm0294.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $total = 1;\n\twhile($n > 0) {\n\t\t$total *= factorial($n);\n\t\t$n--;\n\t}\n\
    \treturn $total;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp3ahbjvva.php:13\nStack trace:\n#0 /tmp/tmp3ahbjvva.php(20): special_factorial(4)\n\
    #1 /tmp/tmp3ahbjvva.php(24): candidate(4)\n#2 /tmp/tmp3ahbjvva.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3ahbjvva.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $total = $n;\n    $x = $n;\n    for ($i=1; $i<$n; $i++) {\n        $x--;\n\
    \        $total = $total * $x;\n    }\n    return $total;\n}\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_s136htl.php:24\n\
    Stack trace:\n#0 /tmp/tmp_s136htl.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp_s136htl.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\n\
    }\n\n$spefical_factorial = special_factorial(4);\necho $spefical_factorial;\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd8h103s7.php:21\n\
    Stack trace:\n#0 /tmp/tmpd8h103s7.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpd8h103s7.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = $n;\n    for ($i = $n-1; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8z3qgbll.php:24\n\
    Stack trace:\n#0 /tmp/tmp8z3qgbll.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp8z3qgbll.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprnq99cgi.php:19\n\
    Stack trace:\n#0 /tmp/tmprnq99cgi.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprnq99cgi.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  $count = 1;\n  for ($i=1; $i<=$n; $i++) {\n    $factorial\
    \ *= $i;\n    $count *= $factorial;\n  }\n  return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    // Enter code here\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprm82vgw8.php:18\n\
    Stack trace:\n#0 /tmp/tmprm82vgw8.php(24): test()\n#1 {main}\n  thrown in /tmp/tmprm82vgw8.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n <= 0) {\n        return 1;\n    }\n    $result = 1;\n    while ($n\
    \ > 0) {\n        $result *= factorial($n);\n        $n--;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpgvtepnv8.php:16\nStack trace:\n#0 /tmp/tmpgvtepnv8.php(23): special_factorial(4)\n\
    #1 /tmp/tmpgvtepnv8.php(27): candidate(4)\n#2 /tmp/tmpgvtepnv8.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgvtepnv8.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n < 0) {\n    return false;\n  }\n\n  if ($n == 0) {\n    return 1;\n \
    \ }\n\n  $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n\
    \  }\n\n  return $factorial;\n}\n\necho special_factorial(4) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjlkll4vr.php:33\n\
    Stack trace:\n#0 /tmp/tmpjlkll4vr.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpjlkll4vr.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   // Write your code here:\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwprft_fr.php:18\n\
    Stack trace:\n#0 /tmp/tmpwprft_fr.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpwprft_fr.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    $factorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n   \
    \     $factorial *= $i;\n        $result *= $factorial;\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8m3rxjpy.php:24\n\
    Stack trace:\n#0 /tmp/tmp8m3rxjpy.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp8m3rxjpy.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = $n;\n  for ($i = $n-1; $i > 0; $i--) {\n    $result *= $i;\n  }\n\
    \  return $result;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl5cf0p28.php:24\n\
    Stack trace:\n#0 /tmp/tmpl5cf0p28.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpl5cf0p28.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factor = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factor *= factorial($i);\n\
    \  }\n  return $factor;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp6d1m3645.php:13\nStack trace:\n#0 /tmp/tmp6d1m3645.php(19): special_factorial(4)\n\
    #1 /tmp/tmp6d1m3645.php(23): candidate(4)\n#2 /tmp/tmp6d1m3645.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6d1m3645.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj6ojvzhi.php:24\n\
    Stack trace:\n#0 /tmp/tmpj6ojvzhi.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpj6ojvzhi.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\necho special_factorial(4);\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqhf7p114.php:25\n\
    Stack trace:\n#0 /tmp/tmpqhf7p114.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpqhf7p114.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   return ($n != 0) ? $n * special_factorial($n - 1) : 1;\n}\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcqsdh8_c.php:18\n\
    Stack trace:\n#0 /tmp/tmpcqsdh8_c.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpcqsdh8_c.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = [];\n  $total = 1;\n  for ($i = $n; $i > 0; $i--) {\n    array_push($factorial,\
    \ $i);\n  }\n  for ($i = 0; $i < count($factorial); $i++) {\n    $total *= $factorial[$i];\n\
    \  }\n  $factorial = [];\n  for ($i = $n - 1; $i > 0; $i--) {\n    array_push($factorial,\
    \ $i);\n  }\n  for ($i = 0; $i < count($factorial); $i++) {\n    $total *= $factorial[$i];\n\
    \  }\n  $factorial = [];\n  for ($i = $n - 2; $i > 0; $i--) {\n    array_push($factorial,\
    \ $i);\n  }\n  for ($i = 0; $i < count($factorial); $i++) {\n    $total *= $factorial[$i];\n\
    \  }\n  return $total;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplgqp6m3_.php:42\n\
    Stack trace:\n#0 /tmp/tmplgqp6m3_.php(47): test()\n#1 {main}\n  thrown in /tmp/tmplgqp6m3_.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo50xe4wt.php:22\n\
    Stack trace:\n#0 /tmp/tmpo50xe4wt.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpo50xe4wt.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  $factorial2 = 1;\n  $factorial3 = 1;\n  $i = 0;\n  while\
    \ ($i < $n) {\n    $factorial = $factorial * ($n - $i);\n    $i++;\n  }\n  $i\
    \ = 0;\n  while ($i < ($n - 1)) {\n    $factorial2 = $factorial2 * ($n - 1 - $i);\n\
    \    $i++;\n  }\n  $i = 0;\n  while ($i < ($n - 2)) {\n    $factorial3 = $factorial3\
    \ * ($n - 2 - $i);\n    $i++;\n  }\n  return $factorial * $factorial2 * $factorial3;\n\
    }\necho special_factorial(5);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "17280\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4nsk6ujr.php:38\n\
    Stack trace:\n#0 /tmp/tmp4nsk6ujr.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp4nsk6ujr.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial=1;\n  $factorialArray=[];\n  while($n >= 1){\n    $factorial*=$n;\n\
    \    $factorialArray[]=$factorial;\n    $n--;\n  }\n  return array_product($factorialArray);\n\
    }\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8g32h02k.php:25\n\
    Stack trace:\n#0 /tmp/tmp8g32h02k.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8g32h02k.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $x = 1;\n  for ($i=1; $i <= $n; $i++) {\n    $x *= $i;\n  }\n  return $x;\n\
    }\n\n$tests = [\n  4 => 288,\n  0 => 1,\n  1 => 1,\n  2 => 2,\n  3 => 24,\n  5\
    \ => 14400,\n  6 => 518400,\n  7 => 6652800,\n  8 => 32432400,\n  9 => 544320000,\n\
    \  10 => 7408800000,\n  11 => 92897280000,\n  12 => 928972800000,\n  13 => 6645797760000,\n\
    \  14 => 32432400000000,\n  15 => 9853336000000000,\n  16 => 261534873600000000,\n\
    \  17 => 5244319232000000000,\n  18 => 8179213004800000000,\n  19 => 102116764672000000000,\n\
    \  20 => 1015599566684160000000,\n  21 => 738010580556800000000,\n  22 => 402253450240000000000,\n\
    \  23 => 1724637400819200000000,\n  24 => 6250278406400000000000,\n  25 => 18789718982400000000000,\n\
    \  26 => 48165896678400000000000,\n  27 => 103631945086720000000000,\n  28 =>\
    \ 193990990492160000000000,\n  29 => 319018744448000000000000,\n  30 => 454354044876800000000000,\n\
    \  31 => 581099505605120000000000,\n  32 => 656764177346560000000000,\n  33 =>\
    \ 664579776000000000000000,\n  34 => 6074083835750400000000000,\n  35 => 5114385699584100000000000,\n\
    \  36 => 3908549429760000000000000,\n  37 => 2796244882483200000000000,\n  38\
    \ => 17895697022617600000000000,\n  39 => 10555311626649600000000000,\n  40 =>\
    \ 56832900565248000000000000,\n  41 => 28140849593548800000000000\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprhk61ido.php on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ return array_product(range(1, $n));\n}\n\nfunction candidate(...$args) {\n \
    \   return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1kcfltvz.php:19\n\
    Stack trace:\n#0 /tmp/tmp1kcfltvz.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp1kcfltvz.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n == 0) {\n    return 1;\n  } else {\n    return $n * special_factorial($n\
    \ - 1);\n  }\n}\n\necho special_factorial(4);\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvie67hxg.php:24\n\
    Stack trace:\n#0 /tmp/tmpvie67hxg.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpvie67hxg.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \  $factorial = function($n) use (&$factorial) {\n        return $n < 2 ? 1 :\
    \ $n * $factorial($n - 1);\n    };\n    return array_product(array_map($factorial,\
    \ range(1, $n)));\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i=1; $i <= $n; $i++) {\n    $result *= factorial($i);\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpfpmu1qf0.php:13\nStack trace:\n#0 /tmp/tmpfpmu1qf0.php(19): special_factorial(4)\n\
    #1 /tmp/tmpfpmu1qf0.php(23): candidate(4)\n#2 /tmp/tmpfpmu1qf0.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfpmu1qf0.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nprint_r(special_factorial(4) . PHP_EOL);\n\
    \nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpftxz7u0h.php:25\n\
    Stack trace:\n#0 /tmp/tmpftxz7u0h.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpftxz7u0h.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  $value = 1;\n  for ($i=1; $i <= $n; $i++) {\n    $factorial\
    \ *= $i;\n    $value *= $factorial;\n  }\n  return $value;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = factorial($n);\n  for ($i = $n-1; $i > 0; $i--) {\n    $result *=\
    \ factorial($i);\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp_b8qg4u3.php:11\nStack trace:\n#0 /tmp/tmp_b8qg4u3.php(19): special_factorial(4)\n\
    #1 /tmp/tmp_b8qg4u3.php(23): candidate(4)\n#2 /tmp/tmp_b8qg4u3.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp_b8qg4u3.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2huktirc.php:19\n\
    Stack trace:\n#0 /tmp/tmp2huktirc.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp2huktirc.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    // Convert the integer to a string.\n\t$s = $n.'<br>';\n\t// Get the length of\
    \ the string.\n\t$l = strlen($s);\n\t// Initialize the array.\n\t$a = array();\n\
    \t// Loop through the string.\n\tfor ($i = 0; $i < $l; $i++) {\n\t\t// Multiply\
    \ each digit of the string together.\n\t\t$a[$i] = $s[$i] * $s[$i].'<br>';\n\t\
    }\n\t// Return the answer.\n\treturn $a;\n}\n\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmp69qlgsd6.php on line\
    \ 20\n\nWarning: A non-numeric value encountered in /tmp/tmp69qlgsd6.php on line\
    \ 20\n\nWarning: A non-numeric value encountered in /tmp/tmp69qlgsd6.php on line\
    \ 20\n\nWarning: A non-numeric value encountered in /tmp/tmp69qlgsd6.php on line\
    \ 20\n\nWarning: A non-numeric value encountered in /tmp/tmp69qlgsd6.php on line\
    \ 20\n\nWarning: A non-numeric value encountered in /tmp/tmp69qlgsd6.php on line\
    \ 20\n\nWarning: A non-numeric value encountered in /tmp/tmp69qlgsd6.php on line\
    \ 20\n\nWarning: A non-numeric value encountered in /tmp/tmp69qlgsd6.php on line\
    \ 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp69qlgsd6.php:31\n\
    Stack trace:\n#0 /tmp/tmp69qlgsd6.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp69qlgsd6.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n <= 0) {\n    return 0;\n  }\n\n  $factorial = 1;\n  for ($i = 1; $i <=\
    \ $n; $i++) {\n    $factorial *= $i;\n  }\n\n  return $factorial * special_factorial($n\
    \ - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy1f4psb6.php:28\n\
    Stack trace:\n#0 /tmp/tmpy1f4psb6.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpy1f4psb6.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n == 0) {\n    return 1;\n  }\n  return brazilian_factorial($n);\n}\n\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function brazilian_factorial()\
    \ in /tmp/tmp6scndp55.php:14\nStack trace:\n#0 /tmp/tmp6scndp55.php(18): special_factorial(4)\n\
    #1 /tmp/tmp6scndp55.php(22): candidate(4)\n#2 /tmp/tmp6scndp55.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6scndp55.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0) {\n        return 1;\n    }\n    $f = 1;\n    for ($i = 1; $i\
    \ <= $n; $i++) {\n        $f *= $i;\n    }\n    return $f * special_factorial($n\
    \ - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = function($n) use (&$factorial) {\n        if ($n === 0) {\n \
    \           return 1;\n        }\n        return $n * $factorial($n - 1);\n  \
    \  };\n    $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *=\
    \ $factorial($i);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ // Make sure n is an integer\n  if (gettype($n) !== 'integer') {\n    throw\
    \ new Exception(\"n is not an integer\");\n  }\n  // Make sure n is greater than\
    \ zero\n  if ($n <= 0) {\n    throw new Exception(\"n is not greater than zero\"\
    );\n  }\n  // If n is 1, return 1\n  if ($n === 1) {\n    return 1;\n  }\n  //\
    \ Recursively call the function\n  return $n * special_factorial($n - 1);\n}\n\
    echo special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpttygszsc.php:32\n\
    Stack trace:\n#0 /tmp/tmpttygszsc.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpttygszsc.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n <= 0) return;\n  $res = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $res\
    \ *= $i;\n  }\n  for ($i = $n - 1; $i > 0; $i--) {\n    $res *= $i;\n  }\n  return\
    \ $res;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5yob8fcb.php:26\n\
    Stack trace:\n#0 /tmp/tmp5yob8fcb.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp5yob8fcb.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorials = [];\n  while ($n > 0) {\n    array_push($factorials, $n);\n  \
    \  $n--;\n  }\n  $product = 1;\n  foreach ($factorials as $factorial) {\n    $product\
    \ *= $factorial;\n  }\n  return $product;\n}\n\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvgd2r3md.php:28\n\
    Stack trace:\n#0 /tmp/tmpvgd2r3md.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpvgd2r3md.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $product = 1;\n    $factorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n  \
    \      $factorial *= $i;\n        $product *= $factorial;\n    }\n    return $product;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzbcc7q2_.php:25\n\
    Stack trace:\n#0 /tmp/tmpzbcc7q2_.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpzbcc7q2_.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n}\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxa3mevf7.php:17\n\
    Stack trace:\n#0 /tmp/tmpxa3mevf7.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpxa3mevf7.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = factorial($n);\n    for ($i = 1; $i < $n; $i++) {\n        $result\
    \ *= factorial($n - $i);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpekvm49yu.php:11\nStack trace:\n#0 /tmp/tmpekvm49yu.php(19): special_factorial(4)\n\
    #1 /tmp/tmpekvm49yu.php(23): candidate(4)\n#2 /tmp/tmpekvm49yu.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpekvm49yu.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n == 0) return 1;\n  $fac_n = 1;\n  $fac_previous = 1;\n  for ($i = $n;\
    \ $i > 0; $i--) {\n    $fac_n *= $i;\n    $fac_previous *= $i - 1;\n  }\n  return\
    \ $fac_n * $fac_previous;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgd8uxldz.php:26\n\
    Stack trace:\n#0 /tmp/tmpgd8uxldz.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpgd8uxldz.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $array = [];\n  for ($i=1; $i<=$n; $i++) {\n    array_push($array, $i);\n  }\n\
    \  $n_factorial = factorial(array_pop($array));\n  for ($i=0; $i<count($array);\
    \ $i++) {\n    $n_factorial *= factorial(array_pop($array));\n  }\n  return $n_factorial;\n\
    }\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmplm9vxhuh.php:15\nStack trace:\n#0 /tmp/tmplm9vxhuh.php(22): special_factorial(4)\n\
    #1 /tmp/tmplm9vxhuh.php(26): candidate(4)\n#2 /tmp/tmplm9vxhuh.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmplm9vxhuh.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $sum = 0;\n\tfor ($i = $n; $i > 0; $i--) {\n\t\t$sum += factorial($i);\n\t}\n\t\
    return $sum;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpz2v7zonv.php:13\nStack trace:\n#0 /tmp/tmpz2v7zonv.php(19): special_factorial(4)\n\
    #1 /tmp/tmpz2v7zonv.php(23): candidate(4)\n#2 /tmp/tmpz2v7zonv.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpz2v7zonv.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n == 0) {\n    return 1;\n  }\n  $factorial = 1;\n  for ($i = $n; $i >\
    \ 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial * special_factorial($n\
    \ - 1);\n}\n\necho special_factorial(4) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "288\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpe5dxdyrq.php:13\nStack trace:\n#0 /tmp/tmpe5dxdyrq.php(19): special_factorial(4)\n\
    #1 /tmp/tmpe5dxdyrq.php(23): candidate(4)\n#2 /tmp/tmpe5dxdyrq.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpe5dxdyrq.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n < 0) return false;\n  $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n\
    \    $result *= $i;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf0dy6obo.php:24\n\
    Stack trace:\n#0 /tmp/tmpf0dy6obo.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpf0dy6obo.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   return $n > 0 ? $n * special_factorial($n - 1) : 1;\n}\n\necho special_factorial(4);\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgs7fv2q2.php:20\n\
    Stack trace:\n#0 /tmp/tmpgs7fv2q2.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpgs7fv2q2.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n}\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstefwrmd.php:17\n\
    Stack trace:\n#0 /tmp/tmpstefwrmd.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpstefwrmd.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if($n < 1) return;\n    $factorials = [];\n    for($i = $n; $i > 0; $i--)\
    \ {\n        $factorials[] = factorial($i);\n    }\n    return array_product($factorials);\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpw9l8y_ce.php:14\nStack trace:\n#0 /tmp/tmpw9l8y_ce.php(20): special_factorial(4)\n\
    #1 /tmp/tmpw9l8y_ce.php(24): candidate(4)\n#2 /tmp/tmpw9l8y_ce.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpw9l8y_ce.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n == 0) {\n    return 1;\n  } else {\n    return $n * special_factorial($n\
    \ - 1);\n  }\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfncj9cfr.php:23\n\
    Stack trace:\n#0 /tmp/tmpfncj9cfr.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpfncj9cfr.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ return factorial($n) * factorial($n - 1);\n}\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpqminhbxj.php:11\nStack trace:\n#0 /tmp/tmpqminhbxj.php(14): special_factorial(4)\n\
    #1 /tmp/tmpqminhbxj.php(18): candidate(4)\n#2 /tmp/tmpqminhbxj.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqminhbxj.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n === 0) {\n    return 1;\n  }\n  return $n * special_factorial($n - 1);\n\
    }\necho special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaw3zw4e2.php:22\n\
    Stack trace:\n#0 /tmp/tmpaw3zw4e2.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpaw3zw4e2.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7z6wg7k6.php:23\n\
    Stack trace:\n#0 /tmp/tmp7z6wg7k6.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp7z6wg7k6.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $num = 1;\n  for ($i=1; $i <= $n; $i++) {\n    $num *= $i;\n  }\n  for ($i=$n;\
    \ $i >= 1; $i--) {\n    $num *= $i;\n  }\n  return $num;\n}\n\necho special_factorial(4)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "576\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ruzngl7.php:27\n\
    Stack trace:\n#0 /tmp/tmp9ruzngl7.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp9ruzngl7.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $res = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $res *= $i;\n    }\n\
    \    for ($i = $n - 1; $i > 0; $i--) {\n        $res *= $i;\n    }\n    for ($i\
    \ = $n - 2; $i > 0; $i--) {\n        $res *= $i;\n    }\n    return $res;\n}\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1tg20bnt.php:29\n\
    Stack trace:\n#0 /tmp/tmp1tg20bnt.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp1tg20bnt.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $output = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $output *= $i;\n\
    \    }\n    return $output;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpro2wa8p3.php:22\n\
    Stack trace:\n#0 /tmp/tmpro2wa8p3.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpro2wa8p3.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if (gettype($n) != 'integer') {\n    throw new Exception('First argument must\
    \ be an integer');\n  }\n  if ($n < 0) {\n    throw new Exception('First argument\
    \ must be non-negative');\n  }\n  if ($n == 0) {\n    return 1;\n  }\n  return\
    \ $n * special_factorial($n - 1);\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqkck4h_e.php:29\n\
    Stack trace:\n#0 /tmp/tmpqkck4h_e.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpqkck4h_e.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if($n == 0) {\n        return 1;\n    }\n    return $n * special_factorial($n\
    \ - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr6ttpe78.php:22\n\
    Stack trace:\n#0 /tmp/tmpr6ttpe78.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpr6ttpe78.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if($n <= 0) {\n        return NULL;\n    }\n\n    $nums = range(1, $n);\n\
    \    $ret = 1;\n    foreach($nums as $num) {\n        $ret *= factorial($num);\n\
    \    }\n    return $ret;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpoyqw_35o.php:18\nStack trace:\n#0 /tmp/tmpoyqw_35o.php(24): special_factorial(4)\n\
    #1 /tmp/tmpoyqw_35o.php(28): candidate(4)\n#2 /tmp/tmpoyqw_35o.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmpoyqw_35o.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if($n == 0) {\n        return 1;\n    }\n    else{\n        return $n * special_factorial($n-1);\n\
    \    }\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl556rxcz.php:23\n\
    Stack trace:\n#0 /tmp/tmpl556rxcz.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpl556rxcz.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $special_factorial = 1;\n    $factorial = 1;\n    for ($i=1; $i <= $n; $i++)\
    \ {\n        $factorial *= $i;\n        $special_factorial *= $factorial;\n  \
    \  }\n    return $special_factorial;\n}\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $numbers = [];\n  for ($i = 1; $i <= $n; $i++) {\n    $numbers[] = $i;\n  }\n\
    \  return array_product($numbers);\n}\n\n$special_factorial = special_factorial(4);\n\
    var_dump($special_factorial);\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "int(24)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp1lx066c.php:26\n\
    Stack trace:\n#0 /tmp/tmpp1lx066c.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpp1lx066c.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  while ($n > 0) {\n    $factorial *= $n;\n    $n--;\n  }\n\
    \  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7g4ace_2.php:24\n\
    Stack trace:\n#0 /tmp/tmp7g4ace_2.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp7g4ace_2.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $total = 1;\n    while ($n > 0) {\n        $total *= factorial($n);\n    \
    \    $n--;\n    }\n    return $total;\n}\n\nfunction candidate(...$args) {\n \
    \   return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpbx0jl_mr.php:13\nStack trace:\n#0 /tmp/tmpbx0jl_mr.php(20): special_factorial(4)\n\
    #1 /tmp/tmpbx0jl_mr.php(24): candidate(4)\n#2 /tmp/tmpbx0jl_mr.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpbx0jl_mr.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if($n <= 0) {\n        return false;\n    }\n    $total = 1;\n    while($n\
    \ > 0) {\n        $total *= factorial($n);\n        $n--;\n    }\n    return $total;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmppcc8bbwf.php:16\nStack trace:\n#0 /tmp/tmppcc8bbwf.php(23): special_factorial(4)\n\
    #1 /tmp/tmppcc8bbwf.php(27): candidate(4)\n#2 /tmp/tmppcc8bbwf.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmppcc8bbwf.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    $factorials = array();\n    while ($n > 0) {\n      \
    \  $factorials[] = $factorial;\n        $factorial *= $n;\n        $n--;\n   \
    \ }\n    foreach ($factorials as $f) {\n        $factorial /= $f;\n    }\n   \
    \ return $factorial;\n}\n\necho special_factorial(4);\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "0.020833333333333\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcek2h9yt.php:31\n\
    Stack trace:\n#0 /tmp/tmpcek2h9yt.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpcek2h9yt.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $fac=1;\n    for($i=1;$i<=$n;$i++){\n        $fac=$fac*$i;\n    }\n    return\
    \ $fac;\n}\n\necho special_factorial(4);\nfunction candidate(...$args) {\n   \
    \ return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkaqbcqod.php:24\n\
    Stack trace:\n#0 /tmp/tmpkaqbcqod.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpkaqbcqod.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $product = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $product *= $i;\n  }\n \
    \ $factorial = $product;\n  while ($n > 1) {\n    $product = 1;\n    for ($i =\
    \ $n - 1; $i > 0; $i--) {\n      $product *= $i;\n    }\n    $factorial *= $product;\n\
    \    $n--;\n  }\n  return $factorial;\n}\n\n$test_num = 4;\n$test_ret = special_factorial($test_num);\n\
    echo \"\\n==================\\n\";\necho \"Testing special_factorial with $test_num\\\
    n\";\necho \"==================\\n\";\nif ($test_ret == 288) {\n  echo \"Success\\\
    n\";\n} else {\n  echo \"Failure\\n\";\n}\necho \"==================\\n\";\necho\
    \ \"\\n\\n\";\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\n==================\nTesting special_factorial with 4\n==================\n\
    Success\n==================\n\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $total = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $total *= $i;\n  \
    \  }\n    return $total;\n}\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq76u3qr5.php:23\n\
    Stack trace:\n#0 /tmp/tmpq76u3qr5.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpq76u3qr5.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   // We can use recursion to simplify this problem\n    if ($n === 1) {\n  \
    \      return 1;\n    }\n    // To get the special factorial, we need to multiply\n\
    \    // by the number and the special factorial of the\n    // number before it.\n\
    \    return $n * special_factorial($n - 1);\n}\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbbvqx05u.php:25\n\
    Stack trace:\n#0 /tmp/tmpbbvqx05u.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpbbvqx05u.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  while ($n > 0) {\n    $factorial *= $n;\n    $n -= 1;\n \
    \ }\n  return $factorial;\n}\n\nprint_r(special_factorial(4));\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpud35ue1t.php:25\n\
    Stack trace:\n#0 /tmp/tmpud35ue1t.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpud35ue1t.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $total = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $total *= $i;\n  }\n  for\
    \ ($i = 1; $i < $n; $i++) {\n    $total *= $i;\n  }\n  return $total;\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3fpl71c7.php:26\n\
    Stack trace:\n#0 /tmp/tmp3fpl71c7.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp3fpl71c7.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   return array_product(range(1, $n)) * array_product(range(1, $n - 1));\n}\n\
    \nprint special_factorial(4);\nprint '<br>';\nprint special_factorial(5);\nprint\
    \ '<br>';\nprint special_factorial(6);\nprint '<br>';\nprint special_factorial(7);\n\
    print '<br>';\nprint special_factorial(8);\nprint '<br>';\nprint special_factorial(9);\n\
    print '<br>';\nprint special_factorial(10);\nprint '<br>';\nprint special_factorial(11);\n\
    print '<br>';\nprint special_factorial(12);\nprint '<br>';\nprint special_factorial(13);\n\
    print '<br>';\nprint special_factorial(14);\nprint '<br>';\nprint special_factorial(15);\n\
    print '<br>';\nprint special_factorial(16);\nprint '<br>';\nprint special_factorial(17);\n\
    print '<br>';\nprint special_factorial(18);\nprint '<br>';\nprint special_factorial(19);\n\
    print '<br>';\nprint special_factorial(20);\nprint '<br>';\nprint special_factorial(21);\n\
    print '<br>';\nprint special_factorial(22);\nprint '<br>';\nprint special_factorial(23);\n\
    print '<br>';\nprint special_factorial(24);\nprint '<br>';\nprint special_factorial(25);\n\
    print '<br>';\nprint special_factorial(26);\nprint '<br>';\nprint special_factorial(27);\n\
    print '<br>';\nprint special_factorial(28);\nprint '<br>';\nprint special_factorial(29);\n\
    print '<br>';\nprint special_factorial(30);\nprint '<br>';\nprint special_factorial(31);\n\
    print '<br>';\nprint special_factorial(32);\nprint '<br>';\nprint special_factorial(33);\n\
    print '<br>';\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "144<br>2880<br>86400<br>3628800<br>203212800<br>14631321600<br>1316818944000<br>144850083840000<br>19120211066880000<br>2982752926433280000<br>5.4286103261086E+20<br>1.1400081684828E+23<br>2.7360196043587E+25<br>7.4419733238557E+27<br>2.2772438370998E+30<br>7.7881739228815E+32<br>2.959506090695E+35<br>1.2429925580919E+38<br>5.7426256183845E+40<br>2.9057685629026E+43<br>1.6039842467222E+46<br>9.6239054803333E+48<br>6.2555385622166E+51<br>4.3913880706761E+54<br>3.3198893814311E+57<br>2.6957501777221E+60<br>2.3453026546182E+63<br>2.1811314687949E+66<br>2.1636824170446E+69<br>2.2848486323991E+72<br>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmput_wglmv.php:80\nStack\
    \ trace:\n#0 /tmp/tmput_wglmv.php(86): test()\n#1 {main}\n  thrown in /tmp/tmput_wglmv.php\
    \ on line 80\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n < 0) {\n        throw new Exception(\"Invalid input: $n\");\n    }\n\
    \    if ($n <= 1) {\n        return 1;\n    }\n\n    $result = 1;\n    for ($i\
    \ = $n; $i > 0; $i--) {\n        $result *= $i;\n    }\n    for ($i = $n - 1;\
    \ $i > 0; $i--) {\n        $result *= $i;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx8_fi2br.php:33\n\
    Stack trace:\n#0 /tmp/tmpx8_fi2br.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpx8_fi2br.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \  // Your code here\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8iwdbcv6.php:18\n\
    Stack trace:\n#0 /tmp/tmp8iwdbcv6.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp8iwdbcv6.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $t = 1;\n\tfor ($i = $n; $i >= 1; $i--) {\n\t\t$t *= $i;\n\t}\n\treturn $t;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp67ls3hj1.php:23\n\
    Stack trace:\n#0 /tmp/tmp67ls3hj1.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp67ls3hj1.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if($n == 0) return 1;\n  $r = 1;\n  for($i = $n; $i > 0; $i--) {\n    $r *=\
    \ $i;\n  }\n  return $r;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnob796f2.php:23\n\
    Stack trace:\n#0 /tmp/tmpnob796f2.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpnob796f2.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n <= 0) {\n        return 0;\n    }\n    $result = 1;\n    for ($i =\
    \ $n; $i > 0; $i--) {\n        $result *= factorial($i);\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpuf7g08bj.php:16\nStack trace:\n#0 /tmp/tmpuf7g08bj.php(22): special_factorial(4)\n\
    #1 /tmp/tmpuf7g08bj.php(26): candidate(4)\n#2 /tmp/tmpuf7g08bj.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmpuf7g08bj.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = 1; $i <= $n; $i++){\n      $result *= $i;\n  \
    \  }\n    for ($i = 1; $i < $n; $i++){\n      $result *= $i;\n    }\n    return\
    \ $result;\n}\n$result = special_factorial(4);\necho \"special_factorial(4): {$result}\\\
    n\";\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "special_factorial(4): 144\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp3fkwqa_n.php:28\nStack trace:\n#0 /tmp/tmp3fkwqa_n.php(34): test()\n\
    #1 {main}\n  thrown in /tmp/tmp3fkwqa_n.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial * $factorial;\n}\n\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5b9ub5tr.php:23\n\
    Stack trace:\n#0 /tmp/tmp5b9ub5tr.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp5b9ub5tr.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    $factorial = function($m) use (&$factorial, &$result) {\n\
    \        if ($m == 1) {\n            return $result;\n        } else {\n     \
    \       $result *= $m;\n            return $factorial($m - 1);\n        }\n  \
    \  };\n    return $factorial($n);\n}\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi6woxlsm.php:28\n\
    Stack trace:\n#0 /tmp/tmpi6woxlsm.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpi6woxlsm.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorials = factorials(1, $n);\n  $product = 1;\n  foreach ($factorials as\
    \ $factorial) {\n    $product *= $factorial;\n  }\n  return $product;\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorials()\
    \ in /tmp/tmp42i1w5s_.php:11\nStack trace:\n#0 /tmp/tmp42i1w5s_.php(20): special_factorial(4)\n\
    #1 /tmp/tmp42i1w5s_.php(24): candidate(4)\n#2 /tmp/tmp42i1w5s_.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmp42i1w5s_.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $fact = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $fact *= $i;\n   \
    \ }\n    return $fact;\n}\n$i = 1;\nwhile ($i <= 10) {\n    echo \"special_factorial($i)\
    \ = \" . special_factorial($i) . \"\\n\";\n    $i++;\n}\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "special_factorial(1) = 1\nspecial_factorial(2) = 2\nspecial_factorial(3)\
    \ = 6\nspecial_factorial(4) = 24\nspecial_factorial(5) = 120\nspecial_factorial(6)\
    \ = 720\nspecial_factorial(7) = 5040\nspecial_factorial(8) = 40320\nspecial_factorial(9)\
    \ = 362880\nspecial_factorial(10) = 3628800\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpjkv8g0rv.php:27\nStack trace:\n#0 /tmp/tmpjkv8g0rv.php(33):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpjkv8g0rv.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $total = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $total *= $i;\n  }\n  return\
    \ $total;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmnel1fsw.php:23\n\
    Stack trace:\n#0 /tmp/tmpmnel1fsw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpmnel1fsw.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $result *= factorial($i);\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmphwxmjood.php:13\nStack trace:\n#0 /tmp/tmphwxmjood.php(19): special_factorial(4)\n\
    #1 /tmp/tmphwxmjood.php(23): candidate(4)\n#2 /tmp/tmphwxmjood.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmphwxmjood.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ // Write your code here.\n  // Remove the next line.\n  echo $n;\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplctu82xj.php:21\n\
    Stack trace:\n#0 /tmp/tmplctu82xj.php(27): test()\n#1 {main}\n  thrown in /tmp/tmplctu82xj.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $ret = 1;\n\tfor ($i = $n; $i > 0; $i--) {\n\t\t$ret *= factorial($i);\n\t}\n\t\
    return $ret;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmprgy0j2yd.php:13\nStack trace:\n#0 /tmp/tmprgy0j2yd.php(19): special_factorial(4)\n\
    #1 /tmp/tmprgy0j2yd.php(23): candidate(4)\n#2 /tmp/tmprgy0j2yd.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmprgy0j2yd.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $total = 1;\n\t$len = $n;\n\twhile ($len > 0) {\n\t\t$total *= $len;\n\t\t$len--;\n\
    \t}\n\treturn $total;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuxmwqgot.php:25\n\
    Stack trace:\n#0 /tmp/tmpuxmwqgot.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpuxmwqgot.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $result = 1;\n\tfor ($i = 1; $i <= $n; $i++){\n\t\t$result *= $i;\n\t}\n\tfor\
    \ ($i = $n - 1; $i > 0; $i--){\n\t\t$result *= $i;\n\t}\n\treturn $result;\n}\n\
    \necho special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "144\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg77ia6lp.php:27\n\
    Stack trace:\n#0 /tmp/tmpg77ia6lp.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpg77ia6lp.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  while ($n > 0) {\n    $result *= factorial($n);\n    $n--;\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp1ilxj01n.php:13\nStack trace:\n#0 /tmp/tmp1ilxj01n.php(20): special_factorial(4)\n\
    #1 /tmp/tmp1ilxj01n.php(24): candidate(4)\n#2 /tmp/tmp1ilxj01n.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1ilxj01n.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9lldfha_.php:22\n\
    Stack trace:\n#0 /tmp/tmp9lldfha_.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp9lldfha_.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\n\
    }\n\n$test_cases = array(\n    array('input' => 2, 'expected' => 2),\n    array('input'\
    \ => 3, 'expected' => 12),\n    array('input' => 4, 'expected' => 288),\n    array('input'\
    \ => 5, 'expected' => 34560),\n    array('input' => 6, 'expected' => 24883200),\n\
    \    array('input' => 7, 'expected' => 10897286400),\n    array('input' => 8,\
    \ 'expected' => 3521614606208),\n    array('input' => 9, 'expected' => 10077696000000000),\n\
    \    array('input' => 10, 'expected' => 265252859812191058636308480000000),\n\
    \    array('input' => 11, 'expected' => 869043647444305967631298564798800022239435840000000000000),\n\
    \    array('input' => 12, 'expected' => 31409671556839028049692743242464231738856537726883840000000000000000000),\n\
    \    array('input' => 13, 'expected' => 1279592704167711312947775286937995512979236895440000000000000000000000000),\n\
    \    array('input' => 14, 'expected' => 62957311265590148656501071957846645201598008382750728029056000000000000000000000'),\n\
    \    array('input' => 15, 'expected' => 369198309699240436226027689582618476938646565000000000000000500000000000000000000000'),\n\
    \    array('input' => 16, 'expected' => 2490058275626842730194923289724183335793800095599200000000000000000000000000000000000'),\n\
    \    array('input' => 17, 'expected' => 190611151143371308734131901096518415239571295664516800000000000000000000000000000000000'),\n\
    \    array('input' => 18, 'expected' => 1650477261759077770489515457956858276527680594951680000000000000000000000000000000000000'),\n\
    \    array('input' => 19, 'expected' => 1606711\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp91z0tubf.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  while ($n > 0) {\n    $result *= $n--;\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbsiej1q3.php:23\n\
    Stack trace:\n#0 /tmp/tmpbsiej1q3.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbsiej1q3.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if($n <= 0) {\n        return null;\n    }\n    $array = range(1, $n);\n \
    \   $multi = 1;\n    foreach($array as $value) {\n        $multi *= $value;\n\
    \    }\n    return $multi * special_factorial($n - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpba2l4nvh.php:27\n\
    Stack trace:\n#0 /tmp/tmpba2l4nvh.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpba2l4nvh.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $r = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $r *= factorial($i);\n  }\n \
    \ return $r;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp7pg64w7w.php:13\nStack trace:\n#0 /tmp/tmp7pg64w7w.php(19): special_factorial(4)\n\
    #1 /tmp/tmp7pg64w7w.php(23): candidate(4)\n#2 /tmp/tmp7pg64w7w.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7pg64w7w.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    if($n<1) return;\n\tfor($i=1;$i<=$n;$i++){\n\t\t$n = $n*$i;\n\t}\n\treturn $n;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  for ($i = $n - 1; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  for ($i =\
    \ $n - 2; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcafaca5f.php:29\n\
    Stack trace:\n#0 /tmp/tmpcafaca5f.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpcafaca5f.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $number = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $number *= $i;\n  }\n  return\
    \ $number;\n}\n\necho special_factorial(4);\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7uoujm8a.php:24\n\
    Stack trace:\n#0 /tmp/tmp7uoujm8a.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp7uoujm8a.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\necho special_factorial(4);\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgim9_ltd.php:23\n\
    Stack trace:\n#0 /tmp/tmpgim9_ltd.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpgim9_ltd.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n == 0) {\n    return 1;\n  }\n  return $n * special_factorial($n - 1);\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuxr_4qzb.php:22\n\
    Stack trace:\n#0 /tmp/tmpuxr_4qzb.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpuxr_4qzb.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n == 0) {\n    return 1;\n  }\n  $factorial = $n;\n  for ($i = $n - 1;\
    \ $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy_qrev1m.php:25\n\
    Stack trace:\n#0 /tmp/tmpy_qrev1m.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpy_qrev1m.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial_array = array();\n  $result = 1;\n  if ($n == 0) {\n    return 1;\n\
    \  } else {\n    for ($i = 1; $i <= $n; $i++) {\n      $factorial_array[] = $i;\n\
    \    }\n    for ($i = 0; $i < count($factorial_array); $i++) {\n      $result\
    \ *= $factorial_array[$i];\n    }\n    return $result;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5u2cnxcr.php:31\n\
    Stack trace:\n#0 /tmp/tmp5u2cnxcr.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp5u2cnxcr.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ \n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3nzqu8q8.php:19\n\
    Stack trace:\n#0 /tmp/tmp3nzqu8q8.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp3nzqu8q8.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n}\n\
    \nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx2fqb1yf.php:18\n\
    Stack trace:\n#0 /tmp/tmpx2fqb1yf.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpx2fqb1yf.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
