name: HumanEval_65_circular_shift
language: php
prompt: "<?php\n// Circular shift the digits of the integer x, shift the digits right\
  \ by shift\n// and return the result as a string.\n// If shift > number of digits,\
  \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
  \ 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n"
tests: "function candidate(...$args) {\n    return circular_shift(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $x = (string) $x;\n    $len = strlen($x);\n    if ($shift > $len)\
    \ {\n        return strrev($x);\n    }\n    $shift_part = substr($x, 0, $len -\
    \ $shift);\n    $shift_part_rev = strrev($shift_part);\n    $y = substr($x, $len\
    \ - $shift);\n    return $y . $shift_part_rev;\n}\n", "    $digits = str_split((string)$x);\n\
    \    if ($shift <= count($digits)) {\n        for ($i = 0; $i < $shift; $i++)\
    \ {\n            array_unshift($digits, array_pop($digits));\n        }\n    }\
    \ else {\n        $digits = array_reverse($digits);\n    }\n    return implode('',\
    \ $digits);\n}\n", "    if ($shift == 0) return strval($x);\n    $int_length =\
    \ strlen($x);\n    if ($shift > $int_length) return strrev($x);\n    $integer_list\
    \ = str_split($x);\n    $shifted_list = array_merge(array_slice($integer_list,\
    \ -$shift), array_slice($integer_list, 0, $int_length - $shift));\n    return\
    \ implode($shifted_list);\n}\n\n$x = 12;\n$shift = 1;\necho circular_shift($x,\
    \ $shift) . \"\\n\";", "    if ($shift == 0) {\n        return strval($x);\n \
    \   }\n    $digits = str_split(strval($x));\n    $dcount = count($digits);\n \
    \   if ($shift >= $dcount) {\n        $digits = array_reverse($digits);\n    }\
    \ else {\n        $digits = array_merge(array_slice($digits, $shift), array_slice($digits,\
    \ 0, $shift));\n    }\n    return implode('', $digits);\n}\n", "    if ($shift\
    \ == 0) return $x;\n    $shift %= $x > 1 ? ceil(log10($x)) : 1;\n    $x = strrev($x);\n\
    \    return substr($x, $shift) . substr($x, 0, $shift);\n}\n", "    $x = strval($x);\n\
    \    if ($shift > strlen($x)) {\n        return strrev($x);\n    }\n    return\
    \ substr($x, $shift) . substr($x, 0, $shift);\n}\n", "    $str = strval($x);\n\
    \    $shift = $shift % strlen($str);\n    return substr($str, $shift) . substr($str,\
    \ 0, $shift);\n}\n\necho circular_shift(12, 1), \"\\n\";\necho circular_shift(12,\
    \ 2), \"\\n\";\necho circular_shift(12, 3), \"\\n\";\necho circular_shift(12,\
    \ 4), \"\\n\";\necho circular_shift(12, 5), \"\\n\";\necho circular_shift(12,\
    \ 6), \"\\n\";\necho circular_shift(12, 7), \"\\n\";\necho circular_shift(12,\
    \ 8), \"\\n\";\necho circular_shift(12, 9), \"\\n\";\necho circular_shift(12,\
    \ 10), \"\\n\";\necho circular_shift(12, 11), \"\\n\";\necho circular_shift(12,\
    \ 12), \"\\n\";\necho circular_shift(12, 13), \"\\n\";\necho circular_shift(12,\
    \ 14), \"\\n\";\necho circular_shift(12, 15), \"\\n\";\necho circular_shift(12,\
    \ 16), \"\\n\";\necho circular_shift(12, 17), \"\\n\";\necho circular_shift(12,\
    \ 18), \"\\n\";\necho circular_shift(12, 19), \"\\n\";\necho circular_shift(12,\
    \ 20), \"\\n\";\necho circular_shift(12, 21), \"\\n\";\necho circular_shift(12,\
    \ 22), \"\\n\";\necho circular_shift(12, 23), \"\\n\";\necho circular_shift(12,\
    \ 24), \"\\n\";\necho circular_shift(12, 25), \"\\n\";\necho circular_shift(12,\
    \ 26), \"\\n\";\necho circular_shift(12, 27), \"\\n\";\necho circular_shift(12,\
    \ 28), \"\\n\";\necho circular_shift(12, 29), \"\\n\";\necho circular_shift(12,\
    \ 30), \"\\n\";\necho circular_shift(12, 31), \"\\n\";\necho circular_shift(12,\
    \ 32), \"\\n\";\necho circular_shift(12, 33), \"\\n\";\necho circular_shift(12,\
    \ 34), \"\\n\";\necho circular_shift(12, 35), \"\\n\";\necho circular_shift(12,\
    \ 36), \"\\", "    $n = strlen((string)$x);\n    if ($shift >= $n) {\n       \
    \ return strrev((string)$x);\n    }\n    return substr((string)$x, $shift) . substr((string)$x,\
    \ 0, $shift);\n}\n", "    $x_str = (string)$x;\n    $x_digits = strlen($x_str);\n\
    \    if ($shift > $x_digits) {\n        return strrev($x_str);\n    }\n    $pos\
    \ = $x_digits - $shift;\n    return substr($x_str, $pos) . substr($x_str, 0, $pos);\n\
    }\n", "    $result = array();\n    $i = 0;\n    do {\n        if ($shift > $i)\
    \ {\n            $result[$i] = $x % 10;\n        } else {\n            $result[$i\
    \ + $shift] = $x % 10;\n        }\n        $x = (int)($x / 10);\n        $i++;\n\
    \    } while ($x > 0);\n    $s = '';\n    $i = count($result) - 1;\n    while\
    \ ($i >= 0) {\n        $s .= $result[$i];\n        $i--;\n    }\n    return $s;\n\
    }\n", "    $digits = str_split((string)$x);\n    $n = count($digits);\n    for\
    \ ($i = 0; $i < $shift; $i++) {\n        $temp = array_pop($digits);\n       \
    \ array_unshift($digits, $temp);\n    }\n    return implode($digits);\n}\n", " \
    \ if ($shift == 0) {\n    return $x;\n  }\n\n  $d = 0;\n  $x1 = $x;\n  while ($x1\
    \ > 0) {\n    $x1 = intval($x1 / 10);\n    $d++;\n  }\n\n  if ($shift >= $d) {\n\
    \    $x = reverse_number($x);\n    return $x;\n  }\n\n  $x = intval($x / pow(10,\
    \ $shift));\n  $r = $x % 10;\n  $x = intval($x / 10);\n  $x = $x + $r * pow(10,\
    \ $d - $shift - 1);\n  return $x;\n}\n", "  $x = (string)$x;\n  $n = strlen($x);\n\
    \  if ($shift > $n) {\n    return strrev($x);\n  } else {\n    return substr($x,\
    \ $shift) . substr($x, 0, $shift);\n  }\n}\n", "    // Convert $x to a string.\n\
    \    $str = (string)$x;\n    // If $shift is less than the number of digits in\
    \ $x\n    if($shift < strlen($str)) {\n        // Shift right by the number of\
    \ digits in $x, modulo $shift\n        $shift = $shift % strlen($str);\n     \
    \   // Shift the digits right by $shift.\n        $str = substr($str, $shift)\
    \ . substr($str, 0, $shift);\n    }\n    // If $shift is greater than the number\
    \ of digits in $x\n    else {\n        // Reverse the digits.\n        $str =\
    \ strrev($str);\n    }\n    // Return the result as a string.\n    return $str;\n\
    }\n", "  $x_str = strval($x);\n  $shift = $shift % strlen($x_str);\n  $x_str =\
    \ strrev($x_str);\n  $x_str = substr($x_str, $shift) . substr($x_str, 0, $shift);\n\
    \  return strrev($x_str);\n}\n", "    $number = (string) $x;\n    $number_length\
    \ = strlen($number);\n    if ($shift > $number_length) {\n        return strrev($number);\n\
    \    }\n    return substr($number, $shift) . substr($number, 0, $shift);\n}\n",
  "    $digits = str_split($x);\n    if ($shift > count($digits)) {\n        return\
    \ implode(array_reverse($digits));\n    }\n    for ($i = 0; $i < $shift; $i++)\
    \ {\n        array_unshift($digits, array_pop($digits));\n    }\n    return implode($digits);\n\
    }\n", "  if ($shift == 0) {\n    return strval($x);\n  }\n  $num_digits = num_digits($x);\n\
    \  if ($shift >= $num_digits) {\n    return strrev(strval($x));\n  }\n  $divisor\
    \ = int_pow(10, $shift);\n  $a = $x / $divisor;\n  $b = $x % $divisor;\n  return\
    \ strval($b) . strval($a);\n}\n", "  $str = strval($x);\n  if ($shift > strlen($str))\
    \ {\n    return strrev($str);\n  } else {\n    return substr($str, $shift, strlen($str))\
    \ . substr($str, 0, $shift);\n  }\n}\n", "    $s = strval($x);\n    $len = strlen($s);\n\
    \    $shift = $shift % $len;\n    if ($shift == 0) {\n        return $s;\n   \
    \ }\n    if ($shift < 0) {\n        $shift += $len;\n    }\n    return substr($s,\
    \ $shift) . substr($s, 0, $shift);\n}\n", "  $digits = str_split($x);\n  $result\
    \ = array_merge(array_slice($digits, $shift), array_slice($digits, 0, $shift));\n\
    \  return implode('', $result);\n}\n", "    $y = $x;\n    $digits = 0;\n    do\
    \ {\n        $y /= 10;\n        $digits++;\n    } while ($y > 0);\n    if ($shift\
    \ > $digits) {\n        $x = strrev((string)$x);\n    } else {\n        $shift\
    \ = $digits - $shift;\n        $x = substr($x, $shift) . substr($x, 0, $shift);\n\
    \    }\n    return $x;\n}\n", "    $s = (string)$x;\n    $len = strlen($s);\n\
    \    $shift = $shift % $len;\n    $s = substr($s, $shift) . substr($s, 0, $shift);\n\
    \    return $s;\n}", "  // Check if the shift is greater than the number of digits,\
    \ if so, return the\n  // digits reversed.\n  if ($shift > strlen((string)$x))\
    \ {\n    return strrev((string)$x);\n  }\n\n  // Mod the shift by the number of\
    \ digits.\n  $shift = $shift % strlen((string)$x);\n\n  // Shift the digits, adding\
    \ them to a new string.\n  $result = \"\";\n  for ($i = 0; $i < strlen((string)$x);\
    \ $i++) {\n    $result .= substr((string)$x, $i, 1);\n  }\n\n  // Grab a substring,\
    \ the first $shift digits.\n  $substring = substr($result, 0, $shift);\n\n  //\
    \ Shift the digits, adding them to a new string.\n  $result = \"\";\n  for ($i\
    \ = $shift; $i < strlen((string)$x); $i++) {\n    $result .= substr((string)$x,\
    \ $i, 1);\n  }\n\n  // Add the substring to the end of the result.\n  $result\
    \ .= $substring;\n\n  return $result;\n}\n", "  $x = (string)$x;\n  $len = strlen($x);\n\
    \  if ($shift > $len) {\n    $x = strrev($x);\n  } else {\n    $x = substr($x,\
    \ $shift) . substr($x, 0, $shift);\n  }\n  return $x;\n}\n", "    $reversed =\
    \ strrev((string)$x);\n    return strrev(substr($reversed, $shift) . substr($reversed,\
    \ 0, $shift));\n}\n", "    $x_str = (string)$x;\n    $digits = strlen($x_str);\n\
    \    if ($shift > $digits) {\n        return strrev($x_str);\n    }\n    $remaining\
    \ = $x_str;\n    $shifted = \"\";\n    for ($i = 0; $i < $shift; $i++) {\n   \
    \     $shifted .= $remaining[$digits - 1];\n        $remaining = substr($remaining,\
    \ 0, $digits - 1);\n    }\n    return $shifted . $remaining;\n}\n", "    $num_digits\
    \ = strlen((string)$x);\n    $shift = $shift % $num_digits;\n    if ($shift ==\
    \ 0) return $x;\n    $str_x = (string)$x;\n    $end = substr($str_x, 0, $shift);\n\
    \    $start = substr($str_x, $shift);\n    return $start . $end;\n}\n", "  $length\
    \ = strlen($x);\n  $str_x = (string)$x;\n  if ($shift >= $length) {\n    return\
    \ strrev($str_x);\n  }\n  return substr($str_x, $shift) . substr($str_x, 0, $shift);\n\
    }\n", "    // convert to string\n    $x = (string)$x;\n    $len = strlen($x);\n\
    \    if ($shift >= $len) {\n        return strrev($x);\n    }\n    $right = substr($x,\
    \ 0, $len - $shift);\n    $left = substr($x, $len - $shift);\n    return $left\
    \ . $right;\n}", "  $digits = strlen($x);\n  $shift = $shift % $digits;\n  if\
    \ ($shift == 0) return $x;\n  if ($shift > $digits) return strrev($x);\n  $begin\
    \ = substr($x, 0, $shift);\n  $end = substr($x, $shift);\n  return $end . $begin;\n\
    }", "  // Convert number to string.\n  $str = strval($x);\n  // Get the length\
    \ of the string.\n  $len = strlen($str);\n  // Empty string to store the final\
    \ result.\n  $result = \"\";\n  // Reverse the string to the right shift number\
    \ of times.\n  for ($i = 0; $i < $shift; $i++) {\n    $result = $str[$len - 1]\
    \ . $result;\n    $str = substr($str, 0, $len - 1);\n  }\n  // Append the remaining\
    \ digits to the result.\n  $result = $result . $str;\n  return $result;\n}\n",
  "  $digits = str_split($x);\n  $count = count($digits);\n  $shift = $shift % $count;\n\
    \  if ($shift == 0) {\n    return implode($digits);\n  }\n  for ($i = 0; $i <\
    \ $shift; $i++) {\n    $digits[] = array_shift($digits);\n  }\n  return implode($digits);\n\
    }\n", "    $num_digits = strlen($x);\n    if ($shift > $num_digits) {\n      \
    \  return strrev($x);\n    }\n    $shifted = substr($x, $shift, $num_digits);\n\
    \    $shifted .= substr($x, 0, $shift);\n    return $shifted;\n}", "    $digits\
    \ = strlen($x);\n    if ($shift >= $digits) {\n        $digits = strrev($x);\n\
    \    } else {\n        $digits = substr($x, $shift) . substr($x, 0, $shift);\n\
    \    }\n    return $digits;\n}\n", "    $s = strval($x);\n    $n = strlen($s);\n\
    \    if ($shift >= $n)\n        return strrev($s);\n    $b = substr($s, $shift);\n\
    \    $a = substr($s, 0, $shift);\n    return $b . $a;\n}\n", "    $num_digits\
    \ = 0;\n    $x1 = $x;\n    while ($x1 > 0) {\n        $x1 = floor($x1 / 10);\n\
    \        $num_digits++;\n    }\n    if ($shift > $num_digits) {\n        $x1 =\
    \ $x;\n        $x2 = 0;\n        while ($x1 > 0) {\n            $x2 = $x2 * 10\
    \ + $x1 % 10;\n            $x1 = floor($x1 / 10);\n        }\n        return (string)$x2;\n\
    \    }\n    $x1 = $x;\n    $x2 = 0;\n    while ($x1 > 0) {\n        $x2 = $x2\
    \ * 10 + $x1 % 10;\n        $x1 = floor($x1 / 10);\n    }\n    while ($shift >\
    \ 0) {\n        $d = $x2 % 10;\n        $x2 = floor($x2 / 10);\n        $x2 =\
    \ $x2 + $d * pow(10, $num_digits - 1);\n        $shift--;\n    }\n    return (string)$x2;\n\
    }", "  $x = strval($x);\n  $len = strlen($x);\n  if ($shift > $len) return strrev($x);\n\
    \  $x1 = substr($x, $len - $shift);\n  $x2 = substr($x, 0, $len - $shift);\n \
    \ return $x1 . $x2;\n}\n", "  $str = (string)$x;\n  $str = strrev($str);\n  $str\
    \ = str_pad($str, $shift, '0', STR_PAD_LEFT);\n  $str = substr($str, 0, $shift)\
    \ . substr($str, $shift);\n  return $str;\n}\n", "  $shifted = $x;\n  while ($shift\
    \ > 0) {\n    $remainder = $shifted % 10;\n    $shifted = $remainder * pow(10,\
    \ floor(log10($shifted))) + floor($shifted / 10);\n    $shift--;\n  }\n  return\
    \ (string)$shifted;\n}\n", "    $digits = count_digits($x);\n    $rev_digits =\
    \ array_reverse(array_pad(array(), $digits, 0));\n    for ($i = 0; $i < $digits;\
    \ $i++) {\n        $rev_digits[($i + $shift) % $digits] = get_digit($x, $i);\n\
    \    }\n    return implode(\"\", $rev_digits);\n}\n", "    $x_str = strval($x);\n\
    \    $length = strlen($x_str);\n    if ($shift >= $length) {\n        return strrev($x_str);\n\
    \    }\n    $left = substr($x_str, 0, $shift);\n    $right = substr($x_str, $shift);\n\
    \    return $right . $left;\n}\n", "  $digits = strlen($x);\n  $shift %= $digits;\n\
    \  if ($shift == 0) return $x;\n  return substr($x, $shift, $digits - $shift)\
    \ . substr($x, 0, $shift);\n}\n", "    $a = (string)$x;\n    $b = strrev($a);\n\
    \    $n = strlen($a);\n    if ($shift > $n) {\n        return $b;\n    }\n   \
    \ $a = substr($a, $shift);\n    $b = substr($b, 0, $shift);\n    return $a . $b;\n\
    }\n", "    $x = strval($x);\n    $n = strlen($x);\n    if ($shift >= $n) {\n \
    \       return strrev($x);\n    }\n    $res = substr($x, $shift) . substr($x,\
    \ 0, $shift);\n    return $res;\n}\n", "    $s = strval($x);\n    if (strlen($s)\
    \ < $shift) {\n        return strrev($s);\n    }\n    $left = substr($s, 0, $shift);\n\
    \    $right = substr($s, $shift);\n    return $right . $left;\n}\n", "    $x =\
    \ strval($x);\n    $len = strlen($x);\n    if ($shift > $len) {\n        return\
    \ strrev($x);\n    }\n    $shift = $len - $shift;\n    return substr($x, $shift)\
    \ . substr($x, 0, $shift);\n}\n", "  $s = strval($x);\n  $n = strlen($s);\n  if\
    \ ($shift > $n) {\n    return strrev($s);\n  } else {\n    return substr($s, $shift)\
    \ . substr($s, 0, $shift);\n  }\n}\n", "    $s = \"$x\";\n    $n = strlen($s);\n\
    \    if ($shift > $n) {\n        return strrev($s);\n    }\n    $first = substr($s,\
    \ 0, $shift);\n    $second = substr($s, $shift);\n    return $second . $first;\n\
    }", "  $strx = strval($x);\n  if ($shift > strlen($strx)) {\n    $strx = strrev($strx);\n\
    \  } else {\n    $strx = substr($strx, $shift) . substr($strx, 0, $shift);\n \
    \ }\n  return $strx;\n}\n", "    $x = strval($x);\n    $strlen = strlen($x);\n\
    \    if ($shift > $strlen) {\n        return strrev($x);\n    }\n    return substr($x,\
    \ $shift, $strlen) . substr($x, 0, $shift);\n}\n", "    $str = strval($x);\n \
    \   if ($shift > strlen($str)) {\n        return strrev($str);\n    }\n    $reversed\
    \ = strrev($str);\n    $shifted = substr($reversed, 0, $shift);\n    $unshifted\
    \ = substr($reversed, $shift);\n    return strrev($unshifted . $shifted);\n}\n",
  "    $n = floor(log10($x)) + 1;\n    if ($shift > $n) {\n        return strrev($x);\n\
    \    }\n    $y = $x % 10 ** $shift;\n    $x = floor($x / 10 ** $shift);\n    return\
    \ strval($y * 10 ** ($n - $shift) + $x);\n}\n", "  if ($shift == 0) {\n    return\
    \ $x;\n  }\n\n  $digits = [];\n  while ($x > 0) {\n    $digits[] = $x % 10;\n\
    \    $x = (int)($x / 10);\n  }\n\n  $n = count($digits);\n  if ($shift >= $n)\
    \ {\n    return join(\"\", array_reverse($digits));\n  }\n\n  for ($i = 0; $i\
    \ < $shift; $i++) {\n    $p = array_pop($digits);\n    array_unshift($digits,\
    \ $p);\n  }\n\n  return join(\"\", $digits);\n}\n", "    if ($shift >= strlen($x))\
    \ {\n        return strrev($x);\n    }\n    return substr($x, $shift) . substr($x,\
    \ 0, $shift);\n}\n", "    $reversed = strrev((string)$x);\n    if ($shift > strlen($reversed))\
    \ {\n        return $reversed;\n    }\n    $prefix = substr($reversed, 0, $shift);\n\
    \    $suffix = substr($reversed, $shift);\n    return $suffix . $prefix;\n}\n\n\
    $values = array(12, 1, 12, 2);\n$f = function($x, $shift) {\n    return circular_shift($x,\
    \ $shift);\n};\necho implode(', ', array_map($f, $values, array_slice($values,\
    \ 1))) . \"\\n\";", "  $result = strrev($x);\n  if ($shift < strlen($x)) {\n \
    \   $result = substr($result, 0, $shift) . strrev(substr($result, $shift));\n\
    \  }\n  return $result;\n}\n", "  $digits = str_split($x);\n  $x = array_pop($digits);\n\
    \  return implode($digits) . $x;\n}\n", "  $digits = array_map('intval', str_split($x));\n\
    \  if ($shift > count($digits)) {\n    $digits = array_reverse($digits);\n  }\
    \ else {\n    $digits = array_merge(array_slice($digits, -$shift),\n      array_slice($digits,\
    \ 0, -$shift));\n  }\n  return implode($digits);\n}\n", "  $num_digits = floor(log10($x)\
    \ + 1);\n\n  if ($shift > $num_digits) {\n    $x = strrev($x);\n  }\n  else {\n\
    \    $first_part = substr($x, $shift);\n    $second_part = substr($x, 0, $shift);\n\
    \    $x = $first_part . $second_part;\n  }\n\n  return $x;\n}\n\nif (isset($argv[1]))\
    \ {\n  $x = $argv[1];\n  $shift = $argv[2];\n  echo circular_shift($x, $shift)\
    \ . \"\\n\";\n}\nelse {\n  echo \"Usage: php circular_shift.php <num> <shift>\\\
    n\";\n}", "    $str = (string)$x;\n    $digits = strlen($str);\n    if ($shift\
    \ >= $digits) {\n        return strrev($str);\n    }\n    $left = substr($str,\
    \ 0, $shift);\n    $right = substr($str, $shift);\n    return $right . $left;\n\
    }\n", "    $string_x = strval($x);\n    $length = strlen($string_x);\n    $reverse\
    \ = '';\n    if ($shift > $length) {\n        for ($i = 0; $i < $length; $i++)\
    \ {\n            $reverse = $string_x[$i] . $reverse;\n        }\n        return\
    \ $reverse;\n    } else {\n        $shift_x = '';\n        for ($i = 0; $i < $length;\
    \ $i++) {\n            $shift_x = $shift_x . $string_x[($i + $shift) % $length];\n\
    \        }\n        return $shift_x;\n    }\n}\n", "    $digits = str_split($x);\n\
    \    $digits = array_slice($digits, -$shift) + array_slice($digits, 0, -$shift);\n\
    \    return implode($digits);\n}\n", "  if ($shift > strlen($x)) {\n    return\
    \ strrev($x);\n  }\n  return substr($x, $shift) . substr($x, 0, $shift);\n}\n",
  "    $n = floor(log10($x)) + 1;\n    if ($shift > $n) {\n        $x = strrev($x);\n\
    \    } else {\n        $x = $x % pow(10, $shift) * pow(10, $n - $shift) + floor($x\
    \ / pow(10, $shift));\n    }\n    return (string)$x;\n}\n", "  $digits = str_split($x);\n\
    \  $num_digits = count($digits);\n  if ($shift >= $num_digits) {\n    return implode('',\
    \ array_reverse($digits));\n  }\n  $mod_shift = $shift % $num_digits;\n  $new_digits\
    \ = array_merge(array_slice($digits, $mod_shift), array_slice($digits, 0, $mod_shift));\n\
    \  return implode('', $new_digits);\n}\n", "    $x = (string) $x;\n    $first\
    \ = substr($x, 0, $shift);\n    $rest = substr($x, $shift);\n    return $rest\
    \ . $first;\n}\n", "    $digits = number_of_digits($x);\n    if ($shift >= $digits)\
    \ {\n        return strrev($x);\n    }\n    $s = (string)$x;\n    $left = substr($s,\
    \ 0, $shift);\n    $right = substr($s, $shift);\n    return $right . $left;\n\
    }\n", "  $digits = strlen($x);\n  if ($shift > $digits) {\n    return strrev($x);\n\
    \  }\n  $first = substr($x, 0, $shift);\n  $second = substr($x, $shift);\n  return\
    \ $second . $first;\n}\n", "    // if number of digits in x is 1 or less, return\
    \ reversed\n    if ($x < 10) {\n        return strrev($x);\n    }\n    // if shift\
    \ is 1 or less, no need to shift\n    if ($shift < 2) {\n        return $x;\n\
    \    }\n    // Split number into array of digits\n    $digits = str_split($x);\n\
    \    // Shift array\n    $ret = array_shift($digits);\n    $digits[] = $ret;\n\
    \    // Rejoin as string\n    return implode('', $digits);\n}\n", "    $digits\
    \ = str_split($x);\n    if ($shift > count($digits)) {\n        return join('',\
    \ array_reverse($digits));\n    }\n    $remaining = count($digits) - $shift;\n\
    \    return join('', array_merge(array_slice($digits, $remaining), array_slice($digits,\
    \ 0, $remaining)));\n}\n", "    $str = strval($x);\n    $temp = strrev($str);\n\
    \    for ($i = 0; $i < $shift; $i++) {\n        $last = $temp[0];\n        $temp\
    \ = substr($temp, 1) . $last;\n    }\n    return strrev($temp);\n}", "  $len =\
    \ floor(log10($x)) + 1;\n  if ($shift >= $len) return strrev(strval($x));\n  $c\
    \ = $x % 10;\n  for ($i = 0; $i < $shift; $i++) {\n    $c = floor($x / 10) + ($c\
    \ * 10);\n    $x = $x / 10;\n  }\n  return strval($c);\n}\n", "  $s = strval($x);\n\
    \  $len = strlen($s);\n  $s = substr($s, $len - $shift, $shift) . substr($s, 0,\
    \ $len - $shift);\n  return $s;\n}\n", "    $str = strval($x);\n    $str = substr($str,\
    \ -$shift) . substr($str, 0, -$shift);\n    return $str;\n}", "  $digits = count_digits($x);\n\
    \  if ($shift > $digits) {\n    return strrev($x);\n  }\n  $first = substr($x,\
    \ 0, $shift);\n  $rest = substr($x, $shift);\n  return $rest . $first;\n}\n",
  "    if ($shift == 0) {\n        return $x;\n    }\n\n    $str = (string) $x;\n\
    \    $n = strlen($str);\n    if ($shift >= $n) {\n        return strrev($str);\n\
    \    }\n\n    $str = substr($str, $shift) . substr($str, 0, $shift);\n    return\
    \ $str;\n}\n\necho circular_shift(12, 1) . PHP_EOL;\necho circular_shift(12, 2)\
    \ . PHP_EOL;\necho circular_shift(12, 3) . PHP_EOL;\necho circular_shift(12, 4)\
    \ . PHP_EOL;\necho circular_shift(12, 100) . PHP_EOL;", "    $x = (string) $x;\n\
    \    $shift = (int) $shift;\n    if ($shift > strlen($x)) {\n        return strrev($x);\n\
    \    }\n    if ($shift == 0) {\n        return $x;\n    }\n    $last = substr($x,\
    \ -$shift);\n    $first = substr($x, 0, -$shift);\n    return $last . $first;\n\
    }\n", "    $str = strval($x);\n    $len = strlen($str);\n    if ($shift >= $len)\
    \ {\n        $result = strrev($str);\n    } else {\n        $result = substr($str,\
    \ $shift).substr($str, 0, $shift);\n    }\n    return $result;\n}\n", "  $digits\
    \ = array();\n  $result = array();\n  $len = 0;\n  $tmp = $x;\n  while ($tmp >\
    \ 0) {\n    $len++;\n    $digits[] = $tmp % 10;\n    $tmp = (int)($tmp / 10);\n\
    \  }\n  if ($shift > $len) {\n    for ($i = $len - 1; $i >= 0; $i--) {\n     \
    \ $result[] = $digits[$i];\n    }\n  } else {\n    for ($i = $len - $shift; $i\
    \ < $len; $i++) {\n      $result[] = $digits[$i];\n    }\n    for ($i = 0; $i\
    \ < $len - $shift; $i++) {\n      $result[] = $digits[$i];\n    }\n  }\n  return\
    \ implode('', $result);\n}\n", "    $digits = str_split($x);\n    $digits_reversed\
    \ = array_reverse($digits);\n    for ($i = 0; $i < $shift; $i++) {\n        array_push($digits_reversed,\
    \ array_shift($digits_reversed));\n    }\n    return implode('', array_reverse($digits_reversed));\n\
    }\n", "  $digits = str_split((string)$x);\n  $n = count($digits);\n  $result =\
    \ '';\n  for ($i = 0; $i < $n; $i++) {\n    $result .= $digits[($i + $shift) %\
    \ $n];\n  }\n  return $result;\n}\n\n$config = array(\n    'DB_DNS' => 'mysql:host=localhost;port=3306;dbname=PHPAdvClassSpring2017',\n\
    \    'DB_USER' => 'root',\n    'DB_PASSWORD' => ''\n);\n", "    $string = strval($x);\n\
    \    $length = strlen($string);\n    if ($shift > $length) {\n        return strrev($string);\n\
    \    }\n    $first = substr($string, 0, $shift);\n    $second = substr($string,\
    \ $shift);\n    return $second . $first;\n}\n", "    $len = strlen((string)$x);\n\
    \    $shift = $shift % $len;\n    if ($shift == 0) {\n        return $x;\n   \
    \ }\n    $y = $x;\n    for ($i = 0; $i < $shift; $i++) {\n        $y = ($y % 10)\
    \ * pow(10, $len - 1) + floor($y / 10);\n    }\n    return $y;\n}\n", "    $x_str\
    \ = (string)$x;\n    $x_str_len = strlen($x_str);\n    if ($shift > $x_str_len)\
    \ {\n        return strrev($x_str);\n    }\n    $prefix = substr($x_str, $shift);\n\
    \    $suffix = substr($x_str, 0, $shift);\n    return $prefix . $suffix;\n}\n",
  "    $digits = strlen($x);\n    if ($shift > $digits) {\n        $x = strrev($x);\n\
    \    } else {\n        $x = substr($x, $shift) . substr($x, 0, $shift);\n    }\n\
    \    return $x;\n}\n", "    $x_str = strval($x);\n    $len = strlen($x_str);\n\
    \    if ($shift == 0) {\n        return $x_str;\n    } else if ($shift > $len)\
    \ {\n        return strrev($x_str);\n    } else {\n        return substr($x_str,\
    \ $shift) . substr($x_str, 0, $shift);\n    }\n}\n", "    $n = strlen($x);\n \
    \   $mod = $shift % $n;\n    if ($mod == 0) {\n        return $x;\n    }\n   \
    \ $prefix = substr($x, 0, $n - $mod);\n    $suffix = substr($x, $n - $mod);\n\
    \    return $suffix . $prefix;\n}\n", "  $str = (string)$x;\n  $len = strlen($str);\n\
    \  if ($shift < 0) {\n    $shift += $len;\n  }\n  if ($shift == 0) {\n    return\
    \ $str;\n  }\n  if ($shift >= $len) {\n    return strrev($str);\n  }\n  return\
    \ substr($str, $shift) . substr($str, 0, $shift);\n}\n", "  if ($shift <= 0) return\
    \ $x;\n  $digits = str_split($x);\n  if ($shift >= count($digits)) return implode('',\
    \ array_reverse($digits));\n  $split = count($digits) - $shift;\n  $rhs = array_slice($digits,\
    \ $split);\n  $lhs = array_slice($digits, 0, $split);\n  return implode('', array_merge($rhs,\
    \ $lhs));\n}", "    if ($shift > strlen($x)) {\n        return strrev($x);\n \
    \   }\n    $x = str_split($x);\n    for ($i = 0; $i < $shift; $i++) {\n      \
    \  $x[] = array_shift($x);\n    }\n    return implode($x);\n}\n", "    $x_str\
    \ = (string)$x;\n    $len = strlen($x_str);\n    if ($shift >= $len)\n       \
    \ return strrev($x_str);\n    return substr($x_str, $shift) . substr($x_str, 0,\
    \ $shift);\n}\n", "  $n = strlen((string)$x);\n  $shift = ($shift % $n + $n) %\
    \ $n;\n  return substr((string)$x, $shift) . substr((string)$x, 0, $shift);\n\
    }\n", "    $x_str = strval($x);\n    if ($shift > strlen($x_str)) {\n        return\
    \ strrev($x_str);\n    }\n    $shift_str = substr($x_str, $shift);\n    $circular_str\
    \ = substr($x_str, 0, $shift);\n    return $shift_str . $circular_str;\n}\n",
  "    $digits = str_split($x);\n    $num_digits = count($digits);\n    $shifted =\
    \ array_merge(array_slice($digits, $shift % $num_digits), array_slice($digits,\
    \ 0, $shift % $num_digits));\n    return implode('', $shifted);\n}\n", "  // TODO(kashomon):\
    \ Make this a pure string-based operation. This\n  // will require handling negative\
    \ numbers and a lot of tricky\n  // cases.\n  $x = sprintf(\"%d\", $x);\n  $len\
    \ = strlen($x);\n  if ($shift == 0) {\n    return $x;\n  } else if ($shift >=\
    \ $len) {\n    return strrev($x);\n  } else {\n    return substr($x, $len - $shift)\
    \ . substr($x, 0, $len - $shift);\n  }\n}\n", "    if ($shift > mb_strlen($x))\
    \ {\n        $x = mb_strrev($x);\n    } else {\n        $x = mb_substr($x, $shift)\
    \ . mb_substr($x, 0, $shift);\n    }\n    return $x;\n}\n", "  $digits = str_split($x);\n\
    \  if (count($digits) < $shift) {\n    return implode(array_reverse($digits));\n\
    \  }\n  return implode(array_merge(array_slice($digits, $shift), array_slice($digits,\
    \ 0, $shift)));\n}\n", "  if ($shift == 0) return $x;\n  $digits = array();\n\
    \  $digits[] = $x % 10;\n  $x = (int)($x / 10);\n  while ($x > 0) {\n    $digits[]\
    \ = $x % 10;\n    $x = (int)($x / 10);\n  }\n  $n = count($digits);\n  if ($shift\
    \ > $n) {\n    $digits = array_reverse($digits);\n  } else {\n    for ($i = 0;\
    \ $i < $shift; $i++) {\n      $digit = array_pop($digits);\n      array_unshift($digits,\
    \ $digit);\n    }\n  }\n  $num = 0;\n  $n = count($digits);\n  for ($i = 0; $i\
    \ < $n; $i++) {\n    $num = $num * 10 + $digits[$i];\n  }\n  return $num;\n}\n",
  "    $x_str = strval($x);\n    $x_str_len = strlen($x_str);\n    if ($shift > $x_str_len)\
    \ {\n        $new_str = strrev($x_str);\n    } else {\n        $new_str = substr($x_str,\
    \ $shift, $x_str_len - $shift) . substr($x_str, 0, $shift);\n    }\n    return\
    \ $new_str;\n}\n", "  $digits = strlen($x);\n  if ($shift > $digits) {\n    return\
    \ strrev($x);\n  }\n  $divisor = pow(10, $shift);\n  $post_shift = $x % $divisor;\n\
    \  $pre_shift = floor($x / $divisor);\n  return \"$post_shift$pre_shift\";\n}",
  "  $x_string = strval($x);\n  $digits = strlen($x_string);\n  if ($shift >= $digits)\
    \ {\n    return strrev($x_string);\n  }\n  return substr($x_string, $shift) .\
    \ substr($x_string, 0, $shift);\n}\n", "    $digits = str_split($x);\n    $digits_reversed\
    \ = array_reverse($digits);\n    if ($shift > count($digits)) {\n        return\
    \ implode($digits_reversed);\n    }\n    $x1 = array_slice($digits, $shift);\n\
    \    $x2 = array_slice($digits, 0, $shift);\n    $new_array = array_merge($x1,\
    \ $x2);\n    return implode($new_array);\n}\n", "    $tmp = $x;\n    $digits =\
    \ array();\n    while ($tmp > 0) {\n        $digits[] = $tmp % 10;\n        $tmp\
    \ = floor($tmp / 10);\n    }\n    $digits = array_reverse($digits);\n    $d =\
    \ count($digits);\n    if ($shift % $d == 0) {\n        $result = '';\n      \
    \  foreach ($digits as $digit) {\n            $result .= $digit;\n        }\n\
    \        return $result;\n    }\n    $result = array();\n    for ($i = 0; $i <\
    \ $d; $i++) {\n        $result[] = $digits[($i + $shift) % $d];\n    }\n    $result\
    \ = implode('', $result);\n    return $result;\n}\n", "  $digits = [];\n  while\
    \ ($x > 0) {\n    $digits[] = $x % 10;\n    $x = floor($x / 10);\n  }\n  $digits\
    \ = array_reverse($digits);\n  $size = count($digits);\n  if ($shift >= $size)\
    \ {\n    return implode('', $digits);\n  }\n  $a = array_slice($digits, $shift);\n\
    \  $b = array_slice($digits, 0, $shift);\n  return implode('', array_merge($a,\
    \ $b));\n}\n", "    $digits = str_split($x);\n    if ($shift > count($digits))\
    \ {\n        return strrev($x);\n    } else {\n        $result = implode(array_merge(array_slice($digits,\
    \ $shift), array_slice($digits, 0, $shift)));\n        return $result;\n    }\n\
    }\n", "    $x_string = (string) $x;\n    $num_digits = strlen($x_string);\n  \
    \  if ($shift < $num_digits) {\n        $x_string = substr($x_string, $shift)\
    \ . substr($x_string, 0, $shift);\n    } else {\n        $x_string = strrev($x_string);\n\
    \    }\n    return $x_string;\n}\n", "    $s = strval($x);\n    $slen = strlen($s);\n\
    \    if ($shift > $slen) {\n        return strrev($s);\n    }\n    return substr($s,\
    \ $shift) . substr($s, 0, $shift);\n}\necho circular_shift(12, 1) . PHP_EOL;\n\
    echo circular_shift(12, 2) . PHP_EOL;\necho circular_shift(12345, 1) . PHP_EOL;\n\
    echo circular_shift(12345, 2) . PHP_EOL;\necho circular_shift(12345, 3) . PHP_EOL;\n\
    echo circular_shift(12345, 5) . PHP_EOL;\necho circular_shift(12345, 6) . PHP_EOL;\n\
    echo circular_shift(12345, 7) . PHP_EOL;\necho circular_shift(12345, 8) . PHP_EOL;\n\
    echo circular_shift(12345, 9) . PHP_EOL;\necho circular_shift(12345, 10) . PHP_EOL;\n\
    echo circular_shift(12345, 11) . PHP_EOL;\necho circular_shift(12345, 12) . PHP_EOL;\n\
    echo circular_shift(12345, 13) . PHP_EOL;\necho circular_shift(12345, 14) . PHP_EOL;\n\
    echo circular_shift(12345, 15) . PHP_EOL;\necho circular_shift(12345, 16) . PHP_EOL;\n\
    echo circular_shift(12345, 17) . PHP_EOL;\necho circular_shift(12345, 18) . PHP_EOL;\n\
    echo circular_shift(12345, 19) . PHP_EOL;\necho circular_shift(12345, 20) . PHP_EOL;\n\
    echo circular_shift(12345, 21) . PHP_EOL;\necho circular_shift(12345, 22) . PHP_EOL;\n\
    echo circular_shift(12345, 23) . PHP_EOL;\necho circular_shift(12345, 24) . PHP_EOL;\n\
    echo circular_shift(12345, 25) . PHP_EOL;\necho circular_shift(123", "  $r = strrev($x);\n\
    \  $r = substr($r, 0, $shift) . substr($r, $shift);\n  return strrev($r);\n}\n",
  "    $digits = log10($x);\n    if ($shift > $digits) {\n        $x = strrev($x);\n\
    \    } else {\n        $str = strval($x);\n        $str = substr($str, $shift)\
    \ . substr($str, 0, $shift);\n        $x = intval($str);\n    }\n    return $x;\n\
    }\n", "  $x = (string)$x;\n  $len = strlen($x);\n  if ($shift >= $len) return\
    \ strrev($x);\n  return substr($x, $len - $shift) . substr($x, 0, $len - $shift);\n\
    }\n", "    if($shift == 0) return strval($x);\n    $digits = strlen(strval($x));\n\
    \    if($shift >= $digits) {\n        return strrev(strval($x));\n    } else {\n\
    \        $new_number = strrev(strval($x));\n        $new_number = substr($new_number,\
    \ 0, $shift) .\n                      substr($new_number, $shift, $digits - $shift)\
    \ .\n                      substr($new_number, $digits, $shift);\n        return\
    \ strrev($new_number);\n    }\n}\n", "    $digits = str_split($x);\n    $digits\
    \ = array_merge(array_slice($digits, -$shift), $digits);\n    $digits = array_slice($digits,\
    \ 0, count($digits) - $shift);\n    return implode('', $digits);\n}\n", "    $len\
    \ = strlen($x);\n    if ($shift == $len) return $x;\n    if ($shift > $len) return\
    \ strrev($x);\n    $y = substr($x, $shift, $len);\n    $y .= substr($x, 0, $shift);\n\
    \    return $y;\n}\n", "  $s = strval($x);\n  $l = strlen($s);\n  if ($shift >=\
    \ $l) {\n    return strrev($s);\n  }\n  return substr($s, $shift, $l) . substr($s,\
    \ 0, $shift);\n}\n", "  $num_digits = ceil(log10($x));\n  if ($shift > $num_digits)\
    \ {\n    return strrev((string)$x);\n  }\n  $shift_digits = $x % pow(10, $shift);\n\
    \  $x = floor($x / pow(10, $shift));\n  return $shift_digits . $x;\n}\n", "  \
    \  $s = strval($x);\n    if ($shift > strlen($s)) {\n        $s = strrev($s);\n\
    \    } else {\n        $s = substr($s, $shift) . substr($s, 0, $shift);\n    }\n\
    \    return $s;\n}\n", "    $x_arr = array_map('intval', str_split($x));\n   \
    \ $n = count($x_arr);\n    $shift = $shift % $n;\n\n    $a = array_slice($x_arr,\
    \ $shift);\n    $b = array_slice($x_arr, 0, $shift);\n\n    return implode('',\
    \ array_merge($a, $b));\n}\n", "    $s = strval($x);\n    if ($shift > strlen($s))\
    \ {\n        return strrev($s);\n    }\n    return substr($s, $shift) . substr($s,\
    \ 0, $shift);\n}\n", "    // Circular shift the digits of x by shift.\n    $digits\
    \ = array_reverse(str_split($x));\n    for ($i = 0; $i < $shift; $i++) {\n   \
    \     $digits[] = array_shift($digits);\n    }\n    return implode('', array_reverse($digits));\n\
    }\n", "    if ($shift > strlen($x)) {\n        $temp = strrev($x);\n        return\
    \ $temp;\n    }\n    else {\n        $first = substr($x, 0, $shift);\n       \
    \ $second = substr($x, $shift);\n        $temp = $second . $first;\n        return\
    \ $temp;\n    }\n}", "    $digits = str_split($x);\n    $digits = array_reverse($digits);\n\
    \    for ($i = 0; $i < $shift; $i++) {\n        $last = array_pop($digits);\n\
    \        array_unshift($digits, $last);\n    }\n    return implode($digits);\n\
    }\n", "    $s = ''.$x;\n    $r = '';\n    $l = strlen($s);\n    if ($shift > $l)\
    \ {\n        $r = strrev($s);\n    } else {\n        $r = substr($s, -$shift)\
    \ . substr($s, 0, $l - $shift);\n    }\n    return $r;\n}\n", "  $num_digits =\
    \ strlen((string)$x);\n  $ret = \"\";\n  $str_x = (string)$x;\n  $shift = $shift\
    \ % $num_digits;\n  if ($shift === 0) return $str_x;\n  elseif ($shift < 0) {\n\
    \    $shift = $num_digits + $shift;\n  }\n  $ret = substr($str_x, $shift);\n \
    \ $ret .= substr($str_x, 0, $shift);\n  return $ret;\n}\n", "    $x_str = (string)$x;\n\
    \    $len = strlen($x_str);\n    if ($shift >= $len) {\n        return strrev($x_str);\n\
    \    }\n    $left = substr($x_str, 0, $shift);\n    $right = substr($x_str, $shift);\n\
    \    return $right . $left;\n}\n", "  // Base case.\n  if ($x < 10) {\n    return\
    \ \"$x\";\n  }\n  // Circular shift the digits left.\n  $y = $x;\n  $right_digit\
    \ = $y % 10;\n  $remaining_digits = ($y - $right_digit) / 10;\n  $shifted_digits\
    \ = circular_shift($remaining_digits, $shift - 1);\n  // Append shifted right\
    \ digit to the end.\n  $result = \"$shifted_digits$right_digit\";\n  return $result;\n\
    }\n", "    // Using the number of digits to shift, shift the digits right by that\
    \ amount\n    if (strlen($x) <= $shift) {\n        // Return the digits reversed\n\
    \        return strrev($x);\n    } else {\n        // Extract the digits to shift\n\
    \        $offset = strlen($x) - $shift;\n        $shifted = substr($x, $offset);\n\
    \        // Return the shifted digits and the non-shifted digits\n        return\
    \ $shifted . substr($x, 0, $offset);\n    }\n}\n", "    $digits = str_split($x);\n\
    \    if (count($digits) < $shift) {\n        return implode(\"\", array_reverse($digits));\n\
    \    }\n    return implode(\"\", array_merge(array_slice($digits, $shift), array_slice($digits,\
    \ 0, $shift)));\n}\n", "    if ($shift < 1) {\n        return $x;\n    }\n   \
    \ $digits = str_split($x);\n    $num_digits = count($digits);\n    $shift = $shift\
    \ % $num_digits;\n    $result = \"\";\n    for ($i = $num_digits - $shift; $i\
    \ < $num_digits; $i++) {\n        $result .= $digits[$i];\n    }\n    for ($i\
    \ = 0; $i < $num_digits - $shift; $i++) {\n        $result .= $digits[$i];\n \
    \   }\n    return $result;\n}\n", "    $digits = [];\n    while ($x > 0) {\n \
    \       $digits[] = $x % 10;\n        $x = intval($x / 10);\n    }\n    $digits\
    \ = array_reverse($digits);\n    if ($shift >= count($digits)) {\n        return\
    \ implode(\"\", $digits);\n    }\n    $a = array_slice($digits, 0, $shift);\n\
    \    $b = array_slice($digits, $shift);\n    return implode(\"\", array_merge($b,\
    \ $a));\n}\n", "    $digits = str_split((string)$x);\n    $len = count($digits);\n\
    \    if ($shift >= $len) {\n        return strrev($x);\n    }\n    for ($i = 0;\
    \ $i < $shift; $i++) {\n        $digits[] = array_shift($digits);\n    }\n   \
    \ return implode('', $digits);\n}\n\necho circular_shift(12, 1) . \"\\n\";\necho\
    \ circular_shift(12, 2) . \"\\n\";\necho circular_shift(123, 1) . \"\\n\";\necho\
    \ circular_shift(123, 2) . \"\\n\";\necho circular_shift(123, 3) . \"\\n\";\n\
    echo circular_shift(123, 4) . \"\\n\";\necho circular_shift(123, 5) . \"\\n\"\
    ;\necho circular_shift(123, 6) . \"\\n\";\necho circular_shift(123, 7) . \"\\\
    n\";\necho circular_shift(123, 8) . \"\\n\";\necho circular_shift(123, 9) . \"\
    \\n\";\necho circular_shift(123, 10) . \"\\n\";\necho circular_shift(123, 11)\
    \ . \"\\n\";\necho circular_shift(123, 12) . \"\\n\";\necho circular_shift(123,\
    \ 13) . \"\\n\";\necho circular_shift(123, 14) . \"\\n\";\necho circular_shift(123,\
    \ 15) . \"\\n\";\necho circular_shift(123, 16) . \"\\n\";\necho circular_shift(123,\
    \ 17) . \"\\n\";\necho circular_shift(123, 18) . \"\\n\";\necho circular_shift(123,\
    \ 19) . \"\\n\";\necho circular_shift(123, 20) . \"\\n\";\necho circular_shift(123,\
    \ 21) . \"\\n\";\necho circular_shift(123, 22) . \"\\n\";\necho circular_shift(123,\
    \ 23) . \"\\n\";\necho circular_shift(123, 24) . \"\\n\";\necho circular_shift(123,\
    \ 25) . \"\\n\";\necho circular_shift(123, 26) . \"\\n\";\necho circular_shift(123,\
    \ 27) . \"\\n\";\necho circular_shift(123, 28) .", "  $str = strval($x);\n  $str\
    \ = strrev($str);\n  $str = substr($str, 0, $shift) . substr($str, $shift);\n\
    \  $str = strrev($str);\n  return $str;\n}\n", "    $x = \"$x\";\n    $shift =\
    \ ($shift % strlen($x));\n    if ($shift == 0) return $x;\n    return (substr($x,\
    \ -$shift) . substr($x, 0, -$shift));\n}\n", "  $digits = strlen($x);\n  if ($shift\
    \ > $digits) {\n    $x = strrev($x);\n  } else {\n    $rshift = $digits - $shift;\n\
    \    $x = substr($x, $rshift) . substr($x, 0, $rshift);\n  }\n  return $x;\n}\n",
  "  $x = strval($x);\n  if ($shift >= strlen($x)) {\n    return strrev($x);\n  }\n\
    \  $x = substr($x, $shift) . substr($x, 0, $shift);\n  return $x;\n}\n", "   \
    \ $digits = strlen((string)$x);\n    $total = $digits;\n    $reversed = 0;\n \
    \   $shifted = 0;\n    for ($i = 0; $i < $digits; $i++) {\n        $d = $x % 10;\n\
    \        $reversed = $reversed * 10 + $d;\n        $x = (int)($x / 10);\n    }\n\
    \    for ($i = 0; $i < $shift; $i++) {\n        $d = $reversed % 10;\n       \
    \ $shifted = $shifted * 10 + $d;\n        $reversed = (int)($reversed / 10);\n\
    \    }\n    for ($i = 0; $i < $total - $shift; $i++) {\n        $d = $reversed\
    \ % 10;\n        $shifted = $shifted * 10 + $d;\n        $reversed = (int)($reversed\
    \ / 10);\n    }\n    return (string)$shifted;\n}\n\n$test = [\n    [ 12, 1 ],\n\
    \    [ 12, 2 ],\n    [ 12, 3 ],\n    [ 12, 4 ],\n    [ 12, 5 ],\n    [ 12, 6 ],\n\
    \    [ 12, 7 ],\n    [ 12, 8 ],\n    [ 12, 9 ],\n    [ 12, 10 ],\n    [ 12, 11\
    \ ],\n    [ 12, 12 ],\n    [ 99, 1 ],\n    [ 99, 2 ],\n    [ 99, 3 ],\n    [ 99,\
    \ 4 ],\n    [ 99, 5 ],\n    [ 99, 6 ],\n    [ 99, 7 ],\n    [ 99, 8 ],\n    [\
    \ 99, 9 ],\n    [ 99, 10 ],\n    [ 99, 11 ],\n    [ 99, 12 ],\n    [ 123, 1 ],\n\
    \    [ 123, 2 ],\n    [ 123, 3 ],\n    [ 123, 4 ],\n    [ 123, 5 ],\n    [ 123,\
    \ 6 ],\n    [ 123, 7 ],\n    [ 123, 8 ],\n    [ 123, 9 ],\n    [ 123, 10 ],\n\
    \    [ 123, 11 ],\n    [ 123, 12 ],\n    [ 123456789", "  $x = strval($x);\n \
    \ if ($shift > strlen($x)) {\n    return strrev($x);\n  }\n  return substr($x,\
    \ $shift) . substr($x, 0, $shift);\n}\n", "  $str = strval($x);\n  if ($shift\
    \ > strlen($str)) {\n    return strrev($str);\n  }\n  return substr($str, $shift)\
    \ . substr($str, 0, $shift);\n}\n", "  if ($shift < 0)\n    $shift = 0;\n  $x\
    \ = (string)$x;\n  $strlen = strlen($x);\n  if ($shift > $strlen)\n    return\
    \ strrev($x);\n  return substr($x, $strlen - $shift) . substr($x, 0, $strlen -\
    \ $shift);\n}\n", "    // Your code here\n    return $x;\n}\n", "    $len = strlen((string)$x);\n\
    \    if ($shift > $len) {\n        return strrev((string)$x);\n    }\n    $first\
    \ = substr((string)$x, 0, $len - $shift);\n    $second = substr((string)$x, $len\
    \ - $shift);\n    return $second . $first;\n}\n\nif (isset($argv[1])) {\n    $x\
    \ = (int)$argv[1];\n    $shift = (int)$argv[2];\n    echo circular_shift($x, $shift);\n\
    }", "    $string = (string) $x;\n    $len = strlen($string);\n    $output = '';\n\
    \    if ($shift >= $len) {\n        for ($i = $len - 1; $i >= 0; $i--) {\n   \
    \         $output .= $string[$i];\n        }\n    } else {\n        for ($i =\
    \ $len - $shift; $i < $len; $i++) {\n            $output .= $string[$i];\n   \
    \     }\n        for ($i = 0; $i < $len - $shift; $i++) {\n            $output\
    \ .= $string[$i];\n        }\n    }\n    return $output;\n}\n", "    if ($shift\
    \ == 0) {\n        return (string)$x;\n    }\n    $digits = count_digits($x);\n\
    \    if ($shift >= $digits) {\n        return (string)intval(strrev((string)$x));\n\
    \    }\n    $x_string = (string)$x;\n    $left = substr($x_string, 0, $shift);\n\
    \    $right = substr($x_string, $shift);\n    return $right . $left;\n}\n", " \
    \   $str = strval($x);\n    $len = strlen($str);\n    if ($shift >= $len) {\n\
    \        $shift = $len - 1;\n    }\n    $left = substr($str, 0, $shift);\n   \
    \ $right = substr($str, $shift);\n    return $right . $left;\n}\n", "  if ($shift\
    \ > log10($x)) {\n    return strrev($x);\n  } else {\n    $x = strval($x);\n \
    \   $x = substr($x, $shift) . substr($x, 0, $shift);\n    return $x;\n  }\n}\n",
  "    $x = (string) $x;\n    $len = strlen($x);\n    $shift = $shift % $len;\n  \
    \  if ($shift > 0) {\n        $x = substr($x, $shift, $len) . substr($x, 0, $shift);\n\
    \    }\n    return $x;\n}\n", "    $str = strval($x);\n    if ($shift >= strlen($str))\
    \ {\n        return strrev($str);\n    }\n    $new_start = $shift % strlen($str);\n\
    \    return substr($str, $new_start) . substr($str, 0, $new_start);\n}\n", " \
    \ $str = strval($x);\n  $len = strlen($str);\n  if ($shift == 0) {\n    return\
    \ $str;\n  } else if ($shift < $len) {\n    return substr($str, $shift) . substr($str,\
    \ 0, $shift);\n  } else {\n    return strrev($str);\n  }\n}\n", "    $s = (string)$x;\n\
    \    $len = strlen($s);\n    if ($shift >= $len) {\n        return strrev($s);\n\
    \    }\n    $lhs = substr($s, $shift);\n    $rhs = substr($s, 0, $shift);\n  \
    \  return $lhs . $rhs;\n}\n", "    $s = (string)$x;\n    $n = strlen($s);\n  \
    \  if ($shift > $n) {\n        return strrev($s);\n    }\n    return substr($s,\
    \ $shift, $n - $shift) . substr($s, 0, $shift);\n}\n", "  $size = strlen($x);\n\
    \  if ($shift >= $size) {\n    $out = strrev($x);\n  } else {\n    $out = substr($x,\
    \ $shift, $size) . substr($x, 0, $shift);\n  }\n  return $out;\n}\n", "  if ($shift\
    \ == 0) return $x;\n  $orig = $x;\n  $shift--;\n  while ($shift > 0) {\n    $x\
    \ = intval($x / 10);\n    $shift--;\n  }\n  $r = $orig % 10;\n  $result = \"$r\"\
    ;\n  while ($x > 0) {\n    $r = $x % 10;\n    $result .= \"$r\";\n    $x = intval($x\
    \ / 10);\n  }\n  return $result;\n}\n", "    if ($shift > strlen($x)) {\n    \
    \    $x = strrev($x);\n    } else {\n        $y = $x % pow(10, $shift);\n    \
    \    $x = floor($x / pow(10, $shift));\n        $x = (string) ($y . $x);\n   \
    \ }\n    return $x;\n}\n", "  $digits = strlen((string)$x);\n  if ($shift >= $digits)\
    \ {\n    $x = strrev((string)$x);\n  } else {\n    $x = substr($x, $shift) . substr($x,\
    \ 0, $shift);\n  }\n  return $x;\n}\n", "    $x_string = strval($x);\n    $x_length\
    \ = strlen($x_string);\n    $shift = $shift % $x_length;\n    return substr($x_string,\
    \ $shift) . substr($x_string, 0, $shift);\n}\n", "    $num_digits = floor(log10($x))\
    \ + 1;\n    $shift = $shift % $num_digits;\n    if ($shift == 0) {\n        return\
    \ (string)$x;\n    }\n    $first_n = floor($x / pow(10, $shift));\n    $last_n\
    \ = $x % pow(10, $shift);\n    return (string)($last_n * pow(10, $num_digits -\
    \ $shift) + $first_n);\n}", "  $string = strval($x);\n  if (strlen($string) ==\
    \ 1) {\n    return $string;\n  } else {\n    $first = substr($string, 0, 1);\n\
    \    $rest = substr($string, 1);\n    if ($shift >= strlen($string)) {\n     \
    \ return strrev($string);\n    } else {\n      return $rest . $first;\n    }\n\
    \  }\n}\n", "  $x = strval($x);\n  $n = strlen($x);\n  if ($shift > $n) {\n  \
    \  $x = strrev($x);\n  } else {\n    $x = substr($x, $shift) . substr($x, 0, $shift);\n\
    \  }\n  return $x;\n}\n", "    $digits = str_split((string)$x);\n    $shifted\
    \ = array_splice($digits, -$shift);\n    if (count($shifted) < count($digits))\
    \ {\n        $shifted = array_merge($shifted, $digits);\n    } else {\n      \
    \  $shifted = array_reverse($shifted);\n    }\n    return implode($shifted);\n\
    }\n", "    $x = (string) $x;\n    if ($shift > strlen($x)) {\n        return strrev($x);\n\
    \    }\n    $shift = $shift % strlen($x);\n    $revx = strrev($x);\n    $num =\
    \ substr($revx, 0, $shift);\n    $num .= substr($revx, $shift);\n    return strrev($num);\n\
    }\n", "    $digits = (string)$x;\n    $digits_len = strlen($digits);\n    if ($shift\
    \ < $digits_len) {\n        $index = $digits_len - $shift;\n        $reversed\
    \ = strrev($digits);\n        $pre = substr($reversed, 0, $index);\n        $post\
    \ = substr($reversed, $index);\n        return strrev($post . $pre);\n    } else\
    \ {\n        return strrev($digits);\n    }\n}\n", "  $digits = str_split($x);\n\
    \  for ($i = 0; $i < $shift; $i++) {\n    array_unshift($digits, array_pop($digits));\n\
    \  }\n  return implode('', $digits);\n}\n", "  $s = (string)$x;\n  $len = strlen($s);\n\
    \  if ($shift >= $len) {\n    return strrev($s);\n  }\n  return substr($s, $shift,\
    \ $len - $shift) . substr($s, 0, $shift);\n}\n\n", "  $d = 0;\n  $y = 0;\n  $z\
    \ = 0;\n  $t = $x;\n  while ($t > 0) {\n    $d++;\n    $t = intval($t / 10);\n\
    \  }\n  $shift = $shift % $d;\n  if ($shift < 0) {\n    $shift += $d;\n  }\n \
    \ $t = $x;\n  for ($i = 0; $i < $d; $i++) {\n    $y = $y * 10 + $t % 10;\n   \
    \ $t = intval($t / 10);\n  }\n  for ($i = 0; $i < $shift; $i++) {\n    $z = $z\
    \ * 10 + $y % 10;\n    $y = intval($y / 10);\n  }\n  for ($i = 0; $i < $d - $shift;\
    \ $i++) {\n    $z = $z * 10 + $y % 10;\n    $y = intval($y / 10);\n  }\n  return\
    \ strval($z);\n}\n", "  $xStr = strval($x);\n  $xLen = strlen($xStr);\n  $shift\
    \ %= $xLen;\n  if ($shift == 0) {\n    return $xStr;\n  }\n  return substr($xStr,\
    \ $shift) . substr($xStr, 0, $shift);\n}", "  $n = $x;\n  $digits = 0;\n  while\
    \ ($n > 0) {\n    $n /= 10;\n    $digits++;\n  }\n  // Normal case:\n  if ($shift\
    \ < $digits) {\n    $y = $x;\n    for ($i = 0; $i < $shift; $i++) {\n      $digit\
    \ = $y % 10;\n      $y /= 10;\n      $y += $digit * pow(10, $digits - 1);\n  \
    \  }\n    return strval($y);\n  }\n  // Reversed case:\n  $z = 0;\n  for ($i =\
    \ 0; $i < $digits; $i++) {\n    $digit = $x % 10;\n    $x /= 10;\n    $z += $digit\
    \ * pow(10, $digits - 1 - $i);\n  }\n  return strval($z);\n}\n", "    $digits\
    \ = str_split((string)$x);\n    if ($shift > count($digits)) {\n        return\
    \ implode(array_reverse($digits));\n    }\n    $offset = array_splice($digits,\
    \ 0, $shift);\n    return implode($digits) . implode($offset);\n}\n", "    $result\
    \ = \"\";\n    $str = strval($x);\n    if ($shift > strlen($str)) {\n        $result\
    \ = strrev($str);\n    } else {\n        $result = substr($str, $shift) . substr($str,\
    \ 0, $shift);\n    }\n    return $result;\n}\n", "    // Returns: string\n   \
    \ //     The shifted number.\n    $x = (string) $x;\n    $shift = (int) $shift;\n\
    \    $length = strlen($x);\n    if ($shift > $length) {\n        return strrev($x);\n\
    \    }\n    $result = substr($x, $shift) . substr($x, 0, $shift);\n    return\
    \ $result;\n}\n", "    if ($shift == 0) {\n        return $x;\n    }\n\n    $l\
    \ = strlen($x);\n    $s = str_split($x);\n    $d = $l - $shift;\n    $r = array_slice($s,\
    \ 0, $d);\n    $p = array_slice($s, $d);\n    $p = array_merge($p, $r);\n    return\
    \ implode('', $p);\n}\n", "  $x = $x . '';\n  $length = strlen($x);\n  $reverse\
    \ = strrev($x);\n  if ($shift >= $length) return $reverse;\n  $shift_string =\
    \ substr($x, $shift, $length);\n  $shift_string = $shift_string . substr($x, 0,\
    \ $shift);\n  return $shift_string;\n}\n", "  $x = strval($x);\n  $shift = $shift\
    \ % strlen($x);\n  return substr($x, -$shift) . substr($x, 0, -$shift);\n}\n",
  "  $x = (string)$x;\n  $x_length = strlen($x);\n  if ($shift > $x_length) {\n  \
    \  return strrev($x);\n  }\n  $shift = ($shift % $x_length + $x_length) % $x_length;\n\
    \  return substr($x, $shift) . substr($x, 0, $shift);\n}\n", "    $s = (string)$x;\n\
    \    $len = strlen($s);\n    if ($shift >= $len) {\n        return strrev($s);\n\
    \    }\n    return substr($s, $shift) . substr($s, 0, $shift);\n}\n", "    $s\
    \ = strval($x);\n    $n = strlen($s);\n    $shift = $shift % $n;\n    $a = substr($s,\
    \ $shift);\n    $b = substr($s, 0, $shift);\n    return $a . $b;\n}\n", "    $string\
    \ = strval($x);\n    $shift = $shift % strlen($string);\n    return substr($string,\
    \ $shift) . substr($string, 0, $shift);\n}\n", "  $x_string = strval($x);\n  $x_length\
    \ = strlen($x_string);\n  $shift = $shift % $x_length;\n  if ($shift > 0) {\n\
    \    return substr($x_string, $shift) . substr($x_string, 0, $shift);\n  } else\
    \ {\n    return strrev($x_string);\n  }\n}\n", "  $y = $x;\n  $count = 0;\n  while\
    \ ($y >= 1) {\n    $y = floor($y / 10);\n    $count++;\n  }\n  if ($shift > $count)\
    \ {\n    return strrev($x);\n  }\n  $head = substr($x, 0, $shift);\n  $tail =\
    \ substr($x, $shift);\n  return $tail . $head;\n}", "  $digits = preg_split('//',\
    \ $x, -1, PREG_SPLIT_NO_EMPTY);\n  $digits_count = count($digits);\n  if ($shift\
    \ > $digits_count) {\n    return implode('', array_reverse($digits));\n  }\n \
    \ $right = array_slice($digits, $shift);\n  $left = array_slice($digits, 0, $shift);\n\
    \  return implode('', array_merge($right, $left));\n}\n", "  $x = strval($x);\n\
    \  $n = strlen($x);\n  if ($shift >= $n) {\n    $x = strrev($x);\n  } else {\n\
    \    $x = substr($x, $shift) . substr($x, 0, $shift);\n  }\n  return $x;\n}\n",
  "    $digits = str_split($x);\n    if ($shift > count($digits)) {\n        return\
    \ implode(array_reverse($digits));\n    }\n    $out = array_merge(array_slice($digits,\
    \ -$shift), array_slice($digits, 0, -$shift));\n    return implode($out);\n}\n",
  "    // your code here\n    if ($shift == 0) {\n        return (string)$x;\n   \
    \ } elseif ($shift > strlen($x)) {\n        return strrev((string)$x);\n    }\
    \ else {\n        $a = substr($x, 0, $shift);\n        $b = substr($x, $shift);\n\
    \        return $b . $a;\n    }\n}", "    $str = strval($x);\n    $len = strlen($str);\n\
    \    if ($shift < $len) {\n        return substr($str, $shift) . substr($str,\
    \ 0, $shift);\n    } else {\n        return strrev($str);\n    }\n}\n", "    if\
    \ ($shift == 0) return (string)$x;\n    $s = strlen((string)$x);\n    if ($shift\
    \ > $s) return strrev((string)$x);\n    return substr((string)$x, $shift) . substr((string)$x,\
    \ 0, $shift);\n}\n\n$string = \"asdf\";\n$shift = 3;\necho circular_shift($string,\
    \ $shift);", "    $len = strlen($x);\n    if ($shift > $len) {\n        return\
    \ strrev($x);\n    }\n    $circular_shift = substr($x, $len - $shift, $shift)\
    \ . substr($x, 0, $len - $shift);\n    return $circular_shift;\n}\n", "    $digits\
    \ = [];\n    $x = (string) $x;\n    $num_digits = strlen($x);\n    $shift = ($shift\
    \ % $num_digits);\n    if ($shift === 0) return $x;\n    for ($i = 0; $i < $num_digits;\
    \ $i++) {\n        $digits[] = $x[$i];\n    }\n    for ($i = 0; $i < $shift; $i++)\
    \ {\n        $digit = array_pop($digits);\n        array_unshift($digits, $digit);\n\
    \    }\n    return implode('', $digits);\n}\n", "    if (empty($x)) return '';\n\
    \    $digits = str_split($x);\n    for ($i = 0; $i < $shift; $i++) {\n       \
    \ $digits[] = array_shift($digits);\n    }\n    return implode('', $digits);\n\
    }\n", "  $digits = str_split($x);\n  $num_digits = count($digits);\n  if ($shift\
    \ >= $num_digits) {\n    $digits = array_reverse($digits);\n  } else {\n    $digits\
    \ = array_merge(array_slice($digits, $shift), array_slice($digits, 0, $shift));\n\
    \  }\n  return implode($digits);\n}\n", "    $res = strval($x);\n    $shift =\
    \ $shift % strlen($res);\n    return substr($res, $shift) . substr($res, 0, $shift);\n\
    }\n\necho circular_shift(12, 1) . \"\\n\";\necho circular_shift(12, 2) . \"\\\
    n\";\n", "    if ($shift == 0) {\n        return $x;\n    }\n    $digits = array();\n\
    \    for ($i = 0; $i < strlen($x); $i++) {\n        $digits[] = $x[$i];\n    }\n\
    \    while ($shift >= count($digits)) {\n        $shift -= count($digits);\n \
    \   }\n    if ($shift > 0) {\n        $digits = array_merge(array_slice($digits,\
    \ -$shift),\n                              array_slice($digits, 0, count($digits)\
    \ - $shift));\n    }\n    return implode($digits);\n}\n", "    // Get the number\
    \ of digits.\n    $n = strlen((string)$x);\n    // Return the digits reversed\
    \ if shift is greater than the number of digits.\n    if ($shift > $n) {\n   \
    \     return strrev((string)$x);\n    }\n    // Return the circular shifted value.\n\
    \    return substr((string)$x, $shift) . substr((string)$x, 0, $shift);\n}\n",
  "    if ($shift <= 0) return strval($x);\n    $result = strval($x);\n    for ($i\
    \ = 0; $i < $shift; $i++) {\n        $result = substr($result, 1, strlen($result)-1)\
    \ . substr($result, 0, 1);\n    }\n    return $result;\n}\n", "    $digits = floor(log10($x))\
    \ + 1;\n    $place = pow(10, $digits - $shift);\n    $shift_digits = floor($x\
    \ / $place);\n    $result = $x % $place * pow(10, $shift) + $shift_digits;\n \
    \   return $result;\n}\n", "    $x_str = strval($x);\n    if ($shift > strlen($x_str))\
    \ {\n        return strrev($x_str);\n    }\n    $x_str = substr($x_str, $shift)\
    \ . substr($x_str, 0, $shift);\n    return $x_str;\n}\n", "  $str = (string)$x;\n\
    \  $len = strlen($str);\n  if ($shift >= $len) {\n    return strrev($str);\n \
    \ }\n  for ($i = 0; $i < $shift; $i++) {\n    $char = $str[$len - 1];\n    $str\
    \ = substr($str, 0, $len - 1);\n    $str = $char . $str;\n  }\n  return $str;\n\
    }\n\n$x = 12;\n$shift = 3;\necho circular_shift($x, $shift);", "    $x_str = (string)$x;\n\
    \    $x_len = strlen($x_str);\n    $i = 0;\n    $result = \"\";\n    if ($shift\
    \ > $x_len) {\n        $shift = $x_len;\n    }\n    while ($i < $shift) {\n  \
    \      $result .= $x_str[$x_len - $shift + $i];\n        $i++;\n    }\n    $i\
    \ = 0;\n    while ($i < $x_len - $shift) {\n        $result .= $x_str[$i];\n \
    \       $i++;\n    }\n    return $result;\n}", "  $num_digits = strlen((string)$x);\n\
    \  if ($shift >= $num_digits) {\n    return strrev((string)$x);\n  } else {\n\
    \    $digits = str_split((string)$x);\n    $tail = array_slice($digits, $shift);\n\
    \    $head = array_slice($digits, 0, $shift);\n    return implode('', array_merge($tail,\
    \ $head));\n  }\n}\n", "    if ($shift >= count(str_split($x))) {\n        return\
    \ implode(array_reverse(str_split($x)));\n    }\n    return substr($x, $shift)\
    \ . substr($x, 0, $shift);\n}", "    $x_string = (string) $x;\n    $num_digits\
    \ = strlen($x_string);\n    if ($shift > $num_digits) {\n        return strrev($x_string);\n\
    \    }\n    return substr($x_string, $shift) . substr($x_string, 0, $shift);\n\
    }\n", "    $digits = strlen((string)$x);\n    if ($shift >= $digits) {\n     \
    \   return strrev((string)$x);\n    } else {\n        $str = (string)$x;\n   \
    \     $f = substr($str, $shift);\n        $s = substr($str, 0, $shift);\n    \
    \    return $f . $s;\n    }\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
