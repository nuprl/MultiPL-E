name: HumanEval_97_multiply
language: php
prompt: "<?php\n// Complete the function that takes two integers and returns \n//\
  \ the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
  // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
  // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
  function multiply($a, $b) {\n"
tests: "function candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"); }\n\
  }\n\ntest();"
completions: ["    // get the last digit of $a and $b\n    $last_a = intval(substr($a,\
    \ -1));\n    $last_b = intval(substr($b, -1));\n    // multiply the two numbers\n\
    \    $product = $last_a * $last_b;\n    // return the result\n    return $product;\n\
    }\n", "  //the product of the units of their digits\n  //a product of 2*2 is 4.\n\
    \  //a product of 2*2 is 4.\n  //a product of 1*1 is 1.\n  //return integer.\n\
    \  //use modulo to find the units of their digits?\n  //use modulo to find the\
    \ units of their digits?\n  //\n  //\n  //\n  //\n  \n}\n", "    return ($a %\
    \ 10) * ($b % 10);\n}\necho \"<pre>\";\nvar_dump(multiply(148, 412));\nvar_dump(multiply(19,\
    \ 28));\nvar_dump(multiply(2020, 1851));\nvar_dump(multiply(14,-15));\necho \"\
    </pre>\";", "  return ($a % 10) * ($b % 10);\n}\necho multiply(148, 412);\necho\
    \ \"<br>\";\necho multiply(19, 28);\necho \"<br>\";\necho multiply(2020, 1851);\n\
    echo \"<br>\";\necho multiply(14,-15);", "    $product = ($a % 10) * ($b % 10);\n\
    \    return $product;\n}\necho multiply(14,-15);\n", "\t$a = abs($a % 10);\n\t\
    $b = abs($b % 10);\n\treturn $a * $b;\n}\n\necho multiply(148, 412);", "    //\
    \ your code here\n    $number = $a * $b;\n    $units = $number % 10;\n    return\
    \ $units;\n  }", "    $a = (int)str_replace('-', '', $a);\n    $b = (int)str_replace('-',\
    \ '', $b);\n    return ($a * $b) % 10;\n}\necho multiply(148, 412);", "    $a=str_split($a)[strlen($a)-1];\n\
    \    $b=str_split($b)[strlen($b)-1];\n    return $a*$b;\n}", "    return ($a %\
    \ 10) * ($b % 10);\n}", "    $a = $a % 10;\n    $b = $b % 10;\n    return $a *\
    \ $b;\n}\n$a =  148;\n$b = 412;\necho multiply($a, $b);\n", "\t$a = str_split($a)[count(str_split($a))\
    \ - 1];\n\t$b = str_split($b)[count(str_split($b)) - 1];\n\t\n\treturn $a * $b;\n\
    }\necho multiply(148, 412);\necho \"<br>\";\necho multiply(19, 28);\necho \"<br>\"\
    ;\necho multiply(2020, 1851);\necho \"<br>\";\necho multiply(14,-15);\necho \"\
    <br>\";\n", "  $unitdigits = array(\n    1 => 1,\n    2 => 2,\n    3 => 3,\n \
    \   4 => 4,\n    5 => 5,\n    6 => 6,\n    7 => 7,\n    8 => 8,\n    9 => 9,\n\
    \    0 => 0\n  );\n  $aindex = $a % 10;\n  $bindex = $b % 10;\n  return $unitdigits[$aindex]\
    \ * $unitdigits[$bindex];\n}\n\necho multiply(148, 412);", "  return (abs($a)\
    \ % 10) * (abs($b) % 10);\n}\n\necho multiply(19, 28);\n", "    $array_a = str_split($a);\n\
    \    $array_b = str_split($b);\n    $sum_a = $array_a[count($array_a) - 1];\n\
    \    $sum_b = $array_b[count($array_b) - 1];\n    return $sum_a * $sum_b;\n}\n\
    echo multiply(123, 456);", "    $x = $a % 10;\n    $y = $b % 10;\n    return $x\
    \ * $y;\n}", "    //$a=substr($a, strlen($a)-1);\n    //$b=substr($b, strlen($b)-1);\n\
    \    return ($a%10)*($b%10);\n}", "  return (abs($a) % 10) * (abs($b) % 10);\n\
    }\n\necho multiply(4,4);", "    $a = (string)$a;\n    $b = (string)$b;\n    $c\
    \ = (string)$a[strlen($a)-1];\n    $d = (string)$b[strlen($b)-1];\n    $result\
    \ = (int)$c * (int)$d;\n    return $result;\n}\necho multiply(148, 412);\necho\
    \ \"\\n\";\necho multiply(19, 28);\necho \"\\n\";\necho multiply(2020, 1851);\n\
    echo \"\\n\";\necho multiply(14,-15);", "  return ($a % 10) * ($b % 10);\n}",
  "    $unitA = array_sum(str_split($a)) % 10;\n    $unitB = array_sum(str_split($b))\
    \ % 10;\n    return $unitA * $unitB;\n}\nprint_r(multiply(19, 28));\n", "  $units\
    \ = [1,2,3,4,5,6,7,8,9];\n  $a = $a % 10;\n  $b = $b % 10;\n  return $a * $b;\n\
    }\n", "    return abs($a % 10) * abs($b % 10);\n}", "    return $a%10 * $b%10;\n\
    }", "    $res = str_split($a)[count(str_split($a)) - 1] * str_split($b)[count(str_split($b))\
    \ - 1];\n    return $res;\n}\necho multiply(14,-15);", "    $a = (string)$a;\n\
    \    $b = (string)$b;\n    $a = $a[strlen($a)-1];\n    $b = $b[strlen($b)-1];\n\
    \    return $a * $b;\n}\necho multiply(148, 412) . \"\\n\";\necho multiply(19,\
    \ 28) . \"\\n\";\necho multiply(2020, 1851) . \"\\n\";\necho multiply(14,-15)\
    \ . \"\\n\";", "    return (($a % 10) * ($b % 10));\n}\necho multiply(148, 412);\n\
    echo \"<br>\";\necho multiply(19, 28);\necho \"<br>\";\necho multiply(2020, 1851);\n\
    echo \"<br>\";\necho multiply(14,-15);", "    // convert numbers to string\n \
    \   $sA = strval($a);\n    $sB = strval($b);\n    // get the last digit by accessing\
    \ the 0 index of the string\n    $aLast = $sA[0];\n    $bLast = $sB[0];\n    //\
    \ multiply last digits and return value\n    return $aLast * $bLast;\n}\necho\
    \ multiply(148, 412);", "    $a_arr = str_split($a);\n    $b_arr = str_split($b);\n\
    \    return intval($a_arr[count($a_arr) - 1]) * intval($b_arr[count($b_arr) -\
    \ 1]);\n}\n", "  $product = $a * $b;\n  $mod = $product % 10;\n  return $mod;\n\
    }\n", "  $first = $a % 10;\n  $second = $b % 10;\n  $result = $first * $second;\n\
    \  return $result;\n}", "    $res1 = $a%10;\n    $res2 = $b%10;\n    return $res1*$res2;\n\
    }\n$ret = multiply(148, 412);\necho $ret;\necho \"\\n\";\n$ret = multiply(19,\
    \ 28);\necho $ret;\necho \"\\n\";\n$ret = multiply(2020, 1851);\necho $ret;\n\
    echo \"\\n\";\n$ret = multiply(14,-15);\necho $ret;\necho \"\\n\";", "    // TODO\n\
    \    $multiplied_digits = $a * $b;\n    $digits = str_split($multiplied_digits);\n\
    \    $digits = array_reverse($digits);\n    $new_array = [];\n    for ($i = 0;\
    \ $i < count($digits); $i++) {\n        if ($digits[$i] > 0) {\n            array_push($new_array,\
    \ $digits[$i]);\n        }\n    }\n    if (count($new_array) > 0) {\n        return\
    \ $new_array[0];\n    } else {\n        return 0;\n    }\n}\n\necho 'multiply(2019,\
    \ 2018) expected: 2' . '<br>';\necho 'multiply(2019, 2018) returned: ' . multiply(2019,\
    \ 2018) . '<br>';\necho '<br>';\necho 'multiply(148, 412) expected: 16' . '<br>';\n\
    echo 'multiply(148, 412) returned: ' . multiply(148, 412) . '<br>';\necho '<br>';\n\
    echo 'multiply(19, 28) expected: 72' . '<br>';\necho 'multiply(19, 28) returned:\
    \ ' . multiply(19, 28) . '<br>';\necho '<br>';\necho 'multiply(2020, 1851) expected:\
    \ 0' . '<br>';\necho 'multiply(2020, 1851) returned: ' . multiply(2020, 1851)\
    \ . '<br>';\necho '<br>';\necho 'multiply(14,-15) expected: 20' . '<br>';\necho\
    \ 'multiply(14,-15) returned: ' . multiply(14,-15) . '<br>';", "    return ($a\
    \ * $b) % 10;\n}\n", "    // Convert intergers to strings, then split into arrays\
    \ of single integers\n    $a = str_split((string) $a);\n    $b = str_split((string)\
    \ $b);\n    // Remove minus sign if present\n    if($a[0] == '-') {\n        unset($a[0]);\n\
    \    }\n    if($b[0] == '-') {\n        unset($b[0]);\n    }\n    // Multiply\
    \ the arrays elements together\n    return array_product($a) * array_product($b);\n\
    }\n\necho multiply(148, 412) . '<br />';\necho multiply(19, 28) . '<br />';\n\
    echo multiply(2020, 1851) . '<br />';\necho multiply(14,-15) . '<br />';\n", " \
    \   //..\n    // $b = ($b < 0) ? $b*(-1) : $b;\n    $a = ($a < 0) ? $a*(-1) :\
    \ $a;\n    $b = ($b < 0) ? $b*(-1) : $b;\n    return ($a % 10) * ($b % 10);\n\
    }\necho multiply(148, 412);\necho \"<br>\";\necho multiply(19, 28);\necho \"<br>\"\
    ;\necho multiply(2020, 1851);\necho \"<br>\";\necho multiply(14,-15);\necho \"\
    <br>\";", "    $unit_digit_a = $a % 10;\n    $unit_digit_b = $b % 10;\n    return\
    \ $unit_digit_a * $unit_digit_b;\n}\necho multiply(148, 412);\necho \"\\n\";\n\
    echo multiply(19, 28);\necho \"\\n\";\necho multiply(2020, 1851);\necho \"\\n\"\
    ;\necho multiply(14,-15);\necho \"\\n\";\n", "    return ($a % 10) * ($b % 10);\n\
    }\n", "    $a = substr($a, -1);\n    $b = substr($b, -1);\n    return $a * $b;\n\
    }", "  return $a * $b;\n}", "    $strA = (string) $a;\n    $strB = (string) $b;\n\
    \    return intval($strA[strlen($strA) - 1]) * intval($strB[strlen($strB) - 1]);\n\
    }\necho multiply(148, 412);", "  $a = str_split(abs($a))[1];\n  $b = str_split(abs($b))[1];\n\
    \  return $a * $b;\n}\nvar_dump(multiply(148, 412));\nvar_dump(multiply(19, 28));\n\
    var_dump(multiply(2020, 1851));\nvar_dump(multiply(14,-15));", "    $a %= 10;\n\
    \    $b %= 10;\n    return $a * $b;\n}\necho multiply(148, 412); // 16.\necho\
    \ \"<br>\";\necho multiply(19, 28); // 72.\necho \"<br>\";\necho multiply(2020,\
    \ 1851); // 0.\necho \"<br>\";\necho multiply(14,-15); // 20.\necho \"<br>\";\n\
    echo multiply(0, 10); // 0.\necho \"<br>\";\necho multiply(1, 16); // 6.\necho\
    \ \"<br>\";\necho multiply(7, 13); // 1.\necho \"<br>\";\necho multiply(14, -12);\
    \ // 6.\necho \"<br>\";\necho multiply(12, -13); // 8.\necho \"<br>\";\necho multiply(12,\
    \ 20); // 4.\necho \"<br>\";\necho multiply(18, 20); // 0.\necho \"<br>\";\necho\
    \ multiply(17, 20); // 6.\necho \"<br>\";\necho multiply(18, 20); // 0.\necho\
    \ \"<br>\";\necho multiply(17, 20); // 6.\necho \"<br>\";\necho multiply(18, 19);\
    \ // 8.\necho \"<br>\";\necho multiply(17, 19); // 3.\necho \"<br>\";\necho multiply(18,\
    \ 18); // 4.\necho \"<br>\";\necho multiply(17, 18); // 2.\necho \"<br>\";\necho\
    \ multiply(18, 17); // 0.\necho \"<br>\";\necho multiply(17, 17); // 9.\necho\
    \ \"<br>\";\necho multiply(0, 11); // 0.\necho \"<br>\";\necho multiply(0, 10);\
    \ // 0.\necho \"<br>\";\necho multiply(1, 16); // 6.\necho \"<br>\";\necho multiply(7,\
    \ 13); // 1.\necho \"<br>\";\necho multiply(14, -12); // 6.\necho \"<br>\";\n\
    echo multiply(12, -13); // 8.\necho \"<br>\";\necho multiply(12, 20); // 4.\n\
    echo \"<br>\";\necho multiply(18, 20); // 0.\necho \"<br>\";\necho multiply(",
  "    return ($a * $b) % 10;\n}\necho multiply(14,-15);", "    return ($a < 0 ? -$a\
    \ : $a) % 10 * ($b < 0 ? -$b : $b) % 10;\n}", "    // if ($a < 0) $a = -$a;\n\
    \    // if ($b < 0) $b = -$b;\n    // $multi = $a * $b;\n    // $unit_multi =\
    \ $multi % 10;\n    // return $unit_multi;\n    return $a % 10 * $b % 10;\n}\n\
    echo multiply(12, -34);", "    $a = (string)$a;\n    $b = (string)$b;\n    $unit_a\
    \ = substr($a, -1);\n    $unit_b = substr($b, -1);\n    return (int)$unit_a *\
    \ (int)$unit_b;\n}\n\necho multiply(19, 28);", "    $output = 1;\n    if ($a <\
    \ 0) {\n        $a = -1 * $a;\n    }\n    if ($b < 0) {\n        $b = -1 * $b;\n\
    \    }\n    $arrayA = str_split($a);\n    $arrayB = str_split($b);\n    $output\
    \ = $arrayA[sizeof($arrayA) - 1] * $arrayB[sizeof($arrayB) - 1];\n    return $output;\n\
    }", "    $x = $a % 10;\n    $y = $b % 10;\n    return $x * $y;\n}\nprint_r(multiply(148,\
    \ 412));", "\t$a = (int)$a;\n\t$b = (int)$b;\n\t$a = $a - ($a / 10) * 10;\n\t\
    $b = $b - ($b / 10) * 10;\n\treturn $a * $b;\n}\necho multiply(148, 412);", " \
    \   return ($a % 10) * ($b % 10);\n}", "  // Get only the units digit.\n  $a =\
    \ abs($a % 10);\n  $b = abs($b % 10);\n  return $a * $b;\n}\n", "  return $a%10\
    \ * $b%10;\n}\n", "    $a = abs($a);\n    $b = abs($b);\n    return ($a % 10)\
    \ * ($b % 10);\n}\necho multiply(148, 412); //16\necho \"<br>\";\necho multiply(19,\
    \ 28); //72\necho \"<br>\";\necho multiply(2020, 1851); //0\necho \"<br>\";\n\
    echo multiply(14,-15); //20\necho \"<br>\";", "    return (int)(($a % 10) * ($b\
    \ % 10));\n}\necho multiply(148, 412) . \"\\n\"; // 16\necho multiply(19, 28)\
    \ . \"\\n\"; // 72\necho multiply(2020, 1851) . \"\\n\"; // 0\necho multiply(14,-15)\
    \ . \"\\n\"; // 20", "    return (int)substr($a, -1, 1) * (int)substr($b, -1,\
    \ 1);\n}", "  $a_ones = $a % 10;\n  $b_ones = $b % 10;\n  $c = $a_ones * $b_ones;\n\
    \  return $c;\n}", "    $a = $a < 0 ? $a *= -1 : $a;\n    $b = $b < 0 ? $b *=\
    \ -1 : $b;\n    return ($a % 10) * ($b % 10);\n}", "    // if($a > 0 && $b > 0)\n\
    \    // {\n    //     return (substr($a, -1) * substr($b, -1));\n    // }\n  \
    \  // else if($a < 0 && $b < 0)\n    // {\n    //     return (substr($a, -1) *\
    \ substr($b, -1));\n    // }\n    // else if($a < 0 || $b < 0)\n    // {\n   \
    \ //     return (substr($a, -1) * substr($b, -1));\n    // }\n    // else\n  \
    \  // {\n    //     return (substr($a, -1) * substr($b, -1));\n    // }\n    //\
    \ return (substr($a, -1) * substr($b, -1));\n    $a1 = abs($a) % 10;\n    $b1\
    \ = abs($b) % 10;\n    return ($a1 * $b1);\n}\n\necho multiply(148, 412).\"<br>\"\
    ;\necho multiply(19, 28).\"<br>\";\necho multiply(2020, 1851).\"<br>\";\necho\
    \ multiply(14,-15).\"<br>\";", "    $a = abs($a % 10);\n    $b = abs($b % 10);\n\
    \    return $a * $b;\n}", "  $total = ($a % 10) * ($b % 10);\n  return $total;\n\
    }\necho multiply(148, 412);\necho \"<br>\";\necho multiply(19, 28);\necho \"<br>\"\
    ;\necho multiply(2020, 1851);\necho \"<br>\";\necho multiply(14,-15);", "    return\
    \ $a > 0 && $b > 0 ? $a % 10 * $b % 10 : $a * $b;\n}", "    $str1 = strval($a);\n\
    \    $str2 = strval($b);\n    return $str1[strlen($str1)-1] * $str2[strlen($str2)-1];\n\
    }", "    $a = $a % 10;\n    $b = $b % 10;\n    return $a * $b;\n}", "  return\
    \ ($a % 10) * ($b % 10);\n}\n", "    $a1 = $a%10;\n    $b1 = $b%10;\n    return\
    \ $a1*$b1;\n}\nprint_r(multiply(148, 412));", "    return ($a % 10) * ($b % 10);\n\
    }\n\necho multiply(148, 412);\n", "  return (($a % 10) * ($b % 10));\n}", "  return\
    \ ($a % 10) * ($b % 10);\n}", "    $prod = 0;\n    if ($a < 0){\n        $a =\
    \ $a * -1;\n    }\n    if ($b < 0){\n        $b = $b * -1;\n    }\n    if ($a\
    \ > 9){\n        $a = $a % 10;\n    }\n    if ($b > 9){\n        $b = $b % 10;\n\
    \    }\n    $prod = $a * $b;\n    return $prod;\n}\n\necho multiply(19, 28);",
  "    $r = (($a % 10) * ($b % 10));\n    return $r;\n}\n", "  $aUnit = $a % 10;\n\
    \  $bUnit = $b % 10;\n  $product = $aUnit * $bUnit;\n  return $product;\n}", " \
    \ $a = substr($a, -1);\n  $b = substr($b, -1);\n  return $a * $b;\n}", "    return\
    \ $a % 10 * $b % 10;\n}\n", "    return ($a % 10) * ($b % 10);\n}\necho multiply(148,\
    \ 412);", "  $str1 = strval($a);\n  $str2 = strval($b);\n  $newStr1 = '';\n  $newStr2\
    \ = '';\n  if($str1[0] == '-'){\n    $newStr1 = $str1[1];\n  } else {\n    $newStr1\
    \ = $str1[0];\n  }\n  if($str2[0] == '-'){\n    $newStr2 = $str2[1];\n  } else\
    \ {\n    $newStr2 = $str2[0];\n  }\n  return $newStr1 * $newStr2;\n}", "  return\
    \ (($a < 0 ? -$a : $a) % 10) * (($b < 0 ? -$b : $b) % 10);\n}", "    $array1 =\
    \ str_split($a);\n    $array2 = str_split($b);\n    //This function allows us\
    \ to multiply two integers\n    return $array1[count($array1)-1] * $array2[count($array2)-1];\n\
    }", "    return ($a%10)*($b%10);\n}\necho multiply(148, 412).\"\\n\";\necho multiply(19,\
    \ 28).\"\\n\";\necho multiply(2020, 1851).\"\\n\";\necho multiply(14,-15).\"\\\
    n\";", "    // 1) Solution with one line solution\n    // return ($a % 10) * ($b\
    \ % 10);\n    // 2) Solution with two lines solution\n    $a = $a % 10;\n    $b\
    \ = $b % 10;\n    return $a * $b;\n}\n\necho multiply(19, 28) . PHP_EOL;\necho\
    \ multiply(14,-15) . PHP_EOL;\necho multiply(14,-15) . PHP_EOL;\necho multiply(148,\
    \ 412) . PHP_EOL;\necho multiply(2020, 1851) . PHP_EOL;", "  $unitA = $a % 10;\n\
    \  $unitB = $b % 10;\n  return $unitA * $unitB;\n}", "    return ($a * $b) % 10;\n\
    }", "    return ($a % 10) * ($b % 10);\n}\n", "    $a = abs($a);\n    $b = abs($b);\n\
    \    return ($a % 10) * ($b % 10);\n}", "  return $a % 10 * $b % 10;\n}\n\necho\
    \ multiply(10,-2);", "\treturn (($a%10) * ($b%10));\n}\n\n$ans = multiply(148,\
    \ 412);\nprint_r($ans);\necho \"\\n\";\n", "  $a = substr($a, -1);\n  $b = substr($b,\
    \ -1);\n  $c = $a * $b;\n  return $c;\n}\n", "  return ($a % 10) * ($b % 10);\n\
    }\n", "    $n = $a * $b;\n    $n = abs($n);\n    $unit_digit = $n % 10;\n    return\
    \ $unit_digit;\n}\n", "\t$result = [];\n\t$a = (string)$a;\n\t$b = (string)$b;\n\
    \t$result[] = substr($a, strlen($a) - 1);\n\t$result[] = substr($b, strlen($b)\
    \ - 1);\n\treturn array_product($result);\n}", "    $unitDigitOne = $a % 10;\n\
    \    $unitDigitTwo = $b % 10;\n    return $unitDigitOne * $unitDigitTwo;\n}",
  "    return (abs($a) % 10) * (abs($b) % 10);\n}\necho multiply(19, 28) . PHP_EOL;",
  "    $a = (string) $a;\n    $b = (string) $b;\n    $a_last = $a[strlen($a) - 1];\n\
    \    $b_last = $b[strlen($b) - 1];\n    return (int) $a_last * (int) $b_last;\n\
    }\necho multiply(148, 412) . \"\\n\"; // should return 16.\necho multiply(19,\
    \ 28) . \"\\n\"; // should return 72.\necho multiply(2020, 1851) . \"\\n\"; //\
    \ should return 0.\necho multiply(14,-15) . \"\\n\"; // should return 20.", " \
    \ return abs($a) % 10 * abs($b) % 10;\n}\n$solution = new Solution();\nvar_dump($solution->multiply(148,\
    \ 412));\nvar_dump($solution->multiply(19, 28));\nvar_dump($solution->multiply(2020,\
    \ 1851));\nvar_dump($solution->multiply(14,-15));", "    $a = substr($a, -1);\n\
    \    $b = substr($b, -1);\n    return $a * $b;\n}", "  $aDigit = getLastDigit($a);\n\
    \  $bDigit = getLastDigit($b);\n  return $aDigit * $bDigit;\n}\n", "    return\
    \ $a*$b;\n}\necho multiply(148, 412);", "    $a = $a % 10;\n    $b = $b % 10;\n\
    \    return $a * $b;\n}", "    $a = explode('', $a);\n    $b = explode('', $b);\n\
    \    $a = ($a[1] === '-') ? $a[2] : $a[0];\n    $b = ($b[1] === '-') ? $b[2] :\
    \ $b[0];\n    return $a * $b;\n}", "    $a = abs($a % 10);\n    $b = abs($b %\
    \ 10);\n    return $a * $b;\n}", "\tif ($a < 0 || $b < 0) {\n\t\t$c = (($a * -1)\
    \ * ($b * -1)) % 10;\n\t\treturn $c * -1;\n\t}\n\telse {\n\t\t$c = ($a * $b) %\
    \ 10;\n\t\treturn $c;\n\t}\n}\necho multiply(148, 412) . \"<br>\";\necho multiply(19,\
    \ 28) . \"<br>\";\necho multiply(2020, 1851) . \"<br>\";\necho multiply(14,-15)\
    \ . \"<br>\";", "    return (($a % 10) * ($b % 10));\n}\n\necho \"Test 1: \" .\
    \ (multiply(148, 412) == 16 ? \"PASS\": \"FAIL\") . \"\\n\";\necho \"Test 2: \"\
    \ . (multiply(19, 28) == 72 ? \"PASS\": \"FAIL\") . \"\\n\";\necho \"Test 3: \"\
    \ . (multiply(2020, 1851) == 0 ? \"PASS\": \"FAIL\") . \"\\n\";\necho \"Test 4:\
    \ \" . (multiply(14,-15) == 20 ? \"PASS\": \"FAIL\") . \"\\n\";", "  return ($a\
    \ % 10) * ($b % 10);\n}\n\n$a = (int) readline('a: ');\n$b = (int) readline('b:\
    \ ');\n$multiply = multiply($a, $b);\necho 'multiply: ' . $multiply . PHP_EOL;",
  "    $prod = $a * $b;\n    if ($prod < 0) {\n        $prod = abs($prod);\n    }\n\
    \    if ($prod > 9) {\n        $prod = (string)$prod;\n        $prod = $prod[strlen($prod)\
    \ - 1];\n    }\n    return $prod;\n}\necho multiply(148, 412) . \"\\n\";\necho\
    \ multiply(19, 28) . \"\\n\";\necho multiply(2020, 1851) . \"\\n\";\necho multiply(14,-15)\
    \ . \"\\n\";\necho multiply(18, 2) . \"\\n\";\necho multiply(18, 3) . \"\\n\"\
    ;\necho multiply(22, -19) . \"\\n\";\necho multiply(41, -19) . \"\\n\";\necho\
    \ multiply(0, -19) . \"\\n\";\necho multiply(0, 0) . \"\\n\";", "    // Happy\
    \ coding!\n    $a = $a < 0 ? -$a : $a;\n    $b = $b < 0 ? -$b : $b;\n    $aa =\
    \ str_split($a);\n    $bb = str_split($b);\n    $aa = $aa[count($aa) - 1];\n \
    \   $bb = $bb[count($bb) - 1];\n    return $aa * $bb;\n}\necho multiply(19, 28);\n\
    echo \"\\n\";\necho multiply(148, 412);\necho \"\\n\";\necho multiply(2020, 1851);\n\
    echo \"\\n\";\necho multiply(14,-15);\necho \"\\n\";\necho multiply(-14,-15);\n\
    echo \"\\n\";\necho multiply(-19, 28);\necho \"\\n\";\necho multiply(19, -28);\n\
    echo \"\\n\";\necho multiply(-19, -28);\necho \"\\n\";", "    $result = str_split($a);\n\
    \    $secResult = str_split($b);\n    $intA = (int)$result[strlen($a)-1];\n  \
    \  $intB = (int)$secResult[strlen($b)-1];\n    return $intA * $intB;\n}\n\necho\
    \ multiply(20,-4);\n", "    return ($a < 0 || $b < 0) ? $a * $b % 10 : $a * $b\
    \ % 10;\n}\n", "    $u = $a % 10;\n    $v = $b % 10;\n    return $u * $v;\n}\n",
  "  $a = abs($a);\n  $b = abs($b);\n  $result = $a % 10 * $b % 10;\n  return $result;\n\
    }\necho multiply(14,-15);\necho \"\\n\";\necho multiply(148, 412);\necho \"\\\
    n\";\necho multiply(19, 28);\necho \"\\n\";\necho multiply(2020, 1851);\necho\
    \ \"\\n\";", "    $aMod = $a % 10;\n    $bMod = $b % 10;\n    return $aMod * $bMod;\n\
    }\n", "    return ($a % 10) * ($b % 10);\n}\necho multiply(14,-15);\necho \"\\\
    n\";", "  $x = $a % 10;\n  $y = $b % 10;\n  return $x * $y;\n}\necho multiply(14,-15)\
    \ . \"\\n\";\necho multiply(19, 28) . \"\\n\";\necho multiply(148, 412) . \"\\\
    n\";\necho multiply(2020, 1851) . \"\\n\";", "    $a = $a < 0 ? -$a : $a;\n  \
    \  $b = $b < 0 ? -$b : $b;\n    return $a % 10 * $b % 10;\n}\necho multiply(148,\
    \ 412) . \"<br>\";\necho multiply(19, 28) . \"<br>\";\necho multiply(2020, 1851)\
    \ . \"<br>\";\necho multiply(14,-15) . \"<br>\";", "\t$string = strval($a * $b);\n\
    \t$arr = str_split($string);\n\t$sum = 1;\n\tforeach ($arr as $key => $value)\
    \ {\n\t\t$sum *= $value;\n\t}\n\treturn $sum;\n}\necho multiply(148, 412);\necho\
    \ \"<br>\";\necho multiply(19, 28);\necho \"<br>\";\necho multiply(2020, 1851);\n\
    echo \"<br>\";\necho multiply(14,-15);\necho \"<br>\";\necho multiply(14, 15);\n\
    echo \"<br>\";\necho multiply(152, 423);\necho \"<br>\";\necho multiply(18, 28);\n\
    echo \"<br>\";\necho multiply(2020, 1853);\necho \"<br>\";\necho multiply(19,\
    \ 15);\necho \"<br>\";\necho multiply(13, 14);\necho \"<br>\";\necho multiply(232,\
    \ 324);\necho \"<br>\";\necho multiply(18, 25);\necho \"<br>\";\necho multiply(2020,\
    \ 1859);\necho \"<br>\";\necho multiply(11, 15);\necho \"<br>\";", "    return\
    \ (abs($a) % 10) * (abs($b) % 10);\n}\n", "    return ($a * $b) % 10;\n}\n", " \
    \ return $a%10 * $b%10;\n}\n\n$a = multiply(148, 412);\nvar_dump($a);\n\n$b =\
    \ multiply(19, 28);\nvar_dump($b);\n\n$c = multiply(2020, 1851);\nvar_dump($c);\n\
    \n$d = multiply(14,-15);\nvar_dump($d);", "    // your code here\n    $a = str_split($a);\n\
    \    $b = str_split($b);\n    if($a[0] < 0) $a[0] = $a[0] * -1;\n    if($b[0]\
    \ < 0) $b[0] = $b[0] * -1;\n    return $a[0] * $b[0];\n}", "  //..\n  $strA =\
    \ (string)$a;\n  $strB = (string)$b;\n  $lastA = $strA[strlen($strA)-1];\n  $lastB\
    \ = $strB[strlen($strB)-1];\n  $result = (int)$lastA * (int)$lastB;\n  return\
    \ $result;\n}\necho multiply(148, 412);\necho \"<br>\";\necho multiply(19, 28);\n\
    echo \"<br>\";\necho multiply(2020, 1851);\necho \"<br>\";\necho multiply(14,-15);\n\
    echo \"<br>\";", "    $a = abs($a);\n    $b = abs($b);\n    if ($a > $b) {\n \
    \       $result = $a % 10 * $b % 10;\n    } else {\n        $result = $b % 10\
    \ * $a % 10;\n    }\n    return $result;\n}\necho multiply(148, 412) . PHP_EOL;\n\
    echo multiply(19, 28) . PHP_EOL;\necho multiply(2020, 1851) . PHP_EOL;\necho multiply(14,-15)\
    \ . PHP_EOL;\n", "  $x = str_split($a);\n  $y = str_split($b);\n  // echo $x;\n\
    \  // echo $y;\n  return $x[count($x)-1] * $y[count($y)-1];\n}\necho multiply(148,\
    \ 412);\necho \"<br>\";\necho multiply(19, 28);\necho \"<br>\";\necho multiply(2020,\
    \ 1851);\necho \"<br>\";\necho multiply(14,-15);\necho \"<br>\";", "    $a = intval(strval($a)[-1]);\n\
    \    $b = intval(strval($b)[-1]);\n    $product = $a * $b;\n    return $product;\n\
    }\n\necho multiply(148, 412);\necho multiply(19, 28);\necho multiply(2020, 1851);\n\
    echo multiply(14,-15);", "  $c = $a % 10;\n  $d = $b % 10;\n  return $c * $d;\n\
    }", "    $aString = (string)$a;\n    $bString = (string)$b;\n    $aDigit = $aString[strlen($aString)-1];\n\
    \    $bDigit = $bString[strlen($bString)-1];\n    return $aDigit * $bDigit;\n\
    }\n\necho \"Answer: \" . multiply(148, 412) . PHP_EOL;\necho \"Answer: \" . multiply(19,\
    \ 28) . PHP_EOL;\necho \"Answer: \" . multiply(2020, 1851) . PHP_EOL;\necho \"\
    Answer: \" . multiply(14,-15) . PHP_EOL;", "    $a_unit_digit = substr($a, -1);\n\
    \    $b_unit_digit = substr($b, -1);\n    return $a_unit_digit * $b_unit_digit;\n\
    }", "  $output = 0;\n  $aDigit = $a % 10;\n  $bDigit = $b % 10;\n  $output = $aDigit\
    \ * $bDigit;\n  return $output;\n}\nmultiply(2020, 1851);\nmultiply(14,-15);",
  "    $lastDigit = fmod($a, 10) * fmod($b, 10);\n    return $lastDigit;\n}\n\necho\
    \ multiply(148, 412) . PHP_EOL;\necho multiply(19, 28) . PHP_EOL;\necho multiply(2020,\
    \ 1851) . PHP_EOL;\necho multiply(14,-15) . PHP_EOL;", "  $a = abs($a) % 10;\n\
    \  $b = abs($b) % 10;\n  return $a * $b;\n}\n\necho multiply(19, 28);", "    $a\
    \ = (string) $a;\n    $b = (string) $b;\n    return (int) $a[-1] * (int) $b[-1];\n\
    }", "    return $a%10 * $b%10;\n}\n", "  $a = abs($a);\n  $b = abs($b);\n  return\
    \ ($a % 10) * ($b % 10);\n}\n$a = 6;\n$b = 12;\necho multiply($a, $b) . PHP_EOL;\n",
  "\t$x = 1;\n\twhile ($a >= 10) {\n\t\t$a /= 10;\n\t}\n\twhile ($b >= 10) {\n\t\t\
    $b /= 10;\n\t}\n\t$x = $a * $b;\n\treturn $x;\n}\nprint(multiply(19, 28) . PHP_EOL);\n",
  "  $a = $a % 10;\n  $b = $b % 10;\n  $result = $a * $b;\n  return $result;\n}\n",
  "    $product = $a * $b;\n    $c = abs($product);\n    $output = $c % 10;\n    if\
    \ ($product < 0) {\n        $output = $output * -1;\n    }\n    return $output;\n\
    }\n$answer = multiply(148, 412);\necho \"Answer is: \" . $answer;", "    return\
    \ intval($a % 10) * intval($b % 10);\n}\necho multiply(148, 412) . \"\\n\";\n\
    echo multiply(19, 28) . \"\\n\";\necho multiply(2020, 1851) . \"\\n\";\necho multiply(14,-15)\
    \ . \"\\n\";", "    $a = $a % 10;\n    $b = $b % 10;\n    return $a * $b;\n}",
  "    $product = ($a % 10) * ($b % 10);\n    return $product;\n}", "\tif($a<0 &&\
    \ $b<0){\n\t\t$a = $a * -1;\n\t\t$b = $b * -1;\n\t} elseif($a < 0 || $b < 0){\n\
    \t\t$a = abs($a);\n\t\t$b = abs($b);\n\t}\n\t$a = $a % 10;\n\t$b = $b % 10;\n\t\
    return $a * $b;\n}\necho multiply(148, 412);", "    $lastDigitOfA = $a % 10;\n\
    \    $lastDigitOfB = $b % 10;\n    $product = $lastDigitOfA * $lastDigitOfB;\n\
    \    return $product;\n}\necho multiply(4, 3);", "    $a = substr($a, -1);\n \
    \   $b = substr($b, -1);\n    return $a * $b;\n}\n", "    $a = abs($a);\n    $b\
    \ = abs($b);\n    return $a%10 * $b%10;\n}\n", "  return ($a * $b) % 10;\n}\n",
  "  $a = $a % 10;\n  $b = $b % 10;\n  return $a * $b;\n}\n", "  return (abs($a) %\
    \ 10) * (abs($b) % 10);\n}\n", "    return ($a % 10) * ($b % 10);\n}\n\necho multiply(148,\
    \ 412);", "  // get only the units of each number\n  $a = $a % 10;\n  $b = $b\
    \ % 10;\n  // multiply the numbers\n  return $a * $b;\n}", "  $a = str_split($a);\n\
    \  $b = str_split($b);\n  return ($a[sizeof($a)-1] * $b[sizeof($b)-1]);\n}", " \
    \   $a = (string)$a;\n    $b = (string)$b;\n    return (int)$a[strlen($a)-1] *\
    \ (int)$b[strlen($b)-1];\n}", "  $a = (string) $a;\n  $b = (string) $b;\n  $a\
    \ = (int) $a[strlen($a) - 1];\n  $b = (int) $b[strlen($b) - 1];\n  $result = $a\
    \ * $b;\n  return $result;\n}\n", "    return $a % 10 * $b % 10;\n}\n", "    $a\
    \ = abs($a);\n    $b = abs($b);\n    $x = $a % 10;\n    $y = $b % 10;\n    return\
    \ $x * $y;\n}\n", "    $str_a = (string)$a;\n    $str_b = (string)$b;\n    $multiply\
    \ = $str_a[strlen($str_a)-1] * $str_b[strlen($str_b)-1];\n    return $multiply;\n\
    }\n\necho multiply(148, 412);", "  $product = 0;\n  // Write your code here\n\
    \  $product = (abs($a)%10)*(abs($b)%10);\n  // End your code here\n  return $product;\n\
    }", "    $arr_1 = str_split($a);\n    $arr_2 = str_split($b);\n    return $arr_1[sizeof($arr_1)-1]\
    \ * $arr_2[sizeof($arr_2)-1];\n}\n\necho multiply(148, 412);\necho \"<br>\";\n\
    echo multiply(19, 28);\necho \"<br>\";\necho multiply(2020, 1851);\necho \"<br>\"\
    ;\necho multiply(14,-15);\necho \"<br>\";\n", "\t$a = abs($a % 10);\n\t$b = abs($b\
    \ % 10);\n\treturn $a * $b;\n}\n\necho multiply(148, 412);", "    // write your\
    \ code here...\n  $a = abs($a);\n  $b = abs($b);\n  return $a * $b % 10;\n}\n\
    echo multiply(19, 28) . PHP_EOL;", "    return ($a % 10) * ($b % 10);\n}\n\necho\
    \ multiply(2020, 1851);", "  $newa = str_split($a);\n  $newb = str_split($b);\n\
    \  return $newa[count($newa)-1] * $newb[count($newb)-1];\n}", "    $split1 = str_split($a);\n\
    \    $split2 = str_split($b);\n    $length1 = count($split1);\n    $length2 =\
    \ count($split2);\n    if($length1 > 1 && $length2 > 1){\n        return $split1[$length1-1]\
    \ * $split2[$length2-1];\n    }\n    else{\n        return $a * $b;\n    }\n}\n",
  "    // complete the function\n    $arr = [$a, $b];\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] < 0) {\n            $arr[$i] = $arr[$i] * -1;\n\
    \        }\n        $arr[$i] = str_split($arr[$i]);\n        for ($j = 0; $j <\
    \ count($arr[$i]); $j++) {\n            if ($arr[$i][$j] == 0) {\n           \
    \     unset($arr[$i][$j]);\n            }\n        }\n        $arr[$i] = $arr[$i][0];\n\
    \    }\n    $arr[0] = $arr[0] * $arr[1];\n    return $arr[0];\n}", "    $a = (string)\
    \ $a;\n    $b = (string) $b;\n    $a = intval($a[strlen($a) - 1]);\n    $b = intval($b[strlen($b)\
    \ - 1]);\n    return $a * $b;\n}\n\necho multiply(19, 28);\n", "  return (int)\
    \ ($a % 10) * ($b % 10);\n}\n", "  // we would like to return the product of their\
    \ unit digits.\n  $a = ($a < 0 ? -1 * $a : $a);\n  $b = ($b < 0 ? -1 * $b : $b);\n\
    \  return ($a % 10) * ($b % 10);\n}", "    return (int)($a % 10) * ($b % 10);\n\
    }", "  $res1 = (string)$a;\n  $res2 = (string)$b;\n  $res1 = intval($res1[strlen($res1)-1]);\n\
    \  $res2 = intval($res2[strlen($res2)-1]);\n  return $res1 * $res2;\n}", "   \
    \ $a = explode(\"\", $a);\n    $b = explode(\"\", $b);\n    $a = end($a);\n  \
    \  $b = end($b);\n    return $a * $b;\n}\nprint_r(multiply(148, 412));", "   \
    \ $a = str_split($a);\n    $b = str_split($b);\n    return $a[count($a)-1] * $b[count($b)-1];\n\
    }", "  $str_a = strval($a);\n  $str_b = strval($b);\n  $a_len = strlen($str_a);\n\
    \  $b_len = strlen($str_b);\n  $a_unit = $str_a[$a_len - 1];\n  $b_unit = $str_b[$b_len\
    \ - 1];\n  return intval($a_unit) * intval($b_unit);\n}\necho multiply(148, 412);",
  "  $a = abs($a);\n  $b = abs($b);\n  $array = str_split($a);\n  $a = array_pop($array);\n\
    \  $array = str_split($b);\n  $b = array_pop($array);\n  return $a * $b;\n}\n",
  "  //TODO\n}", "  $multi = $a * $b;\n  return substr($multi, -1);\n}\n", "    return\
    \ $a < 0 ? -($a % 10) * $b % 10 : $a % 10 * $b % 10;\n}", "    $a = (string) $a;\n\
    \    $b = (string) $b;\n    $aa = $a[strlen($a) - 1];\n    $bb = $b[strlen($b)\
    \ - 1];\n    return (int) $aa * (int) $bb;\n}\necho multiply(148, 412);", "  \
    \  $strA = strval($a);\n    $strB = strval($b);\n    $strA = substr($strA, -1);\n\
    \    $strB = substr($strB, -1);\n    $result = $strA * $strB;\n    return $result;\n\
    }", "    $product = 0;\n    $a = (string) $a;\n    $b = (string) $b;\n    $unit_a\
    \ = $a[strlen($a) - 1];\n    $unit_b = $b[strlen($b) - 1];\n    $product = $unit_a\
    \ * $unit_b;\n    return $product;\n}\n", "\t$unitA = intval($a % 10);\n\t$unitB\
    \ = intval($b % 10);\n\treturn $unitA * $unitB;\n}\necho multiply(148, 412); //\
    \ 16\necho \"<br>\";\necho multiply(19, 28); // 72\necho \"<br>\";\necho multiply(2020,\
    \ 1851); // 0\necho \"<br>\";\necho multiply(14,-15); // 20\necho \"<br>\";\n\
    echo multiply(1,-1); // 1\necho \"<br>\";\necho multiply(1,1); // 1\necho \"<br>\"\
    ;\necho multiply(1,0); // 0\necho \"<br>\";\necho multiply(0,0); // 0\necho \"\
    <br>\";\necho multiply(0,1); // 0\necho \"<br>\";\necho multiply(0,-1); // 0\n\
    echo \"<br>\";", "    return ($a*$b)%10;\n}\n", "    // enter your code here\n\
    \    $a = substr((string)$a, -1);\n    $b = substr((string)$b, -1);\n    return\
    \ $a * $b;\n}", "    // Without taking in account negative values\n    $prod =\
    \ (($a % 10) * ($b % 10));\n    return $prod;\n}\n", "  $a = abs($a % 10);\n \
    \ $b = abs($b % 10);\n  return $a * $b;\n}\n\necho multiply(5,7);\necho \"<br>\"\
    ;\necho multiply(14,-15);\necho \"<br>\";\necho multiply(19, 28);\necho \"<br>\"\
    ;\necho multiply(2020, 1851);\necho \"<br>\";\necho multiply(148, 412);\necho\
    \ \"<br>\";\necho multiply(19,28);\necho \"<br>\";\necho multiply(0,12);", " \
    \   return intval(strval($a)[strlen(strval($a)) - 1]) * intval(strval($b)[strlen(strval($b))\
    \ - 1]);\n}", "  $c = (string) $a;\n  $d = (string) $b;\n  return (int) ($c[$c.length\
    \ - 1] * $d[$d.length - 1]);\n}", "  $prod = ($a % 10) * ($b % 10);\n  return\
    \ $prod;\n}", "    return ($a % 10) * ($b % 10);\n}\n", "    return ( $a * $b\
    \ ) % 10;\n}", "    $a = str_split($a);\n    $b = str_split($b);\n    return $a[count($a)-1]\
    \ * $b[count($b)-1];\n}", "    return ($a % 10) * ($b % 10);\n}", "    $r = strval($a\
    \ * $b);\n    $len = strlen($r);\n    return intval($r[$len - 1]);\n}\n", "  $a\
    \ = abs($a % 10);\n  $b = abs($b % 10);\n  return $a * $b;\n}", "    // your code\
    \ here\n    if ($a < 0 && $b < 0) {\n      $a = abs($a);\n      $b = abs($b);\n\
    \    }\n    else if ($a < 0 || $b < 0) {\n      $a = abs($a);\n      $b = abs($b);\n\
    \      $product = $a * $b;\n      return $product * -1;\n    }\n    else {\n \
    \     $a = abs($a);\n      $b = abs($b);\n    }\n    $a = $a % 10;\n    $b = $b\
    \ % 10;\n    $product = $a * $b;\n    return $product;\n}", "  // Split into 10's,\
    \ 1's, and return the product\n  $aUnit = $a % 10;\n  $bUnit = $b % 10;\n  return\
    \ $aUnit * $bUnit;\n}", "    $d1 = $a % 10;\n    $d2 = $b % 10;\n    $p = $d1\
    \ * $d2;\n    return $p;\n}\n\necho multiply(148, 412);\n", "    $a = abs($a);\n\
    \    $b = abs($b);\n    $x = $a % 10;\n    $y = $b % 10;\n    $product = $x *\
    \ $y;\n    return $product;\n}", "    $a = str_split($a);\n    $b = str_split($b);\n\
    \    return $a[count($a)-1] * $b[count($b)-1];\n}", "    $product = ($a * $b)\
    \ % 10;\n    return $product;\n}\necho multiply(20, 18);\necho \"\\n\";", "  \
    \  $aUnit = $a % 10;\n    $bUnit = $b % 10;\n    return $aUnit * $bUnit;\n}",
  "    $a = (string) $a;\n    $b = (string) $b;\n    return (int) $a[strlen($a) -\
    \ 1] * (int) $b[strlen($b) - 1];\n}\n", "    $dA = (string) $a;\n    $dB = (string)\
    \ $b;\n    return (int) $dA[strlen($dA) - 1] * (int) $dB[strlen($dB) - 1];\n}\n",
  "  return $a % 10 * $b % 10;\n}\n", "  return ($a % 10) * ($b % 10);\n}\necho multiply(14,-15);"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
