name: HumanEval_159_eat
language: php
prompt: "<?php\n// You're a hungry rabbit, and you already have eaten a certain number\
  \ of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n\
  // you should return an array of [ total number of eaten carrots after your meals,\n\
  // the number of carrots left after your meals ]\n// if there are not enough remaining\
  \ carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n\
  // * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8, 9) -> [12, 1]\n// * eat(1, 10, 10)\
  \ -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n// Variables:\n// @number : integer\n\
  // the number of carrots that you have eaten.\n// @need : integer\n// the number\
  \ of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining\
  \ carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <=\
  \ need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat($number,\
  \ $need, $remaining) {\n"
tests: "function candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test():\
  \ void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["  if($remaining + $number >= $need){\n    return [$need, $remaining\
    \ + $number - $need];\n  } else {\n    return [$remaining + $number, 0];\n  }\n\
    }\n\necho \"[11, 4] => \" . eat(5, 6, 10) . \"<br>\";\necho \"[12, 1] => \" .\
    \ eat(4, 8, 9) . \"<br>\";\necho \"[11, 0] => \" . eat(1, 10, 10) . \"<br>\";\n\
    echo \"[7, 0] => \" . eat(2, 11, 5) . \"<br>\";\n", "    if(($number + $need)\
    \ > $remaining){\n        return [$remaining, 0];\n    }\n    return [$number\
    \ + $need, $remaining - ($number + $need)];\n}", "  $number = $number + $need;\n\
    \  $remaining = $remaining - $need;\n  if ($remaining <= 0){\n    $remaining =\
    \ 0;\n  }\n  return [$number, $remaining];\n}", "    return [$number + $need <\
    \ $remaining ? $number + $need : $number + $remaining, $remaining - $need >= 0\
    \ ? $remaining - $need : 0];\n}", "  \n}", "  // save your code here...\n  $i\
    \ = $number;\n  $a = $remaining;\n  $eated = $i + $a;\n  if ($eated < $need) {\n\
    \    $left = 0;\n  }\n  else {\n    $left = $eated - $need;\n  }\n  return [$eated,\
    \ $left];\n}\n\n$case = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2,\
    \ 11, 5]\n];\n\n$result = [\n  [11, 4],\n  [12, 1],\n  [11, 0],\n  [7, 0]\n];\n\
    \nfor ($i = 0; $i < count($case); $i++) {\n  if (eat($case[$i][0], $case[$i][1],\
    \ $case[$i][2]) == $result[$i])\n    echo \"OK \";\n  else\n    echo \"Wrong\"\
    ;\n  echo \"\\n\";\n}\n\necho \"\\n\";\n\necho eat(5, 6, 10)[0] == 11 ? \"OK \"\
    \ : \"Wrong\";\necho eat(5, 6, 10)[1] == 4 ? \"OK\" : \"Wrong\";\necho \"\\n\"\
    ;\n\necho eat(4, 8, 9)[0] == 12 ? \"OK \" : \"Wrong\";\necho eat(4, 8, 9)[1] ==\
    \ 1 ? \"OK\" : \"Wrong\";\necho \"\\n\";\n\necho eat(1, 10, 10)[0] == 11 ? \"\
    OK \" : \"Wrong\";\necho eat(1, 10, 10)[1] == 0 ? \"OK\" : \"Wrong\";\necho \"\
    \\n\";\n\necho eat(2, 11, 5)[0] == 7 ? \"OK \" : \"Wrong\";\necho eat(2, 11, 5)[1]\
    \ == 0 ? \"OK\" : \"Wrong\";\necho \"\\n\";", "    return [$number + $need, $remaining\
    \ - $need];\n}", "    $totalEaten = $number + $need;\n    $totalRemaining = $remaining\
    \ - $need;\n    if ($totalRemaining < 0) {\n        $totalRemaining = 0;\n   \
    \ }\n    return [$totalEaten, $totalRemaining];\n}", "    if(($number + $need)\
    \ <= $remaining){\n        return [$number + $need, $remaining - ($number + $need)];\n\
    \    } else {\n        return [$number + $remaining, 0];\n    }\n}\n", "    if($remaining\
    \ < $need - $number)\n        return [$remaining + $number, 0];\n    return [$need,\
    \ $remaining - ($need - $number)];\n}", "    $answer[0] = $number + $need;\n \
    \   $answer[1] = $remaining - $need;\n    if ($answer[1] < 0) {\n        $answer[0]\
    \ += $answer[1];\n        $answer[1] = 0;\n    }\n    return $answer;\n}", " \
    \ $result_one = $number + $need;\n  $result_two = $remaining - $need;\n  if ($result_two\
    \ < 0) {\n    $result_two = 0;\n  }\n  return [$result_one, $result_two];\n}",
  "  $total = $number + $need;\n  if ($total <= $remaining) {\n    return [$total,\
    \ $remaining - $total];\n  } else {\n    return [$total, 0];\n  }\n}", "  // echo\
    \ $number . ', ' . $need . ', ' . $remaining . PHP_EOL;\n  if ($remaining >= $need)\
    \ {\n    return [$number + $need, $remaining - $need];\n  } else {\n    return\
    \ [$number + $remaining, 0];\n  }\n}\necho '<pre>';\nprint_r(eat(1, 10, 10));\n\
    echo '</pre>';", "\treturn [$number+min($need,$remaining),max(0,$remaining-$need)];\n\
    }", "  $newNumber = $number + $need;\n  $remainingCarrots = $remaining - $need;\n\
    \  if ($remainingCarrots < 0) {\n    $remainingCarrots = 0;\n  }\n  return [$newNumber,\
    \ $remainingCarrots];\n}\necho implode(', ', eat(5, 6, 10)) . \"\\n\"; // 11,\
    \ 4\necho implode(', ', eat(4, 8, 9)) . \"\\n\"; // 12, 1\necho implode(', ',\
    \ eat(1, 10, 10)) . \"\\n\"; // 11, 0\necho implode(', ', eat(2, 11, 5)) . \"\\\
    n\"; // 7, 0", "    if ($remaining >= $need) {\n        return [$number + $need,\
    \ $remaining - $need];\n    }\n    return [$number + $remaining, 0];\n}", "  \
    \  $hunger = 0;\n    if($remaining == 0) {\n        return [$number + $remaining,\
    \ $hunger];\n    }\n    if($remaining < $need) {\n        return [$number + $remaining,\
    \ $hunger];\n    }\n    return [$number + $need, $remaining - $need];\n}\n", " \
    \ if ($need <= $remaining) {\n    return [$number + $need, $remaining - $need];\n\
    \  } else {\n    return [$number + $remaining, 0];\n  }\n}", "    $total = $number\
    \ + $need;\n    $left = 0;\n    if ($total <= $remaining) {\n        $left = $remaining\
    \ - $total;\n    } else {\n        $left = 0;\n    }\n    return [$total, $left];\n\
    }", "    $eat = $number + $need;\n    $left = 0;\n    if ($eat > $remaining) {\n\
    \        $left = $eat - $remaining;\n        $eat = $remaining;\n    }\n    return\
    \ [$eat, $left];\n}", "\tif($remaining >= $need) {\n\t\treturn [$number + $need,\
    \ $remaining - $need];\n\t} else {\n\t\treturn [$number + $remaining, 0];\n\t\
    }\n}\n\necho '<pre>';\nvar_dump(eat(5, 6, 10));\necho '</pre>';\n\necho '<pre>';\n\
    var_dump(eat(4, 8, 9));\necho '</pre>';\n\necho '<pre>';\nvar_dump(eat(1, 10,\
    \ 10));\necho '</pre>';\n\necho '<pre>';\nvar_dump(eat(2, 11, 5));\necho '</pre>';",
  "    if ($remaining >= $need) {\n        return [$number + $need, $remaining - $need];\n\
    \    } else {\n        return [$number + $remaining, 0];\n    }\n}", "  $total\
    \ = $number + $need;\n  $left = $remaining - $need;\n  if ($left < 0) {\n    $total\
    \ = $total + $left;\n    $left = 0;\n  }\n  return [$total, $left];\n}", "  //\
    \ If the number of remaining carrots is greater or equal to the needed number\
    \ of carrots\n  if ($remaining >= $need) {\n    // the total number of eaten carrots\
    \ will be the sum of the initial eaten carrots and the needed carrots\n    $total\
    \ = $number + $need;\n    // the remaining carrots will be the stock minus the\
    \ needed carrots\n    $remaining = $remaining - $need;\n    // If the number of\
    \ remaining carrots is less than the needed number of carrots\n  } else {\n  \
    \  // the total number of eaten carrots will be the sum of the initial eaten carrots\
    \ and the stock number of carrots\n    $total = $number + $remaining;\n    //\
    \ there won't be any carrots left\n    $remaining = 0;\n  }\n  // I'm returning\
    \ the values, but I should check if I can return them as an array\n  return [$total,\
    \ $remaining];\n}", "  // your code here\n}", "    $total = $number + $need;\n\
    \    $left = $remaining - $need;\n    if ($left < 0) {\n        $total = $total\
    \ + $left;\n        $left = 0;\n    }\n    return [$total, $left];\n}", "  $sum\
    \ = $number + $need;\n  if ($sum > $remaining) {\n    return [$remaining, 0];\n\
    \  }\n  return [$sum, $remaining - $sum];\n}", "\t$sum = $number + $need;\n\t\
    if ($sum < $remaining) {\n\t\treturn [$sum, $remaining - $sum];\n\t} else {\n\t\
    \treturn [$sum, 0];\n\t}\n}", "    $eaten = $number + $need;\n    $left = $remaining\
    \ - $need;\n    if ($left < 0) {\n        $eaten = $eaten + $left;\n        $left\
    \ = 0;\n    }\n    return [$eaten, $left];\n}", "  if($number + $remaining < $need)\
    \ {\n    return [$number + $remaining, 0];\n  }\n  return [$number + $need, $remaining\
    \ - $need];\n}", "    $number += $need;\n    if ($number > $remaining) {\n   \
    \     $number = $remaining;\n    }\n    return [$number, $remaining - $number];\n\
    }", "  $left = $remaining - $need;\n  if ($left >= 0) {\n    return [$number +\
    \ $need, $left];\n  } else {\n    return [$number + $remaining, 0];\n  }\n}\n",
  "  $eat = $number + $need;\n  $left = $remaining - $need;\n  return $left < 0 ?\
    \ [$eat + $left, 0] : [$eat, $left];\n}", "  $total = $number + $need;\n  $left\
    \ = $remaining - $need;\n  if ($remaining < $need) {\n    $total = $number + $remaining;\n\
    \    $left = 0;\n  }\n  return [$total, $left];\n}\necho \"<pre>\";\necho eat(5,\
    \ 6, 10)[0]; // 11\necho \"<br>\";\necho eat(5, 6, 10)[1]; // 4\necho \"<br>\"\
    ;\necho eat(4, 8, 9)[0]; // 12\necho \"<br>\";\necho eat(4, 8, 9)[1]; // 1\necho\
    \ \"<br>\";\necho eat(1, 10, 10)[0]; // 11\necho \"<br>\";\necho eat(1, 10, 10)[1];\
    \ // 0\necho \"<br>\";\necho eat(2, 11, 5)[0]; // 7\necho \"<br>\";\necho eat(2,\
    \ 11, 5)[1]; // 0\necho \"</pre>\";\n", "  $remain = $remaining - $need;\n  if\
    \ ($remain < 0) {\n    $remain = 0;\n  }\n  return [$number + $need, $remain];\n\
    }", "  return [$number + $need < $remaining ? $number + $need : $number + $remaining,\
    \ $number + $need < $remaining ? $remaining - $need : 0];\n}", "  if ($number\
    \ + $remaining >= $need) {\n    return [$need, $remaining - ($need - $number)];\n\
    \  }\n  return [$number + $remaining, 0];\n}", "    $sum = $number + $need;\n\
    \    if ($sum > $remaining) {\n        return [$sum - $remaining, 0];\n    } else\
    \ {\n        return [$sum, $remaining - $sum];\n    }\n}", "    $num = $number\
    \ + $need;\n    $rem = $remaining - $need;\n    if ($rem < 0) {\n        $rem\
    \ = 0;\n    }\n    return [$num, $rem];\n}", "    if ($remaining >= $need) {\n\
    \        return [$number + $need, $remaining - $need];\n    } else {\n       \
    \ return [$number + $remaining, 0];\n    }\n}", "    if($remaining == 0) return\
    \ [$number, $remaining];\n    $total = $number + $need;\n    if($total > $remaining)\
    \ {\n        $remaining = 0;\n    } else {\n        $remaining = $remaining -\
    \ $total;\n    }\n    return [$total, $remaining];\n}", "    $remaining -= $number;\n\
    \    if ($remaining <= 0) {\n        return [$need + $remaining, 0];\n    } else\
    \ if ($remaining < $need) {\n        return [$need + $remaining, 0];\n    } else\
    \ {\n        return [$need, $remaining - $need];\n    }\n}", "  $eat = $number\
    \ + $need;\n  $left = $remaining - $need;\n  if ($left < 0) {\n    $eat = $remaining\
    \ + $number;\n    $left = 0;\n  }\n  return [$eat, $left];\n}", "  $total = $number\
    \ + $need;\n  $left = $remaining - $need;\n  if ($left <= 0) {\n    $total = $total\
    \ + $left;\n    $left = 0;\n  }\n  return [$total, $left];\n}\n", "    $meals\
    \ = 0;\n    $meals = $number + $need;\n    $remaining = $remaining - $meals;\n\
    \    return $remaining < 0 ? [$meals, $remaining * -1] : [$meals, $remaining];\n\
    }", "  $list = [];\n  array_push($list, $number);\n  array_push($list, $need);\n\
    \  array_push($list, $remaining);\n  $sum = array_sum($list);\n  $diff = array_diff($list,\
    \ [$remaining]);\n  if ($sum > $remaining) {\n    return [array_sum($diff), 0];\n\
    \  } else {\n    return [array_sum($diff), $remaining - array_sum($diff)];\n \
    \ }\n}", "    return ($remaining < $need) ? [$number + $remaining, 0] : [$number\
    \ + $need, $remaining - $need];\n}", "    $result = 0;\n    if ($number <= $need)\
    \ {\n        $result = $number + $remaining;\n        $remaining = $remaining\
    \ - $result;\n    } elseif ($remaining > $number) {\n        $result = $number\
    \ + $remaining;\n        $remaining = $remaining - $result;\n    } else {\n  \
    \      $result = $number;\n        $remaining = 0;\n    }\n    return [$result,\
    \ $remaining];\n}", "\t$total = $number + $need;\n\tif ($total > $remaining) {\n\
    \t\t$total = $remaining + $number;\n\t\t$remaining = 0;\n\t} else {\n\t\t$remaining\
    \ = $remaining - $total;\n\t}\n\treturn [$total, $remaining];\n}", "  if ($remaining\
    \ >= $need) {\n    return [$number + $need, $remaining - $need];\n  } else {\n\
    \    return [$number + $remaining, 0];\n  }\n}\n", "  if($remaining < $need) {\n\
    \      return [$remaining+$number,0];\n  }\n  return [$number+$need,$remaining-$need];\n\
    }", "  if ($need > $remaining) {\n    return [$number + $remaining, 0];\n  } else\
    \ {\n    return [$number + $need, $remaining - $need];\n  }\n}", "    if($remaining\
    \ >= $need){\n        return [$number + $need, $remaining - $need];\n    }\n \
    \   return [$number + $remaining, 0];\n}", "  $number2 = $number + $need;\n  $remaining2\
    \ = $remaining - $need;\n  if ($remaining2 < 0) {\n    $remaining2 = 0;\n  }\n\
    \  $array = array();\n  array_push($array, $number2, $remaining2);\n  return $array;\n\
    }", "  $e = $number + $need;\n  $r = $remaining - $need;\n  if ($r < 0) {\n  \
    \  $r = 0;\n  }\n  return [$e, $r];\n}\n", "  $eaten = 0;\n  if($remaining >=\
    \ $need){\n    $eaten = $need;\n  } else {\n    $eaten = $remaining;\n  }\n  return\
    \ [$number + $eaten, $remaining - $eaten];\n}", "    $total = $number + $need;\n\
    \    $left = $remaining - $need;\n    if ($left < 0) {\n        $total = $total\
    \ + $left;\n        $left = 0;\n    }\n    return [$total, $left];\n}", "    if\
    \ ($remaining >= $need) {\n        return [$number + $need, $remaining - $need];\n\
    \    } else {\n        return [$number + $remaining, 0];\n    }\n}", "  if($number\
    \ + $remaining < $need) {\n    return [$number + $remaining, 0];\n  } else {\n\
    \    return [$number + $need, $remaining - $need];\n  }\n}", "  return [min($number\
    \ + $remaining, $need), $remaining - min($number + $remaining, $need) + $number];\n\
    }", "  if ($remaining < $need) {\n    return [$remaining + $number, 0];\n  } else\
    \ {\n    return [$need + $number, $remaining - $need];\n  }\n}\n", "  $carrots\
    \ = $number + $remaining;\n  if ($carrots < $need) {\n    return [$carrots, 0];\n\
    \  } else {\n    return [$need, $carrots - $need];\n  }\n}\necho implode(', ',\
    \ eat(3, 5, 6)) . \"\\n\";\necho implode(', ', eat(5, 6, 10)) . \"\\n\";\necho\
    \ implode(', ', eat(1, 10, 10)) . \"\\n\";\necho implode(', ', eat(2, 11, 5))\
    \ . \"\\n\";", "    return [\n        min($number + $remaining, $need),\n    \
    \    max($remaining - ($need - $number), 0)\n    ];\n}", "\t$result = array();\n\
    \tif ($remaining > $need){\n\t\tarray_push($result, $number + $need, $remaining\
    \ - $need);\n\t} elseif ($remaining <= $need){\n\t\tarray_push($result, $number\
    \ + $remaining, 0);\n\t}\n\treturn $result;\n}\nprint_r(eat(1, 10, 10));\nprint_r(eat(2,\
    \ 11, 5));\nprint_r(eat(4, 8, 9));", "    $totaleat = $number + $need;\n    $remaining\
    \ = $remaining - $need;\n    if ($totaleat > $remaining) {\n        $totaleat\
    \ = $remaining + $number;\n        $remaining = 0;\n    }\n    return array($totaleat,\
    \ $remaining);\n}\n", "  return [$number + min($need, $remaining), max(0, $remaining\
    \ - $need)];\n}", "    $eaten = 0;\n    if ($need > $remaining) {\n        $eaten\
    \ = $remaining;\n    } else {\n        $eaten = $need;\n    }\n    return [$number\
    \ + $eaten, $remaining - $eaten];\n}", "    if ($remaining >= $need) {\n     \
    \   return [$number + $need, $remaining - $need];\n    } else {\n        return\
    \ [$number + $remaining, 0];\n    }\n}", "  return ( $number + $need <= $remaining\
    \ ) ? [ $number + $need, $remaining - $need ] : [ $remaining + $number, 0 ];\n\
    }", "\tif ($remaining <= $need) {\n\t\treturn array($number + $remaining, 0);\n\
    \t} else {\n\t\treturn array($number + $need, $remaining - $need);\n\t}\n}\n\n\
    var_dump(eat(5, 6, 10));\nvar_dump(eat(4, 8, 9));\nvar_dump(eat(1, 10, 10));\n\
    var_dump(eat(2, 11, 5));", "    $remaining -= $number;\n    if ($remaining >=\
    \ $need) {\n        return [$number + $need, $remaining - $need];\n    } else\
    \ {\n        return [$number + $remaining, 0];\n    }\n}", "  return [$number\
    \ + $need, $remaining - $need];\n}", "  $total = $number + $need;\n  if ($total\
    \ > $remaining) {\n    $total = $remaining + $number;\n    $remaining = 0;\n \
    \ } else {\n    $remaining = $remaining - $total;\n  }\n  return [$total, $remaining];\n\
    }", "    $needed = $number + $need;\n    $leftOver = $remaining - $needed;\n \
    \   if ($leftOver >= 0) {\n      return [$needed, $leftOver];\n    } else {\n\
    \      return [$needed - abs($leftOver), 0];\n    }\n}\n", "    $total = $number\
    \ + $need;\n    $left = $remaining - $need;\n    return ($total <= $remaining)\
    \ ? [$total, $left] : [$remaining, 0];\n}", "    $total = $number + $need;\n \
    \   if ($total > $remaining) {\n        $total = $remaining + $number;\n     \
    \   $remaining = 0;\n    } else {\n        $remaining = $remaining - $total;\n\
    \    }\n    return [$total, $remaining];\n}", "  $left = $need - $number;\n  if\
    \ ($left > $remaining) {\n    return [$number + $remaining, 0];\n  } else {\n\
    \    return [$number + $left, $remaining - $left];\n  }\n}\n", "  return array(\n\
    \    $number + $need > $remaining ? $remaining : $number + $need,\n    $number\
    \ + $need > $remaining ? 0 : $remaining - ($number + $need)\n  );\n}", "    $total\
    \ = $number + $need;\n    $remain = $remaining - $need;\n    $result = [\n   \
    \     $total,\n        $remain\n    ];\n    return $result;\n}\n", "    $eaten\
    \ = $number + $need;\n    $left = $remaining - $need;\n    if ($left < 0) {\n\
    \        $eaten = $remaining + $number;\n        $left = 0;\n    }\n    return\
    \ [$eaten, $left];\n}", "\n}\n", "    return $remaining >= $need ? [$number +\
    \ $need, $remaining - $need] : [$number + $remaining, 0];\n}", "  $total = $number\
    \ + $need;\n  $left = $remaining - $need;\n  if ($left < 0) {\n    $total = $total\
    \ + $left;\n    $left = 0;\n  }\n  return [$total, $left];\n}", "  if (($number\
    \ + $need) > $remaining) {\n    $number += $remaining;\n    $remaining = 0;\n\
    \  } else {\n    $number += $need;\n    $remaining -= $need;\n  }\n  return [$number,\
    \ $remaining];\n}\n", "    if ($remaining > $need) {\n        return [$number\
    \ + $need, $remaining - $need];\n    } else {\n        return [$number + $remaining,\
    \ 0];\n    }\n}", "    $need -= $number;\n    if ($need > $remaining) {\n    \
    \    $need = $remaining;\n    }\n    return [$number + $need, $remaining - $need];\n\
    }", "    return [$number + min($need, $remaining), max(0, $remaining - $need)];\n\
    }", "    if(($number + $need) <= $remaining){\n        return [$number + $need,\
    \ $remaining - ($number + $need)];\n    } else {\n        return [$number + $remaining,\
    \ 0];\n    }\n}", "  if ($remaining < $need) {\n    $need = $remaining;\n  }\n\
    \  $result = array();\n  array_push($result, $number + $need);\n  array_push($result,\
    \ $remaining - $need);\n  return $result;\n}\n ?>", "  $needed = $need - $number;\n\
    \  if ($remaining < $needed) {\n    return [$number + $remaining, 0];\n  } else\
    \ {\n    return [$number + $needed, $remaining - $needed];\n  }\n}\n", "    if\
    \ ($remaining >= $need) {\n        return [$number + $need, $remaining - $need];\n\
    \    } else {\n        return [$number + $remaining, 0];\n    }\n}", "    $number_of_eaten_carrots\
    \ = $number + min($need, $remaining);\n    $remaining_carrots = max(0, $remaining\
    \ - $need);\n    return [$number_of_eaten_carrots, $remaining_carrots];\n}", " \
    \ if ($remaining + $number >= $need) {\n    return [$need, $remaining + $number\
    \ - $need];\n  } else {\n    return [$remaining + $number, 0];\n  }\n}\n", " \
    \   return [($number + min($need, $remaining)), max(0, $remaining - $need)];\n\
    }", "  if($remaining <= $need - $number) {\n      return [$number + $remaining,\
    \ 0];\n  }\n  return [$number + $need, $remaining - $need];\n}", "  if ($number\
    \ > 1000 || $need > 1000 || $remaining > 1000) return null;\n  if ($remaining\
    \ < $need) {\n    return [ $number + $remaining, 0 ];\n  } else {\n    return\
    \ [ $number + $need, $remaining - $need ];\n  }\n}", "    $total = $number + $need;\n\
    \    $left = $remaining - $need;\n    return [$total, $left];\n}", "\t$total =\
    \ $number + $need;\n\tif ($total < $remaining) {\n\t\t$carrots = $total;\n\t\t\
    $left = $remaining - $total;\n\t} else {\n\t\t$carrots = $remaining;\n\t\t$left\
    \ = 0;\n\t}\n\treturn [$carrots, $left];\n}", "  $number_total = $number + $need;\n\
    \  $remaining_total = $remaining - $need;\n  if ($remaining_total < 0) {\n   \
    \ $remaining_total = 0;\n  }\n  $arr = [$number_total, $remaining_total];\n  return\
    \ $arr;\n}\n", "  $total = $number + $need;\n  $newRemaining = $remaining - $need;\n\
    \  if ($newRemaining < 0) {\n    $newRemaining = 0;\n  }\n  return [$total, $newRemaining];\n\
    }", "    if($number >= $need) {\n        return [$number, $remaining];\n    }\n\
    \    if($need > $remaining) {\n        return [$remaining, 0];\n    }\n    if($need\
    \ <= $remaining) {\n        return [$need, $remaining - $need];\n    }\n}", " \
    \ \n  if($number <= 1000 && $need <= 1000 && $remaining <= 1000){\n    if($remaining\
    \ >= $need){\n      $totalNumber = $number + $need;\n      $totalRemaining = $remaining\
    \ - $need;\n      return [$totalNumber, $totalRemaining];\n    }\n    else if($remaining\
    \ < $need){\n      $remaining -= $need;\n      $need += $remaining;\n      $totalNumber\
    \ = $number + $need;\n      $totalRemaining = 0;\n      return [$totalNumber,\
    \ $totalRemaining];\n    }\n  }\n  else{\n    echo \"Please enter numbers between\
    \ 0 - 1000\";\n  }\n}", "    $meal = $number + $need;\n    $leftover = $remaining\
    \ - $need;\n    if ($leftover < 0) {\n        $meal = $meal + $leftover;\n   \
    \     $leftover = 0;\n    }\n    return [$meal, $leftover];\n}", "  if ($remaining\
    \ >= $need) {\n    return [$number + $need, $remaining - $need];\n  } else {\n\
    \    return [$number + $remaining, 0];\n  }\n}\n", "  $i = $number;\n  while ($i\
    \ < $need) {\n    if ($remaining > 0) {\n      $i++;\n      $remaining--;\n  \
    \  } else {\n      break;\n    }\n  }\n  return [$i, $remaining];\n}", "  if ($remaining\
    \ < $need) {\n    return [$number + $remaining, 0];\n  }\n  return [$number +\
    \ $need, $remaining - $need];\n}", "  $total = $number + $need;\n  $left = $remaining\
    \ - $need;\n  if ($remaining < $need) {\n    $total = $number + $remaining;\n\
    \    $left = 0;\n  }\n  return [$total, $left];\n}\n\necho \"<pre>eat(5, 6, 10)\\\
    r\\n\";\nprint_r(eat(5, 6, 10));\necho \"</pre>\";\necho \"<pre>eat(4, 8, 9)\\\
    r\\n\";\nprint_r(eat(4, 8, 9));\necho \"</pre>\";\necho \"<pre>eat(1, 10, 10)\\\
    r\\n\";\nprint_r(eat(1, 10, 10));\necho \"</pre>\";\necho \"<pre>eat(2, 11, 5)\\\
    r\\n\";\nprint_r(eat(2, 11, 5));\necho \"</pre>\";", "    $total = $number + $need;\n\
    \    if ($total <= $remaining) {\n        return [$total, $remaining - $total];\n\
    \    } else {\n        return [$remaining + $number, 0];\n    }\n}", "    if ($remaining\
    \ >= $need) {\n        return [$number + $need, $remaining - $need];\n    } else\
    \ {\n        return [$number + $remaining, 0];\n    }\n}", "  \n}", "  $eaten\
    \ = $number + $need;\n  if ($remaining > $need) {\n    $eaten = $number + $need;\n\
    \    $remaining = $remaining - $need;\n  } else {\n    $eaten = $number + $remaining;\n\
    \    $remaining = 0;\n  }\n  return [$eaten, $remaining];\n}\n", "\n}", "  if\
    \ ($remaining == 0) return [$number, 0];\n  if ($remaining >= $need) {\n    return\
    \ [$number + $need, $remaining - $need];\n  } else {\n    return [$number + $remaining,\
    \ 0];\n  }\n}\n", "  $total = $number + $need;\n  if ($total > $remaining) {\n\
    \    $total = $remaining + $number;\n    $remaining = 0;\n  } else {\n    $remaining\
    \ = $remaining - $total;\n  }\n  return [$total, $remaining];\n}\n", "    if ($remaining\
    \ < $need) {\n        return [$number + $remaining, 0];\n    }\n    return [$number\
    \ + $need, $remaining - $need];\n}", "  if($remaining >= $need){\n    return [$number\
    \ + $need, $remaining - $need];\n  }\n  else {\n    return [$number + $remaining,\
    \ 0];\n  }\n}", "  if ($number + $remaining > $need) {\n    return [$need, $number\
    \ + $remaining - $need];\n  }\n  return [$number + $remaining, 0];\n}", "  $total\
    \ = $number + $need;\n  $left = $remaining - $need;\n  if ($left < 0) {\n    $total\
    \ += $left;\n    $left = 0;\n  }\n  return [$total, $left];\n}", "  $carrots =\
    \ $number + $remaining;\n  if ($carrots >= $need) {\n    return [$need, $carrots\
    \ - $need];\n  } else {\n    return [$carrots, 0];\n  }\n}", "    $number = $number\
    \ + $need;\n    if ($number > $remaining) {\n        $number = $remaining;\n \
    \   }\n    return [$number, $remaining - $number];\n}", "  $eat = $number + $need;\n\
    \  $left = $remaining - $need;\n  if ($remaining <= $need) {\n    $left = 0;\n\
    \  }\n  return [$eat, $left];\n}", "    if ($need >= $remaining) {\n        return\
    \ [$number + $remaining, 0];\n    } else {\n        return [$number + $need, $remaining\
    \ - $need];\n    }\n}", "  $total = $number + $need;\n  if ($total <= $remaining)\
    \ {\n    return [$total, $remaining - $total];\n  } else {\n    return [$total,\
    \ 0];\n  }\n}", "  $total = $number + $need;\n  if ($total <= $remaining) {\n\
    \    return [$total, $remaining - $total];\n  } else {\n    return [$remaining\
    \ + $number, 0];\n  }\n}", "    if($remaining < $need) {\n        return [$number\
    \ + $remaining, 0];\n    }\n    return [$number + $need, $remaining - $need];\n\
    }", "  $eaten = $number + $need;\n  if ($remaining < $need) {\n    $eaten = $number\
    \ + $remaining;\n    $remaining = 0;\n  } else {\n    $remaining -= $need;\n \
    \ }\n  return [$eaten, $remaining];\n}\n", "    return [ $number + min($need,\
    \ $remaining), max(0, $remaining - $need) ];\n}", "  $total = $number + $need;\n\
    \  if ($total <= $remaining) {\n    return [$total, $remaining - $total];\n  }\
    \ else {\n    return [$remaining + $number, 0];\n  }\n}\n", "  if ($remaining\
    \ + $number < $need) {\n    return [$remaining + $number, 0];\n  }\n  else if\
    \ ($remaining + $number >= $need) {\n    return [$need, $remaining + $number -\
    \ $need];\n  }\n}", "  $num = $number + $need;\n  $left = $remaining - $need;\n\
    \  if ($left < 0) {\n    $num = $num + $left;\n    $left = 0;\n  }\n  return [$num,\
    \ $left];\n}", "  if ($remaining < $need) {\n    $eat = $number + $remaining;\n\
    \    $left = 0;\n  } else {\n    $eat = $number + $need;\n    $left = $remaining\
    \ - $need;\n  }\n  return [$eat, $left];\n}\n", "  $carrots = $number + $remaining;\n\
    \  if ($carrots >= $need) {\n    return [$need, $carrots - $need];\n  } else {\n\
    \    return [$carrots, 0];\n  }\n}\n", "  $eaten = $number + $need;\n  $eaten\
    \ = $eaten > $remaining ? $remaining : $eaten;\n  $remaining = $remaining - $eaten;\n\
    \  return [$eaten, $remaining];\n}", "  $eaten = $number + $need;\n  $left = $remaining\
    \ - $need;\n  if ($left < 0) {\n    $eaten += $left;\n    $left = 0;\n  }\n  return\
    \ [$eaten, $left];\n}", "    $eaten = 0;\n    $eaten += $number;\n    if($remaining\
    \ < $need) {\n        $eaten += $remaining;\n        $remaining = 0;\n    } else\
    \ {\n        $eaten += $need;\n        $remaining -= $need;\n    }\n    return\
    \ [$eaten, $remaining];\n}", "    if ($remaining <= $need) {\n        return [$number\
    \ + $remaining, 0];\n    } elseif ($remaining > $need) {\n        return [$number\
    \ + $need, $remaining - $need];\n    }\n}", "   if($number+$need <= $remaining){\n\
    \       return [$number+$need, $remaining-$number-$need];\n   }elseif($number+$need>$remaining){\n\
    \       return [$remaining, 0];\n   }\n}\n", "    $number_of_eaten_carrots = $number\
    \ + $need;\n    $left_carrots = $remaining - $need;\n    $need_to_eat = $left_carrots\
    \ < 0 ? abs($left_carrots) : 0;\n    return [$number_of_eaten_carrots + $need_to_eat,\
    \ $left_carrots < 0 ? 0 : $left_carrots];\n}", "\t$eaten = 0;\n\t$left = 0;\n\t\
    if ($remaining >= $need) {\n\t\t$eaten = $number + $need;\n\t\t$left = $remaining\
    \ - $need;\n\t} elseif ($remaining < $need) {\n\t\t$eaten = $number + $remaining;\n\
    \t\t$left = 0;\n\t}\n\treturn [$eaten, $left];\n}", "  $number = $number + $need;\n\
    \  if ($number > $remaining) {\n    $remaining = 0;\n  } else {\n    $remaining\
    \ = $remaining - $number;\n  }\n  return [$number, $remaining];\n}", "  $total\
    \ = $number + $need;\n  if ($total <= $remaining) {\n    return [$total, $remaining\
    \ - $total];\n  } else {\n    return [$total, 0];\n  }\n}", "  $count = 0;\n \
    \ $newRemaining = $remaining;\n  while ($count < $need) {\n    if ($newRemaining\
    \ > 0) {\n      $newRemaining--;\n      $count++;\n    } else {\n      break;\n\
    \    }\n  }\n  return [$number + $count, $newRemaining];\n}\n\necho implode(',\
    \ ', eat(4, 8, 9)) . PHP_EOL;", "  if ($remaining >= $need) {\n    return [$number\
    \ + $need, $remaining - $need];\n  } else {\n    return [$number + $remaining,\
    \ 0];\n  }\n}\n", "    if($remaining >= $need){\n        return [$number + $need,\
    \ $remaining - $need];\n    }\n    else {\n        return [$number + $remaining,\
    \ 0];\n    }\n}\necho \"\\n\";\necho \"Input : eat(5, 6, 10)\\n\";\necho \"Output\
    \ : [\";\nprint_r(eat(5, 6, 10));\necho \"]\\n\";\necho \"Input : eat(4, 8, 9)\\\
    n\";\necho \"Output : [\";\nprint_r(eat(4, 8, 9));\necho \"]\\n\";\necho \"Input\
    \ : eat(1, 10, 10)\\n\";\necho \"Output : [\";\nprint_r(eat(1, 10, 10));\necho\
    \ \"]\\n\";\necho \"Input : eat(2, 11, 5)\\n\";\necho \"Output : [\";\nprint_r(eat(2,\
    \ 11, 5));\necho \"]\\n\";", "// your code here\n  $res = array();\n  if ($number\
    \ + $remaining >= $need) {\n    $res[0] = $number + $remaining;\n    $res[1] =\
    \ 0;\n  }\n  else {\n    $res[0] = $remaining;\n    $res[1] = $remaining - $need;\n\
    \  }\n  return $res;\n}\n", "\t$a = $need + $number;\n\tif ($a <= $remaining)\
    \ {\n\t\treturn [$a, $remaining - $a];\n\t} else {\n\t\treturn [$remaining + $number,\
    \ 0];\n\t}\n}", "    if ($remaining >= $need) {\n        return [$number + $need,\
    \ $remaining - $need];\n    }\n    return [$number + $remaining, 0];\n}", "  //\
    \ implement your solution here\n}\n", "  $real_need = $need - $number;\n  if ($real_need\
    \ <= $remaining) {\n    return [$need, $remaining - $real_need];\n  } else {\n\
    \    return [$number + $remaining, 0];\n  }\n}\n", "    return [$number + min($need,\
    \ $remaining), max(0, $remaining - $need)];\n}", "    return [$number + ($remaining\
    \ < $need ? $remaining : $need), max(0, $remaining - $need)];\n}", "  if($remaining\
    \ >= $need){\n    return [$number + $need, $remaining - $need];\n  }\n  return\
    \ [$number + $remaining, 0];\n}", "  // Write your code here\n}", "  $num = $number\
    \ + $need;\n  if ($num > $remaining) {\n    $num = $remaining;\n  }\n  $rem =\
    \ $remaining - $num;\n  $arr = array($num, $rem);\n  return $arr;\n}\nprint_r(eat(5,6,10));\n\
    print_r(eat(4,8,9));\nprint_r(eat(1,10,10));\nprint_r(eat(2,11,5));", "    if($number\
    \ + $need <= $remaining){\n        return [$number + $need, $remaining - ($number\
    \ + $need)];\n    }\n    else{\n        return [$number + $remaining, 0];\n  \
    \  }\n}", "    $need -= $number;\n    if ($need > $remaining) {\n        $need\
    \ = $remaining;\n    }\n    return [$number + $need, $remaining - $need];\n}",
  "    if($remaining > $need){\n        return [$number + $need, $remaining - $need];\n\
    \    }else{\n        return [$number + $remaining, 0];\n    }\n}", "    $totalEaten\
    \ = $number + $need;\n    $totalRemaining = $remaining - $need;\n    if ($totalRemaining\
    \ < 0) {\n        $totalRemaining = 0;\n    }\n    return [$totalEaten, $totalRemaining];\n\
    }", "    if ($remaining > $need) {\n        return [$number + $need, $remaining\
    \ - $need];\n    } else {\n        return [$number + $remaining, 0];\n    }\n}",
  "// your code here\n  $eaten_carrots = $number + $need;\n  $left_carrots = $remaining\
    \ - $need;\n  $hunger = true;\n  if ($left_carrots < 0) {\n    $eaten_carrots\
    \ = $eaten_carrots + $left_carrots;\n    $left_carrots = 0;\n    $hunger = false;\n\
    \  }\n  $arr = array(\n    $eaten_carrots,\n    $left_carrots,\n    $hunger\n\
    \  );\n  return $arr;\n}", "    if ($remaining < $need - $number) {\n        return\
    \ [$remaining + $number, 0];\n    } else {\n        return [$need, $remaining\
    \ - ($need - $number)];\n    }\n}", "  $leftover = $remaining - $need;\n  if ($leftover\
    \ < 0) {\n    $leftover = 0;\n  }\n  return [ $number + $need, $leftover ];\n\
    }\n\necho json_encode(eat(2, 11, 5));", "  $total = $number + $need;\n  if ($total\
    \ <= $remaining) {\n    return [$total, $remaining - $total];\n  } else {\n  \
    \  return [$remaining + $number, 0];\n  }\n}\n\necho \"<br>x<br>\";\necho eat(5,\
    \ 6, 10)[0] . \"<br>\";\necho eat(5, 6, 10)[1] . \"<br>\";\necho eat(4, 8, 9)[0]\
    \ . \"<br>\";\necho eat(4, 8, 9)[1] . \"<br>\";\necho eat(1, 10, 10)[0] . \"<br>\"\
    ;\necho eat(1, 10, 10)[1] . \"<br>\";\necho eat(2, 11, 5)[0] . \"<br>\";\necho\
    \ eat(2, 11, 5)[1] . \"<br>\";\n", "    $result = [];\n    $total = $number +\
    \ $need;\n    if ($total > $remaining) {\n        $result[] = $remaining;\n  \
    \      $result[] = 0;\n    } else {\n        $result[] = $total;\n        $result[]\
    \ = $remaining - $total;\n    }\n    return $result;\n}", "  $need -= $number;\n\
    \  if ($need <= $remaining) {\n    return [$number + $need, $remaining - $need];\n\
    \  } else {\n    return [$number + $remaining, 0];\n  }\n}", "  if($number <=\
    \ $need){\n    if($need - $number <= $remaining){\n      return [$number + $need\
    \ - $number, $remaining - ($need - $number)];\n    }\n    return [$number + $remaining,\
    \ 0];\n  }\n  return [$number, $remaining];\n}", "    $total = $number + $need;\n\
    \    $remain = $remaining - $need;\n    if ($remain < 0) {\n        $remain =\
    \ 0;\n    }\n    return [$total, $remain];\n}", "  if (($number + $need) <= $remaining)\
    \ {\n    return [$number + $need, $remaining - ($number + $need)];\n  } else {\n\
    \    return [$remaining + $number, 0];\n  }\n}", "    $carrots = $number + $remaining;\n\
    \    if ($carrots < $need) {\n        return [$carrots, 0];\n    } else {\n  \
    \      return [$need, $carrots - $need];\n    }\n}", "    if ($need <= $remaining)\
    \ {\n        return [$number + $need, $remaining - $need];\n    }\n    return\
    \ [$number + $remaining, 0];\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
