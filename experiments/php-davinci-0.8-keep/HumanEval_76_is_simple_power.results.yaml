name: HumanEval_76_is_simple_power
language: php
results:
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if ($x == $n) {\n    return true;\n  }\n  $multi\
    \ = 1;\n  while (true) {\n    $multi *= $n;\n    if ($multi == $x) {\n      return\
    \ true;\n    }\n    if ($multi > $x) {\n      return false;\n    }\n  }\n}\n ?>\n\
    function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "function candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  // do something\n  $k = 0;\n  while ($x > 1){\n\
    \    $i = 0;\n    while($x > 1){\n      $x /= $n;\n      $i++;\n    }\n    if\
    \ ($i > 1 && $k > 0) return false;\n    $k++;\n  }\n  return true;\n}\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpae9t6sy8.php:32\n\
    Stack trace:\n#0 /tmp/tmpae9t6sy8.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpae9t6sy8.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $pow = log($x) / log($n);\n  return floor($pow)\
    \ == $pow;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Division by zero in /tmp/tmp1cs_rk9a.php on line 13\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp1cs_rk9a.php:30\nStack trace:\n\
    #0 /tmp/tmp1cs_rk9a.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp1cs_rk9a.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if($x == 1 && $n == 1) {\n    return true;\n  }\n\
    \  for($i = 1; $i <= $x; $i++) {\n    if(pow($n, $i) == $x) {\n      return true;\n\
    \    }\n  }\n  return false;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfk9hyx0w.php:37\n\
    Stack trace:\n#0 /tmp/tmpfk9hyx0w.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpfk9hyx0w.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  for ($i = 0; $i < 6; $i++) {\n    if ($x == pow($n,\
    \ $i)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $x = log($x) / log($n);\n  return floor($x) ==\
    \ $x;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Division by zero in /tmp/tmp2vcm73i3.php on line 13\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp2vcm73i3.php:29\nStack trace:\n\
    #0 /tmp/tmp2vcm73i3.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2vcm73i3.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x === 0) {\n        return false;\n    }\n\
    \    if ($x === 1) {\n        return true;\n    }\n    $x = log($x) / log($n);\n\
    \    return (is_int($x));\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjnl0nc5n.php:27\n\
    Stack trace:\n#0 /tmp/tmpjnl0nc5n.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpjnl0nc5n.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if ($x < $n) {\n    return $x == 1;\n  }\n  return\
    \ is_simple_power($x / $n, $n);\n}\n\necho is_simple_power(9, 3);\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: '1'
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if (log($x, $n) == round(log($x, $n))) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\n\n$a = is_simple_power(1, 4);\n\
    var_dump($a);\n$a = is_simple_power(2, 2);\nvar_dump($a);\n$a = is_simple_power(8,\
    \ 2);\nvar_dump($a);\n$a = is_simple_power(3, 2);\nvar_dump($a);\n$a = is_simple_power(3,\
    \ 1);\nvar_dump($a);\n$a = is_simple_power(5, 3);\nvar_dump($a);\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "bool(true)\nbool(true)\nbool(true)\nbool(false)\nbool(false)\nbool(false)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg1disv2l.php:45\nStack\
    \ trace:\n#0 /tmp/tmpg1disv2l.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpg1disv2l.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    return !(sqrt($x) % $n) ? true : false;\n}\n\
    function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6vq3c60m.php:25\n\
    Stack trace:\n#0 /tmp/tmp6vq3c60m.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp6vq3c60m.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    $power = 0;\n    while ($n**$power < $x) {\n\
    \        $power++;\n    }\n    return $n**$power == $x;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x === 1) {\n        return true;\n    }\n\
    \    if (intval(sqrt($x)) === sqrt($x)) {\n        return intval(sqrt($x)) ===\
    \ $n;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvmbwv32v.php:27\n\
    Stack trace:\n#0 /tmp/tmpvmbwv32v.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpvmbwv32v.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $res = $n ** (log($x) / log($n));\n  return $res\
    \ == $x;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjyhi3lul.php:27\n\
    Stack trace:\n#0 /tmp/tmpjyhi3lul.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpjyhi3lul.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if ($x == $n) {\n    return true;\n  } elseif ($x\
    \ > $n) {\n    return is_simple_power($x / $n, $n);\n  } else {\n    return false;\n\
    \  }\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsa2b4ezl.php:35\n\
    Stack trace:\n#0 /tmp/tmpsa2b4ezl.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpsa2b4ezl.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n\t// your code\n}\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4n6tfpjq.php:20\n\
    Stack trace:\n#0 /tmp/tmp4n6tfpjq.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp4n6tfpjq.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n\t$x = (string)$x;\n\t$n = (string)$n;\n\treturn\
    \ ($x==$n.\"0\") ? true : false;\n}\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn9tqn1x7.php:22\n\
    Stack trace:\n#0 /tmp/tmpn9tqn1x7.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpn9tqn1x7.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if ($x == $n) return true;\n  if ($x % $n != 0)\
    \ return false;\n  return is_simple_power($x / $n, $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk0u_92zy.php:32\n\
    Stack trace:\n#0 /tmp/tmpk0u_92zy.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpk0u_92zy.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $i = 0;\n  while ($n**$i <= $x) {\n    if ($n**$i\
    \ == $x) {\n      return true;\n    }\n    $i++;\n  }\n  return false;\n}\n ?>\n\
    function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "function candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  return (log($x, $n) == intval(log($x, $n))) ? true\
    \ : false;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2_v1nza4.php:28\n\
    Stack trace:\n#0 /tmp/tmp2_v1nza4.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2_v1nza4.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  return log($x, $n) == round(log($x, $n)) ? true\
    \ : false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48_ngam1.php:29\n\
    Stack trace:\n#0 /tmp/tmp48_ngam1.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp48_ngam1.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if (log($x, $n) % 1 == 0) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8fvh_pug.php:26\n\
    Stack trace:\n#0 /tmp/tmp8fvh_pug.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp8fvh_pug.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    $int = intval(log($x, $n));\n    return pow($n, $int) == $x;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $i = 1;\n  while(pow($n, $i) <= $x) {\n    if(pow($n,\
    \ $i) == $x) {\n      return true;\n    }\n    $i++;\n  }\n  return false;\n}\n\
    function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd__uj7am.php:36\n\
    Stack trace:\n#0 /tmp/tmpd__uj7am.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpd__uj7am.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if($x == $n) {\n        return true;\n    }\n\
    \    for($i = 2; $i <= $x; $i++) {\n        $res = pow($n, $i);\n        if($res\
    \ == $x) {\n            return true;\n        }\n    }\n    return false;\n}\n\
    function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdw8zwovj.php:38\n\
    Stack trace:\n#0 /tmp/tmpdw8zwovj.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpdw8zwovj.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if($x < 1 || $n < 1) return false;\n  if($x ==\
    \ 1) return true;\n  $result = 1;\n  while($result <= $x) {\n    if($result ==\
    \ $x) return true;\n    $result *= $n;\n  }\n  return false;\n}\necho is_simple_power(1,\
    \ 4); // => true\necho is_simple_power(2, 2); // => true\necho is_simple_power(8,\
    \ 2); // => true\necho is_simple_power(3, 2); // => false\necho is_simple_power(3,\
    \ 1); // => false\necho is_simple_power(5, 3); // => false\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: b'111'
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    $pow = pow($n, intval(log($x, $n)));\n    return\
    \ $pow == $x;\n}\necho is_simple_power(1, 4) === true ? 'correct' : 'incorrect';\n\
    echo PHP_EOL;\necho is_simple_power(2, 2) === true ? 'correct' : 'incorrect';\n\
    echo PHP_EOL;\necho is_simple_power(8, 2) === true ? 'correct' : 'incorrect';\n\
    echo PHP_EOL;\necho is_simple_power(3, 2) === false ? 'correct' : 'incorrect';\n\
    echo PHP_EOL;\necho is_simple_power(3, 1) === false ? 'correct' : 'incorrect';\n\
    echo PHP_EOL;\necho is_simple_power(5, 3) === false ? 'correct' : 'incorrect';\n\
    echo PHP_EOL;\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "correct\ncorrect\ncorrect\ncorrect\ncorrect\ncorrect\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  // w3schools PHP built-in functions\n  // http://www.w3schools.com/php/php_ref_math.asp\n\
    \  // round() - Rounds a float\n  // pow() - Returns x raised to the power of\
    \ y\n  // log() - Natural logarithm\n  // http://www.php.net/manual/en/ref.math.php\n\
    \  // abs() - Absolute value\n  // http://www.w3schools.com/php/php_operators.asp\n\
    \  // == - equal to\n  // === - identical\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\n\
    \  return $x == pow($n, round(log($x, $n))) ? true : false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if ($x == $n ** (int)log($x, $n)) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if($x == $n) {\n    return true;\n  } else if($x\
    \ % $n != 0) {\n    return false;\n  } else {\n    return is_simple_power($x /\
    \ $n, $n);\n  }\n}\n\necho is_simple_power(8, 2);\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8qejmt09.php:37\n\
    Stack trace:\n#0 /tmp/tmp8qejmt09.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp8qejmt09.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n\treturn (int)log($x, $n)==log($x, $n);\n}\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppaa9rca6.php:28\n\
    Stack trace:\n#0 /tmp/tmppaa9rca6.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppaa9rca6.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $y = 1;\n  while($y <= $x) {\n    if($y == $x)\
    \ {\n      return true;\n    }\n    $y *= $n;\n  }\n  return false;\n}\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if($x % $n != 0) {\n        return false;\n \
    \   }\n    $count = 0;\n    while($x >= $n) {\n        $x = $x / $n;\n       \
    \ $count++;\n    }\n    if($x == 1) {\n        return true;\n    }\n    return\
    \ false;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $result = pow($n, floor(log($x, $n)));\n  return\
    \ $result == $x;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if ($x == 1) return true;\n  $p = 1;\n  for ($i\
    \ = 1; $i < PHP_INT_MAX; $i++) {\n    $p *= $n;\n    if ($p == $x) return true;\n\
    \    if ($p > $x) return false;\n  }\n}\n\nfunction candidate(...$args) {\n  \
    \  return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if($x == 1) {\n        return true;\n    }\n\
    \    $int = 0;\n    $power = $n;\n    while($power <= $x) {\n        $power *=\
    \ $n;\n        $int++;\n    }\n    if($power == $x) {\n        return true;\n\
    \    }\n    return false;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplg6nxppn.php:32\n\
    Stack trace:\n#0 /tmp/tmplg6nxppn.php(44): test()\n#1 {main}\n  thrown in /tmp/tmplg6nxppn.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    return pow($n, intval(log($x, $n))) == $x;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  return (log($x, $n) == floor(log($x, $n))) ? true\
    \ : false;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwiy3u5sa.php:28\n\
    Stack trace:\n#0 /tmp/tmpwiy3u5sa.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpwiy3u5sa.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  return pow($n, floor(log($x)/log($n))) == $x;\n\
    }\n\necho is_simple_power(8, 2).\"\\n\";\necho is_simple_power(3, 2).\"\\n\";\n\
    echo is_simple_power(3, 1).\"\\n\";\necho is_simple_power(5, 3).\"\\n\";\necho\
    \ is_simple_power(1, 4).\"\\n\";\necho is_simple_power(2, 2).\"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n\nWarning: Division by zero in /tmp/tmpbuxhyupx.php on line 13\n\n\
    \n1\n1\n\nWarning: Division by zero in /tmp/tmpbuxhyupx.php on line 13\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  return pow($n, round(log($x) / log($n))) == $x;\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Division by zero in /tmp/tmpqycg6w__.php on line 13\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($x == $n) {\n     \
    \   return true;\n    }\n    if ($x == pow($n, 2)) {\n        return true;\n \
    \   }\n    $i = 1;\n    $res = pow($n, $i);\n    $i++;\n    while ($res < $x)\
    \ {\n        $res = pow($n, $i);\n        $i++;\n    }\n    if ($res == $x) {\n\
    \        return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 0) return true;\n    $r = $x;\n   \
    \ while($r%$n == 0){\n        $r /= $n;\n    }\n    return $r == 1;\n}\necho is_simple_power(1,\
    \ 4);\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: b'1'
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  for ($i = 0; $i < $x; $i++) {\n    if ($x == ($n\
    \ ** $i)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  // $y = $n ** $x;\n  // return $y === $x;\n  return\
    \ $x / $n === round($x / $n);\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3542jm3z.php:23\n\
    Stack trace:\n#0 /tmp/tmp3542jm3z.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp3542jm3z.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  return pow($n, round(log($x, $n))) === $x;\n}\n\
    function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp86vh5j21.php:20\n\
    Stack trace:\n#0 /tmp/tmp86vh5j21.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp86vh5j21.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    // https://stackoverflow.com/questions/15056472/php-check-if-a-number-is-power-of-another-number\n\
    \    // Solution:\n    // pow(intval($x), 1/$n) == $x;\n    // is_integer(pow(intval($x),\
    \ 1/$n));\n    // !(pow(intval($x), 1/$n)%1);\n    return (is_integer(pow(intval($x),\
    \ 1/$n)));\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwx3hhplf.php:25\n\
    Stack trace:\n#0 /tmp/tmpwx3hhplf.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpwx3hhplf.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n\tif ($x == 1) {\n\t\treturn true;\n\t}\n\t$power\
    \ = 1;\n\t$nextPower = $n;\n\twhile ($nextPower <= $x) {\n\t\tif ($nextPower ==\
    \ $x) {\n\t\t\treturn true;\n\t\t}\n\t\t$power = $nextPower;\n\t\t$nextPower *=\
    \ $n;\n\t}\n\treturn false;\n}\n\necho is_simple_power(8, 2);\necho is_simple_power(3,\
    \ 2);\necho is_simple_power(5, 3);\necho is_simple_power(9, 3);\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: '11'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $isPower = false;\n  $pow = $n;\n  $i = 0;\n  while(!$isPower\
    \ && $pow <= $x) {\n    if($pow == $x) $isPower = true;\n    else {\n      $pow\
    \ *= $n;\n      $i++;\n    }\n  }\n  return $isPower;\n}\necho is_simple_power(25,\
    \ 5) . \"\\n\";\necho is_simple_power(9, 3) . \"\\n\";\necho is_simple_power(33,\
    \ 11) . \"\\n\";\necho is_simple_power(9, 2) . \"\\n\";\necho is_simple_power(125,\
    \ 3) . \"\\n\";\necho is_simple_power(9, 1) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: b'1\n1\n\n\n\n'
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    return $x == pow($n, (int) log($x, $n));\n}\n\
    function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) return true;\n    for ($i = 0; $i\
    \ < $x; $i++) {\n        if ($n ** $i == $x) return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if(log($x, $n) == floor(log($x, $n))) {\n    return\
    \ true;\n  }\n  return false;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmn19w8fo.php:31\n\
    Stack trace:\n#0 /tmp/tmpmn19w8fo.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpmn19w8fo.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $power = 1;\n  while ($power <= $x) {\n    if ($power\
    \ == $x) {\n      return true;\n    }\n    $power *= $n;\n  }\n  return false;\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $check = false;\n  $int = 0;\n  while($check ==\
    \ false) {\n    if ($n ** $int == $x) {\n      $check = true;\n    } elseif ($n\
    \ ** $int > $x) {\n      $check = true;\n      $int = 0;\n    }\n    $int++;\n\
    \  }\n  return $int;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpllohhfzx.php:31\n\
    Stack trace:\n#0 /tmp/tmpllohhfzx.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpllohhfzx.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  return $x % (1/log($n))==0;\n}\n ?>\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "function candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x < $n) {\n        return false;\n    }\n    if ($x % $n == 0) {\n \
    \       return is_simple_power($x / $n, $n);\n    }\n    return false;\n}\n\n\
    echo is_simple_power(1, 4) . PHP_EOL; // true\necho is_simple_power(2, 2) . PHP_EOL;\
    \ // true\necho is_simple_power(8, 2) . PHP_EOL; // true\necho is_simple_power(3,\
    \ 2) . PHP_EOL; // false\necho is_simple_power(3, 1) . PHP_EOL; // false\necho\
    \ is_simple_power(5, 3) . PHP_EOL; // false\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n1\n\n"
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    $int = 1;\n    $pow = $n;\n    while ($pow <=\
    \ $x) {\n        if ($pow == $x) {\n            return true;\n        }\n    \
    \    $pow *= $n;\n        $int++;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1xhq16x9.php:39\n\
    Stack trace:\n#0 /tmp/tmp1xhq16x9.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp1xhq16x9.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $power = $n;\n  while ($power < $x) {\n    $power\
    \ *= $n;\n  }\n  return $power == $x;\n}\n\nfunction candidate(...$args) {\n \
    \   return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb46fj__e.php:34\n\
    Stack trace:\n#0 /tmp/tmpb46fj__e.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpb46fj__e.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if(!$x) return false;\n    if($x == 1) return\
    \ true;\n    $pow = 1;\n    while($pow < $x) {\n        $pow *= $n;\n    }\n \
    \   return $pow == $x;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  return log($x, $n) == intval(log($x, $n));\n}\n\
    function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3n38v3qy.php:28\n\
    Stack trace:\n#0 /tmp/tmp3n38v3qy.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp3n38v3qy.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    return $x == pow($n, round(log($x, $n)));\n}\n\
    function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    return pow($n, intval(log($x, $n))) == $x;\n\
    }\necho is_simple_power(64, 2);\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    return $x == pow($n, intval(log($x, $n)));\n\
    }\n\necho is_simple_power(8, 2);\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if ($x <= 0 || $n <= 0) return false;\n  while($x\
    \ >= 1) {\n    if ($x === 1) return true;\n    $x /= $n;\n  }\n  return false;\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  return log($x, $n) == round(log($x, $n));\n}\n\
    function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy59gohp1.php:28\n\
    Stack trace:\n#0 /tmp/tmpy59gohp1.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpy59gohp1.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  return pow($n, intval(log($x, $n))) == $x;\n}\n\
    \nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    $pow = 1;\n    while ($pow < $x) {\n        $pow\
    \ *= $n;\n    }\n    return $pow == $x;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    // Your code here\n    $power = 0;\n    while($n**$power\
    \ < $x) {\n      $power++;\n    }\n    if($n**$power == $x) {\n      return true;\n\
    \    } else {\n      return false;\n    }\n}\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if($x == 1) return true;\n    $power = 0;\n \
    \   $base = $n;\n    while($base < $x) {\n        $base *= $n;\n        $power++;\n\
    \    }\n    return $base == $x;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    $log = log($x, $n);\n    if(is_int($log)){\n\
    \        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjnpe7w5s.php:25\n\
    Stack trace:\n#0 /tmp/tmpjnpe7w5s.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpjnpe7w5s.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x > 0 && $n > 0) {\n        if ($x === 1\
    \ && $n === 1) {\n            return true;\n        }\n        $number = $n;\n\
    \        while ($number < $x) {\n            $number *= $n;\n        }\n     \
    \   if ($number === $x) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5jlul9r0.php:41\n\
    Stack trace:\n#0 /tmp/tmp5jlul9r0.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp5jlul9r0.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  return (log($x, $n) - intval(log($x, $n)) == 0);\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5g11v1ed.php:28\n\
    Stack trace:\n#0 /tmp/tmp5g11v1ed.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp5g11v1ed.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    return pow($n, round(log($x, $n))) == $x;\n}\n\
    function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n\t$i = 1;\n\t$count = 0;\n\tif ($x == 1) {\n\t\t\
    return true;\n\t} else {\n\t\twhile ($count < $x) {\n\t\t\t$count = $n ** $i;\n\
    \t\t\tif ($count == $x) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t$i ++;\n\t\t}\n\
    \t}\n\treturn false;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $exp = ceil(log($x, $n));\n  return $n ** $exp\
    \ == $x;\n}\n\nis_simple_power(1, 4); // => true\nis_simple_power(2, 2); // =>\
    \ true\nis_simple_power(8, 2); // => true\nis_simple_power(3, 2); // => false\n\
    is_simple_power(3, 1); // => false\nis_simple_power(5, 3); // => false\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    $y = log($x, $n);\n    if ($y == round($y)){\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa5r_jfjk.php:34\n\
    Stack trace:\n#0 /tmp/tmpa5r_jfjk.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpa5r_jfjk.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    $y = pow($n, intval(log($x)/log($n)));\n    return\
    \ ($y == $x);\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Division by zero in /tmp/tmp2sra5ocv.php on line 13\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  return (log($x, $n)%1 == 0) ? true : false;\n}\n\
    function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsxwgxp7p.php:21\n\
    Stack trace:\n#0 /tmp/tmpsxwgxp7p.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpsxwgxp7p.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $i = 0;\n  if($x > 0) {\n    while(pow($n, $i)\
    \ < $x) {\n      $i++;\n    }\n    return pow($n, $i) == $x;\n  }\n  return false;\n\
    }\n\nvar_dump(is_simple_power(1, 4));\nvar_dump(is_simple_power(2, 2));\nvar_dump(is_simple_power(8,\
    \ 2));\nvar_dump(is_simple_power(3, 2));\nvar_dump(is_simple_power(3, 1));\nvar_dump(is_simple_power(5,\
    \ 3));\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: b'bool(true)\nbool(true)\nbool(true)\nbool(false)\n'
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $pow = $n;\n  while ($pow <= $x) {\n    if ($pow\
    \ == $x) {\n      return true;\n    }\n    $pow *= $n;\n  }\n  return false;\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpql12hdto.php:36\n\
    Stack trace:\n#0 /tmp/tmpql12hdto.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpql12hdto.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    return $x === pow($n,round(log($x,$n)));\n}\n\
    \necho is_simple_power(1, 4);\necho \"\\n\";\necho is_simple_power(2, 2);\necho\
    \ \"\\n\";\necho is_simple_power(8, 2);\necho \"\\n\";\necho is_simple_power(3,\
    \ 2);\necho \"\\n\";\necho is_simple_power(3, 1);\necho \"\\n\";\necho is_simple_power(5,\
    \ 3);\necho \"\\n\";\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjezs3b0g.php:33\n\
    Stack trace:\n#0 /tmp/tmpjezs3b0g.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjezs3b0g.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  for ($i = 1; $i <= $x; $i++) {\n    if ($n ** $i\
    \ == $x) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9rq523fo.php:34\n\
    Stack trace:\n#0 /tmp/tmp9rq523fo.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp9rq523fo.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if (pow($n,(int)log($x,$n)) === $x){\n      \
    \  return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if(log($x, $n) % 1 == 0) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgkpufebw.php:25\n\
    Stack trace:\n#0 /tmp/tmpgkpufebw.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpgkpufebw.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $int = log($x, $n);\n  return $int == floor($int);\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqiap7kyf.php:30\n\
    Stack trace:\n#0 /tmp/tmpqiap7kyf.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpqiap7kyf.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if ($x === 1) {\n    return true;\n  }\n  if ($x\
    \ === $n) {\n    return true;\n  }\n  while ($x % $n === 0) {\n    $x /= $n;\n\
    \  }\n  return $x === 1;\n}\necho is_simple_power(1, 4);\necho \"\\n\";\necho\
    \ is_simple_power(2, 2);\necho \"\\n\";\necho is_simple_power(8, 2);\necho \"\\\
    n\";\necho is_simple_power(3, 2);\necho \"\\n\";\necho is_simple_power(3, 1);\n\
    echo \"\\n\";\necho is_simple_power(5, 3);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: b'1\n1\n1\n\n'
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  return $x == 1 ? true : pow($n, floor(log($x) /\
    \ log($n))) == $x;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  return (log($x) / log($n)) == round(log($x) / log($n));\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Division by zero in /tmp/tmpf7_a0bii.php on line 13\n\nWarning:\
    \ Division by zero in /tmp/tmpf7_a0bii.php on line 13\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpf7_a0bii.php:28\nStack trace:\n#0 /tmp/tmpf7_a0bii.php(32):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpf7_a0bii.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if ($x == 1) {\n    return true;\n  } else {\n\
    \    $result = $n;\n    $counter = 1;\n    while ($result < $x) {\n      $result\
    \ *= $n;\n      $counter++;\n    }\n    if ($result == $x) {\n      return true;\n\
    \    } else {\n      return false;\n    }\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  // Your code here\n}\n\nis_simple_power(1, 4);\n\
    is_simple_power(2, 2);\nis_simple_power(8, 2);\nis_simple_power(3, 2);\nis_simple_power(3,\
    \ 1);\nis_simple_power(5, 3);\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgp8c_opv.php:27\n\
    Stack trace:\n#0 /tmp/tmpgp8c_opv.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpgp8c_opv.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    $m=log($x,$n);\n    if(($m*100)%100==0)\n   \
    \     return true;\n    else return false;\n}\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    return (pow($n, (log($x) / log($n))) == $x) ?\
    \ true : false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp30yfktl4.php:27\n\
    Stack trace:\n#0 /tmp/tmp30yfktl4.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp30yfktl4.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    $pow = log($x, $n);\n    if (round($pow) == $pow)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rkw6486.php:34\n\
    Stack trace:\n#0 /tmp/tmp6rkw6486.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6rkw6486.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  for ($i = 0; $i < 20; $i++) {\n    if (pow($n,\
    \ $i) == $x) {\n      return true;\n    }\n  }\n  return false;\n}\n\necho \"\
    is_simple_power(1, 4) => true: \".is_simple_power(1, 4);\necho \"<br>\";\necho\
    \ \"is_simple_power(2, 2) => true: \".is_simple_power(2, 2);\necho \"<br>\";\n\
    echo \"is_simple_power(8, 2) => true: \".is_simple_power(8, 2);\necho \"<br>\"\
    ;\necho \"is_simple_power(3, 2) => false: \".is_simple_power(3, 2);\necho \"<br>\"\
    ;\necho \"is_simple_power(3, 1) => false: \".is_simple_power(3, 1);\necho \"<br>\"\
    ;\necho \"is_simple_power(5, 3) => false: \".is_simple_power(5, 3);\necho \"<br>\"\
    ;\necho \"is_simple_power(256, 2) => true: \".is_simple_power(256, 2);\necho \"\
    <br>\";\necho \"is_simple_power(4, 4) => true: \".is_simple_power(4, 4);\necho\
    \ \"<br>\";\necho \"is_simple_power(243, 3) => true: \".is_simple_power(243, 3);\n\
    echo \"<br>\";\necho \"is_simple_power(14, 1) => true: \".is_simple_power(14,\
    \ 1);\necho \"<br>\";\necho \"is_simple_power(1024, 2) => true: \".is_simple_power(1024,\
    \ 2);\necho \"<br>\";\necho \"is_simple_power(4, 1) => true: \".is_simple_power(4,\
    \ 1);\necho \"<br>\";\necho \"is_simple_power(80, 2) => false: \".is_simple_power(80,\
    \ 2);\necho \"<br>\";\necho \"is_simple_power(81, 3) => true: \".is_simple_power(81,\
    \ 3);\necho \"<\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3j8xo83f.php on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if($x==1)\n    return true;\n  $i=1;\n  while(pow($n,$i)<=$x){\n\
    \    if(pow($n,$i)==$x)\n      return true;\n    $i++;\n  }\n  return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x==1) {\n        return true;\n    }\n \
    \   if ($x<=0||$n<=0) {\n        return false;\n    }\n    if (pow($n,intval(log($x,$n)))==$x)\
    \ {\n        return true;\n    }\n    return false;\n}\n\necho is_simple_power(1,\
    \ 4).\"\\n\";\necho is_simple_power(2, 2).\"\\n\";\necho is_simple_power(8, 2).\"\
    \\n\";\necho is_simple_power(3, 2).\"\\n\";\necho is_simple_power(3, 1).\"\\n\"\
    ;\necho is_simple_power(5, 3).\"\\n\";\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n1\n\n\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    $i = 1;\n    while ($i <= $x) {\n        if (pow($n,\
    \ $i) == $x) {\n            return true;\n        }\n        $i++;\n    }\n  \
    \  return false;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaxtvd_xo.php:36\n\
    Stack trace:\n#0 /tmp/tmpaxtvd_xo.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpaxtvd_xo.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n\t$int = log($x, $n);\n\treturn ($int == floor($int))?\
    \ true : false;\n}\n\necho is_simple_power(3, 1);\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpepm26fpy.php:32\n\
    Stack trace:\n#0 /tmp/tmpepm26fpy.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpepm26fpy.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == $n) return true;\n    $res = $n;\n\
    \    for ($i = 1; $res < $x; $i++) {\n        $res *= $n;\n        if ($res ==\
    \ $x) return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy4l83fce.php:35\n\
    Stack trace:\n#0 /tmp/tmpy4l83fce.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpy4l83fce.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  // ...\n}\n ?>\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "function candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    $result = pow($n, (int) log($x, $n));\n    return\
    \ $result == $x;\n}\n\necho is_simple_power(27, 3) . \"\\n\";\necho is_simple_power(27,\
    \ 4) . \"\\n\";\necho is_simple_power(256, 4) . \"\\n\";\necho is_simple_power(2,\
    \ 10) . \"\\n\";\necho is_simple_power(2, 8) . \"\\n\";\necho is_simple_power(10,\
    \ 5) . \"\\n\";\necho is_simple_power(10, 3) . \"\\n\";\necho is_simple_power(81,\
    \ 3) . \"\\n\";\necho is_simple_power(27, 3) . \"\\n\";\necho is_simple_power(3,\
    \ 3) . \"\\n\";\necho is_simple_power(2, 4) . \"\\n\";\necho is_simple_power(16,\
    \ 2) . \"\\n\";\necho is_simple_power(28, 2) . \"\\n\";\necho is_simple_power(25,\
    \ 5) . \"\\n\";\necho is_simple_power(3, 5) . \"\\n\";\necho is_simple_power(24,\
    \ 2) . \"\\n\";\necho is_simple_power(32, 2) . \"\\n\";\necho is_simple_power(27,\
    \ 3) . \"\\n\";\necho is_simple_power(3, 2) . \"\\n\";\necho is_simple_power(10,\
    \ 2) . \"\\n\";\necho is_simple_power(5, 2) . \"\\n\";\necho is_simple_power(7,\
    \ 2) . \"\\n\";\necho is_simple_power(7, 3) . \"\\n\";\necho is_simple_power(7,\
    \ 4) . \"\\n\";\necho is_simple_power(27, 3) . \"\\n\";\necho is_simple_power(27,\
    \ 2) . \"\\n\";\necho is_simple_power(27, 1) . \"\\n\";\necho is_simple_power(3,\
    \ 3) . \"\\n\";\necho is_simple_power(3, 2) . \"\\n\";\necho is_simple_power(3,\
    \ 1) . \"\\n\";\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n\n\n\n\n1\n1\n1\n\n1\n\n1\n\n\n1\n1\n\n\n\n\n\n\n1\n\n\n1\n\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 0) {\n        return false;\n    }\n\
    \    for ($i = 0; pow($n, $i) <= $x; $i++) {\n        if (pow($n, $i) == $x) {\n\
    \            return true;\n        }\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    $i = 0;\n    while ($x > $n) {\n        $x =\
    \ $x / $n;\n        $i++;\n    }\n    return $x == $n;\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdfxh9qvm.php:34\n\
    Stack trace:\n#0 /tmp/tmpdfxh9qvm.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpdfxh9qvm.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1 && $n == 0) {\n        return true;\n\
    \    }\n    if ($x == 0 && $n == 0) {\n        return false;\n    }\n    if ($x\
    \ == 0) {\n        return true;\n    }\n    if ($n == 0) {\n        return false;\n\
    \    }\n    $p = log($x, $n);\n    if (floor($p) == $p) {\n        return true;\n\
    \    }\n    return false;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjjxxet2k.php:44\n\
    Stack trace:\n#0 /tmp/tmpjjxxet2k.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpjjxxet2k.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    // TODO: Your code here!\n    $div = floor($x\
    \ / $n);\n    if($div == 1){\n      return true;\n    } else if($div < 1) {\n\
    \      return false;\n    } else {\n      return is_simple_power($div, $n);\n\
    \    }\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwx5uev4h.php:33\n\
    Stack trace:\n#0 /tmp/tmpwx5uev4h.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpwx5uev4h.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $number = log($x, $n);\n  return floor($number)\
    \ == $number ? true : false;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa1cktugg.php:29\n\
    Stack trace:\n#0 /tmp/tmpa1cktugg.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpa1cktugg.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if ($x == $n){\n    return true;\n  }\n  if ($x\
    \ < $n){\n    return false;\n  }\n  if (pow($n, floor(log($x, $n))) == $x){\n\
    \    return true;\n  }\n  return false;\n}\nfunction candidate(...$args) {\n \
    \   return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpalp5f1h0.php:38\n\
    Stack trace:\n#0 /tmp/tmpalp5f1h0.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpalp5f1h0.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if(($n !=0) && ($x%$n == 0)){\n      if($x ==\
    \ 1){\n        return true;\n      }\n      if(($x/$n)%$n == 0){\n        $x =\
    \ $x/$n;\n        return is_simple_power($x, $n);\n      }\n    }\n    return\
    \ false;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwdkxo72t.php:29\n\
    Stack trace:\n#0 /tmp/tmpwdkxo72t.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpwdkxo72t.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $int = log($x, $n);\n  return $int == intval($int);\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjzbhpmln.php:30\n\
    Stack trace:\n#0 /tmp/tmpjzbhpmln.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpjzbhpmln.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    return (bool)pow($n, $x);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0cg0hqhn.php:22\n\
    Stack trace:\n#0 /tmp/tmp0cg0hqhn.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp0cg0hqhn.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x === $n) {\n        return true;\n    }\n\
    \    for ($i = 2; $i <= $x; $i++) {\n        if ($n ** $i === $x) {\n        \
    \    return true;\n        }\n    }\n    return false;\n}\nvar_dump(is_simple_power(1,\
    \ 4));\nvar_dump(is_simple_power(2, 2));\nvar_dump(is_simple_power(8, 2));\nvar_dump(is_simple_power(3,\
    \ 2));\nvar_dump(is_simple_power(3, 1));\nvar_dump(is_simple_power(5, 3));\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "bool(false)\nbool(true)\nbool(true)\nbool(false)\nbool(false)\nbool(false)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz1nft1sk.php:43\nStack\
    \ trace:\n#0 /tmp/tmpz1nft1sk.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpz1nft1sk.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $i = $n;\n  while($i < $x) {\n    $i *= $n;\n \
    \ }\n  return $i == $x;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp01o4gup9.php:34\n\
    Stack trace:\n#0 /tmp/tmp01o4gup9.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp01o4gup9.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  return pow($n, round(log($x, $n))) == $x;\n}\n\
    function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) return true;\n    while ($x > 1)\
    \ {\n        if ($x % $n !== 0) return false;\n        $x /= $n;\n    }\n    return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $pow = log($x) / log($n);\n  return floor($pow)\
    \ == $pow;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Division by zero in /tmp/tmpol6h81q9.php on line 13\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpol6h81q9.php:29\nStack trace:\n\
    #0 /tmp/tmpol6h81q9.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpol6h81q9.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $int = intval(log($x, $n));\n  return pow($n, $int)\
    \ == $x;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    $result = pow($n, round(log($x, $n)));\n    return\
    \ $result == $x;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $result = false;\n  $int = intval(log($x, $n));\n\
    \  if($n**$int == $x) {\n    $result = true;\n  }\n  return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if($x === 1) {\n        return true;\n    }\n\
    \    if($x === $n) {\n        return true;\n    }\n    $exp = 0;\n    $x_val =\
    \ $x;\n    $n_val = $n;\n    while($x_val > 1) {\n        $x_val = $x_val / $n_val;\n\
    \        $exp++;\n    }\n    return (1 / $x_val) % 1 === 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqlqg3sz8.php:35\n\
    Stack trace:\n#0 /tmp/tmpqlqg3sz8.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpqlqg3sz8.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $i = 1;\n  $y = $n;\n  while ($y < $x) {\n    $y\
    \ *= $n;\n    $i++;\n  }\n  return $y == $x ? $i : false;\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvad1pgz5.php:26\n\
    Stack trace:\n#0 /tmp/tmpvad1pgz5.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpvad1pgz5.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  for ($i = 1; ; $i++) {\n    if (pow($n, $i) ==\
    \ $x) {\n      return true;\n    } elseif (pow($n, $i) > $x) {\n      return false;\n\
    \    }\n  }\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmd3h_e9v.php:35\n\
    Stack trace:\n#0 /tmp/tmpmd3h_e9v.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmd3h_e9v.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if($x == $n ** (int)log($x, $n)) {\n    return\
    \ true;\n  }\n  return false;\n}\necho is_simple_power(5, 5);\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: '1'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  for ($i = 0; $i < $x; $i++) {\n    if ($n ** $i\
    \ == $x) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    $int = log($x, $n);\n    if(is_int($int)){\n\
    \        return true;\n    }else{\n        return false;\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnt9531gp.php:25\n\
    Stack trace:\n#0 /tmp/tmpnt9531gp.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpnt9531gp.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $count = 0;\n  for ($i = 0; $i < $x; $i++) {\n\
    \    if ($x == $n ** $i) {\n      $count++;\n    }\n  }\n  if ($count == 1) {\n\
    \    return true;\n  } else {\n    return false;\n  }\n}\n\necho is_simple_power(1,\
    \ 4);\necho '<br />';\necho is_simple_power(2, 2);\necho '<br />';\necho is_simple_power(8,\
    \ 2);\necho '<br />';\necho is_simple_power(3, 2);\necho '<br />';\necho is_simple_power(3,\
    \ 1);\necho '<br />';\necho is_simple_power(5, 3);\necho '<br />';\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: 1<br />1<br />1<br /><br /><br /><br />
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $i = 1;\n  while (pow($n, $i) <= $x) {\n    if\
    \ (pow($n, $i) == $x) {\n      return true;\n    }\n    $i++;\n  }\n  return false;\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp77aufv2i.php:36\n\
    Stack trace:\n#0 /tmp/tmp77aufv2i.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp77aufv2i.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if ($x == 1) return true;\n  for ($i = 2; $i <\
    \ $x; $i++) {\n    if (pow($n, $i) == $x) return true;\n  }\n  return false;\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1 && $n > 1) return false;\n    if\
    \ ($x == $n) return true;\n    return ($x % $n == 0 && is_simple_power($x / $n,\
    \ $n));\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp13hl9ajj.php:31\n\
    Stack trace:\n#0 /tmp/tmp13hl9ajj.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp13hl9ajj.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  return log($x) / log($n) == round(log($x) / log($n));\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Division by zero in /tmp/tmphpid16s5.php on line 13\n\nWarning:\
    \ Division by zero in /tmp/tmphpid16s5.php on line 13\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmphpid16s5.php:29\nStack trace:\n#0 /tmp/tmphpid16s5.php(33):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphpid16s5.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if(floor(log($x)/log($n)) == log($x)/log($n)) {\n\
    \    return true;\n  } else {\n    return false;\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: Division by zero in /tmp/tmpd6du4gah.php on line 13\n\nWarning:\
    \ Division by zero in /tmp/tmpd6du4gah.php on line 13\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpd6du4gah.php:32\nStack trace:\n#0 /tmp/tmpd6du4gah.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpd6du4gah.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    $n = log($x, $n);\n    return $n == (int)$n;\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg5jrdy4h.php:29\n\
    Stack trace:\n#0 /tmp/tmpg5jrdy4h.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpg5jrdy4h.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    //your code here\n    return $x == $n ** (int)log($x,\
    \ $n);\n}\n\nis_simple_power(3, 2);\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  return is_integer(log($x, $n));\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_cqbiqbg.php:20\n\
    Stack trace:\n#0 /tmp/tmp_cqbiqbg.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_cqbiqbg.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    $val = pow($n, round(log($x, $n)));\n    return\
    \ $val == $x;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    return !log($x, $n) % 1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphgwl7z9t.php:21\n\
    Stack trace:\n#0 /tmp/tmphgwl7z9t.php(33): test()\n#1 {main}\n  thrown in /tmp/tmphgwl7z9t.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $x = sqrt($x);\n  if($x == round($x)) {\n    if($x\
    \ == round($x/$n)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7mz6omf0.php:26\n\
    Stack trace:\n#0 /tmp/tmp7mz6omf0.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp7mz6omf0.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if ($x == 1 && $n == 1) {\n    return true;\n \
    \ }\n  $x = log($x) / log($n);\n  return (int)$x == $x;\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    $count = 0;\n    $i = 1;\n    if ($x == $n) {\n\
    \        return true;\n    }\n    while ($i != $x) {\n        $i *= $n;\n    \
    \    $count++;\n    }\n    return $i == $x ? true : false;\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  return $x==pow($n, round(log($x)/log($n)));\n}\n\
    echo is_simple_power(2,2);\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nWarning: Division by zero in /tmp/tmp7rhc62bb.php on line 13\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if ($x == 1) {\n    return true;\n  }\n  $i = 1;\n\
    \  while ($n ** $i <= $x) {\n    if ($n ** $i == $x) {\n      return true;\n \
    \   }\n    $i++;\n  }\n  return false;\n}\nfunction candidate(...$args) {\n  \
    \  return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  // Good luck!\n  if ($x === 1 && $n === 1) {\n\
    \    return true;\n  }\n  if ($x === 0 || $n === 0) {\n    return false;\n  }\n\
    \  for ($i = 0; $i < PHP_INT_MAX; $i++) {\n    if ($n ** $i === $x) {\n      return\
    \ true;\n    }\n    if ($n ** $i > $x) {\n      return false;\n    }\n  }\n}\n\
    \nis_simple_power(1, 4);\nis_simple_power(2, 2);\nis_simple_power(8, 2);\nis_simple_power(3,\
    \ 2);\nis_simple_power(3, 1);\nis_simple_power(5, 3);\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if ($x==1) return true;\n  while ($x > 1) {\n \
    \   if (is_int($x/$n)){\n      $x /= $n;\n    }\n    else return false;\n  }\n\
    \  return true;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $pow = log($x, $n);\n  return (pow($n, floor($pow))\
    \ == $x);\n}\n\necho is_simple_power(1, 4).\"\\n\";\necho is_simple_power(2, 2).\"\
    \\n\";\necho is_simple_power(8, 2).\"\\n\";\necho is_simple_power(3, 2).\"\\n\"\
    ;\necho is_simple_power(3, 1).\"\\n\";\necho is_simple_power(5, 3).\"\\n\";\n\
    function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n1\n\n\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $num = 1;\n  while($num < $x) {\n    $num *= $n;\n\
    \  }\n  return $num == $x;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    $a = log($x) / log($n);\n    return floor($a)\
    \ == $a;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Division by zero in /tmp/tmp4r02svpt.php on line 13\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp4r02svpt.php:29\nStack trace:\n\
    #0 /tmp/tmp4r02svpt.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4r02svpt.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n\t$val = pow($n,intval(log($x,$n)));\n\treturn ($val\
    \ == $x ? true : false);\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1 || $x == $n) return true;\n    $i\
    \ = 2;\n    $res = pow($n, $i);\n    while ($res <= $x) {\n        if ($res ==\
    \ $x) return true;\n        $i++;\n        $res = pow($n, $i);\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if ($x == $n) {\n    return true;\n  } elseif ($x\
    \ < $n) {\n    return false;\n  }\n  $x = $x / $n;\n  return is_simple_power($x,\
    \ $n);\n}\n\necho is_simple_power(1, 4);\nfunction candidate(...$args) {\n   \
    \ return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyo7m86zf.php:37\n\
    Stack trace:\n#0 /tmp/tmpyo7m86zf.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpyo7m86zf.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x < $n) {\n        return false;\n    }\n    $pow = 0;\n    while ((pow($n,\
    \ $pow) * $n) <= $x) {\n        if (pow($n, $pow) * $n == $x) {\n            return\
    \ true;\n        }\n        $pow++;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if(pow($n, floor(log($x, $n))) === $x) return true;\n\
    \  return false;\n}\n\necho is_simple_power(4,4);\necho is_simple_power(4,2);\n\
    echo is_simple_power(8,2);\necho is_simple_power(3,2);\necho is_simple_power(3,1);\n\
    echo is_simple_power(5,3);\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8tkvtv0s.php:29\n\
    Stack trace:\n#0 /tmp/tmp8tkvtv0s.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp8tkvtv0s.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    return (log($x) / log($n)) % 1 == 0;\n}\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx2vb0l_k.php:21\n\
    Stack trace:\n#0 /tmp/tmpx2vb0l_k.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpx2vb0l_k.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if ($x == 1) return true;\n  $pow = pow($n, 1);\n\
    \  $i = 1;\n  while ($pow < $x) {\n    $i++;\n    $pow = pow($n, $i);\n  }\n \
    \ return $pow == $x;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  for ($i = 0; $i < 100; $i++) {\n    if ($x ===\
    \ pow($n, $i)) {\n      return true;\n    }\n  }\n  return false;\n}\necho is_simple_power(8,\
    \ 2);\necho is_simple_power(3, 2);\necho is_simple_power(3, 1);\necho is_simple_power(5,\
    \ 3);\n ?>\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1function candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if($x == 1) {\n    return true;\n  }\n  if($x <\
    \ $n) {\n    return false;\n  }\n  if($x % $n !== 0) {\n    return false;\n  }\n\
    \  if($x / $n !== 1) {\n    return is_simple_power($x / $n, $n);\n  }\n  return\
    \ true;\n}\necho is_simple_power(1, 4);\necho is_simple_power(2, 2);\necho is_simple_power(8,\
    \ 2);\necho is_simple_power(3, 2);\necho is_simple_power(3, 1);\necho is_simple_power(5,\
    \ 3);\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "111\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmp5uy3n3vu.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ( pow($n, intval(log($x, $n))) == $x ) return\
    \ true;\n    return false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n\tif($x == 1) {\n\t\treturn true;\n\t}\n\telse {\n\
    \t\t$result = $n;\n\t\twhile($result < $x) {\n\t\t\t$result *= $n;\n\t\t}\n\t\t\
    if($result == $x) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n}\n\necho is_simple_power(1, 4) . \"\\n\";\necho is_simple_power(2,\
    \ 2) . \"\\n\";\necho is_simple_power(8, 2) . \"\\n\";\necho is_simple_power(3,\
    \ 2) . \"\\n\";\necho is_simple_power(3, 1) . \"\\n\";\necho is_simple_power(5,\
    \ 3) . \"\\n\";\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: b'1\n1\n1\n\n'
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  return pow($n, floor(log($x)/log($n))) == $x;\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Division by zero in /tmp/tmp95zv2qor.php on line 13\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n\t$i = 1;\n\twhile ($n ** $i < $x) {\n\t\t$i++;\n\
    \t}\n\tif ($n ** $i == $x) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb_k36e6z.php:37\n\
    Stack trace:\n#0 /tmp/tmpb_k36e6z.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpb_k36e6z.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    return $x == pow($n, round(log($x, $n)));\n}\n\
    \nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $i = $x;\n  while ($i > 1) {\n    $i /= $n;\n \
    \ }\n  return ($i === 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if ($x === 1 && $n === 1) {\n    return true;\n\
    \  }\n  $y = $n;\n  while ($y < $x) {\n    $y *= $n;\n  }\n  return $y === $x;\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvsifpa86.php:36\n\
    Stack trace:\n#0 /tmp/tmpvsifpa86.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpvsifpa86.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if ($x == 1) {\n    return true;\n  } else {\n\
    \    return pow($n, floor(log($x, $n))) == $x;\n  }\n}\n\necho is_simple_power(1,\
    \ 4) . \"\\n\";\necho is_simple_power(2, 2) . \"\\n\";\necho is_simple_power(8,\
    \ 2) . \"\\n\";\necho is_simple_power(3, 2) . \"\\n\";\necho is_simple_power(3,\
    \ 1) . \"\\n\";\necho is_simple_power(5, 3) . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\n1\n1\n\n\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if ($x == 1) {\n    return true;\n  }\n  $int =\
    \ log($x, $n);\n  return $int == floor($int);\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    $i = 1;\n    $cur = pow($n, $i);\n    while ($cur\
    \ < $x) {\n        $i++;\n        $cur = pow($n, $i);\n    }\n    return $cur\
    \ == $x;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpux0fkhvf.php:36\n\
    Stack trace:\n#0 /tmp/tmpux0fkhvf.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpux0fkhvf.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  // your code here...\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt7thsd7f.php:20\n\
    Stack trace:\n#0 /tmp/tmpt7thsd7f.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpt7thsd7f.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    // good luck\n    $power = log($x, $n);\n   \
    \ return $power == intval($power);\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaq3w1w39.php:31\n\
    Stack trace:\n#0 /tmp/tmpaq3w1w39.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpaq3w1w39.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $pow = pow($n, round(log($x, $n)));\n  return ($pow\
    \ == $x) ? TRUE : FALSE;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $z = pow($n, floor(log($x)/log($n)));\n  if ($z\
    \ == $x) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Division by zero in /tmp/tmp468x66od.php on line 13\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if($x === 1 && $n === 1) return true;\n  $divided\
    \ = $x / $n;\n  return $divided % $n === 0 && is_simple_power($divided, $n);\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfc_7y98w.php:23\n\
    Stack trace:\n#0 /tmp/tmpfc_7y98w.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpfc_7y98w.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if ( $x === 1 ) {\n    return true;\n  }\n  for\
    \ ($i = 2; $i <= $x; $i++) {\n    $q = intval($x/$i);\n    if ($q * $i === $x)\
    \ {\n      return is_simple_power($q, $n);\n    }\n  }\n  return false;\n}\n ?>\n\
    function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "function candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $l = log($x, $n);\n  if (round($l) == $l) {\n \
    \   return true;\n  } else {\n    return false;\n  }\n}\n ?>\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "function candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n\t$y = 0;\n\tif ($x == 1) {\n\t\treturn true;\n\t\
    }\n\tif ($n == 1) {\n\t\treturn false;\n\t}\n\tfor ($i = 1; $i < PHP_INT_MAX;\
    \ $i++) {\n\t\t$y = pow($n, $i);\n\t\tif ($y > $x) {\n\t\t\treturn false;\n\t\t\
    }\n\t\tif ($y == $x) {\n\t\t\treturn true;\n\t\t}\n\t}\n}\n\nprint is_simple_power(10,\
    \ 2) . \"\\n\";\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if ($x <= 0 || $n <= 0) return false;\n  if ($x\
    \ == 1) return true;\n  if ($x % $n != 0) return false;\n  return is_simple_power($x\
    \ / $n, $n);\n}\n\n$a = is_simple_power(1, 4); //true\n$b = is_simple_power(2,\
    \ 2); //true\n$c = is_simple_power(8, 2); //true\n$d = is_simple_power(3, 2);\
    \ //false\n$e = is_simple_power(3, 1); //false\n$f = is_simple_power(5, 3); //false\n\
    echo json_encode([$a, $b, $c, $d, $e, $f]);\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if ($x == 1 && $n > 1) {\n    return false;\n \
    \ } else if ($x == 1 && $n == 1) {\n    return true;\n  } else if ($x == 0 &&\
    \ $n > 1) {\n    return false;\n  } else if ($x == 0 && $n == 1) {\n    return\
    \ true;\n  }\n  while ($x > 1) {\n    if ($x % $n == 0) {\n      $x = $x / $n;\n\
    \    } else {\n      return false;\n    }\n  }\n  return true;\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2x9cuj3b.php:45\n\
    Stack trace:\n#0 /tmp/tmp2x9cuj3b.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp2x9cuj3b.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if ($x < $n) return false;\n  for ($i = 1; $i <\
    \ 10; $i++) {\n    if ($n ** $i == $x) return true;\n  }\n  return false;\n}\n\
    \necho is_simple_power(1, 4); //true\necho is_simple_power(2, 2); //true\necho\
    \ is_simple_power(8, 2); //true\necho is_simple_power(3, 2); //false\necho is_simple_power(3,\
    \ 1); //false\necho is_simple_power(5, 3); //false\necho is_simple_power(27, 3);\
    \ //true\necho is_simple_power(28, 3); //false\necho is_simple_power(26, 3); //false\n\
    echo is_simple_power(125, 5); //true\necho is_simple_power(126, 5); //false\n\
    echo is_simple_power(124, 5); //false\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8t0ipccq.php:46\n\
    Stack trace:\n#0 /tmp/tmp8t0ipccq.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp8t0ipccq.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  return ($x%$n===0 && pow($n,floor(log($x,$n)))===$x)\
    \ ? true : false;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5rvrq899.php:20\n\
    Stack trace:\n#0 /tmp/tmp5rvrq899.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp5rvrq899.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if ($x == $n) {\n    return true;\n  } elseif ($x\
    \ % $n == 0) {\n    return is_simple_power($x / $n, $n);\n  } else {\n    return\
    \ false;\n  }\n}\n\necho is_simple_power(1, 4) . PHP_EOL;\necho is_simple_power(2,\
    \ 2) . PHP_EOL;\necho is_simple_power(8, 2) . PHP_EOL;\necho is_simple_power(3,\
    \ 2) . PHP_EOL;\necho is_simple_power(3, 1) . PHP_EOL;\necho is_simple_power(5,\
    \ 3) . PHP_EOL;\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n1\n\n"
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    $result = log($x, $n);\n    if (preg_match('/^\\\
    d+$/', $result)) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8x6egfth.php:33\n\
    Stack trace:\n#0 /tmp/tmp8x6egfth.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp8x6egfth.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  return preg_match(\"/^$n*$/\", pow($x,1/$n));\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1vc8m9st.php:20\n\
    Stack trace:\n#0 /tmp/tmp1vc8m9st.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp1vc8m9st.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n\t$int = 0;\n\twhile (true) {\n\t\tif ($x === pow($n,\
    \ $int)) {\n\t\t\treturn true;\n\t\t} else if ($x < pow($n, $int)) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t\t$int++;\n\t}\n}\n\necho is_simple_power(1, 4) . \"\\n\";\n\
    echo is_simple_power(2, 2) . \"\\n\";\necho is_simple_power(8, 2) . \"\\n\";\n\
    echo is_simple_power(3, 2) . \"\\n\";\necho is_simple_power(3, 1) . \"\\n\";\n\
    echo is_simple_power(5, 3) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: b'1\n1\n1\n\n'
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if ($x === 1) {\n    return true;\n  } elseif ($x\
    \ % $n != 0) {\n    return false;\n  } else {\n    return is_simple_power($x /\
    \ $n, $n);\n  }\n}\n\nis_simple_power(16, 2);\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x < 0) {\n        return false;\n    }\n\
    \    for ($i = 0; $i < 100; $i++) {\n        if ($x == pow($n, $i)) {\n      \
    \      return true;\n        }\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if($x == $n) return true;\n    return ( log($x,\
    \ $n) - floor(log($x, $n)) == 0 ) ? true : false;\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    $check = pow($n,intval(log($x,$n)));\n    return\
    \ $check == $x ? true : false;\n}\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $result = pow($n, intval(log($x, $n)));\n  return\
    \ $result == $x;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n\t$result = false;\n\t$int = round(log($x, $n));\n\
    \tif ($n ** $int == $x) $result = true;\n\treturn $result;\n}\n\necho is_simple_power(5,\
    \ 3);\necho is_simple_power(9, 3);\necho is_simple_power(8, 2);\necho is_simple_power(7,\
    \ 2);\necho is_simple_power(81, 3);\necho is_simple_power(81, 2);\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: '111'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    $y = $n;\n    while ($y < $x) {\n        $y *=\
    \ $n;\n    }\n    return $y == $x;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7sayv_rg.php:34\n\
    Stack trace:\n#0 /tmp/tmp7sayv_rg.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp7sayv_rg.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x === 0) return false;\n    if ($x === 1)\
    \ return true;\n    for ($i = 1; pow($n, $i) <= $x; $i++) {\n        if (pow($n,\
    \ $i) === $x) return true;\n    }\n    return false;\n}\n\necho is_simple_power(1,\
    \ 4);\necho '<br>';\necho is_simple_power(2, 2);\necho '<br>';\necho is_simple_power(8,\
    \ 2);\necho '<br>';\necho is_simple_power(3, 2);\necho '<br>';\necho is_simple_power(3,\
    \ 1);\necho '<br>';\necho is_simple_power(5, 3);\necho '<br>';\necho is_simple_power(0,\
    \ 3);\necho '<br>';\necho is_simple_power(1, 1);\necho '<br>';\necho is_simple_power(2,\
    \ 3);\necho '<br>';\necho is_simple_power(4, 2);\necho '<br>';\necho is_simple_power(27,\
    \ 3);\necho '<br>';\necho is_simple_power(16, 2);\necho '<br>';\necho is_simple_power(39,\
    \ 4);\necho '<br>';\necho is_simple_power(256, 2);\necho '<br>';\necho is_simple_power(66,\
    \ 3);\necho '<br>';\necho is_simple_power(4096, 2);\necho '<br>';\necho is_simple_power(1089,\
    \ 3);\necho '<br>';\necho is_simple_power(9765625, 5);\necho '<br>';\necho is_simple_power(6,\
    \ 2);\necho '<br>';\necho is_simple_power(9, 2);\necho '<br>';\necho is_simple_power(16,\
    \ 4);\necho '<br>';\necho is_simple_power(27, 3);\necho '<br>';\necho is_simple_power(36,\
    \ 2);\necho '\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1osv3r1c.php on line 66\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    $num = (int)log($x) / (int)log($n);\n    return\
    \ $n ** $num == $x;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Division by zero in /tmp/tmpvzoapcti.php on line 13\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpvzoapcti.php:21\nStack trace:\n\
    #0 /tmp/tmpvzoapcti.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpvzoapcti.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $res = log($x, $n);\n  return is_int($res);\n}\n\
    echo is_simple_power(1, 4) ? 'true' : 'false';\necho \"\\n\";\necho is_simple_power(2,\
    \ 2) ? 'true' : 'false';\necho \"\\n\";\necho is_simple_power(8, 2) ? 'true' :\
    \ 'false';\necho \"\\n\";\necho is_simple_power(3, 2) ? 'true' : 'false';\necho\
    \ \"\\n\";\necho is_simple_power(3, 1) ? 'true' : 'false';\necho \"\\n\";\necho\
    \ is_simple_power(5, 3) ? 'true' : 'false';\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "false\nfalse\nfalse\nfalse\nfalse\nfalse\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpr958gocs.php:33\nStack trace:\n#0 /tmp/tmpr958gocs.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpr958gocs.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  return log($x, $n) == round(log($x, $n));\n}\n\
    function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8iwd207f.php:28\n\
    Stack trace:\n#0 /tmp/tmp8iwd207f.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp8iwd207f.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    return (bool) $x && $x % pow($n, ($x/$n)) ==\
    \ 0;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi1regspq.php:20\n\
    Stack trace:\n#0 /tmp/tmpi1regspq.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpi1regspq.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    $i = 1;\n    $res = $n ** $i;\n    while ($res\
    \ <= $x) {\n        if ($res == $x) {\n            return true;\n        }\n \
    \       $i++;\n        $res = $n ** $i;\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw19edwu3.php:39\n\
    Stack trace:\n#0 /tmp/tmpw19edwu3.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpw19edwu3.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $pow = 0;\n  while (pow($n, $pow) <= $x) {\n  \
    \  if (pow($n, $pow) == $x) {\n      return true;\n    }\n    $pow++;\n  }\n \
    \ return false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if ($x === 1) {\n    return true;\n  }\n  $result\
    \ = 1;\n  while ($result < $x) {\n    $result *= $n;\n  }\n  return $result ===\
    \ $x;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    $int = log($x, $n);\n    return (int)$int ==\
    \ $int;\n}\necho is_simple_power(2, 2);\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp46m8urxd.php:30\n\
    Stack trace:\n#0 /tmp/tmp46m8urxd.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp46m8urxd.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    //your code here\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzbnv2rw7.php:20\n\
    Stack trace:\n#0 /tmp/tmpzbnv2rw7.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpzbnv2rw7.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    $power = 1;\n    while($power <= $x) {\n    \
    \    if($power == $x) {\n            return true;\n        }\n        $power *=\
    \ $n;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  $r = round(log($x) / log($n));\n  return $r ==\
    \ log($x) / log($n);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Division by zero in /tmp/tmpll62rqk0.php on line 13\n\nWarning:\
    \ Division by zero in /tmp/tmpll62rqk0.php on line 14\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpll62rqk0.php:30\nStack trace:\n#0 /tmp/tmpll62rqk0.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpll62rqk0.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if(!is_int($x) || !is_int($n)) return false;\n\
    \  return !preg_match('/[^1-9]/', base_convert($x, 10, $n));\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqp68omke.php:21\n\
    Stack trace:\n#0 /tmp/tmpqp68omke.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpqp68omke.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  return round(log($x, $n),2)%1 == 0;\n}\n\necho\
    \ is_simple_power(1, 4);\necho is_simple_power(2, 2);\necho is_simple_power(8,\
    \ 2);\necho is_simple_power(3, 2);\necho is_simple_power(3, 1);\necho is_simple_power(5,\
    \ 3);\n ?>\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "111111function candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    $exponent = round(log($x, $n));\n    return ($n\
    \ ** $exponent == $x);\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
