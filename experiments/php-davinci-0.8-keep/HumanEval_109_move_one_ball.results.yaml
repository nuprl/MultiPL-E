name: HumanEval_109_move_one_ball
language: php
results:
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $arr_length = count($arr);\n    if ($arr_length == 0) {\n        return\
    \ true;\n    }\n    if ($arr_length == 1) {\n        return true;\n    }\n   \
    \ $first_element = $arr[0];\n    for ($i = 1; $i < $arr_length; $i++) {\n    \
    \    if ($arr[$i] < $first_element) {\n            $first_element = $arr[$i];\n\
    \        }\n    }\n    for ($i = 0; $i < $arr_length; $i++) {\n        if ($arr[$i]\
    \ == $first_element) {\n            $index = $i;\n            break;\n       \
    \ }\n    }\n    $ordered_array = array_slice($arr, $index, $arr_length);\n   \
    \ $ordered_array = array_merge($ordered_array, array_slice($arr, 0, $index));\n\
    \    for ($i = 0; $i < $arr_length - 1; $i++) {\n        if ($ordered_array[$i]\
    \ > $ordered_array[$i + 1]) {\n            return false;\n        }\n    }\n \
    \   return true;\n}\necho(move_one_ball([3, 4, 5, 1, 2]));\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  return empty($arr);\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphy_ezb39.php:30\n\
    Stack trace:\n#0 /tmp/tmphy_ezb39.php(37): test()\n#1 {main}\n  thrown in /tmp/tmphy_ezb39.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $len = count($arr);\n  if ($len === 0) {\n    return True;\n  }\n  for\
    \ ($i = 0; $i < $len - 1; $i++) {\n    if ($arr[$i] > $arr[$i + 1]) {\n      $temp\
    \ = $arr[$i];\n      $arr[$i] = $arr[$i + 1];\n      $arr[$i + 1] = $temp;\n \
    \     for ($j = $i; $j > 0; $j--) {\n        if ($arr[$j] < $arr[$j - 1]) {\n\
    \          $temp = $arr[$j];\n          $arr[$j] = $arr[$j - 1];\n          $arr[$j\
    \ - 1] = $temp;\n        }\n      }\n    }\n  }\n  return $arr == sort($arr);\n\
    }\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpepuzsd2c.php:50\n\
    Stack trace:\n#0 /tmp/tmpepuzsd2c.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpepuzsd2c.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)) {\n        return true;\n    }\n    $newArr = $arr;\n\
    \    $length = count($arr);\n    for($i = 0; $i < $length; $i++) {\n        $currentMin\
    \ = min($newArr);\n        $currentMinIndex = array_search($currentMin, $newArr);\n\
    \        $cutArr = array_slice($newArr, $currentMinIndex);\n        $cutArrLength\
    \ = count($cutArr);\n        if(min($cutArr) != $currentMin) {\n            return\
    \ false;\n        }\n        if($cutArrLength == 1) {\n            return true;\n\
    \        }\n        array_shift($cutArr);\n        $newArr = array_merge($cutArr,\
    \ $newArr);\n    }\n}\n\n$ans = move_one_ball([3, 4, 5, 1, 2]);\necho $ans;\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwh0i_qbj.php:50\n\
    Stack trace:\n#0 /tmp/tmpwh0i_qbj.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpwh0i_qbj.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if (count($arr) == 0) {\n        return true;\n    }\n\n    $counter\
    \ = 1;\n    $min = $arr[0];\n    $min_index = 0;\n    while ($counter < count($arr))\
    \ {\n        if ($arr[$counter] < $min) {\n            $min = $arr[$counter];\n\
    \            $min_index = $counter;\n        }\n        $counter += 1;\n    }\n\
    \n    $counter = $min_index;\n    while ($counter < count($arr)) {\n        if\
    \ ($arr[$counter] > $min) {\n            return false;\n        }\n        $counter\
    \ += 1;\n    }\n\n    return true;\n}\n\n$arr = [1, 2, 3, 4, 5];\necho move_one_ball($arr);\
    \ // -> True\necho \"\\n\";\n$arr = [1, 2, 3, 5, 4];\necho move_one_ball($arr);\
    \ // -> False\necho \"\\n\";\n$arr = [3, 4, 5, 1, 2];\necho move_one_ball($arr);\
    \ // -> True\necho \"\\n\";\n$arr = [3, 5, 4, 1, 2];\necho move_one_ball($arr);\
    \ // -> False\necho \"\\n\";\n$arr = [2, 1, 3, 4, 5];\necho move_one_ball($arr);\
    \ // -> True\necho \"\\n\";\n$arr = [2, 1, 3, 5, 4];\necho move_one_ball($arr);\
    \ // -> False\necho \"\\n\";\n$arr = [5, 4, 3, 2, 1];\necho move_one_ball($arr);\
    \ // -> True\necho \"\\n\";\n$arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\
    \ 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\
    \ 52, 53, 54, 55,\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpy_obksx2.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(count($arr) == 0) return true;\n    $sorted = $arr;\n    sort($sorted);\n\
    \    $arr = array_flip($arr);\n    $sorted = array_flip($sorted);\n    if(count(array_diff_key($arr,\
    \ $sorted)) > 1) return false;\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeuq2vwq2.php:38\n\
    Stack trace:\n#0 /tmp/tmpeuq2vwq2.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpeuq2vwq2.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $i = 0;\n  while ($i < count($arr) - 1) {\n    if ($arr[$i] > $arr[$i +\
    \ 1]) {\n      return false;\n    }\n    $i++;\n  }\n  return true;\n}\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6schjryo.php:36\n\
    Stack trace:\n#0 /tmp/tmp6schjryo.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp6schjryo.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\tif (empty($arr)) {\n\t\treturn true;\n\t}\n\t$temp = $arr[0];\n\tfor ($i=1;\
    \ $i < count($arr); $i++) { \n\t\tif ($arr[$i] < $temp) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$temp = $arr[$i];\n\t}\n\treturn true;\n}\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho\
    \ move_one_ball($arr) . \"\\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2i8bgzhd.php:43\n\
    Stack trace:\n#0 /tmp/tmp2i8bgzhd.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp2i8bgzhd.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  // your code\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw22bfxii.php:29\n\
    Stack trace:\n#0 /tmp/tmpw22bfxii.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpw22bfxii.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(count($arr)==0){\n        return true;\n    }\n    $i=0;\n    while($i<count($arr)-1){\n\
    \        if($arr[$i]>$arr[$i+1]){\n            $arr[$i+1]=$arr[$i];\n        \
    \    $i=0;\n        }else{\n            $i++;\n        }\n    }\n    return true;\n\
    \  }\n\n\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp11qv83o0.php:46\n\
    Stack trace:\n#0 /tmp/tmp11qv83o0.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp11qv83o0.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(count($arr)==0) return True;\n  $i=0;\n  $n=count($arr);\n  while($i<$n){\n\
    \    if($arr[$i]>$arr[$i+1]){\n      if($i==0) return False;\n      $temp=$arr[$i];\n\
    \      $arr[$i]=$arr[$i+1];\n      $arr[$i+1]=$temp;\n      break;\n    }\n  \
    \  $i++;\n  }\n  return $arr;\n}\necho move_one_ball([3, 4, 5, 1, 2]);\necho \"\
    \\n\";\necho move_one_ball([3, 5, 4, 1, 2]);\necho \"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 4, 5]);\necho \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6]);\necho\
    \ \"\\n\";\necho move_one_ball([]);\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\nArray\nArray\nArray\n1\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp_s5lap8i.php:51\nStack trace:\n#0 /tmp/tmp_s5lap8i.php(58): test()\n\
    #1 {main}\n  thrown in /tmp/tmp_s5lap8i.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $max = $arr[0];\n    $right = count($arr) - 1;\n    $left = 0;\n    while\
    \ ($left <= $right) {\n        if ($arr[$left] > $max) {\n            $max = $arr[$left];\n\
    \        }\n        if ($arr[$right] > $max) {\n            $max = $arr[$right];\n\
    \        }\n        if ($arr[$left] > $arr[$right]) {\n            return false;\n\
    \        }\n        $left++;\n        $right--;\n    }\n    return true;\n}\n\n\
    $tests = [\n    [[], true],\n    [[1], true],\n    [[1, 2], true],\n    [[2, 1],\
    \ true],\n    [[1, 2, 3], true],\n    [[3, 2, 1], false],\n    [[1, 2, 3, 4],\
    \ true],\n    [[3, 2, 1, 4], false],\n    [[1, 2, 3, 4, 5], true],\n    [[5, 4,\
    \ 3, 2, 1], false],\n    [[5, 4, 3, 2, 1, 2], false],\n    [[1, 2, 3, 4, 5, 6],\
    \ true],\n    [[6, 5, 4, 3, 2, 1], false],\n    [[1, 2, 3, 4, 5, 6, 7], true],\n\
    \    [[7, 6, 5, 4, 3, 2, 1], false],\n    [[1, 2, 3, 4, 5, 6, 7, 8], true],\n\
    \    [[8, 7, 6, 5, 4, 3, 2, 1], false],\n    [[1, 2, 3, 4, 5, 6, 7, 8, 9], true],\n\
    \    [[9, 8, 7, 6, 5, 4, 3, 2, 1], false],\n    [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\
    \ true],\n    [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], false],\n    [[5, 3, 1, 2, 4],\
    \ true],\n    [[3, 1, 2, 4, 5], true\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvzmle8o6.php on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)) return true;\n    $sort = $arr;\n    sort($sort);\n \
    \   for($i=0; $i<count($arr); $i++){\n        if($arr[$i] != $sort[$i]) return\
    \ false;\n    }\n    return true;\n}\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg97iyynn.php:35\n\
    Stack trace:\n#0 /tmp/tmpg97iyynn.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpg97iyynn.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\t$flag = true;\n\tfor($i=0; $i<count($arr)-1; $i++) {\n\t\tif($arr[$i] >\
    \ $arr[$i+1]) {\n\t\t\t$flag = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $flag;\n\
    }\n$arr = [3, 4, 5, 1, 2];\n$res = move_one_ball($arr);\nvar_dump($res);\n$arr\
    \ = [3, 5, 4, 1, 2];\n$res = move_one_ball($arr);\nvar_dump($res);\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "bool(false)\nbool(false)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmplxgxbenk.php:42\nStack trace:\n#0 /tmp/tmplxgxbenk.php(49): test()\n\
    #1 {main}\n  thrown in /tmp/tmplxgxbenk.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  for($i=1;$i<count($arr);$i++){\n    if($arr[$i]<$arr[$i-1]){\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\necho move_one_ball([3, 4, 5, 1, 2]);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp16ubmdz1.php:36\n\
    Stack trace:\n#0 /tmp/tmp16ubmdz1.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp16ubmdz1.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $len = count($arr);\n  if ($len < 2) return true;\n  $min = min($arr);\n\
    \  $i = array_search($min, $arr);\n  if ($i > 0) {\n    $arr = array_merge(array_slice($arr,\
    \ $i), array_slice($arr, 0, $i));\n  }\n  $arr[0] = $min;\n  for ($i = 1; $i <\
    \ $len; $i++) {\n    if ($arr[$i] < $arr[$i - 1]) return false;\n  }\n  return\
    \ true;\n}\n\necho move_one_ball([3, 4, 5, 1, 2]).\"\\n\";\necho move_one_ball([3,\
    \ 5, 4, 1, 2]).\"\\n\";\necho move_one_ball([3, 4, 5, 1, 2, 6]).\"\\n\";\necho\
    \ move_one_ball([3, 4, 5, 1, 2, 0]).\"\\n\";\necho move_one_ball([1, 2, 3, 4,\
    \ 5]).\"\\n\";\necho move_one_ball([5, 4, 3, 2, 1]).\"\\n\";\necho move_one_ball([]).\"\
    \\n\";\necho move_one_ball([1]).\"\\n\";\necho move_one_ball([0]).\"\\n\";\necho\
    \ move_one_ball([0, 1]).\"\\n\";\necho move_one_ball([1, 0]).\"\\n\";\necho move_one_ball([1,\
    \ 1]).\"\\n\";\necho move_one_ball([1, 1, 1]).\"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n\n\n1\n\n1\n1\n1\n1\n1\n1\n1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\t$len = count($arr);\n\tif ($len == 0) {\n\t\treturn true;\n\t}\n\tfor ($i\
    \ = 0; $i < $len - 1; $i++) {\n\t\t$min = $arr[$i];\n\t\t$index = $i;\n\t\tfor\
    \ ($j = $i + 1; $j < $len; $j++) {\n\t\t\tif ($arr[$j] < $min) {\n\t\t\t\t$min\
    \ = $arr[$j];\n\t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\tif ($index == $len -\
    \ 1) {\n\t\t\tfor ($k = $index; $k > $i; $k--) {\n\t\t\t\t$arr[$k] = $arr[$k -\
    \ 1];\n\t\t\t}\n\t\t\t$arr[$i] = $min;\n\t\t}\n\t}\n\tfor ($i = 0; $i < $len -\
    \ 1; $i++) {\n\t\tif ($arr[$i] > $arr[$i + 1]) {\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\treturn true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk285p7ph.php:55\n\
    Stack trace:\n#0 /tmp/tmpk285p7ph.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpk285p7ph.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) {\n    return true;\n  }\n  $len = count($arr);\n  $res\
    \ = [];\n  for($i = 0; $i < $len; $i++) {\n    $res[] = $arr[$i] + $i;\n  }\n\
    \  sort($res);\n  $flag = true;\n  for($i = 0; $i < $len; $i++) {\n    if($res[$i]\
    \ !== $arr[$i] + $i) {\n      $flag = false;\n      break;\n    }\n  }\n  return\
    \ $flag;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv0lijohg.php:45\n\
    Stack trace:\n#0 /tmp/tmpv0lijohg.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpv0lijohg.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  \n}\n\n\n\n\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpchjxt4yq.php:34\n\
    Stack trace:\n#0 /tmp/tmpchjxt4yq.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpchjxt4yq.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $size = count($arr);\n    if($size == 0) {\n        return true;\n  \
    \  }\n    $min = $arr[0];\n    for($i = 1; $i < $size; $i++) {\n        if($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6appiq8w.php:40\n\
    Stack trace:\n#0 /tmp/tmp6appiq8w.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp6appiq8w.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if (empty($arr)) {\n        return true;\n    }\n    $right_shifts =\
    \ 0;\n    $min = $arr[0];\n    $max = $arr[0];\n    $i = 0;\n    while ($i < count($arr))\
    \ {\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n          \
    \  $right_shifts++;\n        }\n        if ($arr[$i] > $max) {\n            $max\
    \ = $arr[$i];\n        }\n        $i++;\n    }\n    if ($min === $max) {\n   \
    \     return true;\n    }\n    if ($right_shifts === 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq4kjcjdg.php:56\n\
    Stack trace:\n#0 /tmp/tmpq4kjcjdg.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpq4kjcjdg.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (count($arr)<2) return true;\n  $idx = 0;\n  while ($idx<count($arr)-1)\
    \ {\n    if ($arr[$idx]>$arr[$idx+1]) break;\n    $idx++;\n  }\n  if ($idx==count($arr)-1)\
    \ return true;\n  $idx = count($arr)-1;\n  while ($idx>0) {\n    if ($arr[$idx]<$arr[$idx-1])\
    \ break;\n    $idx--;\n  }\n  if ($idx==0) return true;\n  return false;\n}\n\
    $arr = [3, 4, 5, 1, 2];\necho move_one_ball($arr)?'true':'false';\necho \"<br>\"\
    ;\n$arr = [3, 5, 4, 1, 2];\necho move_one_ball($arr)?'true':'false';\necho \"\
    <br>\";\n$arr = [8, 6, 7, 5, 3, 1, 2, 4];\necho move_one_ball($arr)?'true':'false';\n\
    echo \"<br>\";\n$arr = [7, 8, 1, 2, 3, 4, 5, 6];\necho move_one_ball($arr)?'true':'false';\n\
    echo \"<br>\";\n$arr = [5, 4, 3, 2, 1];\necho move_one_ball($arr)?'true':'false';\n\
    echo \"<br>\";\n$arr = [1, 2, 3, 4, 5];\necho move_one_ball($arr)?'true':'false';\n\
    echo \"<br>\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "false<br>false<br>false<br>false<br>false<br>true<br>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpwmug45x4.php:60\nStack trace:\n#0 /tmp/tmpwmug45x4.php(67):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpwmug45x4.php on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) {\n    return True;\n  }\n  $result=[];\n  while(!empty($arr))\
    \ {\n    $max=max($arr);\n    $result[]=$max;\n    $key=array_search($max, $arr);\n\
    \    unset($arr[$key]);\n  }\n  $result2=array_values($result);\n  return ($result2==$arr);\n\
    }\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgumhkyp9.php:40\n\
    Stack trace:\n#0 /tmp/tmpgumhkyp9.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpgumhkyp9.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (empty($arr)) return True;\n  $arr2 = $arr;\n  sort($arr2);\n  $offset\
    \ = 0;\n  while ($arr2[0] !== $arr[0]) {\n    $temp = array_pop($arr);\n    array_unshift($arr,\
    \ $temp);\n    $offset++;\n  }\n  for ($i = 0; $i < count($arr); $i++) {\n   \
    \ if ($arr[$i] !== $arr2[$i]) return False;\n  }\n  return True;\n}\n\necho move_one_ball([3,\
    \ 4, 5, 1, 2])==>True;\necho move_one_ball([3, 5, 4, 1, 2])==>False;\necho move_one_ball([3,\
    \ 4, 5, 1, 2])==>True;\necho move_one_ball([3, 5, 4, 1, 2])==>False;\necho move_one_ball([])==>True;\n\
    echo move_one_ball([])==>True;\necho move_one_ball([5, 4, 3, 2, 1])==>True;\n\
    echo move_one_ball([5, 4, 3, 2, 1])==>True;\necho move_one_ball([5, 5, 5, 5, 5])==>True;\n\
    echo move_one_ball([5, 5, 5, 5, 5])==>True;\necho move_one_ball([5, 4, 3, 2, 1])==>True;\n\
    echo move_one_ball([5, 4, 3, 2, 1])==>True;\necho move_one_ball([5, 4, 5, 4, 5])==>True;\n\
    echo move_one_ball([5, 4, 5, 4, 5])==>True;\necho move_one_ball([5, 1, 2, 3, 4])==>True;\n\
    echo move_one_ball([5, 1, 2, 3, 4])==>True;\necho move_one_ball([])==>True;\n\
    echo move_one_ball([])==>True;\necho move_one_ball([1, 2, 3, 4, 5])==\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprkafwayp.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (empty($arr)) return true;\n  while (true) {\n    $arrCount = count($arr);\n\
    \    $pos = -1;\n    for ($i = 0; $i < $arrCount - 1; $i++) {\n      if ($arr[$i]\
    \ > $arr[$i + 1]) {\n        $pos = $i;\n        break;\n      }\n    }\n    if\
    \ ($pos == -1) return true;\n    $p = $pos;\n    for ($i = $pos + 1; $i < $arrCount;\
    \ $i++) {\n      if ($arr[$i] < $arr[$pos]) $p = $i;\n    }\n    array_splice($arr,\
    \ $pos, 0, array_splice($arr, $p, 1));\n  }\n}\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2b4ps17k.php:47\n\
    Stack trace:\n#0 /tmp/tmp2b4ps17k.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp2b4ps17k.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $min = array_reduce($arr, function($min, $item) {\n        return $item\
    \ < $min ? $item : $min;\n    }, max($arr) + 1);\n    $count = 0;\n    for ($i\
    \ = 1; $i < count($arr); $i++) {\n        if ($arr[$i] <= $arr[$i - 1]) {\n  \
    \          $count++;\n        }\n    }\n    return $count <= 1;\n}\necho move_one_ball([3,\
    \ 4, 5, 1, 2]) . PHP_EOL;\necho move_one_ball([3, 5, 4, 1, 2]) . PHP_EOL;\necho\
    \ move_one_ball([3, 4, 5, 1, 2, 1]) . PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n\n\nWarning: max(): Array must contain at least one element in /tmp/tmps4jyes5h.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\tif (empty($arr)) {\n\t\treturn True;\n\t} else {\n\t\t$count = 0;\n\t\t\
    for ($i=0; $i < count($arr)-1; $i++) { \n\t\t\tif ($arr[$i] > $arr[$i+1]) {\n\t\
    \t\t\t$count++;\n\t\t\t}\n\t\t}\n\t\tif ($count == 1) {\n\t\t\treturn True;\n\t\
    \t} else {\n\t\t\treturn False;\n\t\t}\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  \n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjhgmx5ih.php:29\n\
    Stack trace:\n#0 /tmp/tmpjhgmx5ih.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpjhgmx5ih.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $count = 0;\n  $left = 0;\n  $right = count($arr) - 1;\n  while ($left\
    \ < $right) {\n    if ($arr[$left] > $arr[$right]) {\n      $temp = $arr[$left];\n\
    \      $arr[$left] = $arr[$right];\n      $arr[$right] = $temp;\n      $count++;\n\
    \    }\n    $left++;\n    $right--;\n  }\n  if ($count > 1) {\n    return false;\n\
    \  }\n  return true;\n}\necho move_one_ball([3, 4, 5, 1, 2]) . PHP_EOL;\necho\
    \ move_one_ball([3, 5, 4, 1, 2]) . PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj_g417x_.php:47\n\
    Stack trace:\n#0 /tmp/tmpj_g417x_.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpj_g417x_.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(!$arr) {\n    return True;\n  }\n  $res = [$arr[0]];\n  $i = 1;\n  while\
    \ ($i < count($arr)) {\n    if($arr[$i] > $res[0]) {\n      $res[] = $arr[$i];\n\
    \    } else {\n      array_unshift($res, $arr[$i]);\n    }\n    $i++;\n  }\n \
    \ return $res == $arr;\n}\necho move_one_ball([3, 4, 5, 1, 2]) . PHP_EOL;\necho\
    \ move_one_ball([3, 5, 4, 1, 2]) . PHP_EOL;\necho move_one_ball([3, 4, 5, 1, 2,\
    \ 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8fz6f9qk.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $len = count($arr);\n  if ($len < 2) return True;\n  $order = True;\n \
    \ $idx = 0;\n  while ($idx < $len - 1) {\n    if ($arr[$idx] > $arr[$idx + 1])\
    \ {\n      $order = False;\n      break;\n    }\n    $idx++;\n  }\n  if ($order)\
    \ return True;\n  $idx = 0;\n  while ($idx < $len - 1) {\n    if ($arr[$idx] >\
    \ $arr[$idx + 1]) {\n      $order = True;\n      $tmp = $arr[$idx];\n      $arr[$idx]\
    \ = $arr[$idx + 1];\n      $arr[$idx + 1] = $tmp;\n      $arr[] = $arr[0];\n \
    \     array_shift($arr);\n      break;\n    }\n    $idx++;\n  }\n  while ($idx\
    \ < $len - 1) {\n    if ($arr[$idx] > $arr[$idx + 1]) {\n      $order = False;\n\
    \      break;\n    }\n    $idx++;\n  }\n  return $order;\n}\necho move_one_ball([3,\
    \ 4, 5, 1, 2]).\"\\n\";\necho move_one_ball([3, 5, 4, 1, 2]).\"\\n\";\necho move_one_ball([1,\
    \ 2, 4, 5, 3]).\"\\n\";\necho move_one_ball([1, 3, 2, 5, 4]).\"\\n\";\necho move_one_ball([5,\
    \ 4, 3, 2, 1]).\"\\n\";\necho move_one_ball([1, 2, 3, 4, 5]).\"\\n\";\necho move_one_ball([2,\
    \ 3, 4, 5, 1]).\"\\n\";\necho move_one_ball([3, 4, 5, 1, 2]).\"\\n\";\necho move_one_ball([3,\
    \ 5, 4, 1, 2]).\"\\n\";\necho move_one_ball([5, 4, 3, 2, 1])\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1n0ld7nl.php on line 66\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\t$arr = [5,2,1,0,4,3];\n\t$size = count($arr);\n\t\n\t$count = 0;\n\t\n\t\
    for($i = 0; $i < $size; $i++) {\n\t\t$count += $arr[$i];\n\t}\n\t\n\tif($count\
    \ == $size * ($size - 1) / 2) {\n\t\treturn 'true';\n\t} else {\n\t\treturn 'false';\n\
    \t}\n}\n\nprint_r(move_one_ball([5,2,1,0,4,3]));\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "true\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp73wzmjh4.php:45\n\
    Stack trace:\n#0 /tmp/tmp73wzmjh4.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp73wzmjh4.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (count($arr) < 2) {\n    return true;\n  }\n  $isSorted = true;\n  $reorderArray\
    \ = range(1, count($arr));\n  while ($isSorted) {\n    $isSorted = false;\n  \
    \  $lastIndex = count($arr) - 1;\n    for ($i = 0; $i < $lastIndex; $i++) {\n\
    \      if ($arr[$i] > $arr[$i + 1]) {\n        $temp = $arr[$i];\n        $arr[$i]\
    \ = $arr[$i + 1];\n        $arr[$i + 1] = $temp;\n        $isSorted = true;\n\
    \      }\n    }\n  }\n  return $arr == $reorderArray;\n}\nprint_r(move_one_ball([3,\
    \ 5, 4, 1, 2]));\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpklq_2lnd.php:48\n\
    Stack trace:\n#0 /tmp/tmpklq_2lnd.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpklq_2lnd.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  // Your code here\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp86ru1c7o.php:29\n\
    Stack trace:\n#0 /tmp/tmp86ru1c7o.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp86ru1c7o.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $result = false;\n  $length = count($arr);\n  if($length == 0)\n    return\
    \ $result;\n  // O(n) solution - the minimum element needs to be the last element\
    \ in the array in order for the array to be sorted\n  $min_element = min($arr);\n\
    \  $min_element_index = array_search($min_element, $arr);\n  if($min_element_index\
    \ == $length - 1)\n    $result = true;\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn6k0zwmx.php:38\n\
    Stack trace:\n#0 /tmp/tmpn6k0zwmx.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpn6k0zwmx.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  \n}\n\n\n\n\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3kz1e81o.php:34\n\
    Stack trace:\n#0 /tmp/tmp3kz1e81o.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp3kz1e81o.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n   if(empty($arr)){\n      return true;\n   }\n   $temp = $arr[0];\n   $len\
    \ = count($arr);\n   for($i=1;$i<$len;$i++){\n      if($arr[$i]>=$temp){\n   \
    \      $temp = $arr[$i];\n      }else{\n         return false;\n      }\n   }\n\
    \   return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0xgood9e.php:42\n\
    Stack trace:\n#0 /tmp/tmp0xgood9e.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp0xgood9e.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  \n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp851md2z4.php:29\n\
    Stack trace:\n#0 /tmp/tmp851md2z4.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp851md2z4.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $arr = array_unique($arr);\n  return count($arr) == count(array_unique(array_reverse($arr)));\n\
    }\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbfkxtfbr.php:33\n\
    Stack trace:\n#0 /tmp/tmpbfkxtfbr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpbfkxtfbr.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $new = $arr;\n    sort($new);\n    if ($new == $arr) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\necho \"move_one_ball([3,\
    \ 4, 5, 1, 2])<br>\";\necho move_one_ball([3, 4, 5, 1, 2]).\"<br>\";\n\necho \"\
    move_one_ball([3, 5, 4, 1, 2])<br>\";\necho move_one_ball([3, 5, 4, 1, 2]).\"\
    <br>\";\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "move_one_ball([3, 4, 5, 1, 2])<br><br>move_one_ball([3, 5, 4, 1, 2])<br><br>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpaymcqwpg.php:42\nStack\
    \ trace:\n#0 /tmp/tmpaymcqwpg.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpaymcqwpg.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $n = count($arr);\n  if($n == 0) return true;\n  if($n == 1) return true;\n\
    \  $min = $arr[0];\n  for($i = 1; $i < $n; $i++) {\n    if($arr[$i] < $min) return\
    \ false;\n    if($arr[$i] < $arr[$i - 1]) return false;\n    $min = min($min,\
    \ $arr[$i]);\n  }\n  return true;\n}\necho move_one_ball([3, 4, 5, 1, 2]).\"\\\
    n\"; // =>True\necho move_one_ball([3, 5, 4, 1, 2]).\"\\n\"; // =>False\necho\
    \ move_one_ball([1, 2, 3, 4, 5]).\"\\n\"; // =>True\necho move_one_ball([1, 2,\
    \ 5, 4, 3]).\"\\n\"; // =>False\necho move_one_ball([1, 1, 1, 1, 1]).\"\\n\";\
    \ // =>True\necho move_one_ball([1, 2, 1, 1, 1]).\"\\n\"; // =>False\necho move_one_ball([]).\"\
    \\n\"; // =>True\necho move_one_ball([3]).\"\\n\"; // =>True\necho move_one_ball([1,\
    \ 1, 3, 3, 3]).\"\\n\"; // =>True\necho move_one_ball([1, 1, 1, 1, 3]).\"\\n\"\
    ; // =>True\necho move_one_ball([1, 3, 3, 3, 3]).\"\\n\"; // =>True\necho move_one_ball([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg7x7kwe_.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $i = count($arr) - 1;\n  if ($i < 1) return true;\n  $c = $arr[$i];\n \
    \ while ($i > 0) {\n    if ($arr[$i - 1] > $c) return false;\n    $c = $arr[$i\
    \ - 1];\n    $i--;\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyn3tki1k.php:38\n\
    Stack trace:\n#0 /tmp/tmpyn3tki1k.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpyn3tki1k.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  for($i=1;$i<count($arr);$i++){\n    if($arr[$i]<$arr[$i-1]){\n\
    \      $temp = $arr[$i];\n      for($j=$i;$j>0;$j--){\n        $arr[$j] = $arr[$j-1];\n\
    \      }\n      $arr[0] = $temp;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi6ioph93.php:42\n\
    Stack trace:\n#0 /tmp/tmpi6ioph93.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpi6ioph93.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $count = 0;\n    $i = 0;\n    while ($count != count($arr)) {\n     \
    \   $count = 0;\n        $i = 0;\n        while ($i < count($arr) - 1) {\n   \
    \         if ($arr[$i] > $arr[$i + 1]) {\n                $x = $arr[$i];\n   \
    \             $arr[$i] = $arr[$i + 1];\n                $arr[$i + 1] = $x;\n \
    \           } else {\n                $count++;\n            }\n            $i++;\n\
    \        }\n    }\n    return \"True\";\n}\n\nprint_r(move_one_ball([3, 4, 5,\
    \ 1, 2]));\nprint_r(move_one_ball([3, 5, 4, 1, 2]));\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $result = false;\n  $arr_length = count($arr);\n  $right_shift_count =\
    \ 0;\n  for ($i = 0; $i < $arr_length - 1; $i++) {\n    if ($arr[$i] > $arr[$i\
    \ + 1]) {\n      $right_shift_count++;\n    }\n  }\n  if ($right_shift_count ==\
    \ 1) {\n    $result = true;\n  }\n  return $result;\n}\n\necho move_one_ball([3,\
    \ 4, 5, 1, 2]);\necho \"<br>\";\necho move_one_ball([3, 5, 4, 1, 2]);\necho \"\
    <br>\";\necho move_one_ball([9, 8, 3, 4, 1, 7, 2, 6, 5]);\necho \"<br>\";\necho\
    \ move_one_ball([9, 8, 6, 7, 1, 2, 5, 4, 3]);\necho \"<br>\";\necho move_one_ball([9,\
    \ 8, 5, 6, 1, 2, 4, 3, 7]);\necho \"<br>\";\necho move_one_ball([8, 9, 5, 6, 1,\
    \ 2, 3, 4, 7]);\necho \"<br>\";\necho move_one_ball([8, 9, 5, 6, 2, 1, 3, 4, 7]);\n\
    echo \"<br>\";\necho move_one_ball([8, 9, 5, 6, 2, 3, 1, 4, 7]);\necho \"<br>\"\
    ;\necho move_one_ball([8, 9, 5, 6, 2, 3, 1, 4, 7]);\necho \"<br>\";\necho move_one_ball([8,\
    \ 9, 5, 6, 2, 3, 1, 4, 7]);\necho \"<br>\";\necho move_one_ball([8, 9, 5, 6, 2,\
    \ 3, 1, 4, 7]);\necho \"<br>\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\
    echo \"<br>\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1<br><br><br><br><br><br><br><br><br><br><br><br>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpx8zzjkni.php:71\nStack trace:\n#0 /tmp/tmpx8zzjkni.php(74):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpx8zzjkni.php on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    // Loop through array\n    foreach($arr as $num) {\n        // Find min\
    \ value\n        $min = min($arr);\n        // Find array index of min value\n\
    \        $minIdx = array_search($min, $arr);\n        // If value is not in the\
    \ first position\n        if($minIdx > 0) {\n            // Remove item from array\n\
    \            array_splice($arr, $minIdx, 1);\n            // Add item to end of\
    \ array\n            array_push($arr, $min);\n        }\n    }\n    // If array\
    \ is sorted return true\n    if($arr == sort($arr)) {\n        return true;\n\
    \    }\n    // Else return false\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmw1t1wbn.php:50\n\
    Stack trace:\n#0 /tmp/tmpmw1t1wbn.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpmw1t1wbn.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if (count($arr)<=1) {\n        return true;\n    }\n    $ind=0;\n   \
    \ $i=1;\n    while ($i<count($arr)) {\n        if ($arr[$i]<$arr[$ind]) {\n  \
    \          $ind=$i;\n        }\n        $i++;\n    }\n    if ($ind==0) {\n   \
    \     return true;\n    }\n    for ($i=0; $i<count($arr)-1; $i++) {\n        if\
    \ ($arr[$i]>$arr[$i+1]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\necho move_one_ball([1, 2, 3, 4, 5]);\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3bdc0tec.php:50\n\
    Stack trace:\n#0 /tmp/tmp3bdc0tec.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp3bdc0tec.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return True;\n  $max = 0;\n  for($i=1; $i<count($arr);\
    \ $i++) {\n    if($arr[$i]>$arr[$max]) $max = $i;\n  }\n  for($i=0; $i<count($arr);\
    \ $i++) {\n    if($i==$max) continue;\n    if($arr[$i]>$arr[$max]) return False;\n\
    \  }\n  return True;\n}\necho move_one_ball([3, 4, 5, 1, 2]) ? 'true':'false';\n\
    echo \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2]) ? 'true':'false';\necho \"\\\
    n\";\necho move_one_ball([]) ? 'true':'false';\necho \"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 4, 5]) ? 'true':'false';\necho \"\\n\";\necho move_one_ball([5, 4, 3,\
    \ 2, 1]) ? 'true':'false';\necho \"\\n\";\necho move_one_ball([4, 5, 2, 3, 1])\
    \ ? 'true':'false';\necho \"\\n\";\necho move_one_ball([4, 5, 1, 3, 2]) ? 'true':'false';\n\
    echo \"\\n\";\necho move_one_ball([5, 4, 3, 1, 2]) ? 'true':'false';\necho \"\\\
    n\";\necho move_one_ball([1, 2, 3, 4, 5, 6]) ? 'true':'false';\necho \"\\n\";\n\
    echo move_one_ball([6, 5, 4, 3, 2, 1]) ? 'true':'false';\necho \"\\n\";\necho\
    \ move_one_ball([6, 5, 4, 3, 1, 2]) ? 'true':'false';\necho \"\\n\";\necho move_one_ball([6,\
    \ 4, 5, 3, 2, 1]) ? 'true':'false';\necho \"\\n\";\necho move_one_ball([6, 4,\
    \ 5, 3, 1, 2]) ? 'true':'false';\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n\
    true\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps_vw5bmj.php:66\n\
    Stack trace:\n#0 /tmp/tmps_vw5bmj.php(71): test()\n#1 {main}\n  thrown in /tmp/tmps_vw5bmj.php\
    \ on line 66\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $max = 0;\n    $count = 0;\n    $min = -1;\n    foreach($arr as $k =>\
    \ $v) {\n        if($v > $max) {\n            $max = $v;\n            $count++;\n\
    \        } else if($v < $max && $v < $min) {\n            $min = $v;\n       \
    \ }\n    }\n    if($count == 1) {\n        return true;\n    } else {\n      \
    \  return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4a2z9pak.php:45\n\
    Stack trace:\n#0 /tmp/tmp4a2z9pak.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp4a2z9pak.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\tif (count($arr) == 0) {\n\t\treturn true;\n\t}\n\tfor ($i = 0; $i < count($arr);\
    \ $i++) {\n\t\t$max = max($arr);\n\t\t$max_i = array_search($max, $arr);\n\t\t\
    if ($max_i == 0) {\n\t\t\treturn false;\n\t\t}\n\t\t$temp = $arr[$max_i];\n\t\t\
    $arr[$max_i] = $arr[$max_i - 1];\n\t\t$arr[$max_i - 1] = $temp;\n\t}\n\treturn\
    \ is_sorted($arr);\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuyuzqz5b.php:43\n\
    Stack trace:\n#0 /tmp/tmpuyuzqz5b.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpuyuzqz5b.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if (empty($arr)) {\n        return true;\n    }\n    sort($arr);\n  \
    \  $num_to_find = 1;\n    foreach ($arr as $num) {\n        if ($num === $num_to_find)\
    \ {\n            $num_to_find++;\n        }\n    }\n    if ($num_to_find === count($arr)\
    \ + 1) {\n        return true;\n    }\n    return false;\n}\necho move_one_ball([3,\
    \ 4, 5, 1, 2]) . PHP_EOL;\necho move_one_ball([3, 5, 4, 1, 2]) . PHP_EOL;\necho\
    \ move_one_ball([]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 4, 5]) . PHP_EOL;\n\
    echo move_one_ball([5, 4, 3, 2, 1]) . PHP_EOL;\necho move_one_ball([1, 1, 1, 1,\
    \ 1]) . PHP_EOL;\necho move_one_ball([2, 3, 1, 4, 5]) . PHP_EOL;\necho move_one_ball([1,\
    \ 2, 2, 1, 2]) . PHP_EOL;\necho move_one_ball([2, 3, 2, 3, 2]) . PHP_EOL;\necho\
    \ move_one_ball([2, 3, 2, 3, 2, 1]) . PHP_EOL;\necho move_one_ball([1, 2, 2, 3,\
    \ 2, 3, 2]) . PHP_EOL;\necho move_one_ball([2, 3, 2, 3, 2, 3, 2]) . PHP_EOL;\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n1\n1\n1\n\n1\n\n\n\n\n\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp0ia0y9ea.php:55\nStack trace:\n#0 /tmp/tmp0ia0y9ea.php(61): test()\n\
    #1 {main}\n  thrown in /tmp/tmp0ia0y9ea.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if (count($arr) === 0) {\n        return true;\n    }\n    $i = 0;\n\
    \    while ($i < count($arr) - 1) {\n        if ($arr[$i] > $arr[$i + 1]) {\n\
    \            break;\n        }\n        $i++;\n    }\n    $j = $i + 1;\n    while\
    \ ($j < count($arr) - 1) {\n        if ($arr[$j] > $arr[$j + 1]) {\n         \
    \   return false;\n        }\n        $j++;\n    }\n    return true;\n}\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  // Write your code here\n  $arr = merge_sort($arr);\n  $temp_arr = array();\n\
    \  $n = count($arr);\n  for($i=0; $i<$n; $i++){\n    $temp_arr[$i] = $arr[$i];\n\
    \  }\n  $temp_arr[$n] = $arr[0];\n  for($i=0; $i<$n; $i++){\n    if($temp_arr[$i]<=$temp_arr[$i+1]){\n\
    \      continue;\n    }\n    else{\n      return False;\n    }\n  }\n  return\
    \ True;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function merge_sort()\
    \ in /tmp/tmpycerpnlu.php:23\nStack trace:\n#0 /tmp/tmpycerpnlu.php(42): move_one_ball(Array)\n\
    #1 /tmp/tmpycerpnlu.php(46): candidate(Array)\n#2 /tmp/tmpycerpnlu.php(53): test()\n\
    #3 {main}\n  thrown in /tmp/tmpycerpnlu.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  // Write your code here...\n  return sort($arr)==$arr;\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp95sn78ki.php:32\n\
    Stack trace:\n#0 /tmp/tmp95sn78ki.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp95sn78ki.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $array = array_unique($arr);\n    $counter = count($array);\n    $r =\
    \ [];\n    $a = 0;\n    $x = 0;\n    $bool = true;\n    while($counter > 1) {\n\
    \        if($array[$x] > $array[$x+1]) {\n            $r[] = $array[$x+1];\n \
    \           $array[$x+1] = $array[$x];\n            $array[$x] = $r[$a];\n   \
    \         $a++;\n            $x = 0;\n        }\n        else {\n            $x++;\n\
    \        }\n        $counter--;\n    }\n    for($i = 0; $i < count($array); $i++)\
    \ {\n        if($array[$i] > $array[$i+1]) {\n            $bool = false;\n   \
    \     }\n    }\n    if($bool == true) {\n        return \"True\";\n    }\n   \
    \ else {\n        return \"False\";\n    }\n}\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzrazu739.php:58\n\
    Stack trace:\n#0 /tmp/tmpzrazu739.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpzrazu739.php\
    \ on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\t//checking if the array is empty\n\tif(count($arr)==0){\n\t\treturn true;\n\
    \t}\n\t//looping through each element in the array\n\tfor($i=0;$i<count($arr);$i++){\n\
    \t\t//if the first element in the array is greater than the last element\n\t\t\
    //then shifting all elements by one position to the right\n\t\tif($arr[0]>$arr[count($arr)-1]){\n\
    \t\t\t//temporary variable temp to store the last element\n\t\t\t$temp=$arr[count($arr)-1];\n\
    \t\t\t//shifting all elements by one position to the right\n\t\t\tfor($j=count($arr)-1;$j>0;$j--){\n\
    \t\t\t\t$arr[$j]=$arr[$j-1];\n\t\t\t}\n\t\t\t//assigning the first element of\
    \ the array with the last element\n\t\t\t$arr[0]=$temp;\n\t\t}\n\t\t//looping\
    \ through each element of the array\n\t\tfor($k=0;$k<count($arr)-1;$k++){\n\t\t\
    \t//if the current element is greater than the next element\n\t\t\t//then returning\
    \ false\n\t\t\tif($arr[$k]>$arr[$k+1]){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\
    }\n\t}\n\t//returning true if the array is sorted\n\treturn true;\n}\necho move_one_ball([3,\
    \ 4, 5, 1, 2]) ? \"True\":\"False\";\necho \"\\n\";\necho move_one_ball([3, 5,\
    \ 4, 1, 2]) ? \"True\":\"False\";\necho \"\\n\";\necho move_one_ball([]) ? \"\
    True\":\"False\";\necho \"\\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "False\nFalse\nTrue\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp_g75ueqs.php:63\nStack trace:\n#0 /tmp/tmp_g75ueqs.php(70): test()\n\
    #1 {main}\n  thrown in /tmp/tmp_g75ueqs.php on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $num_shifts = 0;\n    $sorted_array = $arr;\n    sort($sorted_array);\n\
    \    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = count($arr)-1;\
    \ $j > $i; $j--) {\n            if ($arr[$j] < $arr[$j-1]) {\n               \
    \ $temp = $arr[$j];\n                $arr[$j] = $arr[$j-1];\n                $arr[$j-1]\
    \ = $temp;\n                $num_shifts++;\n            }\n        }\n    }\n\
    \    if ($num_shifts == 0) {\n        return True;\n    }\n    else {\n      \
    \  return False;\n    }\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj8a1t4zl.php:47\n\
    Stack trace:\n#0 /tmp/tmpj8a1t4zl.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpj8a1t4zl.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    sort($arr);\n    if(empty($arr)) return true;\n    $shift = 0;\n    $left\
    \ = 0;\n    $right = count($arr) - 1;\n    while($left < $right) {\n        if($arr[$left]\
    \ + $shift > $arr[$right]) {\n            return false;\n        }\n        $shift++;\n\
    \        $left++;\n        $right--;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz701h704.php:45\n\
    Stack trace:\n#0 /tmp/tmpz701h704.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpz701h704.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $i = 0;\n  $count = count($arr);\n  while(($i+1) < $count) {\n    if($arr[$i]\
    \ > $arr[$i+1]) {\n      return false;\n    }\n    $i++;\n  }\n  return true;\n\
    }\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn98b_x0f.php:38\n\
    Stack trace:\n#0 /tmp/tmpn98b_x0f.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpn98b_x0f.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $prev = 0;\n    $count = 0;\n    if (count($arr)==0) return True;\n \
    \   foreach ($arr as $index=>$item) {\n        if ($index==0) {\n            $prev\
    \ = $item;\n            continue;\n        }\n        if ($item<$prev) {\n   \
    \         $count++;\n            if ($count>1) return False;\n        }\n    \
    \    $prev = $item;\n    }\n    return True;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\t\n}\n$arr = array(3, 4, 5, 1, 2);\necho \"Expected true: \" . move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho \"Expected false: \" . move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(5, 1, 2, 3, 4);\necho \"Expected true: \" . move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(1, 2, 3, 4, 5);\necho \"Expected true: \" . move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6);\necho \"Expected true: \" . move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(6, 5, 4, 3, 2, 1);\necho \"Expected false: \" . move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(1, 6, 5, 4, 3, 2);\necho \"Expected true: \" . move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(5, 1, 2, 3, 4, 6);\necho \"Expected true: \" . move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(5, 1, 2, 3, 4, 6, 7);\necho \"Expected true: \" . move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(5, 1, 2, 3, 4, 6, 7, 8);\necho \"Expected true: \"\
    \ . move_one_ball($arr) . \"\\n\";\n$arr = array(2, 3, 4, 1, 5);\necho \"Expected\
    \ true: \" . move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\
    \ 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpj22vuxuu.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  // Write your code here\n  // To print results to the standard output you\
    \ can use print\n  // Example: print \"Hello world!\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8fgbl807.php:32\n\
    Stack trace:\n#0 /tmp/tmp8fgbl807.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp8fgbl807.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\tif(sizeof($arr) < 2) return true;\n\t$c = $arr[0];\n\tfor($i = 1; $i <\
    \ sizeof($arr); $i++) {\n\t\tif($arr[$i] < $c) {\n\t\t\t$c = $arr[$i];\n\t\t}\
    \ else if($arr[$i] > $c) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\necho move_one_ball([3, 4, 5, 1, 2]);\necho move_one_ball([3, 5, 4, 1, 2]);\n\
    echo move_one_ball([3, 5, 4, 2, 1]);\necho move_one_ball([1, 2, 3, 4, 5]);\necho\
    \ move_one_ball([5, 4, 3, 2, 1]);\necho move_one_ball([1, 2, 3, 4, 5, 6]);\necho\
    \ move_one_ball([2, 3, 4, 5, 6, 1]);\necho move_one_ball([3, 4, 5, 6, 1, 2]);\n\
    echo move_one_ball([4, 5, 6, 1, 2, 3]);\necho move_one_ball([5, 6, 1, 2, 3, 4]);\n\
    echo move_one_ball([6, 1, 2, 3, 4, 5]);\necho move_one_ball([1, 2, 3, 4, 5, 6,\
    \ 7]);\necho move_one_ball([2, 3, 4, 5, 6, 7, 1]);\necho move_one_ball([3, 4,\
    \ 5, 6, 7, 1, 2]);\necho move_one_ball([4, 5, 6, 7, 1, 2, 3]);\necho move_one_ball([5,\
    \ 6, 7, 1, 2, 3, 4]);\necho move_one_ball([6, 7, 1, 2, 3, 4, 5]);\necho move_one_ball([7,\
    \ 1, 2, 3, 4, 5, 6]);\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_8zsp5x5.php:56\n\
    Stack trace:\n#0 /tmp/tmp_8zsp5x5.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp_8zsp5x5.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  // your code here\n}\necho move_one_ball([3, 4, 5, 1, 2]) . PHP_EOL; //\
    \ true\necho move_one_ball([3, 5, 4, 1, 2]) . PHP_EOL; // false\necho move_one_ball([])\
    \ . PHP_EOL; // true\necho move_one_ball([1, 2, 3, 4, 5]) . PHP_EOL; // true\n\
    echo move_one_ball([5, 4, 3, 2, 1]) . PHP_EOL; // false\necho move_one_ball([1,\
    \ 2, 3, 5, 4]) . PHP_EOL; // true\necho move_one_ball([1, 3, 5, 4, 2]) . PHP_EOL;\
    \ // false\necho move_one_ball([1, 2, 3, 4, 4]) . PHP_EOL; // true\necho move_one_ball([1,\
    \ 2, 2, 3, 4]) . PHP_EOL; // true\necho move_one_ball([3, 2, 1, 2, 3]) . PHP_EOL;\
    \ // false\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n\n\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpyg7hjtkq.php:39\nStack trace:\n#0 /tmp/tmpyg7hjtkq.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmpyg7hjtkq.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)) return True;\n    $last = $arr[0];\n    for($i=1; $i<count($arr);\
    \ $i++){\n        if($arr[$i] >= $last) $last = $arr[$i];\n        else return\
    \ False;\n    }\n    return True;\n}\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3d8mot2h.php:35\n\
    Stack trace:\n#0 /tmp/tmp3d8mot2h.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp3d8mot2h.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    // Your code here\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9gqzxjjt.php:29\n\
    Stack trace:\n#0 /tmp/tmp9gqzxjjt.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp9gqzxjjt.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\tif(empty($arr)) return true;\n\tfor($i=1;$i<count($arr);$i++){\n\t\tif($arr[$i]<$arr[$i-1]){\n\
    \t\t\t$tmp=$arr[$i];\n\t\t\t$arr[$i]=$arr[$i-1];\n\t\t\t$arr[$i-1]=$tmp;\n\t\t\
    \t$i=0;\n\t\t}\n\t}\n\treturn $arr==range(min($arr),max($arr));\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp88e1fy6h.php:39\n\
    Stack trace:\n#0 /tmp/tmp88e1fy6h.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp88e1fy6h.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return true;\n  }\n  $min_val = $arr[0];\n  $max_val\
    \ = $arr[0];\n  $min_idx = 0;\n  $max_idx = 0;\n  $i = 1;\n  while($i < count($arr)){\n\
    \    if($arr[$i] < $min_val){\n      $min_val = $arr[$i];\n      $min_idx = $i;\n\
    \    }\n    if($arr[$i] > $max_val){\n      $max_val = $arr[$i];\n      $max_idx\
    \ = $i;\n    }\n    $i++;\n  }\n  if($min_idx == 0 || $max_idx == count($arr)\
    \ - 1){\n    return true;\n  }\n  return false;\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp885d4klt.php:51\n\
    Stack trace:\n#0 /tmp/tmp885d4klt.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp885d4klt.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $arr_len = count($arr);\n    $in_order = TRUE;\n    for ($i = 0; $i <\
    \ $arr_len; $i++) {\n        if (isset($arr[$i+1])) {\n            if ($arr[$i]\
    \ > $arr[$i+1]) {\n                $in_order = FALSE;\n                break;\n\
    \            }\n        }\n    }\n    return $in_order;\n}\n\necho move_one_ball([3,\
    \ 4, 5, 1, 2]);\necho \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2]);\necho \"\\\
    n\";\necho move_one_ball([4, 5, 3, 2, 1]);\necho \"\\n\";\necho move_one_ball([4,\
    \ 3, 5, 2, 1]);\necho \"\\n\";\necho move_one_ball([4, 3, 5, 1, 2]);\necho \"\\\
    n\";\necho move_one_ball([3, 4, 5, 2, 1]);\necho \"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 4, 5]);\necho \"\\n\";\necho move_one_ball([5, 4, 3, 2, 1]);\necho \"\\\
    n\";\necho move_one_ball([5, 4, 3, 1, 2]);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n\n1\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp23nt1s5o.php:58\n\
    Stack trace:\n#0 /tmp/tmp23nt1s5o.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp23nt1s5o.php\
    \ on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    for($i=0;$i<count($arr);$i++){\n        if($arr[$i]==max($arr)){\n  \
    \          $temp=array_pop($arr);\n            array_unshift($arr,$temp);\n  \
    \      }\n        else{\n            $res[]=$arr[$i];\n        }\n    }\n    if($res==$arr){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n    \n\
    }\necho move_one_ball([3, 4, 5, 1, 2]); //true\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkglh653z.php:45\n\
    Stack trace:\n#0 /tmp/tmpkglh653z.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpkglh653z.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\tif (empty($arr)) {\n\t\treturn True;\n\t}\n\t// write your code here\n\
    }\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8c44r4qe.php:33\n\
    Stack trace:\n#0 /tmp/tmp8c44r4qe.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp8c44r4qe.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\t$arr1=$arr;\n\t$count=count($arr1);\n\t$i=0;\n\twhile($i<$count-1)\n\t\
    {\n\t\tif($arr1[$i]>$arr1[$i+1])\n\t\t{\n\t\t\tarray_push($arr1,$arr1[0]);\n\t\
    \t\tarray_shift($arr1);\n\t\t\t$i++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$i++;\n\t\t\
    }\n\t}\n\tfor($i=0;$i<$count-1;$i++)\n\t{\n\t\tif($arr1[$i]>$arr1[$i+1])\n\t\t\
    {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\necho move_one_ball([3,\
    \ 4, 5, 1, 2]).\"\\n\";\necho move_one_ball([3, 5, 4, 1, 2]).\"\\n\";\necho move_one_ball([3,\
    \ 2, 4, 5, 1]).\"\\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnplg_919.php:56\n\
    Stack trace:\n#0 /tmp/tmpnplg_919.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpnplg_919.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(count($arr)<2)\n        return true;\n    sort($arr);\n    $isRightShift\
    \ = true;\n    $temp = $arr[0];\n    for($i=1;$i<count($arr);$i++){\n        if($temp<=$arr[$i]){\n\
    \            $temp = $arr[$i];\n        }else{\n            $isRightShift = false;\n\
    \            break;\n        }\n    }\n    return $isRightShift;\n}\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp32kpspw4.php:44\n\
    Stack trace:\n#0 /tmp/tmp32kpspw4.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp32kpspw4.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    \n}\n\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2o7k4tu0.php:31\n\
    Stack trace:\n#0 /tmp/tmp2o7k4tu0.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp2o7k4tu0.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return True;\n    }\n    $ele = count($arr);\n\
    \    for($i=0;$i<$ele;$i++){\n        $last = array_pop($arr);\n        array_unshift($arr,$last);\n\
    \        for($j=0;$j<$ele-1;$j++){\n            if($arr[$j]>$arr[$j+1]){\n   \
    \             break;\n            }\n        }\n        if($j==$ele-1){\n    \
    \        return True;\n        }\n    }\n    return False;\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if (empty($arr)) {\n        return True;\n    }\n    $len = count($arr);\n\
    \    $max = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $max) {\n            return False;\n        }\n        $max = max($max, $arr[$i]);\n\
    \    }\n    return True;\n}\n\necho 'Expected: true' . PHP_EOL;\necho 'Got: '\
    \ . move_one_ball([3, 4, 5, 1, 2]) . PHP_EOL;\necho 'Expected: false' . PHP_EOL;\n\
    echo 'Got: ' . move_one_ball([3, 5, 4, 1, 2]) . PHP_EOL;\necho 'Expected: true'\
    \ . PHP_EOL;\necho 'Got: ' . move_one_ball([]) . PHP_EOL;\necho 'Expected: true'\
    \ . PHP_EOL;\necho 'Got: ' . move_one_ball([1, 2, 3, 4, 5]) . PHP_EOL;\necho 'Expected:\
    \ true' . PHP_EOL;\necho 'Got: ' . move_one_ball([4, 1, 2, 3, 5]) . PHP_EOL;\n\
    echo 'Expected: false' . PHP_EOL;\necho 'Got: ' . move_one_ball([5, 1, 2, 3, 4])\
    \ . PHP_EOL;\necho 'Expected: true' . PHP_EOL;\necho 'Got: ' . move_one_ball([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\
    \ 61, 62, 63, 64, 65, 66, 67,\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_hy8gimk.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (count($arr)==0) {\n    return True;\n  }\n  $i = 0;\n  while ($i <\
    \ count($arr)-1) {\n    if ($arr[$i] <= $arr[$i+1]) {\n      $i++;\n    } else\
    \ {\n      $j = $i+1;\n      while ($j < count($arr)) {\n        if ($arr[$j]\
    \ == min($arr)) {\n          $j++;\n        } else {\n          return False;\n\
    \        }\n      }\n      return True;\n    }\n  }\n  return True;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_2y8bblq.php:49\n\
    Stack trace:\n#0 /tmp/tmp_2y8bblq.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_2y8bblq.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $sorted = $arr;\n  sort($sorted);\n  $len = count($arr);\n  if ($len <=\
    \ 1) {\n    return true;\n  }\n  $diff = 0;\n  for ($i = 0; $i < $len; $i++) {\n\
    \    if ($arr[$i] != $sorted[$i]) {\n      $diff++;\n    }\n  }\n  if ($diff ==\
    \ 1) {\n    return true;\n  }\n  return false;\n}\necho move_one_ball([3, 4, 5,\
    \ 1, 2]);\necho \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2]);\necho \"\\n\";\n\
    echo move_one_ball([2, 3, 5, 1, 4]);\necho \"\\n\";\necho move_one_ball([2, 3,\
    \ 5, 1, 4, 6]);\necho \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5]);\necho \"\\\
    n\";\necho move_one_ball([5, 4, 3, 2, 1]);\necho \"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 4, 5, 6]);\necho \"\\n\";\necho move_one_ball([6, 5, 4, 3, 2, 1]);\necho\
    \ \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2, 5]);\necho \"\\n\";\necho move_one_ball([2,\
    \ 3, 4, 5, 1]);\necho \"\\n\";\necho move_one_ball([1, 5, 4, 3, 2]);\necho \"\\\
    n\";\necho move_one_ball([2, 4, 5, 1, 3]);\necho \"\\n\";\necho move_one_ball([5,\
    \ 1, 2, 3, 4]);\necho \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7]);\necho\
    \ \"\\n\";\necho move_one_ball([7, 6, 5, 4, 3, 2, 1]);\necho \"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 4, 5, 6, 7, 8]);\necho \"\\n\";\necho\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvh9hln94.php on line 72\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\tif(!is_array($arr) || empty($arr)) return True;\n\t$len = count($arr);\n\
    \tif($len==1) return True;\n\t$max = max($arr);\n\t$maxIndex = array_search($max,\
    \ $arr);\n\tif($maxIndex == $len-1) return move_one_ball(array_slice($arr, 0,\
    \ $len-1));\n\treturn False;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc0fjihgw.php:36\n\
    Stack trace:\n#0 /tmp/tmpc0fjihgw.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpc0fjihgw.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    return is_array($arr) && count($arr) > 0 &&\n        max($arr) == $arr[count($arr)\
    \ - 1] &&\n        min($arr) == $arr[0];\n}\n\necho move_one_ball([3, 4, 5, 1,\
    \ 2]);\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpycea_qdv.php:33\n\
    Stack trace:\n#0 /tmp/tmpycea_qdv.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpycea_qdv.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\tif(empty($arr)) return true;\n\t$total=0;\n\t$l=count($arr);\n\tfor($i=0;$i<$l;$i++){\n\
    \t\t$total+=$arr[$i];\n\t}\n\t$avg=(float)$total/$l;\n\t$a=max($arr);\n\t$b=min($arr);\n\
    \tif($a==$b || $avg==$a || $avg==$b) return true;\n\treturn false;\n}\nprint_r(move_one_ball([3,\
    \ 4, 5, 1, 2]));\nprint_r(move_one_ball([3, 5, 4, 1, 2]));\nprint_r(move_one_ball([1,1,1,1,1]));\n\
    print_r(move_one_ball([1,2,3,4,5]));\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnfyouevl.php:43\n\
    Stack trace:\n#0 /tmp/tmpnfyouevl.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpnfyouevl.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return true;\n    }\n    $temp = 0;\n    for($i=0;$i<count($arr);$i++){\n\
    \        if($i==0){\n            $temp = $arr[0];\n        }\n        if($i==(count($arr)-1)){\n\
    \            $arr[0] = $temp;\n        }else{\n            $arr[$i] = $arr[$i+1];\n\
    \        }\n    }\n    $sorted = $arr;\n    sort($sorted);\n    return $arr==$sorted;\n\
    }\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjzyoa4_a.php:46\n\
    Stack trace:\n#0 /tmp/tmpjzyoa4_a.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpjzyoa4_a.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $lastIndex = count($arr) - 1;\n    $last = $arr[$lastIndex];\n    for\
    \ ($i = $lastIndex; $i > 0; $i--) {\n        $arr[$i] = $arr[$i - 1];\n    }\n\
    \    $arr[0] = $last;\n    return $arr;\n}\nfunction candidate(...$args) {\n \
    \   return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe5a1o61k.php:35\n\
    Stack trace:\n#0 /tmp/tmpe5a1o61k.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpe5a1o61k.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if (empty($arr)) {\n        return true;\n    }\n    for ($i = 1; $i\
    \ < count($arr); $i++) {\n        if ($arr[$i] < $arr[$i - 1]) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3eri7cgf.php:38\n\
    Stack trace:\n#0 /tmp/tmp3eri7cgf.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp3eri7cgf.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if (count($arr) == 0) {\n        return true;\n    }\n    $temp = $arr[0];\n\
    \    $i = 0;\n    while ($i < count($arr)) {\n        if ($temp > $arr[$i]) {\n\
    \            return false;\n        }\n        $temp = $arr[$i];\n        $i++;\n\
    \    }\n    return true;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqjv1h23p.php:41\n\
    Stack trace:\n#0 /tmp/tmpqjv1h23p.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpqjv1h23p.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $length = count($arr);\n    $temp_min = $arr[0];\n    $temp_idx = 0;\n\
    \    for ($i = 1; $i < $length; $i++) {\n        if ($arr[$i] < $temp_min) {\n\
    \            $temp_min = $arr[$i];\n            $temp_idx = $i;\n        }\n \
    \   }\n    if ($temp_idx == $length - 1) {\n        return True;\n    } else {\n\
    \        return False;\n    }\n}\n\n$array = [3, 4, 5, 1, 2];\n$array2 = [3, 5,\
    \ 4, 1, 2];\necho move_one_ball($array);\necho '<br>';\necho move_one_ball($array2);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplux_nwlx.php:48\n\
    Stack trace:\n#0 /tmp/tmplux_nwlx.php(55): test()\n#1 {main}\n  thrown in /tmp/tmplux_nwlx.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    for($i=0;$i<sizeof($arr);$i++){\n        $sortedArr[$i]=$arr[$i];\n \
    \   }\n    sort($sortedArr);\n    $diffArr=array_diff($arr,$sortedArr);\n    if(sizeof($diffArr)==1){\n\
    \        return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbhwv6vp1.php:37\n\
    Stack trace:\n#0 /tmp/tmpbhwv6vp1.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpbhwv6vp1.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  \n}\n\n\n\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_sj6ymgz.php:33\n\
    Stack trace:\n#0 /tmp/tmp_sj6ymgz.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp_sj6ymgz.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\t// Write your code here\n\t// To print results to the standard output you\
    \ can use print\n\t// Example: print \"Hello world!\";\n}\n\n$test = array(1,\
    \ 2, 3, 4, 5);\nmove_one_ball($test);\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeu15g2px.php:34\n\
    Stack trace:\n#0 /tmp/tmpeu15g2px.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpeu15g2px.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(count($arr)==0) {\n        return true;\n    }\n    $rightMax = -1;\n\
    \    $leftMin = INF;\n    for($i=0; $i<count($arr); $i++) {\n        $j = (count($arr)-1)\
    \ - $i;\n        $rightMax = max($rightMax, $arr[$i]);\n        $leftMin = min($leftMin,\
    \ $arr[$j]);\n        if($rightMax > $arr[$i] || $leftMin < $arr[$j]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\n$arr = [3, 4, 5,\
    \ 1, 2];\nvar_dump(move_one_ball($arr));\nfunction candidate(...$args) {\n   \
    \ return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "bool(false)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprajglyml.php:44\n\
    Stack trace:\n#0 /tmp/tmprajglyml.php(51): test()\n#1 {main}\n  thrown in /tmp/tmprajglyml.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\t$len = count($arr);\n\tif($len < 2) return True;\n\t$min_l = $arr[0];\n\
    \t$min_r = $arr[$len-1];\n\tfor($i=1; $i<$len; $i++) {\n\t\tif($arr[$i] > $min_l)\
    \ $min_l = $arr[$i];\n\t\tif($arr[$len-$i-1] < $min_r) $min_r = $arr[$len-$i-1];\n\
    \t\tif($min_l > $min_r) return False;\n\t}\n\treturn True;\n}\necho move_one_ball([3,\
    \ 4, 5, 1, 2]) . \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2]) . \"\\n\";\necho\
    \ move_one_ball([5, 4, 3, 2, 1]) . \"\\n\";\necho move_one_ball([1, 4, 3, 2, 5])\
    \ . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5]) . \"\\n\";\necho move_one_ball([1,\
    \ 2, 5, 4, 3]) . \"\\n\";\necho move_one_ball([]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpum0p8m3t.php:45\n\
    Stack trace:\n#0 /tmp/tmpum0p8m3t.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpum0p8m3t.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (count($arr)==0) return True;\n  for ($i=0; $i < count($arr)-1; $i++)\
    \ { \n    if ($arr[$i] > $arr[$i+1]) {\n      $min = $arr[$i+1];\n      for ($j=$i+1;\
    \ $j < count($arr); $j++) { \n        if ($arr[$j] < $min) {\n          $min =\
    \ $arr[$j];\n        }\n      }\n      if ($min > $arr[$i]) {\n        return\
    \ True;\n      }\n      else {\n        return False;\n      }\n    }\n  }\n \
    \ return True;\n}\n\nprint_r(move_one_ball([3, 4, 5, 1, 2]));\nprint_r(move_one_ball([3,\
    \ 5, 4, 1, 2]));\nprint_r(move_one_ball([3, 4, 5, 1, 2, 6]));\nprint_r(move_one_ball([3,\
    \ 5, 4, 1, 2, 6]));\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ik9d9v3.php:51\n\
    Stack trace:\n#0 /tmp/tmp7ik9d9v3.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp7ik9d9v3.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (sizeof($arr) < 2) {\n    return true;\n  }\n  $max = $arr[0];\n  $min\
    \ = $arr[0];\n  for ($i = 1; $i < sizeof($arr); $i++) {\n    if ($arr[$i] > $max)\
    \ {\n      $max = $arr[$i];\n    }\n    if ($arr[$i] < $min) {\n      $min = $arr[$i];\n\
    \    }\n  }\n  if ($max - $min == sizeof($arr) - 1) {\n    return true;\n  }\n\
    \  return false;\n}\necho move_one_ball([3, 4, 5, 1, 2]) . \"\\n\";\necho move_one_ball([3,\
    \ 5, 4, 1, 2]) . \"\\n\";\necho move_one_ball([]) . \"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 4, 5]) . \"\\n\";\necho move_one_ball([5, 4, 3, 2, 1]) . \"\\n\";\necho\
    \ move_one_ball([9, 4, 8, 3, 7, 1, 6, 2, 5]) . \"\\n\";\necho move_one_ball([9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]) . \"\\n\";\necho move_one_ball([99, 98, 97, 96, 95,\
    \ 94, 93, 92, 91, 90, 85, 86, 87, 88, 89]) . \"\\n\";\necho move_one_ball([99,\
    \ 98, 97, 96, 95, 94, 93, 92, 91, 90, 84, 85, 86, 87, 88, 89]) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n1\n1\n1\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpeyjs2l1a.php:55\nStack trace:\n#0 /tmp/tmpeyjs2l1a.php(61): test()\n\
    #1 {main}\n  thrown in /tmp/tmpeyjs2l1a.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $len = count($arr);\n    if ($len==0) {\n      return True;\n    }\n\
    \    $min_num=min($arr);\n    $pos=array_search($min_num,$arr);\n    $new_arr=array_slice($arr,$pos);\n\
    \    $new_arr=array_merge($new_arr,array_slice($arr,0,$pos));\n    for ($i=0;\
    \ $i <$len-1 ; $i++) { \n      if ($new_arr[$i]>$new_arr[$i+1]) {\n        return\
    \ False;\n      }\n    }\n    return True;\n}\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $count=count($arr);\n    $i=0;\n    while($i<$count)\n    {\n       \
    \ $first=$arr[$i];\n        $j=$i+1;\n        while($j<$count)\n        {\n  \
    \          $second=$arr[$j];\n            if($first<$second)\n            {\n\
    \                return True;\n            }\n            $j=$j+1;\n        }\n\
    \        $i=$i+1;\n    }\n    return False;\n}\n\necho move_one_ball([3, 4, 5,\
    \ 1, 2]);//True\necho move_one_ball([3, 5, 4, 1, 2]);//False\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "11\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpck6yu1in.php:51\n\
    Stack trace:\n#0 /tmp/tmpck6yu1in.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpck6yu1in.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $flag = 0;\n    $prev = NULL;\n    $arr_count = count($arr);\n    for($i=0;\
    \ $i<$arr_count; $i++) {\n        if($i===0) {\n            $prev = $arr[$i];\n\
    \        }\n        else {\n            if($arr[$i]<$prev) {\n               \
    \ $flag = 1;\n                break;\n            }\n            else {\n    \
    \            $prev = $arr[$i];\n            }\n        }\n    }\n    if($flag\
    \ === 0) {\n        return True;\n    }\n    else {\n        return False;\n \
    \   }\n}\necho move_one_ball([3, 5, 4, 1, 2]);\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzmsvitra.php:52\n\
    Stack trace:\n#0 /tmp/tmpzmsvitra.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpzmsvitra.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return True;\n  }else{\n    $new_arr = $arr;\n  \
    \  $last_value = end($new_arr);\n    array_shift($new_arr);\n    array_push($new_arr,\
    \ $last_value);\n    for($i=0; $i<count($arr); $i++){\n      if($arr[$i] == $new_arr[$i]){\n\
    \        return True;\n      }\n    }\n    return False;\n  }\n}\n\necho move_one_ball([3,\
    \ 4, 5, 1, 2]).\"\\n\";\necho move_one_ball([3, 5, 4, 1, 2]).\"\\n\";\necho move_one_ball([]).\"\
    \\n\";\necho move_one_ball([1, 1, 1, 1, 1]).\"\\n\";\necho move_one_ball([1, 2,\
    \ 3, 4, 5]).\"\\n\";\necho move_one_ball([1, 1, 2, 1, 1]).\"\\n\";\necho move_one_ball([2,\
    \ 1, 1, 1, 1]).\"\\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n1\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmptvps5988.php:52\nStack trace:\n#0 /tmp/tmptvps5988.php(57): test()\n\
    #1 {main}\n  thrown in /tmp/tmptvps5988.php on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (empty($arr)){\n      return True;\n  }\n  if (count($arr) == 1){\n\
    \      return True;\n  }\n  $len = count($arr);\n  for ($i = 0; $i < $len; $i++){\n\
    \      if ($arr[$i] > $arr[$i+1]){\n          return False;\n      }\n  }\n  return\
    \ True;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8hya1z5v.php:42\n\
    Stack trace:\n#0 /tmp/tmp8hya1z5v.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp8hya1z5v.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\t\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpymj_vm42.php:30\n\
    Stack trace:\n#0 /tmp/tmpymj_vm42.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpymj_vm42.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\tif (count($arr) <= 1) {\n\t\treturn true;\n\t}\n\t$smallest_number = min($arr);\n\
    \t$smallest_number_index = array_search($smallest_number, $arr);\n\t$flag = true;\n\
    \tfor ($i = 0; $i < count($arr); $i++) {\n\t\tif ($arr[$i] > $arr[($i + 1) % count($arr)])\
    \ {\n\t\t\t$flag = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif ($flag) {\n\t\treturn\
    \ true;\n\t}\n\t$right_shift_count = ($smallest_number_index + 1) % count($arr);\n\
    \tfor ($i = 0; $i < $right_shift_count; $i++) {\n\t\t$temp = $arr[count($arr)\
    \ - 1];\n\t\tfor ($j = count($arr) - 1; $j > 0; $j--) {\n\t\t\t$arr[$j] = $arr[$j\
    \ - 1];\n\t\t}\n\t\t$arr[0] = $temp;\n\t}\n\t$flag = true;\n\tfor ($i = 0; $i\
    \ < count($arr); $i++) {\n\t\tif ($arr[$i] > $arr[($i + 1) % count($arr)]) {\n\
    \t\t\t$flag = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif ($flag) {\n\t\treturn true;\n\
    \t}\n\treturn false;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppyokwldb.php:62\n\
    Stack trace:\n#0 /tmp/tmppyokwldb.php(69): test()\n#1 {main}\n  thrown in /tmp/tmppyokwldb.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(count($arr)<=1) return true;\n  for($i=1;$i<count($arr);$i++){\n   \
    \ if($arr[$i]<$arr[$i-1]) return false;\n  }\n  return true;\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpplo61yys.php:33\n\
    Stack trace:\n#0 /tmp/tmpplo61yys.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpplo61yys.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $k = 1;\n  for ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] < $arr[$i\
    \ - 1]) {\n      $k++;\n    }\n  }\n  return $k == 1;\n}\necho move_one_ball([3,\
    \ 4, 5, 1, 2]) . \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2]) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd_9o1ytc.php:37\n\
    Stack trace:\n#0 /tmp/tmpd_9o1ytc.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpd_9o1ytc.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $sortedArray = $arr;\n  sort($sortedArray);\n  return ($arr == $sortedArray);\n\
    }\nprint_r(move_one_ball([3, 4, 5, 1, 2]));\necho \"\\n\";\nprint_r(move_one_ball([3,\
    \ 5, 4, 1, 2]));\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8a0_s9p4.php:34\n\
    Stack trace:\n#0 /tmp/tmp8a0_s9p4.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp8a0_s9p4.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  //..your code here\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzpt6xl_7.php:29\n\
    Stack trace:\n#0 /tmp/tmpzpt6xl_7.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpzpt6xl_7.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $start = 0;\n  $end = count($arr) - 1;\n  $k = 0;\n  $visited = array();\n\
    \  while (array_key_exists($start, $visited) && $visited[$start] == 1) {\n   \
    \ $start = ($start + 1) % count($arr);\n  }\n  while ($start != $end) {\n    if\
    \ (array_key_exists($start, $visited) && $visited[$start] == 1) {\n      $start\
    \ = ($start + 1) % count($arr);\n      continue;\n    }\n    if ($arr[$start]\
    \ > $arr[($start + 1) % count($arr)]) {\n      $k++;\n    }\n    $visited[$start]\
    \ = 1;\n    $start = ($start + 1) % count($arr);\n  }\n  if ($k > 1) {\n    return\
    \ false;\n  }\n  return true;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpah3tg32g.php:34\n\
    Stack trace:\n#0 /tmp/tmpah3tg32g.php(46): move_one_ball(Array)\n#1 /tmp/tmpah3tg32g.php(54):\
    \ candidate(Array)\n#2 /tmp/tmpah3tg32g.php(57): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpah3tg32g.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $num_of_moves = 1;\n    foreach ($arr as $key => $value) {\n        if\
    \ ($key == 0) {\n            $last_element = $value;\n        } elseif ($value\
    \ < $last_element) {\n            $num_of_moves++;\n            $last_element\
    \ = $value;\n        }\n    }\n    if ($num_of_moves == 2 || $num_of_moves ==\
    \ 1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    echo move_one_ball([3, 4, 5, 1, 2]);\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4xnesv_1.php:46\n\
    Stack trace:\n#0 /tmp/tmp4xnesv_1.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp4xnesv_1.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\tif (count($arr) === 0) {\n\t\treturn True;\n\t}\n\telseif (count($arr)\
    \ === 1) {\n\t\treturn True;\n\t}\n\telseif (count($arr) === 2) {\n\t\tif ($arr[0]\
    \ <= $arr[1]) {\n\t\t\treturn True;\n\t\t}\n\t\telse {\n\t\t\treturn False;\n\t\
    \t}\n\t}\n\telse {\n\t\t$arr2 = [];\n\t\t$arr3 = [];\n\t\tfor ($i = 1; $i < count($arr);\
    \ $i++) {\n\t\t\tarray_push($arr2, $arr[$i]);\n\t\t}\n\t\tarray_push($arr2, $arr[0]);\n\
    \t\tarray_push($arr3, $arr[0]);\n\t\tfor ($i = 1; $i < count($arr); $i++) {\n\t\
    \t\tarray_push($arr3, $arr[$i]);\n\t\t}\n\t\treturn (move_one_ball($arr2) || move_one_ball($arr3));\n\
    \t}\n}\n\necho move_one_ball([3, 4, 5, 1, 2]);\necho move_one_ball([3, 5, 4, 1,\
    \ 2]);\necho move_one_ball([3, 4, 5, 1, 2, 6]);\necho move_one_ball([1, 2, 3,\
    \ 4, 5, 6]);\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 20480 bytes) in /tmp/tmpjmoir8ck.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if (!count($arr)) {\n        return true;\n    }\n    // for the sorted\
    \ case\n    $sort = $arr;\n    sort($sort);\n    // we move the first element\
    \ to the end\n    $first = array_shift($arr);\n    array_push($arr, $first);\n\
    \    // recursively check if any permutation of the array is equal to the\n  \
    \  // sorted array\n    return in_array($sort, perms($arr));\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function perms() in /tmp/tmpicstvrxv.php:33\n\
    Stack trace:\n#0 /tmp/tmpicstvrxv.php(36): move_one_ball(Array)\n#1 /tmp/tmpicstvrxv.php(40):\
    \ candidate(Array)\n#2 /tmp/tmpicstvrxv.php(47): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpicstvrxv.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(count($arr)<2)\n        return true;\n    $max_number=$arr[0];\n \
    \   $count=0;\n    $flag=0;\n    for($i=1;$i<count($arr);$i++){\n        if($arr[$i]<$max_number)\n\
    \            $count++;\n        else{\n            $max_number=$arr[$i];\n   \
    \         $flag=1;\n        }\n    }\n    if($count==0 && $flag==1)\n        return\
    \ true;\n    else if($count==1)\n        return true;\n    else\n        return\
    \ false;\n}\n\necho move_one_ball([3, 4, 5, 1, 2]).\"\\n\";\necho move_one_ball([3,\
    \ 5, 4, 1, 2]).\"\\n\";\necho move_one_ball([5, 5, 4, 6, 7]).\"\\n\";\necho move_one_ball([9,\
    \ 9, 5, 6, 7]).\"\\n\";\necho move_one_ball([1, 2, 3, 4, 5]).\"\\n\";\necho move_one_ball([2,\
    \ 3, 4, 5, 1]).\"\\n\";\necho move_one_ball([1, 2, 3, 4, 6]).\"\\n\";\necho move_one_ball([4,\
    \ 3, 2, 1, 5]).\"\\n\";\necho move_one_ball([1, 2, 3, 3, 3]).\"\\n\";\necho move_one_ball([1,\
    \ 2, 4, 3, 5]).\"\\n\";\necho move_one_ball([3, 2, 4, 1, 5]).\"\\n\";\necho move_one_ball([4,\
    \ 2, 4, 1, 5]).\"\\n\";\necho move_one_ball([4, 2, 4, 5, 5]).\"\\n\";\necho move_one_ball([5,\
    \ 4, 4, 5, 5]).\"\\n\";\necho move_one_ball([5, 5, 4, 5, 5]).\"\\n\";\necho move_one_ball([9,\
    \ 9, 8, 5, 9]).\"\\n\";\necho move_one_ball([\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpm2fsij44.php on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $count = 0;\n    $answer = true;\n    $x = 0;\n    while($x < count($arr)\
    \ - 1){\n        $first = $arr[$x];\n        $second = $arr[$x + 1];\n       \
    \ if($first > $second){\n            $answer = false;\n            break;\n  \
    \      }\n        $x += 1;\n    }\n    return $answer;\n}\n\necho move_one_ball([3,\
    \ 4, 5, 1, 2]) . PHP_EOL; // true\necho move_one_ball([3, 5, 4, 1, 2]) . PHP_EOL;\
    \ // false\necho move_one_ball([5, 4, 1, 2, 3]) . PHP_EOL; // true\necho move_one_ball([5,\
    \ 3, 4, 1, 2]) . PHP_EOL; // false\necho move_one_ball([1, 2, 3, 4, 5]) . PHP_EOL;\
    \ // true\necho move_one_ball([]) . PHP_EOL; // true\necho move_one_ball([2, 3,\
    \ 4, 1]) . PHP_EOL; // true\necho move_one_ball([2, 3, 4, 3]) . PHP_EOL; // true\n\
    echo move_one_ball([3, 4, 2, 1]) . PHP_EOL; // false\necho move_one_ball([5, 1,\
    \ 2, 3, 4]) . PHP_EOL; // true\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n1\n1\n\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpypi967n_.php:52\nStack trace:\n#0 /tmp/tmpypi967n_.php(59): test()\n\
    #1 {main}\n  thrown in /tmp/tmpypi967n_.php on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(count($arr) === 0) return true;\n  $length = count($arr);\n  if($length\
    \ === 1) return true;\n  $sorted_arr = $arr;\n  sort($sorted_arr);\n  for($i =\
    \ 0; $i < $length; $i++) {\n    if($arr[$i] === $sorted_arr[$i]) {\n      continue;\n\
    \    } else {\n      $index = array_search($arr[$i], $sorted_arr);\n      if($index\
    \ - $i < 0) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\
    \nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6v2j10m1.php:45\n\
    Stack trace:\n#0 /tmp/tmp6v2j10m1.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp6v2j10m1.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\t// Write your code here...\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpif29ucs3.php:30\n\
    Stack trace:\n#0 /tmp/tmpif29ucs3.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpif29ucs3.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $n = count($arr);\n  for($i=0; $i<$n; $i++)\
    \ {\n    $arr[$i] += ($arr[$arr[$i]]%$n)*$n;\n  }\n  for($i=0; $i<$n; $i++) {\n\
    \    $arr[$i] /= $n;\n  }\n  for($i=1; $i<$n; $i++) {\n    if($arr[$i]<$arr[$i-1])\
    \ return false;\n  }\n  return true;\n}\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5piu301l.php:40\n\
    Stack trace:\n#0 /tmp/tmp5piu301l.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp5piu301l.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if (count($arr) == 0) return True;\n    $l = count($arr);\n    $mini\
    \ = $arr[0];\n    for ($i = 1; $i < $l; $i++) {\n        if ($arr[$i] < $mini)\
    \ return False;\n        if ($arr[$i] < $arr[$i - 1]) $mini = $arr[$i];\n    }\n\
    \    return True;\n}\n$arr = [3, 4, 5, 1, 2];\necho move_one_ball($arr);\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxl914xkd.php:38\n\
    Stack trace:\n#0 /tmp/tmpxl914xkd.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpxl914xkd.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if (empty($arr))\n        return True;\n    $rightShift = 0;\n    $len\
    \ = count($arr);\n    $arr_copy = $arr;\n    while (1) {\n        sort($arr_copy);\n\
    \        if ($arr == $arr_copy)\n            return True;\n        $rightShift++;\n\
    \        if ($rightShift == $len)\n            return False;\n        $arr = rotate_right($arr);\n\
    \    }\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function rotate_right()\
    \ in /tmp/tmpc8f5y6b5.php:34\nStack trace:\n#0 /tmp/tmpc8f5y6b5.php(38): move_one_ball(Array)\n\
    #1 /tmp/tmpc8f5y6b5.php(42): candidate(Array)\n#2 /tmp/tmpc8f5y6b5.php(49): test()\n\
    #3 {main}\n  thrown in /tmp/tmpc8f5y6b5.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\t$temp = 0;\n\tfor($i = 0; $i < count($arr); $i++) {\n\t\tif($arr[$i] <\
    \ $temp) {\n\t\t\treturn false;\n\t\t}\n\t\t$temp = $arr[$i];\n\t}\n\treturn true;\n\
    }\n\n$arr = [3, 5, 4, 1, 2];\necho move_one_ball($arr);\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_u5ow69d.php:40\n\
    Stack trace:\n#0 /tmp/tmp_u5ow69d.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp_u5ow69d.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $len = count($arr);\n    if ($len == 0) {\n        return True;\n   \
    \ }\n    $right_most = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n       \
    \ if ($arr[$i] < $right_most) {\n            return False;\n        }\n      \
    \  $right_most = $arr[$i];\n    }\n    return True;\n}\necho move_one_ball([3,\
    \ 4, 5, 1, 2]) . \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2]) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpba1uzykk.php:42\n\
    Stack trace:\n#0 /tmp/tmpba1uzykk.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpba1uzykk.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\tif (count($arr) === 0) return true;\n\t$asort = $arr;\n\t$shift = 0;\n\t\
    for ($i = 0; $i < count($arr); $i++) {\n\t\tif ($arr[$i] === $asort[$i]) continue;\n\
    \t\telse if ($arr[$i] === end($asort)) {\n\t\t\t$shift++;\n\t\t\tarray_unshift($asort,\
    \ array_pop($asort));\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkmg52452.php:44\n\
    Stack trace:\n#0 /tmp/tmpkmg52452.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpkmg52452.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  // Code here\n  if(empty($arr)){\n    return true;\n  }\n  $sorted_arr\
    \ = $arr;\n  sort($sorted_arr);\n  $shift_count = 0;\n  for($i=0; $i<count($arr);\
    \ $i++){\n    $arr = right_shift($arr);\n    if($arr == $sorted_arr){\n      return\
    \ true;\n    }\n  }\n  return false;\n}\n\nfunction candidate(...$args) {\n  \
    \  return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function right_shift()\
    \ in /tmp/tmpeuszq20t.php:30\nStack trace:\n#0 /tmp/tmpeuszq20t.php(39): move_one_ball(Array)\n\
    #1 /tmp/tmpeuszq20t.php(43): candidate(Array)\n#2 /tmp/tmpeuszq20t.php(50): test()\n\
    #3 {main}\n  thrown in /tmp/tmpeuszq20t.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if (empty($arr)) return true;\n    $ind = array_keys($arr, min($arr));\n\
    \    $ind = $ind[0];\n    $chk = true;\n    for ($i = 0; $i < $ind; $i++) {\n\
    \        if ($arr[$i] > $arr[$i + 1]) $chk = false;\n    }\n    if ($chk) return\
    \ true;\n    $chk = true;\n    for ($i = $ind; $i < count($arr) - 1; $i++) {\n\
    \        if ($arr[$i] > $arr[$i + 1]) $chk = false;\n    }\n    if ($chk) return\
    \ true;\n    return false;\n}\necho move_one_ball([3, 4, 5, 1, 2]);\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj7fyzkxz.php:45\n\
    Stack trace:\n#0 /tmp/tmpj7fyzkxz.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpj7fyzkxz.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(!count($arr)) {\n    return True;\n  }\n  $max = max($arr);\n  for($i\
    \ = 0; $i < count($arr); $i++) {\n    if($arr[$i] == $max) {\n      break;\n \
    \   }\n  }\n  return (count($arr) - $i - 1 == $max - 1);\n}\necho move_one_ball([3,\
    \ 4, 5, 1, 2]);\necho \"<br>\";\necho move_one_ball([3, 5, 4, 1, 2]);\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzvf8p4cq.php:41\n\
    Stack trace:\n#0 /tmp/tmpzvf8p4cq.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpzvf8p4cq.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (empty($arr)){\n    return True;\n  } else {\n    $i = 1;\n    $time\
    \ = 0;\n    $lastElement = $arr[0];\n    $numRightShift = 0;\n    while($i < count($arr)){\n\
    \      if ($lastElement > $arr[$i]){\n        $numRightShift++;\n        $lastElement\
    \ = $arr[$i];\n      }\n      $i++;\n    }\n    if ($numRightShift > 2){\n   \
    \   return False;\n    } else {\n      return True;\n    }\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuho2ioe9.php:51\n\
    Stack trace:\n#0 /tmp/tmpuho2ioe9.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpuho2ioe9.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $arr1=$arr;\n    for($i=0;$i<count($arr1);$i++){\n        $j=$i+1;\n\
    \        if($j<count($arr1)){\n            if($arr1[$i]>$arr1[$j]){\n        \
    \        return false;\n            }\n        }\n    }\n    return true;\n}\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptp3r8_pw.php:38\n\
    Stack trace:\n#0 /tmp/tmptp3r8_pw.php(45): test()\n#1 {main}\n  thrown in /tmp/tmptp3r8_pw.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  // Write your code here\n  $count=count($arr);\n  for($i=0;$i<$count;$i++){\n\
    \    if($arr[$i]>$arr[$i+1]){\n      return \"False\";\n    }\n  }\n  return \"\
    True\";\n}\n\necho move_one_ball([3, 4, 5, 1, 2]);\necho move_one_ball([3, 5,\
    \ 4, 1, 2]);\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "FalseFalse\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvldc648w.php:40\n\
    Stack trace:\n#0 /tmp/tmpvldc648w.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpvldc648w.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if (empty($arr)) {\n        return true;\n    }\n    for ($i = 0; $i\
    \ < count($arr) - 1; $i++) {\n        if ($arr[$i] > $arr[$i + 1]) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeaej_ba2.php:38\n\
    Stack trace:\n#0 /tmp/tmpeaej_ba2.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpeaej_ba2.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $arrSorted = $arr;\n  sort($arrSorted);\n  if ($arrSorted == $arr) {\n\
    \    return True;\n  } else {\n    for ($i = 0; $i < count($arr); $i++) {\n  \
    \    $first = array_shift($arr);\n      array_push($arr, $first);\n      if ($arr\
    \ == $arrSorted) {\n        return True;\n      }\n    }\n    return False;\n\
    \  }\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (empty($arr)) return true;\n  $sorted = false;\n  $i = 0;\n  while (!$sorted\
    \ && $i < count($arr)) {\n    $j = $i;\n    while ($j < count($arr) - 1 && $arr[$j]\
    \ <= $arr[$j + 1]) {\n      $j++;\n    }\n    if ($j === count($arr) - 1) $sorted\
    \ = true;\n    else {\n      $temp = $arr[$j];\n      for ($k = $j; $k > 0; $k--)\
    \ {\n        $arr[$k] = $arr[$k - 1];\n      }\n      $arr[0] = $temp;\n    }\n\
    \    $i++;\n  }\n  return $sorted;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphm538upb.php:50\n\
    Stack trace:\n#0 /tmp/tmphm538upb.php(55): test()\n#1 {main}\n  thrown in /tmp/tmphm538upb.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $size = count($arr);\n    if ($size < 1) {\n        return true;\n  \
    \  }\n    $max = max($arr);\n    while (true) {\n        $current = array_shift($arr);\n\
    \        if ($current == $max) {\n            $max = max($arr);\n            if\
    \ ($max < $current) {\n                return true;\n            }\n        }\
    \ else {\n            array_push($arr, $current);\n        }\n    }\n}\necho \"\
    move_one_ball([3, 4, 5, 1, 2])==>\".move_one_ball([3, 4, 5, 1, 2]);\necho \"\\\
    n\\n\";\necho \"move_one_ball([3, 5, 4, 1, 2])==>\".move_one_ball([3, 5, 4, 1,\
    \ 2]);\necho \"\\n\\n\";\necho \"move_one_ball([2, 1])==>\".move_one_ball([2,\
    \ 1]);\necho \"\\n\\n\";\necho \"move_one_ball([1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpksv6jobs.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $sorted = $arr;\n    sort($sorted);\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] != $sorted[$i]) return False;\n    }\n    return\
    \ True;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwezudh_6.php:34\n\
    Stack trace:\n#0 /tmp/tmpwezudh_6.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpwezudh_6.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (count($arr)<=1) {\n    return true;\n  }\n  else {\n    $arr1 = $arr;\n\
    \    $arr2 = $arr;\n    $n = count($arr);\n    $arr1[$n-1] = $arr1[0];\n    for\
    \ ($i=0; $i < $n-1; $i++) { \n      $arr1[$i] = $arr[$i+1];\n    }\n    for ($i=0;\
    \ $i < $n-1; $i++) { \n      $arr2[$i] = $arr1[$i+1];\n    }\n    $arr2[$n-1]\
    \ = $arr1[0];\n    $a1 = implode(\"\", $arr1);\n    $a2 = implode(\"\", $arr2);\n\
    \    $s = implode(\"\", sort($arr));\n    $arr1 = str_split($a1);\n    $arr2 =\
    \ str_split($a2);\n    if ($a1==$s || $a2==$s) {\n      return true;\n    }\n\
    \    else {\n      return false;\n    }\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: implode(): Invalid arguments passed in /tmp/tmpgr7911z1.php\
    \ on line 39\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgr7911z1.php:55\n\
    Stack trace:\n#0 /tmp/tmpgr7911z1.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpgr7911z1.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\tif(count($arr) <= 1) {\n\t\treturn true;\n\t}\n\n\t$index = findMin($arr);\n\
    \t$index = ($index == 0) ? count($arr) - 1 : $index - 1;\n\t//we don't have to\
    \ right shift if the minimum is at the beginning\n\tif($index == 0) {\n\t\treturn\
    \ true;\n\t}\n\t\n\t$shifted = array_merge(array_slice($arr, $index), array_slice($arr,\
    \ 0, $index));\n\treturn isSorted($shifted);\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function findMin() in\
    \ /tmp/tmpwth404zq.php:26\nStack trace:\n#0 /tmp/tmpwth404zq.php(38): move_one_ball(Array)\n\
    #1 /tmp/tmpwth404zq.php(42): candidate(Array)\n#2 /tmp/tmpwth404zq.php(49): test()\n\
    #3 {main}\n  thrown in /tmp/tmpwth404zq.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\t$len = count($arr);\n\tif ($len <= 1) return true;\n\tfor ($i = 0; $i <\
    \ $len - 1; $i++) {\n\t\tif ($arr[$i] > $arr[$i + 1]) {\n\t\t\treturn true;\n\t\
    \t}\n\t}\n\treturn false;\n}\necho move_one_ball([3, 4, 5, 1, 2]) . PHP_EOL;\n\
    echo move_one_ball([3, 5, 4, 1, 2]) . PHP_EOL;\necho move_one_ball([6, 6, 6, 6,\
    \ 6]) . PHP_EOL;\necho move_one_ball([1, 1, 1, 1, 1]) . PHP_EOL;\necho move_one_ball([])\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqqqj0fgn.php:43\n\
    Stack trace:\n#0 /tmp/tmpqqqj0fgn.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpqqqj0fgn.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n}\n\necho move_one_ball([3, 4, 5, 1, 2]);\necho \"\\n\";\necho move_one_ball([3,\
    \ 5, 4, 1, 2]);\necho \"\\n\";\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy282g4ay.php:34\n\
    Stack trace:\n#0 /tmp/tmpy282g4ay.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpy282g4ay.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return true;\n  }\n  $temp = $arr[0];\n  for($i=1;$i<count($arr);$i++){\n\
    \    if($arr[$i]>=$temp){\n      $temp = $arr[$i];\n    }else{\n      return false;\n\
    \    }\n  }\n  return true;\n}\necho move_one_ball([5, 3, 4, 1, 2]);\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzsavhxpx.php:41\n\
    Stack trace:\n#0 /tmp/tmpzsavhxpx.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpzsavhxpx.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $sorted = sort($arr);\n  if($arr == $sorted){\n    return true;\n  }\n\
    \  else{\n    return false;\n  }\n}\necho move_one_ball([3, 4, 5, 1, 2]);\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5vb57_e9.php:38\n\
    Stack trace:\n#0 /tmp/tmp5vb57_e9.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp5vb57_e9.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $len = count($arr);\n    if ($len <= 1) {\n        return true;\n   \
    \ }\n\n    $pos = 0;\n    $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n\
    \        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n            $pos\
    \ = $i;\n        }\n    }\n\n    if ($pos == 0) {\n        return true;\n    }\n\
    \n    for ($i = $pos; $i < $len - 1; $i++) {\n        if ($arr[$i] < $arr[$i +\
    \ 1]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3y2g4mki.php:54\n\
    Stack trace:\n#0 /tmp/tmp3y2g4mki.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp3y2g4mki.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  // Your code here\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6d1wd0ck.php:30\n\
    Stack trace:\n#0 /tmp/tmp6d1wd0ck.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp6d1wd0ck.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $c = count($arr);\n    if ($c == 0) return true;\n    $left = $arr[0];\n\
    \    for ($i = 1; $i < $c; $i++) {\n        if ($arr[$i] < $left) return false;\n\
    \        $left = $arr[$i];\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5t0eg9rh.php:37\n\
    Stack trace:\n#0 /tmp/tmp5t0eg9rh.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp5t0eg9rh.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $min = $arr[0];\n    for($i=1;$i<count($arr);$i++){\n        if($arr[$i]<$min){\n\
    \            return false;\n        }\n        $min = $arr[$i];\n    }\n    return\
    \ true;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpieb9qhpl.php:36\n\
    Stack trace:\n#0 /tmp/tmpieb9qhpl.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpieb9qhpl.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    // Your code here\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7561xfnh.php:30\n\
    Stack trace:\n#0 /tmp/tmp7561xfnh.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp7561xfnh.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(count($arr)<=1)\n        return true;\n    for($i=1;$i<count($arr);$i++){\n\
    \        if($arr[$i]<$arr[$i-1])\n            return false;\n    }\n    return\
    \ true;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmixisqzg.php:35\n\
    Stack trace:\n#0 /tmp/tmpmixisqzg.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpmixisqzg.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (empty($arr)) {\n    return True;\n  }\n  $tmp = $arr;\n  $sum = 0;\n\
    \  $max = $arr[0];\n  for ($i = 0; $i < count($arr); $i++) {\n    if ($arr[$i]\
    \ > $max) {\n      $max = $arr[$i];\n    }\n    $sum += $arr[$i];\n  }\n  $right_shift\
    \ = array_sum($arr) - $max;\n  if ($right_shift === 0) {\n    return True;\n \
    \ }\n  for ($i = 0; $i < count($arr); $i++) {\n    array_push($tmp, array_shift($tmp));\n\
    \    if (array_sum($tmp) == $sum) {\n      return True;\n    }\n  }\n  return\
    \ False;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvqioza06.php:53\n\
    Stack trace:\n#0 /tmp/tmpvqioza06.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpvqioza06.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(!$arr)\n        return true;\n    for($i=1;$i<count($arr);$i++){\n\
    \        if($arr[$i]<$arr[$i-1])\n            return false;\n    }\n    return\
    \ true;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprvkv38hn.php:35\n\
    Stack trace:\n#0 /tmp/tmprvkv38hn.php(42): test()\n#1 {main}\n  thrown in /tmp/tmprvkv38hn.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if (!$arr) return true;\n    $min = $arr[0];\n    $count = 0;\n    foreach\
    \ ($arr as $value) {\n        if ($value < $min) {\n            $count++;\n  \
    \      }\n        $min = min($min, $value);\n    }\n    return $count == 1;\n\
    }\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvqxe3swd.php:41\n\
    Stack trace:\n#0 /tmp/tmpvqxe3swd.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpvqxe3swd.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\tif(count($arr)==0){\n\t\treturn True;\n\t}\n\t$test=$arr;\n\trsort($test);\n\
    \twhile($test!=$arr){\n\t\t$check=0;\n\t\t$i=0;\n\t\twhile($check==0){\n\t\t\t\
    if($arr[$i]==min($arr)){\n\t\t\t\t$check=1;\n\t\t\t}\n\t\t\t$i++;\n\t\t}\n\t\t\
    $arr[$i-1]=0;\n\t\tfor($j=$i-1;$j<count($arr);$j++){\n\t\t\t$arr[$j]=$arr[$j+1];\n\
    \t\t}\n\t\t$arr[count($arr)-1]=min($arr);\n\t\trsort($arr);\n\t}\n\treturn True;\n\
    }\nprint_r(move_one_ball([3, 4, 5, 1, 2]));\nprint_r(move_one_ball([3, 5, 4, 1,\
    \ 2]));\nprint_r(move_one_ball([7, 9, 4, 6, 2, 1, 3, 5, 8]));\nprint_r(move_one_ball([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9]));\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $i = $arr[0];\n    $j = 0;\n    for ($k = 1; $k < count($arr); $k++)\
    \ {\n        if ($arr[$k] > $i) {\n            $i = $arr[$k];\n            $j\
    \ = $k;\n        }\n    }\n    return $j == 0 ? true : false;\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd9bs9ku4.php:37\n\
    Stack trace:\n#0 /tmp/tmpd9bs9ku4.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpd9bs9ku4.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $rotations = 0;\n  for ($i = count($arr) - 1; $i > 0; $i--) {\n    if ($arr[$i]\
    \ < $arr[$i - 1]) {\n      $rotations++;\n    }\n  }\n  return $rotations <= 1;\n\
    }\necho move_one_ball([3, 4, 5, 1, 2]) ? 'true' : 'false';\necho move_one_ball([3,\
    \ 5, 4, 1, 2]) ? 'true' : 'false';\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: truefalse
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (empty($arr)) {\n    return True;\n  }\n  $temp = $arr;\n  sort($temp);\n\
    \  $i = 0;\n  while ($arr[$i] == $temp[$i]) {\n    $i++;\n  }\n  while ($arr[$i]\
    \ == $temp[$i + 1]) {\n    $i++;\n  }\n  if ($i == count($arr) - 1) {\n    return\
    \ True;\n  }\n  return False;\n}\n$arr1 = [3, 4, 5, 1, 2];\n$arr2 = [3, 5, 4,\
    \ 1, 2];\necho(move_one_ball($arr1) . \"\\n\");\necho(move_one_ball($arr2) . \"\
    \\n\");\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2601qgap.php:48\n\
    Stack trace:\n#0 /tmp/tmp2601qgap.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp2601qgap.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(count($arr) == 0) return True;\n    $next = $arr[0];\n    for($i =\
    \ 1; $i < count($arr); $i++) {\n        if($arr[$i] >= $next) $next = $arr[$i];\n\
    \        else return False;\n    }\n    return True;\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjeecm7b5.php:35\n\
    Stack trace:\n#0 /tmp/tmpjeecm7b5.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpjeecm7b5.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    for($i=0;$i<sizeof($arr);$i++){\n        if($arr[$i]!=$i+1){\n      \
    \      return false;\n        }\n    }\n    return true;\n  }\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprttg0ne4.php:35\n\
    Stack trace:\n#0 /tmp/tmprttg0ne4.php(42): test()\n#1 {main}\n  thrown in /tmp/tmprttg0ne4.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return true;\n    }\n    $temp = array_shift($arr);\n\
    \    $arr[] = $temp;\n    foreach($arr as $key => $value){\n        if($value\
    \ < $temp){\n            return false;\n        }\n        $temp = $value;\n \
    \   }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnmi8t703.php:41\n\
    Stack trace:\n#0 /tmp/tmpnmi8t703.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpnmi8t703.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6pofzbhy.php:30\n\
    Stack trace:\n#0 /tmp/tmp6pofzbhy.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp6pofzbhy.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (empty($arr)) {\n    return true;\n  }\n  $len = count($arr);\n  for\
    \ ($i = 0; $i < $len; $i++) {\n    for ($j = 0; $j < $len; $j++) {\n      if ($arr[$i]\
    \ < $arr[$j]) {\n        $temp = $arr[$i];\n        $arr[$i] = $arr[$j];\n   \
    \     $arr[$j] = $temp;\n      }\n    }\n  }\n  if ($arr == $arr) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\necho move_one_ball([3, 5, 4, 1,\
    \ 2]);\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn4nyivya.php:49\n\
    Stack trace:\n#0 /tmp/tmpn4nyivya.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpn4nyivya.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $uniqueArr = array_unique($arr);\n  $result = [];\n  $temp = [];\n  $shiftBy\
    \ = 0;\n  while($shiftBy < count($uniqueArr)) {\n    $temp = [];\n    for($i =\
    \ 0; $i < count($uniqueArr); $i++) {\n      if($i == count($uniqueArr) - 1) {\n\
    \        $newI = 0;\n      } else {\n        $newI = $i + 1;\n      }\n      $temp[$i]\
    \ = $uniqueArr[$newI];\n    }\n    $uniqueArr = $temp;\n    if(!in_array($temp,\
    \ $result)) {\n      $result[] = $temp;\n    }\n    $shiftBy++;\n  }\n  $sortedArr\
    \ = $arr;\n  sort($sortedArr);\n  if(in_array($sortedArr, $result)) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptur21b66.php:59\n\
    Stack trace:\n#0 /tmp/tmptur21b66.php(62): test()\n#1 {main}\n  thrown in /tmp/tmptur21b66.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  // your code here...\n  if (empty($arr)) return True;\n  $size = count($arr);\n\
    \  $min = min($arr);\n  $sort = range($min, $min + $size - 1);\n  $diff = array_diff($sort,\
    \ $arr);\n  return empty($diff);\n}\n\n/*\n  ----TEST CASES----\n  Test cases:\n\
    \  move_one_ball([3, 4, 5, 1, 2])==>True\n  move_one_ball([3, 5, 4, 1, 2])==>False\n\
    \  move_one_ball([])==>True\n  move_one_ball([1, 1, 1, 1, 1])==>True\n  move_one_ball([1,\
    \ 2, 3, 4, 5])==>True\n  move_one_ball([5, 4, 3, 2, 1])==>True\n  move_one_ball([5,\
    \ 5, 5, 5, 5])==>True\n  move_one_ball([4, 5, 1, 2, 3])==>True\n  move_one_ball([1,\
    \ 1, 5, 5, 5])==>True\n  move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\
    \ 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\
    \ 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,\
    \ 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88,\
    \ 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16,\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Unterminated comment starting line 31 in /tmp/tmpv2hqutq9.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if (!$arr) return true;\n    $count = count($arr);\n    $max = $arr[0];\n\
    \    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $max) return false;\n\
    \        $max = max($max, $arr[$i]);\n    }\n    return true;\n}\necho move_one_ball([3,\
    \ 4, 5, 1, 2]) ? 'True' : 'False'; echo \"\\n\";\necho move_one_ball([3, 5, 4,\
    \ 1, 2]) ? 'True' : 'False'; echo \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5])\
    \ ? 'True' : 'False'; echo \"\\n\";\necho move_one_ball([3, 2, 1, 4, 5]) ? 'True'\
    \ : 'False'; echo \"\\n\";\necho move_one_ball([5, 4, 3, 2, 1]) ? 'True' : 'False';\
    \ echo \"\\n\";\necho move_one_ball([5, 4, 3, 2, 1, 6]) ? 'True' : 'False'; echo\
    \ \"\\n\";\necho move_one_ball([5, 4, 1, 3, 2, 6]) ? 'True' : 'False'; echo \"\
    \\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "False\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpb7g4six3.php:43\nStack trace:\n#0 /tmp/tmpb7g4six3.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpb7g4six3.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $sorted = $arr;\n    sort($sorted);\n    if ($arr == $sorted) return\
    \ true;\n    if (count($arr) < 2) return false;\n    $count = 0;\n    while (true)\
    \ {\n        array_unshift($arr, array_pop($arr));\n        $count++;\n      \
    \  if ($arr == $sorted) return true;\n        if ($count == count($arr)) return\
    \ false;\n    }\n}\necho move_one_ball([3, 5, 4, 1, 2]);\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (!count($arr)) return true;\n  $sorted = sort($arr);\n  $map = array_flip($arr);\n\
    \  $idx = $map[min($arr)];\n  $i = 0;\n  while ($i < count($arr)) {\n    if ($i\
    \ == $idx) {\n      $i++;\n      continue;\n    }\n    if ($i == $map[$sorted[$i]])\
    \ {\n      $i++;\n      continue;\n    }\n    if ($i > $map[$sorted[$i]]) {\n\
    \      break;\n    }\n    return false;\n  }\n  return true;\n}\n\nprint_r(move_one_ball([3,\
    \ 4, 5, 1, 2]) . PHP_EOL);\nprint_r(move_one_ball([3, 5, 4, 1, 2]) . PHP_EOL);\n\
    print_r(move_one_ball([]) . PHP_EOL);\nprint_r(move_one_ball([1, 2, 3, 4, 5])\
    \ . PHP_EOL);\nprint_r(move_one_ball([4, 3, 2, 1, 5]) . PHP_EOL);\nprint_r(move_one_ball([5,\
    \ 4, 3, 2, 1]) . PHP_EOL);\nprint_r(move_one_ball([5, 1, 2, 3, 4]) . PHP_EOL);\n\
    print_r(move_one_ball([1, 4, 3, 2, 5]) . PHP_EOL);\nprint_r(move_one_ball([5,\
    \ 2, 3, 4, 1]) . PHP_EOL);\nprint_r(move_one_ball([1, 2, 3, 4, 5, 6]) . PHP_EOL);\n\
    print_r(move_one_ball([6, 5, 4, 3, 2, 1]) . PHP_EOL);\nprint_r(move_one_ball([1,\
    \ 6, 2, 5, 3, 4]) . PHP_EOL);\nprint_r(move_one_ball([1, 5, 2, 6, 3, 4]) . PHP_EOL);\n\
    print_\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphb4z5tgz.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return True;\n    }\n    if(count($arr)==1){\n\
    \        return True;\n    }\n    $first = $arr[0];\n    $min = min($arr);\n \
    \   $pos = array_search($min, $arr);\n    if($pos==count($arr)-1){\n        if($first<$min){\n\
    \            return True;\n        }\n        else{\n            return False;\n\
    \        }\n    }\n    $temp = $arr[count($arr)-1];\n    for($i=count($arr)-1;$i>0;$i--){\n\
    \        $arr[$i] = $arr[$i-1];\n    }\n    $arr[0] = $temp;\n    if($arr[0]<$arr[1]){\n\
    \        return True;\n    }\n    else{\n        return False;\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr98vh23y.php:58\n\
    Stack trace:\n#0 /tmp/tmpr98vh23y.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpr98vh23y.php\
    \ on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\t$count = 0;\n\tfor($i = 0; $i < count($arr); $i++) {\n\t\tif($arr[$i] >\
    \ $arr[$i+1]) {\n\t\t\t$count++;\n\t\t}\n\t}\n\tif($count > 1) {\n\t\treturn false;\n\
    \t}\n\treturn true;\n}\necho move_one_ball([3, 4, 5, 1, 2]);\necho \"<br>\";\n\
    echo move_one_ball([3, 5, 4, 1, 2]);\necho \"<br>\";\necho move_one_ball([5, 4,\
    \ 3, 2, 1]);\necho \"<br>\";\necho move_one_ball([1, 2, 3, 4, 5]);\necho \"<br>\"\
    ;\necho move_one_ball([1, 2, 3, 5, 4]);\necho \"<br>\";\necho move_one_ball([5,\
    \ 1, 2, 3, 4]);\necho \"<br>\";\necho move_one_ball([5, 4, 3, 2, 1]);\necho \"\
    <br>\";\necho move_one_ball([4, 5, 1, 2, 3]);\necho \"<br>\";\necho move_one_ball([3,\
    \ 1, 2, 4, 5]);\necho \"<br>\";\necho move_one_ball([5, 1, 2, 3, 4]);\necho \"\
    <br>\";\necho move_one_ball([5, 4, 3, 2, 1]);\necho \"<br>\";\necho move_one_ball([4,\
    \ 5, 1, 2, 3]);\necho \"<br>\";\necho move_one_ball([3, 1, 2, 4, 5]);\necho \"\
    <br>\";\necho move_one_ball([2, 3, 4, 5, 1]);\necho \"<br>\";\necho move_one_ball([3,\
    \ 1, 2, 4, 5]);\necho \"<br>\";\necho move_one_ball([2, 3, 4, 5, 1]);\necho \"\
    <br>\";\necho move_one_ball([2, 3, 4, 5, 1]);\necho \"<br>\";\necho move_one_ball([3,\
    \ 1, 2, 4, 5]);\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<br><br><br>1<br><br><br><br><br><br><br><br><br><br><br><br><br><br>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpy1omxmzx.php:74\nStack\
    \ trace:\n#0 /tmp/tmpy1omxmzx.php(81): test()\n#1 {main}\n  thrown in /tmp/tmpy1omxmzx.php\
    \ on line 74\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(count($arr)==0) return true;\n  $min = min($arr);\n  $min_index = array_search($min,\
    \ $arr);\n  // echo $min_index;\n  if($min_index == 0) return true;\n  $slice1\
    \ = array_slice($arr, 0, $min_index);\n  $slice2 = array_slice($arr, $min_index,\
    \ count($arr)-$min_index);\n  $new_arr = array_merge($slice2, $slice1);\n  //\
    \ print_r($new_arr);\n  if($new_arr == $arr) return true;\n  for($i=0; $i<$min_index;\
    \ $i++){\n    if($new_arr[$i]>$new_arr[$i+1]) return false;\n  }\n  return true;\n\
    }\necho \"move_one_ball([3, 4, 5, 1, 2])==>\".move_one_ball([3, 4, 5, 1, 2]);\n\
    echo \"<br>\";\necho \"move_one_ball([3, 5, 4, 1, 2])==>\".move_one_ball([3, 5,\
    \ 4, 1, 2]);\necho \"<br>\";\necho \"move_one_ball([5, 4, 3, 2, 1])==>\".move_one_ball([5,\
    \ 4, 3, 2, 1]);\necho \"<br>\";\necho \"move_one_ball([3, 4, 5, 1, 2, 6])==>\"\
    .move_one_ball([3, 4, 5, 1, 2, 6]);\necho \"<br>\";\necho \"move_one_ball([6,\
    \ 4, 5, 1, 2, 3])==>\".move_one_ball([6, 4, 5, 1, 2, 3]);\necho \"<br>\";\necho\
    \ \"move_one_ball([4, 3, 2, 1, 5])==>\".move_one_ball([4, 3, 2, 1, 5]);\necho\
    \ \"<br>\";\necho \"move_one_ball([5, 6, 2, 1, 3, 4])==>\".move_one_ball([5, 6,\
    \ 2\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpuq4ozl27.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\t$check = 1;\n\tif(empty($arr)){\n\t\treturn True;\n\t}\n\tfor($i=0; $i<count($arr)-1;\
    \ $i++){\n\t\tif($arr[$i]>$arr[$i+1]){\n\t\t\t$check = 0;\n\t\t}\n\t}\n\tif($check\
    \ == 1){\n\t\treturn True;\n\t}\n\telse{\n\t\treturn False;\n\t}\n\t\n}\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_1iz78y2.php:44\n\
    Stack trace:\n#0 /tmp/tmp_1iz78y2.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp_1iz78y2.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $n=count($arr);\n    $j=0;\n    for($i=0;$i<$n;$i++){\n        if($arr[$i]==1){\n\
    \            $j=$i;\n            break;\n        }\n    }\n    for($i=$j+1;$i<$n;$i++){\n\
    \        if($arr[$i]==1){\n            return False;\n        }\n    }\n    return\
    \ True;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqp0wlnae.php:44\n\
    Stack trace:\n#0 /tmp/tmpqp0wlnae.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpqp0wlnae.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $size = count($arr);\n  if($size==0) {\n    return true;\n  }\n  for($i=0;\
    \ $i<$size; $i++) {\n    $prev = ($arr[$i-1] ?? $arr[$size-1]);\n    if($arr[$i]\
    \ < $prev) {\n      return false;\n    }\n  }\n  return true;\n}\necho move_one_ball([3,\
    \ 4, 5, 1, 2]);\necho \"<br>\";\necho move_one_ball([3, 5, 4, 1, 2]);\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw02uck28.php:42\n\
    Stack trace:\n#0 /tmp/tmpw02uck28.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpw02uck28.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(count($arr)==0)\n    return True;\n  if(count($arr)==1)\n    return\
    \ True;\n  if(count($arr)==2)\n    return True;\n  else\n  {\n    for($i=0;$i<count($arr);$i++)\n\
    \    {\n      if($arr[$i]<=$arr[$i+1])\n        continue;\n      else\n      \
    \  return False;\n    }\n    return True;\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbu29t704.php:45\n\
    Stack trace:\n#0 /tmp/tmpbu29t704.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpbu29t704.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (count($arr) < 1) return true;\n  $sm = $arr[0];\n  for ($i = 1; $i\
    \ < count($arr); $i++) {\n    if ($arr[$i] > $sm) {\n      $sm = $arr[$i];\n \
    \   } else {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwddx789u.php:39\n\
    Stack trace:\n#0 /tmp/tmpwddx789u.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpwddx789u.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9tzydkqw.php:29\n\
    Stack trace:\n#0 /tmp/tmp9tzydkqw.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp9tzydkqw.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $count = 0;\n    while(!is_sorted($arr)) {\n        $count++;\n     \
    \   array_unshift($arr, array_pop($arr));\n        if($count == count($arr)) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_sorted() in\
    \ /tmp/tmpqk291xjp.php:23\nStack trace:\n#0 /tmp/tmpqk291xjp.php(33): move_one_ball(Array)\n\
    #1 /tmp/tmpqk291xjp.php(37): candidate(Array)\n#2 /tmp/tmpqk291xjp.php(44): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqk291xjp.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  // First we must determine if the array is empty, if so then we return\
    \ true\n  if (empty($arr)){\n    return true;\n  }\n  // Here we determine if\
    \ all elements in the array are equal. If so then we\n  // return true because\
    \ the elements are already sorted in ascending order.\n  elseif (count(array_unique($arr))\
    \ === 1){\n    return true;\n  }\n  // This else statement will run if the array\
    \ is not empty and all elements\n  // of the array are not equal.\n  else {\n\
    \    // Here we create a new array based on the old array where we extract the\n\
    \    // first element of the array and move it to the end of the array.\n    $newArr\
    \ = $arr;\n    $count = count($newArr);\n    $newArr[$count] = $newArr[0];\n \
    \   unset($newArr[0]);\n    // Here we use the array_values() function to reindex\
    \ the array. This is\n    // important so that we don't use string keys.\n   \
    \ $newArr = array_values($newArr);\n    // Here we use the array_values() function\
    \ to reindex the array. This is\n    // important so that we don't use string\
    \ keys.\n    $newArr = array_values($newArr);\n    // Here we check if the new\
    \ array is sorted in ascending order. If so then\n    // we return true because\
    \ we successfully sorted the array by moving the\n    // first element to the\
    \ end of the array. If not then we return false\n    // because the array is not\
    \ sorted and we cannot move the first element to\n    // the end of the array.\n\
    \    if ($newArr === $arr){\n      return true;\n    }\n    else {\n      return\
    \ false;\n    }\n  }\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgex4lupw.php:64\n\
    Stack trace:\n#0 /tmp/tmpgex4lupw.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpgex4lupw.php\
    \ on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  for($i=0;$i<count($arr);$i++){\n    if($arr[$i]>$arr[$i+1]){\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\nmove_one_ball([3, 4, 5, 1, 2]);\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf4a3vs8y.php:36\n\
    Stack trace:\n#0 /tmp/tmpf4a3vs8y.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpf4a3vs8y.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (empty($arr)) return True;\n  $i = 0;\n  $tmp = $arr[0];\n  while ($i\
    \ < count($arr) - 1) {\n    if ($arr[$i] > $arr[$i + 1]) {\n      if ($tmp ==\
    \ $arr[$i + 1]) return False;\n      $tmp = $arr[$i + 1];\n    }\n    $i++;\n\
    \  }\n  return True;\n}\n$arr = [3, 4, 5, 1, 2];\necho move_one_ball($arr).\"\\\
    n\";\n$arr = [3, 5, 4, 1, 2];\necho move_one_ball($arr).\"\\n\";\n$arr = [2, 3,\
    \ 1];\necho move_one_ball($arr).\"\\n\";\n$arr = [1, 2, 3];\necho move_one_ball($arr).\"\
    \\n\";\n$arr = [3, 2, 1];\necho move_one_ball($arr).\"\\n\";\n$arr = [2, 3, 1,\
    \ 2];\necho move_one_ball($arr).\"\\n\";\n$arr = [3, 4, 5, 1, 2, 4];\necho move_one_ball($arr).\"\
    \\n\";\n$arr = [2, 2, 2, 2, 1, 2];\necho move_one_ball($arr).\"\\n\";\n$arr =\
    \ [2, 3, 1, 3, 2];\necho move_one_ball($arr).\"\\n\";\n$arr = [3, 4, 5, 1, 2,\
    \ 4, 4];\necho move_one_ball($arr).\"\\n\";\n$arr = [1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1,\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplselmn8a.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $count=count($arr);\n    $temp=0;\n    for($i=0;$i<$count;$i++){\n  \
    \      for($j=0;$j<$count;$j++){\n            if($arr[$i]<$arr[$j]){\n       \
    \         $temp=$arr[$i];\n                $arr[$i]=$arr[$j];\n              \
    \  $arr[$j]=$temp;\n            }\n        }\n    }\n    $sort=array_values($arr);\n\
    \    print_r($sort);\n}\nmove_one_ball([3, 4, 5, 1, 2]);\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4]\
    \ => 5\n)\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n\
    \    [4] => 5\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps9pk7frj.php:42\n\
    Stack trace:\n#0 /tmp/tmps9pk7frj.php(49): test()\n#1 {main}\n  thrown in /tmp/tmps9pk7frj.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $num_shifts = 0;\n    $arr_len = count($arr);\n    for ($i = 0; $i <\
    \ $arr_len; $i++) {\n        if ($arr[$i] > $arr[$i + 1]) {\n            $num_shifts++;\n\
    \        }\n    }\n    if ($num_shifts == $arr_len) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw765fqr1.php:40\n\
    Stack trace:\n#0 /tmp/tmpw765fqr1.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpw765fqr1.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return true;\n  }\n  while(true){\n    $i = 0;\n\
    \    $flag = true;\n    foreach($arr as $value){\n      if($value > $arr[$i]){\n\
    \        $max = $value;\n        unset($arr[$i]);\n        array_push($arr, $max);\n\
    \        $flag = false;\n        break;\n      }\n      $i++;\n    }\n    if($flag){\n\
    \      return true;\n    }\n  }\n}\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyvw5as8j.php:50\n\
    Stack trace:\n#0 /tmp/tmpyvw5as8j.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpyvw5as8j.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\t$len = count($arr);\n\tif($len == 0) {\n\t\treturn True;\n\t}\n\tif($len\
    \ == 1) {\n\t\treturn True;\n\t}\n\t$element_array = array();\n\t$duplicates =\
    \ array();\n\tforeach($arr as $element) {\n\t\tif(in_array($element, $element_array))\
    \ {\n\t\t\tarray_push($duplicates, $element);\n\t\t}\n\t\tarray_push($element_array,\
    \ $element);\n\t}\n\tif(count($duplicates) != 0) {\n\t\treturn False;\n\t}\n\t\
    sort($element_array);\n\t$right_side = array();\n\t$left_side = array();\n\tfor($i\
    \ = 0; $i < $len; $i++) {\n\t\tif($arr[$i] > $element_array[$len - 1]) {\n\t\t\
    \tarray_push($right_side, $arr[$i]);\n\t\t}\n\t\telse if($arr[$i] < $element_array[0])\
    \ {\n\t\t\tarray_push($left_side, $arr[$i]);\n\t\t}\n\t}\n\t$left_len = count($left_side);\n\
    \t$right_len = count($right_side);\n\tif($left_len == 0 && $right_len == 0) {\n\
    \t\treturn True;\n\t}\n\tif($left_len == 0) {\n\t\tif($right_side[0] == $element_array[0])\
    \ {\n\t\t\treturn True;\n\t\t}\n\t\treturn False;\n\t}\n\tif($right_len == 0)\
    \ {\n\t\tif($left_side[$left_len - 1] == $element_array[$len - 1]) {\n\t\t\treturn\
    \ True;\n\t\t}\n\t\treturn False;\n\t}\n\tif($left_side[$left_len - 1] == $element_array[$len\
    \ - 1] || $right_side[0] == $element_array[0]) {\n\t\treturn True;\n\t}\n\treturn\
    \ False;\n}\necho move_one_ball\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph9gz4vy2.php on line 74\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if (!empty($arr)) {\n        if (count($arr) === 1) {\n            return\
    \ true;\n        }\n        $firstBall = $arr[0];\n        $lastBall = $arr[count($arr)\
    \ - 1];\n        unset($arr[0]);\n        unset($arr[count($arr) - 1]);\n    \
    \    if ($firstBall > $lastBall) {\n            return false;\n        }\n   \
    \     $currentMax = $lastBall;\n        foreach ($arr as $ball) {\n          \
    \  if ($ball < $currentMax) {\n                return false;\n            }\n\
    \            $currentMax = $ball;\n        }\n        return true;\n    }\n  \
    \  return true;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8vyycyj8.php:49\n\
    Stack trace:\n#0 /tmp/tmp8vyycyj8.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp8vyycyj8.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(count($arr) === 0) return true;\n  $left  = $arr[0];\n  $right = end($arr);\n\
    \  for($i = 1; $i < count($arr) - 1; $i++) {\n    if($arr[$i] < $left || $arr[$i]\
    \ > $right) return false;\n    $left = $arr[$i];\n  }\n  return true;\n}\n\nmove_one_ball([3,\
    \ 4, 5, 1, 2]);\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnfrh32yk.php:38\n\
    Stack trace:\n#0 /tmp/tmpnfrh32yk.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpnfrh32yk.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  return true;\n}\n\necho move_one_ball([3, 4, 5, 1, 2]) . \"\\n\";\necho\
    \ move_one_ball([3, 5, 4, 1, 2]) . \"\\n\";\necho move_one_ball([2, 1]) . \"\\\
    n\";\necho move_one_ball([1, 2]) . \"\\n\";\necho move_one_ball([]) . \"\\n\"\
    ;\necho move_one_ball([5, 4, 3, 2, 1]) . \"\\n\";\necho move_one_ball([2, 3, 4,\
    \ 5, 1]) . \"\\n\";\necho move_one_ball([5, 4, 3, 2, 1]) . \"\\n\";\necho move_one_ball([5,\
    \ 4, 3, 1, 2]) . \"\\n\";\necho move_one_ball([5, 4, 3, 2, 1]) . \"\\n\";\necho\
    \ move_one_ball([3, 4, 5, 1, 2]) . \"\\n\";\necho move_one_ball([4, 3, 5, 1, 2])\
    \ . \"\\n\";\necho move_one_ball([4, 3, 2, 1, 5]) . \"\\n\";\necho move_one_ball([1,\
    \ 2, 4, 3, 5]) . \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2]) . \"\\n\";\necho\
    \ move_one_ball([3, 4, 5, 1, 2]) . \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2])\
    \ . \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2]) . \"\\n\";\necho move_one_ball([3,\
    \ 4, 5, 1, 2]) . \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2]) . \"\\n\";\necho\
    \ move_one_ball([3, 4, 5, 1, 2]) . \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2])\
    \ . \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2]) . \"\\n\";\necho move_one_ball([3,\
    \ 4, 5, 1, 2]) .\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp48dgugp9.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $flag = false;\n  $count = 0;\n  $length = count($arr);\n  for($i = 0;\
    \ $i < $length; $i++) {\n    for($j = $i+1; $j < $length; $j++) {\n      if($arr[$i]\
    \ < $arr[$j]){\n        $count++;\n      }\n    }\n  }\n  if($count == 0) {\n\
    \    $flag = true;\n  }\n  else if($count == ($length*($length-1))/2) {\n    $flag\
    \ = true;\n  }\n  return $flag;\n}\n$arr1 = [2, 3, 4, 1];\n$arr2 = [4, 1, 2, 3];\n\
    $arr3 = [3, 4, 5, 1, 2];\n$arr4 = [3, 5, 4, 1, 2];\nprint_r(move_one_ball($arr1).\"\
    \\n\");\nprint_r(move_one_ball($arr2).\"\\n\");\nprint_r(move_one_ball($arr3).\"\
    \\n\");\nprint_r(move_one_ball($arr4).\"\\n\");\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_z4_z6kn.php:54\n\
    Stack trace:\n#0 /tmp/tmp_z4_z6kn.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp_z4_z6kn.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $num_ops = count($arr);\n  $temp = $arr;\n  while(true) {\n    if(count($temp)\
    \ == 0) {\n      return true;\n    }\n    sort($temp);\n    if($temp === $arr)\
    \ {\n      return true;\n    }\n    $temp = array_slice($temp, 1);\n    $num_ops--;\n\
    \    if($num_ops == 0) {\n      return false;\n    }\n  }\n}\n$input = [3, 5,\
    \ 4, 1, 2];\nif(move_one_ball($input)) {\n  echo \"True\\n\";\n} else {\n  echo\
    \ \"False\\n\";\n}\n$input = [3, 4, 5, 1, 2];\nif(move_one_ball($input)) {\n \
    \ echo \"True\\n\";\n} else {\n  echo \"False\\n\";\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "False\nFalse\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5g5t9hbj.php:56\n\
    Stack trace:\n#0 /tmp/tmp5g5t9hbj.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp5g5t9hbj.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4dp0c7zz.php:29\n\
    Stack trace:\n#0 /tmp/tmp4dp0c7zz.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp4dp0c7zz.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\tif(empty($arr)){\n\t\treturn true;\n\t}\n\tsort($arr);\n\t$temp_arr = array_values($arr);\n\
    \tfor($i=0; $i<count($arr); $i++){\n\t\tif($arr[$i] != $temp_arr[$i]){\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn true;\n}\necho move_one_ball([3, 4, 5, 1,\
    \ 2]) . \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfk_z1aig.php:43\n\
    Stack trace:\n#0 /tmp/tmpfk_z1aig.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpfk_z1aig.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if (empty($arr)) {\n        return true;\n    }\n    $pivot = $arr[0];\n\
    \    $left = [];\n    $right = [];\n    for ($i = 1; $i < count($arr); $i++) {\n\
    \        if ($arr[$i] < $pivot) {\n            $left[] = $arr[$i];\n        }\
    \ else {\n            $right[] = $arr[$i];\n        }\n    }\n    for ($i = 0;\
    \ $i < count($left); $i++) {\n        if ($left[$i] > $left[$i + 1]) {\n     \
    \       return false;\n        }\n    }\n    for ($i = 0; $i < count($right);\
    \ $i++) {\n        if ($right[$i] > $right[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq2v7e5h4.php:53\n\
    Stack trace:\n#0 /tmp/tmpq2v7e5h4.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpq2v7e5h4.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $length = count($arr);\n  $i = 0;\n  $count_min = 0;\n  $sum = 0;\n  $count_shift\
    \ = 0;\n  while($i < $length){\n    $min = min($arr);\n    $index_min = array_search($min,\
    \ $arr);\n    if($arr[$index_min] != $arr[$i]){\n      $count_min++;\n    }\n\
    \    if($arr[$i] != $min){\n      $sum += $arr[$i];\n    }\n    $i++;\n  }\n \
    \ if($count_min > 1){\n    return false;\n  }\n  $total = array_sum($arr);\n \
    \ $diff = $total - $sum;\n  if($diff > $length){\n    return false;\n  }\n  return\
    \ true;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa3q3tr67.php:53\n\
    Stack trace:\n#0 /tmp/tmpa3q3tr67.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpa3q3tr67.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) {\n    return true;\n  }\n  $len = count($arr);\n  $count\
    \ = 0;\n  for($i = 0; $i < $len; $i++) {\n    if($arr[$i] > $arr[$i + 1]) {\n\
    \      $count++;\n    }\n  }\n  if($count > 1) {\n    return false;\n  } else\
    \ {\n    return true;\n  }\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvotlygiw.php:43\n\
    Stack trace:\n#0 /tmp/tmpvotlygiw.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpvotlygiw.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $n = count($arr);\n  $i = 0;\n  $moved = false;\n  while ($i < $n - 1)\
    \ {\n    if ($arr[$i] > $arr[$i + 1]) {\n      $temp = $arr[$i];\n      $arr[$i]\
    \ = $arr[$i + 1];\n      $arr[$i + 1] = $temp;\n      $moved = true;\n    }\n\
    \    $i++;\n  }\n  if ($moved) {\n    move_one_ball($arr);\n  }\n  return $arr;\n\
    }\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplih8cqge.php:45\n\
    Stack trace:\n#0 /tmp/tmplih8cqge.php(52): test()\n#1 {main}\n  thrown in /tmp/tmplih8cqge.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(!$arr){\n        return TRUE;\n    }\n    // Write your code here\n\
    }\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_6cspliz.php:32\n\
    Stack trace:\n#0 /tmp/tmp_6cspliz.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp_6cspliz.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(count($arr) === 0){\n        return true;\n    }\n    $mini = min($arr);\n\
    \    if(count($arr) === 1){\n        return $arr[0] === $mini;\n    }\n    $pos\
    \ = array_search($mini, $arr);\n    if($pos === count($arr) - 1){\n        return\
    \ true;\n    }\n    for($i = $pos; $i < count($arr) - 1; $i++){\n        if($arr[$i]\
    \ > $arr[$i + 1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr6qittrq.php:47\n\
    Stack trace:\n#0 /tmp/tmpr6qittrq.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpr6qittrq.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if (empty($arr))\n        return True;\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        $temp = array_slice($arr, 0, $i);\n        $tail = array_slice($arr,\
    \ $i, count($arr));\n        $head = array_shift($tail);\n        array_push($temp,\
    \ $head);\n        if ($temp == $tail)\n            return True;\n    }\n    return\
    \ False;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp65mk2qpu.php:40\n\
    Stack trace:\n#0 /tmp/tmp65mk2qpu.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp65mk2qpu.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $h = [];\n    foreach ($arr as $key => $value) {\n        $h[$value]\
    \ = $key;\n    }\n    asort($h);\n    $min_d = PHP_INT_MAX;\n    $last_d = -PHP_INT_MAX;\n\
    \    $first = true;\n    foreach ($h as $key => $value) {\n        if ($first)\
    \ {\n            $first = false;\n            $last_d = $value;\n            continue;\n\
    \        }\n        $d = $value - $last_d;\n        if ($d > 1) {\n          \
    \  return false;\n        }\n        $min_d = min($min_d, $d);\n        $last_d\
    \ = $value;\n    }\n    return $min_d != PHP_INT_MAX;\n}\n\n$tests = [\n    //\
    \ [[1,2,3], true],\n    // [[1,2,2,3], true],\n    // [[1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpc90hxlvu.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $max = 0;\n    for($i = 0; $i < count($arr); $i++) {\n        if($arr[$i]\
    \ > $max) {\n            $max = $arr[$i];\n        }\n    }\n    if($max == $arr[0])\
    \ {\n        return True;\n    }\n    return False;\n}\n\n$test_array = [3, 5,\
    \ 4, 1, 2];\nprint_r(move_one_ball($test_array));\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5gy_hwze.php:42\n\
    Stack trace:\n#0 /tmp/tmp5gy_hwze.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp5gy_hwze.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)) return True;\n    for($i=0;$i<count($arr);$i++){\n  \
    \      if($arr[$i]>$arr[$i+1]){\n            $arr[$i]=$arr[$i]+$arr[$i+1];\n \
    \           $arr[$i+1]=$arr[$i]-$arr[$i+1];\n            $arr[$i]=$arr[$i]-$arr[$i+1];\n\
    \        }\n    }\n    return True;\n}\n$arr = array(1,2,3,4,5);\necho move_one_ball($arr);\n\
    echo \"<br>\";\n$arr = array(3,4,5,1,2);\necho move_one_ball($arr);\necho \"<br>\"\
    ;\n$arr = array(3,5,4,1,2);\necho move_one_ball($arr);\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpkwba08d4.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $res_arr = $arr;\n    sort($res_arr);\n    $res = true;\n    $i = 0;\n\
    \    while ($res_arr[$i] != $arr[$i]) {\n        $i++;\n    }\n    for ($j = $i;\
    \ $j < count($arr); $j++) {\n        if ($res_arr[$j] != $arr[$j]) {\n       \
    \     $res = false;\n            break;\n        }\n    }\n    return $res;\n\
    }\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3o2l6hx.php:48\n\
    Stack trace:\n#0 /tmp/tmpn3o2l6hx.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpn3o2l6hx.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $sorted = $arr;\n    sort($sorted);\n    $n = count($arr);\n    $k =\
    \ 0;\n    for ($i = 0; $i < $n; $i++) {\n        if ($arr[$i] == $sorted[$k])\
    \ {\n            $k++;\n        }\n    }\n    return $k == $n;\n}\necho move_one_ball([3,\
    \ 4, 5, 1, 2]).\"\\n\";\necho move_one_ball([3, 5, 4, 1, 2]).\"\\n\";\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2g4v6ew3.php:40\n\
    Stack trace:\n#0 /tmp/tmp2g4v6ew3.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp2g4v6ew3.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\tif(empty($arr)) {\n\t\treturn true;\n\t}\n\t\n\t$max = max($arr);\n\tforeach($arr\
    \ as $num) {\n\t\tif($num < $max) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\necho move_one_ball([3, 4, 5, 1, 2]);\necho \"<br>\";\necho move_one_ball([3,\
    \ 5, 4, 1, 2]);\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy2n4yre3.php:42\n\
    Stack trace:\n#0 /tmp/tmpy2n4yre3.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpy2n4yre3.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if (!count($arr)) return true;\n    $min = $arr[0];\n    $count = 0;\n\
    \    foreach ($arr as $value) {\n        if ($value < $min) {\n            $count++;\n\
    \            $min = $value;\n        }\n    }\n    return $count <= 1;\n}\necho\
    \ move_one_ball([3, 4, 5, 1, 2]) . PHP_EOL;\necho move_one_ball([3, 5, 4, 1, 2])\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzwwxovt7.php:43\n\
    Stack trace:\n#0 /tmp/tmpzwwxovt7.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpzwwxovt7.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return True;\n    }\n    for($i=1;$i<count($arr);$i++){\n\
    \        if($arr[$i]<$arr[$i-1]){\n            return False;\n        }\n    }\n\
    \    return True;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplmbj_prs.php:37\n\
    Stack trace:\n#0 /tmp/tmplmbj_prs.php(44): test()\n#1 {main}\n  thrown in /tmp/tmplmbj_prs.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n      return true;\n    }else{\n      $array = $arr;\n\
    \      for($i=0;$i<count($array);$i++){\n        $rotated = rotate_array($array);\n\
    \        if(is_sorted($rotated)){\n          return true;\n        }else{\n  \
    \        $array = $rotated;\n        }\n      }\n      return false;\n    }\n\
    \  }\n  function rotate_array($arr){\n    $array = $arr;\n    $new_first = array_pop($array);\n\
    \    array_unshift($array,$new_first);\n    return $array;\n  }\n  function is_sorted($arr){\n\
    \    $array = $arr;\n    $end = count($array)-1;\n    $start = 0;\n    while($start<$end){\n\
    \      if($array[$start]>$array[$start+1]){\n        return false;\n      }\n\
    \      $start++;\n    }\n    return true;\n  }\n  \n  // sample output:\n  echo\
    \ \"<pre>\";\n  print_r(move_one_ball([3, 4, 5, 1, 2]));\n  print_r(move_one_ball([3,\
    \ 5, 4, 1, 2]));\n  print_r(move_one_ball([3, 5, 4, 1, 2, 3, 2, 1]));\n  print_r(move_one_ball([2,\
    \ 3, 1, 4, 5]));\n  print_r(move_one_ball([]));\n  echo \"</pre>\";\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: <pre>11</pre>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    // Write your code here...\n    $count = count($arr);\n    if($count\
    \ == 0) return true;\n    $maxVal = $arr[0];\n    for($i = 1; $i < $count; $i++){\n\
    \        if($arr[$i] < $maxVal) return false;\n        if($arr[$i] > $maxVal)\
    \ $maxVal = $arr[$i];\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj2v0z9xi.php:38\n\
    Stack trace:\n#0 /tmp/tmpj2v0z9xi.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpj2v0z9xi.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (empty($arr)) {\n    return true;\n  }\n  sort($arr);\n  return $arr[0]\
    \ == 1;\n}\necho move_one_ball([3, 4, 5, 1, 2]) . PHP_EOL;\necho move_one_ball([3,\
    \ 5, 4, 1, 2]) . PHP_EOL;\necho move_one_ball([]) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvp5i0s_o.php:38\n\
    Stack trace:\n#0 /tmp/tmpvp5i0s_o.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpvp5i0s_o.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
