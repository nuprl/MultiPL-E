name: HumanEval_34_unique
language: php
results:
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $r = [];\n    foreach ($l as $k => $e) {\n        if (!in_array($e, $r)) {\n\
    \            $r[] = $e;\n        }\n    }\n    sort($r);\n    return $r;\n}\n\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  // sort list\n    sort($l);\n    // unique list with previous element\n   \
    \ $u = array();\n    $p = null;\n    foreach ($l as $v) {\n        if ($v !==\
    \ $p) {\n            $u[] = $v;\n        }\n        $p = $v;\n    }\n    return\
    \ $u;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\
    \ !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpazlany3u.php:14\n\
    Stack trace:\n#0 /tmp/tmpazlany3u.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpazlany3u.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_unique($l);\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnq96xnkn.php:14\n\
    Stack trace:\n#0 /tmp/tmpnq96xnkn.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpnq96xnkn.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9pjhvqjn.php:13\n\
    Stack trace:\n#0 /tmp/tmp9pjhvqjn.php(16): test()\n#1 {main}\n  thrown in /tmp/tmp9pjhvqjn.php\
    \ on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = merge_sort($l);\n    $arr = [];\n    $prev = $l[0];\n    $arr[] = $prev;\n\
    \    for ($i = 1; $i < count($l); $i++) {\n        if ($l[$i] !== $prev) {\n \
    \           $arr[] = $l[$i];\n            $prev = $l[$i];\n        }\n    }\n\
    \    return $arr;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function merge_sort()\
    \ in /tmp/tmpilledt6l.php:6\nStack trace:\n#0 /tmp/tmpilledt6l.php(20): unique(Array)\n\
    #1 /tmp/tmpilledt6l.php(24): candidate(Array)\n#2 /tmp/tmpilledt6l.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmpilledt6l.php on line 6\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb33mb2rl.php:14\n\
    Stack trace:\n#0 /tmp/tmpb33mb2rl.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpb33mb2rl.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp60q1nl38.php:14\n\
    Stack trace:\n#0 /tmp/tmp60q1nl38.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp60q1nl38.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  return\
    \ array_keys(array_flip($l));\n}\n\n$a = [5, 3, 5, 2, 3, 3, 9, 0, 123];\n$a2 =\
    \ unique($a);\nvar_dump($a2);\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "array(6) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(3)\n  [2]=>\n  int(2)\n \
    \ [3]=>\n  int(9)\n  [4]=>\n  int(0)\n  [5]=>\n  int(123)\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp1a0jw6aa.php:18\nStack trace:\n#0 /tmp/tmp1a0jw6aa.php(21):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1a0jw6aa.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  return\
    \ array_values(array_unique($l));\n}\n\nprint_r(unique([5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123]));\necho \"\\n\";\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => 3\n    [2] => 2\n    [3] => 9\n    [4]\
    \ => 0\n    [5] => 123\n)\n\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpcdecjky1.php:16\nStack trace:\n#0 /tmp/tmpcdecjky1.php(19): test()\n\
    #1 {main}\n  thrown in /tmp/tmpcdecjky1.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_b8l9f1e.php:13\n\
    Stack trace:\n#0 /tmp/tmp_b8l9f1e.php(16): test()\n#1 {main}\n  thrown in /tmp/tmp_b8l9f1e.php\
    \ on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  // TODO\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo4rsiclc.php:14\n\
    Stack trace:\n#0 /tmp/tmpo4rsiclc.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpo4rsiclc.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvpnqwti3.php:14\n\
    Stack trace:\n#0 /tmp/tmpvpnqwti3.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpvpnqwti3.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_unique($l);\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfjff2xzl.php:14\n\
    Stack trace:\n#0 /tmp/tmpfjff2xzl.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpfjff2xzl.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3irg1tx3.php:14\n\
    Stack trace:\n#0 /tmp/tmp3irg1tx3.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp3irg1tx3.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $s = array();\n    foreach ($l as $i) {\n        if (!in_array($i, $s)) {\n\
    \            $s[] = $i;\n        }\n    }\n    sort($s);\n    return $s;\n}\n\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  return\
    \ array_unique($l);\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz115w07i.php:14\n\
    Stack trace:\n#0 /tmp/tmpz115w07i.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpz115w07i.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_unique($l);\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxbmo6ui6.php:14\n\
    Stack trace:\n#0 /tmp/tmpxbmo6ui6.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpxbmo6ui6.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_unique($l);\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkq2e0h3s.php:14\n\
    Stack trace:\n#0 /tmp/tmpkq2e0h3s.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpkq2e0h3s.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpopvcsw6s.php:14\n\
    Stack trace:\n#0 /tmp/tmpopvcsw6s.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpopvcsw6s.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  return\
    \ array_values(array_unique($l));\n}\nfunction candidate(...$args) {\n    return\
    \ unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp40duwhy0.php:13\n\
    Stack trace:\n#0 /tmp/tmp40duwhy0.php(16): test()\n#1 {main}\n  thrown in /tmp/tmp40duwhy0.php\
    \ on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = sorted($l);\n    $u = array();\n    $i = 0;\n    while ($i < count($l)\
    \ - 1) {\n        $u[] = $l[$i];\n        while ($i < count($l) - 1 && $l[$i]\
    \ == $l[$i + 1]) {\n            $i++;\n        }\n        $i++;\n    }\n    if\
    \ ($i == count($l) - 1) {\n        $u[] = $l[$i];\n    }\n    return $u;\n}\n\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sorted() in /tmp/tmp0511yknb.php:6\n\
    Stack trace:\n#0 /tmp/tmp0511yknb.php(23): unique(Array)\n#1 /tmp/tmp0511yknb.php(27):\
    \ candidate(Array)\n#2 /tmp/tmp0511yknb.php(30): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp0511yknb.php on line 6\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  $out\
    \ = [];\n  foreach ($l as $x) {\n    if (!in_array($x, $out)) {\n      $out[]\
    \ = $x;\n    }\n  }\n  sort($out);\n  return $out;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $unique = array();\n    foreach ($l as $element) {\n        if (!in_array($element,\
    \ $unique)) {\n            $unique[] = $element;\n        }\n    }\n    sort($unique);\n\
    \    return $unique;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $s = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $s)) {\n\
    \            $s[] = $v;\n        }\n    }\n    sort($s);\n    return $s;\n}\n\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqkyxkmau.php:14\n\
    Stack trace:\n#0 /tmp/tmpqkyxkmau.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpqkyxkmau.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $result = [];\n    foreach ($l as $item) {\n        if (!in_array($item, $result))\
    \ {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $result = [];\n    foreach ($l as $x) {\n        if (!in_array($x, $result))\
    \ {\n            $result[] = $x;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $n = [];\n    foreach ($l as $v) {\n        if (!in_array($v, $n)) {\n    \
    \        $n[] = $v;\n        }\n    }\n    sort($n);\n    return $n;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = sort($l);\n    $newList = array();\n    $currentItem = null;\n    foreach\
    \ ($l as $item) {\n        if ($item != $currentItem) {\n            $newList[]\
    \ = $item;\n            $currentItem = $item;\n        }\n    }\n    return $newList;\n\
    }\n\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0,\
    \ 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmp89kp610a.php\
    \ on line 9\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp89kp610a.php:23\n\
    Stack trace:\n#0 /tmp/tmp89kp610a.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp89kp610a.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_unique($l);\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ol94q0j.php:14\n\
    Stack trace:\n#0 /tmp/tmp8ol94q0j.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp8ol94q0j.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  return\
    \ array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n    return\
    \ unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2vcn4qu1.php:14\n\
    Stack trace:\n#0 /tmp/tmp2vcn4qu1.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp2vcn4qu1.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7plgdllo.php:14\n\
    Stack trace:\n#0 /tmp/tmp7plgdllo.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp7plgdllo.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $result = [];\n    foreach ($l as $item) {\n        if (!in_array($item, $result))\
    \ {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  return\
    \ array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n    return\
    \ unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpugwk2c2g.php:14\n\
    Stack trace:\n#0 /tmp/tmpugwk2c2g.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpugwk2c2g.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_unique($l);\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4rwtkhuf.php:14\n\
    Stack trace:\n#0 /tmp/tmp4rwtkhuf.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp4rwtkhuf.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $j = 0;\n    for ($i = 0; $i < count($l); $i++) {\n        if ($i == 0 || $l[$i]\
    \ != $l[$i - 1]) {\n            $l[$j] = $l[$i];\n            $j++;\n        }\n\
    \    }\n    return array_slice($l, 0, $j);\n}\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_t7lvalp.php:20\n\
    Stack trace:\n#0 /tmp/tmp_t7lvalp.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp_t7lvalp.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $unique = array();\n    foreach ($l as $item) {\n        if (!in_array($item,\
    \ $unique)) {\n            $unique[] = $item;\n        }\n    }\n    sort($unique);\n\
    \    return $unique;\n}\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaj3ga6hx.php:14\n\
    Stack trace:\n#0 /tmp/tmpaj3ga6hx.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpaj3ga6hx.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsq1zxksf.php:14\n\
    Stack trace:\n#0 /tmp/tmpsq1zxksf.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpsq1zxksf.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $list=array();\n    foreach($l as $v) {\n        if (!in_array($v, $list))\
    \ {\n            $list[]=$v;\n        }\n    }\n    return $list;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ngg77kg.php:20\n\
    Stack trace:\n#0 /tmp/tmp9ngg77kg.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp9ngg77kg.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $ll = [];\n    foreach ($l as $v) {\n        if (!in_array($v, $ll)) {\n  \
    \          $ll[] = $v;\n        }\n    }\n    return $ll;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcjobm3xf.php:20\n\
    Stack trace:\n#0 /tmp/tmpcjobm3xf.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpcjobm3xf.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $s = [];\n    foreach ($l as $value) {\n        if (!in_array($value, $s))\
    \ {\n            $s[] = $value;\n        }\n    }\n    sort($s);\n    return $s;\n\
    }\n\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0,\
    \ 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n    \
    \        $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp055lkrcv.php:14\n\
    Stack trace:\n#0 /tmp/tmp055lkrcv.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp055lkrcv.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  return\
    \ array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n    return\
    \ unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_3vr_2fu.php:14\n\
    Stack trace:\n#0 /tmp/tmp_3vr_2fu.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp_3vr_2fu.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n\
    \            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcmq8c7r.php:14\n\
    Stack trace:\n#0 /tmp/tmprcmq8c7r.php(17): test()\n#1 {main}\n  thrown in /tmp/tmprcmq8c7r.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_unique($l);\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_idsj67o.php:14\n\
    Stack trace:\n#0 /tmp/tmp_idsj67o.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp_idsj67o.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nprint_r(unique([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]));\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => 3\n    [2] => 2\n    [3] => 9\n    [4]\
    \ => 0\n    [5] => 123\n)\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpktd6q5wu.php:15\nStack trace:\n#0 /tmp/tmpktd6q5wu.php(18): test()\n\
    #1 {main}\n  thrown in /tmp/tmpktd6q5wu.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = array();\n    foreach ($l as $e) {\n        $u[$e] = 1;\n    }\n    sort($u);\n\
    \    return array_keys($u);\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ifg7dly.php:19\n\
    Stack trace:\n#0 /tmp/tmp_ifg7dly.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp_ifg7dly.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $s = $l;\n    sort($s);\n    $r = [];\n    foreach ($s as $k => $v) {\n   \
    \     if ($k == 0 || $s[$k - 1] != $v) {\n            $r[] = $v;\n        }\n\
    \    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  $r\
    \ = [];\n  foreach ($l as $v) {\n    if (!in_array($v, $r)) {\n      $r[] = $v;\n\
    \    }\n  }\n  sort($r);\n  return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  $r\
    \ = [];\n  foreach ($l as $x) {\n    if (!in_array($x, $r)) {\n      $r[] = $x;\n\
    \    }\n  }\n  sort($r);\n  return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $n = count($l);\n    $ul = [];\n    for ($i = 0; $i < $n; $i++) {\n       \
    \ if (!in_array($l[$i], $ul)) {\n            $ul[] = $l[$i];\n        }\n    }\n\
    \    sort($ul);\n    return $ul;\n}\n\nfunction candidate(...$args) {\n    return\
    \ unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  $ret\
    \ = array();\n  foreach ($l as $item) {\n    if (!in_array($item, $ret)) {\n \
    \     $ret[] = $item;\n    }\n  }\n  sort($ret);\n  return $ret;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_unique($l);\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdhziwahf.php:14\n\
    Stack trace:\n#0 /tmp/tmpdhziwahf.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpdhziwahf.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  sort($l);\n    $unique = array_unique($l);\n    return $unique;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp26tgqy00.php:16\n\
    Stack trace:\n#0 /tmp/tmp26tgqy00.php(19): test()\n#1 {main}\n  thrown in /tmp/tmp26tgqy00.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  $unique_array\
    \ = array();\n  foreach ($l as $element) {\n    if (in_array($element, $unique_array))\
    \ {\n      continue;\n    }\n    $unique_array[] = $element;\n  }\n  sort($unique_array);\n\
    \  return $unique_array;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $unique = [];\n    foreach ($l as $value) {\n        if (!in_array($value,\
    \ $unique)) {\n            $unique[] = $value;\n        }\n    }\n    sort($unique);\n\
    \    return $unique;\n}\n\n$l = [5, 3, 5, 2, 3, 3, 9, 0, 123];\necho json_encode(unique($l)),\
    \ \"\\n\";\n\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\
    \ !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "[0,2,3,5,9,123]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $ul = array();\n    foreach ($l as $x) {\n        if (! in_array($x, $ul))\
    \ {\n            $ul[] = $x;\n        }\n    }\n    sort($ul);\n    return $ul;\n\
    }\n\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0,\
    \ 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $result = [];\n    foreach ($l as $item) {\n        if (!in_array($item, $result))\
    \ {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n  \
    \  return $result;\n}\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = array();\n    foreach ($l as $item) {\n        if (!in_array($item, $u))\
    \ {\n            $u[] = $item;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0,\
    \ 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  // TODO\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzygi084v.php:14\n\
    Stack trace:\n#0 /tmp/tmpzygi084v.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpzygi084v.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $r = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $r)) {\n    \
    \        $r[] = $e;\n        }\n    }\n    sort($r);\n    return $r;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptfxv_633.php:14\n\
    Stack trace:\n#0 /tmp/tmptfxv_633.php(17): test()\n#1 {main}\n  thrown in /tmp/tmptfxv_633.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  sort($l);\n    return array_values(array_unique($l));\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $res = [];\n    foreach ($l as $item) {\n        if (! in_array($item, $res))\
    \ {\n            $res[] = $item;\n        }\n    }\n    sort($res);\n    return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\
    \ !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    $n = null;\n    $l = asort($l);\n    foreach ($l as $v) {\n \
    \       if ($v != $n) {\n            $u[] = $v;\n            $n = $v;\n      \
    \  }\n    }\n    return $u;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmppgw4senu.php\
    \ on line 9\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppgw4senu.php:23\n\
    Stack trace:\n#0 /tmp/tmppgw4senu.php(26): test()\n#1 {main}\n  thrown in /tmp/tmppgw4senu.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $unique = [];\n    foreach ($l as $num) {\n        if (!in_array($num, $unique))\
    \ {\n            $unique[] = $num;\n        }\n    }\n    sort($unique);\n   \
    \ return $unique;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp97n4o4dd.php:14\n\
    Stack trace:\n#0 /tmp/tmp97n4o4dd.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp97n4o4dd.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $ret = [];\n    foreach ($l as $item) {\n        if (!in_array($item, $ret))\
    \ {\n            $ret[] = $item;\n        }\n    }\n    sort($ret);\n    return\
    \ $ret;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\
    \ !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  $uniques\
    \ = [];\n  foreach ($l as $k => $v) {\n    if (!in_array($v, $uniques)) {\n  \
    \    $uniques[] = $v;\n    }\n  }\n  sort($uniques);\n  return $uniques;\n}\n\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = array();\n    foreach ($l as $n) {\n        $u[$n] = 1;\n    }\n    ksort($u);\n\
    \    return array_keys($u);\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpacgxp7cc.php:13\n\
    Stack trace:\n#0 /tmp/tmpacgxp7cc.php(16): test()\n#1 {main}\n  thrown in /tmp/tmpacgxp7cc.php\
    \ on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2x19pbt1.php:14\n\
    Stack trace:\n#0 /tmp/tmp2x19pbt1.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp2x19pbt1.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return \\array_values(\\array_unique($l));\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6thjk2r1.php:14\n\
    Stack trace:\n#0 /tmp/tmp6thjk2r1.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp6thjk2r1.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $unique_list = [];\n    for ($i = 0; $i < count($l); $i++) {\n        if (!in_array($l[$i],\
    \ $unique_list)) {\n            $unique_list[] = $l[$i];\n        }\n    }\n \
    \   sort($unique_list);\n    return $unique_list;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\n \
    \           $u[] = $v;\n    }\n    sort($u);\n    return $u;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  $b\
    \ = [];\n  foreach ($l as $item) {\n    if (!in_array($item, $b)) {\n      $b[]\
    \ = $item;\n    }\n  }\n  sort($b);\n  return $b;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  return\
    \ implode(',', array_unique(explode(',', $l)));\n}\n\necho unique('5,3,5,2,3,3,9,0,123')\
    \ . PHP_EOL; // 0,2,3,5,9,123\necho unique('1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20')\
    \ . PHP_EOL; // 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20\necho unique('1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20')\
    \ . PHP_EOL; // 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "5,3,2,9,0,123\n1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20\n1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20\n\
    \nWarning: explode() expects parameter 2 to be string, array given in /tmp/tmpaw320opf.php\
    \ on line 6\n\nWarning: array_unique() expects parameter 1 to be array, null given\
    \ in /tmp/tmpaw320opf.php on line 6\n\nWarning: implode(): Invalid arguments passed\
    \ in /tmp/tmpaw320opf.php on line 6\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpaw320opf.php:18\nStack trace:\n#0 /tmp/tmpaw320opf.php(21): test()\n\
    #1 {main}\n  thrown in /tmp/tmpaw320opf.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_unique($l);\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxt2jhg9b.php:14\n\
    Stack trace:\n#0 /tmp/tmpxt2jhg9b.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpxt2jhg9b.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  $new\
    \ = [];\n  foreach ($l as $i) {\n    if (!in_array($i, $new))\n      $new[] =\
    \ $i;\n  }\n  sort($new);\n  return $new;\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  $unique\
    \ = [];\n  foreach ($l as $value) {\n    if (!in_array($value, $unique)) {\n \
    \     $unique[] = $value;\n    }\n  }\n  sort($unique);\n  return $unique;\n}\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $result = [];\n    foreach ($l as $value) {\n        if (!in_array($value,\
    \ $result)) {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7zd9eygi.php:14\n\
    Stack trace:\n#0 /tmp/tmp7zd9eygi.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp7zd9eygi.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  $s\
    \ = [];\n  foreach ($l as $k => $v) {\n    if (!in_array($v, $s)) {\n      $s[]\
    \ = $v;\n    }\n  }\n  sort($s);\n  return $s;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiso8fil9.php:14\n\
    Stack trace:\n#0 /tmp/tmpiso8fil9.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpiso8fil9.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2e5ozm5t.php:14\n\
    Stack trace:\n#0 /tmp/tmp2e5ozm5t.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp2e5ozm5t.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $res = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $res))\
    \ {\n            $res[] = $v;\n        }\n    }\n    sort($res);\n    return $res;\n\
    }\n\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0,\
    \ 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  $r\
    \ = array();\n  foreach ($l as $v) {\n    if (!in_array($v, $r)) {\n      $r[]\
    \ = $v;\n    }\n  }\n  sort($r);\n  return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_unique($l);\n}\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp76j0wa3t.php:13\n\
    Stack trace:\n#0 /tmp/tmp76j0wa3t.php(16): test()\n#1 {main}\n  thrown in /tmp/tmp76j0wa3t.php\
    \ on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph9iur_uv.php:14\n\
    Stack trace:\n#0 /tmp/tmph9iur_uv.php(17): test()\n#1 {main}\n  thrown in /tmp/tmph9iur_uv.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxfec0le9.php:14\n\
    Stack trace:\n#0 /tmp/tmpxfec0le9.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpxfec0le9.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps0k3bfx2.php:14\n\
    Stack trace:\n#0 /tmp/tmps0k3bfx2.php(17): test()\n#1 {main}\n  thrown in /tmp/tmps0k3bfx2.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $array = array();\n    foreach ($l as $item) {\n        $array[$item] = 1;\n\
    \    }\n    ksort($array);\n    return array_keys($array);\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  $u\
    \ = [];\n  foreach ($l as $e) {\n    if (! in_array($e, $u)) {\n      $u[] = $e;\n\
    \    }\n  }\n  sort($u);\n  return $u;\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  if\
    \ (empty($l)) {\n    return $l;\n  }\n  $u = [array_shift($l)];\n  foreach ($l\
    \ as $v) {\n    if (!in_array($v, $u)) {\n      $u[] = $v;\n    }\n  }\n  sort($u);\n\
    \  return $u;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzi5jqo9t.php:14\n\
    Stack trace:\n#0 /tmp/tmpzi5jqo9t.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpzi5jqo9t.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $n = array();\n    foreach ($l as $item) {\n        if (!in_array($item, $n))\
    \ {\n            $n[] = $item;\n        }\n    }\n    sort($n);\n    return $n;\n\
    }\n\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0,\
    \ 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9m1fse67.php:14\n\
    Stack trace:\n#0 /tmp/tmp9m1fse67.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp9m1fse67.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0lze0cx2.php:14\n\
    Stack trace:\n#0 /tmp/tmp0lze0cx2.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp0lze0cx2.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfemf6zf2.php:14\n\
    Stack trace:\n#0 /tmp/tmpfemf6zf2.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpfemf6zf2.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_unique($l);\n}\n\necho(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]));\n\
    echo(\"\\n\");\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm0fzevvv.php:17\n\
    Stack trace:\n#0 /tmp/tmpm0fzevvv.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpm0fzevvv.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnbu1jjja.php:14\n\
    Stack trace:\n#0 /tmp/tmpnbu1jjja.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpnbu1jjja.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_keys(array_flip($l));\n}\n\n$s = [5, 3, 5, 2, 3, 3, 9, 0, 123];\n\
    print_r(unique($s));\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => 3\n    [2] => 2\n    [3] => 9\n    [4]\
    \ => 0\n    [5] => 123\n)\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpwuwrrtzm.php:16\nStack trace:\n#0 /tmp/tmpwuwrrtzm.php(19): test()\n\
    #1 {main}\n  thrown in /tmp/tmpwuwrrtzm.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_unique($l);\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv99ir2nz.php:14\n\
    Stack trace:\n#0 /tmp/tmpv99ir2nz.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpv99ir2nz.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $s = [];\n    foreach ($l as $i) {\n        if (!in_array($i, $s)) {\n    \
    \        $s[] = $i;\n        }\n    }\n    return sort($s);\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ls5020o.php:20\n\
    Stack trace:\n#0 /tmp/tmp8ls5020o.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp8ls5020o.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $ret = [];\n    foreach ($l as $v) {\n        if (!in_array($v, $ret)) {\n\
    \            $ret[] = $v;\n        }\n    }\n    sort($ret);\n    return $ret;\n\
    }\n\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0,\
    \ 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_unique($l);\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph7hrgyj9.php:14\n\
    Stack trace:\n#0 /tmp/tmph7hrgyj9.php(17): test()\n#1 {main}\n  thrown in /tmp/tmph7hrgyj9.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = array();\n    for ($i = 0; $i < count($l); $i++) {\n        if (!in_array($l[$i],\
    \ $u)) {\n            $u[] = $l[$i];\n        }\n    }\n    sort($u);\n    return\
    \ $u;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\
    \ !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $set = [];\n    $new_list = [];\n    foreach ($l as $i) {\n        if (!in_array($i,\
    \ $set)) {\n            $set[] = $i;\n            $new_list[] = $i;\n        }\n\
    \    }\n    sort($new_list);\n    return $new_list;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_unique($l);\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpox67os0j.php:14\n\
    Stack trace:\n#0 /tmp/tmpox67os0j.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpox67os0j.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  $l\
    \ = sort($l);\n  $last = $l[0];\n  $a = array();\n  foreach ($l as $v) {\n   \
    \ if ($v != $last) {\n      $a[] = $v;\n      $last = $v;\n    }\n  }\n  return\
    \ $a;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\
    \ !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpmp445xvw.php\
    \ on line 9\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmp445xvw.php:23\n\
    Stack trace:\n#0 /tmp/tmpmp445xvw.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpmp445xvw.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  $u\
    \ = array();\n  foreach ($l as $e) {\n    if (!in_array($e, $u)) {\n      $u[]\
    \ = $e;\n    }\n  }\n  sort($u);\n  return $u;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp96fd5l97.php:14\n\
    Stack trace:\n#0 /tmp/tmp96fd5l97.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp96fd5l97.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $r = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $r)) {\n    \
    \        $r[] = $e;\n        }\n    }\n    sort($r);\n    return $r;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_unique($l);\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_jjxctbv.php:14\n\
    Stack trace:\n#0 /tmp/tmp_jjxctbv.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp_jjxctbv.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $res = [];\n    foreach ($l as $x) {\n        if (!in_array($x, $res)) {\n\
    \            $res[] = $x;\n        }\n    }\n    sort($res);\n    return $res;\n\
    }\n\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0,\
    \ 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $ul = [];\n    foreach ($l as $item) {\n        if (!in_array($item, $ul))\
    \ {\n            $ul[] = $item;\n        }\n    }\n    sort($ul);\n    return\
    \ $ul;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\
    \ !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwbfcqpbq.php:14\n\
    Stack trace:\n#0 /tmp/tmpwbfcqpbq.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpwbfcqpbq.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n    \
    \        $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  $unique\
    \ = array();\n  for ($i = 0; $i < count($l); $i++) {\n    if (! in_array($l[$i],\
    \ $unique)) {\n      $unique[] = $l[$i];\n    }\n  }\n  sort($unique);\n  return\
    \ $unique;\n}\n\n$l = array(5, 3, 5, 2, 3, 3, 9, 0, 123);\n$ul = unique($l);\n\
    print_r($ul);\necho PHP_EOL;\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4]\
    \ => 9\n    [5] => 123\n)\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $res = array();\n    foreach ($l as $item) {\n        if (!in_array($item,\
    \ $res)) {\n            $res[] = $item;\n        }\n    }\n    sort($res);\n \
    \   return $res;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $unique_array = array_unique($l);\n    sort($unique_array);\n    return $unique_array;\n\
    }\n\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0,\
    \ 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  return\
    \ array_keys(array_flip($l));\n}\n\nfunction candidate(...$args) {\n    return\
    \ unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvj_7zacg.php:14\n\
    Stack trace:\n#0 /tmp/tmpvj_7zacg.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpvj_7zacg.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  return\
    \ array_unique($l);\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptp6nf5b0.php:14\n\
    Stack trace:\n#0 /tmp/tmptp6nf5b0.php(17): test()\n#1 {main}\n  thrown in /tmp/tmptp6nf5b0.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $x = [];\n    for ($i = 0; $i < count($l); $i++) {\n        $x[$i] = $l[$i];\n\
    \    }\n    $x = array_unique($x);\n    sort($x);\n    return $x;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgxvn896w.php:14\n\
    Stack trace:\n#0 /tmp/tmpgxvn896w.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpgxvn896w.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  if\
    \ ($l == null) {\n    return array();\n  }\n  $s = array();\n  foreach ($l as\
    \ $i) {\n    $s[$i] = true;\n  }\n  ksort($s);\n  return array_keys($s);\n}\n\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_keys(array_flip($l));\n}\n\nfunction candidate(...$args) {\n \
    \   return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdx23ze13.php:14\n\
    Stack trace:\n#0 /tmp/tmpdx23ze13.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpdx23ze13.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  return\
    \ array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n    return\
    \ unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8q_upqyc.php:14\n\
    Stack trace:\n#0 /tmp/tmp8q_upqyc.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp8q_upqyc.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $unique = [];\n    $unique_index = 0;\n    for ($i = 0; $i < count($l); $i++)\
    \ {\n        if (!in_array($l[$i], $unique)) {\n            $unique[$unique_index]\
    \ = $l[$i];\n            $unique_index++;\n        }\n    }\n    sort($unique);\n\
    \    return $unique;\n}\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxyyn5ovy.php:14\n\
    Stack trace:\n#0 /tmp/tmpxyyn5ovy.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpxyyn5ovy.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_unique($l);\n}\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyha4dkwo.php:13\n\
    Stack trace:\n#0 /tmp/tmpyha4dkwo.php(16): test()\n#1 {main}\n  thrown in /tmp/tmpyha4dkwo.php\
    \ on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvzmap_3i.php:14\n\
    Stack trace:\n#0 /tmp/tmpvzmap_3i.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpvzmap_3i.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb10hfb4z.php:14\n\
    Stack trace:\n#0 /tmp/tmpb10hfb4z.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpb10hfb4z.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  return\
    \ array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n    return\
    \ unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu66kbk6a.php:14\n\
    Stack trace:\n#0 /tmp/tmpu66kbk6a.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpu66kbk6a.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm1vbu_mc.php:14\n\
    Stack trace:\n#0 /tmp/tmpm1vbu_mc.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpm1vbu_mc.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  $out\
    \ = [];\n  foreach ($l as $item) {\n    if (!in_array($item, $out)) {\n      $out[]\
    \ = $item;\n    }\n  }\n  sort($out);\n  return $out;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  sort($l);\n    return array_unique($l);\n}\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphr5y7mlo.php:14\n\
    Stack trace:\n#0 /tmp/tmphr5y7mlo.php(17): test()\n#1 {main}\n  thrown in /tmp/tmphr5y7mlo.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnmmy59t_.php:14\n\
    Stack trace:\n#0 /tmp/tmpnmmy59t_.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpnmmy59t_.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $o = [];\n    $count = count($l);\n    for ($i = 0; $i < $count; $i++) {\n\
    \        if (!in_array($l[$i], $o)) {\n            $o[] = $l[$i];\n        }\n\
    \    }\n    return $o;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl1pb37yw.php:21\n\
    Stack trace:\n#0 /tmp/tmpl1pb37yw.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpl1pb37yw.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  $u\
    \ = array();\n  foreach ($l as $e) {\n    if (!in_array($e, $u)) {\n      $u[]\
    \ = $e;\n    }\n  }\n  sort($u);\n  return $u;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkqycjvky.php:14\n\
    Stack trace:\n#0 /tmp/tmpkqycjvky.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpkqycjvky.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8qqqb2wf.php:14\n\
    Stack trace:\n#0 /tmp/tmp8qqqb2wf.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp8qqqb2wf.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  $u\
    \ = array();\n  foreach ($l as $v) {\n    if (!in_array($v, $u)) {\n      $u[]\
    \ = $v;\n    }\n  }\n  sort($u);\n  return $u;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  $res\
    \ = [];\n  foreach ($l as $x) {\n    if (!in_array($x, $res)) {\n      $res[]\
    \ = $x;\n    }\n  }\n  sort($res);\n  return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjdcren0m.php:14\n\
    Stack trace:\n#0 /tmp/tmpjdcren0m.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpjdcren0m.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $result = [];\n    foreach ($l as $value) {\n        if (!in_array($value,\
    \ $result)) {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $result = [];\n    for ($i = 0; $i < sizeof($l); $i++) {\n        if (!in_array($l[$i],\
    \ $result)) {\n            $result[] = $l[$i];\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ta3pir8.php:13\n\
    Stack trace:\n#0 /tmp/tmp8ta3pir8.php(16): test()\n#1 {main}\n  thrown in /tmp/tmp8ta3pir8.php\
    \ on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $result = [];\n    foreach ($l as $item) {\n        if (!in_array($item, $result))\
    \ {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $val) {\n        if (!in_array($val, $u)) {\n\
    \            $u[] = $val;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\
    \nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0,\
    \ 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  $u\
    \ = [];\n  foreach ($l as $a) {\n    if (!in_array($a, $u)) {\n      $u[] = $a;\n\
    \    }\n  }\n  sort($u);\n  return $u;\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_unique($l);\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj9gtjsdt.php:14\n\
    Stack trace:\n#0 /tmp/tmpj9gtjsdt.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpj9gtjsdt.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps4s6go5m.php:13\n\
    Stack trace:\n#0 /tmp/tmps4s6go5m.php(16): test()\n#1 {main}\n  thrown in /tmp/tmps4s6go5m.php\
    \ on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  $a\
    \ = [];\n  foreach ($l as $v) {\n    if (!in_array($v, $a)) {\n      $a[] = $v;\n\
    \    }\n  }\n  sort($a);\n  return $a;\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $a = [];\n    foreach ($l as $n) {\n        if (!in_array($n, $a)) {\n    \
    \        $a[] = $n;\n        }\n    }\n    sort($a);\n    return $a;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_unique($l);\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmd0gfytz.php:14\n\
    Stack trace:\n#0 /tmp/tmpmd0gfytz.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpmd0gfytz.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  return\
    \ array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n    return\
    \ unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp37mqq2tj.php:14\n\
    Stack trace:\n#0 /tmp/tmp37mqq2tj.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp37mqq2tj.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $unique_l = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $unique_l))\
    \ {\n            $unique_l[] = $e;\n        }\n    }\n    sort($unique_l);\n \
    \   return $unique_l;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $ret = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $ret)) {\n\
    \            $ret[] = $e;\n        }\n    }\n    sort($ret);\n    return $ret;\n\
    }\n\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0,\
    \ 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $s = array();\n    foreach ($l as $e) {\n        if (!isset($s[$e])) {\n  \
    \          $s[$e] = true;\n        }\n    }\n    ksort($s);\n    return array_keys($s);\n\
    }\n\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0,\
    \ 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $nl = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $nl)) {\n  \
    \          $nl[] = $e;\n        }\n    }\n    sort($nl);\n    return $nl;\n}\n\
    \nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0,\
    \ 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $unique = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $unique))\
    \ {\n            $unique[] = $v;\n        }\n    }\n    sort($unique);\n    return\
    \ $unique;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $ret = [];\n    foreach ($l as $item) {\n        if (!in_array($item, $ret))\
    \ {\n            $ret[] = $item;\n        }\n    }\n    sort($ret);\n    return\
    \ $ret;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\
    \ !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiv1w25ye.php:14\n\
    Stack trace:\n#0 /tmp/tmpiv1w25ye.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpiv1w25ye.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $s = [];\n    foreach ($l as $x) {\n        $s[$x] = 1;\n    }\n    ksort($s);\n\
    \    return array_keys($s);\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $res = array();\n    foreach ($l as $i) {\n        if (!in_array($i, $res))\
    \ {\n            $res[] = $i;\n        }\n    }\n    sort($res);\n    return $res;\n\
    }\n\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0,\
    \ 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  $u\
    \ = array();\n  foreach ($l as $v) {\n    if (!in_array($v, $u)) {\n      $u[]\
    \ = $v;\n    }\n  }\n  sort($u);\n  return $u;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  $a\
    \ = [];\n  foreach ($l as $k => $v) {\n    if (!in_array($v, $a)) {\n      $a[]\
    \ = $v;\n    }\n  }\n  sort($a);\n  return $a;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $a = [];\n    foreach ($l as $v) {\n        if (!in_array($v, $a)) {\n    \
    \        $a[] = $v;\n        }\n    }\n    sort($a);\n    return $a;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $result = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $result))\
    \ {\n            $result[] = $e;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw7jn_y59.php:14\n\
    Stack trace:\n#0 /tmp/tmpw7jn_y59.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpw7jn_y59.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_unique($l);\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv747bujg.php:14\n\
    Stack trace:\n#0 /tmp/tmpv747bujg.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpv747bujg.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $ul = array();\n    foreach ($l as $i) {\n        if (!in_array($i, $ul))\n\
    \            $ul[] = $i;\n    }\n    sort($ul);\n    return $ul;\n}\n\n$l = array(\n\
    \    'test' => 'test',\n    'num' => 10,\n    'bool' => true,\n    'string' =>\
    \ 'string',\n    'empty' => ''\n);\n\nprint_r(unique($l));\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => \n    [1] => string\n    [2] => test\n    [3] => 10\n\
    )\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  return\
    \ array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n    return\
    \ unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdol7qvrg.php:14\n\
    Stack trace:\n#0 /tmp/tmpdol7qvrg.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpdol7qvrg.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  $result\
    \ = [];\n  foreach ($l as $value) {\n    if (!in_array($value, $result)) {\n \
    \     $result[] = $value;\n    }\n  }\n  sort($result);\n  return $result;\n}\n\
    \nprint_r(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]));\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4]\
    \ => 9\n    [5] => 123\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $out = [];\n    foreach ($l as $v) {\n        if (!in_array($v, $out)) {\n\
    \            $out[] = $v;\n        }\n    }\n    sort($out);\n    return $out;\n\
    }\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0,\
    \ 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxadf4r39.php:14\n\
    Stack trace:\n#0 /tmp/tmpxadf4r39.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpxadf4r39.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    for ($i = 0; $i < count($l); $i++) {\n        if (!in_array($l[$i],\
    \ $u)) {\n            $u[] = $l[$i];\n        }\n    }\n    sort($u);\n    return\
    \ $u;\n}\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\
    \ !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $ul = array();\n    foreach ($l as $el) {\n        if (!in_array($el, $ul))\
    \ {\n            $ul[] = $el;\n        }\n    }\n    sort($ul);\n    return $ul;\n\
    }\n\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0,\
    \ 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcsvzkc2.php:14\n\
    Stack trace:\n#0 /tmp/tmprcsvzkc2.php(17): test()\n#1 {main}\n  thrown in /tmp/tmprcsvzkc2.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  $u\
    \ = [];\n  foreach ($l as $item) {\n    if (!in_array($item, $u)) {\n      $u[]\
    \ = $item;\n    }\n  }\n  sort($u);\n  return $u;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  // TODO\n}\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptd81oskb.php:13\n\
    Stack trace:\n#0 /tmp/tmptd81oskb.php(16): test()\n#1 {main}\n  thrown in /tmp/tmptd81oskb.php\
    \ on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $res = [];\n    foreach ($l as $item) {\n        if (!in_array($item, $res))\
    \ {\n            $res[] = $item;\n        }\n    }\n    sort($res);\n    return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\
    \ !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
