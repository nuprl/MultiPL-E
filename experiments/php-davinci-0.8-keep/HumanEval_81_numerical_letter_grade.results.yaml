name: HumanEval_81_numerical_letter_grade
language: php
results:
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $gpa) {\n        if ($gpa > 4.0) {\n        \
    \    array_push($letter_grades, 'A+');\n        } elseif ($gpa > 3.7) {\n    \
    \        array_push($letter_grades, 'A');\n        } elseif ($gpa > 3.3) {\n \
    \           array_push($letter_grades, 'A-');\n        } elseif ($gpa > 3.0) {\n\
    \            array_push($letter_grades, 'B+');\n        } elseif ($gpa > 2.7)\
    \ {\n            array_push($letter_grades, 'B');\n        } elseif ($gpa > 2.3)\
    \ {\n            array_push($letter_grades, 'B-');\n        } elseif ($gpa > 2.0)\
    \ {\n            array_push($letter_grades, 'C+');\n        } elseif ($gpa > 1.7)\
    \ {\n            array_push($letter_grades, 'C');\n        } elseif ($gpa > 1.3)\
    \ {\n            array_push($letter_grades, 'C-');\n        } elseif ($gpa > 1.0)\
    \ {\n            array_push($letter_grades, 'D+');\n        } elseif ($gpa > 0.7)\
    \ {\n            array_push($letter_grades, 'D');\n        } elseif ($gpa > 0.0)\
    \ {\n            array_push($letter_grades, 'D-');\n        } else {\n       \
    \     array_push($letter_grades, 'E');\n        }\n    }\n    return $letter_grades;\n\
    }\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps28hufo8.php:61\n\
    Stack trace:\n#0 /tmp/tmps28hufo8.php(69): test()\n#1 {main}\n  thrown in /tmp/tmps28hufo8.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    for ($i = 0; $i < count($grades); $i++) {\n        $current_grade\
    \ = $grades[$i];\n        if ($current_grade >= 4.0) {\n            array_push($letter_grades,\
    \ 'A+');\n        } else if ($current_grade >= 3.7) {\n            array_push($letter_grades,\
    \ 'A');\n        } else if ($current_grade >= 3.3) {\n            array_push($letter_grades,\
    \ 'A-');\n        } else if ($current_grade >= 3.0) {\n            array_push($letter_grades,\
    \ 'B+');\n        } else if ($current_grade >= 2.7) {\n            array_push($letter_grades,\
    \ 'B');\n        } else if ($current_grade >= 2.3) {\n            array_push($letter_grades,\
    \ 'B-');\n        } else if ($current_grade >= 2.0) {\n            array_push($letter_grades,\
    \ 'C+');\n        } else if ($current_grade >= 1.7) {\n            array_push($letter_grades,\
    \ 'C');\n        } else if ($current_grade >= 1.3) {\n            array_push($letter_grades,\
    \ 'C-');\n        } else if ($current_grade >= 1.0) {\n            array_push($letter_grades,\
    \ 'D+');\n        } else if ($current_grade >= 0.7) {\n            array_push($letter_grades,\
    \ 'D');\n        } else if ($current_grade >= 0.0) {\n            array_push($letter_grades,\
    \ 'D-');\n        } else {\n            array_push($letter_grades, 'E');\n   \
    \     }\n    }\n    return $letter_grades;\n}\n\nvar_dump(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]));\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(5) {\n  [0]=>\n  string(2) \"A+\"\n  [1]=>\n  string(2) \"B+\"\n\
    \  [2]=>\n  string(1) \"C\"\n  [3]=>\n  string(2) \"C+\"\n  [4]=>\n  string(2)\
    \ \"A-\"\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyjm7vg5a.php:64\n\
    Stack trace:\n#0 /tmp/tmpyjm7vg5a.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpyjm7vg5a.php\
    \ on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = array();\n    for ($i = 0; $i < count($grades); $i++) {\n        switch ($grades[$i])\
    \ {\n            case $grades[$i] >= 4.0:\n                array_push($letter_grades,\
    \ \"A+\");\n                break;\n            case $grades[$i] >= 3.7:\n   \
    \             array_push($letter_grades, \"A\");\n                break;\n   \
    \         case $grades[$i] >= 3.3:\n                array_push($letter_grades,\
    \ \"A-\");\n                break;\n            case $grades[$i] >= 3.0:\n   \
    \             array_push($letter_grades, \"B+\");\n                break;\n  \
    \          case $grades[$i] >= 2.7:\n                array_push($letter_grades,\
    \ \"B\");\n                break;\n            case $grades[$i] >= 2.3:\n    \
    \            array_push($letter_grades, \"B-\");\n                break;\n   \
    \         case $grades[$i] >= 2.0:\n                array_push($letter_grades,\
    \ \"C+\");\n                break;\n            case $grades[$i] >= 1.7:\n   \
    \             array_push($letter_grades, \"C\");\n                break;\n   \
    \         case $grades[$i] >= 1.3:\n                array_push($letter_grades,\
    \ \"C-\");\n                break;\n            case $grades[$i] >= 1.0:\n   \
    \             array_push($letter_grades, \"D+\");\n                break;\n  \
    \          case $grades[$i] >= 0.7:\n                array_push($letter_grades,\
    \ \"D\");\n                break;\n            case $grades[$i] >= 0.0:\n    \
    \            array_push($letter_grades, \"D-\");\n                break;\n   \
    \         case $grades[$i] <= 0.0:\n                array_push($letter_grades,\
    \ \"E\");\n                break;\n        }\n    }\n    return $letter_grades;\n\
    }\n\necho \"<pre>\";\nprint_r(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\
    \ //['A+', 'B', 'C\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n\
    \    [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7rck3ppw.php:78\n\
    Stack trace:\n#0 /tmp/tmp7rck3ppw.php(86): test()\n#1 {main}\n  thrown in /tmp/tmp7rck3ppw.php\
    \ on line 78\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades_letter\
    \ = [];\n  foreach ($grades as $grade) {\n    if ($grade > 4.0) {\n      $grades_letter[]\
    \ = 'A+';\n    } elseif ($grade > 3.7) {\n      $grades_letter[] = 'A';\n    }\
    \ elseif ($grade > 3.3) {\n      $grades_letter[] = 'A-';\n    } elseif ($grade\
    \ > 3.0) {\n      $grades_letter[] = 'B+';\n    } elseif ($grade > 2.7) {\n  \
    \    $grades_letter[] = 'B';\n    } elseif ($grade > 2.3) {\n      $grades_letter[]\
    \ = 'B-';\n    } elseif ($grade > 2.0) {\n      $grades_letter[] = 'C+';\n   \
    \ } elseif ($grade > 1.7) {\n      $grades_letter[] = 'C';\n    } elseif ($grade\
    \ > 1.3) {\n      $grades_letter[] = 'C-';\n    } elseif ($grade > 1.0) {\n  \
    \    $grades_letter[] = 'D+';\n    } elseif ($grade > 0.7) {\n      $grades_letter[]\
    \ = 'D';\n    } elseif ($grade > 0.0) {\n      $grades_letter[] = 'D-';\n    }\
    \ else {\n      $grades_letter[] = 'E';\n    }\n  }\n  return $grades_letter;\n\
    }\nprint_r(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A\n    [1] => B\n    [2] => C-\n    [3] => C\n   \
    \ [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe8h0ucoc.php:62\n\
    Stack trace:\n#0 /tmp/tmpe8h0ucoc.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpe8h0ucoc.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letters =\
    \ [];\n    for ($i = 0; $i < count($grades); $i++) {\n        $letter = '';\n\
    \        switch (true) {\n            case $grades[$i] == 4.0:\n             \
    \   $letter = 'A+';\n                break;\n            case $grades[$i] > 3.7:\n\
    \                $letter = 'A';\n                break;\n            case $grades[$i]\
    \ > 3.3:\n                $letter = 'A-';\n                break;\n          \
    \  case $grades[$i] > 3.0:\n                $letter = 'B+';\n                break;\n\
    \            case $grades[$i] > 2.7:\n                $letter = 'B';\n       \
    \         break;\n            case $grades[$i] > 2.3:\n                $letter\
    \ = 'B-';\n                break;\n            case $grades[$i] > 2.0:\n     \
    \           $letter = 'C+';\n                break;\n            case $grades[$i]\
    \ > 1.7:\n                $letter = 'C';\n                break;\n           \
    \ case $grades[$i] > 1.3:\n                $letter = 'C-';\n                break;\n\
    \            case $grades[$i] > 1.0:\n                $letter = 'D+';\n      \
    \          break;\n            case $grades[$i] > 0.7:\n                $letter\
    \ = 'D';\n                break;\n            case $grades[$i] > 0.0:\n      \
    \          $letter = 'D-';\n                break;\n            case $grades[$i]\
    \ == 0.0:\n                $letter = 'E';\n                break;\n        }\n\
    \        array_push($letters, $letter);\n    }\n    return $letters;\n}\n$grades\
    \ = [4.0, 3, 1.7, 2, 3.5];\n$result = numerical_letter_grade($grades);\nprint_r($result);\n\
    \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B\n    [2] => C-\n    [3] => C\n  \
    \  [4] => A-\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t$letters = [];\n\
    \tforeach ($grades as $grade) {\n\t\tif ($grade == 4.0) {\n\t\t\t$letters[] =\
    \ 'A+';\n\t\t} elseif ($grade > 3.7) {\n\t\t\t$letters[] = 'A';\n\t\t} elseif\
    \ ($grade > 3.3) {\n\t\t\t$letters[] = 'A-';\n\t\t} elseif ($grade > 3.0) {\n\t\
    \t\t$letters[] = 'B+';\n\t\t} elseif ($grade > 2.7) {\n\t\t\t$letters[] = 'B';\n\
    \t\t} elseif ($grade > 2.3) {\n\t\t\t$letters[] = 'B-';\n\t\t} elseif ($grade\
    \ > 2.0) {\n\t\t\t$letters[] = 'C+';\n\t\t} elseif ($grade > 1.7) {\n\t\t\t$letters[]\
    \ = 'C';\n\t\t} elseif ($grade > 1.3) {\n\t\t\t$letters[] = 'C-';\n\t\t} elseif\
    \ ($grade > 1.0) {\n\t\t\t$letters[] = 'D+';\n\t\t} elseif ($grade > 0.7) {\n\t\
    \t\t$letters[] = 'D';\n\t\t} elseif ($grade > 0.0) {\n\t\t\t$letters[] = 'D-';\n\
    \t\t} else {\n\t\t\t$letters[] = 'E';\n\t\t}\n\t}\n\treturn $letters;\n}\necho\
    \ implode(', ', numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: A+, B, C-, C, A-
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $letters = ['A+',\
    \ 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E'];\n  $num_grades\
    \ = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\n  $output\
    \ = [];\n  for ($i = 0; $i < count($grades); $i++) {\n    for ($j = 0; $j < count($num_grades);\
    \ $j++) {\n      if ($grades[$i] >= $num_grades[$j]) {\n        $output[] = $letters[$j];\n\
    \        break;\n      }\n    }\n  }\n  return $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi7lyam0k.php:43\n\
    Stack trace:\n#0 /tmp/tmpi7lyam0k.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpi7lyam0k.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $letter_grades\
    \ = [];\n  for ($i = 0; $i < count($grades); $i++) {\n    if ($grades[$i] >= 4.0)\
    \ {\n      array_push($letter_grades, 'A+');\n    } elseif ($grades[$i] >= 3.7)\
    \ {\n      array_push($letter_grades, 'A');\n    } elseif ($grades[$i] >= 3.3)\
    \ {\n      array_push($letter_grades, 'A-');\n    } elseif ($grades[$i] >= 3.0)\
    \ {\n      array_push($letter_grades, 'B+');\n    } elseif ($grades[$i] >= 2.7)\
    \ {\n      array_push($letter_grades, 'B');\n    } elseif ($grades[$i] >= 2.3)\
    \ {\n      array_push($letter_grades, 'B-');\n    } elseif ($grades[$i] >= 2.0)\
    \ {\n      array_push($letter_grades, 'C+');\n    } elseif ($grades[$i] >= 1.7)\
    \ {\n      array_push($letter_grades, 'C');\n    } elseif ($grades[$i] >= 1.3)\
    \ {\n      array_push($letter_grades, 'C-');\n    } elseif ($grades[$i] >= 1.0)\
    \ {\n      array_push($letter_grades, 'D+');\n    } elseif ($grades[$i] >= 0.7)\
    \ {\n      array_push($letter_grades, 'D');\n    } elseif ($grades[$i] >= 0.0)\
    \ {\n      array_push($letter_grades, 'D-');\n    } else {\n      array_push($letter_grades,\
    \ 'E');\n    }\n  }\n  return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpds9i8q5e.php:62\n\
    Stack trace:\n#0 /tmp/tmpds9i8q5e.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpds9i8q5e.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // TODO\n\
    }\nprint_r(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])); // Should be ['A+',\
    \ 'B', 'C-', 'C', 'A-']\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnz459crn.php:33\n\
    Stack trace:\n#0 /tmp/tmpnz459crn.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpnz459crn.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqb4hcz5q.php:61\n\
    Stack trace:\n#0 /tmp/tmpqb4hcz5q.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpqb4hcz5q.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t$letters = [];\n\
    \t$c = count($grades);\n\tfor ($i = 0; $i < $c; $i++) {\n\t\t$g = $grades[$i];\n\
    \t\tif ($g > 3.7) {\n\t\t\t$l = 'A+';\n\t\t} else if ($g > 3.3) {\n\t\t\t$l =\
    \ 'A';\n\t\t} else if ($g > 3.0) {\n\t\t\t$l = 'A-';\n\t\t} else if ($g > 2.7)\
    \ {\n\t\t\t$l = 'B+';\n\t\t} else if ($g > 2.3) {\n\t\t\t$l = 'B';\n\t\t} else\
    \ if ($g > 2.0) {\n\t\t\t$l = 'B-';\n\t\t} else if ($g > 1.7) {\n\t\t\t$l = 'C+';\n\
    \t\t} else if ($g > 1.3) {\n\t\t\t$l = 'C';\n\t\t} else if ($g > 1.0) {\n\t\t\t\
    $l = 'C-';\n\t\t} else if ($g > 0.7) {\n\t\t\t$l = 'D+';\n\t\t} else if ($g >\
    \ 0.0) {\n\t\t\t$l = 'D';\n\t\t} else if ($g >= 0.0) {\n\t\t\t$l = 'D-';\n\t\t\
    } else {\n\t\t\t$l = 'E';\n\t\t}\n\t\t$letters[] = $l;\n\t}\n\treturn $letters;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc3sxjwvh.php:65\n\
    Stack trace:\n#0 /tmp/tmpc3sxjwvh.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpc3sxjwvh.php\
    \ on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n$letters = array(\n\
    \     'A+' => 4.0,\n     'A' => 3.7,\n     'A-' => 3.3,\n     'B+' => 3.0,\n \
    \    'B' => 2.7,\n     'B-' => 2.3,\n     'C+' => 2.0,\n     'C' => 1.7,\n   \
    \  'C-' => 1.3,\n     'D+' => 1.0,\n     'D' => 0.7,\n     'D-' => 0.0,\n    \
    \ 'E' => 0.0\n);\n$gpas = array_values($grades);\n$letter_grade = array();\nforeach\
    \ ($gpas as $grade) {\n     foreach ($letters as $letter => $gpa) {\n        \
    \  if ($grade > $gpa) {\n               $letter_grade[] = $letter;\n         \
    \      break;\n          }\n     }\n}\nreturn $letter_grade;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd4fapfby.php:57\n\
    Stack trace:\n#0 /tmp/tmpd4fapfby.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpd4fapfby.php\
    \ on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letters =\
    \ ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E'];\n\
    \    $numericals = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0,\
    \ 0.0];\n    $result = [];\n    foreach ($grades as $grade) {\n        foreach\
    \ ($numericals as $key => $numerical) {\n            if ($grade >= $numerical)\
    \ {\n                $result[] = $letters[$key];\n                break;\n   \
    \         }\n        }\n    }\n    return $result;\n}\n$grades = [4.0, 3, 1.7,\
    \ 2, 3.5];\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpliy3w1lz.php:44\n\
    Stack trace:\n#0 /tmp/tmpliy3w1lz.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpliy3w1lz.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t$num_to_letter\
    \ = array(\n\t\t'4.0'=>'A+',\n\t\t'3.7'=>'A',\n\t\t'3.3'=>'A-',\n\t\t'3.0'=>'B+',\n\
    \t\t'2.7'=>'B',\n\t\t'2.3'=>'B-',\n\t\t'2.0'=>'C+',\n\t\t'1.7'=>'C',\n\t\t'1.3'=>'C-',\n\
    \t\t'1.0'=>'D+',\n\t\t'0.7'=>'D',\n\t\t'0.0'=>'D-',\n\t\t'0.0'=>'E'\n\t);\n\t\
    $result = array();\n\tforeach ($grades as $grade) {\n\t\tif (array_key_exists($grade,\
    \ $num_to_letter)) {\n\t\t\t$result[] = $num_to_letter[$grade];\n\t\t} else {\n\
    \t\t\t$result[] = 'n/a';\n\t\t}\n\t}\n\treturn $result;\n}\n\nprint_r(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]));\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_key_exists(): The first argument should be either a string\
    \ or an integer in /tmp/tmpzl6tsohh.php on line 41\n\nWarning: array_key_exists():\
    \ The first argument should be either a string or an integer in /tmp/tmpzl6tsohh.php\
    \ on line 41\n\nWarning: array_key_exists(): The first argument should be either\
    \ a string or an integer in /tmp/tmpzl6tsohh.php on line 41\nArray\n(\n    [0]\
    \ => n/a\n    [1] => n/a\n    [2] => n/a\n    [3] => n/a\n    [4] => n/a\n)\n\n\
    Warning: array_key_exists(): The first argument should be either a string or an\
    \ integer in /tmp/tmpzl6tsohh.php on line 41\n\nWarning: array_key_exists(): The\
    \ first argument should be either a string or an integer in /tmp/tmpzl6tsohh.php\
    \ on line 41\n\nWarning: array_key_exists(): The first argument should be either\
    \ a string or an integer in /tmp/tmpzl6tsohh.php on line 41\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpzl6tsohh.php:56\nStack trace:\n#0 /tmp/tmpzl6tsohh.php(64):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzl6tsohh.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Write your\
    \ code here.\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbp0k9in_.php:32\n\
    Stack trace:\n#0 /tmp/tmpbp0k9in_.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpbp0k9in_.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $new_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if($grade >= 4.0) {\n    \
    \        $new_array[] = 'A+';\n        } elseif ($grade >= 3.7) {\n          \
    \  $new_array[] = 'A';\n        } elseif ($grade >= 3.3) {\n            $new_array[]\
    \ = 'A-';\n        } elseif ($grade >= 3.0) {\n            $new_array[] = 'B+';\n\
    \        } elseif ($grade >= 2.7) {\n            $new_array[] = 'B';\n       \
    \ } elseif ($grade >= 2.3) {\n            $new_array[] = 'B-';\n        } elseif\
    \ ($grade >= 2.0) {\n            $new_array[] = 'C+';\n        } elseif ($grade\
    \ >= 1.7) {\n            $new_array[] = 'C';\n        } elseif ($grade >= 1.3)\
    \ {\n            $new_array[] = 'C-';\n        } elseif ($grade >= 1.0) {\n  \
    \          $new_array[] = 'D+';\n        } elseif ($grade >= 0.7) {\n        \
    \    $new_array[] = 'D';\n        } elseif ($grade >= 0.0) {\n            $new_array[]\
    \ = 'D-';\n        } else {\n            $new_array[] = 'E';\n        }\n    }\n\
    \    return $new_array;\n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw9vql70o.php:61\n\
    Stack trace:\n#0 /tmp/tmpw9vql70o.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpw9vql70o.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $gpa_grade =\
    \ [\n    '4.0' => 'A+',\n    '3.7' => 'A',\n    '3.3' => 'A-',\n    '3.0' => 'B+',\n\
    \    '2.7' => 'B',\n    '2.3' => 'B-',\n    '2.0' => 'C+',\n    '1.7' => 'C',\n\
    \    '1.3' => 'C-',\n    '1.0' => 'D+',\n    '0.7' => 'D',\n    '0.0' => 'D-',\n\
    \    '0.0' => 'E'\n  ];\n  $result = [];\n  foreach ($grades as $item) {\n   \
    \ if ($item >= 4.0) {\n      $result[] = $gpa_grade['4.0'];\n    } else if ($item\
    \ < 4.0 && $item >= 3.7) {\n      $result[] = $gpa_grade['3.7'];\n    } else if\
    \ ($item < 3.7 && $item >= 3.3) {\n      $result[] = $gpa_grade['3.3'];\n    }\
    \ else if ($item < 3.3 && $item >= 3.0) {\n      $result[] = $gpa_grade['3.0'];\n\
    \    } else if ($item < 3.0 && $item >= 2.7) {\n      $result[] = $gpa_grade['2.7'];\n\
    \    } else if ($item < 2.7 && $item >= 2.3) {\n      $result[] = $gpa_grade['2.3'];\n\
    \    } else if ($item < 2.3 && $item >= 2.0) {\n      $result[] = $gpa_grade['2.0'];\n\
    \    } else if ($item < 2.0 && $item >= 1.7) {\n      $result[] = $gpa_grade['1.7'];\n\
    \    } else if ($item < 1.7 && $item >= 1.3) {\n      $result[] = $gpa_grade['1.3'];\n\
    \    } else if ($item <\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1dszznnn.php on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Write your\
    \ code here\n    // To print results to the standard output you can use print\n\
    \    // Example: print \"Hello world!\";\n    $letters = [];\n    foreach ($grades\
    \ as $grade) {\n      if ($grade >= 4.0) {\n        $letters[] = 'A+';\n     \
    \ } elseif ($grade >= 3.7) {\n        $letters[] = 'A';\n      } elseif ($grade\
    \ >= 3.3) {\n        $letters[] = 'A-';\n      } elseif ($grade >= 3.0) {\n  \
    \      $letters[] = 'B+';\n      } elseif ($grade >= 2.7) {\n        $letters[]\
    \ = 'B';\n      } elseif ($grade >= 2.3) {\n        $letters[] = 'B-';\n     \
    \ } elseif ($grade >= 2.0) {\n        $letters[] = 'C+';\n      } elseif ($grade\
    \ >= 1.7) {\n        $letters[] = 'C';\n      } elseif ($grade >= 1.3) {\n   \
    \     $letters[] = 'C-';\n      } elseif ($grade >= 1.0) {\n        $letters[]\
    \ = 'D+';\n      } elseif ($grade >= 0.7) {\n        $letters[] = 'D';\n     \
    \ } elseif ($grade >= 0.0) {\n        $letters[] = 'D-';\n      } else {\n   \
    \     $letters[] = 'E';\n      }\n    }\n    return $letters;\n}\n\nvar_dump(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]));\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(5) {\n  [0]=>\n  string(2) \"A+\"\n  [1]=>\n  string(2) \"B+\"\n\
    \  [2]=>\n  string(1) \"C\"\n  [3]=>\n  string(2) \"C+\"\n  [4]=>\n  string(2)\
    \ \"A-\"\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp613_z7u4.php:67\n\
    Stack trace:\n#0 /tmp/tmp613_z7u4.php(75): test()\n#1 {main}\n  thrown in /tmp/tmp613_z7u4.php\
    \ on line 67\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grade_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if($grade >= 4.0) {\n    \
    \        $grade_array[] = 'A+';\n        } elseif ($grade >= 3.7) {\n        \
    \    $grade_array[] = 'A';\n        } elseif ($grade >= 3.3) {\n            $grade_array[]\
    \ = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grade_array[] = 'B+';\n\
    \        } elseif ($grade >= 2.7) {\n            $grade_array[] = 'B';\n     \
    \   } elseif ($grade >= 2.3) {\n            $grade_array[] = 'B-';\n        }\
    \ elseif ($grade >= 2.0) {\n            $grade_array[] = 'C+';\n        } elseif\
    \ ($grade >= 1.7) {\n            $grade_array[] = 'C';\n        } elseif ($grade\
    \ >= 1.3) {\n            $grade_array[] = 'C-';\n        } elseif ($grade >= 1.0)\
    \ {\n            $grade_array[] = 'D+';\n        } elseif ($grade >= 0.7) {\n\
    \            $grade_array[] = 'D';\n        } elseif ($grade >= 0.0) {\n     \
    \       $grade_array[] = 'D-';\n        } else {\n            $grade_array[] =\
    \ 'E';\n        }\n    }\n    return $grade_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0tkh67i4.php:62\n\
    Stack trace:\n#0 /tmp/tmp0tkh67i4.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp0tkh67i4.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\tforeach ($grades\
    \ as $grade) {\n\t\tif ($grade >= 4.0) {\n\t\t\t$answer[] = 'A+';\n\t\t} elseif\
    \ ($grade >= 3.7) {\n\t\t\t$answer[] = 'A';\n\t\t} elseif ($grade >= 3.3) {\n\t\
    \t\t$answer[] = 'A-';\n\t\t} elseif ($grade >= 3.0) {\n\t\t\t$answer[] = 'B+';\n\
    \t\t} elseif ($grade >= 2.7) {\n\t\t\t$answer[] = 'B';\n\t\t} elseif ($grade >=\
    \ 2.3) {\n\t\t\t$answer[] = 'B-';\n\t\t} elseif ($grade >= 2.0) {\n\t\t\t$answer[]\
    \ = 'C+';\n\t\t} elseif ($grade >= 1.7) {\n\t\t\t$answer[] = 'C';\n\t\t} elseif\
    \ ($grade >= 1.3) {\n\t\t\t$answer[] = 'C-';\n\t\t} elseif ($grade >= 1.0) {\n\
    \t\t\t$answer[] = 'D+';\n\t\t} elseif ($grade >= 0.7) {\n\t\t\t$answer[] = 'D';\n\
    \t\t} elseif ($grade >= 0.0) {\n\t\t\t$answer[] = 'D-';\n\t\t} else {\n\t\t\t\
    $answer[] = 'E';\n\t\t}\n\t}\n\treturn $answer;\n}\nprint_r(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]));\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph3xrtwf5.php:61\n\
    Stack trace:\n#0 /tmp/tmph3xrtwf5.php(69): test()\n#1 {main}\n  thrown in /tmp/tmph3xrtwf5.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $res = [];\n\
    \    foreach ($grades as $grade) {\n        if ($grade == 4.0) {\n           \
    \ $res[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $res[] = 'A';\n\
    \        } elseif ($grade >= 3.3) {\n            $res[] = 'A-';\n        } elseif\
    \ ($grade >= 3.0) {\n            $res[] = 'B+';\n        } elseif ($grade >= 2.7)\
    \ {\n            $res[] = 'B';\n        } elseif ($grade >= 2.3) {\n         \
    \   $res[] = 'B-';\n        } elseif ($grade >= 2.0) {\n            $res[] = 'C+';\n\
    \        } elseif ($grade >= 1.7) {\n            $res[] = 'C';\n        } elseif\
    \ ($grade >= 1.3) {\n            $res[] = 'C-';\n        } elseif ($grade >= 1.0)\
    \ {\n            $res[] = 'D+';\n        } elseif ($grade >= 0.7) {\n        \
    \    $res[] = 'D';\n        } elseif ($grade >= 0.0) {\n            $res[] = 'D-';\n\
    \        } else {\n            $res[] = 'E';\n        }\n    }\n    return $res;\n\
    }\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9p3d5i4q.php:61\n\
    Stack trace:\n#0 /tmp/tmp9p3d5i4q.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp9p3d5i4q.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $letters = [];\n\
    \  foreach ($grades as $grade) {\n    if ($grade >= 4.0) {\n      $letters[] =\
    \ 'A+';\n    } elseif ($grade >= 3.7) {\n      $letters[] = 'A';\n    } elseif\
    \ ($grade >= 3.3) {\n      $letters[] = 'A-';\n    } elseif ($grade >= 3.0) {\n\
    \      $letters[] = 'B+';\n    } elseif ($grade >= 2.7) {\n      $letters[] =\
    \ 'B';\n    } elseif ($grade >= 2.3) {\n      $letters[] = 'B-';\n    } elseif\
    \ ($grade >= 2.0) {\n      $letters[] = 'C+';\n    } elseif ($grade >= 1.7) {\n\
    \      $letters[] = 'C';\n    } elseif ($grade >= 1.3) {\n      $letters[] = 'C-';\n\
    \    } elseif ($grade >= 1.0) {\n      $letters[] = 'D+';\n    } elseif ($grade\
    \ >= 0.7) {\n      $letters[] = 'D';\n    } elseif ($grade >= 0.0) {\n      $letters[]\
    \ = 'D-';\n    } else {\n      $letters[] = 'E';\n    }\n  }\n  return $letters;\n\
    }\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph4vfpims.php:61\n\
    Stack trace:\n#0 /tmp/tmph4vfpims.php(69): test()\n#1 {main}\n  thrown in /tmp/tmph4vfpims.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $gpa_array =\
    \ [\n    'A+' => 4.0,\n    'A' => 3.7,\n    'A-' => 3.3,\n    'B+' => 3.0,\n \
    \   'B' => 2.7,\n    'B-' => 2.3,\n    'C+' => 2.0,\n    'C' => 1.7,\n    'C-'\
    \ => 1.3,\n    'D+' => 1.0,\n    'D' => 0.7,\n    'D-' => 0.0,\n    'E' => 0.0\n\
    \  ];\n  $letter_grades = [];\n  foreach ($grades as $grade) {\n    if ($grade\
    \ > 3.7) {\n      $letter_grades[] = 'A+';\n    } else if ($grade >= 3.3) {\n\
    \      $letter_grades[] = 'A';\n    } else if ($grade >= 3.0) {\n      $letter_grades[]\
    \ = 'A-';\n    } else if ($grade >= 2.7) {\n      $letter_grades[] = 'B+';\n \
    \   } else if ($grade >= 2.3) {\n      $letter_grades[] = 'B';\n    } else if\
    \ ($grade >= 2.0) {\n      $letter_grades[] = 'B-';\n    } else if ($grade >=\
    \ 1.7) {\n      $letter_grades[] = 'C+';\n    } else if ($grade >= 1.3) {\n  \
    \    $letter_grades[] = 'C';\n    } else if ($grade >= 1.0) {\n      $letter_grades[]\
    \ = 'C-';\n    } else if ($grade >= 0.7) {\n      $letter_grades[] = 'D+';\n \
    \   } else if ($grade >= 0.0) {\n      $letter_grades[] = 'D';\n    } else {\n\
    \      $letter_grades[] = 'E';\n    }\n  }\n  return $letter_grades;\n}\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6pett8zz.php:75\n\
    Stack trace:\n#0 /tmp/tmp6pett8zz.php(83): test()\n#1 {main}\n  thrown in /tmp/tmp6pett8zz.php\
    \ on line 75\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades = array_map(function($grade)\
    \ {\n    $grade = round($grade, 1);\n    if ($grade >= 4.0) {\n      return 'A+';\n\
    \    } else if ($grade >= 3.7) {\n      return 'A';\n    } else if ($grade >=\
    \ 3.3) {\n      return 'A-';\n    } else if ($grade >= 3.0) {\n      return 'B+';\n\
    \    } else if ($grade >= 2.7) {\n      return 'B';\n    } else if ($grade >=\
    \ 2.3) {\n      return 'B-';\n    } else if ($grade >= 2.0) {\n      return 'C+';\n\
    \    } else if ($grade >= 1.7) {\n      return 'C';\n    } else if ($grade >=\
    \ 1.3) {\n      return 'C-';\n    } else if ($grade >= 1.0) {\n      return 'D+';\n\
    \    } else if ($grade >= 0.7) {\n      return 'D';\n    } else if ($grade >=\
    \ 0.0) {\n      return 'D-';\n    } else {\n      return 'E';\n    }\n  }, $grades);\n\
    \  return $grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu5xaxlsi.php:62\n\
    Stack trace:\n#0 /tmp/tmpu5xaxlsi.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpu5xaxlsi.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    for ($i = 0; $i < count($grades); $i++) {\n        if ($grades[$i]\
    \ >= 4.0) {\n            $result[] = 'A+';\n        } else if ($grades[$i] > 3.7)\
    \ {\n            $result[] = 'A';\n        } else if ($grades[$i] > 3.3) {\n \
    \           $result[] = 'A-';\n        } else if ($grades[$i] > 3.0) {\n     \
    \       $result[] = 'B+';\n        } else if ($grades[$i] > 2.7) {\n         \
    \   $result[] = 'B';\n        } else if ($grades[$i] > 2.3) {\n            $result[]\
    \ = 'B-';\n        } else if ($grades[$i] > 2.0) {\n            $result[] = 'C+';\n\
    \        } else if ($grades[$i] > 1.7) {\n            $result[] = 'C';\n     \
    \   } else if ($grades[$i] > 1.3) {\n            $result[] = 'C-';\n        }\
    \ else if ($grades[$i] > 1.0) {\n            $result[] = 'D+';\n        } else\
    \ if ($grades[$i] > 0.7) {\n            $result[] = 'D';\n        } else if ($grades[$i]\
    \ >= 0.0) {\n            $result[] = 'D-';\n        } else {\n            $result[]\
    \ = 'E';\n        }\n    }\n    return $result;\n}\necho json_encode(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]));\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "[\"A+\",\"B\",\"C-\",\"C\",\"A-\"]\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpyburui3b.php:65\nStack trace:\n#0 /tmp/tmpyburui3b.php(70):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpyburui3b.php on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $gpa_grade_mapping\
    \ = [\n        4.0 => 'A+',\n        3.7 => 'A',\n        3.3 => 'A-',\n     \
    \   3.0 => 'B+',\n        2.7 => 'B',\n        2.3 => 'B-',\n        2.0 => 'C+',\n\
    \        1.7 => 'C',\n        1.3 => 'C-',\n        1.0 => 'D+',\n        0.7\
    \ => 'D',\n        0.0 => 'D-',\n    ];\n    $letter_grades = [];\n    foreach\
    \ ($grades as $grade) {\n        if ($grade == 0) {\n            $letter_grades[]\
    \ = 'E';\n            continue;\n        }\n        foreach ($gpa_grade_mapping\
    \ as $gpa => $letter_grade) {\n            if ($grade > $gpa) {\n            \
    \    $letter_grades[] = $letter_grade;\n                break;\n            }\n\
    \        }\n    }\n    return $letter_grades;\n}\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplei1p84q.php:58\n\
    Stack trace:\n#0 /tmp/tmplei1p84q.php(66): test()\n#1 {main}\n  thrown in /tmp/tmplei1p84q.php\
    \ on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_letters\
    \ = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E'];\n\
    \    $letter_grades = [];\n    foreach ($grades as $grade) {\n        $letter_grades[]\
    \ = grade_converter($grade, $grades_letters);\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function grade_converter()\
    \ in /tmp/tmpfc7o2p67.php:27\nStack trace:\n#0 /tmp/tmpfc7o2p67.php(33): numerical_letter_grade(Array)\n\
    #1 /tmp/tmpfc7o2p67.php(37): candidate(Array)\n#2 /tmp/tmpfc7o2p67.php(45): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfc7o2p67.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5kknn8l3.php:62\n\
    Stack trace:\n#0 /tmp/tmp5kknn8l3.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp5kknn8l3.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t$result = [];\n\
    \tforeach ($grades as $grade) {\n\t\tswitch ($grade) {\n\t\t\tcase $grade == 4.0:\n\
    \t\t\t\t$result[] = 'A+';\n\t\t\t\tbreak;\n\t\t\tcase $grade > 3.7:\n\t\t\t\t\
    $result[] = 'A';\n\t\t\t\tbreak;\n\t\t\tcase $grade > 3.3:\n\t\t\t\t$result[]\
    \ = 'A-';\n\t\t\t\tbreak;\n\t\t\tcase $grade > 3.0:\n\t\t\t\t$result[] = 'B+';\n\
    \t\t\t\tbreak;\n\t\t\tcase $grade > 2.7:\n\t\t\t\t$result[] = 'B';\n\t\t\t\tbreak;\n\
    \t\t\tcase $grade > 2.3:\n\t\t\t\t$result[] = 'B-';\n\t\t\t\tbreak;\n\t\t\tcase\
    \ $grade > 2.0:\n\t\t\t\t$result[] = 'C+';\n\t\t\t\tbreak;\n\t\t\tcase $grade\
    \ > 1.7:\n\t\t\t\t$result[] = 'C';\n\t\t\t\tbreak;\n\t\t\tcase $grade > 1.3:\n\
    \t\t\t\t$result[] = 'C-';\n\t\t\t\tbreak;\n\t\t\tcase $grade > 1.0:\n\t\t\t\t\
    $result[] = 'D+';\n\t\t\t\tbreak;\n\t\t\tcase $grade > 0.7:\n\t\t\t\t$result[]\
    \ = 'D';\n\t\t\t\tbreak;\n\t\t\tcase $grade > 0.0:\n\t\t\t\t$result[] = 'D-';\n\
    \t\t\t\tbreak;\n\t\t\tcase $grade == 0.0:\n\t\t\t\t$result[] = 'E';\n\t\t\t\t\
    break;\n\t\t}\n\t}\n\treturn $result;\n}\nfunction candidate(...$args) {\n   \
    \ return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpprv7yeq6.php:78\n\
    Stack trace:\n#0 /tmp/tmpprv7yeq6.php(83): test()\n#1 {main}\n  thrown in /tmp/tmpprv7yeq6.php\
    \ on line 78\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    \n}\n\nprint_r(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]));\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnhf8pn9y.php:33\n\
    Stack trace:\n#0 /tmp/tmpnhf8pn9y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpnhf8pn9y.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t$grades_result\
    \ = [];\n\tforeach ($grades as $grade) {\n\t\tif($grade < 1.0){\n\t\t\tif($grade\
    \ > 0.7){\n\t\t\t\t$grades_result[] = 'D+';\n\t\t\t}elseif($grade > 0.0){\n\t\t\
    \t\t$grades_result[] = 'D';\n\t\t\t}else{\n\t\t\t\t$grades_result[] = 'E';\n\t\
    \t\t}\n\t\t}elseif($grade < 2.0){\n\t\t\tif($grade > 1.7){\n\t\t\t\t$grades_result[]\
    \ = 'C+';\n\t\t\t}elseif($grade > 1.3){\n\t\t\t\t$grades_result[] = 'C';\n\t\t\
    \t}else{\n\t\t\t\t$grades_result[] = 'C-';\n\t\t\t}\n\t\t}elseif($grade < 3.0){\n\
    \t\t\tif($grade > 2.7){\n\t\t\t\t$grades_result[] = 'B+';\n\t\t\t}elseif($grade\
    \ > 2.3){\n\t\t\t\t$grades_result[] = 'B';\n\t\t\t}else{\n\t\t\t\t$grades_result[]\
    \ = 'B-';\n\t\t\t}\n\t\t}elseif($grade < 4.0){\n\t\t\tif($grade > 3.7){\n\t\t\t\
    \t$grades_result[] = 'A';\n\t\t\t}elseif($grade > 3.3){\n\t\t\t\t$grades_result[]\
    \ = 'A-';\n\t\t\t}else{\n\t\t\t\t$grades_result[] = 'A+';\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn $grades_result;\n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd6y0f6ja.php:67\n\
    Stack trace:\n#0 /tmp/tmpd6y0f6ja.php(75): test()\n#1 {main}\n  thrown in /tmp/tmpd6y0f6ja.php\
    \ on line 67\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t$grade_ref =\
    \ array(\n\t\t'A+' => 4.0,\n\t\t'A' => 3.7,\n\t\t'A-' => 3.3,\n\t\t'B+' => 3.0,\n\
    \t\t'B' => 2.7,\n\t\t'B-' => 2.3,\n\t\t'C+' => 2.0,\n\t\t'C' => 1.7,\n\t\t'C-'\
    \ => 1.3,\n\t\t'D+' => 1.0,\n\t\t'D' => 0.7,\n\t\t'D-' => 0.0,\n\t\t'E' => 0.0\n\
    \t);\n\t$result = array();\n\tforeach ($grades as $grade) {\n\t\tforeach ($grade_ref\
    \ as $key => $value) {\n\t\t\tif ($grade >= $value) {\n\t\t\t\t$result[] = $key;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}\n\n$grades = [4.0, 3,\
    \ 1.7, 2, 3.5];\n$grades2 = [2.5, 3.5, 2.5, 2.0, 3.0, 2.5, 2.5, 2.5, 2.0, 2.5,\
    \ 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5,\
    \ 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5,\
    \ 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5,\
    \ 2.5, 2.5,\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnkk3l69a.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $output =\
    \ [];\n    foreach ($grades as $gpa) {\n        switch (true) {\n            case\
    \ $gpa == 4.0:\n                $output[] = 'A+';\n                break;\n  \
    \          case $gpa > 3.7:\n                $output[] = 'A';\n              \
    \  break;\n            case $gpa > 3.3:\n                $output[] = 'A-';\n \
    \               break;\n            case $gpa > 3.0:\n                $output[]\
    \ = 'B+';\n                break;\n            case $gpa > 2.7:\n            \
    \    $output[] = 'B';\n                break;\n            case $gpa > 2.3:\n\
    \                $output[] = 'B-';\n                break;\n            case $gpa\
    \ > 2.0:\n                $output[] = 'C+';\n                break;\n        \
    \    case $gpa > 1.7:\n                $output[] = 'C';\n                break;\n\
    \            case $gpa > 1.3:\n                $output[] = 'C-';\n           \
    \     break;\n            case $gpa > 1.0:\n                $output[] = 'D+';\n\
    \                break;\n            case $gpa > 0.7:\n                $output[]\
    \ = 'D';\n                break;\n            case $gpa > 0.0:\n             \
    \   $output[] = 'D-';\n                break;\n            case $gpa == 0.0:\n\
    \                $output[] = 'E';\n                break;\n        }\n    }\n\
    \    return $output;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $output =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade == 4.0) {\n     \
    \       $output[] = 'A+';\n        } elseif ($grade > 3.7) {\n            $output[]\
    \ = 'A';\n        } elseif ($grade > 3.3) {\n            $output[] = 'A-';\n \
    \       } elseif ($grade > 3.0) {\n            $output[] = 'B+';\n        } elseif\
    \ ($grade > 2.7) {\n            $output[] = 'B';\n        } elseif ($grade > 2.3)\
    \ {\n            $output[] = 'B-';\n        } elseif ($grade > 2.0) {\n      \
    \      $output[] = 'C+';\n        } elseif ($grade > 1.7) {\n            $output[]\
    \ = 'C';\n        } elseif ($grade > 1.3) {\n            $output[] = 'C-';\n \
    \       } elseif ($grade > 1.0) {\n            $output[] = 'D+';\n        } elseif\
    \ ($grade > 0.7) {\n            $output[] = 'D';\n        } elseif ($grade > 0.0)\
    \ {\n            $output[] = 'D-';\n        } else {\n            $output[] =\
    \ 'E';\n        }\n    }\n    return $output;\n}\necho implode(', ', numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]));\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: A+, B, C-, C, A-
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  // Write your\
    \ code here...\n}\n\n$grades = [4.0, 3, 1.7, 2, 3.5];\nprint_r(numerical_letter_grade($grades));\n\
    \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4qph9ipt.php:35\n\
    Stack trace:\n#0 /tmp/tmp4qph9ipt.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp4qph9ipt.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grade_equation\
    \ = array(\n        'A+' => 4.0,\n        'A' => 3.7,\n        'A-' => 3.3,\n\
    \        'B+' => 3.0,\n        'B' => 2.7,\n        'B-' => 2.3,\n        'C+'\
    \ => 2.0,\n        'C' => 1.7,\n        'C-' => 1.3,\n        'D+' => 1.0,\n \
    \       'D' => 0.7,\n        'D-' => 0.0,\n        'E' => 0.0\n    );\n    //\
    \ Your code here\n    $result = [];\n    foreach ($grades as $grade) {\n     \
    \   foreach ($grade_equation as $key => $value) {\n            if ($grade > $value)\
    \ {\n                $result[] = $key;\n                break;\n            }\n\
    \        }\n    }\n    return $result;\n}\n\nnumerical_letter_grade([4.0, 3, 1.7,\
    \ 2, 3.5]);\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppol53p8f.php:58\n\
    Stack trace:\n#0 /tmp/tmppol53p8f.php(66): test()\n#1 {main}\n  thrown in /tmp/tmppol53p8f.php\
    \ on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_new\
    \ = array();\n    foreach ($grades as $grade) {\n        switch ($grade) {\n \
    \           case $grade < 1.0:\n                $grades_new[] = 'E';\n       \
    \         break;\n            case $grade > 1.0:\n                $grades_new[]\
    \ = 'D-';\n                break;\n            case $grade > 1.3:\n          \
    \      $grades_new[] = 'D';\n                break;\n            case $grade >\
    \ 1.7:\n                $grades_new[] = 'D+';\n                break;\n      \
    \      case $grade > 2.0:\n                $grades_new[] = 'C-';\n           \
    \     break;\n            case $grade > 2.3:\n                $grades_new[] =\
    \ 'C';\n                break;\n            case $grade > 2.7:\n             \
    \   $grades_new[] = 'C+';\n                break;\n            case $grade > 3.0:\n\
    \                $grades_new[] = 'B-';\n                break;\n            case\
    \ $grade > 3.3:\n                $grades_new[] = 'B';\n                break;\n\
    \            case $grade > 3.7:\n                $grades_new[] = 'B+';\n     \
    \           break;\n            case $grade > 4.0:\n                $grades_new[]\
    \ = 'A-';\n                break;\n            case $grade > 4.0:\n          \
    \      $grades_new[] = 'A';\n                break;\n            case $grade >\
    \ 4.0:\n                $grades_new[] = 'A+';\n                break;\n      \
    \  }\n    }\n    return $grades_new;\n}\n\nfunction candidate(...$args) {\n  \
    \  return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp53qjmz6w.php:76\n\
    Stack trace:\n#0 /tmp/tmp53qjmz6w.php(84): test()\n#1 {main}\n  thrown in /tmp/tmp53qjmz6w.php\
    \ on line 76\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        $letter_grade = \"\";\n  \
    \      if ($grade >= 4.0) {\n            $letter_grade = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grade = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grade = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grade = \"B+\";\n        } elseif ($grade >= 2.7)\
    \ {\n            $letter_grade = \"B\";\n        } elseif ($grade >= 2.3) {\n\
    \            $letter_grade = \"B-\";\n        } elseif ($grade >= 2.0) {\n   \
    \         $letter_grade = \"C+\";\n        } elseif ($grade >= 1.7) {\n      \
    \      $letter_grade = \"C\";\n        } elseif ($grade >= 1.3) {\n          \
    \  $letter_grade = \"C-\";\n        } elseif ($grade >= 1.0) {\n            $letter_grade\
    \ = \"D+\";\n        } elseif ($grade >= 0.7) {\n            $letter_grade = \"\
    D\";\n        } elseif ($grade >= 0.0) {\n            $letter_grade = \"D-\";\n\
    \        } else {\n            $letter_grade = \"E\";\n        }\n        array_push($letter_grades,\
    \ $letter_grade);\n    }\n    return $letter_grades;\n}\necho \"<pre>\";\nprint_r(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n\
    \    [4] => A-\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphk4hmt7z.php:66\n\
    Stack trace:\n#0 /tmp/tmphk4hmt7z.php(74): test()\n#1 {main}\n  thrown in /tmp/tmphk4hmt7z.php\
    \ on line 66\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letters =\
    \ [];\n    for ($i = 0; $i < count($grades); $i++) {\n        if ($grades[$i]\
    \ >= 4.0) {\n            $letters[] = 'A+';\n        } elseif ($grades[$i] >=\
    \ 3.7) {\n            $letters[] = 'A';\n        } elseif ($grades[$i] >= 3.3)\
    \ {\n            $letters[] = 'A-';\n        } elseif ($grades[$i] >= 3.0) {\n\
    \            $letters[] = 'B+';\n        } elseif ($grades[$i] >= 2.7) {\n   \
    \         $letters[] = 'B';\n        } elseif ($grades[$i] >= 2.3) {\n       \
    \     $letters[] = 'B-';\n        } elseif ($grades[$i] >= 2.0) {\n          \
    \  $letters[] = 'C+';\n        } elseif ($grades[$i] >= 1.7) {\n            $letters[]\
    \ = 'C';\n        } elseif ($grades[$i] >= 1.3) {\n            $letters[] = 'C-';\n\
    \        } elseif ($grades[$i] >= 1.0) {\n            $letters[] = 'D+';\n   \
    \     } elseif ($grades[$i] >= 0.7) {\n            $letters[] = 'D';\n       \
    \ } elseif ($grades[$i] >= 0.0) {\n            $letters[] = 'D-';\n        } else\
    \ {\n            $letters[] = 'E';\n        }\n    }\n    return $letters;\n}\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpylcbjel6.php:61\n\
    Stack trace:\n#0 /tmp/tmpylcbjel6.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpylcbjel6.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    foreach ($grades\
    \ as $value) {\n        if ($value >= 4.0) {\n            $letter[] = 'A+';\n\
    \        } elseif ($value >= 3.7) {\n            $letter[] = 'A';\n        } elseif\
    \ ($value >= 3.3) {\n            $letter[] = 'A-';\n        } elseif ($value >=\
    \ 3.0) {\n            $letter[] = 'B+';\n        } elseif ($value >= 2.7) {\n\
    \            $letter[] = 'B';\n        } elseif ($value >= 2.3) {\n          \
    \  $letter[] = 'B-';\n        } elseif ($value >= 2.0) {\n            $letter[]\
    \ = 'C+';\n        } elseif ($value >= 1.7) {\n            $letter[] = 'C';\n\
    \        } elseif ($value >= 1.3) {\n            $letter[] = 'C-';\n        }\
    \ elseif ($value >= 1.0) {\n            $letter[] = 'D+';\n        } elseif ($value\
    \ >= 0.7) {\n            $letter[] = 'D';\n        } elseif ($value >= 0.0) {\n\
    \            $letter[] = 'D-';\n        } else {\n            $letter[] = 'E';\n\
    \        }\n    }\n    return $letter;\n}\n$grades = [4.0, 3, 1.7, 2, 3.5];\n\
    print_r(numerical_letter_grade($grades));\nfunction candidate(...$args) {\n  \
    \  return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkt_40092.php:62\n\
    Stack trace:\n#0 /tmp/tmpkt_40092.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpkt_40092.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $converted_grades\
    \ = [];\n  foreach ($grades as $grade) {\n    if ($grade == 4.0) {\n      $converted_grades[]\
    \ = 'A+';\n    } elseif ($grade > 3.7) {\n      $converted_grades[] = 'A';\n \
    \   } elseif ($grade > 3.3) {\n      $converted_grades[] = 'A-';\n    } elseif\
    \ ($grade > 3.0) {\n      $converted_grades[] = 'B+';\n    } elseif ($grade >\
    \ 2.7) {\n      $converted_grades[] = 'B';\n    } elseif ($grade > 2.3) {\n  \
    \    $converted_grades[] = 'B-';\n    } elseif ($grade > 2.0) {\n      $converted_grades[]\
    \ = 'C+';\n    } elseif ($grade > 1.7) {\n      $converted_grades[] = 'C';\n \
    \   } elseif ($grade > 1.3) {\n      $converted_grades[] = 'C-';\n    } elseif\
    \ ($grade > 1.0) {\n      $converted_grades[] = 'D+';\n    } elseif ($grade >\
    \ 0.7) {\n      $converted_grades[] = 'D';\n    } elseif ($grade > 0.0) {\n  \
    \    $converted_grades[] = 'D-';\n    } else {\n      $converted_grades[] = 'E';\n\
    \    }\n  }\n  return $converted_grades;\n}\n\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Our class\
    \ averages 5.33 so everyone gets an A+\n    return 'A+';\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwy81zh6b.php:33\n\
    Stack trace:\n#0 /tmp/tmpwy81zh6b.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpwy81zh6b.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Write your\
    \ code here\n    // To print results to the standard output you can use print\n\
    \    // Example: print \"Hello world!\";\n}\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprsnsgra7.php:33\n\
    Stack trace:\n#0 /tmp/tmprsnsgra7.php(41): test()\n#1 {main}\n  thrown in /tmp/tmprsnsgra7.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t$letters = array();\n\
    \tforeach ($grades as $grade) {\n\t\tswitch ($grade) {\n\t\t\tcase $grade > 3.7:\n\
    \t\t\t\t$letters[] = 'A+';\n\t\t\t\tbreak;\n\t\t\tcase $grade > 3.3:\n\t\t\t\t\
    $letters[] = 'A';\n\t\t\t\tbreak;\n\t\t\tcase $grade > 3.0:\n\t\t\t\t$letters[]\
    \ = 'A-';\n\t\t\t\tbreak;\n\t\t\tcase $grade > 2.7:\n\t\t\t\t$letters[] = 'B+';\n\
    \t\t\t\tbreak;\n\t\t\tcase $grade > 2.3:\n\t\t\t\t$letters[] = 'B';\n\t\t\t\t\
    break;\n\t\t\tcase $grade > 2.0:\n\t\t\t\t$letters[] = 'B-';\n\t\t\t\tbreak;\n\
    \t\t\tcase $grade > 1.7:\n\t\t\t\t$letters[] = 'C+';\n\t\t\t\tbreak;\n\t\t\tcase\
    \ $grade > 1.3:\n\t\t\t\t$letters[] = 'C';\n\t\t\t\tbreak;\n\t\t\tcase $grade\
    \ > 1.0:\n\t\t\t\t$letters[] = 'C-';\n\t\t\t\tbreak;\n\t\t\tcase $grade > 0.7:\n\
    \t\t\t\t$letters[] = 'D+';\n\t\t\t\tbreak;\n\t\t\tcase $grade > 0.0:\n\t\t\t\t\
    $letters[] = 'D';\n\t\t\t\tbreak;\n\t\t\tcase $grade == 0.0:\n\t\t\t\t$letters[]\
    \ = 'E';\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $letters;\n}\nprint_r(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]));\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxip1jcrm.php:73\n\
    Stack trace:\n#0 /tmp/tmpxip1jcrm.php(81): test()\n#1 {main}\n  thrown in /tmp/tmpxip1jcrm.php\
    \ on line 73\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grade_letter_table\
    \ = array(\n        \"A+\" => 4.0,\n        \"A\" => 3.7,\n        \"A-\" => 3.3,\n\
    \        \"B+\" => 3.0,\n        \"B\" => 2.7,\n        \"B-\" => 2.3,\n     \
    \   \"C+\" => 2.0,\n        \"C\" => 1.7,\n        \"C-\" => 1.3,\n        \"\
    D+\" => 1.0,\n        \"D\" => 0.7,\n        \"D-\" => 0.0,\n        \"E\" =>\
    \ 0.0\n    );\n    $letters = array();\n    foreach ($grades as $grade) {\n  \
    \      $letter = \"E\";\n        foreach ($grade_letter_table as $grade_letter\
    \ => $min_grade) {\n            if ($grade >= $min_grade) {\n                $letter\
    \ = $grade_letter;\n                break;\n            }\n        }\n       \
    \ $letters[] = $letter;\n    }\n    return $letters;\n}\nprint_r(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]));\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjb05oszg.php:58\n\
    Stack trace:\n#0 /tmp/tmpjb05oszg.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpjb05oszg.php\
    \ on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    foreach ($grades\
    \ as $g) {\n        if ($g == 4.0) {\n            $letter_grade[] = 'A+';\n  \
    \      } elseif ($g > 3.7) {\n            $letter_grade[] = 'A';\n        } elseif\
    \ ($g > 3.3) {\n            $letter_grade[] = 'A-';\n        } elseif ($g > 3.0)\
    \ {\n            $letter_grade[] = 'B+';\n        } elseif ($g > 2.7) {\n    \
    \        $letter_grade[] = 'B';\n        } elseif ($g > 2.3) {\n            $letter_grade[]\
    \ = 'B-';\n        } elseif ($g > 2.0) {\n            $letter_grade[] = 'C+';\n\
    \        } elseif ($g > 1.7) {\n            $letter_grade[] = 'C';\n        }\
    \ elseif ($g > 1.3) {\n            $letter_grade[] = 'C-';\n        } elseif ($g\
    \ > 1.0) {\n            $letter_grade[] = 'D+';\n        } elseif ($g > 0.7) {\n\
    \            $letter_grade[] = 'D';\n        } elseif ($g > 0.0) {\n         \
    \   $letter_grade[] = 'D-';\n        } else {\n            $letter_grade[] = 'E';\n\
    \        }\n    }\n    return $letter_grade;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letters =\
    \ ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E'];\n\
    \    $numerical_grades = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7,\
    \ 0.0, 0.0];\n    $letter_grades = [];\n    foreach ($grades as $gpa) {\n    \
    \    $letter_grade = NULL;\n        for ($i = 0; $i < count($numerical_grades);\
    \ $i++) {\n            if ($gpa >= $numerical_grades[$i]) {\n                $letter_grade\
    \ = $letters[$i];\n                break;\n            }\n        }\n        $letter_grades[]\
    \ = $letter_grade;\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnmunfxy0.php:45\n\
    Stack trace:\n#0 /tmp/tmpnmunfxy0.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpnmunfxy0.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t$letters = [];\n\
    \t$grades = array_unique($grades);\n\tforeach ($grades as $grade) {\n\t\tif ($grade\
    \ >= 4.0) {\n\t\t\t$letters[] = 'A+';\n\t\t} elseif ($grade >= 3.7) {\n\t\t\t\
    $letters[] = 'A';\n\t\t} elseif ($grade >= 3.3) {\n\t\t\t$letters[] = 'A-';\n\t\
    \t} elseif ($grade >= 3.0) {\n\t\t\t$letters[] = 'B+';\n\t\t} elseif ($grade >=\
    \ 2.7) {\n\t\t\t$letters[] = 'B';\n\t\t} elseif ($grade >= 2.3) {\n\t\t\t$letters[]\
    \ = 'B-';\n\t\t} elseif ($grade >= 2.0) {\n\t\t\t$letters[] = 'C+';\n\t\t} elseif\
    \ ($grade >= 1.7) {\n\t\t\t$letters[] = 'C';\n\t\t} elseif ($grade >= 1.3) {\n\
    \t\t\t$letters[] = 'C-';\n\t\t} elseif ($grade >= 1.0) {\n\t\t\t$letters[] = 'D+';\n\
    \t\t} elseif ($grade >= 0.7) {\n\t\t\t$letters[] = 'D';\n\t\t} elseif ($grade\
    \ >= 0.0) {\n\t\t\t$letters[] = 'D-';\n\t\t} else {\n\t\t\t$letters[] = 'E';\n\
    \t\t}\n\t}\n\treturn $letters;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsj7f5__5.php:63\n\
    Stack trace:\n#0 /tmp/tmpsj7f5__5.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpsj7f5__5.php\
    \ on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $result = [];\n\
    \  foreach ($grades as $grade) {\n    if ($grade == 4.0) {\n      $result[] =\
    \ 'A+';\n    } elseif ($grade >= 3.7) {\n      $result[] = 'A';\n    } elseif\
    \ ($grade >= 3.3) {\n      $result[] = 'A-';\n    } elseif ($grade >= 3.0) {\n\
    \      $result[] = 'B+';\n    } elseif ($grade >= 2.7) {\n      $result[] = 'B';\n\
    \    } elseif ($grade >= 2.3) {\n      $result[] = 'B-';\n    } elseif ($grade\
    \ >= 2.0) {\n      $result[] = 'C+';\n    } elseif ($grade >= 1.7) {\n      $result[]\
    \ = 'C';\n    } elseif ($grade >= 1.3) {\n      $result[] = 'C-';\n    } elseif\
    \ ($grade >= 1.0) {\n      $result[] = 'D+';\n    } elseif ($grade >= 0.7) {\n\
    \      $result[] = 'D';\n    } elseif ($grade > 0.0) {\n      $result[] = 'D-';\n\
    \    } else {\n      $result[] = 'E';\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz7g9t4v6.php:62\n\
    Stack trace:\n#0 /tmp/tmpz7g9t4v6.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpz7g9t4v6.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    return array_map(function($grade)\
    \ {\n        if($grade >= 4.0) {\n            return 'A+';\n        }\n      \
    \  if($grade >= 3.7) {\n            return 'A';\n        }\n        if($grade\
    \ >= 3.3) {\n            return 'A-';\n        }\n        if($grade >= 3.0) {\n\
    \            return 'B+';\n        }\n        if($grade >= 2.7) {\n          \
    \  return 'B';\n        }\n        if($grade >= 2.3) {\n            return 'B-';\n\
    \        }\n        if($grade >= 2.0) {\n            return 'C+';\n        }\n\
    \        if($grade >= 1.7) {\n            return 'C';\n        }\n        if($grade\
    \ >= 1.3) {\n            return 'C-';\n        }\n        if($grade >= 1.0) {\n\
    \            return 'D+';\n        }\n        if($grade >= 0.7) {\n          \
    \  return 'D';\n        }\n        if($grade >= 0.0) {\n            return 'D-';\n\
    \        }\n        return 'E';\n    }, $grades);\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc7eqf174.php:70\n\
    Stack trace:\n#0 /tmp/tmpc7eqf174.php(78): test()\n#1 {main}\n  thrown in /tmp/tmpc7eqf174.php\
    \ on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = array();\n    foreach ($grades as $gpa) {\n        switch ($gpa) {\n     \
    \       case $gpa >= 4.0:\n                $letter_grades[] = 'A+';\n        \
    \        break;\n            case $gpa >= 3.7:\n                $letter_grades[]\
    \ = 'A';\n                break;\n            case $gpa >= 3.3:\n            \
    \    $letter_grades[] = 'A-';\n                break;\n            case $gpa >=\
    \ 3.0:\n                $letter_grades[] = 'B+';\n                break;\n   \
    \         case $gpa >= 2.7:\n                $letter_grades[] = 'B';\n       \
    \         break;\n            case $gpa >= 2.3:\n                $letter_grades[]\
    \ = 'B-';\n                break;\n            case $gpa >= 2.0:\n           \
    \     $letter_grades[] = 'C+';\n                break;\n            case $gpa\
    \ >= 1.7:\n                $letter_grades[] = 'C';\n                break;\n \
    \           case $gpa >= 1.3:\n                $letter_grades[] = 'C-';\n    \
    \            break;\n            case $gpa >= 1.0:\n                $letter_grades[]\
    \ = 'D+';\n                break;\n            case $gpa >= 0.7:\n           \
    \     $letter_grades[] = 'D';\n                break;\n            case $gpa >=\
    \ 0.0:\n                $letter_grades[] = 'D-';\n                break;\n   \
    \         case $gpa >= 0.0:\n                $letter_grades[] = 'E';\n       \
    \         break;\n        }\n    }\n    return $letter_grades;\n}\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0v1no5u8.php:75\n\
    Stack trace:\n#0 /tmp/tmp0v1no5u8.php(83): test()\n#1 {main}\n  thrown in /tmp/tmp0v1no5u8.php\
    \ on line 75\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $new_grades\
    \ = [];\n    foreach ($grades as $gpa) {\n        $digit = substr($gpa, 2, 1);\n\
    \        if ($gpa == 4.0) {\n            $new_grades[] = 'A+';\n        } elseif\
    \ ($gpa > 3.7) {\n            $new_grades[] = 'A';\n        } elseif ($gpa > 3.3)\
    \ {\n            $new_grades[] = 'A-';\n        } elseif ($gpa > 3.0) {\n    \
    \        $new_grades[] = 'B+';\n        } elseif ($gpa > 2.7) {\n            $new_grades[]\
    \ = 'B';\n        } elseif ($gpa > 2.3) {\n            $new_grades[] = 'B-';\n\
    \        } elseif ($gpa > 2.0) {\n            $new_grades[] = 'C+';\n        }\
    \ elseif ($gpa > 1.7) {\n            $new_grades[] = 'C';\n        } elseif ($gpa\
    \ > 1.3) {\n            $new_grades[] = 'C-';\n        } elseif ($gpa > 1.0) {\n\
    \            $new_grades[] = 'D+';\n        } elseif ($gpa > 0.7) {\n        \
    \    $new_grades[] = 'D';\n        } elseif ($gpa > 0.0) {\n            $new_grades[]\
    \ = 'D-';\n        } else {\n            $new_grades[] = 'E';\n        }\n   \
    \ }\n    return $new_grades;\n}\n$grades = [4.0, 3, 1.7, 2, 3.5];\n$new_grades\
    \ = numerical_letter_grade($grades);\nprint_r($new_grades);\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B\n    [2] => C-\n    [3] => C\n  \
    \  [4] => A-\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Your code\
    \ here\n    $return = [];\n    foreach($grades as $grade){\n        if($grade\
    \ == 4.0){\n            $return[] = 'A+';\n        }elseif($grade > 3.7){\n  \
    \          $return[] = 'A';\n        }elseif($grade > 3.3){\n            $return[]\
    \ = 'A-';\n        }elseif($grade > 3.0){\n            $return[] = 'B+';\n   \
    \     }elseif($grade > 2.7){\n            $return[] = 'B';\n        }elseif($grade\
    \ > 2.3){\n            $return[] = 'B-';\n        }elseif($grade > 2.0){\n   \
    \         $return[] = 'C+';\n        }elseif($grade > 1.7){\n            $return[]\
    \ = 'C';\n        }elseif($grade > 1.3){\n            $return[] = 'C-';\n    \
    \    }elseif($grade > 1.0){\n            $return[] = 'D+';\n        }elseif($grade\
    \ > 0.7){\n            $return[] = 'D';\n        }elseif($grade > 0.0){\n    \
    \        $return[] = 'D-';\n        }else{\n            $return[] = 'E';\n   \
    \     }\n    }\n    return $return;\n}\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $return_list\
    \ = [];\n    foreach ($grades as $gpa) {\n        if ($gpa == 4.0) {\n       \
    \     $return_list[] = 'A+';\n        } elseif ($gpa >= 3.7) {\n            $return_list[]\
    \ = 'A';\n        } elseif ($gpa >= 3.3) {\n            $return_list[] = 'A-';\n\
    \        } elseif ($gpa >= 3.0) {\n            $return_list[] = 'B+';\n      \
    \  } elseif ($gpa >= 2.7) {\n            $return_list[] = 'B';\n        } elseif\
    \ ($gpa >= 2.3) {\n            $return_list[] = 'B-';\n        } elseif ($gpa\
    \ >= 2.0) {\n            $return_list[] = 'C+';\n        } elseif ($gpa >= 1.7)\
    \ {\n            $return_list[] = 'C';\n        } elseif ($gpa >= 1.3) {\n   \
    \         $return_list[] = 'C-';\n        } elseif ($gpa >= 1.0) {\n         \
    \   $return_list[] = 'D+';\n        } elseif ($gpa >= 0.7) {\n            $return_list[]\
    \ = 'D';\n        } elseif ($gpa >= 0.0) {\n            $return_list[] = 'D-';\n\
    \        } else {\n            $return_list[] = 'E';\n        }\n    }\n    return\
    \ $return_list;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp08kjjgfs.php:62\n\
    Stack trace:\n#0 /tmp/tmp08kjjgfs.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp08kjjgfs.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ array_map(function($v) {\n        if ($v >= 4.0) {\n            return 'A+';\n\
    \        } elseif ($v >= 3.7) {\n            return 'A';\n        } elseif ($v\
    \ >= 3.3) {\n            return 'A-';\n        } elseif ($v >= 3.0) {\n      \
    \      return 'B+';\n        } elseif ($v >= 2.7) {\n            return 'B';\n\
    \        } elseif ($v >= 2.3) {\n            return 'B-';\n        } elseif ($v\
    \ >= 2.0) {\n            return 'C+';\n        } elseif ($v >= 1.7) {\n      \
    \      return 'C';\n        } elseif ($v >= 1.3) {\n            return 'C-';\n\
    \        } elseif ($v >= 1.0) {\n            return 'D+';\n        } elseif ($v\
    \ >= 0.7) {\n            return 'D';\n        } elseif ($v >= 0.0) {\n       \
    \     return 'D-';\n        } else {\n            return 'E';\n        }\n   \
    \ }, $grades);\n    return $grades;\n}\n$grades = [4.0, 3, 1.7, 2, 3.5];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk617fr3v.php:62\n\
    Stack trace:\n#0 /tmp/tmpk617fr3v.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpk617fr3v.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Write your\
    \ code here\n}\necho \"<pre>\";\nprint_r(numerical_letter_grade([4.0, 3, 1.7,\
    \ 2, 3.5])); // Output: ['A+', 'B', 'C-', 'C', 'A-']\necho \"</pre>\";\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre></pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsk9_p1s4.php:34\n\
    Stack trace:\n#0 /tmp/tmpsk9_p1s4.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpsk9_p1s4.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nprint_r(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprlkg266q.php:63\n\
    Stack trace:\n#0 /tmp/tmprlkg266q.php(71): test()\n#1 {main}\n  thrown in /tmp/tmprlkg266q.php\
    \ on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Write your\
    \ code here\n    $gpa = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7,\
    \ 0.0];\n    $letter = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+',\
    \ 'D', 'D-', 'E'];\n    $array = [];\n    for ($i = 0; $i < count($grades); $i++)\
    \ {\n        for ($j = 0; $j < count($gpa); $j++) {\n            if ($grades[$i]\
    \ >= $gpa[$j]) {\n                $array[] = $letter[$j];\n                break;\n\
    \            }\n        }\n    }\n    return $array;\n}\necho \"<pre>\";\nprint_r(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n\
    \    [4] => A-\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnc9hg23b.php:46\n\
    Stack trace:\n#0 /tmp/tmpnc9hg23b.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpnc9hg23b.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeh50fzo3.php:62\n\
    Stack trace:\n#0 /tmp/tmpeh50fzo3.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpeh50fzo3.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $letters = ['A+',\
    \ 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E'];\n  $numerical_grades\
    \ = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\n  $counter\
    \ = 0;\n  $result = [];\n  foreach ($grades as $grade) {\n    while ($grade <\
    \ $numerical_grades[$counter]) {\n      $counter++;\n    }\n    $result[] = $letters[$counter];\n\
    \    $counter = 0;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplfdulk1d.php:43\n\
    Stack trace:\n#0 /tmp/tmplfdulk1d.php(51): test()\n#1 {main}\n  thrown in /tmp/tmplfdulk1d.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $arr = array();\n\
    \  foreach ($grades as $key => $value) {\n    if ($value >= 4.0) {\n      $arr[]\
    \ = 'A+';\n    }\n    elseif ($value >= 3.7) {\n      $arr[] = 'A';\n    }\n \
    \   elseif ($value >= 3.3) {\n      $arr[] = 'A-';\n    }\n    elseif ($value\
    \ >= 3.0) {\n      $arr[] = 'B+';\n    }\n    elseif ($value >= 2.7) {\n     \
    \ $arr[] = 'B';\n    }\n    elseif ($value >= 2.3) {\n      $arr[] = 'B-';\n \
    \   }\n    elseif ($value >= 2.0) {\n      $arr[] = 'C+';\n    }\n    elseif ($value\
    \ >= 1.7) {\n      $arr[] = 'C';\n    }\n    elseif ($value >= 1.3) {\n      $arr[]\
    \ = 'C-';\n    }\n    elseif ($value >= 1.0) {\n      $arr[] = 'D+';\n    }\n\
    \    elseif ($value >= 0.7) {\n      $arr[] = 'D';\n    }\n    elseif ($value\
    \ >= 0.0) {\n      $arr[] = 'D-';\n    }\n    else {\n      $arr[] = 'E';\n  \
    \  }\n  }\n  return $arr;\n}\n$grades = [4.0, 3, 1.7, 2, 3.5];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6qsxp86_.php:75\n\
    Stack trace:\n#0 /tmp/tmp6qsxp86_.php(83): test()\n#1 {main}\n  thrown in /tmp/tmp6qsxp86_.php\
    \ on line 75\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grade_equation\
    \ = array(\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\"\
    , \"D+\", \"D\", \"D-\", \"E\");\n    $letter_grade = array(\"4.0\", \"3.7\",\
    \ \"3.3\", \"3.0\", \"2.7\", \"2.3\", \"2.0\", \"1.7\", \"1.3\", \"1.0\", \"0.7\"\
    , \"0.0\", \"0.0\");\n    $final_grades = array();\n    foreach ($grades as $grade)\
    \ {\n        for ($i = 0; $i < count($letter_grade); $i++) {\n            if ($grade\
    \ > $letter_grade[$i]) {\n                array_push($final_grades, $grade_equation[$i]);\n\
    \                break;\n            }\n        }\n    }\n    return $final_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmudoqvs8.php:43\n\
    Stack trace:\n#0 /tmp/tmpmudoqvs8.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpmudoqvs8.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\tfor ($i = 0;\
    \ $i < count($grades); $i++) {\n\t\tif ($grades[$i] > 4.0) {\n\t\t\t$numerical_letter_grade[$i]\
    \ = 'E';\n\t\t} elseif ($grades[$i] > 3.7) {\n\t\t\t$numerical_letter_grade[$i]\
    \ = 'A+';\n\t\t} elseif ($grades[$i] > 3.3) {\n\t\t\t$numerical_letter_grade[$i]\
    \ = 'A';\n\t\t} elseif ($grades[$i] > 3.0) {\n\t\t\t$numerical_letter_grade[$i]\
    \ = 'A-';\n\t\t} elseif ($grades[$i] > 2.7) {\n\t\t\t$numerical_letter_grade[$i]\
    \ = 'B+';\n\t\t} elseif ($grades[$i] > 2.3) {\n\t\t\t$numerical_letter_grade[$i]\
    \ = 'B';\n\t\t} elseif ($grades[$i] > 2.0) {\n\t\t\t$numerical_letter_grade[$i]\
    \ = 'B-';\n\t\t} elseif ($grades[$i] > 1.7) {\n\t\t\t$numerical_letter_grade[$i]\
    \ = 'C+';\n\t\t} elseif ($grades[$i] > 1.3) {\n\t\t\t$numerical_letter_grade[$i]\
    \ = 'C';\n\t\t} elseif ($grades[$i] > 1.0) {\n\t\t\t$numerical_letter_grade[$i]\
    \ = 'C-';\n\t\t} elseif ($grades[$i] > 0.7) {\n\t\t\t$numerical_letter_grade[$i]\
    \ = 'D+';\n\t\t} elseif ($grades[$i] > 0.0) {\n\t\t\t$numerical_letter_grade[$i]\
    \ = 'D';\n\t\t} elseif ($grades[$i] >= 0.0) {\n\t\t\t$numerical_letter_grade[$\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprqdxls0_.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ [4.0, 3, 1.7, 2, 3.5];\n    $grades = [3.3, 3.7, 3.0, 3.9, 3.8, 2.7, 2.3, 2.0,\
    \ 2.1, 2.4, 2.6, 2.9, 2.8, 2.5, 2.2, 2.3, 1.7, 1.3, 1.0, 1.1, 1.4, 1.6, 1.9, 1.8,\
    \ 1.5, 1.2, 1.3, 0.7, 0.0, 0.0];\n    $values = [\"A+\", \"A\", \"A-\", \"B+\"\
    , \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"];\n    $keys\
    \ = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\n    $letter\
    \ = [];\n    for ($i = 0; $i < count($grades); $i++) {\n        for ($j = 0; $j\
    \ < count($keys); $j++) {\n            if ($grades[$i] > $keys[$j]) {\n      \
    \          $letter[] = $values[$j];\n                break;\n            }\n \
    \       }\n    }\n    echo implode(\" \", $letter);\n}\nnumerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]);\nnumerical_letter_grade([3.3, 3.7, 3.0, 3.9, 3.8, 2.7, 2.3,\
    \ 2.0, 2.1, 2.4, 2.6, 2.9, 2.8, 2.5, 2.2, 2.3, 1.7, 1.3, 1.0, 1.1, 1.4, 1.6, 1.9,\
    \ 1.8, 1.5, 1.2, 1.3, 0.7, 0.0, 0.0]);\n\nfunction candidate(...$args) {\n   \
    \ return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "B+ A- B A A B- C+ C C+ B- B- B B B- C+ C+ C- D+ D D+ C- C- C C C- D+ D+\
    \ D-B+ A- B A A B- C+ C C+ B- B- B B B- C+ C+ C- D+ D D+ C- C- C C C- D+ D+ D-B+\
    \ A- B A A B- C+ C C+ B- B- B B B- C+ C+ C- D+ D D+ C- C- C C C- D+ D+ D-\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpivhagzvt.php:47\nStack trace:\n\
    #0 /tmp/tmpivhagzvt.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpivhagzvt.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ explode(',', $grades);\n    $output = [];\n    foreach ($grades as $grade) {\n\
    \        if ($grade >= 4.0) {\n            $output[] = 'A+';\n        } elseif\
    \ ($grade >= 3.7) {\n            $output[] = 'A';\n        } elseif ($grade >=\
    \ 3.3) {\n            $output[] = 'A-';\n        } elseif ($grade >= 3.0) {\n\
    \            $output[] = 'B+';\n        } elseif ($grade >= 2.7) {\n         \
    \   $output[] = 'B';\n        } elseif ($grade >= 2.3) {\n            $output[]\
    \ = 'B-';\n        } elseif ($grade >= 2.0) {\n            $output[] = 'C+';\n\
    \        } elseif ($grade >= 1.7) {\n            $output[] = 'C';\n        } elseif\
    \ ($grade >= 1.3) {\n            $output[] = 'C-';\n        } elseif ($grade >=\
    \ 1.0) {\n            $output[] = 'D+';\n        } elseif ($grade >= 0.7) {\n\
    \            $output[] = 'D';\n        } elseif ($grade >= 0.0) {\n          \
    \  $output[] = 'D-';\n        } else {\n            $output[] = 'E';\n       \
    \ }\n    }\n    return $output;\n}\n$grade_equation = numerical_letter_grade('4.0,\
    \ 3, 1.7, 2, 3.5');\nvar_dump($grade_equation);\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(5) {\n  [0]=>\n  string(2) \"A+\"\n  [1]=>\n  string(2) \"B+\"\n\
    \  [2]=>\n  string(1) \"C\"\n  [3]=>\n  string(2) \"C+\"\n  [4]=>\n  string(2)\
    \ \"A-\"\n}\n\nWarning: explode() expects parameter 2 to be string, array given\
    \ in /tmp/tmpru8yotmw.php on line 24\n\nWarning: Invalid argument supplied for\
    \ foreach() in /tmp/tmpru8yotmw.php on line 26\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpru8yotmw.php:65\nStack trace:\n#0 /tmp/tmpru8yotmw.php(73):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpru8yotmw.php on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // your code\
    \ here\n    $num = count($grades);\n    for($i = 0; $i < $num; $i++){\n    \t\
    if($grades[$i] == 4.0){\n    \t\t$grades[$i] = 'A+';\n    \t}\n    \telseif($grades[$i]\
    \ > 3.7){\n    \t\t$grades[$i] = 'A';\n    \t}\n    \telseif($grades[$i] > 3.3){\n\
    \    \t\t$grades[$i] = 'A-';\n    \t}\n    \telseif($grades[$i] > 3.0){\n    \t\
    \t$grades[$i] = 'B+';\n    \t}\n    \telseif($grades[$i] > 2.7){\n    \t\t$grades[$i]\
    \ = 'B';\n    \t}\n    \telseif($grades[$i] > 2.3){\n    \t\t$grades[$i] = 'B-';\n\
    \    \t}\n    \telseif($grades[$i] > 2.0){\n    \t\t$grades[$i] = 'C+';\n    \t\
    }\n    \telseif($grades[$i] > 1.7){\n    \t\t$grades[$i] = 'C';\n    \t}\n   \
    \ \telseif($grades[$i] > 1.3){\n    \t\t$grades[$i] = 'C-';\n    \t}\n    \telseif($grades[$i]\
    \ > 1.0){\n    \t\t$grades[$i] = 'D+';\n    \t}\n    \telseif($grades[$i] > 0.7){\n\
    \    \t\t$grades[$i] = 'D';\n    \t}\n    \telseif($grades[$i] > 0.0){\n    \t\
    \t$grades[$i] = 'D-';\n    \t}\n    \telse{\n    \t\t$grades[$i] = 'E';\n    \t\
    }\n    }\n    return $grades;\n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ array_map(function($grade) {\n        if ($grade >= 4.0) {\n            return\
    \ 'A+';\n        } elseif ($grade >= 3.7) {\n            return 'A';\n       \
    \ } elseif ($grade >= 3.3) {\n            return 'A-';\n        } elseif ($grade\
    \ >= 3.0) {\n            return 'B+';\n        } elseif ($grade >= 2.7) {\n  \
    \          return 'B';\n        } elseif ($grade >= 2.3) {\n            return\
    \ 'B-';\n        } elseif ($grade >= 2.0) {\n            return 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            return 'C';\n        } elseif ($grade\
    \ >= 1.3) {\n            return 'C-';\n        } elseif ($grade >= 1.0) {\n  \
    \          return 'D+';\n        } elseif ($grade >= 0.7) {\n            return\
    \ 'D';\n        } elseif ($grade >= 0.0) {\n            return 'D-';\n       \
    \ } else {\n            return 'E';\n        }\n    }, $grades);\n    return $grades;\n\
    }\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqpyelb5k.php:60\n\
    Stack trace:\n#0 /tmp/tmpqpyelb5k.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpqpyelb5k.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $a_plus_grade\
    \ = 4.0;\n  $a_grade = 3.7;\n  $a_minus_grade = 3.3;\n  $b_plus_grade = 3.0;\n\
    \  $b_grade = 2.7;\n  $b_minus_grade = 2.3;\n  $c_plus_grade = 2.0;\n  $c_grade\
    \ = 1.7;\n  $c_minus_grade = 1.3;\n  $d_plus_grade = 1.0;\n  $d_grade = 0.7;\n\
    \  $d_minus_grade = 0.0;\n  $e_grade = 0.0;\n  $result = [];\n  foreach ($grades\
    \ as $grade) {\n    if ($grade >= $a_plus_grade) {\n      $result[] = 'A+';\n\
    \    } elseif ($grade < $a_plus_grade && $grade >= $a_grade) {\n      $result[]\
    \ = 'A';\n    } elseif ($grade < $a_grade && $grade >= $a_minus_grade) {\n   \
    \   $result[] = 'A-';\n    } elseif ($grade < $a_minus_grade && $grade >= $b_plus_grade)\
    \ {\n      $result[] = 'B+';\n    } elseif ($grade < $b_plus_grade && $grade >=\
    \ $b_grade) {\n      $result[] = 'B';\n    } elseif ($grade < $b_grade && $grade\
    \ >= $b_minus_grade) {\n      $result[] = 'B-';\n    } elseif ($grade < $b_minus_grade\
    \ && $grade >= $c_plus_grade) {\n      $result[] = 'C+';\n    } elseif ($grade\
    \ < $c_plus_grade && $grade >= $c_grade) {\n      $result[] = 'C';\n    } elseif\
    \ ($grade < $c_grade && $grade >= $c_minus_grade) {\n      $result[] = 'C-';\n\
    \    } elseif ($grade < $c_minus_grade && $grade >= $d_plus_grade) {\n      $result[]\
    \ = 'D+';\n    }\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptkhujsut.php on line 73\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t$new_grades\
    \ = [];\n\tforeach ($grades as $grade) {\n\t\tif ($grade > 4.0) {\n\t\t\tarray_push($new_grades,\
    \ 'A+');\n\t\t} elseif ($grade > 3.7) {\n\t\t\tarray_push($new_grades, 'A');\n\
    \t\t} elseif ($grade > 3.3) {\n\t\t\tarray_push($new_grades, 'A-');\n\t\t} elseif\
    \ ($grade > 3.0) {\n\t\t\tarray_push($new_grades, 'B+');\n\t\t} elseif ($grade\
    \ > 2.7) {\n\t\t\tarray_push($new_grades, 'B');\n\t\t} elseif ($grade > 2.3) {\n\
    \t\t\tarray_push($new_grades, 'B-');\n\t\t} elseif ($grade > 2.0) {\n\t\t\tarray_push($new_grades,\
    \ 'C+');\n\t\t} elseif ($grade > 1.7) {\n\t\t\tarray_push($new_grades, 'C');\n\
    \t\t} elseif ($grade > 1.3) {\n\t\t\tarray_push($new_grades, 'C-');\n\t\t} elseif\
    \ ($grade > 1.0) {\n\t\t\tarray_push($new_grades, 'D+');\n\t\t} elseif ($grade\
    \ > 0.7) {\n\t\t\tarray_push($new_grades, 'D');\n\t\t} elseif ($grade > 0.0) {\n\
    \t\t\tarray_push($new_grades, 'D-');\n\t\t} else {\n\t\t\tarray_push($new_grades,\
    \ 'E');\n\t\t}\n\t}\n\treturn $new_grades;\n}\n\nnumerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]);\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmr60ebg9.php:63\n\
    Stack trace:\n#0 /tmp/tmpmr60ebg9.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpmr60ebg9.php\
    \ on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    for ($i = 0; $i < count($grades); $i++) {\n        if ($grades[$i]\
    \ == 4.0) {\n            array_push($grades_array, 'A+');\n        } elseif ($grades[$i]\
    \ >= 3.7) {\n            array_push($grades_array, 'A');\n        } elseif ($grades[$i]\
    \ >= 3.3) {\n            array_push($grades_array, 'A-');\n        } elseif ($grades[$i]\
    \ >= 3.0) {\n            array_push($grades_array, 'B+');\n        } elseif ($grades[$i]\
    \ >= 2.7) {\n            array_push($grades_array, 'B');\n        } elseif ($grades[$i]\
    \ >= 2.3) {\n            array_push($grades_array, 'B-');\n        } elseif ($grades[$i]\
    \ >= 2.0) {\n            array_push($grades_array, 'C+');\n        } elseif ($grades[$i]\
    \ >= 1.7) {\n            array_push($grades_array, 'C');\n        } elseif ($grades[$i]\
    \ >= 1.3) {\n            array_push($grades_array, 'C-');\n        } elseif ($grades[$i]\
    \ >= 1.0) {\n            array_push($grades_array, 'D+');\n        } elseif ($grades[$i]\
    \ >= 0.7) {\n            array_push($grades_array, 'D');\n        } elseif ($grades[$i]\
    \ >= 0.0) {\n            array_push($grades_array, 'D-');\n        } else {\n\
    \            array_push($grades_array, 'E');\n        }\n    }\n    return $grades_array;\n\
    }\necho implode(', ', numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\necho '<br>';\n\
    \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "A+, B+, C, C+, A-<br>\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpvz1lydsz.php:64\nStack trace:\n#0 /tmp/tmpvz1lydsz.php(72): test()\n\
    #1 {main}\n  thrown in /tmp/tmpvz1lydsz.php on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n$grades = [4.0, 3, 1.7, 2, 3.5];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk29i37lk.php:63\n\
    Stack trace:\n#0 /tmp/tmpk29i37lk.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpk29i37lk.php\
    \ on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $result = [];\n\
    \  foreach ($grades as $grade) {\n    if ($grade >= 4.0) {\n      $result[] =\
    \ 'A+';\n    } elseif ($grade >= 3.7) {\n      $result[] = 'A';\n    } elseif\
    \ ($grade >= 3.3) {\n      $result[] = 'A-';\n    } elseif ($grade >= 3.0) {\n\
    \      $result[] = 'B+';\n    } elseif ($grade >= 2.7) {\n      $result[] = 'B';\n\
    \    } elseif ($grade >= 2.3) {\n      $result[] = 'B-';\n    } elseif ($grade\
    \ >= 2.0) {\n      $result[] = 'C+';\n    } elseif ($grade >= 1.7) {\n      $result[]\
    \ = 'C';\n    } elseif ($grade >= 1.3) {\n      $result[] = 'C-';\n    } elseif\
    \ ($grade >= 1.0) {\n      $result[] = 'D+';\n    } elseif ($grade >= 0.7) {\n\
    \      $result[] = 'D';\n    } elseif ($grade >= 0.0) {\n      $result[] = 'D-';\n\
    \    } else {\n      $result[] = 'E';\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm5haqy62.php:62\n\
    Stack trace:\n#0 /tmp/tmpm5haqy62.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpm5haqy62.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t$letterGrades\
    \ = array();\n\tforeach ($grades as $grade) {\n\t\tif ($grade == 4.0) {\n\t\t\t\
    array_push($letterGrades, \"A+\");\n\t\t} elseif ($grade >= 3.7) {\n\t\t\tarray_push($letterGrades,\
    \ \"A\");\n\t\t} elseif ($grade >= 3.3) {\n\t\t\tarray_push($letterGrades, \"\
    A-\");\n\t\t} elseif ($grade >= 3.0) {\n\t\t\tarray_push($letterGrades, \"B+\"\
    );\n\t\t} elseif ($grade >= 2.7) {\n\t\t\tarray_push($letterGrades, \"B\");\n\t\
    \t} elseif ($grade >= 2.3) {\n\t\t\tarray_push($letterGrades, \"B-\");\n\t\t}\
    \ elseif ($grade >= 2.0) {\n\t\t\tarray_push($letterGrades, \"C+\");\n\t\t} elseif\
    \ ($grade >= 1.7) {\n\t\t\tarray_push($letterGrades, \"C\");\n\t\t} elseif ($grade\
    \ >= 1.3) {\n\t\t\tarray_push($letterGrades, \"C-\");\n\t\t} elseif ($grade >=\
    \ 1.0) {\n\t\t\tarray_push($letterGrades, \"D+\");\n\t\t} elseif ($grade >= 0.7)\
    \ {\n\t\t\tarray_push($letterGrades, \"D\");\n\t\t} elseif ($grade >= 0.0) {\n\
    \t\t\tarray_push($letterGrades, \"D-\");\n\t\t} else {\n\t\t\tarray_push($letterGrades,\
    \ \"E\");\n\t\t}\n\t}\n\treturn $letterGrades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5gp48hna.php:62\n\
    Stack trace:\n#0 /tmp/tmp5gp48hna.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp5gp48hna.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Write your\
    \ code here\n    $letter = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\"\
    , \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"];\n    $numbers = [4.0, 3.7, 3.3,\
    \ 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\n    $result = [];\n    foreach\
    \ ($grades as $g) {\n        $i = 0;\n        while ($g < $numbers[$i]) {\n  \
    \          $i++;\n        }\n        $result[] = $letter[$i];\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb961mnpu.php:43\n\
    Stack trace:\n#0 /tmp/tmpb961mnpu.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpb961mnpu.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_letter\
    \ = array();\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n\
    \            $grades_letter[] = 'A+';\n        } elseif ($grade >= 3.7) {\n  \
    \          $grades_letter[] = 'A';\n        } elseif ($grade >= 3.3) {\n     \
    \       $grades_letter[] = 'A-';\n        } elseif ($grade >= 3.0) {\n       \
    \     $grades_letter[] = 'B+';\n        } elseif ($grade >= 2.7) {\n         \
    \   $grades_letter[] = 'B';\n        } elseif ($grade >= 2.3) {\n            $grades_letter[]\
    \ = 'B-';\n        } elseif ($grade >= 2.0) {\n            $grades_letter[] =\
    \ 'C+';\n        } elseif ($grade >= 1.7) {\n            $grades_letter[] = 'C';\n\
    \        } elseif ($grade >= 1.3) {\n            $grades_letter[] = 'C-';\n  \
    \      } elseif ($grade >= 1.0) {\n            $grades_letter[] = 'D+';\n    \
    \    } elseif ($grade >= 0.7) {\n            $grades_letter[] = 'D';\n       \
    \ } elseif ($grade >= 0.0) {\n            $grades_letter[] = 'D-';\n        }\
    \ else {\n            $grades_letter[] = 'E';\n        }\n    }\n    return $grades_letter;\n\
    }\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf09ui8j4.php:61\n\
    Stack trace:\n#0 /tmp/tmpf09ui8j4.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpf09ui8j4.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = array();\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n\
    \            $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n  \
    \          $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n     \
    \       $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n       \
    \     $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n         \
    \   $letter_grades[] = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[]\
    \ = 'B-';\n        } elseif ($grade >= 2.0) {\n            $letter_grades[] =\
    \ 'C+';\n        } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n\
    \        } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n  \
    \      } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n    \
    \    } elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n       \
    \ } elseif ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        }\
    \ else {\n            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmoj1nqxi.php:61\n\
    Stack trace:\n#0 /tmp/tmpmoj1nqxi.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpmoj1nqxi.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\treturn array_map(function($gpa)\
    \ {\n\t\tif ($gpa == 4.0) {\n\t\t\treturn 'A+';\n\t\t} elseif ($gpa > 3.7) {\n\
    \t\t\treturn 'A';\n\t\t} elseif ($gpa > 3.3) {\n\t\t\treturn 'A-';\n\t\t} elseif\
    \ ($gpa > 3.0) {\n\t\t\treturn 'B+';\n\t\t} elseif ($gpa > 2.7) {\n\t\t\treturn\
    \ 'B';\n\t\t} elseif ($gpa > 2.3) {\n\t\t\treturn 'B-';\n\t\t} elseif ($gpa >\
    \ 2.0) {\n\t\t\treturn 'C+';\n\t\t} elseif ($gpa > 1.7) {\n\t\t\treturn 'C';\n\
    \t\t} elseif ($gpa > 1.3) {\n\t\t\treturn 'C-';\n\t\t} elseif ($gpa > 1.0) {\n\
    \t\t\treturn 'D+';\n\t\t} elseif ($gpa > 0.7) {\n\t\t\treturn 'D';\n\t\t} elseif\
    \ ($gpa > 0.0) {\n\t\t\treturn 'D-';\n\t\t} else {\n\t\t\treturn 'E';\n\t\t}\n\
    \t}, $grades);\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Your code\
    \ here\n    $solution = [];\n    for ($i = 0; $i < count($grades); $i++) {\n \
    \       $gpa = $grades[$i];\n        if ($gpa == 4.0) {\n            array_push($solution,\
    \ \"A+\");\n        } else if ($gpa > 3.7) {\n            array_push($solution,\
    \ \"A\");\n        } else if ($gpa > 3.3) {\n            array_push($solution,\
    \ \"A-\");\n        } else if ($gpa > 3.0) {\n            array_push($solution,\
    \ \"B+\");\n        } else if ($gpa > 2.7) {\n            array_push($solution,\
    \ \"B\");\n        } else if ($gpa > 2.3) {\n            array_push($solution,\
    \ \"B-\");\n        } else if ($gpa > 2.0) {\n            array_push($solution,\
    \ \"C+\");\n        } else if ($gpa > 1.7) {\n            array_push($solution,\
    \ \"C\");\n        } else if ($gpa > 1.3) {\n            array_push($solution,\
    \ \"C-\");\n        } else if ($gpa > 1.0) {\n            array_push($solution,\
    \ \"D+\");\n        } else if ($gpa > 0.7) {\n            array_push($solution,\
    \ \"D\");\n        } else if ($gpa > 0.0) {\n            array_push($solution,\
    \ \"D-\");\n        } else {\n            array_push($solution, \"E\");\n    \
    \    }\n    }\n    return $solution;\n}\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $final_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade == 4.0) {\n   \
    \         $final_grades[] = 'A+';\n        } elseif ($grade > 3.7) {\n       \
    \     $final_grades[] = 'A';\n        } elseif ($grade > 3.3) {\n            $final_grades[]\
    \ = 'A-';\n        } elseif ($grade > 3.0) {\n            $final_grades[] = 'B+';\n\
    \        } elseif ($grade > 2.7) {\n            $final_grades[] = 'B';\n     \
    \   } elseif ($grade > 2.3) {\n            $final_grades[] = 'B-';\n        }\
    \ elseif ($grade > 2.0) {\n            $final_grades[] = 'C+';\n        } elseif\
    \ ($grade > 1.7) {\n            $final_grades[] = 'C';\n        } elseif ($grade\
    \ > 1.3) {\n            $final_grades[] = 'C-';\n        } elseif ($grade > 1.0)\
    \ {\n            $final_grades[] = 'D+';\n        } elseif ($grade > 0.7) {\n\
    \            $final_grades[] = 'D';\n        } elseif ($grade >= 0.0) {\n    \
    \        $final_grades[] = 'D-';\n        } else {\n            $final_grades[]\
    \ = 'E';\n        }\n    }\n    return $final_grades;\n}\nprint_r(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]));\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B\n    [2] => C-\n    [3] => C\n  \
    \  [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoygulre4.php:65\n\
    Stack trace:\n#0 /tmp/tmpoygulre4.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpoygulre4.php\
    \ on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = array();\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n\
    \            $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n  \
    \          $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n     \
    \       $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n       \
    \     $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n         \
    \   $letter_grades[] = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[]\
    \ = 'B-';\n        } elseif ($grade >= 2.0) {\n            $letter_grades[] =\
    \ 'C+';\n        } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n\
    \        } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n  \
    \      } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n    \
    \    } elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n       \
    \ } elseif ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        }\
    \ else {\n            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqu1knuih.php:62\n\
    Stack trace:\n#0 /tmp/tmpqu1knuih.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpqu1knuih.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Write your\
    \ code here\n    $letter_grade = array();\n    foreach ($grades as $g) {\n   \
    \     if ($g >= 4.0) {\n            $letter_grade[] = 'A+';\n        } elseif\
    \ ($g >= 3.7) {\n            $letter_grade[] = 'A';\n        } elseif ($g >= 3.3)\
    \ {\n            $letter_grade[] = 'A-';\n        } elseif ($g >= 3.0) {\n   \
    \         $letter_grade[] = 'B+';\n        } elseif ($g >= 2.7) {\n          \
    \  $letter_grade[] = 'B';\n        } elseif ($g >= 2.3) {\n            $letter_grade[]\
    \ = 'B-';\n        } elseif ($g >= 2.0) {\n            $letter_grade[] = 'C+';\n\
    \        } elseif ($g >= 1.7) {\n            $letter_grade[] = 'C';\n        }\
    \ elseif ($g >= 1.3) {\n            $letter_grade[] = 'C-';\n        } elseif\
    \ ($g >= 1.0) {\n            $letter_grade[] = 'D+';\n        } elseif ($g >=\
    \ 0.7) {\n            $letter_grade[] = 'D';\n        } elseif ($g >= 0.0) {\n\
    \            $letter_grade[] = 'D-';\n        } else {\n            $letter_grade[]\
    \ = 'E';\n        }\n    }\n    return $letter_grade;\n}\n\necho(\"<pre>\");\n\
    print_r(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\necho(\"</pre>\");\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n\
    \    [4] => A-\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfojtze9_.php:66\n\
    Stack trace:\n#0 /tmp/tmpfojtze9_.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpfojtze9_.php\
    \ on line 66\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        switch (true) {\n          \
    \  case $grade > 3.7:\n                $result[] = 'A+';\n                break;\n\
    \            case $grade > 3.3:\n                $result[] = 'A';\n          \
    \      break;\n            case $grade > 3.0:\n                $result[] = 'A-';\n\
    \                break;\n            case $grade > 2.7:\n                $result[]\
    \ = 'B+';\n                break;\n            case $grade > 2.3:\n          \
    \      $result[] = 'B';\n                break;\n            case $grade > 2.0:\n\
    \                $result[] = 'B-';\n                break;\n            case $grade\
    \ > 1.7:\n                $result[] = 'C+';\n                break;\n        \
    \    case $grade > 1.3:\n                $result[] = 'C';\n                break;\n\
    \            case $grade > 1.0:\n                $result[] = 'C-';\n         \
    \       break;\n            case $grade > 0.7:\n                $result[] = 'D+';\n\
    \                break;\n            case $grade > 0.0:\n                $result[]\
    \ = 'D';\n                break;\n            case $grade == 0.0:\n          \
    \      $result[] = 'E';\n                break;\n            default:\n      \
    \          $result[] = 'D-';\n                break;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpppel5ehq.php:76\n\
    Stack trace:\n#0 /tmp/tmpppel5ehq.php(84): test()\n#1 {main}\n  thrown in /tmp/tmpppel5ehq.php\
    \ on line 76\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_letter\
    \ = [];\n    foreach ($grades as $key => $value) {\n        if ($value >= 4.0)\
    \ {\n            $grades_letter[] = 'A+';\n        } elseif ($value > 3.7) {\n\
    \            $grades_letter[] = 'A';\n        } elseif ($value > 3.3) {\n    \
    \        $grades_letter[] = 'A-';\n        } elseif ($value > 3.0) {\n       \
    \     $grades_letter[] = 'B+';\n        } elseif ($value > 2.7) {\n          \
    \  $grades_letter[] = 'B';\n        } elseif ($value > 2.3) {\n            $grades_letter[]\
    \ = 'B-';\n        } elseif ($value > 2.0) {\n            $grades_letter[] = 'C+';\n\
    \        } elseif ($value > 1.7) {\n            $grades_letter[] = 'C';\n    \
    \    } elseif ($value > 1.3) {\n            $grades_letter[] = 'C-';\n       \
    \ } elseif ($value > 1.0) {\n            $grades_letter[] = 'D+';\n        } elseif\
    \ ($value > 0.7) {\n            $grades_letter[] = 'D';\n        } elseif ($value\
    \ > 0.0) {\n            $grades_letter[] = 'D-';\n        } else {\n         \
    \   $grades_letter[] = 'E';\n        }\n    }\n    return $grades_letter;\n}\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letters =\
    \ [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\"\
    , \"D\", \"D-\", \"E\"];\n    $grade_score = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0,\
    \ 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\n    $result = [];\n    foreach ($grades as $grade)\
    \ {\n        $index = 0;\n        while ($grade < $grade_score[$index]) {\n  \
    \          $index++;\n        }\n        $result[] = $letters[$index];\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphkzn4fha.php:42\n\
    Stack trace:\n#0 /tmp/tmphkzn4fha.php(50): test()\n#1 {main}\n  thrown in /tmp/tmphkzn4fha.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  \n  // Code\
    \ here\n  $array = [];\n  foreach($grades as $grade){\n      if($grade>=4.0){\n\
    \          $array[] = \"A+\";\n      }elseif($grade>=3.7){\n          $array[]\
    \ = \"A\";\n      }elseif($grade>=3.3){\n          $array[] = \"A-\";\n      }elseif($grade>=3.0){\n\
    \          $array[] = \"B+\";\n      }elseif($grade>=2.7){\n          $array[]\
    \ = \"B\";\n      }elseif($grade>=2.3){\n          $array[] = \"B-\";\n      }elseif($grade>=2.0){\n\
    \          $array[] = \"C+\";\n      }elseif($grade>=1.7){\n          $array[]\
    \ = \"C\";\n      }elseif($grade>=1.3){\n          $array[] = \"C-\";\n      }elseif($grade>=1.0){\n\
    \          $array[] = \"D+\";\n      }elseif($grade>=0.7){\n          $array[]\
    \ = \"D\";\n      }elseif($grade>=0.0){\n          $array[] = \"D-\";\n      }else{\n\
    \          $array[] = \"E\";\n      }\n  }\n  return $array;\n}\n\n$grades = [4.0,\
    \ 3, 1.7, 2, 3.5];\necho \"<pre>\";\nprint_r(numerical_letter_grade($grades));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n\
    \    [4] => A-\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy3cm92tj.php:68\n\
    Stack trace:\n#0 /tmp/tmpy3cm92tj.php(76): test()\n#1 {main}\n  thrown in /tmp/tmpy3cm92tj.php\
    \ on line 68\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t$letter = array();\n\
    \tforeach ($grades as $value) {\n\t\tif ($value == 4.0) {\n\t\t\t$letter[] = 'A+';\n\
    \t\t} elseif ($value > 3.7) {\n\t\t\t$letter[] = 'A';\n\t\t} elseif ($value >\
    \ 3.3) {\n\t\t\t$letter[] = 'A-';\n\t\t} elseif ($value > 3.0) {\n\t\t\t$letter[]\
    \ = 'B+';\n\t\t} elseif ($value > 2.7) {\n\t\t\t$letter[] = 'B';\n\t\t} elseif\
    \ ($value > 2.3) {\n\t\t\t$letter[] = 'B-';\n\t\t} elseif ($value > 2.0) {\n\t\
    \t\t$letter[] = 'C+';\n\t\t} elseif ($value > 1.7) {\n\t\t\t$letter[] = 'C';\n\
    \t\t} elseif ($value > 1.3) {\n\t\t\t$letter[] = 'C-';\n\t\t} elseif ($value >\
    \ 1.0) {\n\t\t\t$letter[] = 'D+';\n\t\t} elseif ($value > 0.7) {\n\t\t\t$letter[]\
    \ = 'D';\n\t\t} elseif ($value > 0.0) {\n\t\t\t$letter[] = 'D-';\n\t\t} else {\n\
    \t\t\t$letter[] = 'E';\n\t\t}\n\t}\n\treturn $letter;\n}\necho implode(', ', numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]));\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: A+, B, C-, C, A-
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $result = [];\n\
    \  foreach ($grades as $grade) {\n    if ($grade == 4.0) {\n      $result[] =\
    \ 'A+';\n    } elseif ($grade > 3.7) {\n      $result[] = 'A';\n    } elseif ($grade\
    \ > 3.3) {\n      $result[] = 'A-';\n    } elseif ($grade > 3.0) {\n      $result[]\
    \ = 'B+';\n    } elseif ($grade > 2.7) {\n      $result[] = 'B';\n    } elseif\
    \ ($grade > 2.3) {\n      $result[] = 'B-';\n    } elseif ($grade > 2.0) {\n \
    \     $result[] = 'C+';\n    } elseif ($grade > 1.7) {\n      $result[] = 'C';\n\
    \    } elseif ($grade > 1.3) {\n      $result[] = 'C-';\n    } elseif ($grade\
    \ > 1.0) {\n      $result[] = 'D+';\n    } elseif ($grade > 0.7) {\n      $result[]\
    \ = 'D';\n    } elseif ($grade > 0.0) {\n      $result[] = 'D-';\n    } else {\n\
    \      $result[] = 'E';\n    }\n  }\n  return $result;\n}\nprint_r(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]));\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B\n    [2] => C-\n    [3] => C\n  \
    \  [4] => A-\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Write code\
    \ here\n    $result = [];\n    foreach ($grades as $grade) {\n        if($grade>=\
    \ 4.0){\n            $result[] = 'A+';\n        }elseif($grade>= 3.7){\n     \
    \       $result[] = 'A';\n        }elseif($grade>= 3.3){\n            $result[]\
    \ = 'A-';\n        }elseif($grade>= 3.0){\n            $result[] = 'B+';\n   \
    \     }elseif($grade>= 2.7){\n            $result[] = 'B';\n        }elseif($grade>=\
    \ 2.3){\n            $result[] = 'B-';\n        }elseif($grade>= 2.0){\n     \
    \       $result[] = 'C+';\n        }elseif($grade>= 1.7){\n            $result[]\
    \ = 'C';\n        }elseif($grade>= 1.3){\n            $result[] = 'C-';\n    \
    \    }elseif($grade>= 1.0){\n            $result[] = 'D+';\n        }elseif($grade>=\
    \ 0.7){\n            $result[] = 'D';\n        }elseif($grade>= 0.0){\n      \
    \      $result[] = 'D-';\n        }else{\n            $result[] = 'E';\n     \
    \   }\n    }\n    return $result;\n}\n$output = numerical_letter_grade([4.0, 3,\
    \ 1.7, 2, 3.5]);\necho \"<pre>\";\nprint_r($output);\necho \"</pre>\";\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n\
    \    [4] => A-\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp1gy1ho_.php:66\n\
    Stack trace:\n#0 /tmp/tmpp1gy1ho_.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpp1gy1ho_.php\
    \ on line 66\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = array();\n    foreach ($grades as $grade) {\n        $numerical_grade = (float)$grade;\n\
    \        if ($numerical_grade >= 4.0) {\n            $letter_grades[] = 'A+';\n\
    \        } else if ($numerical_grade >= 3.7) {\n            $letter_grades[] =\
    \ 'A';\n        } else if ($numerical_grade >= 3.3) {\n            $letter_grades[]\
    \ = 'A-';\n        } else if ($numerical_grade >= 3.0) {\n            $letter_grades[]\
    \ = 'B+';\n        } else if ($numerical_grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } else if ($numerical_grade >= 2.3) {\n            $letter_grades[]\
    \ = 'B-';\n        } else if ($numerical_grade >= 2.0) {\n            $letter_grades[]\
    \ = 'C+';\n        } else if ($numerical_grade >= 1.7) {\n            $letter_grades[]\
    \ = 'C';\n        } else if ($numerical_grade >= 1.3) {\n            $letter_grades[]\
    \ = 'C-';\n        } else if ($numerical_grade >= 1.0) {\n            $letter_grades[]\
    \ = 'D+';\n        } else if ($numerical_grade >= 0.7) {\n            $letter_grades[]\
    \ = 'D';\n        } else if ($numerical_grade >= 0.0) {\n            $letter_grades[]\
    \ = 'D-';\n        } else {\n            $letter_grades[] = 'E';\n        }\n\
    \    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt53xt957.php:63\n\
    Stack trace:\n#0 /tmp/tmpt53xt957.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpt53xt957.php\
    \ on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $numerical_grade\
    \ = $grades;\n    $letter_grade = '';\n    $final_letter_grade = [];\n    foreach\
    \ ($numerical_grade as $score) {\n        switch ($score) {\n            case\
    \ ($score >= 4.0):\n                $letter_grade = 'A+';\n                break;\n\
    \            case ($score >= 3.7):\n                $letter_grade = 'A';\n   \
    \             break;\n            case ($score >= 3.3):\n                $letter_grade\
    \ = 'A-';\n                break;\n            case ($score >= 3.0):\n       \
    \         $letter_grade = 'B+';\n                break;\n            case ($score\
    \ >= 2.7):\n                $letter_grade = 'B';\n                break;\n   \
    \         case ($score >= 2.3):\n                $letter_grade = 'B-';\n     \
    \           break;\n            case ($score >= 2.0):\n                $letter_grade\
    \ = 'C+';\n                break;\n            case ($score >= 1.7):\n       \
    \         $letter_grade = 'C';\n                break;\n            case ($score\
    \ >= 1.3):\n                $letter_grade = 'C-';\n                break;\n  \
    \          case ($score >= 1.0):\n                $letter_grade = 'D+';\n    \
    \            break;\n            case ($score >= 0.7):\n                $letter_grade\
    \ = 'D';\n                break;\n            case ($score >= 0.0):\n        \
    \        $letter_grade = 'D-';\n                break;\n            case ($score\
    \ <= 0.0):\n                $letter_grade = 'E';\n                break;\n   \
    \     }\n        array_push($final_letter_grade, $letter_grade);\n    }\n    return\
    \ $final_letter_grade;\n}\nprint_r(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp08ik1t16.php:79\n\
    Stack trace:\n#0 /tmp/tmp08ik1t16.php(87): test()\n#1 {main}\n  thrown in /tmp/tmp08ik1t16.php\
    \ on line 79\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph4qigb5f.php:61\n\
    Stack trace:\n#0 /tmp/tmph4qigb5f.php(69): test()\n#1 {main}\n  thrown in /tmp/tmph4qigb5f.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = array();\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n\
    \            $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n  \
    \          $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n     \
    \       $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n       \
    \     $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n         \
    \   $letter_grades[] = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[]\
    \ = 'B-';\n        } elseif ($grade >= 2.0) {\n            $letter_grades[] =\
    \ 'C+';\n        } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n\
    \        } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n  \
    \      } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n    \
    \    } elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n       \
    \ } elseif ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        }\
    \ else {\n            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n$grades = [4.0, 3, 1.7, 2, 3.5];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn_xp4_gq.php:63\n\
    Stack trace:\n#0 /tmp/tmpn_xp4_gq.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpn_xp4_gq.php\
    \ on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t$grades_converted\
    \ = [];\n\tforeach ($grades as $grade) {\n\t\t$grades_converted[] = grade_equation($grade);\n\
    \t}\n\treturn $grades_converted;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function grade_equation()\
    \ in /tmp/tmpsrly45j6.php:26\nStack trace:\n#0 /tmp/tmpsrly45j6.php(32): numerical_letter_grade(Array)\n\
    #1 /tmp/tmpsrly45j6.php(36): candidate(Array)\n#2 /tmp/tmpsrly45j6.php(44): test()\n\
    #3 {main}\n  thrown in /tmp/tmpsrly45j6.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades = [\n\
    \    'a+' => 4.0,\n    'a' => 3.7,\n    'a-' => 3.3,\n    'b+' => 3.0,\n    'b'\
    \ => 2.7,\n    'b-' => 2.3,\n    'c+' => 2.0,\n    'c' => 1.7,\n    'c-' => 1.3,\n\
    \    'd+' => 1.0,\n    'd' => 0.7,\n    'd-' => 0.0,\n    'e' => 0.0\n  ];\n \
    \ $return = [];\n  foreach ($grades as $key => $value) {\n    $return[] = $key;\n\
    \  }\n  return $return;\n}\nvar_dump(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(13) {\n  [0]=>\n  string(2) \"a+\"\n  [1]=>\n  string(1) \"a\"\n\
    \  [2]=>\n  string(2) \"a-\"\n  [3]=>\n  string(2) \"b+\"\n  [4]=>\n  string(1)\
    \ \"b\"\n  [5]=>\n  string(2) \"b-\"\n  [6]=>\n  string(2) \"c+\"\n  [7]=>\n \
    \ string(1) \"c\"\n  [8]=>\n  string(2) \"c-\"\n  [9]=>\n  string(2) \"d+\"\n\
    \  [10]=>\n  string(1) \"d\"\n  [11]=>\n  string(2) \"d-\"\n  [12]=>\n  string(1)\
    \ \"e\"\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyonwpl3h.php:51\n\
    Stack trace:\n#0 /tmp/tmpyonwpl3h.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpyonwpl3h.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $num_to_letter\
    \ = array(\n        4.0 => 'A+',\n        3.7 => 'A',\n        3.3 => 'A-',\n\
    \        3.0 => 'B+',\n        2.7 => 'B',\n        2.3 => 'B-',\n        2.0\
    \ => 'C+',\n        1.7 => 'C',\n        1.3 => 'C-',\n        1.0 => 'D+',\n\
    \        0.7 => 'D',\n        0.0 => 'D-',\n        'E' => 'E'\n    );\n    $letter_grades\
    \ = array();\n    foreach ($grades as $grade) {\n        $letter_grades[] = $num_to_letter[$grade];\n\
    \    }\n    return $letter_grades;\n}\n\n$grades = [4.0, 3, 1.7, 2, 3.5];\n$letter_grades\
    \ = numerical_letter_grade($grades);\nprint_r($letter_grades);\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => D+\n    [3] => C+\n\
    \    [4] => B+\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4sftgix6.php:54\n\
    Stack trace:\n#0 /tmp/tmp4sftgix6.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp4sftgix6.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $conversion\
    \ = array(\n    4.0 => 'A+',\n    3.7 => 'A',\n    3.3 => 'A-',\n    3.0 => 'B+',\n\
    \    2.7 => 'B',\n    2.3 => 'B-',\n    2.0 => 'C+',\n    1.7 => 'C',\n    1.3\
    \ => 'C-',\n    1.0 => 'D+',\n    0.7 => 'D',\n    0.0 => 'D-',\n    -1.0 => 'E'\n\
    \  );\n  $result = array();\n  foreach ($grades as $grade) {\n    $letter_grade\
    \ = '';\n    foreach ($conversion as $value => $key) {\n      if ($grade >= $value)\
    \ {\n        $letter_grade = $key;\n        break;\n      }\n    }\n    $result[]\
    \ = $letter_grade;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgr80o0ui.php:58\n\
    Stack trace:\n#0 /tmp/tmpgr80o0ui.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpgr80o0ui.php\
    \ on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades_letters\
    \ = array();\n  foreach ($grades as $key => $value) {\n    if ($value >= 4.0)\
    \ {\n      $grades_letters[] = 'A+';\n    } elseif ($value >= 3.7) {\n      $grades_letters[]\
    \ = 'A';\n    } elseif ($value >= 3.3) {\n      $grades_letters[] = 'A-';\n  \
    \  } elseif ($value >= 3.0) {\n      $grades_letters[] = 'B+';\n    } elseif ($value\
    \ >= 2.7) {\n      $grades_letters[] = 'B';\n    } elseif ($value >= 2.3) {\n\
    \      $grades_letters[] = 'B-';\n    } elseif ($value >= 2.0) {\n      $grades_letters[]\
    \ = 'C+';\n    } elseif ($value >= 1.7) {\n      $grades_letters[] = 'C';\n  \
    \  } elseif ($value >= 1.3) {\n      $grades_letters[] = 'C-';\n    } elseif ($value\
    \ >= 1.0) {\n      $grades_letters[] = 'D+';\n    } elseif ($value >= 0.7) {\n\
    \      $grades_letters[] = 'D';\n    } elseif ($value >= 0.0) {\n      $grades_letters[]\
    \ = 'D-';\n    } else {\n      $grades_letters[] = 'E';\n    }\n  }\n  return\
    \ $grades_letters;\n}\nprint_r(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n\
    \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9q0r_kyq.php:63\n\
    Stack trace:\n#0 /tmp/tmp9q0r_kyq.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp9q0r_kyq.php\
    \ on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    return array_map(function($grade)\
    \ {\n        if ($grade >= 4.0) {\n            return 'A+';\n        } elseif\
    \ ($grade >= 3.7) {\n            return 'A';\n        } elseif ($grade >= 3.3)\
    \ {\n            return 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  return 'B+';\n        } elseif ($grade >= 2.7) {\n            return 'B';\n\
    \        } elseif ($grade >= 2.3) {\n            return 'B-';\n        } elseif\
    \ ($grade >= 2.0) {\n            return 'C+';\n        } elseif ($grade >= 1.7)\
    \ {\n            return 'C';\n        } elseif ($grade >= 1.3) {\n           \
    \ return 'C-';\n        } elseif ($grade >= 1.0) {\n            return 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            return 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            return 'D-';\n        } else {\n            return\
    \ 'E';\n        }\n    }, $grades);\n}\n\nfunction candidate(...$args) {\n   \
    \ return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphhb9ys6r.php:60\n\
    Stack trace:\n#0 /tmp/tmphhb9ys6r.php(68): test()\n#1 {main}\n  thrown in /tmp/tmphhb9ys6r.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Write your\
    \ code here...\n}\n\nprint_r(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n\
    echo '<br>';\nprint_r(numerical_letter_grade([1.0, 2.5, 3.5, 3.9, 4.0]));\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp5llvg1x.php:35\n\
    Stack trace:\n#0 /tmp/tmpp5llvg1x.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpp5llvg1x.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $value) {\n        if ($value > 4.0) {\n      \
    \      $result[] = 'A+';\n        } elseif ($value > 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($value > 3.3) {\n            $result[] = 'A-';\n \
    \       } elseif ($value > 3.0) {\n            $result[] = 'B+';\n        } elseif\
    \ ($value > 2.7) {\n            $result[] = 'B';\n        } elseif ($value > 2.3)\
    \ {\n            $result[] = 'B-';\n        } elseif ($value > 2.0) {\n      \
    \      $result[] = 'C+';\n        } elseif ($value > 1.7) {\n            $result[]\
    \ = 'C';\n        } elseif ($value > 1.3) {\n            $result[] = 'C-';\n \
    \       } elseif ($value > 1.0) {\n            $result[] = 'D+';\n        } elseif\
    \ ($value > 0.7) {\n            $result[] = 'D';\n        } elseif ($value > 0.0)\
    \ {\n            $result[] = 'D-';\n        } else {\n            $result[] =\
    \ 'E';\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbd1wgxbj.php:61\n\
    Stack trace:\n#0 /tmp/tmpbd1wgxbj.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpbd1wgxbj.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_letters\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade == 4.0) {\n   \
    \         $grades_letters[] = 'A+';\n        } elseif ($grade > 3.7) {\n     \
    \       $grades_letters[] = 'A';\n        } elseif ($grade > 3.3) {\n        \
    \    $grades_letters[] = 'A-';\n        } elseif ($grade > 3.0) {\n          \
    \  $grades_letters[] = 'B+';\n        } elseif ($grade > 2.7) {\n            $grades_letters[]\
    \ = 'B';\n        } elseif ($grade > 2.3) {\n            $grades_letters[] = 'B-';\n\
    \        } elseif ($grade > 2.0) {\n            $grades_letters[] = 'C+';\n  \
    \      } elseif ($grade > 1.7) {\n            $grades_letters[] = 'C';\n     \
    \   } elseif ($grade > 1.3) {\n            $grades_letters[] = 'C-';\n       \
    \ } elseif ($grade > 1.0) {\n            $grades_letters[] = 'D+';\n        }\
    \ elseif ($grade > 0.7) {\n            $grades_letters[] = 'D';\n        } elseif\
    \ ($grade > 0.0) {\n            $grades_letters[] = 'D-';\n        } else {\n\
    \            $grades_letters[] = 'E';\n        }\n    }\n    return $grades_letters;\n\
    }\n\n$grades = [4.0, 3, 1.7, 2, 3.5];\necho implode(', ', numerical_letter_grade($grades))\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "A+, B, C-, C, A-\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grade_list\
    \ = array();\n  foreach ($grades as $grade) {\n    if ($grade > 4.0) {\n     \
    \ $grade_list[] = 'A+';\n    } elseif ($grade > 3.7) {\n      $grade_list[] =\
    \ 'A';\n    } elseif ($grade > 3.3) {\n      $grade_list[] = 'A-';\n    } elseif\
    \ ($grade > 3.0) {\n      $grade_list[] = 'B+';\n    } elseif ($grade > 2.7) {\n\
    \      $grade_list[] = 'B';\n    } elseif ($grade > 2.3) {\n      $grade_list[]\
    \ = 'B-';\n    } elseif ($grade > 2.0) {\n      $grade_list[] = 'C+';\n    } elseif\
    \ ($grade > 1.7) {\n      $grade_list[] = 'C';\n    } elseif ($grade > 1.3) {\n\
    \      $grade_list[] = 'C-';\n    } elseif ($grade > 1.0) {\n      $grade_list[]\
    \ = 'D+';\n    } elseif ($grade > 0.7) {\n      $grade_list[] = 'D';\n    } elseif\
    \ ($grade > 0.0) {\n      $grade_list[] = 'D-';\n    } else {\n      $grade_list[]\
    \ = 'E';\n    }\n  }\n  return $grade_list;\n}\n\nprint_r(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5])); // ['A+', 'B', 'C-', 'C', 'A-']\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A\n    [1] => B\n    [2] => C-\n    [3] => C\n   \
    \ [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjybihhmw.php:64\n\
    Stack trace:\n#0 /tmp/tmpjybihhmw.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpjybihhmw.php\
    \ on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t$grades = array_map(function($value)\
    \ {\n\t\tif ($value >= 4.0) {\n\t\t\treturn 'A+';\n\t\t} elseif ($value >= 3.7)\
    \ {\n\t\t\treturn 'A';\n\t\t} elseif ($value >= 3.3) {\n\t\t\treturn 'A-';\n\t\
    \t} elseif ($value >= 3.0) {\n\t\t\treturn 'B+';\n\t\t} elseif ($value >= 2.7)\
    \ {\n\t\t\treturn 'B';\n\t\t} elseif ($value >= 2.3) {\n\t\t\treturn 'B-';\n\t\
    \t} elseif ($value >= 2.0) {\n\t\t\treturn 'C+';\n\t\t} elseif ($value >= 1.7)\
    \ {\n\t\t\treturn 'C';\n\t\t} elseif ($value >= 1.3) {\n\t\t\treturn 'C-';\n\t\
    \t} elseif ($value >= 1.0) {\n\t\t\treturn 'D+';\n\t\t} elseif ($value >= 0.7)\
    \ {\n\t\t\treturn 'D';\n\t\t} elseif ($value > 0.0) {\n\t\t\treturn 'D-';\n\t\t\
    } else {\n\t\t\treturn 'E';\n\t\t}\n\t}, $grades);\n\treturn $grades;\n}\n$grades\
    \ = [4.0, 3, 1.7, 2, 3.5];\nprint_r(numerical_letter_grade($grades));\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptp1yw1lf.php:62\n\
    Stack trace:\n#0 /tmp/tmptp1yw1lf.php(70): test()\n#1 {main}\n  thrown in /tmp/tmptp1yw1lf.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grade_map =\
    \ array(\"4.0\" => \"A+\",\n                     \"3.7\" => \"A\",\n         \
    \            \"3.3\" => \"A-\",\n                     \"3.0\" => \"B+\",\n   \
    \                  \"2.7\" => \"B\",\n                     \"2.3\" => \"B-\",\n\
    \                     \"2.0\" => \"C+\",\n                     \"1.7\" => \"C\"\
    ,\n                     \"1.3\" => \"C-\",\n                     \"1.0\" => \"\
    D+\",\n                     \"0.7\" => \"D\",\n                     \"0.0\" =>\
    \ \"D-\",\n                     \"-1\" => \"E\"\n                    );\n  $letter_grades\
    \ = array();\n  $grade_map_keys = array_keys($grade_map);\n  foreach ($grades\
    \ as $gpa) {\n    $new_letter_grade = \"\";\n    foreach ($grade_map_keys as $key)\
    \ {\n      if ($gpa >= $key || $key == \"-1\") {\n        $new_letter_grade =\
    \ $grade_map[$key];\n        break;\n      }\n    }\n    array_push($letter_grades,\
    \ $new_letter_grade);\n  }\n  return $letter_grades;\n}\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg10ktu0w.php:57\n\
    Stack trace:\n#0 /tmp/tmpg10ktu0w.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpg10ktu0w.php\
    \ on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    return array_map(function($grade)\
    \ {\n        if ($grade >= 4.0) return 'A+';\n        if ($grade >= 3.7) return\
    \ 'A';\n        if ($grade >= 3.3) return 'A-';\n        if ($grade >= 3.0) return\
    \ 'B+';\n        if ($grade >= 2.7) return 'B';\n        if ($grade >= 2.3) return\
    \ 'B-';\n        if ($grade >= 2.0) return 'C+';\n        if ($grade >= 1.7) return\
    \ 'C';\n        if ($grade >= 1.3) return 'C-';\n        if ($grade >= 1.0) return\
    \ 'D+';\n        if ($grade >= 0.7) return 'D';\n        if ($grade >= 0.0) return\
    \ 'D-';\n        return 'E';\n    }, $grades);\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ngvd4v1.php:46\n\
    Stack trace:\n#0 /tmp/tmp8ngvd4v1.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp8ngvd4v1.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $item) {\n        if ($item >= 4.0) {\n       \
    \     $result[] = 'A+';\n        } elseif ($item > 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($item > 3.3) {\n            $result[] = 'A-';\n  \
    \      } elseif ($item > 3.0) {\n            $result[] = 'B+';\n        } elseif\
    \ ($item > 2.7) {\n            $result[] = 'B';\n        } elseif ($item > 2.3)\
    \ {\n            $result[] = 'B-';\n        } elseif ($item > 2.0) {\n       \
    \     $result[] = 'C+';\n        } elseif ($item > 1.7) {\n            $result[]\
    \ = 'C';\n        } elseif ($item > 1.3) {\n            $result[] = 'C-';\n  \
    \      } elseif ($item > 1.0) {\n            $result[] = 'D+';\n        } elseif\
    \ ($item > 0.7) {\n            $result[] = 'D';\n        } elseif ($item > 0.0)\
    \ {\n            $result[] = 'D-';\n        } else {\n            $result[] =\
    \ 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    $gpa_grades = [\n        '4.0' => 'A+',\n        '3.7' => 'A',\n\
    \        '3.3' => 'A-',\n        '3.0' => 'B+',\n        '2.7' => 'B',\n     \
    \   '2.3' => 'B-',\n        '2.0' => 'C+',\n        '1.7' => 'C',\n        '1.3'\
    \ => 'C-',\n        '1.0' => 'D+',\n        '0.7' => 'D',\n        '0.0' => 'D-',\n\
    \        '0.0' => 'E'\n    ];\n    foreach ($grades as $grade) {\n        if (array_key_exists($grade,\
    \ $gpa_grades)) {\n            $letter_grades[] = $gpa_grades[$grade];\n     \
    \   } else {\n            $letter_grades[] = $gpa_grades[get_gpa_grade($grade)];\n\
    \        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_key_exists(): The first argument should be either a string\
    \ or an integer in /tmp/tmp8ans55fb.php on line 41\n\nFatal error: Uncaught Error:\
    \ Call to undefined function get_gpa_grade() in /tmp/tmp8ans55fb.php:44\nStack\
    \ trace:\n#0 /tmp/tmp8ans55fb.php(51): numerical_letter_grade(Array)\n#1 /tmp/tmp8ans55fb.php(55):\
    \ candidate(Array)\n#2 /tmp/tmp8ans55fb.php(63): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp8ans55fb.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $return_grades\
    \ = [];\n    $ratings = [\n        4.0 => 'A+',\n        3.7 => 'A',\n       \
    \ 3.3 => 'A-',\n        3.0 => 'B+',\n        2.7 => 'B',\n        2.3 => 'B-',\n\
    \        2.0 => 'C+',\n        1.7 => 'C',\n        1.3 => 'C-',\n        1.0\
    \ => 'D+',\n        0.7 => 'D',\n        0.0 => 'D-',\n        0.1 => 'E'\n  \
    \  ];\n    $numbers = array_keys($ratings);\n    foreach ($grades as $grade) {\n\
    \        $return_grades[] = $ratings[$numbers[count($numbers) - 1]];\n       \
    \ for ($i = count($numbers) - 1; $i >= 0; $i--) {\n            if ($grade >= $numbers[$i])\
    \ {\n                $return_grades[count($return_grades) - 1] = $ratings[$numbers[$i]];\n\
    \                break;\n            }\n        }\n    }\n    return $return_grades;\n\
    }\n\n$grades = [4.0, 3, 1.7, 2, 3.5];\necho implode(', ', numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "E, E, E, E, E\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg4yy_01y.php:60\n\
    Stack trace:\n#0 /tmp/tmpg4yy_01y.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpg4yy_01y.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $output_array\
    \ = [];\n    foreach ($grades as $key => $value) {\n        $output_array[$key]\
    \ = grade_equation($value);\n    }\n    return $output_array;\n}\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function grade_equation()\
    \ in /tmp/tmpci_eqa66.php:26\nStack trace:\n#0 /tmp/tmpci_eqa66.php(31): numerical_letter_grade(Array)\n\
    #1 /tmp/tmpci_eqa66.php(35): candidate(Array)\n#2 /tmp/tmpci_eqa66.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmpci_eqa66.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $key_value =\
    \ array('4.0' => 'A+',\n                     '3.7' => 'A',\n                 \
    \    '3.3' => 'A-',\n                     '3.0' => 'B+',\n                   \
    \  '2.7' => 'B',\n                     '2.3' => 'B-',\n                     '2.0'\
    \ => 'C+',\n                     '1.7' => 'C',\n                     '1.3' =>\
    \ 'C-',\n                     '1.0' => 'D+',\n                     '0.7' => 'D',\n\
    \                     '0.0' => 'D-',\n                     '-1' => 'E');\n  $arr\
    \ = array();\n  foreach ($grades as $grade) {\n    $arr[] = $key_value[$grade];\n\
    \  }\n  return $arr;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp61mc70xx.php:49\n\
    Stack trace:\n#0 /tmp/tmp61mc70xx.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp61mc70xx.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ [\n        \"A+\" => [\n            \"min\" => 4.0,\n            \"max\" =>\
    \ 4.0\n        ],\n        \"A\" => [\n            \"min\" => 3.7,\n         \
    \   \"max\" => 3.7\n        ],\n        \"A-\" => [\n            \"min\" => 3.3,\n\
    \            \"max\" => 3.3\n        ],\n        \"B+\" => [\n            \"min\"\
    \ => 3.0,\n            \"max\" => 3.0\n        ],\n        \"B\" => [\n      \
    \      \"min\" => 2.7,\n            \"max\" => 2.7\n        ],\n        \"B-\"\
    \ => [\n            \"min\" => 2.3,\n            \"max\" => 2.3\n        ],\n\
    \        \"C+\" => [\n            \"min\" => 2.0,\n            \"max\" => 2.0\n\
    \        ],\n        \"C\" => [\n            \"min\" => 1.7,\n            \"max\"\
    \ => 1.7\n        ],\n        \"C-\" => [\n            \"min\" => 1.3,\n     \
    \       \"max\" => 1.3\n        ],\n        \"D+\" => [\n            \"min\" =>\
    \ 1.0,\n            \"max\" => 1.0\n        ],\n        \"D\" => [\n         \
    \   \"min\" => 0.7,\n            \"max\" => 0.7\n        ],\n        \"D-\" =>\
    \ [\n            \"min\" => 0.0,\n            \"max\" => 0.0\n        ],\n   \
    \     \"E\" => [\n            \"min\" => 0.0,\n            \"max\" => 0.0\n  \
    \      ]\n    ];\n    foreach ($grades as $grade => $range) {\n        $min_grade\
    \ = $range[\"min\"];\n        $max_grade = $range[\"max\"];\n        $grade_formatted\
    \ = grade_formatter($min_grade, $max_grade);\n        $grades[$grade] = $grade_formatted;\n\
    \    }\n    return $grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function grade_formatter()\
    \ in /tmp/tmpsptmiyj0.php:81\nStack trace:\n#0 /tmp/tmpsptmiyj0.php(88): numerical_letter_grade(Array)\n\
    #1 /tmp/tmpsptmiyj0.php(92): candidate(Array)\n#2 /tmp/tmpsptmiyj0.php(100): test()\n\
    #3 {main}\n  thrown in /tmp/tmpsptmiyj0.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = array();\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n\
    \            $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n  \
    \          $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n     \
    \       $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n       \
    \     $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n         \
    \   $letter_grades[] = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[]\
    \ = 'B-';\n        } elseif ($grade >= 2.0) {\n            $letter_grades[] =\
    \ 'C+';\n        } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n\
    \        } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n  \
    \      } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n    \
    \    } elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n       \
    \ } elseif ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        }\
    \ else {\n            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\necho \"original Grades:\\n\";\nprint_r([4.0, 3, 1.7, 2, 3.5]);\necho \"Letter\
    \ Grades:\\n\";\nprint_r(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\necho\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "original Grades:\nArray\n(\n    [0] => 4\n    [1] => 3\n    [2] => 1.7\n\
    \    [3] => 2\n    [4] => 3.5\n)\nLetter Grades:\nArray\n(\n    [0] => A+\n  \
    \  [1] => B+\n    [2] => C\n    [3] => C+\n    [4] => A-\n)\n\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpgcswy1km.php:66\nStack trace:\n\
    #0 /tmp/tmpgcswy1km.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpgcswy1km.php\
    \ on line 66\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        $letter_grade = '';\n    \
    \    if ($grade < 0) {\n            $letter_grade = 'E';\n        } else if ($grade\
    \ < 0.7) {\n            $letter_grade = 'D-';\n        } else if ($grade < 1.0)\
    \ {\n            $letter_grade = 'D';\n        } else if ($grade < 1.3) {\n  \
    \          $letter_grade = 'D+';\n        } else if ($grade < 1.7) {\n       \
    \     $letter_grade = 'C-';\n        } else if ($grade < 2.0) {\n            $letter_grade\
    \ = 'C';\n        } else if ($grade < 2.3) {\n            $letter_grade = 'C+';\n\
    \        } else if ($grade < 2.7) {\n            $letter_grade = 'B-';\n     \
    \   } else if ($grade < 3.0) {\n            $letter_grade = 'B';\n        } else\
    \ if ($grade < 3.3) {\n            $letter_grade = 'B+';\n        } else if ($grade\
    \ < 3.7) {\n            $letter_grade = 'A-';\n        } else if ($grade <= 4.0)\
    \ {\n            $letter_grade = 'A';\n        }\n        $letter_grades[] = $letter_grade;\n\
    \    }\n    return $letter_grades;\n}\necho '<pre>';\nprint_r(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]));\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => A\n    [1] => B+\n    [2] => C\n    [3] => C+\n\
    \    [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp22_qx3kx.php:63\n\
    Stack trace:\n#0 /tmp/tmp22_qx3kx.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp22_qx3kx.php\
    \ on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $final = [];\n\
    \    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n           \
    \ $final[] = 'A+';\n        } elseif ($grade > 3.7) {\n            $final[] =\
    \ 'A';\n        } elseif ($grade > 3.3) {\n            $final[] = 'A-';\n    \
    \    } elseif ($grade > 3.0) {\n            $final[] = 'B+';\n        } elseif\
    \ ($grade > 2.7) {\n            $final[] = 'B';\n        } elseif ($grade > 2.3)\
    \ {\n            $final[] = 'B-';\n        } elseif ($grade > 2.0) {\n       \
    \     $final[] = 'C+';\n        } elseif ($grade > 1.7) {\n            $final[]\
    \ = 'C';\n        } elseif ($grade > 1.3) {\n            $final[] = 'C-';\n  \
    \      } elseif ($grade > 1.0) {\n            $final[] = 'D+';\n        } elseif\
    \ ($grade > 0.7) {\n            $final[] = 'D';\n        } elseif ($grade > 0.0)\
    \ {\n            $final[] = 'D-';\n        } else {\n            $final[] = 'E';\n\
    \        }\n    }\n    return $final;\n}\nprint_r(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]));\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B\n    [2] => C-\n    [3] => C\n  \
    \  [4] => A-\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_copy\
    \ = $grades;\n    $letter_grades = [];\n    for ($i = 0; $i < count($grades_copy);\
    \ $i++) {\n        if ($grades_copy[$i] == 4.0) {\n            array_push($letter_grades,\
    \ 'A+');\n        } elseif ($grades_copy[$i] > 3.7) {\n            array_push($letter_grades,\
    \ 'A');\n        } elseif ($grades_copy[$i] > 3.3) {\n            array_push($letter_grades,\
    \ 'A-');\n        } elseif ($grades_copy[$i] > 3.0) {\n            array_push($letter_grades,\
    \ 'B+');\n        } elseif ($grades_copy[$i] > 2.7) {\n            array_push($letter_grades,\
    \ 'B');\n        } elseif ($grades_copy[$i] > 2.3) {\n            array_push($letter_grades,\
    \ 'B-');\n        } elseif ($grades_copy[$i] > 2.0) {\n            array_push($letter_grades,\
    \ 'C+');\n        } elseif ($grades_copy[$i] > 1.7) {\n            array_push($letter_grades,\
    \ 'C');\n        } elseif ($grades_copy[$i] > 1.3) {\n            array_push($letter_grades,\
    \ 'C-');\n        } elseif ($grades_copy[$i] > 1.0) {\n            array_push($letter_grades,\
    \ 'D+');\n        } elseif ($grades_copy[$i] > 0.7) {\n            array_push($letter_grades,\
    \ 'D');\n        } elseif ($grades_copy[$i] > 0.0) {\n            array_push($letter_grades,\
    \ 'D-');\n        } elseif ($grades_copy[$i] == 0.0) {\n            array_push($letter_grades,\
    \ 'E');\n        }\n    }\n    return $letter_grades;\n}\n$grades = [4.0, 3, 1.7,\
    \ 2, 3.5];\necho implode(\", \", numerical_letter_grade($grades\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2e2yxset.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades_mapping\
    \ = array(\n    'A+' => 4.0,\n    'A' => 3.7,\n    'A-' => 3.3,\n    'B+' => 3.0,\n\
    \    'B' => 2.7,\n    'B-' => 2.3,\n    'C+' => 2.0,\n    'C' => 1.7,\n    'C-'\
    \ => 1.3,\n    'D+' => 1.0,\n    'D' => 0.7,\n    'D-' => 0.0,\n    'E' => 0.0\n\
    \  );\n  return array_map(function($grade) use ($grades_mapping) {\n    foreach\
    \ ($grades_mapping as $grade_to_check => $grade_value) {\n      if ($grade >=\
    \ $grade_value) {\n        return $grade_to_check;\n      }\n    }\n  }, $grades);\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcqczqe9k.php:53\n\
    Stack trace:\n#0 /tmp/tmpcqczqe9k.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpcqczqe9k.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $a = $grades;\n\
    \    for ($i = 0; $i < count($a); $i++) {\n        switch ($a[$i]) {\n       \
    \     case $a[$i] <= 4.0 && $a[$i] > 3.7:\n                $a[$i] = 'A+';\n  \
    \              break;\n            case $a[$i] <= 3.7 && $a[$i] > 3.3:\n     \
    \           $a[$i] = 'A';\n                break;\n            case $a[$i] <=\
    \ 3.3 && $a[$i] > 3.0:\n                $a[$i] = 'A-';\n                break;\n\
    \            case $a[$i] <= 3.0 && $a[$i] > 2.7:\n                $a[$i] = 'B+';\n\
    \                break;\n            case $a[$i] <= 2.7 && $a[$i] > 2.3:\n   \
    \             $a[$i] = 'B';\n                break;\n            case $a[$i] <=\
    \ 2.3 && $a[$i] > 2.0:\n                $a[$i] = 'B-';\n                break;\n\
    \            case $a[$i] <= 2.0 && $a[$i] > 1.7:\n                $a[$i] = 'C+';\n\
    \                break;\n            case $a[$i] <= 1.7 && $a[$i] > 1.3:\n   \
    \             $a[$i] = 'C';\n                break;\n            case $a[$i] <=\
    \ 1.3 && $a[$i] > 1.0:\n                $a[$i] = 'C-';\n                break;\n\
    \            case $a[$i] <= 1.0 && $a[$i] > 0.7:\n                $a[$i] = 'D+';\n\
    \                break;\n            case $a[$i] <= 0.7 && $a[$i] > 0.0:\n   \
    \             $a[$i] = 'D';\n                break;\n            case $a[$i] <=\
    \ 0.0 && $a[\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt_3pbeir.php on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades = [\n\
    \    4.0 => 'A+',\n    3.7 => 'A',\n    3.3 => 'A-',\n    3.0 => 'B+',\n    2.7\
    \ => 'B',\n    2.3 => 'B-',\n    2.0 => 'C+',\n    1.7 => 'C',\n    1.3 => 'C-',\n\
    \    1.0 => 'D+',\n    0.7 => 'D',\n    0.0 => 'D-',\n    -1  => 'E'\n  ];\n \
    \ return $grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo005e8h0.php:47\n\
    Stack trace:\n#0 /tmp/tmpo005e8h0.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpo005e8h0.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if($grade >= 4.0) {\n      \
    \      $result[] = 'A+';\n        }\n        elseif($grade >= 3.7) {\n       \
    \     $result[] = 'A';\n        }\n        elseif($grade >= 3.3) {\n         \
    \   $result[] = 'A-';\n        }\n        elseif($grade >= 3.0) {\n          \
    \  $result[] = 'B+';\n        }\n        elseif($grade >= 2.7) {\n           \
    \ $result[] = 'B';\n        }\n        elseif($grade >= 2.3) {\n            $result[]\
    \ = 'B-';\n        }\n        elseif($grade >= 2.0) {\n            $result[] =\
    \ 'C+';\n        }\n        elseif($grade >= 1.7) {\n            $result[] = 'C';\n\
    \        }\n        elseif($grade >= 1.3) {\n            $result[] = 'C-';\n \
    \       }\n        elseif($grade >= 1.0) {\n            $result[] = 'D+';\n  \
    \      }\n        elseif($grade >= 0.7) {\n            $result[] = 'D';\n    \
    \    }\n        elseif($grade >= 0.0) {\n            $result[] = 'D-';\n     \
    \   }\n        else {\n            $result[] = 'E';\n        }\n    }\n    return\
    \ $result;\n}\necho \"<pre>\";\nprint_r(numerical_letter_grade([4.0, 3, 1.7, 2,\
    \ 3.5]));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n\
    \    [4] => A-\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppdhhu6cl.php:76\n\
    Stack trace:\n#0 /tmp/tmppdhhu6cl.php(84): test()\n#1 {main}\n  thrown in /tmp/tmppdhhu6cl.php\
    \ on line 76\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $new_grades\
    \ = [];\n  foreach ($grades as $grade) {\n    if ($grade >= 4.0) {\n      $new_grades[]\
    \ = 'A+';\n    } elseif ($grade >= 3.7) {\n      $new_grades[] = 'A';\n    } elseif\
    \ ($grade >= 3.3) {\n      $new_grades[] = 'A-';\n    } elseif ($grade >= 3.0)\
    \ {\n      $new_grades[] = 'B+';\n    } elseif ($grade >= 2.7) {\n      $new_grades[]\
    \ = 'B';\n    } elseif ($grade >= 2.3) {\n      $new_grades[] = 'B-';\n    } elseif\
    \ ($grade >= 2.0) {\n      $new_grades[] = 'C+';\n    } elseif ($grade >= 1.7)\
    \ {\n      $new_grades[] = 'C';\n    } elseif ($grade >= 1.3) {\n      $new_grades[]\
    \ = 'C-';\n    } elseif ($grade >= 1.0) {\n      $new_grades[] = 'D+';\n    }\
    \ elseif ($grade >= 0.7) {\n      $new_grades[] = 'D';\n    } elseif ($grade >=\
    \ 0.0) {\n      $new_grades[] = 'D-';\n    } else {\n      $new_grades[] = 'E';\n\
    \    }\n  }\n  return $new_grades;\n}\n$grades = [4.0, 3, 1.7, 2, 3.5];\necho\
    \ \"GPA to letter grades : <br>\";\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "GPA to letter grades : <br>Array\n(\n    [0] => A+\n    [1] => B+\n   \
    \ [2] => C\n    [3] => C+\n    [4] => A-\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpooyu8mgy.php:64\nStack trace:\n#0 /tmp/tmpooyu8mgy.php(72):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpooyu8mgy.php on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Write your\
    \ code here\n    $result = [];\n    foreach ($grades as $grade) {\n        if\
    \ ($grade >= 4.0) {\n            $result[] = 'A+';\n        } elseif ($grade >=\
    \ 3.7) {\n            $result[] = 'A';\n        } elseif ($grade >= 3.3) {\n \
    \           $result[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $result[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $result[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $result[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $result[] = 'C+';\n        }\
    \ elseif ($grade >= 1.7) {\n            $result[] = 'C';\n        } elseif ($grade\
    \ >= 1.3) {\n            $result[] = 'C-';\n        } elseif ($grade >= 1.0) {\n\
    \            $result[] = 'D+';\n        } elseif ($grade >= 0.7) {\n         \
    \   $result[] = 'D';\n        } elseif ($grade >= 0.0) {\n            $result[]\
    \ = 'D-';\n        } else {\n            $result[] = 'E';\n        }\n    }\n\
    \    return $result;\n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsrhpp7wu.php:62\n\
    Stack trace:\n#0 /tmp/tmpsrhpp7wu.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpsrhpp7wu.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $result = [];\n\
    \  for ($i = 0; $i < count($grades); $i++) {\n    if ($grades[$i] == 4.0) {\n\
    \      $result[] = 'A+';\n    } else if ($grades[$i] >= 3.7) {\n      $result[]\
    \ = 'A';\n    } else if ($grades[$i] >= 3.3) {\n      $result[] = 'A-';\n    }\
    \ else if ($grades[$i] >= 3.0) {\n      $result[] = 'B+';\n    } else if ($grades[$i]\
    \ >= 2.7) {\n      $result[] = 'B';\n    } else if ($grades[$i] >= 2.3) {\n  \
    \    $result[] = 'B-';\n    } else if ($grades[$i] >= 2.0) {\n      $result[]\
    \ = 'C+';\n    } else if ($grades[$i] >= 1.7) {\n      $result[] = 'C';\n    }\
    \ else if ($grades[$i] >= 1.3) {\n      $result[] = 'C-';\n    } else if ($grades[$i]\
    \ >= 1.0) {\n      $result[] = 'D+';\n    } else if ($grades[$i] >= 0.7) {\n \
    \     $result[] = 'D';\n    } else if ($grades[$i] > 0.0) {\n      $result[] =\
    \ 'D-';\n    } else {\n      $result[] = 'E';\n    }\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmputok5v_y.php:61\n\
    Stack trace:\n#0 /tmp/tmputok5v_y.php(69): test()\n#1 {main}\n  thrown in /tmp/tmputok5v_y.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $gpa) {\n        $letter_grade = '';\n      \
    \  if ($gpa == 4.0) {\n            $letter_grade = 'A+';\n        } elseif ($gpa\
    \ > 3.7) {\n            $letter_grade = 'A';\n        } elseif ($gpa > 3.3) {\n\
    \            $letter_grade = 'A-';\n        } elseif ($gpa > 3.0) {\n        \
    \    $letter_grade = 'B+';\n        } elseif ($gpa > 2.7) {\n            $letter_grade\
    \ = 'B';\n        } elseif ($gpa > 2.3) {\n            $letter_grade = 'B-';\n\
    \        } elseif ($gpa > 2.0) {\n            $letter_grade = 'C+';\n        }\
    \ elseif ($gpa > 1.7) {\n            $letter_grade = 'C';\n        } elseif ($gpa\
    \ > 1.3) {\n            $letter_grade = 'C-';\n        } elseif ($gpa > 1.0) {\n\
    \            $letter_grade = 'D+';\n        } elseif ($gpa > 0.7) {\n        \
    \    $letter_grade = 'D';\n        } elseif ($gpa > 0.0) {\n            $letter_grade\
    \ = 'D-';\n        } else {\n            $letter_grade = 'E';\n        }\n   \
    \     $letter_grades[] = $letter_grade;\n    }\n    return $letter_grades;\n}\n\
    echo implode(\", \", numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: A+, B, C-, C, A-
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letters =\
    \ [\"D-\", \"D\", \"D+\", \"C-\", \"C\", \"C+\", \"B-\", \"B\", \"B+\", \"A-\"\
    , \"A\", \"A+\"];\n    $numerical_grades = [0.0, 0.7, 1.0, 1.3, 1.7, 2.0, 2.3,\
    \ 2.7, 3.0, 3.3, 3.7, 4.0];\n    $result = [];\n    foreach ($grades as $grade)\
    \ {\n        $is_found = false;\n        foreach ($numerical_grades as $key =>\
    \ $numerical_grade) {\n            if ($grade >= $numerical_grade) {\n       \
    \         $result[] = $letters[$key];\n                $is_found = true;\n   \
    \             break;\n            }\n        }\n        if (!$is_found) {\n  \
    \          $result[] = \"E\";\n        }\n    }\n    return $result;\n}\necho\
    \ \"<pre>\";\nprint_r(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\necho \"\
    </pre>\";\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => D-\n    [1] => D-\n    [2] => D-\n    [3] =>\
    \ D-\n    [4] => D-\n)\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpgjn96_dn.php:50\nStack trace:\n#0 /tmp/tmpgjn96_dn.php(58): test()\n\
    #1 {main}\n  thrown in /tmp/tmpgjn96_dn.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grade_map =\
    \ array(\n    4.0 => 'A+',\n    3.7 => 'A',\n    3.3 => 'A-',\n    3.0 => 'B+',\n\
    \    2.7 => 'B',\n    2.3 => 'B-',\n    2.0 => 'C+',\n    1.7 => 'C',\n    1.3\
    \ => 'C-',\n    1.0 => 'D+',\n    0.7 => 'D',\n    0.0 => 'D-',\n  );\n  $letters\
    \ = array();\n  foreach ($grades as $grade) {\n    if ($grade >= 4.0) {\n    \
    \  $letters[] = 'A+';\n    } elseif ($grade > 0.0) {\n      $letters[] = $grade_map[(float)min(array_keys($grade_map,\
    \ $grade_map[floor($grade)]))];\n    } else {\n      $letters[] = 'E';\n    }\n\
    \  }\n  return $letters;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzv_i1jct.php:56\n\
    Stack trace:\n#0 /tmp/tmpzv_i1jct.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpzv_i1jct.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    for ($i = 0; $i < count($grades); $i++) {\n        if ($grades[$i]\
    \ > 4.0) {\n            array_push($result, 'A+');\n        } else if ($grades[$i]\
    \ > 3.7) {\n            array_push($result, 'A');\n        } else if ($grades[$i]\
    \ > 3.3) {\n            array_push($result, 'A-');\n        } else if ($grades[$i]\
    \ > 3.0) {\n            array_push($result, 'B+');\n        } else if ($grades[$i]\
    \ > 2.7) {\n            array_push($result, 'B');\n        } else if ($grades[$i]\
    \ > 2.3) {\n            array_push($result, 'B-');\n        } else if ($grades[$i]\
    \ > 2.0) {\n            array_push($result, 'C+');\n        } else if ($grades[$i]\
    \ > 1.7) {\n            array_push($result, 'C');\n        } else if ($grades[$i]\
    \ > 1.3) {\n            array_push($result, 'C-');\n        } else if ($grades[$i]\
    \ > 1.0) {\n            array_push($result, 'D+');\n        } else if ($grades[$i]\
    \ > 0.7) {\n            array_push($result, 'D');\n        } else if ($grades[$i]\
    \ > 0.0) {\n            array_push($result, 'D-');\n        } else {\n       \
    \     array_push($result, 'E');\n        }\n    }\n    return $result;\n}\n\n\
    $grades = [4.0, 3, 1.7, 2, 3.5];\necho 'Input : ' . implode(', ', $grades) . '</br>';\n\
    echo 'Output : ' . implode(', ', numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Input : 4, 3, 1.7, 2, 3.5</br>Output : A, B, C-, C, A-\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp0fx5c9pr.php:65\nStack trace:\n#0 /tmp/tmp0fx5c9pr.php(73):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0fx5c9pr.php on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = array();\n    $num_of_grades = count($grades);\n    $i = 0;\n    while ($i\
    \ < $num_of_grades) {\n        if ($grades[$i] >= 4.0) {\n            $letter_grades[$i]\
    \ = \"A+\";\n        } elseif ($grades[$i] >= 3.7) {\n            $letter_grades[$i]\
    \ = \"A\";\n        } elseif ($grades[$i] >= 3.3) {\n            $letter_grades[$i]\
    \ = \"A-\";\n        } elseif ($grades[$i] >= 3.0) {\n            $letter_grades[$i]\
    \ = \"B+\";\n        } elseif ($grades[$i] >= 2.7) {\n            $letter_grades[$i]\
    \ = \"B\";\n        } elseif ($grades[$i] >= 2.3) {\n            $letter_grades[$i]\
    \ = \"B-\";\n        } elseif ($grades[$i] >= 2.0) {\n            $letter_grades[$i]\
    \ = \"C+\";\n        } elseif ($grades[$i] >= 1.7) {\n            $letter_grades[$i]\
    \ = \"C\";\n        } elseif ($grades[$i] >= 1.3) {\n            $letter_grades[$i]\
    \ = \"C-\";\n        } elseif ($grades[$i] >= 1.0) {\n            $letter_grades[$i]\
    \ = \"D+\";\n        } elseif ($grades[$i] >= 0.7) {\n            $letter_grades[$i]\
    \ = \"D\";\n        } elseif ($grades[$i] >= 0.0) {\n            $letter_grades[$i]\
    \ = \"D-\";\n        } else {\n            $letter_grades[$i] = \"E\";\n     \
    \   }\n        $i++;\n    }\n    return $letter_grades;\n}\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaib2yejj.php:64\n\
    Stack trace:\n#0 /tmp/tmpaib2yejj.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpaib2yejj.php\
    \ on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $res = [];\n\
    \  foreach ($grades as $grade) {\n    if ($grade >= 4.0) {\n      $res[] = 'A+';\n\
    \    } else if ($grade >= 3.7) {\n      $res[] = 'A';\n    } else if ($grade >=\
    \ 3.3) {\n      $res[] = 'A-';\n    } else if ($grade >= 3.0) {\n      $res[]\
    \ = 'B+';\n    } else if ($grade >= 2.7) {\n      $res[] = 'B';\n    } else if\
    \ ($grade >= 2.3) {\n      $res[] = 'B-';\n    } else if ($grade >= 2.0) {\n \
    \     $res[] = 'C+';\n    } else if ($grade >= 1.7) {\n      $res[] = 'C';\n \
    \   } else if ($grade >= 1.3) {\n      $res[] = 'C-';\n    } else if ($grade >=\
    \ 1.0) {\n      $res[] = 'D+';\n    } else if ($grade >= 0.7) {\n      $res[]\
    \ = 'D';\n    } else if ($grade >= 0.0) {\n      $res[] = 'D-';\n    } else {\n\
    \      $res[] = 'E';\n    }\n  }\n  return $res;\n}\necho implode(', ', numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]));\necho \"\\n\";\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "A+, B+, C, C+, A-\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_m5o5rs.php:64\n\
    Stack trace:\n#0 /tmp/tmpf_m5o5rs.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpf_m5o5rs.php\
    \ on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $result = [];\n\
    \  foreach ($grades as $grade) {\n    if ($grade >= 4.0) {\n      $result[] =\
    \ 'A+';\n    } elseif ($grade >= 3.7) {\n      $result[] = 'A';\n    } elseif\
    \ ($grade >= 3.3) {\n      $result[] = 'A-';\n    } elseif ($grade >= 3.0) {\n\
    \      $result[] = 'B+';\n    } elseif ($grade >= 2.7) {\n      $result[] = 'B';\n\
    \    } elseif ($grade >= 2.3) {\n      $result[] = 'B-';\n    } elseif ($grade\
    \ >= 2.0) {\n      $result[] = 'C+';\n    } elseif ($grade >= 1.7) {\n      $result[]\
    \ = 'C';\n    } elseif ($grade >= 1.3) {\n      $result[] = 'C-';\n    } elseif\
    \ ($grade >= 1.0) {\n      $result[] = 'D+';\n    } elseif ($grade >= 0.7) {\n\
    \      $result[] = 'D';\n    } elseif ($grade >= 0.0) {\n      $result[] = 'D-';\n\
    \    } else {\n      $result[] = 'E';\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv_koxp48.php:62\n\
    Stack trace:\n#0 /tmp/tmpv_koxp48.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpv_koxp48.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $results = [];\n\
    \  foreach ($grades as $grade) {\n    if ($grade >= 4.0) {\n      $results[] =\
    \ 'A+';\n    } elseif ($grade >= 3.7) {\n      $results[] = 'A';\n    } elseif\
    \ ($grade >= 3.3) {\n      $results[] = 'A-';\n    } elseif ($grade >= 3.0) {\n\
    \      $results[] = 'B+';\n    } elseif ($grade >= 2.7) {\n      $results[] =\
    \ 'B';\n    } elseif ($grade >= 2.3) {\n      $results[] = 'B-';\n    } elseif\
    \ ($grade >= 2.0) {\n      $results[] = 'C+';\n    } elseif ($grade >= 1.7) {\n\
    \      $results[] = 'C';\n    } elseif ($grade >= 1.3) {\n      $results[] = 'C-';\n\
    \    } elseif ($grade >= 1.0) {\n      $results[] = 'D+';\n    } elseif ($grade\
    \ >= 0.7) {\n      $results[] = 'D';\n    } elseif ($grade >= 0.0) {\n      $results[]\
    \ = 'D-';\n    } else {\n      $results[] = 'E';\n    }\n  }\n  return $results;\n\
    }\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptw_a1npi.php:61\n\
    Stack trace:\n#0 /tmp/tmptw_a1npi.php(69): test()\n#1 {main}\n  thrown in /tmp/tmptw_a1npi.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades_lower\
    \ = array_map('strtolower', $grades);\n  $grades_letter = array_map(function($grade){\n\
    \    switch ($grade) {\n      case '4.0':\n        return 'A+';\n        break;\n\
    \      case $grade >= 3.7:\n        return 'A';\n        break;\n      case $grade\
    \ >= 3.3:\n        return 'A-';\n        break;\n      case $grade >= 3.0:\n \
    \       return 'B+';\n        break;\n      case $grade >= 2.7:\n        return\
    \ 'B';\n        break;\n      case $grade >= 2.3:\n        return 'B-';\n    \
    \    break;\n      case $grade >= 2.0:\n        return 'C+';\n        break;\n\
    \      case $grade >= 1.7:\n        return 'C';\n        break;\n      case $grade\
    \ >= 1.3:\n        return 'C-';\n        break;\n      case $grade >= 1.0:\n \
    \       return 'D+';\n        break;\n      case $grade >= 0.7:\n        return\
    \ 'D';\n        break;\n      case $grade >= 0.0:\n        return 'D-';\n    \
    \    break;\n      case $grade == 0.0:\n        return 'E';\n        break;\n\
    \      default:\n        return 'not valid';\n        break;\n    }\n  }, $grades_lower);\n\
    \  return $grades_letter;\n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsj4mj6yo.php:78\n\
    Stack trace:\n#0 /tmp/tmpsj4mj6yo.php(86): test()\n#1 {main}\n  thrown in /tmp/tmpsj4mj6yo.php\
    \ on line 78\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $key => $value) {\n        if ($value >= 4.0) {\n\
    \            $result[] = 'A+';\n        } elseif ($value >= 3.7) {\n         \
    \   $result[] = 'A';\n        } elseif ($value >= 3.3) {\n            $result[]\
    \ = 'A-';\n        } elseif ($value >= 3.0) {\n            $result[] = 'B+';\n\
    \        } elseif ($value >= 2.7) {\n            $result[] = 'B';\n        } elseif\
    \ ($value >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($value >=\
    \ 2.0) {\n            $result[] = 'C+';\n        } elseif ($value >= 1.7) {\n\
    \            $result[] = 'C';\n        } elseif ($value >= 1.3) {\n          \
    \  $result[] = 'C-';\n        } elseif ($value >= 1.0) {\n            $result[]\
    \ = 'D+';\n        } elseif ($value >= 0.7) {\n            $result[] = 'D';\n\
    \        } elseif ($value >= 0.0) {\n            $result[] = 'D-';\n        }\
    \ else {\n            $result[] = 'E';\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptkm9ib80.php:61\n\
    Stack trace:\n#0 /tmp/tmptkm9ib80.php(69): test()\n#1 {main}\n  thrown in /tmp/tmptkm9ib80.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t$grades = explode(',',\
    \ $grades);\n\t$let = array();\n\tforeach ($grades as $grade) {\n\t\tif ($grade\
    \ == 0) {\n\t\t\t$let[] = 'E';\n\t\t} elseif ($grade > 0 && $grade <= 0.7) {\n\
    \t\t\t$let[] = 'D-';\n\t\t} elseif ($grade > 0.7 && $grade <= 1.0) {\n\t\t\t$let[]\
    \ = 'D+';\n\t\t} elseif ($grade > 1.0 && $grade <= 1.3) {\n\t\t\t$let[] = 'C-';\n\
    \t\t} elseif ($grade > 1.3 && $grade <= 1.7) {\n\t\t\t$let[] = 'C';\n\t\t} elseif\
    \ ($grade > 1.7 && $grade <= 2.0) {\n\t\t\t$let[] = 'C+';\n\t\t} elseif ($grade\
    \ > 2.0 && $grade <= 2.3) {\n\t\t\t$let[] = 'B-';\n\t\t} elseif ($grade > 2.3\
    \ && $grade <= 2.7) {\n\t\t\t$let[] = 'B';\n\t\t} elseif ($grade > 2.7 && $grade\
    \ <= 3.0) {\n\t\t\t$let[] = 'B+';\n\t\t} elseif ($grade > 3.0 && $grade <= 3.3)\
    \ {\n\t\t\t$let[] = 'A-';\n\t\t} elseif ($grade > 3.3 && $grade <= 3.7) {\n\t\t\
    \t$let[] = 'A';\n\t\t} elseif ($grade > 3.7 && $grade <= 4.0) {\n\t\t\t$let[]\
    \ = 'A+';\n\t\t}\n\t}\n\treturn $let;\n}\necho \"<pre>\";\nprint_r(numerical_letter_grade('4.0,\
    \ 3, 1.7, 2, 3.5'));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n\
    \    [4] => A\n)\n</pre>\nWarning: explode() expects parameter 2 to be string,\
    \ array given in /tmp/tmpsne4o435.php on line 24\n\nWarning: Invalid argument\
    \ supplied for foreach() in /tmp/tmpsne4o435.php on line 26\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpsne4o435.php:63\nStack trace:\n#0 /tmp/tmpsne4o435.php(71):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsne4o435.php on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $letter_grades\
    \ = [];\n  for ($i = 0; $i < count($grades); $i++) {\n    $temp = ($grades[$i]\
    \ * 10) % 10;\n    if ($grades[$i] >= 4.0) {\n      $letter_grades[] = 'A+';\n\
    \    } else if ($grades[$i] >= 3.7) {\n      $letter_grades[] = 'A';\n    } else\
    \ if ($grades[$i] >= 3.3) {\n      $letter_grades[] = 'A-';\n    } else if ($grades[$i]\
    \ >= 3.0) {\n      $letter_grades[] = 'B+';\n    } else if ($grades[$i] >= 2.7)\
    \ {\n      $letter_grades[] = 'B';\n    } else if ($grades[$i] >= 2.3) {\n   \
    \   $letter_grades[] = 'B-';\n    } else if ($grades[$i] >= 2.0) {\n      $letter_grades[]\
    \ = 'C+';\n    } else if ($grades[$i] >= 1.7) {\n      $letter_grades[] = 'C';\n\
    \    } else if ($grades[$i] >= 1.3) {\n      $letter_grades[] = 'C-';\n    } else\
    \ if ($grades[$i] >= 1.0) {\n      $letter_grades[] = 'D+';\n    } else if ($grades[$i]\
    \ >= 0.7) {\n      $letter_grades[] = 'D';\n    } else if ($grades[$i] > 0.0)\
    \ {\n      $letter_grades[] = 'D-';\n    } else {\n      $letter_grades[] = 'E';\n\
    \    }\n  }\n  return $letter_grades;\n}\n$grades = [4.0, 3, 1.7, 2, 3.5];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppkieoayx.php:64\n\
    Stack trace:\n#0 /tmp/tmppkieoayx.php(72): test()\n#1 {main}\n  thrown in /tmp/tmppkieoayx.php\
    \ on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n$grade_letter\
    \ = [];\nforeach ($grades as $grade) {\n    if ($grade == 4.0) {\n        $grade_letter[]\
    \ = 'A+';\n    } elseif ($grade > 3.7) {\n        $grade_letter[] = 'A';\n   \
    \ } elseif ($grade > 3.3) {\n        $grade_letter[] = 'A-';\n    } elseif ($grade\
    \ > 3.0) {\n        $grade_letter[] = 'B+';\n    } elseif ($grade > 2.7) {\n \
    \       $grade_letter[] = 'B';\n    } elseif ($grade > 2.3) {\n        $grade_letter[]\
    \ = 'B-';\n    } elseif ($grade > 2.0) {\n        $grade_letter[] = 'C+';\n  \
    \  } elseif ($grade > 1.7) {\n        $grade_letter[] = 'C';\n    } elseif ($grade\
    \ > 1.3) {\n        $grade_letter[] = 'C-';\n    } elseif ($grade > 1.0) {\n \
    \       $grade_letter[] = 'D+';\n    } elseif ($grade > 0.7) {\n        $grade_letter[]\
    \ = 'D';\n    } elseif ($grade > 0.0) {\n        $grade_letter[] = 'D-';\n   \
    \ } else {\n        $grade_letter[] = 'E';\n    }\n}\nreturn $grade_letter;\n\
    }\nprint_r(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])); //  ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nprint_r(numerical_letter_grade([3.5, 2.7, 3.3, 3.7, 2.5, 2.7, 2.5,\
    \ 2.7, 2.5, 2.7, 2.5, 2.7, 2.5, 2.7, 2.5, 2.7, 2.5, 2.7, 2.5, 2.7, 2.5, 2.7, 2.5,\
    \ 2.7, 2.5, 2.7, 2.5,\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkn08x9k1.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ array_map(\n        function($x) {\n            if ($x >= 4.0) {\n         \
    \       return 'A+';\n            } elseif ($x >= 3.7) {\n                return\
    \ 'A';\n            } elseif ($x >= 3.3) {\n                return 'A-';\n   \
    \         } elseif ($x >= 3.0) {\n                return 'B+';\n            }\
    \ elseif ($x >= 2.7) {\n                return 'B';\n            } elseif ($x\
    \ >= 2.3) {\n                return 'B-';\n            } elseif ($x >= 2.0) {\n\
    \                return 'C+';\n            } elseif ($x >= 1.7) {\n          \
    \      return 'C';\n            } elseif ($x >= 1.3) {\n                return\
    \ 'C-';\n            } elseif ($x >= 1.0) {\n                return 'D+';\n  \
    \          } elseif ($x >= 0.7) {\n                return 'D';\n            }\
    \ elseif ($x >= 0.0) {\n                return 'D-';\n            } else {\n \
    \               return 'E';\n            }\n        },\n        $grades\n    );\n\
    \    return $grades;\n}\necho '<pre>';\nprint_r(numerical_letter_grade([4.0, 3,\
    \ 1.7, 2, 3.5]));\necho '</pre>';\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n\
    \    [4] => A-\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwrnltzvq.php:67\n\
    Stack trace:\n#0 /tmp/tmpwrnltzvq.php(75): test()\n#1 {main}\n  thrown in /tmp/tmpwrnltzvq.php\
    \ on line 67\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grade_conversion\
    \ = array(\n        'A+' => 4.0,\n        'A' => 3.7,\n        'A-' => 3.3,\n\
    \        'B+' => 3.0,\n        'B' => 2.7,\n        'B-' => 2.3,\n        'C+'\
    \ => 2.0,\n        'C' => 1.7,\n        'C-' => 1.3,\n        'D+' => 1.0,\n \
    \       'D' => 0.7,\n        'D-' => 0.0,\n        'E' => 0.0\n    );\n    $numerical_conversion\
    \ = array_flip($grade_conversion);\n    $numerical_grades = array();\n    foreach\
    \ ($grades as $grade) {\n        if ($grade >= 4.0) {\n            $numerical_grades[]\
    \ = 4.0;\n        } elseif ($grade >= 3.7) {\n            $numerical_grades[]\
    \ = 3.7;\n        } elseif ($grade >= 3.3) {\n            $numerical_grades[]\
    \ = 3.3;\n        } elseif ($grade >= 3.0) {\n            $numerical_grades[]\
    \ = 3.0;\n        } elseif ($grade >= 2.7) {\n            $numerical_grades[]\
    \ = 2.7;\n        } elseif ($grade >= 2.3) {\n            $numerical_grades[]\
    \ = 2.3;\n        } elseif ($grade >= 2.0) {\n            $numerical_grades[]\
    \ = 2.0;\n        } elseif ($grade >= 1.7) {\n            $numerical_grades[]\
    \ = 1.7;\n        } elseif ($grade >= 1.3) {\n            $numerical_grades[]\
    \ = 1.3;\n        } elseif ($grade >= 1.0) {\n            $numerical_grades[]\
    \ = 1.0;\n        } elseif ($grade >= 0.7) {\n            $numerical_grades[]\
    \ = 0.7;\n        } elseif ($grade >= 0.0) {\n            $numerical_grades[]\
    \ = 0.0;\n       \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpehccwehm.php on line 80\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t$returnArr =\
    \ [];\n\tforeach ($grades as $grade) {\n\t\t$returnArr[] = numerical_to_letter($grade);\n\
    \t}\n\treturn $returnArr;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function numerical_to_letter()\
    \ in /tmp/tmpduro6g5h.php:26\nStack trace:\n#0 /tmp/tmpduro6g5h.php(32): numerical_letter_grade(Array)\n\
    #1 /tmp/tmpduro6g5h.php(36): candidate(Array)\n#2 /tmp/tmpduro6g5h.php(44): test()\n\
    #3 {main}\n  thrown in /tmp/tmpduro6g5h.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $answers =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $answers[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $answers[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $answers[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $answers[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $answers[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $answers[] = 'B-';\n        } elseif ($grade >= 2.0)\
    \ {\n            $answers[] = 'C+';\n        } elseif ($grade >= 1.7) {\n    \
    \        $answers[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $answers[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $answers[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $answers[] = 'D';\n        }\
    \ elseif ($grade > 0.0) {\n            $answers[] = 'D-';\n        } else {\n\
    \            $answers[] = 'E';\n        }\n    }\n    return $answers;\n}\n\n\
    $grades = [4.0, 3, 1.7, 2, 3.5];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqp0cshg7.php:64\n\
    Stack trace:\n#0 /tmp/tmpqp0cshg7.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpqp0cshg7.php\
    \ on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t$grades = [\n\
    \t\t'E' => [0,0],\n\t\t'D-' => [0.1,0.7],\n\t\t'D' => [0.8,1.0],\n\t\t'D+' =>\
    \ [1.1,1.3],\n\t\t'C-' => [1.4,1.7],\n\t\t'C' => [1.8,2.0],\n\t\t'C+' => [2.1,2.3],\n\
    \t\t'B-' => [2.4,2.7],\n\t\t'B' => [2.8,3.0],\n\t\t'B+' => [3.1,3.3],\n\t\t'A-'\
    \ => [3.4,3.7],\n\t\t'A' => [3.8,4.0],\n\t\t'A+' => [4.1,4.0]\n\t];\n\t\n\t$letterGrades\
    \ = [];\n\tforeach ($grades as $key => $value) {\n\t\tforeach ($value as $k =>\
    \ $v) {\n\t\t\t$letterGrades[] = $key;\n\t\t}\n\t}\n\t\n\t$gradeOutput = [];\n\
    \tforeach ($letterGrades as $grade) {\n\t\tif ($grade >= 1.8 && $grade <= 2.0)\
    \ {\n\t\t\t$gradeOutput[] = 'C';\n\t\t} else if ($grade >= 2.1 && $grade <= 2.3)\
    \ {\n\t\t\t$gradeOutput[] = 'C+';\n\t\t} else if ($grade >= 2.4 && $grade <= 2.7)\
    \ {\n\t\t\t$gradeOutput[] = 'B-';\n\t\t} else if ($grade >= 2.8 && $grade <= 3.0)\
    \ {\n\t\t\t$gradeOutput[] = 'B';\n\t\t} else if ($grade >= 3.1 && $grade <= 3.3)\
    \ {\n\t\t\t$gradeOutput[] = 'B+';\n\t\t} else if ($grade >= 3.4 && $grade <= 3.7)\
    \ {\n\t\t\t$gradeOutput[] = 'A-';\n\t\t} else if ($grade >= 3.8 && $\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphb7z9a7r.php on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letters =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $letters[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $letters[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $letters[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $letters[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $letters[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $letters[] = 'B-';\n        } elseif ($grade >= 2.0)\
    \ {\n            $letters[] = 'C+';\n        } elseif ($grade >= 1.7) {\n    \
    \        $letters[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $letters[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $letters[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $letters[] = 'D';\n        }\
    \ elseif ($grade >= 0.0) {\n            $letters[] = 'D-';\n        } else {\n\
    \            $letters[] = 'E';\n        }\n    }\n    return $letters;\n}\necho\
    \ '<pre>';\nprint_r(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\necho '</pre>';\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n\
    \    [4] => A-\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkm_ner4u.php:64\n\
    Stack trace:\n#0 /tmp/tmpkm_ner4u.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpkm_ner4u.php\
    \ on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpulg6l_ev.php:62\n\
    Stack trace:\n#0 /tmp/tmpulg6l_ev.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpulg6l_ev.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_letters\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_letters[] = 'A+';\n        } elseif ($grade >= 3.7) {\n    \
    \        $grades_letters[] = 'A';\n        } elseif ($grade >= 3.3) {\n      \
    \      $grades_letters[] = 'A-';\n        } elseif ($grade >= 3.0) {\n       \
    \     $grades_letters[] = 'B+';\n        } elseif ($grade >= 2.7) {\n        \
    \    $grades_letters[] = 'B';\n        } elseif ($grade >= 2.3) {\n          \
    \  $grades_letters[] = 'B-';\n        } elseif ($grade >= 2.0) {\n           \
    \ $grades_letters[] = 'C+';\n        } elseif ($grade >= 1.7) {\n            $grades_letters[]\
    \ = 'C';\n        } elseif ($grade >= 1.3) {\n            $grades_letters[] =\
    \ 'C-';\n        } elseif ($grade >= 1.0) {\n            $grades_letters[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $grades_letters[] = 'D';\n  \
    \      } elseif ($grade >= 0.0) {\n            $grades_letters[] = 'D-';\n   \
    \     } else {\n            $grades_letters[] = 'E';\n        }\n    }\n    return\
    \ $grades_letters;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc7xzpfl9.php:62\n\
    Stack trace:\n#0 /tmp/tmpc7xzpfl9.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpc7xzpfl9.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letters =\
    \ array();\n    foreach ($grades as $grade) {\n        if ($grade == 4.0) {\n\
    \            $letters[] = 'A+';\n        } elseif ($grade > 3.7) {\n         \
    \   $letters[] = 'A';\n        } elseif ($grade > 3.3) {\n            $letters[]\
    \ = 'A-';\n        } elseif ($grade > 3.0) {\n            $letters[] = 'B+';\n\
    \        } elseif ($grade > 2.7) {\n            $letters[] = 'B';\n        } elseif\
    \ ($grade > 2.3) {\n            $letters[] = 'B-';\n        } elseif ($grade >\
    \ 2.0) {\n            $letters[] = 'C+';\n        } elseif ($grade > 1.7) {\n\
    \            $letters[] = 'C';\n        } elseif ($grade > 1.3) {\n          \
    \  $letters[] = 'C-';\n        } elseif ($grade > 1.0) {\n            $letters[]\
    \ = 'D+';\n        } elseif ($grade > 0.7) {\n            $letters[] = 'D';\n\
    \        } elseif ($grade > 0.0) {\n            $letters[] = 'D-';\n        }\
    \ else {\n            $letters[] = 'E';\n        }\n    }\n    return $letters;\n\
    }\nprint_r(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\necho PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B\n    [2] => C-\n    [3] => C\n  \
    \  [4] => A-\n)\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letters =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $letters[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $letters[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $letters[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $letters[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $letters[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $letters[] = 'B-';\n        } elseif ($grade >= 2.0)\
    \ {\n            $letters[] = 'C+';\n        } elseif ($grade >= 1.7) {\n    \
    \        $letters[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $letters[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $letters[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $letters[] = 'D';\n        }\
    \ elseif ($grade >= 0.0) {\n            $letters[] = 'D-';\n        } else {\n\
    \            $letters[] = 'E';\n        }\n    }\n    return $letters;\n}\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxh0eq_1t.php:61\n\
    Stack trace:\n#0 /tmp/tmpxh0eq_1t.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpxh0eq_1t.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letterGrades\
    \ = array();\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n\
    \            $letterGrades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n   \
    \         $letterGrades[] = 'A';\n        } elseif ($grade >= 3.3) {\n       \
    \     $letterGrades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letterGrades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letterGrades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letterGrades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letterGrades[] = 'C+';\n   \
    \     } elseif ($grade >= 1.7) {\n            $letterGrades[] = 'C';\n       \
    \ } elseif ($grade >= 1.3) {\n            $letterGrades[] = 'C-';\n        } elseif\
    \ ($grade >= 1.0) {\n            $letterGrades[] = 'D+';\n        } elseif ($grade\
    \ >= 0.7) {\n            $letterGrades[] = 'D';\n        } elseif ($grade >= 0.0)\
    \ {\n            $letterGrades[] = 'D-';\n        } else {\n            $letterGrades[]\
    \ = 'E';\n        }\n    }\n    return $letterGrades;\n}\n\n$grades = [4.0, 3,\
    \ 1.7, 2, 3.5];\n$letterGrades = numerical_letter_grade($grades);\nforeach ($letterGrades\
    \ as $grade) {\n    echo $grade . ' ';\n}\necho '<br>';\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "A+ B+ C C+ A- <br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn9_3g3w_.php:69\n\
    Stack trace:\n#0 /tmp/tmpn9_3g3w_.php(77): test()\n#1 {main}\n  thrown in /tmp/tmpn9_3g3w_.php\
    \ on line 69\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t$result = [];\n\
    \tforeach ($grades as $gpa) {\n\t\tswitch ($gpa) {\n\t\t\tcase ($gpa >= 4.0):\n\
    \t\t\t\t$result[] = 'A+';\n\t\t\t\tbreak;\n\t\t\tcase ($gpa >= 3.7):\n\t\t\t\t\
    $result[] = 'A';\n\t\t\t\tbreak;\n\t\t\tcase ($gpa >= 3.3):\n\t\t\t\t$result[]\
    \ = 'A-';\n\t\t\t\tbreak;\n\t\t\tcase ($gpa >= 3.0):\n\t\t\t\t$result[] = 'B+';\n\
    \t\t\t\tbreak;\n\t\t\tcase ($gpa >= 2.7):\n\t\t\t\t$result[] = 'B';\n\t\t\t\t\
    break;\n\t\t\tcase ($gpa >= 2.3):\n\t\t\t\t$result[] = 'B-';\n\t\t\t\tbreak;\n\
    \t\t\tcase ($gpa >= 2.0):\n\t\t\t\t$result[] = 'C+';\n\t\t\t\tbreak;\n\t\t\tcase\
    \ ($gpa >= 1.7):\n\t\t\t\t$result[] = 'C';\n\t\t\t\tbreak;\n\t\t\tcase ($gpa >=\
    \ 1.3):\n\t\t\t\t$result[] = 'C-';\n\t\t\t\tbreak;\n\t\t\tcase ($gpa >= 1.0):\n\
    \t\t\t\t$result[] = 'D+';\n\t\t\t\tbreak;\n\t\t\tcase ($gpa >= 0.7):\n\t\t\t\t\
    $result[] = 'D';\n\t\t\t\tbreak;\n\t\t\tcase ($gpa >= 0.0):\n\t\t\t\t$result[]\
    \ = 'D-';\n\t\t\t\tbreak;\n\t\t\tcase ($gpa == 0.0):\n\t\t\t\t$result[] = 'E';\n\
    \t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $result;\n}\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsvxwhdxq.php:75\n\
    Stack trace:\n#0 /tmp/tmpsvxwhdxq.php(83): test()\n#1 {main}\n  thrown in /tmp/tmpsvxwhdxq.php\
    \ on line 75\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $res = [];\n\
    \  foreach ($grades as $grade) {\n    if ($grade >= 4.0) $res[] = 'A+';\n    else\
    \ if ($grade >= 3.7) $res[] = 'A';\n    else if ($grade >= 3.3) $res[] = 'A-';\n\
    \    else if ($grade >= 3.0) $res[] = 'B+';\n    else if ($grade >= 2.7) $res[]\
    \ = 'B';\n    else if ($grade >= 2.3) $res[] = 'B-';\n    else if ($grade >= 2.0)\
    \ $res[] = 'C+';\n    else if ($grade >= 1.7) $res[] = 'C';\n    else if ($grade\
    \ >= 1.3) $res[] = 'C-';\n    else if ($grade >= 1.0) $res[] = 'D+';\n    else\
    \ if ($grade >= 0.7) $res[] = 'D';\n    else if ($grade >= 0.0) $res[] = 'D-';\n\
    \    else $res[] = 'E';\n  }\n  return $res;\n}\nprint_r(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]));\nprint_r(numerical_letter_grade([4.0, 4.0, 4.0, 4.0, 4.0]));\n\
    print_r(numerical_letter_grade([0.0, 0.0, 0.0, 0.0, 0.0]));\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\nArray\n(\n    [0] => A+\n    [1] => A+\n    [2] => A+\n    [3]\
    \ => A+\n    [4] => A+\n)\nArray\n(\n    [0] => D-\n    [1] => D-\n    [2] =>\
    \ D-\n    [3] => D-\n    [4] => D-\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp2_b983ma.php:51\nStack trace:\n#0 /tmp/tmp2_b983ma.php(59):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp2_b983ma.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $numerical_letter_grades\
    \ = [];\n  foreach ($grades as $grade) {\n    if ($grade == 4.0) {\n      $numerical_letter_grades[]\
    \ = 'A+';\n    } elseif ($grade > 3.7) {\n      $numerical_letter_grades[] = 'A';\n\
    \    } elseif ($grade > 3.3) {\n      $numerical_letter_grades[] = 'A-';\n   \
    \ } elseif ($grade > 3.0) {\n      $numerical_letter_grades[] = 'B+';\n    } elseif\
    \ ($grade > 2.7) {\n      $numerical_letter_grades[] = 'B';\n    } elseif ($grade\
    \ > 2.3) {\n      $numerical_letter_grades[] = 'B-';\n    } elseif ($grade > 2.0)\
    \ {\n      $numerical_letter_grades[] = 'C+';\n    } elseif ($grade > 1.7) {\n\
    \      $numerical_letter_grades[] = 'C';\n    } elseif ($grade > 1.3) {\n    \
    \  $numerical_letter_grades[] = 'C-';\n    } elseif ($grade > 1.0) {\n      $numerical_letter_grades[]\
    \ = 'D+';\n    } elseif ($grade > 0.7) {\n      $numerical_letter_grades[] = 'D';\n\
    \    } elseif ($grade > 0.0) {\n      $numerical_letter_grades[] = 'D-';\n   \
    \ } else {\n      $numerical_letter_grades[] = 'E';\n    }\n  }\n  return $numerical_letter_grades;\n\
    }\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ [4.0, 3, 1.7, 2, 3.5];\n    $letter_grades = [];\n    for ($i = 0; $i < count($grades);\
    \ $i++) {\n        if ($grades[$i] == 4.0) {\n            $letter_grades[] = \"\
    A+\";\n        } elseif ($grades[$i] > 3.7) {\n            $letter_grades[] =\
    \ \"A\";\n        } elseif ($grades[$i] > 3.3) {\n            $letter_grades[]\
    \ = \"A-\";\n        } elseif ($grades[$i] > 3.0) {\n            $letter_grades[]\
    \ = \"B+\";\n        } elseif ($grades[$i] > 2.7) {\n            $letter_grades[]\
    \ = \"B\";\n        } elseif ($grades[$i] > 2.3) {\n            $letter_grades[]\
    \ = \"B-\";\n        } elseif ($grades[$i] > 2.0) {\n            $letter_grades[]\
    \ = \"C+\";\n        } elseif ($grades[$i] > 1.7) {\n            $letter_grades[]\
    \ = \"C\";\n        } elseif ($grades[$i] > 1.3) {\n            $letter_grades[]\
    \ = \"C-\";\n        } elseif ($grades[$i] > 1.0) {\n            $letter_grades[]\
    \ = \"D+\";\n        } elseif ($grades[$i] > 0.7) {\n            $letter_grades[]\
    \ = \"D\";\n        } elseif ($grades[$i] > 0.0) {\n            $letter_grades[]\
    \ = \"D-\";\n        } elseif ($grades[$i] == 0.0) {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\nnumerical_letter_grade($grades);\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpreo47x1_.php:64\n\
    Stack trace:\n#0 /tmp/tmpreo47x1_.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpreo47x1_.php\
    \ on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade == 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade > 3.7) {\n      \
    \      $letter_grades[] = 'A';\n        } elseif ($grade > 3.3) {\n          \
    \  $letter_grades[] = 'A-';\n        } elseif ($grade > 3.0) {\n            $letter_grades[]\
    \ = 'B+';\n        } elseif ($grade > 2.7) {\n            $letter_grades[] = 'B';\n\
    \        } elseif ($grade > 2.3) {\n            $letter_grades[] = 'B-';\n   \
    \     } elseif ($grade > 2.0) {\n            $letter_grades[] = 'C+';\n      \
    \  } elseif ($grade > 1.7) {\n            $letter_grades[] = 'C';\n        } elseif\
    \ ($grade > 1.3) {\n            $letter_grades[] = 'C-';\n        } elseif ($grade\
    \ > 1.0) {\n            $letter_grades[] = 'D+';\n        } elseif ($grade > 0.7)\
    \ {\n            $letter_grades[] = 'D';\n        } elseif ($grade > 0.0) {\n\
    \            $letter_grades[] = 'D-';\n        } else {\n            $letter_grades[]\
    \ = 'E';\n        }\n    }\n    return $letter_grades;\n}\necho '<pre>';\nprint_r(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]));\necho '</pre>';\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => A+\n    [1] => B\n    [2] => C-\n    [3] => C\n\
    \    [4] => A-\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n$grades_key =\
    \ [\n'A+' => 4.0,\n'A' => 3.7,\n'A-' => 3.3,\n'B+' => 3.0,\n'B' => 2.7,\n'B-'\
    \ => 2.3,\n'C+' => 2.0,\n'C' => 1.7,\n'C-' => 1.3,\n'D+' => 1.0,\n'D' => 0.7,\n\
    'D-' => 0.0,\n'E' => 0.0\n];\n$grades_reverse = array_reverse($grades_key);\n\
    $grades_letter = [];\nfor ($i=0; $i < count($grades); $i++) { \n    foreach ($grades_reverse\
    \ as $key => $value) {\n        if ($grades[$i] >= $value) {\n            $grades_letter[]\
    \ = $key;\n            break;\n        }\n    }\n}\nreturn $grades_letter;\n}\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmyc0n5qb.php:56\n\
    Stack trace:\n#0 /tmp/tmpmyc0n5qb.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpmyc0n5qb.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letters =\
    \ [];\n    foreach ($grades as $grade) {\n        switch ($grade) {\n        \
    \    case $grade >= 4.0:\n                $letters[] = 'A+';\n               \
    \ break;\n            case $grade >= 3.7:\n                $letters[] = 'A';\n\
    \                break;\n            case $grade >= 3.3:\n                $letters[]\
    \ = 'A-';\n                break;\n            case $grade >= 3.0:\n         \
    \       $letters[] = 'B+';\n                break;\n            case $grade >=\
    \ 2.7:\n                $letters[] = 'B';\n                break;\n          \
    \  case $grade >= 2.3:\n                $letters[] = 'B-';\n                break;\n\
    \            case $grade >= 2.0:\n                $letters[] = 'C+';\n       \
    \         break;\n            case $grade >= 1.7:\n                $letters[]\
    \ = 'C';\n                break;\n            case $grade >= 1.3:\n          \
    \      $letters[] = 'C-';\n                break;\n            case $grade >=\
    \ 1.0:\n                $letters[] = 'D+';\n                break;\n         \
    \   case $grade >= 0.7:\n                $letters[] = 'D';\n                break;\n\
    \            case $grade >= 0.0:\n                $letters[] = 'D-';\n       \
    \         break;\n            case $grade == 0.0:\n                $letters[]\
    \ = 'E';\n                break;\n        }\n    }\n    return $letters;\n}\n\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx8hz6g38.php:76\n\
    Stack trace:\n#0 /tmp/tmpx8hz6g38.php(84): test()\n#1 {main}\n  thrown in /tmp/tmpx8hz6g38.php\
    \ on line 76\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n$result = [];\n\
    foreach ($grades as $grade) {\n    if ($grade > 3.7) {\n        $result[] = 'A+';\n\
    \    } elseif ($grade > 3.3) {\n        $result[] = 'A';\n    } elseif ($grade\
    \ > 3.0) {\n        $result[] = 'A-';\n    } elseif ($grade > 2.7) {\n       \
    \ $result[] = 'B+';\n    } elseif ($grade > 2.3) {\n        $result[] = 'B';\n\
    \    } elseif ($grade > 2.0) {\n        $result[] = 'B-';\n    } elseif ($grade\
    \ > 1.7) {\n        $result[] = 'C+';\n    } elseif ($grade > 1.3) {\n       \
    \ $result[] = 'C';\n    } elseif ($grade > 1.0) {\n        $result[] = 'C-';\n\
    \    } elseif ($grade > 0.7) {\n        $result[] = 'D+';\n    } elseif ($grade\
    \ > 0.0) {\n        $result[] = 'D';\n    } elseif ($grade == 0.0) {\n       \
    \ $result[] = 'E';\n    }\n}\nreturn $result;\n}\nprint_r(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]));\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8347s_50.php:60\n\
    Stack trace:\n#0 /tmp/tmp8347s_50.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp8347s_50.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $answer =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade > 4) {\n        \
    \    $answer[] = 'not valid';\n        } elseif ($grade >= 3.7) {\n          \
    \  $answer[] = 'A';\n        } elseif ($grade >= 3.3) {\n            $answer[]\
    \ = 'A-';\n        } elseif ($grade >= 3) {\n            $answer[] = 'B+';\n \
    \       } elseif ($grade >= 2.7) {\n            $answer[] = 'B';\n        } elseif\
    \ ($grade >= 2.3) {\n            $answer[] = 'B-';\n        } elseif ($grade >=\
    \ 2) {\n            $answer[] = 'C+';\n        } elseif ($grade >= 1.7) {\n  \
    \          $answer[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $answer[]\
    \ = 'C-';\n        } elseif ($grade >= 1) {\n            $answer[] = 'D+';\n \
    \       } elseif ($grade >= 0.7) {\n            $answer[] = 'D';\n        } elseif\
    \ ($grade >= 0) {\n            $answer[] = 'D-';\n        } else {\n         \
    \   $answer[] = 'E';\n        }\n    }\n    return $answer;\n}\necho '<h2>Numerical-Letter\
    \ Grade</h2>';\necho '<p>Expected values: A+, B, C-, C, A-</p>';\necho 'Actual\
    \ values: ';\nprint_r(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<h2>Numerical-Letter Grade</h2><p>Expected values: A+, B, C-, C, A-</p>Actual\
    \ values: Array\n(\n    [0] => A\n    [1] => B+\n    [2] => C\n    [3] => C+\n\
    \    [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjznkfu_v.php:66\n\
    Stack trace:\n#0 /tmp/tmpjznkfu_v.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpjznkfu_v.php\
    \ on line 66\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    return array_map(function($item)\
    \ {\n        if($item >= 4.0) {\n            return 'A+';\n        }\n       \
    \ elseif($item >= 3.7) {\n            return 'A';\n        }\n        elseif($item\
    \ >= 3.3) {\n            return 'A-';\n        }\n        elseif($item >= 3.0)\
    \ {\n            return 'B+';\n        }\n        elseif($item >= 2.7) {\n   \
    \         return 'B';\n        }\n        elseif($item >= 2.3) {\n           \
    \ return 'B-';\n        }\n        elseif($item >= 2.0) {\n            return\
    \ 'C+';\n        }\n        elseif($item >= 1.7) {\n            return 'C';\n\
    \        }\n        elseif($item >= 1.3) {\n            return 'C-';\n       \
    \ }\n        elseif($item >= 1.0) {\n            return 'D+';\n        }\n   \
    \     elseif($item >= 0.7) {\n            return 'D';\n        }\n        elseif($item\
    \ >= 0.0) {\n            return 'D-';\n        }\n        else {\n           \
    \ return 'E';\n        }\n    }, $grades);\n}\n\n$grades = [4.0, 3, 1.7, 2, 3.5];\n\
    print_r(numerical_letter_grade($grades));\nfunction candidate(...$args) {\n  \
    \  return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7tg9x_0i.php:74\n\
    Stack trace:\n#0 /tmp/tmp7tg9x_0i.php(82): test()\n#1 {main}\n  thrown in /tmp/tmp7tg9x_0i.php\
    \ on line 74\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        switch ($grade) {\n      \
    \      case $grade >= 4.0:\n                $letter_grades[] = 'A+';\n       \
    \         break;\n            case $grade >= 3.7:\n                $letter_grades[]\
    \ = 'A';\n                break;\n            case $grade >= 3.3:\n          \
    \      $letter_grades[] = 'A-';\n                break;\n            case $grade\
    \ >= 3.0:\n                $letter_grades[] = 'B+';\n                break;\n\
    \            case $grade >= 2.7:\n                $letter_grades[] = 'B';\n  \
    \              break;\n            case $grade >= 2.3:\n                $letter_grades[]\
    \ = 'B-';\n                break;\n            case $grade >= 2.0:\n         \
    \       $letter_grades[] = 'C+';\n                break;\n            case $grade\
    \ >= 1.7:\n                $letter_grades[] = 'C';\n                break;\n \
    \           case $grade >= 1.3:\n                $letter_grades[] = 'C-';\n  \
    \              break;\n            case $grade >= 1.0:\n                $letter_grades[]\
    \ = 'D+';\n                break;\n            case $grade >= 0.7:\n         \
    \       $letter_grades[] = 'D';\n                break;\n            case $grade\
    \ >= 0.0:\n                $letter_grades[] = 'D-';\n                break;\n\
    \            case $grade < 0.0:\n                $letter_grades[] = 'E';\n   \
    \             break;\n        }\n    }\n    return $letter_grades;\n}\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp835_l9rx.php:75\n\
    Stack trace:\n#0 /tmp/tmp835_l9rx.php(83): test()\n#1 {main}\n  thrown in /tmp/tmp835_l9rx.php\
    \ on line 75\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\necho '<pre>';\n\
    var_dump(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>array(5) {\n  [0]=>\n  string(2) \"A+\"\n  [1]=>\n  string(2) \"B+\"\
    \n  [2]=>\n  string(1) \"C\"\n  [3]=>\n  string(2) \"C+\"\n  [4]=>\n  string(2)\
    \ \"A-\"\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq3heu0e8.php:63\n\
    Stack trace:\n#0 /tmp/tmpq3heu0e8.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpq3heu0e8.php\
    \ on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = array();\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n\
    \            $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n  \
    \          $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n     \
    \       $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n       \
    \     $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n         \
    \   $letter_grades[] = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[]\
    \ = 'B-';\n        } elseif ($grade >= 2.0) {\n            $letter_grades[] =\
    \ 'C+';\n        } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n\
    \        } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n  \
    \      } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n    \
    \    } elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n       \
    \ } elseif ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        }\
    \ else {\n            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\necho \"<pre>\";\nprint_r(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])); //\
    \ => ['A+', 'B', 'C-', 'C', 'A-']\necho \"</pre>\";\necho \"<hr>\";\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n\
    \    [4] => A-\n)\n</pre><hr>\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpz2mzf1ag.php:65\nStack trace:\n#0 /tmp/tmpz2mzf1ag.php(73): test()\n\
    #1 {main}\n  thrown in /tmp/tmpz2mzf1ag.php on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $letter_grades\
    \ = array();\n  foreach ($grades as $grade) {\n    $letter_grade = \"E\";\n  \
    \  if ($grade >= 4.0) {\n      $letter_grade = \"A+\";\n    } else if ($grade\
    \ >= 3.7) {\n      $letter_grade = \"A\";\n    } else if ($grade >= 3.3) {\n \
    \     $letter_grade = \"A-\";\n    } else if ($grade >= 3.0) {\n      $letter_grade\
    \ = \"B+\";\n    } else if ($grade >= 2.7) {\n      $letter_grade = \"B\";\n \
    \   } else if ($grade >= 2.3) {\n      $letter_grade = \"B-\";\n    } else if\
    \ ($grade >= 2.0) {\n      $letter_grade = \"C+\";\n    } else if ($grade >= 1.7)\
    \ {\n      $letter_grade = \"C\";\n    } else if ($grade >= 1.3) {\n      $letter_grade\
    \ = \"C-\";\n    } else if ($grade >= 1.0) {\n      $letter_grade = \"D+\";\n\
    \    } else if ($grade >= 0.7) {\n      $letter_grade = \"D\";\n    } else if\
    \ ($grade >= 0.0) {\n      $letter_grade = \"D-\";\n    }\n    array_push($letter_grades,\
    \ $letter_grade);\n  }\n  return $letter_grades;\n}\nprint_r(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]));\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfit1gna1.php:62\n\
    Stack trace:\n#0 /tmp/tmpfit1gna1.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpfit1gna1.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $res = [];\n\
    \    for ($i = 0; $i < count($grades); $i++) {\n        if ($grades[$i] >= 4.0)\
    \ {\n            $res[] = 'A+';\n        } else if ($grades[$i] >= 3.7) {\n  \
    \          $res[] = 'A';\n        } else if ($grades[$i] >= 3.3) {\n         \
    \   $res[] = 'A-';\n        } else if ($grades[$i] >= 3.0) {\n            $res[]\
    \ = 'B+';\n        } else if ($grades[$i] >= 2.7) {\n            $res[] = 'B';\n\
    \        } else if ($grades[$i] >= 2.3) {\n            $res[] = 'B-';\n      \
    \  } else if ($grades[$i] >= 2.0) {\n            $res[] = 'C+';\n        } else\
    \ if ($grades[$i] >= 1.7) {\n            $res[] = 'C';\n        } else if ($grades[$i]\
    \ >= 1.3) {\n            $res[] = 'C-';\n        } else if ($grades[$i] >= 1.0)\
    \ {\n            $res[] = 'D+';\n        } else if ($grades[$i] >= 0.7) {\n  \
    \          $res[] = 'D';\n        } else if ($grades[$i] >= 0.0) {\n         \
    \   $res[] = 'D-';\n        } else {\n            $res[] = 'E';\n        }\n \
    \   }\n    return $res;\n}\n\nprint_r(numerical_letter_grade([4.0, 3, 1.7, 2,\
    \ 3.5]));\necho '<br/>';\nprint_r(numerical_letter_grade([4.0, 3, 1.9, 2, 3.5]));\n\
    echo '<br/>';\nprint_r(numerical_letter_grade([4.0, 3, 0.7, 2, 3.5]));\necho '<br/>';\n\
    print_r(numerical_letter_grade([4.0, 3, -1, 2, 3.5]));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n<br/>Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n\
    \    [3] => C+\n    [4] => A-\n)\n<br/>Array\n(\n    [0] => A+\n    [1] => B+\n\
    \    [2] => D\n    [3] => C+\n    [4] => A-\n)\n<br/>Array\n(\n    [0] => A+\n\
    \    [1] => B+\n    [2] => E\n    [3] => C+\n    [4] => A-\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpvr69dtcl.php:69\nStack trace:\n\
    #0 /tmp/tmpvr69dtcl.php(77): test()\n#1 {main}\n  thrown in /tmp/tmpvr69dtcl.php\
    \ on line 69\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    return array_map(function($grade)\
    \ {\n        if ($grade >= 4.0) {\n            return 'A+';\n        } elseif\
    \ ($grade >= 3.7) {\n            return 'A';\n        } elseif ($grade >= 3.3)\
    \ {\n            return 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  return 'B+';\n        } elseif ($grade >= 2.7) {\n            return 'B';\n\
    \        } elseif ($grade >= 2.3) {\n            return 'B-';\n        } elseif\
    \ ($grade >= 2.0) {\n            return 'C+';\n        } elseif ($grade >= 1.7)\
    \ {\n            return 'C';\n        } elseif ($grade >= 1.3) {\n           \
    \ return 'C-';\n        } elseif ($grade >= 1.0) {\n            return 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            return 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            return 'D-';\n        } else {\n            return\
    \ 'E';\n        }\n    }, $grades);\n}\n\nfunction candidate(...$args) {\n   \
    \ return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsqnn3fap.php:60\n\
    Stack trace:\n#0 /tmp/tmpsqnn3fap.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpsqnn3fap.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $gpa = array_combine(\n\
    \        $grades,\n        array_map(\n            function($grade) {\n      \
    \          if ($grade > 4) return 'A+';\n                if ($grade > 3.7) return\
    \ 'A';\n                if ($grade > 3.3) return 'A-';\n                if ($grade\
    \ > 3) return 'B+';\n                if ($grade > 2.7) return 'B';\n         \
    \       if ($grade > 2.3) return 'B-';\n                if ($grade > 2) return\
    \ 'C+';\n                if ($grade > 1.7) return 'C';\n                if ($grade\
    \ > 1.3) return 'C-';\n                if ($grade > 1) return 'D+';\n        \
    \        if ($grade > 0.7) return 'D';\n                if ($grade > 0) return\
    \ 'D-';\n                return 'E';\n            },\n            $grades\n  \
    \      )\n    );\n    return $gpa;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf62w5c3.php:53\n\
    Stack trace:\n#0 /tmp/tmpbf62w5c3.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpbf62w5c3.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    for ($i = 0; $i < count($grades); $i++) {\n        if ($grades[$i]\
    \ == 4.0) {\n            $result[] = 'A+';\n        } elseif ($grades[$i] >= 3.7)\
    \ {\n            $result[] = 'A';\n        } elseif ($grades[$i] >= 3.3) {\n \
    \           $result[] = 'A-';\n        } elseif ($grades[$i] >= 3.0) {\n     \
    \       $result[] = 'B+';\n        } elseif ($grades[$i] >= 2.7) {\n         \
    \   $result[] = 'B';\n        } elseif ($grades[$i] >= 2.3) {\n            $result[]\
    \ = 'B-';\n        } elseif ($grades[$i] >= 2.0) {\n            $result[] = 'C+';\n\
    \        } elseif ($grades[$i] >= 1.7) {\n            $result[] = 'C';\n     \
    \   } elseif ($grades[$i] >= 1.3) {\n            $result[] = 'C-';\n        }\
    \ elseif ($grades[$i] >= 1.0) {\n            $result[] = 'D+';\n        } elseif\
    \ ($grades[$i] >= 0.7) {\n            $result[] = 'D';\n        } elseif ($grades[$i]\
    \ >= 0.0) {\n            $result[] = 'D-';\n        } else {\n            $result[]\
    \ = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnkxymayk.php:62\n\
    Stack trace:\n#0 /tmp/tmpnkxymayk.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpnkxymayk.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // your code\
    \ here\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkf_grzgi.php:32\n\
    Stack trace:\n#0 /tmp/tmpkf_grzgi.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpkf_grzgi.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $gradesArray\
    \ = [];\n  foreach ($grades as $grade) {\n    if ($grade === 4.0) {\n      array_push($gradesArray,\
    \ 'A+');\n    } elseif ($grade >= 3.7) {\n      array_push($gradesArray, 'A');\n\
    \    } elseif ($grade >= 3.3) {\n      array_push($gradesArray, 'A-');\n    }\
    \ elseif ($grade >= 3.0) {\n      array_push($gradesArray, 'B+');\n    } elseif\
    \ ($grade >= 2.7) {\n      array_push($gradesArray, 'B');\n    } elseif ($grade\
    \ >= 2.3) {\n      array_push($gradesArray, 'B-');\n    } elseif ($grade >= 2.0)\
    \ {\n      array_push($gradesArray, 'C+');\n    } elseif ($grade >= 1.7) {\n \
    \     array_push($gradesArray, 'C');\n    } elseif ($grade >= 1.3) {\n      array_push($gradesArray,\
    \ 'C-');\n    } elseif ($grade >= 1.0) {\n      array_push($gradesArray, 'D+');\n\
    \    } elseif ($grade >= 0.7) {\n      array_push($gradesArray, 'D');\n    } elseif\
    \ ($grade >= 0.0) {\n      array_push($gradesArray, 'D-');\n    } else {\n   \
    \   array_push($gradesArray, 'E');\n    }\n  }\n  return $gradesArray;\n}\n\n\
    $grades = [4.0, 3, 1.7, 2, 3.5];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqao3boad.php:64\n\
    Stack trace:\n#0 /tmp/tmpqao3boad.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpqao3boad.php\
    \ on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $map = [\n \
    \   4.0 => 'A+',\n    3.7 => 'A',\n    3.3 => 'A-',\n    3.0 => 'B+',\n    2.7\
    \ => 'B',\n    2.3 => 'B-',\n    2.0 => 'C+',\n    1.7 => 'C',\n    1.3 => 'C-',\n\
    \    1.0 => 'D+',\n    0.7 => 'D',\n    0.0 => 'D-',\n  ];\n  $res = [];\n  foreach\
    \ ($grades as $g) {\n    $last_key = 0;\n    foreach ($map as $key => $value)\
    \ {\n      if ($g >= $key) {\n        $res[] = $value;\n        break;\n     \
    \ }\n      $last_key = $key;\n    }\n    if ($g < $last_key) {\n      $res[] =\
    \ 'E';\n    }\n  }\n  return $res;\n}\n\nprint_r(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]));\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => E\n    [3] => D+\n \
    \   [4] => E\n    [5] => C+\n    [6] => E\n    [7] => B+\n    [8] => E\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpg68yl1_v.php:61\nStack\
    \ trace:\n#0 /tmp/tmpg68yl1_v.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpg68yl1_v.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_letters\
    \ = [];\n    foreach ($grades as $grade) {\n        if($grade >= 4.0) {\n    \
    \        $grades_letters[] = 'A+';\n        } elseif ($grade > 3.7) {\n      \
    \      $grades_letters[] = 'A';\n        } elseif ($grade > 3.3) {\n         \
    \   $grades_letters[] = 'A-';\n        } elseif ($grade > 3.0) {\n           \
    \ $grades_letters[] = 'B+';\n        } elseif ($grade > 2.7) {\n            $grades_letters[]\
    \ = 'B';\n        } elseif ($grade > 2.3) {\n            $grades_letters[] = 'B-';\n\
    \        } elseif ($grade > 2.0) {\n            $grades_letters[] = 'C+';\n  \
    \      } elseif ($grade > 1.7) {\n            $grades_letters[] = 'C';\n     \
    \   } elseif ($grade > 1.3) {\n            $grades_letters[] = 'C-';\n       \
    \ } elseif ($grade > 1.0) {\n            $grades_letters[] = 'D+';\n        }\
    \ elseif ($grade > 0.7) {\n            $grades_letters[] = 'D';\n        } elseif\
    \ ($grade > 0.0) {\n            $grades_letters[] = 'D-';\n        } else {\n\
    \            $grades_letters[] = 'E';\n        }\n    }\n    return $grades_letters;\n\
    }\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t$letter_grades\
    \ = [];\n\tforeach ($grades as $grade) {\n\t\tif ($grade >= 4.0) {\n\t\t\t$letter_grades[]\
    \ = 'A+';\n\t\t} elseif ($grade >= 3.7) {\n\t\t\t$letter_grades[] = 'A';\n\t\t\
    } elseif ($grade >= 3.3) {\n\t\t\t$letter_grades[] = 'A-';\n\t\t} elseif ($grade\
    \ >= 3.0) {\n\t\t\t$letter_grades[] = 'B+';\n\t\t} elseif ($grade >= 2.7) {\n\t\
    \t\t$letter_grades[] = 'B';\n\t\t} elseif ($grade >= 2.3) {\n\t\t\t$letter_grades[]\
    \ = 'B-';\n\t\t} elseif ($grade >= 2.0) {\n\t\t\t$letter_grades[] = 'C+';\n\t\t\
    } elseif ($grade >= 1.7) {\n\t\t\t$letter_grades[] = 'C';\n\t\t} elseif ($grade\
    \ >= 1.3) {\n\t\t\t$letter_grades[] = 'C-';\n\t\t} elseif ($grade >= 1.0) {\n\t\
    \t\t$letter_grades[] = 'D+';\n\t\t} elseif ($grade >= 0.7) {\n\t\t\t$letter_grades[]\
    \ = 'D';\n\t\t} elseif ($grade >= 0.0) {\n\t\t\t$letter_grades[] = 'D-';\n\t\t\
    } else {\n\t\t\t$letter_grades[] = 'E';\n\t\t}\n\t}\n\treturn $letter_grades;\n\
    }\nprint_r(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4mf1kkdh.php:62\n\
    Stack trace:\n#0 /tmp/tmp4mf1kkdh.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp4mf1kkdh.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $res = [];\n\
    \  foreach ($grades as $grade) {\n    switch (true) {\n      case $grade > 3.7:\n\
    \        $res[] = 'A+';\n        break;\n      case $grade > 3.3:\n        $res[]\
    \ = 'A';\n        break;\n      case $grade > 3.0:\n        $res[] = 'A-';\n \
    \       break;\n      case $grade > 2.7:\n        $res[] = 'B+';\n        break;\n\
    \      case $grade > 2.3:\n        $res[] = 'B';\n        break;\n      case $grade\
    \ > 2.0:\n        $res[] = 'B-';\n        break;\n      case $grade > 1.7:\n \
    \       $res[] = 'C+';\n        break;\n      case $grade > 1.3:\n        $res[]\
    \ = 'C';\n        break;\n      case $grade > 1.0:\n        $res[] = 'C-';\n \
    \       break;\n      case $grade > 0.7:\n        $res[] = 'D+';\n        break;\n\
    \      case $grade > 0.0:\n        $res[] = 'D';\n        break;\n      case $grade\
    \ > 0.0:\n        $res[] = 'D-';\n        break;\n      default:\n        $res[]\
    \ = 'E';\n    }\n  }\n  return $res;\n}\n$grades = [4.0, 3, 1.7, 2, 3.5];\n$res\
    \ = numerical_letter_grade($grades);\nprint_r($res);\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A\n)\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpozf07r0z.php:78\n\
    Stack trace:\n#0 /tmp/tmpozf07r0z.php(86): test()\n#1 {main}\n  thrown in /tmp/tmpozf07r0z.php\
    \ on line 78\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letters =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade > 4.0) {\n      \
    \      $letters[] = 'A+';\n        } elseif ($grade > 3.7) {\n            $letters[]\
    \ = 'A';\n        } elseif ($grade > 3.3) {\n            $letters[] = 'A-';\n\
    \        } elseif ($grade > 3.0) {\n            $letters[] = 'B+';\n        }\
    \ elseif ($grade > 2.7) {\n            $letters[] = 'B';\n        } elseif ($grade\
    \ > 2.3) {\n            $letters[] = 'B-';\n        } elseif ($grade > 2.0) {\n\
    \            $letters[] = 'C+';\n        } elseif ($grade > 1.7) {\n         \
    \   $letters[] = 'C';\n        } elseif ($grade > 1.3) {\n            $letters[]\
    \ = 'C-';\n        } elseif ($grade > 1.0) {\n            $letters[] = 'D+';\n\
    \        } elseif ($grade > 0.7) {\n            $letters[] = 'D';\n        } elseif\
    \ ($grade > 0.0) {\n            $letters[] = 'D-';\n        } else {\n       \
    \     $letters[] = 'E';\n        }\n    }\n    return $letters;\n}\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjya_acsd.php:62\n\
    Stack trace:\n#0 /tmp/tmpjya_acsd.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpjya_acsd.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ array_map(function($grade) {\n        switch (true) {\n            case $grade\
    \ == 4.0:\n                return 'A+';\n            case $grade > 3.7:\n    \
    \            return 'A';\n            case $grade > 3.3:\n                return\
    \ 'A-';\n            case $grade > 3.0:\n                return 'B+';\n      \
    \      case $grade > 2.7:\n                return 'B';\n            case $grade\
    \ > 2.3:\n                return 'B-';\n            case $grade > 2.0:\n     \
    \           return 'C+';\n            case $grade > 1.7:\n                return\
    \ 'C';\n            case $grade > 1.3:\n                return 'C-';\n       \
    \     case $grade > 1.0:\n                return 'D+';\n            case $grade\
    \ > 0.7:\n                return 'D';\n            case $grade > 0.0:\n      \
    \          return 'D-';\n            default:\n                return 'E';\n \
    \       }\n    }, $grades);\n    return $grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $output =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade == 4.0) {\n     \
    \       $output[] = 'A+';\n        } elseif ($grade > 3.7) {\n            $output[]\
    \ = 'A';\n        } elseif ($grade > 3.3) {\n            $output[] = 'A-';\n \
    \       } elseif ($grade > 3.0) {\n            $output[] = 'B+';\n        } elseif\
    \ ($grade > 2.7) {\n            $output[] = 'B';\n        } elseif ($grade > 2.3)\
    \ {\n            $output[] = 'B-';\n        } elseif ($grade > 2.0) {\n      \
    \      $output[] = 'C+';\n        } elseif ($grade > 1.7) {\n            $output[]\
    \ = 'C';\n        } elseif ($grade > 1.3) {\n            $output[] = 'C-';\n \
    \       } elseif ($grade > 1.0) {\n            $output[] = 'D+';\n        } elseif\
    \ ($grade > 0.7) {\n            $output[] = 'D';\n        } elseif ($grade > 0.0)\
    \ {\n            $output[] = 'D-';\n        } else {\n            $output[] =\
    \ 'E';\n        }\n    }\n    return $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $aplus = [\"\
    A+\"];\n    $a = [\"A\"];\n    $aminus = [\"A-\"];\n    $bplus = [\"B+\"];\n \
    \   $b = [\"B\"];\n    $bminus = [\"B-\"];\n    $cplus = [\"C+\"];\n    $c = [\"\
    C\"];\n    $cminus = [\"C-\"];\n    $dplus = [\"D+\"];\n    $d = [\"D\"];\n  \
    \  $dminus = [\"D-\"];\n    $e = [\"E\"];\n    for ($i = 0; $i < count($grades);\
    \ $i++) {\n        if ($grades[$i] == 4.0) {\n            $aplus[$i] = $grades[$i];\n\
    \        } elseif ($grades[$i] > 3.7) {\n            $a[$i] = $grades[$i];\n \
    \       } elseif ($grades[$i] > 3.3) {\n            $aminus[$i] = $grades[$i];\n\
    \        } elseif ($grades[$i] > 3.0) {\n            $bplus[$i] = $grades[$i];\n\
    \        } elseif ($grades[$i] > 2.7) {\n            $b[$i] = $grades[$i];\n \
    \       } elseif ($grades[$i] > 2.3) {\n            $bminus[$i] = $grades[$i];\n\
    \        } elseif ($grades[$i] > 2.0) {\n            $cplus[$i] = $grades[$i];\n\
    \        } elseif ($grades[$i] > 1.7) {\n            $c[$i] = $grades[$i];\n \
    \       } elseif ($grades[$i] > 1.3) {\n            $cminus[$i] = $grades[$i];\n\
    \        } elseif ($grades[$i] > 1.0) {\n            $dplus[$i] = $grades[$i];\n\
    \        } elseif ($grades[$i] > 0.7) {\n            $d[$i] = $grades[$i];\n \
    \       }\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpi1taq0pl.php on line 74\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $output =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $output[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $output[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $output[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $output[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $output[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $output[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $output[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $output[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $output[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $output[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $output[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $output[] = 'D-';\n        } else {\n       \
    \     $output[] = 'E';\n        }\n    }\n    return $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz_2obs34.php:62\n\
    Stack trace:\n#0 /tmp/tmpz_2obs34.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpz_2obs34.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\necho '<pre>';\n\
    print_r(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\necho '</pre>';\n\necho\
    \ '<hr>';\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n\
    \    [4] => A-\n)\n</pre><hr>\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpfmdks227.php:67\nStack trace:\n#0 /tmp/tmpfmdks227.php(75): test()\n\
    #1 {main}\n  thrown in /tmp/tmpfmdks227.php on line 67\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n$grades = [4.0, 3, 1.7, 2, 3.5];\nvar_dump(numerical_letter_grade($grades));\n\
    \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(5) {\n  [0]=>\n  string(2) \"A+\"\n  [1]=>\n  string(2) \"B+\"\n\
    \  [2]=>\n  string(1) \"C\"\n  [3]=>\n  string(2) \"C+\"\n  [4]=>\n  string(2)\
    \ \"A-\"\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc0piw9ky.php:64\n\
    Stack trace:\n#0 /tmp/tmpc0piw9ky.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpc0piw9ky.php\
    \ on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = array();\n    foreach ($grades as $gpa) {\n        switch (true) {\n     \
    \       case $gpa >= 4.0:\n                $letter_grades[] = 'A+';\n        \
    \        break;\n            case $gpa >= 3.7:\n                $letter_grades[]\
    \ = 'A';\n                break;\n            case $gpa >= 3.3:\n            \
    \    $letter_grades[] = 'A-';\n                break;\n            case $gpa >=\
    \ 3.0:\n                $letter_grades[] = 'B+';\n                break;\n   \
    \         case $gpa >= 2.7:\n                $letter_grades[] = 'B';\n       \
    \         break;\n            case $gpa >= 2.3:\n                $letter_grades[]\
    \ = 'B-';\n                break;\n            case $gpa >= 2.0:\n           \
    \     $letter_grades[] = 'C+';\n                break;\n            case $gpa\
    \ >= 1.7:\n                $letter_grades[] = 'C';\n                break;\n \
    \           case $gpa >= 1.3:\n                $letter_grades[] = 'C-';\n    \
    \            break;\n            case $gpa >= 1.0:\n                $letter_grades[]\
    \ = 'D+';\n                break;\n            case $gpa >= 0.7:\n           \
    \     $letter_grades[] = 'D';\n                break;\n            case $gpa >=\
    \ 0.0:\n                $letter_grades[] = 'D-';\n                break;\n   \
    \         default:\n                $letter_grades[] = 'E';\n                break;\n\
    \        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurr9sq4y.php:76\n\
    Stack trace:\n#0 /tmp/tmpurr9sq4y.php(84): test()\n#1 {main}\n  thrown in /tmp/tmpurr9sq4y.php\
    \ on line 76\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t$letters = [];\n\
    \tforeach ($grades as $grade) {\n\t\tif ($grade == 4.0) {\n\t\t\t$letters[] =\
    \ 'A+';\n\t\t} elseif ($grade > 3.7) {\n\t\t\t$letters[] = 'A';\n\t\t} elseif\
    \ ($grade > 3.3) {\n\t\t\t$letters[] = 'A-';\n\t\t} elseif ($grade > 3.0) {\n\t\
    \t\t$letters[] = 'B+';\n\t\t} elseif ($grade > 2.7) {\n\t\t\t$letters[] = 'B';\n\
    \t\t} elseif ($grade > 2.3) {\n\t\t\t$letters[] = 'B-';\n\t\t} elseif ($grade\
    \ > 2.0) {\n\t\t\t$letters[] = 'C+';\n\t\t} elseif ($grade > 1.7) {\n\t\t\t$letters[]\
    \ = 'C';\n\t\t} elseif ($grade > 1.3) {\n\t\t\t$letters[] = 'C-';\n\t\t} elseif\
    \ ($grade > 1.0) {\n\t\t\t$letters[] = 'D+';\n\t\t} elseif ($grade > 0.7) {\n\t\
    \t\t$letters[] = 'D';\n\t\t} elseif ($grade > 0.0) {\n\t\t\t$letters[] = 'D-';\n\
    \t\t} else {\n\t\t\t$letters[] = 'E';\n\t\t}\n\t}\n\treturn $letters;\n}\necho\
    \ '<pre>';\nprint_r(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\necho '</pre>';\n\
    \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => A+\n    [1] => B\n    [2] => C-\n    [3] => C\n\
    \    [4] => A-\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades = array_map(function($grade)\
    \ {\n    switch($grade) {\n      case $grade >= 4.0:\n        return 'A+';\n \
    \     case $grade >= 3.7:\n        return 'A';\n      case $grade >= 3.3:\n  \
    \      return 'A-';\n      case $grade >= 3.0:\n        return 'B+';\n      case\
    \ $grade >= 2.7:\n        return 'B';\n      case $grade >= 2.3:\n        return\
    \ 'B-';\n      case $grade >= 2.0:\n        return 'C+';\n      case $grade >=\
    \ 1.7:\n        return 'C';\n      case $grade >= 1.3:\n        return 'C-';\n\
    \      case $grade >= 1.0:\n        return 'D+';\n      case $grade >= 0.7:\n\
    \        return 'D';\n      case $grade >= 0.0:\n        return 'D-';\n      case\
    \ $grade == 0.0:\n        return 'E';\n    }\n  }, $grades);\n  return $grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyoar1xup.php:62\n\
    Stack trace:\n#0 /tmp/tmpyoar1xup.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpyoar1xup.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\necho \"<pre>\";\nprint_r(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n\
    \    [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0rsw3a8r.php:63\n\
    Stack trace:\n#0 /tmp/tmp0rsw3a8r.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp0rsw3a8r.php\
    \ on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp21uax707.php:62\n\
    Stack trace:\n#0 /tmp/tmp21uax707.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp21uax707.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_numerical\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade == 4.0) {\n   \
    \         $grades_numerical[] = \"A+\";\n        } elseif ($grade > 3.7) {\n \
    \           $grades_numerical[] = \"A\";\n        } elseif ($grade > 3.3) {\n\
    \            $grades_numerical[] = \"A-\";\n        } elseif ($grade > 3.0) {\n\
    \            $grades_numerical[] = \"B+\";\n        } elseif ($grade > 2.7) {\n\
    \            $grades_numerical[] = \"B\";\n        } elseif ($grade > 2.3) {\n\
    \            $grades_numerical[] = \"B-\";\n        } elseif ($grade > 2.0) {\n\
    \            $grades_numerical[] = \"C+\";\n        } elseif ($grade > 1.7) {\n\
    \            $grades_numerical[] = \"C\";\n        } elseif ($grade > 1.3) {\n\
    \            $grades_numerical[] = \"C-\";\n        } elseif ($grade > 1.0) {\n\
    \            $grades_numerical[] = \"D+\";\n        } elseif ($grade > 0.7) {\n\
    \            $grades_numerical[] = \"D\";\n        } elseif ($grade > 0.0) {\n\
    \            $grades_numerical[] = \"D-\";\n        } else {\n            $grades_numerical[]\
    \ = \"E\";\n        }\n    }\n    return $grades_numerical;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_str\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_str[] = 'A+';\n        } elseif ($grade >= 3.7) {\n        \
    \    $grades_str[] = 'A';\n        } elseif ($grade >= 3.3) {\n            $grades_str[]\
    \ = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grades_str[] = 'B+';\n\
    \        } elseif ($grade >= 2.7) {\n            $grades_str[] = 'B';\n      \
    \  } elseif ($grade >= 2.3) {\n            $grades_str[] = 'B-';\n        } elseif\
    \ ($grade >= 2.0) {\n            $grades_str[] = 'C+';\n        } elseif ($grade\
    \ >= 1.7) {\n            $grades_str[] = 'C';\n        } elseif ($grade >= 1.3)\
    \ {\n            $grades_str[] = 'C-';\n        } elseif ($grade >= 1.0) {\n \
    \           $grades_str[] = 'D+';\n        } elseif ($grade >= 0.7) {\n      \
    \      $grades_str[] = 'D';\n        } elseif ($grade >= 0.0) {\n            $grades_str[]\
    \ = 'D-';\n        } else {\n            $grades_str[] = 'E';\n        }\n   \
    \ }\n    return $grades_str;\n}\necho '<pre>';\nprint_r(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]));\necho '</pre>';\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n\
    \    [4] => A-\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3gvd80jl.php:64\n\
    Stack trace:\n#0 /tmp/tmp3gvd80jl.php(72): test()\n#1 {main}\n  thrown in /tmp/tmp3gvd80jl.php\
    \ on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    for ($i = 0; $i < count($grades); $i++) {\n        if ($grades[$i]\
    \ >= 4.0) {\n            array_push($letter_grades, 'A+');\n        } elseif ($grades[$i]\
    \ >= 3.7) {\n            array_push($letter_grades, 'A');\n        } elseif ($grades[$i]\
    \ >= 3.3) {\n            array_push($letter_grades, 'A-');\n        } elseif ($grades[$i]\
    \ >= 3.0) {\n            array_push($letter_grades, 'B+');\n        } elseif ($grades[$i]\
    \ >= 2.7) {\n            array_push($letter_grades, 'B');\n        } elseif ($grades[$i]\
    \ >= 2.3) {\n            array_push($letter_grades, 'B-');\n        } elseif ($grades[$i]\
    \ >= 2.0) {\n            array_push($letter_grades, 'C+');\n        } elseif ($grades[$i]\
    \ >= 1.7) {\n            array_push($letter_grades, 'C');\n        } elseif ($grades[$i]\
    \ >= 1.3) {\n            array_push($letter_grades, 'C-');\n        } elseif ($grades[$i]\
    \ >= 1.0) {\n            array_push($letter_grades, 'D+');\n        } elseif ($grades[$i]\
    \ >= 0.7) {\n            array_push($letter_grades, 'D');\n        } elseif ($grades[$i]\
    \ >= 0.0) {\n            array_push($letter_grades, 'D-');\n        } else {\n\
    \            array_push($letter_grades, 'E');\n        }\n    }\n    return $letter_grades;\n\
    }\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkl5_6k6e.php:61\n\
    Stack trace:\n#0 /tmp/tmpkl5_6k6e.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpkl5_6k6e.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $numerical\
    \ = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0];\n    $letter\
    \ = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E'];\n\
    \    $result = [];\n    for ($i = 0; $i < count($grades); $i++) {\n        for\
    \ ($j = 0; $j < count($numerical); $j++) {\n            if ($grades[$i] > $numerical[$j])\
    \ {\n                $result[] = $letter[$j];\n                break;\n      \
    \      }\n        }\n    }\n    return $result;\n}\necho numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]);\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf2oh19on.php:43\n\
    Stack trace:\n#0 /tmp/tmpf2oh19on.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpf2oh19on.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    \n}\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf5hug1zg.php:31\n\
    Stack trace:\n#0 /tmp/tmpf5hug1zg.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpf5hug1zg.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  // Write your\
    \ code here\n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi11qyvhg.php:31\n\
    Stack trace:\n#0 /tmp/tmpi11qyvhg.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpi11qyvhg.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $letters = array();\n\
    \  foreach ($grades as $grade) {\n    if ($grade >= 4.0) {\n      $letters[] =\
    \ 'A+';\n    } elseif ($grade >= 3.7) {\n      $letters[] = 'A';\n    } elseif\
    \ ($grade >= 3.3) {\n      $letters[] = 'A-';\n    } elseif ($grade >= 3.0) {\n\
    \      $letters[] = 'B+';\n    } elseif ($grade >= 2.7) {\n      $letters[] =\
    \ 'B';\n    } elseif ($grade >= 2.3) {\n      $letters[] = 'B-';\n    } elseif\
    \ ($grade >= 2.0) {\n      $letters[] = 'C+';\n    } elseif ($grade >= 1.7) {\n\
    \      $letters[] = 'C';\n    } elseif ($grade >= 1.3) {\n      $letters[] = 'C-';\n\
    \    } elseif ($grade >= 1.0) {\n      $letters[] = 'D+';\n    } elseif ($grade\
    \ >= 0.7) {\n      $letters[] = 'D';\n    } elseif ($grade >= 0.0) {\n      $letters[]\
    \ = 'D-';\n    } else {\n      $letters[] = 'E';\n    }\n  }\n  return $letters;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0700wj9.php:62\n\
    Stack trace:\n#0 /tmp/tmpp0700wj9.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpp0700wj9.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letters =\
    \ ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E'];\n\
    \    $numerical = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0,\
    \ 0.0];\n    $results = [];\n    foreach ($grades as $grade) {\n        for ($i\
    \ = 0; $i < count($numerical); $i++) {\n            if ($grade >= $numerical[$i])\
    \ {\n                $results[] = $letters[$i];\n                break;\n    \
    \        }\n        }\n    }\n    return $results;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp60o9_q6d.php:43\n\
    Stack trace:\n#0 /tmp/tmp60o9_q6d.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp60o9_q6d.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxn87_5ao.php:61\n\
    Stack trace:\n#0 /tmp/tmpxn87_5ao.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpxn87_5ao.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $gradesArray\
    \ = [];\n    foreach ($grades as $gpa) {\n        if ($gpa == 4.0) {\n       \
    \     $gradesArray[] = 'A+';\n        } elseif ($gpa > 3.7) {\n            $gradesArray[]\
    \ = 'A';\n        } elseif ($gpa > 3.3) {\n            $gradesArray[] = 'A-';\n\
    \        } elseif ($gpa > 3.0) {\n            $gradesArray[] = 'B+';\n       \
    \ } elseif ($gpa > 2.7) {\n            $gradesArray[] = 'B';\n        } elseif\
    \ ($gpa > 2.3) {\n            $gradesArray[] = 'B-';\n        } elseif ($gpa >\
    \ 2.0) {\n            $gradesArray[] = 'C+';\n        } elseif ($gpa > 1.7) {\n\
    \            $gradesArray[] = 'C';\n        } elseif ($gpa > 1.3) {\n        \
    \    $gradesArray[] = 'C-';\n        } elseif ($gpa > 1.0) {\n            $gradesArray[]\
    \ = 'D+';\n        } elseif ($gpa > 0.7) {\n            $gradesArray[] = 'D';\n\
    \        } elseif ($gpa > 0.0) {\n            $gradesArray[] = 'D-';\n       \
    \ } else {\n            $gradesArray[] = 'E';\n        }\n    }\n    return $gradesArray;\n\
    }\necho numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])[0];\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: A+
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if($grade == 4.0) {\n    \
    \        $letter_grades[] = 'A+';\n        } elseif ($grade > 3.7) {\n       \
    \     $letter_grades[] = 'A';\n        } elseif ($grade > 3.3) {\n           \
    \ $letter_grades[] = 'A-';\n        } elseif ($grade > 3.0) {\n            $letter_grades[]\
    \ = 'B+';\n        } elseif ($grade > 2.7) {\n            $letter_grades[] = 'B';\n\
    \        } elseif ($grade > 2.3) {\n            $letter_grades[] = 'B-';\n   \
    \     } elseif ($grade > 2.0) {\n            $letter_grades[] = 'C+';\n      \
    \  } elseif ($grade > 1.7) {\n            $letter_grades[] = 'C';\n        } elseif\
    \ ($grade > 1.3) {\n            $letter_grades[] = 'C-';\n        } elseif ($grade\
    \ > 1.0) {\n            $letter_grades[] = 'D+';\n        } elseif ($grade > 0.7)\
    \ {\n            $letter_grades[] = 'D';\n        } elseif ($grade > 0.0) {\n\
    \            $letter_grades[] = 'D-';\n        } else {\n            $letter_grades[]\
    \ = 'E';\n        }\n    }\n    return $letter_grades;\n}\necho implode(', ',\
    \ numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: A+, B, C-, C, A-
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if($grade < 0.7) {\n     \
    \       array_push($letter_grades, 'E');\n        } elseif ($grade < 1.0) {\n\
    \            array_push($letter_grades, 'D-');\n        } elseif ($grade < 1.3)\
    \ {\n            array_push($letter_grades, 'D+');\n        } elseif ($grade <\
    \ 1.7) {\n            array_push($letter_grades, 'D');\n        } elseif ($grade\
    \ < 2.0) {\n            array_push($letter_grades, 'C-');\n        } elseif ($grade\
    \ < 2.3) {\n            array_push($letter_grades, 'C+');\n        } elseif ($grade\
    \ < 2.7) {\n            array_push($letter_grades, 'C');\n        } elseif ($grade\
    \ < 3.0) {\n            array_push($letter_grades, 'B-');\n        } elseif ($grade\
    \ < 3.3) {\n            array_push($letter_grades, 'B+');\n        } elseif ($grade\
    \ < 3.7) {\n            array_push($letter_grades, 'B');\n        } elseif ($grade\
    \ < 4.0) {\n            array_push($letter_grades, 'A-');\n        } else {\n\
    \            array_push($letter_grades, 'A+');\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbgso7t4w.php:60\n\
    Stack trace:\n#0 /tmp/tmpbgso7t4w.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpbgso7t4w.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grade_letters\
    \ = array(\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\"\
    , \"D+\", \"D\", \"D-\", \"E\");\n    $grade_numbers = array(4.0, 3.7, 3.3, 3.0,\
    \ 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0);\n    $grade_results = array();\n\
    \    foreach ($grades as $grade) {\n        $grd = 0;\n        foreach ($grade_numbers\
    \ as $number) {\n            if ($grade >= $number) {\n                $grd =\
    \ $number;\n                break;\n            }\n        }\n        $index =\
    \ array_search($grd, $grade_numbers);\n        $grade_results[] = $grade_letters[$index];\n\
    \    }\n    return $grade_results;\n}\nprint_r(numerical_letter_grade([4.0, 3,\
    \ 1.7, 2, 3.5]));\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7cen_37i.php:46\n\
    Stack trace:\n#0 /tmp/tmp7cen_37i.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp7cen_37i.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $value) {\n        if ($value >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($value >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($value >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($value >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($value >= 2.7) {\n            $result[] = 'B';\n        } elseif ($value\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($value >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($value >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($value >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($value >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($value >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($value >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwca56kvx.php:62\n\
    Stack trace:\n#0 /tmp/tmpwca56kvx.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpwca56kvx.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Write your\
    \ code here!\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n  \
    \      if ($grade >= 4.0) {\n            $letter_grades[] = 'A+';\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = 'A';\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = 'A-';\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7)\
    \ {\n            $letter_grades[] = 'B';\n        } elseif ($grade >= 2.3) {\n\
    \            $letter_grades[] = 'B-';\n        } elseif ($grade >= 2.0) {\n  \
    \          $letter_grades[] = 'C+';\n        } elseif ($grade >= 1.7) {\n    \
    \        $letter_grades[] = 'C';\n        } elseif ($grade >= 1.3) {\n       \
    \     $letter_grades[] = 'C-';\n        } elseif ($grade >= 1.0) {\n         \
    \   $letter_grades[] = 'D+';\n        } elseif ($grade >= 0.7) {\n           \
    \ $letter_grades[] = 'D';\n        } elseif ($grade >= 0.0) {\n            $letter_grades[]\
    \ = 'D-';\n        } else {\n            $letter_grades[] = 'E';\n        }\n\
    \    }\n    return $letter_grades;\n}\n\n$grades = [4.0, 3, 1.7, 2, 3.5];\necho\
    \ '<pre>';\nvar_dump(numerical_letter_grade($grades));\necho '</pre>';\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>array(5) {\n  [0]=>\n  string(2) \"A+\"\n  [1]=>\n  string(2) \"B+\"\
    \n  [2]=>\n  string(1) \"C\"\n  [3]=>\n  string(2) \"C+\"\n  [4]=>\n  string(2)\
    \ \"A-\"\n}\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwb6eyoab.php:67\n\
    Stack trace:\n#0 /tmp/tmpwb6eyoab.php(75): test()\n#1 {main}\n  thrown in /tmp/tmpwb6eyoab.php\
    \ on line 67\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $output = [];\n\
    \  foreach ($grades as $key => $grade) {\n    if ($grade >= 4.0) {\n      $output[]\
    \ = 'A+';\n    } elseif ($grade >= 3.7) {\n      $output[] = 'A';\n    } elseif\
    \ ($grade >= 3.3) {\n      $output[] = 'A-';\n    } elseif ($grade >= 3.0) {\n\
    \      $output[] = 'B+';\n    } elseif ($grade >= 2.7) {\n      $output[] = 'B';\n\
    \    } elseif ($grade >= 2.3) {\n      $output[] = 'B-';\n    } elseif ($grade\
    \ >= 2.0) {\n      $output[] = 'C+';\n    } elseif ($grade >= 1.7) {\n      $output[]\
    \ = 'C';\n    } elseif ($grade >= 1.3) {\n      $output[] = 'C-';\n    } elseif\
    \ ($grade >= 1.0) {\n      $output[] = 'D+';\n    } elseif ($grade >= 0.7) {\n\
    \      $output[] = 'D';\n    } elseif ($grade >= 0.0) {\n      $output[] = 'D-';\n\
    \    } else {\n      $output[] = 'E';\n    }\n  }\n  return $output;\n}\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt8mplwsj.php:61\n\
    Stack trace:\n#0 /tmp/tmpt8mplwsj.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpt8mplwsj.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $result = [];\n\
    \  foreach ($grades as $grade) {\n    if ($grade >= 4.0) {\n      $result[] =\
    \ 'A+';\n    } elseif ($grade >= 3.7) {\n      $result[] = 'A';\n    } elseif\
    \ ($grade >= 3.3) {\n      $result[] = 'A-';\n    } elseif ($grade >= 3.0) {\n\
    \      $result[] = 'B+';\n    } elseif ($grade >= 2.7) {\n      $result[] = 'B';\n\
    \    } elseif ($grade >= 2.3) {\n      $result[] = 'B-';\n    } elseif ($grade\
    \ >= 2.0) {\n      $result[] = 'C+';\n    } elseif ($grade >= 1.7) {\n      $result[]\
    \ = 'C';\n    } elseif ($grade >= 1.3) {\n      $result[] = 'C-';\n    } elseif\
    \ ($grade >= 1.0) {\n      $result[] = 'D+';\n    } elseif ($grade >= 0.7) {\n\
    \      $result[] = 'D';\n    } elseif ($grade > 0.0) {\n      $result[] = 'D-';\n\
    \    } else {\n      $result[] = 'E';\n    }\n  }\n  return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvbxv7ncu.php:61\n\
    Stack trace:\n#0 /tmp/tmpvbxv7ncu.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpvbxv7ncu.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    return array_map(function($grade)\
    \ {\n        if ($grade >= 4.0) {\n            return 'A+';\n        }\n     \
    \   if ($grade >= 3.7) {\n            return 'A';\n        }\n        if ($grade\
    \ >= 3.3) {\n            return 'A-';\n        }\n        if ($grade >= 3.0) {\n\
    \            return 'B+';\n        }\n        if ($grade >= 2.7) {\n         \
    \   return 'B';\n        }\n        if ($grade >= 2.3) {\n            return 'B-';\n\
    \        }\n        if ($grade >= 2.0) {\n            return 'C+';\n        }\n\
    \        if ($grade >= 1.7) {\n            return 'C';\n        }\n        if\
    \ ($grade >= 1.3) {\n            return 'C-';\n        }\n        if ($grade >=\
    \ 1.0) {\n            return 'D+';\n        }\n        if ($grade >= 0.7) {\n\
    \            return 'D';\n        }\n        if ($grade >= 0.0) {\n          \
    \  return 'D-';\n        }\n        return 'E';\n    }, $grades);\n}\n\nprint_r(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]));\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1z7fzbta.php:72\n\
    Stack trace:\n#0 /tmp/tmp1z7fzbta.php(80): test()\n#1 {main}\n  thrown in /tmp/tmp1z7fzbta.php\
    \ on line 72\n"
  stderr: ''
  exit_code: 255
  status: Exception
