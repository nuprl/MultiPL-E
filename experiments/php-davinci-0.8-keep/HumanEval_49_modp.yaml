name: HumanEval_49_modp
language: php
prompt: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n\
  // 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
  // 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n"
tests: "function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\n\
  test();"
completions: ["    $r = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $r = ($r *\
    \ 2) % $p;\n    }\n    return $r;\n}\n", "\tif ($n == 0) {\n\t\treturn 1;\n\t\
    } else if ($n % 2 == 0) {\n\t\t$np = modp($n / 2, $p);\n\t\treturn ($np * $np)\
    \ % $p;\n\t} else {\n\t\treturn (2 * modp($n - 1, $p)) % $p;\n\t}\n}\n", "   \
    \ $r = 1;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r = ($r *\
    \ $p) % 1000000007;\n        }\n        $p = ($p * $p) % 1000000007;\n       \
    \ $n = $n >> 1;\n    }\n    return $r;\n}", "    if ($n == 0) {\n        return\
    \ 1;\n    }\n    if ($n % 2 == 0) {\n        $pow = modp($n / 2, $p);\n      \
    \  return ($pow * $pow) % $p;\n    } else {\n        return ($n % $p) * modp($n\
    \ - 1, $p) % $p;\n    }\n}\n\n$p = 101;\n$a = rand(1, $p - 1);\necho \"a = $a,\
    \ p = $p\\n\";\n$x = rand(1, $p - 1);\necho \"x = $x\\n\";\n$n = rand(1, $p -\
    \ 1);\necho \"n = $n\\n\";\n$y = modp($a, $p);\n$z = modp($y, $p);\necho \"y =\
    \ $y, z = $z\\n\";\n$u = modp($x, $p);\n$v = modp($u, $p);\necho \"u = $u, v =\
    \ $v\\n\";\n\n$pu = modp($p - 1, $p);\necho \"p - 1 mod p = $pu\\n\";\n$pa = modp($p\
    \ + 1, $p);\necho \"p + 1 mod p = $pa\\n\";\n$p0 = modp($p, $p);\necho \"p mod\
    \ p = $p0\\n\";\n$pn = modp($p * $n, $p);\necho \"p * n mod p = $pn\\n\";\n\n\
    $l1 = modp($x * $n, $p);\necho \"x * n mod p = $l1\\n\";\n$l2 = modp($x * $y,\
    \ $p);\necho \"x * y mod p = $l2\\n\";\n$l3 = modp($x * $z, $p);\necho \"x * z\
    \ mod p = $l3\\n\";\n$l4 = modp($x + $y, $p);\necho \"x + y mod p = $l4\\n\";\n\
    $l5 = modp($x + $z, $p);\necho \"x + z mod", "\t$r = 1;\n\t$n = (int)$n;\n\t$p\
    \ = (int)$p;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r = ($r * $p) % (pow(2,\
    \ 32));\n\t\t}\n\t\t$p = ($p * $p) % (pow(2, 32));\n\t\t$n >>= 1;\n\t}\n\treturn\
    \ $r;\n}\n", "\t$r = 1;\n\twhile ($n > 0) {\n\t\tif ($n & 1)\n\t\t\t$r = $r *\
    \ 2 % $p;\n\t\t$n >>= 1;\n\t}\n\treturn $r;\n}\n", "    if ($n < 0) {\n      \
    \  $n = -$n;\n    }\n    $r = 1;\n    $pow = $n;\n    while ($pow > 0) {\n   \
    \     if ($pow & 1) {\n            $r = ($r * $n) % $p;\n        }\n        $n\
    \ = ($n * $n) % $p;\n        $pow = $pow >> 1;\n    }\n    return $r;\n}", "\t\
    // mod zero will produce error/warning\n\tif (0 == $n) return 1;\n\tif (0 == $p)\
    \ return 0;\n\tif (1 == $p) return 0;\n\tif (1 == $n) return 1;\n\tif (2 == $n)\
    \ return $n % $p;\n\tif (2 > $n) return $n;\n\t$r = 1;\n\twhile (0 < $n) {\n\t\
    \tif (1 == ($n % 2)) $r = ($r * 2) % $p;\n\t\t$n = $n / 2;\n\t}\n\treturn $r;\n\
    }", "    $r = 1;\n    $n = $n % $p;\n    while ($n > 0) {\n        $r = ($r *\
    \ $n) % $p;\n        $n = $n - 1;\n    }\n    return $r;\n}\n", "\t$a = $n;\n\t\
    $b = $p;\n\t$x = 1;\n\t$y = 0;\n\twhile ($b != 0) {\n\t\t$q = intval($a / $b);\n\
    \t\t$t = $b;\n\t\t$b = $a % $b;\n\t\t$a = $t;\n\t\t$t = $x;\n\t\t$x = $y;\n\t\t\
    $y = $t - $q * $y;\n\t}\n\tif ($x < 0)\n\t\t$x += $p;\n\treturn $x;\n}\n", "\t\
    $bin = decbin($n);\n\t$l = strlen($bin);\n\t$x = 1;\n\tfor ($i = $l - 1; $i >=\
    \ 0; $i--) {\n\t\t$x = ($x * $x) % $p;\n\t\tif ($bin[$i] == '1') {\n\t\t\t$x =\
    \ ($x * 2) % $p;\n\t\t}\n\t}\n\treturn $x;\n}\n", "\t$b = 1;\n\twhile ($n > 0)\
    \ {\n\t\tif ($n & 1) {\n\t\t\t$b = ($b * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t\
    $b = ($b * $b) % $p;\n\t}\n\treturn $b;\n}\n", "\t$n = gmp_init($n);\n\t$p = gmp_init($p);\n\
    \t$sq = gmp_init(1);\n\t$x = gmp_init(2);\n\t$N = gmp_init(\"1\" . str_repeat(\"\
    0\", $n));\n\twhile (gmp_cmp($N, $n) <= 0) {\n\t\t$sq = gmp_mul($sq, $x);\n\t\t\
    $sq = gmp_mod($sq, $p);\n\t\t$N = gmp_mul($N, $x);\n\t}\n\treturn gmp_strval($sq);\n\
    }\n", "\tif ($n == 0) return 1;\n\tif ($n == 1) return $n;\n\tif ($n % 2 == 0)\
    \ return modp(($n / 2) % $p, $p) ** 2 % $p;\n\telse return $n * modp(($n - 1)\
    \ % $p, $p) % $p;\n}\n", "    $res = 1;\n    $n %= $p;\n    for ($i = 1; $i <=\
    \ $n; $i++) {\n        $res = ($res * 2) % $p;\n    }\n    return $res;\n}\n\n\
    $x = \"1101\";\n$p = \"101\";\necho modp($x, $p) . \"\\n\";\n", "\t$res = 1;\n\
    \t$mod = $n % $p;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$res = ($res *\
    \ $mod) % $p;\n\t\t}\n\t\t$mod = ($mod * $mod) % $p;\n\t\t$n >>= 1;\n\t}\n\treturn\
    \ $res;\n}\n", "    $r = 1;\n    while ($n) {\n        if ($n & 1) {\n       \
    \     $r = ($r * $n) % $p;\n        }\n        $n = ($n * $n) % $p;\n    }\n \
    \   return $r;\n}\n", "    $r = 1;\n    while ($n > 0) {\n        if ($n & 1)\
    \ {\n            $r = ($r * $n) % $p;\n        }\n        $n = ($n * $n) % $p;\n\
    \    }\n    return $r;\n}\n", "    $res = 1;\n    $n = ($n % $p + $p) % $p;\n\
    \    while ($n > 0) {\n        if ($n & 1) {\n            $res = ($res * $n) %\
    \ $p;\n        }\n        $n = $n >> 1;\n        $n = ($n % $p + $p) % $p;\n \
    \   }\n    return $res;\n}", "    if ($n == 0) {\n        return 1;\n    }\n \
    \   if ($n == 1) {\n        return $n;\n    }\n    if ($n % 2 == 0) {\n      \
    \  $a = modp($n / 2, $p);\n        return ($a * $a) % $p;\n    }\n    else {\n\
    \        $a = modp(($n - 1) / 2, $p);\n        return ($a * $a * $n) % $p;\n \
    \   }\n}\necho modp(3, 5) . \"\\n\";\necho modp(1101, 101) . \"\\n\";\necho modp(0,\
    \ 101) . \"\\n\";\necho modp(3, 11) . \"\\n\";\necho modp(100, 101) . \"\\n\"\
    ;\necho modp(1,101) . \"\\n\";", "\t$result = 1;\n\t$base = $n % $p;\n\twhile\
    \ ($n > 0) {\n\t\tif (($n & 1) == 1) {\n\t\t\t$result = ($result * $base) % $p;\n\
    \t\t}\n\t\t$n >>= 1;\n\t\t$base = ($base * $base) % $p;\n\t}\n\treturn $result;\n\
    }\n", "    $x = 2;\n    $pre = $x;\n    for ($i = 1; $i < $n; $i++) {\n      \
    \  $x = bcmod(bcmul($x, $pre), $p);\n    }\n    return $x;\n}\n", "    if ($n\
    \ == 0) return 1;\n    if ($n == 1) return $n;\n    $res = 1;\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        $res = $res * 2;\n        $res = $res % $p;\n    }\n\
    \    return $res;\n}\n", "\tif ($n==0) {\n\t\treturn 1;\n\t}\n\tif ($n%2==0) {\n\
    \t\treturn modp(2*$n, $p);\n\t}\n\treturn (2*modp($n-1, $p))%$p;\n}\n", "\tif\
    \ ($n == 0) {\n\t\treturn 1;\n\t}\n\tif ($n % 2 == 0) {\n\t\t$z = modp($n / 2,\
    \ $p);\n\t\treturn ($z * $z) % $p;\n\t}\n\treturn ($n % $p) * modp($n - 1, $p)\
    \ % $p;\n}\n", "\tif ($n % $p == 0) {\n\t\treturn 1;\n\t}\n\tif ($n == 0) {\n\t\
    \treturn 1;\n\t}\n\t$res = 1;\n\t$num = 2;\n\t$n %= $p - 1;\n\twhile ($n > 0)\
    \ {\n\t\tif ($n % 2 == 1) {\n\t\t\t$res = ($res * $num) % $p;\n\t\t}\n\t\t$num\
    \ = ($num * $num) % $p;\n\t\t$n = (int)($n / 2);\n\t}\n\treturn $res;\n}\n", "\t\
    // 2^n = 2^(n % p) if n is divisible by p.\n\t$q = floor($n / $p);\n\t$b = 2;\n\
    \tfor ($i = 0; $i < $q; $i++) {\n\t\t$b = ($b * $b) % $p;\n\t}\n\t$r = 1;\n\t\
    for ($i = 0; $i < $n % $p; $i++) {\n\t\t$r = ($r * $b) % $p;\n\t}\n\treturn $r;\n\
    }\n", "\t$r = 1;\n\t$n = $n % $p;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\
    \t$r = ($r * $n) % $p;\n\t\t}\n\t\t$n = ($n * $n) % $p;\n\t}\n\treturn $r;\n}\n",
  "    $c = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $c = $c * 2 % $p;\n   \
    \ }\n    return $c;\n}\n", "    if ($n < 0) return modp(-1 * $n, $p);\n    if\
    \ ($n == 0) return 1;\n    $m = 1;\n    $n = $n % ($p - 1);\n    while ($n > 0)\
    \ {\n        if ($n % 2 == 1) $m = ($m * 2) % $p;\n        $n = floor($n / 2);\n\
    \    }\n    return $m;\n}\n", "    $r = 1;\n    $n = bcmul($n, '1');\n    while\
    \ ($n > 0) {\n        if (bcmod($n, '2') == 1) {\n            $r = bcmod(bcmul($r,\
    \ $p), '4294967296');\n        }\n        $p = bcmod(bcmul($p, $p), '4294967296');\n\
    \        $n = bcdiv($n, '2');\n    }\n    return $r;\n}\n", "    $b = 1;\n   \
    \ $m = 0;\n    while ($n > 0) {\n        $m = (int)($n % 2);\n        $n = (int)($n\
    \ / 2);\n        if ($m == 1) {\n            $b = (int)(($b * $p) % (1 << 32));\n\
    \        }\n        $p = (int)(($p * $p) % (1 << 32));\n    }\n    return $b;\n\
    }\n", "    // return pow(2, $n) % $p; // Works, but will become numerically unstable.\n\
    \    $res = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) $res =\
    \ ($res * $b) % $p;\n        $n >>= 1;\n        $b = ($b * $b) % $p;\n    }\n\
    \    return $res;\n}\n", "\tif ($n == 0) return 1;\n\tif ($n % 2 == 0) {\n\t\t\
    $z = modp($n / 2, $p);\n\t\treturn ($z * $z) % $p;\n\t} else {\n\t\treturn ($n\
    \ % $p) * modp($n - 1, $p) % $p;\n\t}\n}\n", "    if ($n < 0) {\n        return\
    \ modp(-$n, $p);\n    }\n    if ($n == 0) {\n        return 1;\n    }\n    //\
    \ Binary exponentiation.\n    $b = 1;\n    while ($n > 0) {\n        if ($n %\
    \ 2 == 1) {\n            $b = ($b * 2) % $p;\n        }\n        $n = $n / 2;\n\
    \    }\n    return $b;\n}\n", "    if ($n == 0) {\n        return 1;\n    }\n\
    \    $res = modp($n >> 1, $p);\n    $res = $res * $res % $p;\n    if ($n & 1)\
    \ {\n        $res = $res * 2 % $p;\n    }\n    return $res;\n}\n", "    $res =\
    \ 1;\n    $n_bin = decbin($n);\n    for ($i = 0; $i < strlen($n_bin); $i++) {\n\
    \        $res = bcmul($res, $res);\n        $res = bcmod($res, $p);\n        if\
    \ ($n_bin[$i] == '1') {\n            $res = bcmul($res, 2);\n            $res\
    \ = bcmod($res, $p);\n        }\n    }\n    return $res;\n}\n", "    $r = 1;\n\
    \    $n = ($n % $p);\n    while ($n != 0) {\n        if ($n & 1) {\n         \
    \   $r = ($r * $n) % $p;\n        }\n        $n = $n >> 1;\n        $n = ($n *\
    \ $n) % $p;\n    }\n    return $r;\n}", "    $a = pow(2, $n);\n    $m = $a % $p;\n\
    \    return $m;\n}", "\tif ($n == 0) return 1;\n\tif ($n == 1) return 2;\n\t$ans\
    \ = modp($n / 2, $p);\n\t$ans = (2 * $ans) % $p;\n\tif ($n % 2) $ans = (2 * $ans)\
    \ % $p;\n\treturn $ans;\n}\n", "    $m = 1;\n    while ($n > 0) {\n        if\
    \ ($n % 2 == 1) {\n            $m = ($m * 2) % $p;\n        }\n        $n = (int)($n\
    \ / 2);\n        $p = ($p * 2) % 11;\n    }\n    return $m;\n}\n", "\t// TODO:\
    \ test p != 2.\n\tswitch ($n) {\n\t\tcase 0: return 1;\n\t\tcase 1: return 2;\n\
    \t\tcase 2: return 4;\n\t\tcase 3: return 8;\n\t\tcase 4: return 16;\n\t\tcase\
    \ 5: return 32;\n\t\tcase 6: return 64;\n\t\tcase 7: return 128;\n\t\tcase 8:\
    \ return 256;\n\t\tcase 9: return 512;\n\t\tcase 10: return 1024;\n\t\tcase 11:\
    \ return 2048;\n\t\tcase 12: return 4096;\n\t\tcase 13: return 8192;\n\t\tcase\
    \ 14: return 16384;\n\t\tcase 15: return 32768;\n\t\tcase 16: return 65536;\n\t\
    \tcase 17: return 131072;\n\t\tcase 18: return 262144;\n\t\tcase 19: return 524288;\n\
    \t\tcase 20: return 1048576;\n\t\tcase 21: return 2097152;\n\t\tcase 22: return\
    \ 4194304;\n\t\tcase 23: return 8388608;\n\t\tcase 24: return 16777216;\n\t\t\
    case 25: return 33554432;\n\t\tcase 26: return 67108864;\n\t\tcase 27: return\
    \ 134217728;\n\t\tcase 28: return 268435456;\n\t\tcase 29: return 536870912;\n\
    \t\tcase 30: return 1073741824;\n\t\tcase 31: return 2147483648;\n\t\tcase 32:\
    \ return 4294967296;\n\t\tcase 33: return 8589934592;\n\t\tcase 34: return 17179869184;\n\
    \t\tcase 35: return 34359738368;\n\t\tcase 36: return 68719476736;\n\t\tcase 37:\
    \ return 137438953472;\n\t\tcase 38: return 274877906944;\n\t\tcase 39: return\
    \ 549755813888;\n\t\tcase 40: return 1099511627776;\n\t\tcase 41: return 2199023255552;\n\
    \t\tcase 42: return 4398046511104;\n\t\tcase 43: return 8796093022208;\n\t", "\t\
    if ($n == 0) return 1;\n\t$n = _mod($n, $p-1);\n\tif ($n == 0) return 1;\n\t$c\
    \ = $n;\n\tfor ($i = 1; $i < $n; $i++) {\n\t\t$c = _mod($c * $n, $p);\n\t}\n\t\
    return $c;\n}\n", "\t$result = 1;\n\t$n = $n % $p;\n\twhile ($n > 0) {\n\t\tif\
    \ ($n & 1) {\n\t\t\t$result = ($result * $p) % $p;\n\t\t}\n\t\t$n = $n >> 1;\n\
    \t\t$p = ($p * $p) % $p;\n\t}\n\treturn $result;\n}", "    $r = 1;\n    for($i\
    \ = 0; $i < $n; $i++) {\n        $r = $r * 2 % $p;\n    }\n    return $r;\n}\n",
  "\t// 2. Compute 2^n modulo p (be aware of numerics).\n\t// PHP integer limit is\
    \ 2^53 - 1\n\tif ($n >= 53) {\n\t\ttrigger_error(\"modp: argument too large\"\
    , E_USER_WARNING);\n\t\treturn false;\n\t}\n\tif ($n < 0) {\n\t\ttrigger_error(\"\
    modp: argument cannot be negative\", E_USER_WARNING);\n\t\treturn false;\n\t}\n\
    \treturn gmp_strval(gmp_pow(\"2\", $n) % $p);\n}\n", "    $n = (int)$n;\n    $p\
    \ = (int)$p;\n    $res = 1;\n    $aux = 2;\n    $modp = $p;\n    while ($n !=\
    \ 0) {\n        if ($n % 2 == 1) {\n            $res = ($res * $aux) % $modp;\n\
    \        }\n        $aux = ($aux * $aux) % $modp;\n        $n = floor($n / 2);\n\
    \    }\n    return $res;\n}", "    $result = 1;\n    $sq = $n;\n    while ($sq)\
    \ {\n        if ($sq & 1) {\n            $result = $result * $n % $p;\n      \
    \  }\n        $sq >>= 1;\n        $n = $n * $n % $p;\n    }\n    return $result;\n\
    }\n", "    if ($n < 0) {\n        $n = $n % $p;\n    }\n    if ($n == 0) {\n \
    \       return 1;\n    }\n    if ($n % 2) {\n        return (modp($n - 1, $p)\
    \ * 2) % $p;\n    } else {\n        $f = modp($n / 2, $p);\n        return ($f\
    \ * $f) % $p;\n    }\n}\n\n$precision = 10;\necho \"modp(10, 3) = \" . modp(10,\
    \ 3) . \"\\n\";\necho \"modp(123, 3) = \" . modp(123, 3) . \"\\n\";\n", "    if\
    \ ($n == 0) {\n        return 1;\n    } else if ($n % 2 == 0) {\n        return\
    \ modp(($n / 2) * ($n / 2), $p);\n    } else {\n        return ($n % $p) * modp(($n\
    \ - 1) / 2, $p) * modp(($n - 1) / 2, $p);\n    }\n}\n", "\t$i = 1;\n\t$result\
    \ = 1;\n\t$mask = 0x7fffffff;\n\twhile($i < $n && $i & $mask) {\n\t\t$result =\
    \ ($result * 2) % $p;\n\t\t$i++;\n\t}\n\treturn $result;\n}\n", "    if ($n ==\
    \ 0) {\n        return 1;\n    }\n    if ($n == 1) {\n        return $n;\n   \
    \ }\n    $mod = $n % $p;\n    $d = $n / $p;\n    if ($d % 2 == 0) {\n        return\
    \ $mod * $mod % $p;\n    } else {\n        return $mod * $mod * $n % $p;\n   \
    \ }\n}\n\necho modp(3, 5) . \"\\n\";\necho modp(1101, 101) . \"\\n\";\necho modp(0,\
    \ 101) . \"\\n\";\necho modp(3, 11) . \"\\n\";\necho modp(100, 101) . \"\\n\"\
    ;\n", "    $r = 1;\n    while ($n) {\n        if ($n & 1) {\n            $r =\
    \ ($r * $p) % 1000000007;\n        }\n        $p = ($p * $p) % 1000000007;\n \
    \       $n >>= 1;\n    }\n    return $r;\n}\n", "    if (0 == $n) return 1;\n\
    \    $r = modp($n / 2, $p);\n    $r = ($r * $r) % $p;\n    if (1 == $n % 2) {\n\
    \        $r = ($r * 2) % $p;\n    }\n    return $r;\n}\n", "\tif ($n < 0) {\n\t\
    \treturn false;\n\t}\n\t$a = 1;\n\t$b = 0;\n\t$x = $p;\n\t$y = $n;\n\twhile ($y\
    \ > 0) {\n\t\t$r = $x % $y;\n\t\t$q = ($x - $r) / $y;\n\t\t$x = $y;\n\t\t$y =\
    \ $r;\n\t\t$r = $a;\n\t\t$a = $b;\n\t\t$b = $r - $q * $b;\n\t}\n\tif ($x == 1)\
    \ {\n\t\treturn $a % $p;\n\t}\n\treturn false;\n}\n", "    if ($n == 0) return\
    \ 1;\n    if ($n == 1) return $n;\n    if ($n % 2 == 0) {\n        $div = modp($n\
    \ / 2, $p);\n        return ($div * $div) % $p;\n    } else {\n        return\
    \ ($n * modp($n - 1, $p)) % $p;\n    }\n}\n", "    if ($n == 0) {\n        return\
    \ 1;\n    }\n    if ($n % 2 == 0) {\n        $m = modp($n / 2, $p);\n        return\
    \ ($m * $m) % $p;\n    } else {\n        $m = modp(($n - 1) / 2, $p);\n      \
    \  return ($m * $m * $n) % $p;\n    }\n}\n\n$x = 4;\n$y = 5;\necho modp($x, $y);",
  "\t$result = 1;\n\t$square = $n % $p;\n\twhile ($n > 0) {\n\t\tif (($n & 1) == 1)\
    \ {\n\t\t\t$result = ($result * $square) % $p;\n\t\t}\n\t\t$square = ($square\
    \ * $square) % $p;\n\t\t$n >>= 1;\n\t}\n\treturn $result;\n}\n", "    $result\
    \ = 1;\n    $i = 0;\n    while ($i < $n) {\n        $result = ($result * 2) %\
    \ $p;\n        $i = $i + 1;\n    }\n    return $result;\n}\n", "\t// Modular exponentiation\
    \ by squaring.\n\t$m = $n;\n\t$r = 1;\n\twhile ($m) {\n\t\tif ($m & 1) {\n\t\t\
    \t$r = $r * $n % $p;\n\t\t}\n\t\t$m >>= 1;\n\t\t$n = $n * $n % $p;\n\t}\n\treturn\
    \ $r;\n}", "    if (1 == $n) {\n        return 1;\n    }\n    if (0 == $n % 2)\
    \ {\n        return modp(($n / 2) % $p, $p) ** 2 % $p;\n    }\n    return ($n\
    \ % $p) * modp(($n - 1) % $p, $p) % $p;\n}", "    if ($n == 0) return 1;\n   \
    \ if ($n == 1) return $n;\n    if ($n % 2 == 0) {\n        $m = modp($n / 2, $p);\n\
    \        return $m * $m % $p;\n    } else {\n        $m = modp(($n - 1) / 2, $p);\n\
    \        return $m * $m * $n % $p;\n    }\n}\n", "    $p = (int)$p;\n    $n =\
    \ (int)$n;\n    $res = 1;\n    while ($n) {\n        if ($n & 1) {\n         \
    \   $res = ($res * $p) % 256;\n        }\n        $p = ($p * $p) % 256;\n    \
    \    $n >>= 1;\n    }\n    return $res;\n}\n", "\tif ($n == 0) return 1;\n\tif\
    \ ($n % 2 == 0) {\n\t\t$tmp = modp($n/2, $p);\n\t\treturn ($tmp * $tmp) % $p;\n\
    \t} else {\n\t\treturn ($n * modp($n-1, $p)) % $p;\n\t}\n}", "    $mod = 1;\n\
    \    $power = $n % ($p - 1);\n    $divisor = 2;\n    while ($power > 0) {\n  \
    \      $t = $power % $divisor;\n        if ($t == 1) {\n            $mod = ($mod\
    \ * $n) % $p;\n        }\n        $n = ($n * $n) % $p;\n        $power = ($power\
    \ - $t) / $divisor;\n        $divisor = $divisor * 2;\n    }\n    return $mod;\n\
    }", "\t$r = 1;\n\twhile ($n > 0) {\n\t\tif ($n & 1)\n\t\t\t$r = ($r * $p) % $m;\n\
    \t\t$p = ($p * $p) % $m;\n\t\t$n >>= 1;\n\t}\n\treturn $r;\n}\n", "    $result\
    \ = 1;\n    while ($n != 0) {\n        if ($n & 1) {\n            $result = $result\
    \ * $p % 1000000007;\n        }\n        $p = $p * $p % 1000000007;\n        $n\
    \ >>= 1;\n    }\n    return $result;\n}\n", "    $m = 1;\n    while ($n > 0) {\n\
    \        if ($n % 2 == 1) {\n            $m = ($m * 2) % $p;\n        }\n    \
    \    $n = floor($n / 2);\n        $p = ($p * 2) % 101;\n    }\n    return $m;\n\
    }\n\n$fs = fopen(\"php://stdin\", \"r\");\n$fout = fopen(\"php://stdout\", \"\
    w\");\n\nfscanf($fs, \"%d\", $T);\nfor ($t = 0; $t < $T; $t++) {\n    fscanf($fs,\
    \ \"%s\", $str);\n    $str_length = strlen($str);\n    $n = 0;\n    for ($i =\
    \ 0; $i < $str_length; $i++) {\n        $n = $n * 10 + ord($str[$i]) - ord('0');\n\
    \    }\n    $n = modp($n, 101);\n    fprintf($fout, \"%d\\n\", $n);\n}\n\nfclose($fs);\n\
    fclose($fout);", "    $number = bcmod(bcpow(2, $n), $p);\n    return $number;\n\
    }\n", "\t$r = 1;\n\t$n = $n % $p;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\
    \t$r = ($r * $n) % $p;\n\t\t}\n\t\t$n = $n >> 1;\n\t\t$n = ($n * $n) % $p;\n\t\
    }\n\treturn $r;\n}\n", "\tif($n == 0) return 1;\n\tif($n%2 == 0) return modp((int)($n/2),\
    \ $p)**2 % $p;\n\telse return 2*modp((int)($n/2), $p)**2 % $p;\n}\n", "\tif ($n\
    \ == 0) return 1;\n\tif ($n == 1) return $n;\n\t$res = $n;\n\tfor ($i = 1; $i\
    \ < $p; $i++) {\n\t\t$res = $res * $n;\n\t\t$res = $res % $p;\n\t}\n\treturn $res;\n\
    }\n", "\t$c = 1;\n\twhile ($n != 0) {\n\t\tif ($n & 1) $c = ($c * $c) % $p;\n\t\
    \t$n = $n >> 1;\n\t\t$c = ($c * $c) % $p;\n\t}\n\treturn $c;\n}\n", "    if ($n\
    \ === 0) {\n        return 1;\n    }\n    if ($n === 1) {\n        return $n;\n\
    \    }\n    $r = modp($n >> 1, $p);\n    $r = ($r * $r) % $p;\n    if ($n & 1)\
    \ {\n        $r = ($r * $n) % $p;\n    }\n    return $r;\n}\n", "\t$result = 1;\n\
    \t$b = $n;\n\twhile($p != 0) {\n\t\tif ($p & 1) {\n\t\t\t$result = bcmod(bcmul($result,\
    \ $b), $p);\n\t\t}\n\t\t$p >>= 1;\n\t\t$b = bcmod(bcmul($b, $b), $p);\n\t}\n\t\
    return $result;\n}\n", "\tif ($n == 0) return 1;\n\t$res = modp($n / 2, $p);\n\
    \t$res = ($res * $res) % $p;\n\tif ($n % 2 == 1) {\n\t\t$res = ($res * 2) % $p;\n\
    \t}\n\treturn $res;\n}\necho modp(3, 5).\"\\n\";\necho modp(1101, 101).\"\\n\"\
    ;\necho modp(0, 101).\"\\n\";\necho modp(3, 11).\"\\n\";\necho modp(100, 101).\"\
    \\n\";", "\tif ($n == 0) return 1;\n\tif ($n % 2 == 0) {\n\t\t$t = modp($n/2,\
    \ $p);\n\t\treturn (2 * $t) % $p;\n\t} else {\n\t\t$t = modp(($n-1)/2, $p);\n\t\
    \treturn (2 * $t * $n) % $p;\n\t}\n}\n\n$q = 3;\n$n = 7;\n$p = 101;\n$result =\
    \ modp($q, $p);\nprint \"$result\\n\";\n\n$result = modp($n, $p);\nprint \"$result\\\
    n\";\n\n$result = modp($n-$q, $p);\nprint \"$result\\n\";\n\n$result = modp($n-2,\
    \ $p);\nprint \"$result\\n\";\n\n$result = modp($n-3, $p);\nprint \"$result\\\
    n\";\n\n$result = modp($n-3-$q, $p);\nprint \"$result\\n\";\n\n$result = modp($n-3-$q,\
    \ $p);\nprint \"$result\\n\";\n\n$result = modp($n-4, $p);\nprint \"$result\\\
    n\";\n\n$result = modp($n-4-$q, $p);\nprint \"$result\\n\";\n\n$result = modp($n-4-$q,\
    \ $p);\nprint \"$result\\n\";\n\n$result = modp($n-4-$q, $p);\nprint \"$result\\\
    n\";\n\n$result = modp($n-5, $p);\nprint \"$result\\n\";\n\n$result = modp($n-5-$q,\
    \ $p);\nprint \"$result\\n\";\n\n$result = modp($n-5-$q, $p);\nprint \"$result\\\
    n\";\n\n$result = modp($n-5-$q, $p);\nprint \"$result\\n\";\n\n$result = modp($n-5-$q,\
    \ $p);\nprint \"$result\\n\";\n\n$result = modp($n-6, $p);\nprint \"$result\\\
    n\";\n\n$result = modp($", "    if ($n == 0) return 1;\n    $result = modp($n\
    \ / 2, $p);\n    $result = $result * $result % $p;\n    if ($n % 2 == 1) $result\
    \ = $result * 2 % $p;\n    return $result;\n}\n\necho modp(3, 5) . \"\\n\";\n\
    echo modp(1101, 101) . \"\\n\";\necho modp(0, 101) . \"\\n\";\necho modp(3, 11)\
    \ . \"\\n\";\necho modp(100, 101) . \"\\n\";", "    $n = (int)$n;\n    $p = (int)$p;\n\
    \    if ($n === 0) {\n        return 1;\n    }\n    $r = $n % $p;\n    if ($r\
    \ < 0) {\n        $r += $p;\n    }\n    return $r;\n}\n", "\tif (0 == $n) {\n\t\
    \treturn 1;\n\t}\n\tif (1 == $n % 2) {\n\t\treturn ($n % $p) * modp(($n - 1) /\
    \ 2, $p) % $p;\n\t}\n\t$temp = modp($n / 2, $p);\n\treturn ($temp * $temp) % $p;\n\
    }\n", "    $res = 1;\n    $n %= $p;\n    while ($n > 0) {\n        if ($n & 1)\n\
    \            $res = ($res * $n) % $p;\n        $n = ($n * $n) % $p;\n    }\n \
    \   return $res;\n}\n", "\tif ($n == 0) return 1;\n\tif ($n == 1) return $n;\n\
    \t$r = pow($n, $n);\n\tif ($r >= $p) {\n\t\t$r = pow($n, $n % ($p - 1));\n\t}\n\
    \treturn $r;\n}\n", "\t$res = 1;\n\t$v = 2;\n\t$n = $n % ($p - 1);\n\tfor ($i\
    \ = 0; $i < 32; $i++) {\n\t\tif (($n & (1 << $i)) != 0) {\n\t\t\t$res = ($res\
    \ * $v) % $p;\n\t\t}\n\t\t$v = ($v * $v) % $p;\n\t}\n\treturn $res;\n}", "   \
    \ if ($n == 0) {\n        return 1;\n    }\n    $result = 1;\n    $mult = $n;\n\
    \    $power = $p;\n    while (1) {\n        if ($power == 0) {\n            break;\n\
    \        }\n        if ($power % 2 == 1) {\n            $result = ($result * $mult)\
    \ % $p;\n        }\n        $mult = ($mult * $mult) % $p;\n        $power = $power\
    \ / 2;\n    }\n    return $result;\n}\n", "\tif ($n == 0) {\n\t\treturn 1;\n\t\
    }\n\tif ($n % 2 == 0) {\n\t\treturn modp(($n % $p * $n % $p) % $p, $p);\n\t} else\
    \ {\n\t\treturn ($n % $p * modp(($n - 1) % $p, $p)) % $p;\n\t}\n}", "\t$r = 1;\n\
    \twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r = $r * 2 % $p;\n\t\t}\n\t\t$n\
    \ >>= 1;\n\t\t$p = $p * $p % 101;\n\t}\n\treturn $r;\n}\n", "    if ($n < 0)\n\
    \        $n = -$n;\n    if ($n <= 1)\n        return $n;\n    $result = 1;\n \
    \   while ($n > 0) {\n        if ($n & 1)\n            $result = ($result * 2)\
    \ % $p;\n        $n >>= 1;\n    }\n    return $result;\n}", "    $mod = 1;\n \
    \   $m = $n;\n    while ($m > 0) {\n        if ($m % 2) {\n            $mod =\
    \ ($mod * $n) % $p;\n        }\n        $n = ($n * $n) % $p;\n        $m = (int)($m\
    \ / 2);\n    }\n    return $mod;\n}\n", "    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n == 1) {\n        return $n;\n    }\n    $pow = 1;\n    while\
    \ ($n > 1) {\n        if ($n % 2 == 1) {\n            $pow = $pow * 2 % $p;\n\
    \        }\n        $n = floor($n / 2);\n        $p = $p * $p % MOD;\n    }\n\
    \    return $pow * $n % MOD;\n}\n", "\tif ($n === 0) {\n\t\treturn 1;\n\t} elseif\
    \ ($n % 2 === 0) {\n\t\t$t = modp($n / 2, $p);\n\t\treturn ($t * $t) % $p;\n\t\
    } else {\n\t\treturn ($n % $p) * modp($n - 1, $p) % $p;\n\t}\n}\n", "    $res\
    \ = 1;\n    $n = $n % $p;\n    for ($i = 0; $i < strlen($n); $i++) {\n       \
    \ $bit = ($n >> $i) & 1;\n        if ($bit == 1) {\n            $res = ($res *\
    \ $res * $bit) % $p;\n        } else {\n            $res = ($res * $res) % $p;\n\
    \        }\n    }\n    return $res;\n}\n", "\t//echo \"modp($n, $p)\\n\";\n\t\
    if ($n == 0) return 1;\n\tif ($n % 2 == 0) return (modp($n/2, $p) * modp($n/2,\
    \ $p)) % $p;\n\telse return (modp($n-1, $p) * modp($n+1, $p)) % $p;\n}\n", " \
    \   $sum = 1;\n    $a = 2;\n    while($n > 0) {\n        if($n % 2 == 1) {\n \
    \           $sum = ($sum * $a) % $p;\n        }\n        $a = ($a * $a) % $p;\n\
    \        $n = floor($n / 2);\n    }\n    return $sum;\n}\n", "\tif ($n == 0) {\n\
    \t\treturn 1;\n\t}\n\telse if ($n % 2 == 0) {\n\t\t$x = modp($n / 2, $p);\n\t\t\
    return ($x * $x) % $p;\n\t}\n\telse {\n\t\treturn ($n % $p) * modp($n - 1, $p)\
    \ % $p;\n\t}\n}", "    $n = (int)$n;\n    $p = (int)$p;\n    if ($n == 0) return\
    \ 1;\n    if ($n == 1) return $n;\n    if ($n % 2 == 0) {\n        $t = modp($n/2,\
    \ $p);\n        return (2*$t) % $p;\n    } else {\n        $t = modp(($n-1)/2,\
    \ $p);\n        return ($t * ($n % $p)) % $p;\n    }\n}\n", "  $result = 1;\n\
    \  while ($n) {\n    if ($n & 1) {\n      $result = ($result * $n) % $p;\n   \
    \ }\n    $n = ($n >> 1) % $p;\n  }\n  return $result;\n}\n", "  $s = 1;\n  while\
    \ ($n != 0) {\n    if ($n & 1) {\n      $s = $s * 2 % $p;\n    }\n    $n >>= 1;\n\
    \    $p = ($p * $p) % 101;\n  }\n  return $s;\n}\n", "    if ($n == 0) {\n   \
    \     return 1;\n    } else if ($n == 1) {\n        return $n;\n    } else {\n\
    \        $tmp = modp($n / 2, $p);\n        $tmp = $tmp * $tmp % $p;\n        if\
    \ ($n % 2 == 1) {\n            $tmp = $tmp * $n % $p;\n        }\n        return\
    \ $tmp;\n    }\n}\n", "    if ($n % $p == 0) return 1;\n    if ($n == 0) return\
    \ 1;\n    $r = 1;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n        \
    \    $r = ($r * 2) % $p;\n        }\n        $n = (int)($n / 2);\n        if ($n\
    \ > 0) {\n            $r = ($r * $r) % $p;\n        }\n    }\n    return $r;\n\
    }", "  if ($n < $p) {\n    return $n;\n  }\n  $n1 = $n;\n  $p1 = $p;\n  $res =\
    \ 1;\n  while ($n1 > 0) {\n    if ($n1 & 1) {\n      $res = ($res * $p1) % $p;\n\
    \    }\n    $p1 = ($p1 * $p1) % $p;\n    $n1 >>= 1;\n  }\n  return $res;\n}\n",
  "\tif ($n == 0) return 1;\n\t\n\t$x = 1;\n\t$d = 0;\n\t$last = 0;\n\t$k = 1;\n\t\
    while ($d < $n) {\n\t\tif ($k > 1) {\n\t\t\t$last = $x;\n\t\t\t$x = ($x * $x)\
    \ % $p;\n\t\t} else {\n\t\t\t$x = $x % $p;\n\t\t}\n\t\t$d += $k;\n\t\t$k *= 2;\n\
    \t}\n\t\n\tif ($d > $n) {\n\t\t$x = $last;\n\t}\n\t\n\treturn $x;\n}\n", "   \
    \ if ($n == 0) {\n        return 1;\n    }\n    if ($n % 2 == 0) {\n        $k\
    \ = modp($n / 2, $p);\n        return ($k * $k) % $p;\n    } else {\n        return\
    \ ($n % $p) * modp($n - 1, $p) % $p;\n    }\n}", "\t$r = 1;\n\t$pow = $n;\n\t\
    while ($pow > 0) {\n\t\tif ($pow & 1)\n\t\t\t$r = ($r * $n) % $p;\n\t\t$n = ($n\
    \ * $n) % $p;\n\t\t$pow = $pow >> 1;\n\t}\n\treturn $r;\n}\n", "  if ($n < 0)\
    \ return modp(-$n, $p);\n  if ($n < $p) return $n;\n  $m = 1;\n  while ($m < $n)\
    \ $m <<= 1;\n  $ret = 1;\n  while ($m > 0) {\n    $m >>= 1;\n    $ret = ($ret\
    \ * $ret) % $p;\n    if ($m & $n) $ret = ($ret * 2) % $p;\n  }\n  return $ret;\n\
    }", "    if($n == 0) {\n        return 1;\n    } else if ($n % 2 == 0) {\n   \
    \     $m = modp($n / 2, $p);\n        return ($m * $m) % $p;\n    } else {\n \
    \       $m = modp(($n - 1) / 2, $p);\n        return ($m * $m * $n) % $p;\n  \
    \  }\n}\n", "    if ($n == 0) return 1;\n    if ($n % 2 == 0) return modp(($n/2)%$p,\
    \ $p) ** 2 % $p;\n    return modp(($n-1)/2, $p) ** 2 * $n % $p;\n}", "    if ($n\
    \ == 0) {\n        return 1;\n    }\n    $n = bcmod($n, $p);\n    if ($n == 0)\
    \ {\n        return 1;\n    }\n    $n2 = bcmod(bcmul($n, $n), $p);\n    if ($n\
    \ == 1) {\n        return $n2;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ modp(bcmul($n, $n2), $p);\n    } else {\n        return bcmod(bcmul($n, modp(bcmul($n,\
    \ $n2), $p)), $p);\n    }\n}", "\t$result = 1;\n\t$base = $n % $p;\n\t$exponent\
    \ = 0;\n\twhile ($exponent < strlen(decbin($n))) {\n\t\tif (($n & (1 << $exponent))\
    \ > 0) {\n\t\t\t$result = ($result * $base) % $p;\n\t\t}\n\t\t$base = ($base *\
    \ $base) % $p;\n\t\t$exponent += 1;\n\t}\n\treturn $result;\n}\n", "\t$res = 1;\n\
    \t$base = $n % $p;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$res = ($res\
    \ * $base) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$base = ($base * $base) % $p;\n\t\
    }\n\treturn $res;\n}\n", "    $n%=$p;\n    $ret = 1;\n    $pow = $n;\n    $bit\
    \ = 1;\n    while ($bit <= $n) {\n        if ($n & $bit)\n            $ret = ($ret\
    \ * $pow) % $p;\n        $pow = ($pow * $pow) % $p;\n        $bit <<= 1;\n   \
    \ }\n    return $ret;\n}", "    $r = 1;\n    $b = $n;\n    while ($n > 0) {\n\
    \        if (($n & 1) == 1)\n            $r = ($r * $b) % $p;\n        $b = ($b\
    \ * $b) % $p;\n        $n >>= 1;\n    }\n    return $r;\n}\n", "\t// Equivalent\
    \ to (n & 1) ? r : 1, but faster.\n\tif ($n & 1) return $n % $p;\n\telse return\
    \ 1;\n}\n", "  if ($n==0) {\n    return 1;\n  }\n  $r = 1;\n  $n = $n % $p;\n\
    \  while ($n>0) {\n    if ($n & 1) {\n      $r = ($r * 2) % $p;\n    }\n    $n\
    \ = $n >> 1;\n    $p = ($p * 2) % $p;\n  }\n  return $r;\n}", "\treturn bcmod(bcpow(2,\
    \ $n), $p);\n}\n", "  if ($n == 0) {\n    return 1;\n  } elseif ($n % 2 == 0)\
    \ {\n    return modp(($n / 2) * ($n / 2), $p);\n  } else {\n    return ($n % $p)\
    \ * modp(($n - 1) / 2, $p) * modp(($n - 1) / 2, $p);\n  }\n}\n", "\t$r = 1;\n\t\
    $p_1 = $p - 1;\n\t$n_bin = decbin($n);\n\t$len = strlen($n_bin);\n\tfor ($i =\
    \ 0; $i < $len; $i++) {\n\t\t$c = $n_bin[$i];\n\t\tif ($c == '1') {\n\t\t\t$r\
    \ = $r * $p_1;\n\t\t\t$r = $r % $p;\n\t\t}\n\t\t$p_1 = ($p_1 * $p_1) % $p;\n\t\
    }\n\treturn $r;\n}\n", "    $r = 1;\n    $x = $n % $p;\n    while ($n > 0) {\n\
    \        if ($n & 1) {\n            $r = ($r * $x) % $p;\n        }\n        $n\
    \ >>= 1;\n        $x = ($x * $x) % $p;\n    }\n    return $r;\n}\n", "    if ($n\
    \ == 0) {\n        return 1;\n    }\n    if ($n % 2 == 0) {\n        return modp(bcmul($n,$n),\
    \ $p);\n    } else {\n        return bcmul(modp(bcmul($n,$n), $p), $n);\n    }\n\
    }\n", "\t// assert $p is prime\n\t$result = 1;\n\t$square = ($n > $p) ? $n % $p\
    \ : $n;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$result = ($result * $square)\
    \ % $p;\n\t\t}\n\t\t$square = ($square * $square) % $p;\n\t\t$n >>= 1;\n\t}\n\t\
    return $result;\n}\n", "\tif ($n === 0) return 1;\n\tif ($n === 1) return $n;\n\
    \tif ($n % 2 === 0) return modp(($n / 2) * ($n / 2), $p);\n\telse return modp(($n\
    \ - 1) * ($n + 1), $p);\n}", "    $a = 1;\n    $x = $n;\n    while ($p > 0) {\n\
    \        if ($p % 2) {\n            $a = ($a * $x) % 101;\n        }\n       \
    \ $x = ($x * $x) % 101;\n        $p = $p / 2;\n    }\n    return $a;\n}\n", "\t\
    $b = 1;\n\t$r = 1;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r = $r * $b\
    \ % $p;\n\t\t}\n\t\t$b = $b * $b % $p;\n\t\t$n >>= 1;\n\t}\n\treturn $r;\n}\n",
  "    $bin = gmp_strval(gmp_init($n, 10), 2);\n    $result = 1;\n    $two = gmp_init(2,\
    \ 10);\n    foreach (str_split($bin) as $c) {\n        $result = gmp_intval(gmp_mod(gmp_mul($result,\
    \ $result), $p));\n        if ($c == '1')\n            $result = gmp_intval(gmp_mod(gmp_mul($result,\
    \ 2), $p));\n    }\n    return $result;\n}\n", "    if ($n == 0) {\n        return\
    \ 1;\n    } else if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ (2 * $t) % $p;\n    } else {\n        $t = modp(($n - 1) / 2, $p);\n       \
    \ return (2 * $t * $n) % $p;\n    }\n}", "  if ($n == 0) return 1;\n  if ($n %\
    \ 2 == 0) {\n    $t = modp($n / 2, $p);\n    return ($t * $t) % $p;\n  } else\
    \ {\n    return ($n % $p) * modp($n - 1, $p) % $p;\n  }\n}\n", "  if ($n == 0)\
    \ {\n    return 1;\n  }\n  if ($n % 2 == 0) {\n    $p = modp($n / 2, $p);\n  \
    \  return (($p * $p) % $p);\n  }\n  return ((2 * modp($n - 1, $p)) % $p);\n}\n",
  "    $b = 1;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n            $b =\
    \ $b * $p % 5;\n        }\n        $p = $p * $p % 5;\n        $n = floor($n /\
    \ 2);\n    }\n    return $b;\n}\n", "\t// Split n into binary representation.\n\
    \t$bs = array();\n\twhile ($n > 0) {\n\t\t$bs[] = $n % 2;\n\t\t$n = ($n - $bs[count($bs)\
    \ - 1]) / 2;\n\t}\n\t$a = 1;\n\t$b = 1;\n\tfor ($i = count($bs) - 1; $i >= 0;\
    \ $i--) {\n\t\t$b = $b * $b % $p;\n\t\tif ($bs[$i] == 1) {\n\t\t\t$b = $b * $a\
    \ % $p;\n\t\t}\n\t\t$a = $a * $a % $p;\n\t}\n\treturn $b;\n}\n", "    $i = 0;\n\
    \    $res = 1;\n    $n = $n % $p;\n    while ($i < strlen($n)) {\n        $res\
    \ = ($res * $res) % $p;\n        if ($n[$i] == '1') {\n            $res = ($res\
    \ * 2) % $p;\n        }\n        $i++;\n    }\n    return $res;\n}\n", "\tif ($n\
    \ == 0) return 1;\n\tif ($n == 1) return $n;\n\t$res = 1;\n\twhile ($n > 0) {\n\
    \t\tif ($n % 2 == 1) {\n\t\t\t$res = ($res * $n) % $p;\n\t\t}\n\t\t$n = $n >>\
    \ 1;\n\t\t$n = ($n * $n) % $p;\n\t}\n\treturn $res;\n}\n", "\t$result = 1;\n\t\
    while ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$result = ($result * $p) % 1000000007;\n\
    \t\t}\n\t\t$p = ($p * $p) % 1000000007;\n\t\t$n >>= 1;\n\t}\n\treturn $result;\n\
    }\n\n$handle = fopen (\"php://stdin\",\"r\");\nfscanf($handle,\"%d\",$q);\nfor($a0\
    \ = 0; $a0 < $q; $a0++){\n    fscanf($handle,\"%d %d\",$n,$m);\n\techo modp($n,\
    \ $m).\"\\n\";\n}\n", "  $r = 1;\n  while ($n > 0) {\n    if ($n & 1) {\n    \
    \  $r = ($r * $n) % $p;\n    }\n    $n = $n >> 1;\n  }\n  return $r;\n}\n", " \
    \   if ($n == 0) {\n        return 1;\n    }\n    $res = 1;\n    $base = $n %\
    \ $p;\n    $exp = floor($n / $p);\n    if ($exp % 2 == 1) {\n        $res = $base;\n\
    \    }\n    return ($res * modp($exp, $p) ** 2) % $p;\n}\n", "    $r = 1;\n  \
    \  $n = $n % $p;\n    if ($n < 0) {\n        $n += $p;\n    }\n    while ($n)\
    \ {\n        if ($n & 1) {\n            $r = ($r * $n) % $p;\n        }\n    \
    \    $n >>= 1;\n        $n = ($n * $n) % $p;\n    }\n    return $r;\n}\n", " \
    \ if ($n == 0) {\n    return 1;\n  }\n  if ($n % 2 == 0) {\n    $tmp = modp($n\
    \ / 2, $p);\n    return modmul($tmp, $tmp, $p);\n  } else {\n    return modmul(modp($n\
    \ - 1, $p), $n, $p);\n  }\n}\n", "\t// compute 2^n modulo p\n\t// if $n = 0, return\
    \ 1\n\tif ($n == 0) {\n\t\treturn 1;\n\t}\n\t// otherwise, let's split $n as $n\
    \ = 2q + r\n\t$q = floor($n / 2);\n\t$r = $n % 2;\n\t// compute (2^q mod p)\n\t\
    $tmp = modp($q, $p);\n\t// now compute (2^n mod p)\n\tif ($r == 0) {\n\t\t// if\
    \ $r = 0, we have 2^n = 2^q * 2^q\n\t\t// hence 2^n mod p = (2^q * 2^q) mod p\
    \ = [(2^q mod p) * (2^q mod p)] mod p\n\t\treturn ($tmp * $tmp) % $p;\n\t} else\
    \ {\n\t\t// if $r = 1, we have 2^n = 2^q * 2^q * 2\n\t\t// hence 2^n mod p = (2^q\
    \ * 2^q * 2) mod p = [(2^q mod p) * (2^q mod p) * 2] mod p\n\t\treturn (($tmp\
    \ * $tmp) % $p) * 2 % $p;\n\t}\n}\n", "  $t = 1;\n  while ($n > 0) {\n    if ($n\
    \ % 2 == 1) {\n      $t = ($t * $p) % 9973;\n    }\n    $p = ($p * $p) % 9973;\n\
    \    $n = intval($n / 2);\n  }\n  return $t;\n}\n", "  // This is a naive implementation\
    \ that doesn't deal well with large numbers.\n  // TODO: Fix this implementation.\n\
    \  $m = 1;\n  for ($i = 0; $i < $n; $i++) {\n    $m = ($m * 2) % $p;\n  }\n  return\
    \ $m;\n}\n", "\t$n = $n % $p;\n\tif ($n < 0) {\n\t\t$n += $p;\n\t}\n\treturn $n;\n\
    }\n", "  if ($n == 0) {\n    return 1;\n  } else if ($n % 2 == 0) {\n    $t =\
    \ modp($n / 2, $p);\n    return ($t * $t) % $p;\n  } else {\n    return ($n %\
    \ $p) * modp($n - 1, $p) % $p;\n  }\n}\n", "    $x = 1;\n    $y = $n;\n    while\
    \ ($p > 0) {\n        if ($p % 2 == 1) {\n            $x = ($x * $y) % 1000000007;\n\
    \        }\n        $y = ($y * $y) % 1000000007;\n        $p = $p / 2;\n    }\n\
    \    return $x;\n}\n", "    $z = 1;\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   $z = ($z * 2) % $p;\n    }\n    return $z;\n}\n", "  $r = 1;\n  while ($n\
    \ != 0) {\n    if ($n & 1) $r = ($r * $n) % $p;\n    $n = ($n * $n) % $p;\n  }\n\
    \  return $r;\n}\n", "    $r = 1;\n    while ($n) {\n        if ($n & 1) {\n \
    \           $r = ($r * $n) % $p;\n        }\n        $n = ($n * $n) % $p;\n  \
    \  }\n    return $r;\n}\n", "\t$r = 1;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\
    \t\t\t$r = ($r * $n) % $p;\n\t\t}\n\t\t$n = $n >> 1;\n\t\t$n = ($n * $n) % $p;\n\
    \t}\n\treturn $r;\n}\n", "    $r = 1;\n    $a = 2;\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        $r = ($r * $a) % $p;\n    }\n    return $r;\n}\n", "    if($n\
    \ == 0) return 1;\n    if($n%2 == 0) {\n        $r = modp($n/2, $p);\n       \
    \ return ($r*$r)%$p;\n    } else {\n        $r = modp(($n-1)/2, $p);\n       \
    \ return ($r*$r*$n)%$p;\n    }\n}\n", "    if($n == 0) {\n        return 1;\n\
    \    }\n    $a = 1;\n    while($n != 0) {\n        if($n % 2 != 0) {\n       \
    \     $a = ($a * 2) % $p;\n        }\n        $n = (int)($n / 2);\n        $p\
    \ = ($p * 2) % 3;\n    }\n    return $a;\n}\n", "\t$n = intval($n);\n\t$p = intval($p);\n\
    \t$r = 1;\n\twhile ($n >= 1) {\n\t\tif ($n & 1) {\n\t\t\t$r = ($r * $n) % $p;\n\
    \t\t}\n\t\t$n = $n >> 1;\n\t\t$n = ($n * $n) % $p;\n\t}\n\treturn $r;\n}", " \
    \   $result = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $result = ($result\
    \ * 2) % $p;\n    }\n    return $result;\n}\n", "\t$base = 2;\n\t$mod = 1;\n\t\
    while ($n > 0) {\n\t\tif ($n % 2 == 1) {\n\t\t\t$mod = ($mod * $base) % $p;\n\t\
    \t}\n\t\t$base = ($base * $base) % $p;\n\t\t$n = intval($n / 2);\n\t}\n\treturn\
    \ $mod;\n}\n", "    if ($n == 0) {\n        return 1;\n    }\n    if ($n == 1)\
    \ {\n        return $n;\n    }\n    $mod = 1;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $mod = ($mod * 2) % $p;\n    }\n    return $mod;\n}\n", "\t$c = 1;\n\
    \tfor ($i = 0; $i < $n; $i++) {\n\t\t$c = ($c * 2) % $p;\n\t}\n\treturn $c;\n\
    }\n", "\tif ($n == 0) {\n\t\treturn 1;\n\t} elseif ($n == 1) {\n\t\treturn 2;\n\
    \t} elseif ($n % 2 == 0) {\n\t\treturn ((modp($n / 2, $p) ** 2) % $p);\n\t} else\
    \ {\n\t\treturn ((modp(($n - 1) / 2, $p) ** 2 * 2) % $p);\n\t}\n}\n", "\tif ($n\
    \ == 0) return 1;\n\telse {\n\t\t$n1 = $n / 2;\n\t\t$n2 = $n % 2;\n\t\t$r1 = modp($n1,\
    \ $p);\n\t\t$r2 = $r1 * $r1;\n\t\t$r2 = $r2 % $p;\n\t\tif ($n2 == 1) {\n\t\t\t\
    $r2 = $r2 * 2;\n\t\t\t$r2 = $r2 % $p;\n\t\t}\n\t\treturn $r2;\n\t}\n}\n", "  \
    \  if ($n == 0) {\n        return 1;\n    } else if ($n == 1) {\n        return\
    \ $n;\n    } else {\n        return modp(($n * $n) % $p, $p);\n    }\n}\n", " \
    \   if ($n < 0) {\n        $n += floor(-$n / $p) * $p;\n    }\n    $n %= $p;\n\
    \    $f = 1;\n    for ($i = 0; $i < strlen($n); $i++) {\n        $f = ($f * $f)\
    \ % $p;\n        if ($n[$i] == '1') {\n            $f = ($f * 2) % $p;\n     \
    \   }\n    }\n    return $f;\n}", "    $r = 1;\n    $n = $n % $p;\n    while ($n)\
    \ {\n        if ($n & 1) {\n            $r = ($r * $n) % $p;\n        }\n    \
    \    $n = $n >> 1;\n        $n = ($n * $n) % $p;\n    }\n    return $r;\n}\n",
  "\t$acc = 1;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$acc = $acc * 2 % $p;\n\
    \t\t}\n\t\t$n >>= 1;\n\t\t$p = $p * $p % (2 << 31);\n\t}\n\treturn $acc;\n}\n\
    $T = (int) fgets(STDIN);\nfor ($tc = 0; $tc < $T; $tc++) {\n\t$N = (int) fgets(STDIN);\n\
    \techo (2 << ($N - 1)) - modp($N, 2 << 31) . \"\\n\";\n}", "\t$res = 1;\n\t$n\
    \ %= $p;\n\twhile ($n) {\n\t\tif ($n & 1)\n\t\t\t$res = ($res * $n) % $p;\n\t\t\
    $n >>= 1;\n\t\t$n %= $p;\n\t}\n\treturn $res;\n}\n", "\t$r = 1;\n\t$b = 2;\n\t\
    while ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r = ($r * $b) % $p;\n\t\t}\n\t\t$n\
    \ >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn $r;\n}\n", "    if ($n < 0)\
    \ {\n        $n = -$n;\n    }\n    if ($n == 0) {\n        return 1;\n    }\n\
    \    if ($n == 1) {\n        return $n;\n    }\n    if ($n == 2) {\n        return\
    \ $n % $p;\n    }\n    $v = modp($n / 2, $p);\n    if ($n % 2 == 0) {\n      \
    \  return ($v * $v) % $p;\n    } else {\n        return (($v * $v) % $p) * 2 %\
    \ $p;\n    }\n}\n", "\t$n %= $p;\n\tif ($n == 0) return 1;\n\t$ans = 1;\n\tfor\
    \ ($i = 0; $i < $n; $i++)\n\t\t$ans = ($ans * 2) % $p;\n\treturn $ans;\n}", " \
    \   $r = 1;\n    $b = $n;\n    while ($n > 0) {\n        if ($n & 1) {\n     \
    \       $r = ($r * $b) % $p;\n        }\n        $b = ($b * $b) % $p;\n      \
    \  $n >>= 1;\n    }\n    return $r;\n}\n", "    if ($n === 0) return 1;\n    $c\
    \ = 1;\n    $n = $n % $p;\n    while ($n > 1) {\n        $c = ($c * $n) % $p;\n\
    \        $n = $n - 1;\n    }\n    return $c;\n}\n", "    if ($n == 0) return 1;\n\
    \    $ans = 1;\n    $base = $n % $p;\n    $exponent = floor($n / $p);\n    while\
    \ ($exponent > 0) {\n        if ($exponent % 2 == 1) {\n            $ans = ($ans\
    \ * $base) % $p;\n        }\n        $base = ($base * $base) % $p;\n        $exponent\
    \ = floor($exponent / 2);\n    }\n    return $ans;\n}\n", "\t$r = 1;\n\t$base\
    \ = 2;\n\t$b = $n;\n\twhile ($b > 0) {\n\t\tif ($b % 2 == 1) {\n\t\t\t$r = ($r\
    \ * $base) % $p;\n\t\t}\n\t\t$base = ($base * $base) % $p;\n\t\t$b = $b / 2;\n\
    \t}\n\treturn $r;\n}", "    $res = 1;\n    $a = 2;\n    while ($n > 0) {\n   \
    \     if ($n % 2 == 1) {\n            $res = ($res * $a) % $p;\n        }\n  \
    \      $a = ($a * $a) % $p;\n        $n /= 2;\n    }\n    return $res;\n}\n",
  "    $s = array();\n    $p--;\n    $s[] = 1;\n    for ($i = 0; $i < strlen($n);\
    \ $i++) {\n        if ($n[$i] == 1) {\n            $s[] = end($s) * 2 % $p;\n\
    \        }\n    }\n    return array_sum($s) % $p;\n}\n", "    $y = 1;\n    for\
    \ ($i = 1; $i <= $n; $i++) {\n        $y = ($y * 2) % $p;\n    }\n    return $y;\n\
    }\n", "\t$n = (int)$n;\n\t$p = (int)$p;\n\t$res = 1;\n\twhile($n > 0) {\n\t\t\
    if($n & 1) {\n\t\t\t$res = ($res * $n) % $p;\n\t\t}\n\t\t$n = $n >> 1;\n\t\t$n\
    \ = ($n * $n) % $p;\n\t}\n\treturn $res;\n}\n", "    if($n == 0) return 1;\n \
    \   if($n == 1) return $n;\n    if($n % 2 == 0) {\n        $s = modp($n/2, $p);\n\
    \        return ($s * $s) % $p;\n    } else {\n        $s = modp(($n-1)/2, $p);\n\
    \        return (($s * $s) % $p) * $n % $p;\n    }\n}\n", "    $mask = $p - 1;\n\
    \    $result = 1;\n    for ($i = 0; $i < strlen($n); $i++) {\n        $result\
    \ = ($result * $result) % $p;\n        if (($n[$i] == '1') || ($n[$i] == 1)) {\n\
    \            $result = ($result * 2) % $p;\n        }\n    }\n    return $result;\n\
    }\n", "\tif ($n == 0) return 1;\n\t$x = $n % $p;\n\tif ($x > floor($p / 2)) $x\
    \ -= $p;\n\tif ($x < 0) $x += $p;\n\tif ($n == 1) return $x;\n\tif ($n % 2 ==\
    \ 0) {\n\t\t$y = modp($n / 2, $p);\n\t\treturn ($y * $y) % $p;\n\t} else {\n\t\
    \t$y = modp(($n - 1) / 2, $p);\n\t\treturn (($y * $y) % $p) * $x % $p;\n\t}\n\
    }\n", "    if ($n == 0) return 1;\n    $res = 1;\n    while ($n != 0) {\n    \
    \    $r = $n % 2;\n        if ($r == 1) $res = ($res * $p) % $p;\n        $p =\
    \ ($p * $p) % $p;\n        $n = (int)($n / 2);\n    }\n    return $res;\n}\n",
  "    $nbin = decbin($n);\n    $len = strlen($nbin);\n    $current = 1;\n    for\
    \ ($i = $len-1; $i >= 0; $i--) {\n        $current = $current * $current % $p;\n\
    \        if ($nbin[$i] == '1') {\n            $current = $current * 2 % $p;\n\
    \        }\n    }\n    return $current;\n}\n", "    $result = 1;\n    $sqr = $n\
    \ % $p;\n    for ($bit = $n; $bit > 0; $bit >>= 1) {\n        if ($bit & 1) {\n\
    \            $result = ($result * $sqr) % $p;\n        }\n        $sqr = ($sqr\
    \ * $sqr) % $p;\n    }\n    return $result;\n}\n", "\t// Return 1 if p is a prime\
    \ number (on the safe side, return 0 if it is not).\n\tif ($p < 2) {\n\t\treturn\
    \ 0;\n\t}\n\tfor ($i = 2; $i <= sqrt($p); $i++) {\n\t\tif ($p % $i == 0) {\n\t\
    \t\treturn 0;\n\t\t}\n\t}\n\treturn pow(2, $n) % $p;\n}\n", "    if ($n == 0)\
    \ {\n        return 1;\n    }\n    if ($n == 1) {\n        return $n;\n    }\n\
    \    $res = 1;\n    $b = $n;\n    while (1) {\n        if ($b & 1) {\n       \
    \     $res = ($res * $n) % $p;\n        }\n        $b >>= 1;\n        if ($b ==\
    \ 0) {\n            break;\n        }\n        $n = ($n * $n) % $p;\n    }\n \
    \   return $res;\n}\n", "    $res = 1;\n    for ($i = 0; $i < $n; $i++) {\n  \
    \      $res = ($res * 2) % $p;\n    }\n    return $res;\n}\n", "\tif ($n < 0)\
    \ {\n\t\t$n = $n % $p;\n\t\tif ($n < 0)\n\t\t\t$n += $p;\n\t}\n\tif ($n == 0)\n\
    \t\treturn 1;\n\t$f = modp(floor($n / 2), $p);\n\t$r = $f * $f % $p;\n\tif ($n\
    \ % 2)\n\t\t$r = $r * 2 % $p;\n\treturn $r;\n}\n", "\t$a = 1;\n\t$e = $n;\n\t\
    $m = $p;\n\twhile ($e > 0) {\n\t\tif ($e % 2 == 1) {\n\t\t\t$a = ($a * $n) % $p;\n\
    \t\t}\n\t\t$n = ($n * $n) % $p;\n\t\t$e = floor($e / 2);\n\t}\n\treturn $a;\n\
    }\n", "\t// In Python, we would simply do n**p % p, but we need to\n\t// take\
    \ care here because PHP has different behaviour for\n\t// pow(int, int), pow(double,\
    \ int) and pow(int, double).\n\t// We can just do n**p % p as long as n**p does\
    \ not overflow.\n\t// First, make sure n**p is an integer\n\t$n = $n % $p;\n\t\
    // Then, divide by the largest power of two possible\n\t$n = $n >> floor(log($n,\
    \ 2));\n\t// Now, we can compute n**p safely\n\t$n = pow($n, $p);\n\treturn $n\
    \ % $p;\n}\n", "\t$r = 1;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r = ($r\
    \ * $p) % (1 << 32);\n\t\t}\n\t\t$p = ($p * $p) % (1 << 32);\n\t\t$n >>= 1;\n\t\
    }\n\treturn $r;\n}\n", "    if ($n == 0) {\n        return 1;\n    }\n    $ans\
    \ = 1;\n    $pow = $n;\n    while ($pow != 0) {\n        if ($pow & 1) {\n   \
    \         $ans = $ans * $n % $p;\n        }\n        $n = $n * $n % $p;\n    \
    \    $pow >>= 1;\n    }\n    return $ans;\n}\n", "\tif ($n < 0) {\n\t\t$n = -$n;\n\
    \t}\n\tif ($n == 0) {\n\t\treturn 1;\n\t} else if ($n % 2 == 0) {\n\t\treturn\
    \ modp(($n / 2) * ($n / 2), $p);\n\t} else {\n\t\treturn ($n % $p) * modp(($n\
    \ - 1) / 2, $p) * modp(($n - 1) / 2, $p);\n\t}\n}\n", "    if ($n == 0) return\
    \ 1;\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return ($t\
    \ * $t) % $p;\n    } else {\n        return ($n % $p) * modp($n - 1, $p) % $p;\n\
    \    }\n}\n", "    if ($n == 0) return 1;\n    if ($n == 1) return $n;\n    $r\
    \ = modp($n / 2, $p);\n    $r = ($r * $r) % $p;\n    if ($n % 2 == 1) {\n    \
    \    $r = ($r * $n) % $p;\n    }\n    return $r;\n}\n", "\t$r = 1;\n\t$pow = $n;\n\
    \twhile ($pow > 0) {\n\t\tif ($pow & 1) {\n\t\t\t$r = bcmod(bcmul($r, $n), $p);\n\
    \t\t}\n\t\t$pow >>= 1;\n\t\t$n = bcmod(bcmul($n, $n), $p);\n\t}\n\treturn $r;\n\
    }\n", "    $r = 1;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r\
    \ = $r * $n % $p;\n        }\n        $n = $n >> 1;\n        $n = $n * $n % $p;\n\
    \    }\n    return $r;\n}\n\n$input = file_get_contents(\"input\");\n\n$p = 101;\n\
    \n$steps = 0;\n", "    if ($n == 0) return 1;\n    elseif ($n % 2 == 0) {\n  \
    \      $x = modp($n / 2, $p);\n        return ($x * $x) % $p;\n    } else {\n\
    \        $x = modp($n - 1, $p);\n        return ($x * $x * $n) % $p;\n    }\n\
    }\n", "    if($n < 0) {\n        return 0;\n    }\n    if($n <= 1) {\n       \
    \ return $n;\n    }\n    $n = $n & ((1 << 1024) - 1);\n    $x = 1;\n    $e = 2;\n\
    \    while($e <= $n) {\n        $x = ($x * $x) % $p;\n        if($n & $e) {\n\
    \            $x = ($x * 2) % $p;\n        }\n        $e = $e << 1;\n    }\n  \
    \  return $x;\n}", "\t// define b to be the base 2^8 = 256\n\t$b = 256;\n\t//\
    \ create array a that represents the binary digits of n, little endian\n\t$a =\
    \ [];\n\t// loop over the bits in n\n\tfor ($i = 0; $i < strlen(decbin($n)); $i++)\
    \ {\n\t\t// get next binary digit\n\t\t$bit = $n % 2;\n\t\t// remove binary digit\
    \ from n\n\t\t$n = ($n - $bit) / 2;\n\t\t// add binary digit to array\n\t\tarray_push($a,\
    \ $bit);\n\t}\n\t// reverse array\n\t$a = array_reverse($a);\n\t// set x to 1\n\
    \t$x = 1;\n\t// loop over the digits in a\n\tfor ($i = 0; $i < count($a); $i++)\
    \ {\n\t\t// set x to x^2 mod p\n\t\t$x = ($x ** 2) % $p;\n\t\t// if digit is 1,\
    \ multiply x by 2^i mod p\n\t\tif ($a[$i] == 1) {\n\t\t\t$x = ($x * pow($b, $i))\
    \ % $p;\n\t\t}\n\t}\n\t// return x\n\treturn $x;\n}\n", "\t$sum = 1;\n\twhile\
    \ ($n > 0) {\n\t\t$n = $n - 1;\n\t\t$sum = $sum * 2;\n\t\t$sum = $sum % $p;\n\t\
    }\n\treturn $sum;\n}\n", "    // Check that p is prime.\n    if (is_prime($p)\
    \ == false) {\n        return \"Not a prime number.\";\n    }\n\n    $num = 1;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $num = ($num * 2) % $p;\n    }\n \
    \   return $num;\n}\n", "\t$r = 1;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\
    \t$r = ($r * $p) % (1 << 30);\n\t\t}\n\t\t$p = ($p * $p) % (1 << 30);\n\t\t$n\
    \ >>= 1;\n\t}\n\treturn $r;\n}\n", "    if ($n == 0) {\n        return 1;\n  \
    \  }\n    if ($n % 2 == 0) {\n        $x = modp($n / 2, $p);\n        return $x\
    \ * $x % $p;\n    } else {\n        return $n * modp($n - 1, $p) % $p;\n    }\n\
    }\n\necho modp(1101, 101);", "\t$n = intval($n);\n\t$p = intval($p);\n\t$r = 1;\n\
    \t$m = $n;\n\twhile ($m > 0) {\n\t\tif ($m & 1) {\n\t\t\t$r = ($r * $n) % $p;\n\
    \t\t}\n\t\t$m >>= 1;\n\t\t$n = ($n * $n) % $p;\n\t}\n\treturn $r;\n}\n", "   \
    \ $v = 1;\n    $n_binary = decbin($n);\n    $len = strlen($n_binary);\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        $v = bcmod(bcmul($v, $v), $p);\n      \
    \  if ($n_binary[$i] == '1') {\n            $v = bcmod(bcmul($v, 2), $p);\n  \
    \      }\n    }\n    return $v;\n}\n", "    if ($n < 0) {\n        $n = $n + ((-$n\
    \ / $p) + 1) * $p;\n    }\n    $res = 1;\n    $power = $n;\n    while ($power\
    \ > 0) {\n        if ($power & 1) {\n            $res = ($res * $n) % $p;\n  \
    \      }\n        $n = ($n * $n) % $p;\n        $power >>= 1;\n    }\n    return\
    \ $res;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
