name: HumanEval_117_select_words
language: swift
prompt: "\n/// Given a string s and a natural number n, you have been tasked to implement\
  \ \n/// a function that returns a list of all words from string s that contain exactly\
  \ \n/// n consonants, in order these words appear in the string s.\n/// If the string\
  \ s is empty then the function should return an empty list.\n/// Note: you may assume\
  \ the input string contains only letters and spaces.\n/// Examples:\n/// select_words(\"\
  Mary had a little lamb\", 4) ==> [\"little\"]\n/// select_words(\"Mary had a little\
  \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n/// select_words(\"simple white space\",\
  \ 2) ==> []\n/// select_words(\"Hello world\", 4) ==> [\"world\"]\n/// select_words(\"\
  Uncle sam\", 3) ==> [\"Uncle\"]\nfunc select_words(s: String, n: Int) -> [String]\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\"\
  , n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n:\
  \ 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
  \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"world\"\
  ])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
  \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
  \ == [\"b\", \"c\", \"d\", \"f\"])"
completions: []
stop_tokens:
- "\n}"
