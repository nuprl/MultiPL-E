language: swift
name: HumanEval_158_find_max
results:
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word)\n        if unique.count\
    \ > max {\n            max = unique.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpx46huh1h/tmpx46huh1h.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc85ce2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc859d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc859d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc859d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx46huh1h                        0x000055a4221a0933 <unavailable> + 6451

    5    libc.so.6                          0x00002abc85ece460 __libc_start_main +
    245

    6    tmpx46huh1h                        0x000055a4221a0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word)\n        if unique.count\
    \ > max {\n            max = unique.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpx46huh1h/tmpx46huh1h.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc85ce2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc859d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc859d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc859d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx46huh1h                        0x000055a4221a0933 <unavailable> + 6451

    5    libc.so.6                          0x00002abc85ece460 __libc_start_main +
    245

    6    tmpx46huh1h                        0x000055a4221a0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        if max < word.count {\n            max\
    \ = word.count\n            maxWord = word\n        }\n    }\n    return maxWord\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmphzu8jk57/tmphzu8jk57.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affff059c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afffed50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afffed50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afffed4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphzu8jk57                        0x000055e2f5966823 <unavailable> + 6179

    5    libc.so.6                          0x00002affff245460 __libc_start_main +
    245

    6    tmphzu8jk57                        0x000055e2f5966249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = \"\"\n    for word in\
    \ words {\n        if max.count < word.count {\n            max = word\n     \
    \   }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqwhn5y8a/tmpqwhn5y8a.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae304bcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3048c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3048c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3048c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqwhn5y8a                        0x0000557b3ac42823 <unavailable> + 6179

    5    libc.so.6                          0x00002ae304db6460 __libc_start_main +
    245

    6    tmpqwhn5y8a                        0x0000557b3ac42249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word)\n        if unique.count\
    \ > max {\n            max = unique.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpx46huh1h/tmpx46huh1h.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc85ce2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc859d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc859d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc859d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx46huh1h                        0x000055a4221a0933 <unavailable> + 6451

    5    libc.so.6                          0x00002abc85ece460 __libc_start_main +
    245

    6    tmpx46huh1h                        0x000055a4221a0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word)\n        if unique.count\
    \ > max {\n            max = unique.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpx46huh1h/tmpx46huh1h.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc85ce2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc859d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc859d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc859d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx46huh1h                        0x000055a4221a0933 <unavailable> + 6451

    5    libc.so.6                          0x00002abc85ece460 __libc_start_main +
    245

    6    tmpx46huh1h                        0x000055a4221a0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let set = Set(word)\n        if set.count\
    \ > max {\n            max = set.count\n            maxWord = word\n        }\n\
    \    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpcf92z8vl/tmpcf92z8vl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fbf043c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fbed3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fbed3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fbed397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcf92z8vl                        0x000055c16af8a933 <unavailable> + 6451

    5    libc.so.6                          0x00002b7fbf22f460 __libc_start_main +
    245

    6    tmpcf92z8vl                        0x000055c16af8a359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let count = Set(word).count\n        if\
    \ count > max_count {\n            max_count = count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpeboznv6v/tmpeboznv6v.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c7a000c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c79cf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c79cf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c79cf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeboznv6v                        0x000056304cee6933 <unavailable> + 6451

    5    libc.so.6                          0x00002b2c7a1ec460 __libc_start_main +
    245

    6    tmpeboznv6v                        0x000056304cee6359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let set = Set(word)\n        if set.count\
    \ > max_count {\n            max_count = set.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmps8xda6hu/tmps8xda6hu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd141dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd1114b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd1114988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd11137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps8xda6hu                        0x0000557509889933 <unavailable> + 6451

    5    libc.so.6                          0x00002aadd1609460 __libc_start_main +
    245

    6    tmps8xda6hu                        0x0000557509889359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word)\n       \
    \ if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp929bu4n5/tmp929bu4n5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bd7468c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bd715fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bd715f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bd715e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp929bu4n5                        0x0000560b2cad5933 <unavailable> + 6451

    5    libc.so.6                          0x00002b6bd7654460 __libc_start_main +
    245

    6    tmp929bu4n5                        0x0000560b2cad5359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word)\n       \
    \ if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp929bu4n5/tmp929bu4n5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bd7468c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bd715fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bd715f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bd715e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp929bu4n5                        0x0000560b2cad5933 <unavailable> + 6451

    5    libc.so.6                          0x00002b6bd7654460 __libc_start_main +
    245

    6    tmp929bu4n5                        0x0000560b2cad5359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var maxWord = \"\"\n    var maxCount\
    \ = 0\n    for word in words {\n        let uniqueChars = Set(word)\n        if\
    \ uniqueChars.count > maxCount {\n            maxCount = uniqueChars.count\n \
    \           maxWord = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpt6nfkvxo/tmpt6nfkvxo.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19ddea7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19ddb9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19ddb9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19ddb9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt6nfkvxo                        0x0000560dcb386933 <unavailable> + 6451

    5    libc.so.6                          0x00002b19de093460 __libc_start_main +
    245

    6    tmpt6nfkvxo                        0x0000560dcb386359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var max_word\
    \ = \"\"\n    for word in words {\n        let unique_chars = Set(word)\n    \
    \    if unique_chars.count > max {\n            max = unique_chars.count\n   \
    \         max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpl0malb5p/tmpl0malb5p.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d92cedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d929e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d929e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d929e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl0malb5p                        0x00005561713cc933 <unavailable> + 6451

    5    libc.so.6                          0x00002b8d92ed9460 __libc_start_main +
    245

    6    tmpl0malb5p                        0x00005561713cc359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let count = Set(word).count\n        if\
    \ count > max_count {\n            max_count = count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpeboznv6v/tmpeboznv6v.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c7a000c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c79cf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c79cf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c79cf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeboznv6v                        0x000056304cee6933 <unavailable> + 6451

    5    libc.so.6                          0x00002b2c7a1ec460 __libc_start_main +
    245

    6    tmpeboznv6v                        0x000056304cee6359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var maxWord = \"\"\n    var maxCount\
    \ = 0\n    for word in words {\n        let uniqueChars = Set(word)\n        if\
    \ uniqueChars.count > maxCount {\n            maxCount = uniqueChars.count\n \
    \           maxWord = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpt6nfkvxo/tmpt6nfkvxo.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19ddea7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19ddb9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19ddb9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19ddb9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt6nfkvxo                        0x0000560dcb386933 <unavailable> + 6451

    5    libc.so.6                          0x00002b19de093460 __libc_start_main +
    245

    6    tmpt6nfkvxo                        0x0000560dcb386359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word)\n        if unique.count\
    \ > max {\n            max = unique.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpx46huh1h/tmpx46huh1h.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc85ce2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc859d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc859d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc859d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx46huh1h                        0x000055a4221a0933 <unavailable> + 6451

    5    libc.so.6                          0x00002abc85ece460 __libc_start_main +
    245

    6    tmpx46huh1h                        0x000055a4221a0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpjscffry9.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word)\n       \
    \ if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp929bu4n5/tmp929bu4n5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bd7468c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bd715fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bd715f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bd715e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp929bu4n5                        0x0000560b2cad5933 <unavailable> + 6451

    5    libc.so.6                          0x00002b6bd7654460 __libc_start_main +
    245

    6    tmp929bu4n5                        0x0000560b2cad5359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word)\n       \
    \ if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp929bu4n5/tmp929bu4n5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bd7468c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bd715fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bd715f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bd715e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp929bu4n5                        0x0000560b2cad5933 <unavailable> + 6451

    5    libc.so.6                          0x00002b6bd7654460 __libc_start_main +
    245

    6    tmp929bu4n5                        0x0000560b2cad5359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let count = Set(word).count\n        if\
    \ count > max_count {\n            max_count = count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpeboznv6v/tmpeboznv6v.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c7a000c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c79cf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c79cf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c79cf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeboznv6v                        0x000056304cee6933 <unavailable> + 6451

    5    libc.so.6                          0x00002b2c7a1ec460 __libc_start_main +
    245

    6    tmpeboznv6v                        0x000056304cee6359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let count = Set(word).count\n        if\
    \ count > max_count {\n            max_count = count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpeboznv6v/tmpeboznv6v.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c7a000c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c79cf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c79cf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c79cf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeboznv6v                        0x000056304cee6933 <unavailable> + 6451

    5    libc.so.6                          0x00002b2c7a1ec460 __libc_start_main +
    245

    6    tmpeboznv6v                        0x000056304cee6359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let set = Set(word)\n        if set.count\
    \ > max {\n            max = set.count\n            maxWord = word\n        }\n\
    \    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpcf92z8vl/tmpcf92z8vl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fbf043c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fbed3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fbed3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fbed397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcf92z8vl                        0x000055c16af8a933 <unavailable> + 6451

    5    libc.so.6                          0x00002b7fbf22f460 __libc_start_main +
    245

    6    tmpcf92z8vl                        0x000055c16af8a359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var result =\
    \ \"\"\n    for word in words {\n        let set = Set(word)\n        if set.count\
    \ > max {\n            max = set.count\n            result = word\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpatsdzwcw/tmpatsdzwcw.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae024b30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae024827b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae024827988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0248267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpatsdzwcw                        0x000055c7fd209933 <unavailable> + 6451

    5    libc.so.6                          0x00002ae024d1c460 __libc_start_main +
    245

    6    tmpatsdzwcw                        0x000055c7fd209359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let count = Set(word).count\n        if\
    \ count > max_count {\n            max_count = count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpeboznv6v/tmpeboznv6v.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c7a000c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c79cf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c79cf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c79cf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeboznv6v                        0x000056304cee6933 <unavailable> + 6451

    5    libc.so.6                          0x00002b2c7a1ec460 __libc_start_main +
    245

    6    tmpeboznv6v                        0x000056304cee6359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpjscffry9.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word)\n        if unique.count\
    \ > max {\n            max = unique.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpx46huh1h/tmpx46huh1h.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc85ce2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc859d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc859d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc859d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx46huh1h                        0x000055a4221a0933 <unavailable> + 6451

    5    libc.so.6                          0x00002abc85ece460 __libc_start_main +
    245

    6    tmpx46huh1h                        0x000055a4221a0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let count = Set(word).count\n        if\
    \ count > max_count {\n            max_count = count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpeboznv6v/tmpeboznv6v.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c7a000c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c79cf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c79cf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c79cf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeboznv6v                        0x000056304cee6933 <unavailable> + 6451

    5    libc.so.6                          0x00002b2c7a1ec460 __libc_start_main +
    245

    6    tmpeboznv6v                        0x000056304cee6359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 0
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let word_count = word.count\n        let\
    \ word_set = Set(word)\n        let word_set_count = word_set.count\n        if\
    \ word_set_count > max_count {\n            max_count = word_set_count\n     \
    \       max_word = word\n        } else if word_set_count == max_count {\n   \
    \         if word < max_word {\n                max_word = word\n            }\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpjscffry9.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word)\n        if unique.count\
    \ > max {\n            max = unique.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpx46huh1h/tmpx46huh1h.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc85ce2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc859d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc859d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc859d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx46huh1h                        0x000055a4221a0933 <unavailable> + 6451

    5    libc.so.6                          0x00002abc85ece460 __libc_start_main +
    245

    6    tmpx46huh1h                        0x000055a4221a0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var maxWord = \"\"\n    var maxCount\
    \ = 0\n    for word in words {\n        let count = Set(word).count\n        if\
    \ count > maxCount {\n            maxCount = count\n            maxWord = word\n\
    \        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp741uv3ud/tmp741uv3ud.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbbb1d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbbaeceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbbaece988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbbaecd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp741uv3ud                        0x00005571eda0d933 <unavailable> + 6451

    5    libc.so.6                          0x00002adbbb3c3460 __libc_start_main +
    245

    6    tmp741uv3ud                        0x00005571eda0d359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word)\n        if unique.count\
    \ > max {\n            max = unique.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpx46huh1h/tmpx46huh1h.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc85ce2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc859d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc859d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc859d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx46huh1h                        0x000055a4221a0933 <unavailable> + 6451

    5    libc.so.6                          0x00002abc85ece460 __libc_start_main +
    245

    6    tmpx46huh1h                        0x000055a4221a0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var max_word\
    \ = \"\"\n    for word in words {\n        let unique_chars = Set(word)\n    \
    \    if unique_chars.count > max {\n            max = unique_chars.count\n   \
    \         max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpl0malb5p/tmpl0malb5p.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d92cedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d929e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d929e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d929e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl0malb5p                        0x00005561713cc933 <unavailable> + 6451

    5    libc.so.6                          0x00002b8d92ed9460 __libc_start_main +
    245

    6    tmpl0malb5p                        0x00005561713cc359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let set = Set(word)\n        if set.count\
    \ > max_count {\n            max_count = set.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmps8xda6hu/tmps8xda6hu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd141dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd1114b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd1114988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd11137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps8xda6hu                        0x0000557509889933 <unavailable> + 6451

    5    libc.so.6                          0x00002aadd1609460 __libc_start_main +
    245

    6    tmps8xda6hu                        0x0000557509889359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word)\n       \
    \ if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp929bu4n5/tmp929bu4n5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bd7468c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bd715fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bd715f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bd715e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp929bu4n5                        0x0000560b2cad5933 <unavailable> + 6451

    5    libc.so.6                          0x00002b6bd7654460 __libc_start_main +
    245

    6    tmp929bu4n5                        0x0000560b2cad5359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let count = Set(word).count\n        if\
    \ count > max_count {\n            max_count = count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpeboznv6v/tmpeboznv6v.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c7a000c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c79cf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c79cf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c79cf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeboznv6v                        0x000056304cee6933 <unavailable> + 6451

    5    libc.so.6                          0x00002b2c7a1ec460 __libc_start_main +
    245

    6    tmpeboznv6v                        0x000056304cee6359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var maxWord = \"\"\n    var maxCount\
    \ = 0\n    for word in words {\n        let uniqueChars = Set(word.characters)\n\
    \        if uniqueChars.count > maxCount {\n            maxCount = uniqueChars.count\n\
    \            maxWord = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmphu3zsjip.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n        let uniqueChars = Set(word.characters)\n      \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var max_word\
    \ = \"\"\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max {\n            max = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpbntuzl0v.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var max_word\
    \ = \"\"\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max {\n            max = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpbntuzl0v.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpjscffry9.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let count = Set(word).count\n        if\
    \ count > max_count {\n            max_count = count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpeboznv6v/tmpeboznv6v.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c7a000c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c79cf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c79cf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c79cf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeboznv6v                        0x000056304cee6933 <unavailable> + 6451

    5    libc.so.6                          0x00002b2c7a1ec460 __libc_start_main +
    245

    6    tmpeboznv6v                        0x000056304cee6359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word)\n        if unique.count\
    \ > max {\n            max = unique.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpx46huh1h/tmpx46huh1h.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc85ce2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc859d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc859d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc859d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx46huh1h                        0x000055a4221a0933 <unavailable> + 6451

    5    libc.so.6                          0x00002abc85ece460 __libc_start_main +
    245

    6    tmpx46huh1h                        0x000055a4221a0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let uniqueChars = Set(word)\n       \
    \ if uniqueChars.count > max {\n            max = uniqueChars.count\n        \
    \    maxWord = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpif7qrzrf/tmpif7qrzrf.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1106394c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b110608bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b110608b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b110608a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif7qrzrf                        0x000055900bbf1933 <unavailable> + 6451

    5    libc.so.6                          0x00002b1106580460 __libc_start_main +
    245

    6    tmpif7qrzrf                        0x000055900bbf1359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxString\
    \ = \"\"\n    for word in words {\n        let unique = Set(word.characters)\n\
    \        if unique.count > max {\n            max = unique.count\n           \
    \ maxString = word\n        }\n    }\n    return maxString\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmp0vrf6rdq.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word)\n       \
    \ if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp929bu4n5/tmp929bu4n5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bd7468c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bd715fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bd715f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bd715e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp929bu4n5                        0x0000560b2cad5933 <unavailable> + 6451

    5    libc.so.6                          0x00002b6bd7654460 __libc_start_main +
    245

    6    tmp929bu4n5                        0x0000560b2cad5359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpjscffry9.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var result =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            result\
    \ = word\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpbd6dzygc.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word)\n        if unique.count\
    \ > max {\n            max = unique.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpx46huh1h/tmpx46huh1h.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc85ce2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc859d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc859d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc859d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx46huh1h                        0x000055a4221a0933 <unavailable> + 6451

    5    libc.so.6                          0x00002abc85ece460 __libc_start_main +
    245

    6    tmpx46huh1h                        0x000055a4221a0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpjscffry9.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = \"\"\n    for word in\
    \ words {\n        if word.count > max.count {\n            max = word\n     \
    \   }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp69jo1dhy/tmp69jo1dhy.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ac5ef3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ac5beab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ac5bea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ac5be97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp69jo1dhy                        0x00005613380a5823 <unavailable> + 6179

    5    libc.so.6                          0x00002b5ac60df460 __libc_start_main +
    245

    6    tmp69jo1dhy                        0x00005613380a5249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var result =\
    \ \"\"\n    for word in words {\n        let set = Set(word)\n        if set.count\
    \ > max {\n            max = set.count\n            result = word\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpatsdzwcw/tmpatsdzwcw.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae024b30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae024827b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae024827988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0248267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpatsdzwcw                        0x000055c7fd209933 <unavailable> + 6451

    5    libc.so.6                          0x00002ae024d1c460 __libc_start_main +
    245

    6    tmpatsdzwcw                        0x000055c7fd209359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word)\n       \
    \ if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp929bu4n5/tmp929bu4n5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bd7468c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bd715fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bd715f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bd715e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp929bu4n5                        0x0000560b2cad5933 <unavailable> + 6451

    5    libc.so.6                          0x00002b6bd7654460 __libc_start_main +
    245

    6    tmp929bu4n5                        0x0000560b2cad5359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var max_word\
    \ = \"\"\n    for word in words {\n        let unique_chars = Set(word)\n    \
    \    if unique_chars.count > max {\n            max = unique_chars.count\n   \
    \         max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpl0malb5p/tmpl0malb5p.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d92cedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d929e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d929e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d929e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl0malb5p                        0x00005561713cc933 <unavailable> + 6451

    5    libc.so.6                          0x00002b8d92ed9460 __libc_start_main +
    245

    6    tmpl0malb5p                        0x00005561713cc359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var max_word\
    \ = \"\"\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max {\n            max = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpbntuzl0v.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpjscffry9.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word)\n       \
    \ if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp929bu4n5/tmp929bu4n5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bd7468c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bd715fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bd715f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bd715e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp929bu4n5                        0x0000560b2cad5933 <unavailable> + 6451

    5    libc.so.6                          0x00002b6bd7654460 __libc_start_main +
    245

    6    tmp929bu4n5                        0x0000560b2cad5359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let count = Set(word).count\n        if\
    \ count > max_count {\n            max_count = count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpeboznv6v/tmpeboznv6v.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c7a000c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c79cf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c79cf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c79cf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeboznv6v                        0x000056304cee6933 <unavailable> + 6451

    5    libc.so.6                          0x00002b2c7a1ec460 __libc_start_main +
    245

    6    tmpeboznv6v                        0x000056304cee6359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var max_word\
    \ = \"\"\n    for word in words {\n        let unique_chars = Set(word)\n    \
    \    if unique_chars.count > max {\n            max = unique_chars.count\n   \
    \         max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpl0malb5p/tmpl0malb5p.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d92cedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d929e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d929e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d929e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl0malb5p                        0x00005561713cc933 <unavailable> + 6451

    5    libc.so.6                          0x00002b8d92ed9460 __libc_start_main +
    245

    6    tmpl0malb5p                        0x00005561713cc359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxString\
    \ = \"\"\n    for word in words {\n        let unique = Set(word)\n        if\
    \ unique.count > max {\n            max = unique.count\n            maxString\
    \ = word\n        }\n    }\n    return maxString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\"\
    )\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: Exception
  stderr: 'tmpy5hgelyj/tmpy5hgelyj.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2109f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2106e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2106e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2106e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5hgelyj                        0x0000560ef33c8933 <unavailable> + 6451

    5    libc.so.6                          0x00002ab210bde460 __libc_start_main +
    245

    6    tmpy5hgelyj                        0x0000560ef33c8359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let count = Set(word).count\n        if\
    \ count > max_count {\n            max_count = count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpeboznv6v/tmpeboznv6v.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c7a000c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c79cf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c79cf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c79cf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeboznv6v                        0x000056304cee6933 <unavailable> + 6451

    5    libc.so.6                          0x00002b2c7a1ec460 __libc_start_main +
    245

    6    tmpeboznv6v                        0x000056304cee6359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var maxWord = \"\"\n    var maxCount\
    \ = 0\n    for word in words {\n        let uniqueChars = Set(word.characters)\n\
    \        if uniqueChars.count > maxCount {\n            maxCount = uniqueChars.count\n\
    \            maxWord = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmphu3zsjip.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n        let uniqueChars = Set(word.characters)\n      \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxString\
    \ = \"\"\n    for word in words {\n        let unique = Set(word.characters)\n\
    \        if unique.count > max {\n            max = unique.count\n           \
    \ maxString = word\n        }\n    }\n    return maxString\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmp0vrf6rdq.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let set = Set(word)\n        if set.count\
    \ > max {\n            max = set.count\n            maxWord = word\n        }\n\
    \    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpcf92z8vl/tmpcf92z8vl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fbf043c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fbed3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fbed3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fbed397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcf92z8vl                        0x000055c16af8a933 <unavailable> + 6451

    5    libc.so.6                          0x00002b7fbf22f460 __libc_start_main +
    245

    6    tmpcf92z8vl                        0x000055c16af8a359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let count = Set(word).count\n        if\
    \ count > max_count {\n            max_count = count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpeboznv6v/tmpeboznv6v.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c7a000c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c79cf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c79cf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c79cf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeboznv6v                        0x000056304cee6933 <unavailable> + 6451

    5    libc.so.6                          0x00002b2c7a1ec460 __libc_start_main +
    245

    6    tmpeboznv6v                        0x000056304cee6359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var maxWord = \"\"\n    var maxCount\
    \ = 0\n    for word in words {\n        let uniqueChars = Set(word)\n        if\
    \ uniqueChars.count > maxCount {\n            maxCount = uniqueChars.count\n \
    \           maxWord = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpt6nfkvxo/tmpt6nfkvxo.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19ddea7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19ddb9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19ddb9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19ddb9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt6nfkvxo                        0x0000560dcb386933 <unavailable> + 6451

    5    libc.so.6                          0x00002b19de093460 __libc_start_main +
    245

    6    tmpt6nfkvxo                        0x0000560dcb386359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let count = Set(word).count\n        if\
    \ count > max_count {\n            max_count = count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpeboznv6v/tmpeboznv6v.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c7a000c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c79cf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c79cf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c79cf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeboznv6v                        0x000056304cee6933 <unavailable> + 6451

    5    libc.so.6                          0x00002b2c7a1ec460 __libc_start_main +
    245

    6    tmpeboznv6v                        0x000056304cee6359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let count = Set(word).count\n        if\
    \ count > max_count {\n            max_count = count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpeboznv6v/tmpeboznv6v.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c7a000c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c79cf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c79cf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c79cf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeboznv6v                        0x000056304cee6933 <unavailable> + 6451

    5    libc.so.6                          0x00002b2c7a1ec460 __libc_start_main +
    245

    6    tmpeboznv6v                        0x000056304cee6359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let count = Set(word).count\n        if\
    \ count > max_count {\n            max_count = count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpeboznv6v/tmpeboznv6v.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c7a000c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c79cf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c79cf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c79cf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeboznv6v                        0x000056304cee6933 <unavailable> + 6451

    5    libc.so.6                          0x00002b2c7a1ec460 __libc_start_main +
    245

    6    tmpeboznv6v                        0x000056304cee6359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var maxWord = \"\"\n    var maxCount\
    \ = 0\n    for word in words {\n        let count = Set(word).count\n        if\
    \ count > maxCount {\n            maxCount = count\n            maxWord = word\n\
    \        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp741uv3ud/tmp741uv3ud.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbbb1d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbbaeceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbbaece988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbbaecd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp741uv3ud                        0x00005571eda0d933 <unavailable> + 6451

    5    libc.so.6                          0x00002adbbb3c3460 __libc_start_main +
    245

    6    tmp741uv3ud                        0x00005571eda0d359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var maxWord = \"\"\n    var maxCount\
    \ = 0\n    for word in words {\n        let uniqueChars = Set(word)\n        if\
    \ uniqueChars.count > maxCount {\n            maxCount = uniqueChars.count\n \
    \           maxWord = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpt6nfkvxo/tmpt6nfkvxo.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19ddea7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19ddb9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19ddb9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19ddb9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt6nfkvxo                        0x0000560dcb386933 <unavailable> + 6451

    5    libc.so.6                          0x00002b19de093460 __libc_start_main +
    245

    6    tmpt6nfkvxo                        0x0000560dcb386359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word)\n        if unique.count\
    \ > max {\n            max = unique.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpx46huh1h/tmpx46huh1h.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc85ce2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc859d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc859d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc859d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx46huh1h                        0x000055a4221a0933 <unavailable> + 6451

    5    libc.so.6                          0x00002abc85ece460 __libc_start_main +
    245

    6    tmpx46huh1h                        0x000055a4221a0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word)\n        if unique.count\
    \ > max {\n            max = unique.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpx46huh1h/tmpx46huh1h.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc85ce2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc859d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc859d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc859d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx46huh1h                        0x000055a4221a0933 <unavailable> + 6451

    5    libc.so.6                          0x00002abc85ece460 __libc_start_main +
    245

    6    tmpx46huh1h                        0x000055a4221a0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var result =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            result\
    \ = word\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpbd6dzygc.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var maxWord = \"\"\n    var maxCount\
    \ = 0\n    for word in words {\n        let uniqueChars = Set(word)\n        if\
    \ uniqueChars.count > maxCount {\n            maxCount = uniqueChars.count\n \
    \           maxWord = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpt6nfkvxo/tmpt6nfkvxo.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19ddea7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19ddb9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19ddb9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19ddb9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt6nfkvxo                        0x0000560dcb386933 <unavailable> + 6451

    5    libc.so.6                          0x00002b19de093460 __libc_start_main +
    245

    6    tmpt6nfkvxo                        0x0000560dcb386359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var result =\
    \ \"\"\n    for word in words {\n        let set = Set(word)\n        if set.count\
    \ > max {\n            max = set.count\n            result = word\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpatsdzwcw/tmpatsdzwcw.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae024b30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae024827b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae024827988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0248267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpatsdzwcw                        0x000055c7fd209933 <unavailable> + 6451

    5    libc.so.6                          0x00002ae024d1c460 __libc_start_main +
    245

    6    tmpatsdzwcw                        0x000055c7fd209359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let set = Set(word)\n        if set.count\
    \ > max {\n            max = set.count\n            maxWord = word\n        }\n\
    \    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpcf92z8vl/tmpcf92z8vl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fbf043c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fbed3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fbed3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fbed397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcf92z8vl                        0x000055c16af8a933 <unavailable> + 6451

    5    libc.so.6                          0x00002b7fbf22f460 __libc_start_main +
    245

    6    tmpcf92z8vl                        0x000055c16af8a359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word)\n       \
    \ if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp929bu4n5/tmp929bu4n5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bd7468c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bd715fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bd715f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bd715e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp929bu4n5                        0x0000560b2cad5933 <unavailable> + 6451

    5    libc.so.6                          0x00002b6bd7654460 __libc_start_main +
    245

    6    tmp929bu4n5                        0x0000560b2cad5359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let count = Set(word).count\n        if\
    \ count > max_count {\n            max_count = count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpeboznv6v/tmpeboznv6v.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c7a000c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c79cf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c79cf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c79cf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeboznv6v                        0x000056304cee6933 <unavailable> + 6451

    5    libc.so.6                          0x00002b2c7a1ec460 __libc_start_main +
    245

    6    tmpeboznv6v                        0x000056304cee6359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpjscffry9.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word)\n       \
    \ if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp929bu4n5/tmp929bu4n5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bd7468c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bd715fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bd715f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bd715e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp929bu4n5                        0x0000560b2cad5933 <unavailable> + 6451

    5    libc.so.6                          0x00002b6bd7654460 __libc_start_main +
    245

    6    tmp929bu4n5                        0x0000560b2cad5359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let set = Set(word)\n        if set.count\
    \ > max {\n            max = set.count\n            maxWord = word\n        }\n\
    \    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpcf92z8vl/tmpcf92z8vl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fbf043c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fbed3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fbed3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fbed397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcf92z8vl                        0x000055c16af8a933 <unavailable> + 6451

    5    libc.so.6                          0x00002b7fbf22f460 __libc_start_main +
    245

    6    tmpcf92z8vl                        0x000055c16af8a359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var result =\
    \ \"\"\n    for word in words {\n        let unique = Set(word)\n        if unique.count\
    \ > max {\n            max = unique.count\n            result = word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp9l25j__n/tmp9l25j__n.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6870abcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68707b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68707b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68707b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9l25j__n                        0x000055e4dd17d933 <unavailable> + 6451

    5    libc.so.6                          0x00002b6870ca8460 __libc_start_main +
    245

    6    tmp9l25j__n                        0x000055e4dd17d359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var result =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            result\
    \ = word\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpbd6dzygc.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let uniqueChars = Set(word.characters)\n\
    \        if uniqueChars.count > max {\n            max = uniqueChars.count\n \
    \           maxWord = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpno8yhxyb.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n        let uniqueChars = Set(word.characters)\n      \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let set = Set(word)\n        if set.count\
    \ > max {\n            max = set.count\n            maxWord = word\n        }\n\
    \    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpcf92z8vl/tmpcf92z8vl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fbf043c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fbed3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fbed3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fbed397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcf92z8vl                        0x000055c16af8a933 <unavailable> + 6451

    5    libc.so.6                          0x00002b7fbf22f460 __libc_start_main +
    245

    6    tmpcf92z8vl                        0x000055c16af8a359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let set = Set(word)\n        if set.count\
    \ > max_count {\n            max_count = set.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmps8xda6hu/tmps8xda6hu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd141dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd1114b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd1114988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd11137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps8xda6hu                        0x0000557509889933 <unavailable> + 6451

    5    libc.so.6                          0x00002aadd1609460 __libc_start_main +
    245

    6    tmps8xda6hu                        0x0000557509889359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var maxWord = \"\"\n    var maxCount\
    \ = 0\n    for word in words {\n        let count = Set(word).count\n        if\
    \ count > maxCount {\n            maxCount = count\n            maxWord = word\n\
    \        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp741uv3ud/tmp741uv3ud.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbbb1d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbbaeceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbbaece988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbbaecd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp741uv3ud                        0x00005571eda0d933 <unavailable> + 6451

    5    libc.so.6                          0x00002adbbb3c3460 __libc_start_main +
    245

    6    tmp741uv3ud                        0x00005571eda0d359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpjscffry9.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpjscffry9.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let count = Set(word).count\n        if\
    \ count > max_count {\n            max_count = count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpeboznv6v/tmpeboznv6v.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c7a000c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c79cf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c79cf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c79cf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeboznv6v                        0x000056304cee6933 <unavailable> + 6451

    5    libc.so.6                          0x00002b2c7a1ec460 __libc_start_main +
    245

    6    tmpeboznv6v                        0x000056304cee6359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word)\n       \
    \ if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp929bu4n5/tmp929bu4n5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bd7468c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bd715fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bd715f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bd715e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp929bu4n5                        0x0000560b2cad5933 <unavailable> + 6451

    5    libc.so.6                          0x00002b6bd7654460 __libc_start_main +
    245

    6    tmp929bu4n5                        0x0000560b2cad5359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word)\n        if unique.count\
    \ > max {\n            max = unique.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpx46huh1h/tmpx46huh1h.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc85ce2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc859d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc859d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc859d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx46huh1h                        0x000055a4221a0933 <unavailable> + 6451

    5    libc.so.6                          0x00002abc85ece460 __libc_start_main +
    245

    6    tmpx46huh1h                        0x000055a4221a0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var max_word\
    \ = \"\"\n    for word in words {\n        let unique_chars = Set(word)\n    \
    \    if unique_chars.count > max {\n            max = unique_chars.count\n   \
    \         max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpl0malb5p/tmpl0malb5p.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d92cedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d929e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d929e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d929e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl0malb5p                        0x00005561713cc933 <unavailable> + 6451

    5    libc.so.6                          0x00002b8d92ed9460 __libc_start_main +
    245

    6    tmpl0malb5p                        0x00005561713cc359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word)\n        if unique.count\
    \ > max {\n            max = unique.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpx46huh1h/tmpx46huh1h.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc85ce2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc859d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc859d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc859d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx46huh1h                        0x000055a4221a0933 <unavailable> + 6451

    5    libc.so.6                          0x00002abc85ece460 __libc_start_main +
    245

    6    tmpx46huh1h                        0x000055a4221a0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word)\n       \
    \ if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp929bu4n5/tmp929bu4n5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bd7468c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bd715fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bd715f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bd715e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp929bu4n5                        0x0000560b2cad5933 <unavailable> + 6451

    5    libc.so.6                          0x00002b6bd7654460 __libc_start_main +
    245

    6    tmp929bu4n5                        0x0000560b2cad5359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word)\n        if unique.count\
    \ > max {\n            max = unique.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpx46huh1h/tmpx46huh1h.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc85ce2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc859d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc859d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc859d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx46huh1h                        0x000055a4221a0933 <unavailable> + 6451

    5    libc.so.6                          0x00002abc85ece460 __libc_start_main +
    245

    6    tmpx46huh1h                        0x000055a4221a0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpjscffry9.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = words[0]\n    for word\
    \ in words {\n        if word.count > max.count {\n            max = word\n  \
    \      }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp77906033/tmp77906033.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afae0c06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afae08fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afae08fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afae08fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp77906033                        0x00005648aa213873 <unavailable> + 6259

    5    libc.so.6                          0x00002afae0df2460 __libc_start_main +
    245

    6    tmp77906033                        0x00005648aa213299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let uniqueChars = Set(word)\n       \
    \ if uniqueChars.count > max {\n            max = uniqueChars.count\n        \
    \    maxWord = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpif7qrzrf/tmpif7qrzrf.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1106394c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b110608bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b110608b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b110608a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif7qrzrf                        0x000055900bbf1933 <unavailable> + 6451

    5    libc.so.6                          0x00002b1106580460 __libc_start_main +
    245

    6    tmpif7qrzrf                        0x000055900bbf1359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var result = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            result = word\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpl6iei7ho.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var maxWord = \"\"\n    var maxCount\
    \ = 0\n    for word in words {\n        let uniqueChars = Set(word)\n        if\
    \ uniqueChars.count > maxCount {\n            maxCount = uniqueChars.count\n \
    \           maxWord = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpt6nfkvxo/tmpt6nfkvxo.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19ddea7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19ddb9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19ddb9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19ddb9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt6nfkvxo                        0x0000560dcb386933 <unavailable> + 6451

    5    libc.so.6                          0x00002b19de093460 __libc_start_main +
    245

    6    tmpt6nfkvxo                        0x0000560dcb386359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word)\n        if unique.count\
    \ > max {\n            max = unique.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpx46huh1h/tmpx46huh1h.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc85ce2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc859d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc859d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc859d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx46huh1h                        0x000055a4221a0933 <unavailable> + 6451

    5    libc.so.6                          0x00002abc85ece460 __libc_start_main +
    245

    6    tmpx46huh1h                        0x000055a4221a0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpjscffry9.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let count = Set(word).count\n        if\
    \ count > max_count {\n            max_count = count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpeboznv6v/tmpeboznv6v.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c7a000c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c79cf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c79cf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c79cf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeboznv6v                        0x000056304cee6933 <unavailable> + 6451

    5    libc.so.6                          0x00002b2c7a1ec460 __libc_start_main +
    245

    6    tmpeboznv6v                        0x000056304cee6359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var max_word\
    \ = \"\"\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max {\n            max = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpbntuzl0v.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word)\n        if unique.count\
    \ > max {\n            max = unique.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpx46huh1h/tmpx46huh1h.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc85ce2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc859d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc859d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc859d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx46huh1h                        0x000055a4221a0933 <unavailable> + 6451

    5    libc.so.6                          0x00002abc85ece460 __libc_start_main +
    245

    6    tmpx46huh1h                        0x000055a4221a0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var maxString = \"\"\n    var\
    \ maxCount = 0\n    for word in words {\n        let uniqueChars = Set(word)\n\
    \        if uniqueChars.count > maxCount {\n            maxCount = uniqueChars.count\n\
    \            maxString = word\n        }\n    }\n    return maxString\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpkvid7myx/tmpkvid7myx.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7bdf48dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7bdf184b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7bdf184988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7bdf1837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvid7myx                        0x00005589cab0d933 <unavailable> + 6451

    5    libc.so.6                          0x00002b7bdf679460 __libc_start_main +
    245

    6    tmpkvid7myx                        0x00005589cab0d359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013315
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word)\n        if unique.count\
    \ > max {\n            max = unique.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpx46huh1h/tmpx46huh1h.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc85ce2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc859d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc859d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc859d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx46huh1h                        0x000055a4221a0933 <unavailable> + 6451

    5    libc.so.6                          0x00002abc85ece460 __libc_start_main +
    245

    6    tmpx46huh1h                        0x000055a4221a0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpjscffry9.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word)\n        if unique.count\
    \ > max {\n            max = unique.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpx46huh1h/tmpx46huh1h.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc85ce2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc859d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc859d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc859d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx46huh1h                        0x000055a4221a0933 <unavailable> + 6451

    5    libc.so.6                          0x00002abc85ece460 __libc_start_main +
    245

    6    tmpx46huh1h                        0x000055a4221a0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxString\
    \ = \"\"\n    for word in words {\n        let set = Set(word)\n        if set.count\
    \ > max {\n            max = set.count\n            maxString = word\n       \
    \ }\n    }\n    return maxString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpiocso52f/tmpiocso52f.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40d4fccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40d4cc3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40d4cc3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40d4cc27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiocso52f                        0x000055d78672a933 <unavailable> + 6451

    5    libc.so.6                          0x00002b40d51b8460 __libc_start_main +
    245

    6    tmpiocso52f                        0x000055d78672a359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013315
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var result =\
    \ \"\"\n    for word in words {\n        let unique = Set(word)\n        if unique.count\
    \ > max {\n            max = unique.count\n            result = word\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp9l25j__n/tmp9l25j__n.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6870abcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68707b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68707b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68707b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9l25j__n                        0x000055e4dd17d933 <unavailable> + 6451

    5    libc.so.6                          0x00002b6870ca8460 __libc_start_main +
    245

    6    tmp9l25j__n                        0x000055e4dd17d359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var maxWord = \"\"\n    var maxCount\
    \ = 0\n    for word in words {\n        let uniqueChars = Set(word)\n        if\
    \ uniqueChars.count > maxCount {\n            maxCount = uniqueChars.count\n \
    \           maxWord = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpt6nfkvxo/tmpt6nfkvxo.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19ddea7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19ddb9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19ddb9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19ddb9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt6nfkvxo                        0x0000560dcb386933 <unavailable> + 6451

    5    libc.so.6                          0x00002b19de093460 __libc_start_main +
    245

    6    tmpt6nfkvxo                        0x0000560dcb386359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpjscffry9.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpjscffry9.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var max_word\
    \ = \"\"\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max {\n            max = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpbntuzl0v.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let count = word.count_unique_chars()\n\
    \        if count > max_count {\n            max_count = count\n            max_word\
    \ = word\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp5kfr4n35.swift:13:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var max_word\
    \ = \"\"\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max {\n            max = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpbntuzl0v.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let count = Set(word).count\n        if\
    \ count > max_count {\n            max_count = count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpeboznv6v/tmpeboznv6v.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c7a000c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c79cf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c79cf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c79cf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeboznv6v                        0x000056304cee6933 <unavailable> + 6451

    5    libc.so.6                          0x00002b2c7a1ec460 __libc_start_main +
    245

    6    tmpeboznv6v                        0x000056304cee6359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    let sorted = words.sorted { (a,\
    \ b) -> Bool in\n        return a.count > b.count\n    }\n    var max = sorted.first!\n\
    \    for word in sorted {\n        if word.count == max.count {\n            if\
    \ word < max {\n                max = word\n            }\n        } else {\n\
    \            break\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\"\
    )\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: Exception
  stderr: 'tmpepi5az2x/tmpepi5az2x.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b386a6b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b386a3a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b386a3a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b386a3a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpepi5az2x                        0x000055a904c554ee <unavailable> + 9454

    5    libc.so.6                          0x00002b386a89d460 __libc_start_main +
    245

    6    tmpepi5az2x                        0x000055a904c543f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013315
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var maxWord = \"\"\n    var maxCount\
    \ = 0\n    for word in words {\n        let uniqueChars = Set(word.characters)\n\
    \        if uniqueChars.count > maxCount {\n            maxCount = uniqueChars.count\n\
    \            maxWord = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmphu3zsjip.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n        let uniqueChars = Set(word.characters)\n      \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word)\n        if unique.count\
    \ > max {\n            max = unique.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpx46huh1h/tmpx46huh1h.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc85ce2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc859d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc859d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc859d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx46huh1h                        0x000055a4221a0933 <unavailable> + 6451

    5    libc.so.6                          0x00002abc85ece460 __libc_start_main +
    245

    6    tmpx46huh1h                        0x000055a4221a0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let count = word.count_unique_characters()\n\
    \        if count > max_count {\n            max_count = count\n            max_word\
    \ = word\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmptu5ota80.swift:13:26: error: value of type 'String' has no member\
    \ 'count_unique_characters'\n        let count = word.count_unique_characters()\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var max_word\
    \ = \"\"\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max {\n            max = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpbntuzl0v.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word)\n        if unique.count\
    \ > max {\n            max = unique.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpx46huh1h/tmpx46huh1h.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc85ce2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc859d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc859d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc859d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx46huh1h                        0x000055a4221a0933 <unavailable> + 6451

    5    libc.so.6                          0x00002abc85ece460 __libc_start_main +
    245

    6    tmpx46huh1h                        0x000055a4221a0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word)\n       \
    \ if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp929bu4n5/tmp929bu4n5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bd7468c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bd715fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bd715f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bd715e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp929bu4n5                        0x0000560b2cad5933 <unavailable> + 6451

    5    libc.so.6                          0x00002b6bd7654460 __libc_start_main +
    245

    6    tmp929bu4n5                        0x0000560b2cad5359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let count = word.count_unique_chars()\n\
    \        if count > max_count {\n            max_count = count\n            max_word\
    \ = word\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp5kfr4n35.swift:13:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var max_word\
    \ = \"\"\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max {\n            max = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpbntuzl0v.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let set = Set(word)\n        if set.count\
    \ > max {\n            max = set.count\n            maxWord = word\n        }\n\
    \    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpcf92z8vl/tmpcf92z8vl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fbf043c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fbed3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fbed3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fbed397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcf92z8vl                        0x000055c16af8a933 <unavailable> + 6451

    5    libc.so.6                          0x00002b7fbf22f460 __libc_start_main +
    245

    6    tmpcf92z8vl                        0x000055c16af8a359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var result =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            result\
    \ = word\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpbd6dzygc.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_unique_characters\
    \ = 0\n    for word in words {\n        let unique_characters = Set(word.characters)\n\
    \        if unique_characters.count > max_unique_characters {\n            max_unique_characters\
    \ = unique_characters.count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmp8q1gy52u.swift:13:42: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_characters = Set(word.characters)\n\
    \                                         ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var maxWord = \"\"\n    var maxCount\
    \ = 0\n    for word in words {\n        let uniqueChars = Set(word)\n        if\
    \ uniqueChars.count > maxCount {\n            maxCount = uniqueChars.count\n \
    \           maxWord = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpt6nfkvxo/tmpt6nfkvxo.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19ddea7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19ddb9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19ddb9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19ddb9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt6nfkvxo                        0x0000560dcb386933 <unavailable> + 6451

    5    libc.so.6                          0x00002b19de093460 __libc_start_main +
    245

    6    tmpt6nfkvxo                        0x0000560dcb386359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var maxWord = \"\"\n    var maxCount\
    \ = 0\n    for word in words {\n        let count = Set(word).count\n        if\
    \ count > maxCount {\n            maxCount = count\n            maxWord = word\n\
    \        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp741uv3ud/tmp741uv3ud.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbbb1d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbbaeceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbbaece988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbbaecd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp741uv3ud                        0x00005571eda0d933 <unavailable> + 6451

    5    libc.so.6                          0x00002adbbb3c3460 __libc_start_main +
    245

    6    tmp741uv3ud                        0x00005571eda0d359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var max_word\
    \ = \"\"\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max {\n            max = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpbntuzl0v.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var max_word\
    \ = \"\"\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max {\n            max = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpbntuzl0v.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var max_word\
    \ = \"\"\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max {\n            max = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpbntuzl0v.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let count = Set(word).count\n        if\
    \ count > max_count {\n            max_count = count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpeboznv6v/tmpeboznv6v.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c7a000c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c79cf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c79cf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c79cf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeboznv6v                        0x000056304cee6933 <unavailable> + 6451

    5    libc.so.6                          0x00002b2c7a1ec460 __libc_start_main +
    245

    6    tmpeboznv6v                        0x000056304cee6359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpjscffry9.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpjscffry9.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word)\n       \
    \ if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp929bu4n5/tmp929bu4n5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bd7468c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bd715fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bd715f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bd715e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp929bu4n5                        0x0000560b2cad5933 <unavailable> + 6451

    5    libc.so.6                          0x00002b6bd7654460 __libc_start_main +
    245

    6    tmp929bu4n5                        0x0000560b2cad5359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var max_word\
    \ = \"\"\n    for word in words {\n        let unique = Set(word.characters)\n\
    \        if unique.count > max {\n            max = unique.count\n           \
    \ max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpniw0owsz.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max_count {\n            max_count = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpjscffry9.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_unique_chars\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max_unique_chars {\n            max_unique_chars\
    \ = unique_chars.count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmpcdnh32c1.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_unique_chars\
    \ = 0\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max_unique_chars {\n            max_unique_chars\
    \ = unique_chars.count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmpcdnh32c1.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let set = Set(word)\n        if set.count\
    \ > max {\n            max = set.count\n            maxWord = word\n        }\n\
    \    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpcf92z8vl/tmpcf92z8vl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fbf043c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fbed3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fbed3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fbed397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcf92z8vl                        0x000055c16af8a933 <unavailable> + 6451

    5    libc.so.6                          0x00002b7fbf22f460 __libc_start_main +
    245

    6    tmpcf92z8vl                        0x000055c16af8a359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word)\n        if unique.count\
    \ > max {\n            max = unique.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpx46huh1h/tmpx46huh1h.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc85ce2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc859d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc859d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc859d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx46huh1h                        0x000055a4221a0933 <unavailable> + 6451

    5    libc.so.6                          0x00002abc85ece460 __libc_start_main +
    245

    6    tmpx46huh1h                        0x000055a4221a0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max_word = \"\"\n    var max_count\
    \ = 0\n    for word in words {\n        let set = Set(word)\n        if set.count\
    \ > max_count {\n            max_count = set.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmps8xda6hu/tmps8xda6hu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd141dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd1114b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd1114988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd11137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps8xda6hu                        0x0000557509889933 <unavailable> + 6451

    5    libc.so.6                          0x00002aadd1609460 __libc_start_main +
    245

    6    tmps8xda6hu                        0x0000557509889359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var max_word\
    \ = \"\"\n    for word in words {\n        let unique_chars = Set(word.characters)\n\
    \        if unique_chars.count > max {\n            max = unique_chars.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpbntuzl0v.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let uniqueChars = Set(word)\n       \
    \ if uniqueChars.count > max {\n            max = uniqueChars.count\n        \
    \    maxWord = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpif7qrzrf/tmpif7qrzrf.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1106394c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b110608bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b110608b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b110608a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif7qrzrf                        0x000055900bbf1933 <unavailable> + 6451

    5    libc.so.6                          0x00002b1106580460 __libc_start_main +
    245

    6    tmpif7qrzrf                        0x000055900bbf1359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    func find_max(words: [String]) -> String {\n    var max = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        let unique = Set(word.characters)\n \
    \       if unique.count > max {\n            max = unique.count\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo4c11usn.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013314
