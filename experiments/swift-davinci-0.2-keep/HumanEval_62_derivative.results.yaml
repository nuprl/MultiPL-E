language: swift
name: HumanEval_62_derivative
results:
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for (index, value) in xs.enumerated() {\n        if index == 0\
    \ {\n            continue\n        }\n        result.append(value * index)\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 0..<xs.count - 1 {\n        result.append(xs[i] * (xs.count\
    \ - i - 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpax64toeu/tmpax64toeu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2203dfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2203af3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2203af3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2203af27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpax64toeu                        0x000055c0600a46cc <unavailable> + 5836

    5    libc.so.6                          0x00002b2203fe8460 __libc_start_main +
    245

    6    tmpax64toeu                        0x000055c0600a42b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in 0..<xs.count - 1 {\n        result.append(xs[i] * (xs.count\
    \ - i - 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpw1pkh8m7/tmpw1pkh8m7.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10a8aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10a87a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10a87a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10a87a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw1pkh8m7                        0x000055f3243a166c <unavailable> + 5740

    5    libc.so.6                          0x00002b10a8c97460 __libc_start_main +
    245

    6    tmpw1pkh8m7                        0x000055f3243a1259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in 0..<xs.count - 1 {\n        result.append(xs[i] * (xs.count\
    \ - i - 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpw1pkh8m7/tmpw1pkh8m7.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10a8aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10a87a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10a87a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10a87a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw1pkh8m7                        0x000055f3243a166c <unavailable> + 5740

    5    libc.so.6                          0x00002b10a8c97460 __libc_start_main +
    245

    6    tmpw1pkh8m7                        0x000055f3243a1259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for (index, x) in xs.enumerated() {\n        if index == 0 {\n\
    \            continue\n        }\n        result.append(index * x)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 0..<xs.count - 1 {\n        result.append(xs[i] * (xs.count\
    \ - i - 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpax64toeu/tmpax64toeu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2203dfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2203af3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2203af3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2203af27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpax64toeu                        0x000055c0600a46cc <unavailable> + 5836

    5    libc.so.6                          0x00002b2203fe8460 __libc_start_main +
    245

    6    tmpax64toeu                        0x000055c0600a42b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var i = 1\n    while i < xs.count {\n        result.append(xs[i] *\
    \ i)\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in 0..<xs.count - 1 {\n        result.append(xs[i + 1] * (i\
    \ + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var xs = xs\n\
    \    xs.removeFirst()\n    for i in 0..<xs.count {\n        xs[i] *= i + 1\n \
    \   }\n    return xs\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 0..<xs.count - 1 {\n        result.append(xs[i] * (xs.count\
    \ - i - 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpax64toeu/tmpax64toeu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2203dfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2203af3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2203af3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2203af27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpax64toeu                        0x000055c0600a46cc <unavailable> + 5836

    5    libc.so.6                          0x00002b2203fe8460 __libc_start_main +
    245

    6    tmpax64toeu                        0x000055c0600a42b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 0..<xs.count - 1 {\n        result.append(xs[i] * (xs.count\
    \ - i - 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpax64toeu/tmpax64toeu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2203dfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2203af3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2203af3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2203af27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpax64toeu                        0x000055c0600a46cc <unavailable> + 5836

    5    libc.so.6                          0x00002b2203fe8460 __libc_start_main +
    245

    6    tmpax64toeu                        0x000055c0600a42b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var res = [Int]()\n\
    \    for i in 1..<xs.count {\n        res.append(xs[i] * i)\n    }\n    return\
    \ res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3, 1, 2,\
    \ 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs:\
    \ [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result =\
    \ [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824690
