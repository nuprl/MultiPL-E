language: swift
name: HumanEval_122_add_elements
results:
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    var count = 0\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > 99 {\n            continue\n        }\n        sum += arr[i]\n        count\
    \ += 1\n        if count == k {\n            break\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpo3mbmk7x/tmpo3mbmk7x.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d9635ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d96055b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d96055988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d960547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3mbmk7x                        0x00005624bce2565d <unavailable> + 5725

    5    libc.so.6                          0x00002b1d9654a460 __libc_start_main +
    245

    6    tmpo3mbmk7x                        0x00005624bce251a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        let num = arr[i]\n        if num\
    \ < 10 {\n            sum += num\n        } else if num < 100 {\n            sum\
    \ += num / 10 + num % 10\n        } else {\n            sum += num / 100 + (num\
    \ % 100) / 10 + num % 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpqt9hvxqi/tmpqt9hvxqi.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec8ac98c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec8a98fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec8a98f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec8a98e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqt9hvxqi                        0x00005559dc95f5fd <unavailable> + 5629

    5    libc.so.6                          0x00002aec8ae84460 __libc_start_main +
    245

    6    tmpqt9hvxqi                        0x00005559dc95f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        let num = arr[i]\n        if num\
    \ < 10 {\n            sum += num\n        } else if num < 100 {\n            sum\
    \ += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        let num = arr[i]\n        if num\
    \ < 10 {\n            sum += num\n        } else if num < 100 {\n            sum\
    \ += num % 10 + num / 10\n        } else {\n            sum += num % 10 + num\
    \ / 10 % 10 + num / 100\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpxyde8gqm/tmpxyde8gqm.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36618a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3661597b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3661597988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36615967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxyde8gqm                        0x00005562911805fd <unavailable> + 5629

    5    libc.so.6                          0x00002b3661a8c460 __libc_start_main +
    245

    6    tmpxyde8gqm                        0x0000556291180149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        let num = arr[i]\n        if num\
    \ < 10 {\n            sum += num\n        } else if num < 100 {\n            sum\
    \ += num / 10 + num % 10\n        } else {\n            sum += num / 100 + (num\
    \ % 100) / 10 + num % 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpqt9hvxqi/tmpqt9hvxqi.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec8ac98c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec8a98fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec8a98f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec8a98e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqt9hvxqi                        0x00005559dc95f5fd <unavailable> + 5629

    5    libc.so.6                          0x00002aec8ae84460 __libc_start_main +
    245

    6    tmpqt9hvxqi                        0x00005559dc95f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var result = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n         \
    \   result += arr[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        let num = arr[i]\n        if num\
    \ < 10 {\n            sum += num\n        } else if num < 100 {\n            sum\
    \ += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        let num = arr[i]\n        if num\
    \ < 10 {\n            sum += num\n        } else if num < 100 {\n            sum\
    \ += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    var i = 0\n    while i < k {\n        if arr[i] < 100 {\n\
    \            sum += arr[i]\n        }\n        i += 1\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        let num = arr[i]\n        if num\
    \ < 10 {\n            sum += num\n        } else if num < 100 {\n            sum\
    \ += num / 10 + num % 10\n        } else {\n            sum += 1\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp5isqutrh/tmp5isqutrh.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2667536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b266722db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b266722d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b266722c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5isqutrh                        0x0000564b71cf55fd <unavailable> + 5629

    5    libc.so.6                          0x00002b2667722460 __libc_start_main +
    245

    6    tmp5isqutrh                        0x0000564b71cf5149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        let num = arr[i]\n        if num\
    \ < 10 {\n            sum += num\n        } else if num < 100 {\n            sum\
    \ += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        let num = arr[i]\n        if num\
    \ < 10 {\n            sum += num\n        } else if num < 100 {\n            sum\
    \ += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        let num = arr[i]\n        if num\
    \ < 10 {\n            sum += num\n        } else if num < 100 {\n            sum\
    \ += num / 10 + num % 10\n        } else {\n            sum += 3\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmptb8u9qdk/tmptb8u9qdk.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade949a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade94698b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade94698988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade946977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptb8u9qdk                        0x0000556b05f4c5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ade94b8d460 __libc_start_main +
    245

    6    tmptb8u9qdk                        0x0000556b05f4c149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] > 99 {\n            sum\
    \ += arr[i] % 100\n        } else {\n            sum += arr[i]\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp6ui5jowg/tmp6ui5jowg.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42e54cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42e51c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42e51c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42e51c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ui5jowg                        0x00005620a7f925fd <unavailable> + 5629

    5    libc.so.6                          0x00002b42e56b6460 __libc_start_main +
    245

    6    tmp6ui5jowg                        0x00005620a7f92149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        let num = arr[i]\n        if num\
    \ < 10 {\n            sum += num\n        } else if num < 100 {\n            sum\
    \ += num / 10 + num % 10\n        } else {\n            sum += 1\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp5isqutrh/tmp5isqutrh.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2667536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b266722db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b266722d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b266722c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5isqutrh                        0x0000564b71cf55fd <unavailable> + 5629

    5    libc.so.6                          0x00002b2667722460 __libc_start_main +
    245

    6    tmp5isqutrh                        0x0000564b71cf5149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        let num = arr[i]\n        if num\
    \ < 10 {\n            sum += num\n        } else if num < 100 {\n            sum\
    \ += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        let num = arr[i]\n        if num\
    \ < 10 {\n            sum += num\n        } else if num < 100 {\n            sum\
    \ += num % 10 + num / 10\n        } else {\n            sum += num % 10 + num\
    \ / 10 % 10 + num / 100\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpxyde8gqm/tmpxyde8gqm.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36618a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3661597b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3661597988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36615967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxyde8gqm                        0x00005562911805fd <unavailable> + 5629

    5    libc.so.6                          0x00002b3661a8c460 __libc_start_main +
    245

    6    tmpxyde8gqm                        0x0000556291180149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var result = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n         \
    \   result += arr[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        let num = arr[i]\n        if num\
    \ < 10 {\n            sum += num\n        } else if num < 100 {\n            sum\
    \ += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  let arr = arr.filter { $0 < 100 }\n    return arr.prefix(k).reduce(0, +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpymp6k61p/tmpymp6k61p.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7bd777bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7bd7472b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7bd7472988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7bd74717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpymp6k61p                        0x000055f2eec0968d <unavailable> + 5773

    5    libc.so.6                          0x00002b7bd7967460 __libc_start_main +
    245

    6    tmpymp6k61p                        0x000055f2eec091d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        let n = arr[i]\n        if n < 10\
    \ {\n            sum += n\n        } else if n < 100 {\n            sum += n %\
    \ 10 + n / 10\n        } else {\n            sum += n % 10 + n / 10 % 10 + n /\
    \ 100\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpwcbjaxm1/tmpwcbjaxm1.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35f5c76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35f596db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35f596d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35f596c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcbjaxm1                        0x000055ce2acc75fd <unavailable> + 5629

    5    libc.so.6                          0x00002b35f5e62460 __libc_start_main +
    245

    6    tmpwcbjaxm1                        0x000055ce2acc7149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    var count = 0\n    for i in 0..<arr.count {\n        if arr[i]\
    \ < 100 {\n            sum += arr[i]\n            count += 1\n        }\n    \
    \    if count == k {\n            break\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpsv4v5hu8/tmpsv4v5hu8.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba61e53ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba61e235b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba61e235988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba61e2347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsv4v5hu8                        0x000055ba16a6c65d <unavailable> + 5725

    5    libc.so.6                          0x00002ba61e72a460 __libc_start_main +
    245

    6    tmpsv4v5hu8                        0x000055ba16a6c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        let num = arr[i]\n        if num\
    \ < 10 {\n            sum += num\n        } else if num < 100 {\n            sum\
    \ += num / 10 + num % 10\n        } else {\n            sum += num / 100 + (num\
    \ % 100) / 10 + num % 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpqt9hvxqi/tmpqt9hvxqi.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec8ac98c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec8a98fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec8a98f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec8a98e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqt9hvxqi                        0x00005559dc95f5fd <unavailable> + 5629

    5    libc.so.6                          0x00002aec8ae84460 __libc_start_main +
    245

    6    tmpqt9hvxqi                        0x00005559dc95f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    var i = 0\n    while i < k {\n        if arr[i] < 100 {\n\
    \            sum += arr[i]\n        }\n        i += 1\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        let num = arr[i]\n        if num\
    \ < 10 {\n            sum += num\n        } else if num < 100 {\n            sum\
    \ += num / 10 + num % 10\n        } else {\n            sum += num / 100 + (num\
    \ % 100) / 10 + num % 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpqt9hvxqi/tmpqt9hvxqi.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec8ac98c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec8a98fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec8a98f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec8a98e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqt9hvxqi                        0x00005559dc95f5fd <unavailable> + 5629

    5    libc.so.6                          0x00002aec8ae84460 __libc_start_main +
    245

    6    tmpqt9hvxqi                        0x00005559dc95f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] >= 10 && arr[i] < 100\
    \ {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpaftoyvey/tmpaftoyvey.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad343fb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad343cadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad343cad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad343cac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaftoyvey                        0x00005590f72ed51b <unavailable> + 5403

    5    libc.so.6                          0x00002ad3441a2460 __libc_start_main +
    245

    6    tmpaftoyvey                        0x00005590f72ed149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    var i = 0\n    while i < arr.count && k > 0 {\n        if\
    \ arr[i] < 100 {\n            sum += arr[i]\n            k -= 1\n        }\n \
    \       i += 1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpsffyy5v1.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'k' is a 'let' constant\n            k -= 1\n            ~ ^\n"
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824590
