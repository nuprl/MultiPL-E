language: swift
name: HumanEval_159_eat
results:
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total > need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmprtilynie/tmprtilynie.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5380f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af537dedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af537ded988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af537dec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprtilynie                        0x0000562c0a448384 <unavailable> + 4996

    5    libc.so.6                          0x00002af5382e2460 __libc_start_main +
    245

    6    tmprtilynie                        0x0000562c0a447fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total > need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmprtilynie/tmprtilynie.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5380f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af537dedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af537ded988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af537dec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprtilynie                        0x0000562c0a448384 <unavailable> + 4996

    5    libc.so.6                          0x00002af5382e2460 __libc_start_main +
    245

    6    tmprtilynie                        0x0000562c0a447fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + need\n    let left = total\
    \ - remaining\n    return left > 0 ? [total, 0] : [total, remaining - total]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpii6_z9ov/tmpii6_z9ov.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7033949c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7033640b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7033640988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b703363f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpii6_z9ov                        0x0000558e32c1f384 <unavailable> + 4996

    5    libc.so.6                          0x00002b7033b35460 __libc_start_main +
    245

    6    tmpii6_z9ov                        0x0000558e32c1efc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let eaten = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [eaten, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + need\n    return total\
    \ > remaining ? [remaining, 0] : [total, remaining - total]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpt4jtg2k2/tmpt4jtg2k2.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b498d090c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b498cd87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b498cd87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b498cd867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt4jtg2k2                        0x00005610fac00384 <unavailable> + 4996

    5    libc.so.6                          0x00002b498d27c460 __libc_start_main +
    245

    6    tmpt4jtg2k2                        0x00005610fabfffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + need\n    let left = total\
    \ - remaining\n    return left > 0 ? [total, 0] : [total, remaining - total]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpii6_z9ov/tmpii6_z9ov.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7033949c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7033640b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7033640988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b703363f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpii6_z9ov                        0x0000558e32c1f384 <unavailable> + 4996

    5    libc.so.6                          0x00002b7033b35460 __libc_start_main +
    245

    6    tmpii6_z9ov                        0x0000558e32c1efc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    if total\
    \ >= need {\n        return [need, total - need]\n    } else {\n        return\
    \ [total, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpadm_1q_z/tmpadm_1q_z.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1895c14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b189590bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b189590b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b189590a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpadm_1q_z                        0x000056176404c384 <unavailable> + 4996

    5    libc.so.6                          0x00002b1895e00460 __libc_start_main +
    245

    6    tmpadm_1q_z                        0x000056176404bfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    return [min(number + remaining, need), max(0,\
    \ number + remaining - need)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: Exception
  stderr: 'tmpq1z84g3r/tmpq1z84g3r.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70f6847c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70f653eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70f653e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70f653d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq1z84g3r                        0x00005570d7d6f474 <unavailable> + 5236

    5    libc.so.6                          0x00002b70f6a33460 __libc_start_main +
    245

    6    tmpq1z84g3r                        0x00005570d7d6f0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total > need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmprtilynie/tmprtilynie.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5380f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af537dedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af537ded988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af537dec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprtilynie                        0x0000562c0a448384 <unavailable> + 4996

    5    libc.so.6                          0x00002af5382e2460 __libc_start_main +
    245

    6    tmprtilynie                        0x0000562c0a447fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    if number + remaining >= need {\n        return\
    \ [need, number + remaining - need]\n    } else {\n        return [number + remaining,\
    \ 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpq77zrks1/tmpq77zrks1.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d24bacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d248a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d248a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d248a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq77zrks1                        0x000055ae4939e384 <unavailable> + 4996

    5    libc.so.6                          0x00002b8d24d98460 __libc_start_main +
    245

    6    tmpq77zrks1                        0x000055ae4939dfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    if total\
    \ < need {\n        return [total, 0]\n    }\n    return [need, total - need]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp4224kf0h/tmp4224kf0h.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af344738c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af34442fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af34442f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af34442e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4224kf0h                        0x000056170d16a384 <unavailable> + 4996

    5    libc.so.6                          0x00002af344924460 __libc_start_main +
    245

    6    tmp4224kf0h                        0x000056170d169fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total < need ? total : need\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpf9kcyrbc/tmpf9kcyrbc.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3488894c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b348858bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b348858b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b348858a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf9kcyrbc                        0x00005620361db384 <unavailable> + 4996

    5    libc.so.6                          0x00002b3488a80460 __libc_start_main +
    245

    6    tmpf9kcyrbc                        0x00005620361dafc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total < need ? total : need\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpf9kcyrbc/tmpf9kcyrbc.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3488894c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b348858bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b348858b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b348858a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf9kcyrbc                        0x00005620361db384 <unavailable> + 4996

    5    libc.so.6                          0x00002b3488a80460 __libc_start_main +
    245

    6    tmpf9kcyrbc                        0x00005620361dafc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    var result = [Int]()\n    var total = number\
    \ + remaining\n    if total >= need {\n        result.append(need)\n        result.append(total\
    \ - need)\n    } else {\n        result.append(total)\n        result.append(0)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: Exception
  stderr: 'tmphrpfma_k/tmphrpfma_k.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76f261cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76f2313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76f2313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76f23127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphrpfma_k                        0x0000561a6da42444 <unavailable> + 5188

    5    libc.so.6                          0x00002b76f2808460 __libc_start_main +
    245

    6    tmphrpfma_k                        0x0000561a6da42089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let eaten = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [eaten, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + need\n    let left = total\
    \ > remaining ? 0 : remaining - total\n    return [total, left]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpdg8bl96m/tmpdg8bl96m.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf48e91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf48b88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf48b88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf48b877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdg8bl96m                        0x00005557834b8384 <unavailable> + 4996

    5    libc.so.6                          0x00002aaf4907d460 __libc_start_main +
    245

    6    tmpdg8bl96m                        0x00005557834b7fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    return [number + min(need, remaining), max(0,\
    \ remaining - need)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    var total = number + remaining\n    if total\
    \ >= need {\n        total = need\n    }\n    return [total, remaining - (total\
    \ - number)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp9tni08_5/tmp9tni08_5.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b38054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b37d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b37d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b37d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9tni08_5                        0x00005651ae387384 <unavailable> + 4996

    5    libc.so.6                          0x00002b6b38240460 __libc_start_main +
    245

    6    tmp9tni08_5                        0x00005651ae386fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total > need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmprtilynie/tmprtilynie.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5380f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af537dedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af537ded988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af537dec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprtilynie                        0x0000562c0a448384 <unavailable> + 4996

    5    libc.so.6                          0x00002af5382e2460 __libc_start_main +
    245

    6    tmprtilynie                        0x0000562c0a447fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total > need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmprtilynie/tmprtilynie.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5380f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af537dedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af537ded988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af537dec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprtilynie                        0x0000562c0a448384 <unavailable> + 4996

    5    libc.so.6                          0x00002af5382e2460 __libc_start_main +
    245

    6    tmprtilynie                        0x0000562c0a447fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total > need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmprtilynie/tmprtilynie.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5380f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af537dedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af537ded988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af537dec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprtilynie                        0x0000562c0a448384 <unavailable> + 4996

    5    libc.so.6                          0x00002af5382e2460 __libc_start_main +
    245

    6    tmprtilynie                        0x0000562c0a447fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    var result = [Int]()\n    if number >= 0 &&\
    \ number <= 1000 && need >= 0 && need <= 1000 && remaining >= 0 && remaining <=\
    \ 1000 {\n        if remaining >= need {\n            result.append(number + need)\n\
    \            result.append(remaining - need)\n        } else {\n            result.append(number\
    \ + remaining)\n            result.append(0)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    var total = number + remaining\n    if total\
    \ >= need {\n        total = need\n    }\n    return [total, remaining - (total\
    \ - number)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp9tni08_5/tmp9tni08_5.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b38054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b37d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b37d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b37d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9tni08_5                        0x00005651ae387384 <unavailable> + 4996

    5    libc.so.6                          0x00002b6b38240460 __libc_start_main +
    245

    6    tmp9tni08_5                        0x00005651ae386fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let left = remaining - need\n    return left\
    \ >= 0 ? [number + need, left] : [number + remaining, 0]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    return [number + min(need, remaining), max(0,\
    \ remaining - need)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total > need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmprtilynie/tmprtilynie.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5380f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af537dedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af537ded988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af537dec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprtilynie                        0x0000562c0a448384 <unavailable> + 4996

    5    libc.so.6                          0x00002af5382e2460 __libc_start_main +
    245

    6    tmprtilynie                        0x0000562c0a447fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let eaten = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [eaten, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total > need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmprtilynie/tmprtilynie.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5380f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af537dedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af537ded988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af537dec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprtilynie                        0x0000562c0a448384 <unavailable> + 4996

    5    libc.so.6                          0x00002af5382e2460 __libc_start_main +
    245

    6    tmprtilynie                        0x0000562c0a447fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let eaten = number + need\n    let left = remaining\
    \ - need\n    return [eaten, left < 0 ? 0 : left]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpjrxnas13/tmpjrxnas13.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabf846cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabf8163b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabf8163988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabf81627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjrxnas13                        0x0000563455d10658 <unavailable> + 5720

    5    libc.so.6                          0x00002aabf8658460 __libc_start_main +
    245

    6    tmpjrxnas13                        0x0000563455d0ffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + need\n    return [total,\
    \ total > remaining ? 0 : remaining - total]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpdas01myw/tmpdas01myw.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad352b82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad352879b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad352879988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3528787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdas01myw                        0x000056237ca41384 <unavailable> + 4996

    5    libc.so.6                          0x00002ad352d6e460 __libc_start_main +
    245

    6    tmpdas01myw                        0x000056237ca40fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    if number + remaining < need {\n        return\
    \ [number + remaining, 0]\n    } else {\n        return [need, number + remaining\
    \ - need]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp2oam5dat/tmp2oam5dat.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1facbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1fa9b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1fa9b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1fa9b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2oam5dat                        0x0000561765900384 <unavailable> + 4996

    5    libc.so.6                          0x00002ac1faea7460 __libc_start_main +
    245

    6    tmp2oam5dat                        0x00005617658fffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    return [number + min(need, remaining), max(0,\
    \ remaining - need)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let eaten = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [eaten, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    var total = number + need\n    if total > remaining\
    \ {\n        total = remaining\n    }\n    return [total, remaining - total]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp94ua9715/tmp94ua9715.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83a1ea2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83a1b99b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83a1b99988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83a1b987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp94ua9715                        0x000055951b3ba384 <unavailable> + 4996

    5    libc.so.6                          0x00002b83a208e460 __libc_start_main +
    245

    6    tmp94ua9715                        0x000055951b3b9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    return [number + min(need, remaining), max(0,\
    \ remaining - need)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    var total = number + remaining\n    if total\
    \ >= need {\n        total = need\n    }\n    return [total, remaining - (need\
    \ - total)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpc2m7z9tf/tmpc2m7z9tf.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3886a13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b388670ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b388670a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38867097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc2m7z9tf                        0x000055ec70aa1384 <unavailable> + 4996

    5    libc.so.6                          0x00002b3886bff460 __libc_start_main +
    245

    6    tmpc2m7z9tf                        0x000055ec70aa0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    return [number + min(need, remaining), max(0,\
    \ remaining - need)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total < need ? total : need\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpf9kcyrbc/tmpf9kcyrbc.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3488894c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b348858bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b348858b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b348858a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf9kcyrbc                        0x00005620361db384 <unavailable> + 4996

    5    libc.so.6                          0x00002b3488a80460 __libc_start_main +
    245

    6    tmpf9kcyrbc                        0x00005620361dafc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let eaten = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [eaten, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    return [number + min(need, remaining), max(0,\
    \ remaining - need)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total > need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmprtilynie/tmprtilynie.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5380f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af537dedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af537ded988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af537dec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprtilynie                        0x0000562c0a448384 <unavailable> + 4996

    5    libc.so.6                          0x00002af5382e2460 __libc_start_main +
    245

    6    tmprtilynie                        0x0000562c0a447fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    if number + remaining < need {\n        return\
    \ [number + remaining, 0]\n    } else {\n        return [need, number + remaining\
    \ - need]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp2oam5dat/tmp2oam5dat.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1facbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1fa9b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1fa9b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1fa9b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2oam5dat                        0x0000561765900384 <unavailable> + 4996

    5    libc.so.6                          0x00002ac1faea7460 __libc_start_main +
    245

    6    tmp2oam5dat                        0x00005617658fffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total > need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmprtilynie/tmprtilynie.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5380f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af537dedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af537ded988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af537dec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprtilynie                        0x0000562c0a448384 <unavailable> + 4996

    5    libc.so.6                          0x00002af5382e2460 __libc_start_main +
    245

    6    tmprtilynie                        0x0000562c0a447fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let eaten = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [eaten, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    var result = [Int]()\n    if remaining < need\
    \ {\n        result.append(number + remaining)\n        result.append(0)\n   \
    \ } else {\n        result.append(number + need)\n        result.append(remaining\
    \ - need)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    return [number + min(need, remaining), max(0,\
    \ remaining - need)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + need\n    let left = total\
    \ - remaining\n    return left > 0 ? [total, 0] : [total, remaining - total]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpii6_z9ov/tmpii6_z9ov.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7033949c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7033640b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7033640988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b703363f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpii6_z9ov                        0x0000558e32c1f384 <unavailable> + 4996

    5    libc.so.6                          0x00002b7033b35460 __libc_start_main +
    245

    6    tmpii6_z9ov                        0x0000558e32c1efc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    return [number + min(need, remaining), max(0,\
    \ remaining - need)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    return [number + min(need, remaining), max(0,\
    \ remaining - need)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    var total = number + remaining\n    if total\
    \ >= need {\n        total = need\n    }\n    return [total, remaining - (total\
    \ - number)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp9tni08_5/tmp9tni08_5.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b38054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b37d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b37d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b37d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9tni08_5                        0x00005651ae387384 <unavailable> + 4996

    5    libc.so.6                          0x00002b6b38240460 __libc_start_main +
    245

    6    tmp9tni08_5                        0x00005651ae386fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    return [number + min(need, remaining), max(0,\
    \ remaining - need)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + need\n    let left = total\
    \ - remaining\n    return left > 0 ? [total, 0] : [total, remaining - total]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpii6_z9ov/tmpii6_z9ov.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7033949c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7033640b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7033640988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b703363f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpii6_z9ov                        0x0000558e32c1f384 <unavailable> + 4996

    5    libc.so.6                          0x00002b7033b35460 __libc_start_main +
    245

    6    tmpii6_z9ov                        0x0000558e32c1efc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    var result = [Int]()\n    if number + need >\
    \ remaining {\n        result.append(remaining)\n        result.append(0)\n  \
    \  } else {\n        result.append(number + need)\n        result.append(remaining\
    \ - (number + need))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpyie3cxsg/tmpyie3cxsg.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b6a046c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b69d3db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b69d3d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b69d3c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyie3cxsg                        0x00005628979c5444 <unavailable> + 5188

    5    libc.so.6                          0x00002b9b6a232460 __libc_start_main +
    245

    6    tmpyie3cxsg                        0x00005628979c5089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013876
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + need\n    let left = total\
    \ > remaining ? 0 : remaining - total\n    return [total, left]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpdg8bl96m/tmpdg8bl96m.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf48e91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf48b88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf48b88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf48b877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdg8bl96m                        0x00005557834b8384 <unavailable> + 4996

    5    libc.so.6                          0x00002aaf4907d460 __libc_start_main +
    245

    6    tmpdg8bl96m                        0x00005557834b7fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total > need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmprtilynie/tmprtilynie.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5380f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af537dedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af537ded988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af537dec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprtilynie                        0x0000562c0a448384 <unavailable> + 4996

    5    libc.so.6                          0x00002af5382e2460 __libc_start_main +
    245

    6    tmprtilynie                        0x0000562c0a447fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + need\n    return [total,\
    \ total > remaining ? 0 : remaining - total]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpdas01myw/tmpdas01myw.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad352b82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad352879b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad352879988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3528787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdas01myw                        0x000056237ca41384 <unavailable> + 4996

    5    libc.so.6                          0x00002ad352d6e460 __libc_start_main +
    245

    6    tmpdas01myw                        0x000056237ca40fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let eaten = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [eaten, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let eaten = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [eaten, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + need\n    let left = total\
    \ - remaining\n    return left > 0 ? [total, 0] : [total, remaining - total]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpii6_z9ov/tmpii6_z9ov.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7033949c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7033640b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7033640988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b703363f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpii6_z9ov                        0x0000558e32c1f384 <unavailable> + 4996

    5    libc.so.6                          0x00002b7033b35460 __libc_start_main +
    245

    6    tmpii6_z9ov                        0x0000558e32c1efc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    return [min(number + remaining, need), max(remaining\
    \ - need + number, 0)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: Exception
  stderr: 'tmpfiwipbwo/tmpfiwipbwo.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b722ffa5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b722fc9cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b722fc9c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b722fc9b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfiwipbwo                        0x0000560689dd3474 <unavailable> + 5236

    5    libc.so.6                          0x00002b7230191460 __libc_start_main +
    245

    6    tmpfiwipbwo                        0x0000560689dd30b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013876
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total < need ? total : need\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpf9kcyrbc/tmpf9kcyrbc.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3488894c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b348858bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b348858b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b348858a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf9kcyrbc                        0x00005620361db384 <unavailable> + 4996

    5    libc.so.6                          0x00002b3488a80460 __libc_start_main +
    245

    6    tmpf9kcyrbc                        0x00005620361dafc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    return [number + min(need, remaining), max(0,\
    \ remaining - need)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    return [number + min(need, remaining), max(0,\
    \ remaining - need)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total > need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmprtilynie/tmprtilynie.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5380f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af537dedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af537ded988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af537dec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprtilynie                        0x0000562c0a448384 <unavailable> + 4996

    5    libc.so.6                          0x00002af5382e2460 __libc_start_main +
    245

    6    tmprtilynie                        0x0000562c0a447fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total > need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmprtilynie/tmprtilynie.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5380f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af537dedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af537ded988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af537dec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprtilynie                        0x0000562c0a448384 <unavailable> + 4996

    5    libc.so.6                          0x00002af5382e2460 __libc_start_main +
    245

    6    tmprtilynie                        0x0000562c0a447fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total > need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmprtilynie/tmprtilynie.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5380f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af537dedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af537ded988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af537dec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprtilynie                        0x0000562c0a448384 <unavailable> + 4996

    5    libc.so.6                          0x00002af5382e2460 __libc_start_main +
    245

    6    tmprtilynie                        0x0000562c0a447fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    return [total,\
    \ total < need ? 0 : total - need]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp0fp9rrs4/tmp0fp9rrs4.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f921adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f91ea4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f91ea4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f91ea37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0fp9rrs4                        0x00005616a9526384 <unavailable> + 4996

    5    libc.so.6                          0x00002b4f92399460 __libc_start_main +
    245

    6    tmp0fp9rrs4                        0x00005616a9525fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013876
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    return [number + min(need, remaining), max(0,\
    \ remaining - need)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let carrots = number + remaining\n    let eaten\
    \ = carrots >= need ? need : carrots\n    return [eaten, carrots - eaten]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpeqac_1fe/tmpeqac_1fe.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3901176c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3900e6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3900e6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3900e6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeqac_1fe                        0x00005640d6c01384 <unavailable> + 4996

    5    libc.so.6                          0x00002b3901362460 __libc_start_main +
    245

    6    tmpeqac_1fe                        0x00005640d6c00fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013876
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + need\n    let left = total\
    \ - remaining\n    return left > 0 ? [total, 0] : [total, remaining - total]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpii6_z9ov/tmpii6_z9ov.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7033949c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7033640b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7033640988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b703363f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpii6_z9ov                        0x0000558e32c1f384 <unavailable> + 4996

    5    libc.so.6                          0x00002b7033b35460 __libc_start_main +
    245

    6    tmpii6_z9ov                        0x0000558e32c1efc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    return [number + min(need, remaining), max(0,\
    \ remaining - need)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + need\n    let left = remaining\
    \ - need\n    return [total, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmptugcyv0g/tmptugcyv0g.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ce44a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ce4198b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ce4198988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ce41977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptugcyv0g                        0x0000561313f39658 <unavailable> + 5720

    5    libc.so.6                          0x00002b0ce468d460 __libc_start_main +
    245

    6    tmptugcyv0g                        0x0000561313f38fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013876
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = min(total, need)\n    let left = max(total - need, 0)\n    return [eaten,\
    \ left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6,\
    \ remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) ==\
    \ [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpvdvkje3i/tmpvdvkje3i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab01ef3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab01ec32b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab01ec32988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab01ec317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvdvkje3i                        0x000055853dae7474 <unavailable> + 5236

    5    libc.so.6                          0x00002ab01f127460 __libc_start_main +
    245

    6    tmpvdvkje3i                        0x000055853dae70b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013876
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + need\n    let left = total\
    \ - remaining\n    return left > 0 ? [total, 0] : [total, remaining - total]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpii6_z9ov/tmpii6_z9ov.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7033949c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7033640b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7033640988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b703363f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpii6_z9ov                        0x0000558e32c1f384 <unavailable> + 4996

    5    libc.so.6                          0x00002b7033b35460 __libc_start_main +
    245

    6    tmpii6_z9ov                        0x0000558e32c1efc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    if total\
    \ >= need {\n        return [need, total - need]\n    } else {\n        return\
    \ [total, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpadm_1q_z/tmpadm_1q_z.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1895c14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b189590bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b189590b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b189590a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpadm_1q_z                        0x000056176404c384 <unavailable> + 4996

    5    libc.so.6                          0x00002b1895e00460 __libc_start_main +
    245

    6    tmpadm_1q_z                        0x000056176404bfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    if total\
    \ < need {\n        return [total, 0]\n    }\n    return [need, total - need]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp4224kf0h/tmp4224kf0h.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af344738c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af34442fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af34442f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af34442e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4224kf0h                        0x000056170d16a384 <unavailable> + 4996

    5    libc.so.6                          0x00002af344924460 __libc_start_main +
    245

    6    tmp4224kf0h                        0x000056170d169fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    var total = number + remaining\n    var left\
    \ = 0\n    if total >= need {\n        total = need\n        left = total - need\n\
    \    }\n    return [total, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: Exception
  stderr: 'tmprkws3wpc/tmprkws3wpc.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70f8b31c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70f8828b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70f8828988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70f88277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprkws3wpc                        0x0000563a117b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002b70f8d1d460 __libc_start_main +
    245

    6    tmprkws3wpc                        0x0000563a117b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013876
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    return [number + min(need, remaining), max(0,\
    \ remaining - need)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    return [total,\
    \ total - need]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpwmnzzhwo/tmpwmnzzhwo.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42691cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4268ec5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4268ec5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4268ec47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwmnzzhwo                        0x000055f312f42384 <unavailable> + 4996

    5    libc.so.6                          0x00002b42693ba460 __libc_start_main +
    245

    6    tmpwmnzzhwo                        0x000055f312f41fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013876
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + need\n    let left = remaining\
    \ - need\n    return [total, left < 0 ? 0 : left]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmphz5ykkfr/tmphz5ykkfr.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fcec48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fce93fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fce93f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fce93e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphz5ykkfr                        0x0000561a1b305658 <unavailable> + 5720

    5    libc.so.6                          0x00002b0fcee34460 __libc_start_main +
    245

    6    tmphz5ykkfr                        0x0000561a1b304fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013876
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    if total\
    \ >= need {\n        return [need, total - need]\n    } else {\n        return\
    \ [total, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpadm_1q_z/tmpadm_1q_z.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1895c14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b189590bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b189590b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b189590a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpadm_1q_z                        0x000056176404c384 <unavailable> + 4996

    5    libc.so.6                          0x00002b1895e00460 __libc_start_main +
    245

    6    tmpadm_1q_z                        0x000056176404bfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    return [number + min(need, remaining), max(0,\
    \ remaining - need)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    var total = number + remaining\n    if total\
    \ >= need {\n        total = need\n    }\n    return [total, remaining - (total\
    \ - number)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp9tni08_5/tmp9tni08_5.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b38054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b37d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b37d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b37d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9tni08_5                        0x00005651ae387384 <unavailable> + 4996

    5    libc.so.6                          0x00002b6b38240460 __libc_start_main +
    245

    6    tmp9tni08_5                        0x00005651ae386fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = min(total, need)\n    let left = max(total - need, 0)\n    return [eaten,\
    \ left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6,\
    \ remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) ==\
    \ [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpvdvkje3i/tmpvdvkje3i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab01ef3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab01ec32b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab01ec32988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab01ec317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvdvkje3i                        0x000055853dae7474 <unavailable> + 5236

    5    libc.so.6                          0x00002ab01f127460 __libc_start_main +
    245

    6    tmpvdvkje3i                        0x000055853dae70b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013876
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let eaten = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [eaten, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + need\n    let left = total\
    \ - remaining\n    return left > 0 ? [total, 0] : [total, remaining - total]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpii6_z9ov/tmpii6_z9ov.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7033949c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7033640b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7033640988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b703363f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpii6_z9ov                        0x0000558e32c1f384 <unavailable> + 4996

    5    libc.so.6                          0x00002b7033b35460 __libc_start_main +
    245

    6    tmpii6_z9ov                        0x0000558e32c1efc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    var result = [Int]()\n    if number + need <=\
    \ remaining {\n        result.append(number + need)\n        result.append(remaining\
    \ - (number + need))\n    } else {\n        result.append(number + remaining)\n\
    \        result.append(0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpl7kubn01/tmpl7kubn01.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4aacccac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4aac9c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4aac9c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4aac9c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl7kubn01                        0x0000555e2b2f7444 <unavailable> + 5188

    5    libc.so.6                          0x00002b4aaceb6460 __libc_start_main +
    245

    6    tmpl7kubn01                        0x0000555e2b2f7089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013876
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + need\n    let left = total\
    \ - remaining\n    return left > 0 ? [total, 0] : [total, remaining - total]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpii6_z9ov/tmpii6_z9ov.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7033949c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7033640b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7033640988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b703363f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpii6_z9ov                        0x0000558e32c1f384 <unavailable> + 4996

    5    libc.so.6                          0x00002b7033b35460 __libc_start_main +
    245

    6    tmpii6_z9ov                        0x0000558e32c1efc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    var result = [Int]()\n    if number + need >\
    \ remaining {\n        result.append(remaining)\n        result.append(0)\n  \
    \  } else {\n        result.append(number + need)\n        result.append(remaining\
    \ - (number + need))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpyie3cxsg/tmpyie3cxsg.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b6a046c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b69d3db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b69d3d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b69d3c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyie3cxsg                        0x00005628979c5444 <unavailable> + 5188

    5    libc.so.6                          0x00002b9b6a232460 __libc_start_main +
    245

    6    tmpyie3cxsg                        0x00005628979c5089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013876
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + need\n    let left = total\
    \ - remaining\n    return left > 0 ? [total, 0] : [total, remaining - total]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpii6_z9ov/tmpii6_z9ov.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7033949c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7033640b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7033640988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b703363f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpii6_z9ov                        0x0000558e32c1f384 <unavailable> + 4996

    5    libc.so.6                          0x00002b7033b35460 __libc_start_main +
    245

    6    tmpii6_z9ov                        0x0000558e32c1efc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    var result = [Int]()\n    if remaining >= need\
    \ {\n        result.append(number + need)\n        result.append(remaining - need)\n\
    \    } else {\n        result.append(number + remaining)\n        result.append(0)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013876
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    var result = [Int]()\n    if number + need <=\
    \ remaining {\n        result.append(number + need)\n        result.append(remaining\
    \ - (number + need))\n    } else {\n        result.append(number + remaining)\n\
    \        result.append(0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpl7kubn01/tmpl7kubn01.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4aacccac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4aac9c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4aac9c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4aac9c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl7kubn01                        0x0000555e2b2f7444 <unavailable> + 5188

    5    libc.so.6                          0x00002b4aaceb6460 __libc_start_main +
    245

    6    tmpl7kubn01                        0x0000555e2b2f7089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013876
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let eaten = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [eaten, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    var total = number + remaining\n    if total\
    \ >= need {\n        total = need\n    }\n    return [total, remaining - (total\
    \ - number)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp9tni08_5/tmp9tni08_5.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b38054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b37d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b37d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b37d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9tni08_5                        0x00005651ae387384 <unavailable> + 4996

    5    libc.so.6                          0x00002b6b38240460 __libc_start_main +
    245

    6    tmp9tni08_5                        0x00005651ae386fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let eaten = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [eaten, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let eaten = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [eaten, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + need\n    let left = total\
    \ - remaining\n    return left > 0 ? [total, 0] : [total, remaining - total]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpii6_z9ov/tmpii6_z9ov.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7033949c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7033640b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7033640988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b703363f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpii6_z9ov                        0x0000558e32c1f384 <unavailable> + 4996

    5    libc.so.6                          0x00002b7033b35460 __libc_start_main +
    245

    6    tmpii6_z9ov                        0x0000558e32c1efc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total > need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmprtilynie/tmprtilynie.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5380f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af537dedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af537ded988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af537dec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprtilynie                        0x0000562c0a448384 <unavailable> + 4996

    5    libc.so.6                          0x00002af5382e2460 __libc_start_main +
    245

    6    tmprtilynie                        0x0000562c0a447fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total > need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmprtilynie/tmprtilynie.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5380f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af537dedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af537ded988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af537dec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprtilynie                        0x0000562c0a448384 <unavailable> + 4996

    5    libc.so.6                          0x00002af5382e2460 __libc_start_main +
    245

    6    tmprtilynie                        0x0000562c0a447fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    if number + remaining >= need {\n        return\
    \ [need, number + remaining - need]\n    } else {\n        return [number + remaining,\
    \ 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpq77zrks1/tmpq77zrks1.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d24bacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d248a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d248a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d248a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq77zrks1                        0x000055ae4939e384 <unavailable> + 4996

    5    libc.so.6                          0x00002b8d24d98460 __libc_start_main +
    245

    6    tmpq77zrks1                        0x000055ae4939dfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + need\n    let left = total\
    \ - remaining\n    return [total, left < 0 ? 0 : left]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp61q4j1gl/tmp61q4j1gl.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cd77cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cd74c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cd74c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cd74c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61q4j1gl                        0x000055a965066384 <unavailable> + 4996

    5    libc.so.6                          0x00002b4cd79ba460 __libc_start_main +
    245

    6    tmp61q4j1gl                        0x000055a965065fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013876
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total > need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmprtilynie/tmprtilynie.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5380f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af537dedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af537ded988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af537dec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprtilynie                        0x0000562c0a448384 <unavailable> + 4996

    5    libc.so.6                          0x00002af5382e2460 __libc_start_main +
    245

    6    tmprtilynie                        0x0000562c0a447fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + need\n    let left = total\
    \ - remaining\n    return left > 0 ? [total, 0] : [total, remaining - total]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpii6_z9ov/tmpii6_z9ov.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7033949c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7033640b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7033640988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b703363f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpii6_z9ov                        0x0000558e32c1f384 <unavailable> + 4996

    5    libc.so.6                          0x00002b7033b35460 __libc_start_main +
    245

    6    tmpii6_z9ov                        0x0000558e32c1efc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total < need ? total : need\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpf9kcyrbc/tmpf9kcyrbc.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3488894c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b348858bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b348858b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b348858a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf9kcyrbc                        0x00005620361db384 <unavailable> + 4996

    5    libc.so.6                          0x00002b3488a80460 __libc_start_main +
    245

    6    tmpf9kcyrbc                        0x00005620361dafc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + need\n    let left = total\
    \ - remaining\n    return left > 0 ? [total, 0] : [total, remaining - total]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpii6_z9ov/tmpii6_z9ov.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7033949c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7033640b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7033640988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b703363f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpii6_z9ov                        0x0000558e32c1f384 <unavailable> + 4996

    5    libc.so.6                          0x00002b7033b35460 __libc_start_main +
    245

    6    tmpii6_z9ov                        0x0000558e32c1efc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    var result: [Int] = []\n    if remaining < need\
    \ {\n        result.append(number + remaining)\n        result.append(0)\n   \
    \ } else {\n        result.append(number + need)\n        result.append(remaining\
    \ - need)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013876
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    return [number + min(need, remaining), max(0,\
    \ remaining - need)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    var total = number + need\n    if total > remaining\
    \ {\n        total = remaining\n    }\n    return [total, remaining - total]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp94ua9715/tmp94ua9715.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83a1ea2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83a1b99b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83a1b99988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83a1b987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp94ua9715                        0x000055951b3ba384 <unavailable> + 4996

    5    libc.so.6                          0x00002b83a208e460 __libc_start_main +
    245

    6    tmp94ua9715                        0x000055951b3b9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + need\n    let carrots =\
    \ total - remaining\n    return [carrots, remaining - carrots]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpri4izgkx/tmpri4izgkx.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab247836c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab24752db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab24752d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab24752c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpri4izgkx                        0x000055a36861b384 <unavailable> + 4996

    5    libc.so.6                          0x00002ab247a22460 __libc_start_main +
    245

    6    tmpri4izgkx                        0x000055a36861afc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013876
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    if number + remaining < need {\n        return\
    \ [number + remaining, 0]\n    } else {\n        return [need, number + remaining\
    \ - need]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp2oam5dat/tmp2oam5dat.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1facbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1fa9b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1fa9b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1fa9b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2oam5dat                        0x0000561765900384 <unavailable> + 4996

    5    libc.so.6                          0x00002ac1faea7460 __libc_start_main +
    245

    6    tmp2oam5dat                        0x00005617658fffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    return [number + min(need, remaining), max(0,\
    \ remaining - need)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    return [number + min(need, remaining), max(0,\
    \ remaining - need)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + need\n    let left = total\
    \ - remaining\n    return left > 0 ? [total, 0] : [total, remaining - total]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpii6_z9ov/tmpii6_z9ov.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7033949c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7033640b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7033640988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b703363f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpii6_z9ov                        0x0000558e32c1f384 <unavailable> + 4996

    5    libc.so.6                          0x00002b7033b35460 __libc_start_main +
    245

    6    tmpii6_z9ov                        0x0000558e32c1efc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    return [total,\
    \ total < need ? 0 : total - need]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp0fp9rrs4/tmp0fp9rrs4.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f921adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f91ea4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f91ea4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f91ea37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0fp9rrs4                        0x00005616a9526384 <unavailable> + 4996

    5    libc.so.6                          0x00002b4f92399460 __libc_start_main +
    245

    6    tmp0fp9rrs4                        0x00005616a9525fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013876
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total > need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmprtilynie/tmprtilynie.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5380f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af537dedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af537ded988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af537dec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprtilynie                        0x0000562c0a448384 <unavailable> + 4996

    5    libc.so.6                          0x00002af5382e2460 __libc_start_main +
    245

    6    tmprtilynie                        0x0000562c0a447fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    var result = [Int]()\n    if number + need <=\
    \ remaining {\n        result.append(number + need)\n        result.append(remaining\
    \ - (number + need))\n    } else {\n        result.append(number + remaining)\n\
    \        result.append(0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpl7kubn01/tmpl7kubn01.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4aacccac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4aac9c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4aac9c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4aac9c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl7kubn01                        0x0000555e2b2f7444 <unavailable> + 5188

    5    libc.so.6                          0x00002b4aaceb6460 __libc_start_main +
    245

    6    tmpl7kubn01                        0x0000555e2b2f7089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013876
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + need\n    let left = total\
    \ - remaining\n    return left > 0 ? [total, 0] : [total, remaining - total]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpii6_z9ov/tmpii6_z9ov.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7033949c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7033640b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7033640988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b703363f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpii6_z9ov                        0x0000558e32c1f384 <unavailable> + 4996

    5    libc.so.6                          0x00002b7033b35460 __libc_start_main +
    245

    6    tmpii6_z9ov                        0x0000558e32c1efc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + need\n    let left = remaining\
    \ - need\n    return [total, left < 0 ? 0 : left]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmphz5ykkfr/tmphz5ykkfr.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fcec48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fce93fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fce93f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fce93e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphz5ykkfr                        0x0000561a1b305658 <unavailable> + 5720

    5    libc.so.6                          0x00002b0fcee34460 __libc_start_main +
    245

    6    tmphz5ykkfr                        0x0000561a1b304fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013876
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    if total\
    \ >= need {\n        return [need, total - need]\n    } else {\n        return\
    \ [total, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpadm_1q_z/tmpadm_1q_z.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1895c14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b189590bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b189590b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b189590a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpadm_1q_z                        0x000056176404c384 <unavailable> + 4996

    5    libc.so.6                          0x00002b1895e00460 __libc_start_main +
    245

    6    tmpadm_1q_z                        0x000056176404bfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + need\n    let left = total\
    \ - remaining\n    return left > 0 ? [total, 0] : [total, remaining - total]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpii6_z9ov/tmpii6_z9ov.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7033949c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7033640b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7033640988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b703363f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpii6_z9ov                        0x0000558e32c1f384 <unavailable> + 4996

    5    libc.so.6                          0x00002b7033b35460 __libc_start_main +
    245

    6    tmpii6_z9ov                        0x0000558e32c1efc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total > need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmprtilynie/tmprtilynie.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5380f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af537dedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af537ded988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af537dec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprtilynie                        0x0000562c0a448384 <unavailable> + 4996

    5    libc.so.6                          0x00002af5382e2460 __libc_start_main +
    245

    6    tmprtilynie                        0x0000562c0a447fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    return [min(number + remaining, need), max(remaining\
    \ - need + number, 0)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: Exception
  stderr: 'tmpfiwipbwo/tmpfiwipbwo.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b722ffa5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b722fc9cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b722fc9c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b722fc9b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfiwipbwo                        0x0000560689dd3474 <unavailable> + 5236

    5    libc.so.6                          0x00002b7230191460 __libc_start_main +
    245

    6    tmpfiwipbwo                        0x0000560689dd30b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013876
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    return [number + min(need, remaining), max(0,\
    \ remaining - need)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total > need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmprtilynie/tmprtilynie.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5380f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af537dedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af537ded988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af537dec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprtilynie                        0x0000562c0a448384 <unavailable> + 4996

    5    libc.so.6                          0x00002af5382e2460 __libc_start_main +
    245

    6    tmprtilynie                        0x0000562c0a447fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + need\n    let left = total\
    \ - remaining\n    return left > 0 ? [total, 0] : [total, remaining - total]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpii6_z9ov/tmpii6_z9ov.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7033949c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7033640b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7033640988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b703363f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpii6_z9ov                        0x0000558e32c1f384 <unavailable> + 4996

    5    libc.so.6                          0x00002b7033b35460 __libc_start_main +
    245

    6    tmpii6_z9ov                        0x0000558e32c1efc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + min(need, remaining)\n\
    \    let remainingCarrots = max(0, remaining - need)\n    return [total, remainingCarrots]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013876
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int,\
    \ remaining: Int) -> [Int] {\n    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpn79bt4zz/tmpn79bt4zz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29b760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29b457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29b457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29b4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn79bt4zz                        0x00005564de8b1384 <unavailable> + 4996

    5    libc.so.6                          0x00002af29b94c460 __libc_start_main +
    245

    6    tmpn79bt4zz                        0x00005564de8b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013875
