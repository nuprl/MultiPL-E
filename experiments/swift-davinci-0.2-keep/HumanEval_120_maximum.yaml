name: HumanEval_120_maximum
language: swift
prompt: "\n/// Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n///\
  \ Input: arr = [-3, -4, 5], k = 3\n/// Output: [-4, -3, 5]\n/// Example 2:\n///\
  \ Input: arr = [4, -4, 4], k = 2\n/// Output: [4, 4]\n/// Example 3:\n/// Input:\
  \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n/// Output: [2]\n/// Note:\n/// 1. The\
  \ length of the array will be in the range of [1, 1000].\n/// 2. The elements in\
  \ the array will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\n\
  func maximum(arr: [Int], k: Int) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4,\
  \ -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr:\
  \ [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0,\
  \ 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3],\
  \ k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7)\
  \ == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
  \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
  \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
  assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
completions: ["    var result = [Int]()\n    var heap = Heap<Int>(sort: >)\n    for\
    \ i in 0..<arr.count {\n        heap.insert(arr[i])\n        if heap.count > k\
    \ {\n            heap.remove()\n        }\n    }\n    while !heap.isEmpty {\n\
    \        result.append(heap.remove()!)\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 0..<k {\n        var max = Int.min\n        var maxIndex\
    \ = -1\n        for j in i..<arr.count {\n            if arr[j] > max {\n    \
    \            max = arr[j]\n                maxIndex = j\n            }\n     \
    \   }\n        result.append(max)\n        arr.swapAt(i, maxIndex)\n    }\n  \
    \  return result", "    var result = [Int]()\n    for i in 0..<k {\n        result.append(arr[i])\n\
    \    }\n    result.sort()\n    for i in k..<arr.count {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            result.sort()\n        }\n  \
    \  }\n    return result", "    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result", "  \
    \  var result = [Int]()\n    var stack = [Int]()\n    for i in 0..<arr.count {\n\
    \        while !stack.isEmpty && stack.count + arr.count - i > k && arr[i] > stack.last!\
    \ {\n            stack.removeLast()\n        }\n        if stack.count < k {\n\
    \            stack.append(arr[i])\n        }\n    }\n    return stack", "    var\
    \ result = [Int]()\n    for i in 0..<k {\n        var max = Int.min\n        var\
    \ maxIndex = -1\n        for j in i..<arr.count {\n            if arr[j] > max\
    \ {\n                max = arr[j]\n                maxIndex = j\n            }\n\
    \        }\n        result.append(max)\n        arr.swapAt(i, maxIndex)\n    }\n\
    \    return result", "    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        if maxHeap.count < k {\n         \
    \   maxHeap.insert(arr[i])\n        } else if arr[i] > maxHeap.peek()! {\n   \
    \         maxHeap.pop()\n            maxHeap.insert(arr[i])\n        }\n    }\n\
    \    while !maxHeap.isEmpty {\n        result.append(maxHeap.pop()!)\n    }\n\
    \    return result", "    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        maxHeap.insert(arr[i])\n        if\
    \ maxHeap.count > k {\n            maxHeap.remove()\n        }\n    }\n    while\
    \ !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n    }\n    return\
    \ result", "    var result = [Int]()\n    for i in 0..<k {\n        var max =\
    \ Int.min\n        var maxIndex = -1\n        for j in i..<arr.count {\n     \
    \       if arr[j] > max {\n                max = arr[j]\n                maxIndex\
    \ = j\n            }\n        }\n        result.append(max)\n        if maxIndex\
    \ != i {\n            arr.swapAt(i, maxIndex)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n    for i in 0..<arr.count\
    \ {\n        if maxHeap.count < k {\n            maxHeap.insert(arr[i])\n    \
    \    } else if arr[i] > maxHeap.peek()! {\n            maxHeap.remove()\n    \
    \        maxHeap.insert(arr[i])\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result", "  \
    \  var result = [Int]()\n    for i in 0..<k {\n        result.append(arr[i])\n\
    \    }\n    result.sort()\n    for i in k..<arr.count {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            result.sort()\n        }\n  \
    \  }\n    return result", "    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result", "  \
    \  var result = [Int]()\n    var arr = arr\n    for _ in 0..<k {\n        var\
    \ max = Int.min\n        var index = 0\n        for i in 0..<arr.count {\n   \
    \         if arr[i] > max {\n                max = arr[i]\n                index\
    \ = i\n            }\n        }\n        result.append(max)\n        arr.remove(at:\
    \ index)\n    }\n    return result", "    var result = [Int]()\n    for i in 0..<k\
    \ {\n        var max = Int.min\n        var maxIndex = -1\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result", "    var result = [Int]()\n\
    \    var maxHeap = Heap<Int>(sort: >)\n    for num in arr {\n        maxHeap.insert(element:\
    \ num)\n        if maxHeap.count > k {\n            maxHeap.remove()\n       \
    \ }\n    }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    var arr = arr\n   \
    \ for _ in 0..<k {\n        var max = Int.min\n        var index = 0\n       \
    \ for i in 0..<arr.count {\n            if arr[i] > max {\n                max\
    \ = arr[i]\n                index = i\n            }\n        }\n        result.append(max)\n\
    \        arr.remove(at: index)\n    }\n    return result", "    var result = [Int]()\n\
    \    var index = 0\n    while index < k {\n        var max = Int.min\n       \
    \ var maxIndex = 0\n        for i in index..<arr.count {\n            if arr[i]\
    \ > max {\n                max = arr[i]\n                maxIndex = i\n      \
    \      }\n        }\n        result.append(max)\n        index = maxIndex + 1\n\
    \    }\n    return result", "    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result", "  \
    \  var result = [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n    for i in 0..<arr.count\
    \ {\n        if maxHeap.count < k {\n            maxHeap.insert(arr[i])\n    \
    \    } else if arr[i] > maxHeap.peek()! {\n            maxHeap.pop()\n       \
    \     maxHeap.insert(arr[i])\n        }\n    }\n    while !maxHeap.isEmpty {\n\
    \        result.append(maxHeap.pop()!)\n    }\n    return result", "    var result\
    \ = [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n    for num in arr {\n    \
    \    maxHeap.insert(element: num)\n        if maxHeap.count > k {\n          \
    \  maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    var heap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        heap.insert(element: num)\n        if heap.count\
    \ > k {\n            heap.remove()\n        }\n    }\n    while !heap.isEmpty\
    \ {\n        result.append(heap.remove()!)\n    }\n    return result", "    var\
    \ result = [Int]()\n    var minHeap = Heap<Int>(sort: <)\n    for i in 0..<arr.count\
    \ {\n        if minHeap.count < k {\n            minHeap.insert(arr[i])\n    \
    \    } else if arr[i] > minHeap.peek()! {\n            minHeap.remove()\n    \
    \        minHeap.insert(arr[i])\n        }\n    }\n    while !minHeap.isEmpty\
    \ {\n        result.append(minHeap.remove()!)\n    }\n    return result", "  \
    \  var result = [Int]()\n    for i in 0..<k {\n        result.append(arr[i])\n\
    \    }\n    result.sort()\n    for i in k..<arr.count {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            result.sort()\n        }\n  \
    \  }\n    return result", "    var result = [Int]()\n    var heap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        heap.insert(element: num)\n        if heap.count\
    \ > k {\n            heap.remove()\n        }\n    }\n    while !heap.isEmpty\
    \ {\n        result.append(heap.remove()!)\n    }\n    return result", "    var\
    \ result = [Int]()\n    var maxHeap = MaxHeap<Int>()\n    for i in 0..<arr.count\
    \ {\n        if maxHeap.count < k {\n            maxHeap.insert(arr[i])\n    \
    \    } else if arr[i] > maxHeap.peek()! {\n            maxHeap.remove()\n    \
    \        maxHeap.insert(arr[i])\n        }\n    }\n    while !maxHeap.isEmpty()\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result", "  \
    \  var result = [Int]()\n    var heap = Heap<Int>(sort: >)\n    for num in arr\
    \ {\n        heap.insert(element: num)\n        if heap.count > k {\n        \
    \    heap.remove()\n        }\n    }\n    while !heap.isEmpty {\n        result.append(heap.remove()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in 0..<k {\n\
    \        result.append(arr[i])\n    }\n    result.sort()\n    for i in k..<arr.count\
    \ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n       \
    \     result.sort()\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for i in 0..<k {\n        result.append(arr[i])\n    }\n    result.sort()\n\
    \    for i in k..<arr.count {\n        if arr[i] > result[0] {\n            result[0]\
    \ = arr[i]\n            result.sort()\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n    for num in\
    \ arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count > k {\n\
    \            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty {\n\
    \        result.append(maxHeap.remove()!)\n    }\n    return result", "    var\
    \ result = [Int]()\n    var minHeap = MinHeap()\n    for i in 0..<arr.count {\n\
    \        if minHeap.count < k {\n            minHeap.insert(value: arr[i])\n \
    \       } else if arr[i] > minHeap.peek()! {\n            minHeap.pop()\n    \
    \        minHeap.insert(value: arr[i])\n        }\n    }\n    while !minHeap.isEmpty()\
    \ {\n        result.append(minHeap.pop()!)\n    }\n    return result", "    var\
    \ result = [Int]()\n    var heap = Heap<Int>(sort: >)\n    for num in arr {\n\
    \        heap.insert(element: num)\n        if heap.count > k {\n            heap.remove()\n\
    \        }\n    }\n    while !heap.isEmpty {\n        result.append(heap.remove()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result", "  \
    \  var result = [Int]()\n    var temp = [Int]()\n    for i in 0..<arr.count {\n\
    \        while !temp.isEmpty && temp.count + arr.count - i > k && temp.last! <\
    \ arr[i] {\n            temp.removeLast()\n        }\n        if temp.count <\
    \ k {\n            temp.append(arr[i])\n        }\n    }\n    result = temp\n\
    \    return result", "    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result", "  \
    \  var result = [Int]()\n    for i in 0..<k {\n        result.append(arr[i])\n\
    \    }\n    result.sort()\n    for i in k..<arr.count {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            result.sort()\n        }\n  \
    \  }\n    return result", "    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result", "  \
    \  var result = [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n    for i in 0..<arr.count\
    \ {\n        maxHeap.insert(arr[i])\n        if maxHeap.count > k {\n        \
    \    maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty {\n      \
    \  result.append(maxHeap.remove()!)\n    }\n    return result", "    var result\
    \ = [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n    for i in 0..<arr.count\
    \ {\n        if maxHeap.count < k {\n            maxHeap.insert(arr[i])\n    \
    \    } else if arr[i] > maxHeap.peek()! {\n            maxHeap.remove()\n    \
    \        maxHeap.insert(arr[i])\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result", "  \
    \  var result = [Int]()\n    for i in 0..<k {\n        result.append(arr[i])\n\
    \    }\n    result.sort()\n    for i in k..<arr.count {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            result.sort()\n        }\n  \
    \  }\n    return result", "    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result", "  \
    \  var result = [Int]()\n    for i in 0..<k {\n        result.append(arr[i])\n\
    \    }\n    result.sort()\n    for i in k..<arr.count {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            result.sort()\n        }\n  \
    \  }\n    return result", "    var result = [Int]()\n    for i in 0..<k {\n  \
    \      var max = Int.min\n        var maxIndex = -1\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result", "    var result = [Int]()\n\
    \    var maxHeap = Heap<Int>(sort: >)\n    for num in arr {\n        maxHeap.insert(element:\
    \ num)\n        if maxHeap.count > k {\n            maxHeap.remove()\n       \
    \ }\n    }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var maxIndex = 0\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result", "    var result = [Int]()\n\
    \    for i in 0..<k {\n        var maxIndex = i\n        for j in i+1..<arr.count\
    \ {\n            if arr[j] > arr[maxIndex] {\n                maxIndex = j\n \
    \           }\n        }\n        result.append(arr[maxIndex])\n        swap(&arr,\
    \ i, maxIndex)\n    }\n    return result", "    var result = [Int]()\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n    for num in arr {\n        maxHeap.insert(element:\
    \ num)\n        if maxHeap.count > k {\n            maxHeap.remove()\n       \
    \ }\n    }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result", "  \
    \  var result = [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n    for num in\
    \ arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count > k {\n\
    \            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty {\n\
    \        result.append(maxHeap.remove()!)\n    }\n    return result", "    var\
    \ result = [Int]()\n    for i in 0..<k {\n        var max = Int.min\n        var\
    \ maxIndex = -1\n        for j in i..<arr.count {\n            if arr[j] > max\
    \ {\n                max = arr[j]\n                maxIndex = j\n            }\n\
    \        }\n        result.append(max)\n        arr.swapAt(i, maxIndex)\n    }\n\
    \    return result", "    var result = [Int]()\n    var maxHeap = PriorityQueue<Int>(ascending:\
    \ false)\n    for i in 0..<arr.count {\n        maxHeap.enqueue(arr[i])\n    \
    \    if maxHeap.count > k {\n            maxHeap.dequeue()\n        }\n    }\n\
    \    while !maxHeap.isEmpty {\n        result.append(maxHeap.dequeue()!)\n   \
    \ }\n    return result", "    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result", "  \
    \  var result = [Int]()\n    for i in 0..<k {\n        var maxIndex = i\n    \
    \    for j in i+1..<arr.count {\n            if arr[j] > arr[maxIndex] {\n   \
    \             maxIndex = j\n            }\n        }\n        result.append(arr[maxIndex])\n\
    \        arr.swapAt(i, maxIndex)\n    }\n    return result", "    var result =\
    \ [Int]()\n    var index = 0\n    while result.count < k {\n        var max =\
    \ Int.min\n        var maxIndex = 0\n        for i in index..<arr.count {\n  \
    \          if arr[i] > max {\n                max = arr[i]\n                maxIndex\
    \ = i\n            }\n        }\n        result.append(max)\n        index = maxIndex\
    \ + 1\n    }\n    return result", "    var result = [Int]()\n    var maxHeap =\
    \ Heap<Int>(sort: >)\n    for num in arr {\n        maxHeap.insert(element: num)\n\
    \        if maxHeap.count > k {\n            maxHeap.remove()\n        }\n   \
    \ }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in 0..<k {\n\
    \        result.append(arr[i])\n    }\n    result.sort()\n    for i in k..<arr.count\
    \ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n       \
    \     result.sort()\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for i in 0..<k {\n        var max = Int.min\n        var maxIndex = -1\n\
    \        for j in i..<arr.count {\n            if arr[j] > max {\n           \
    \     max = arr[j]\n                maxIndex = j\n            }\n        }\n \
    \       result.append(max)\n        arr.swapAt(i, maxIndex)\n    }\n    return\
    \ result", "    var result = [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n \
    \   for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result", "  \
    \  var result = [Int]()\n    var index = 0\n    while result.count < k {\n   \
    \     var max = Int.min\n        var maxIndex = 0\n        for i in index..<arr.count\
    \ {\n            if arr[i] > max {\n                max = arr[i]\n           \
    \     maxIndex = i\n            }\n        }\n        result.append(max)\n   \
    \     index = maxIndex + 1\n    }\n    return result", "    var result = [Int]()\n\
    \    var maxHeap = Heap<Int>(sort: >)\n    for num in arr {\n        maxHeap.insert(element:\
    \ num)\n        if maxHeap.count > k {\n            maxHeap.remove()\n       \
    \ }\n    }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var maxIndex = 0\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result", "    var result = [Int]()\n\
    \    var heap = Heap<Int>(sort: { $0 > $1 })\n    for num in arr {\n        heap.insert(element:\
    \ num)\n        if heap.count > k {\n            heap.remove()\n        }\n  \
    \  }\n    while !heap.isEmpty {\n        result.append(heap.remove()!)\n    }\n\
    \    return result", "    var result = [Int]()\n    for i in 0..<k {\n       \
    \ result.append(arr[i])\n    }\n    for i in k..<arr.count {\n        if arr[i]\
    \ > result[0] {\n            result[0] = arr[i]\n            var j = 0\n     \
    \       while j < k - 1 && result[j] > result[j + 1] {\n                result.swapAt(j,\
    \ j + 1)\n                j += 1\n            }\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for i in 0..<k {\n        result.append(arr[i])\n\
    \    }\n    for i in k..<arr.count {\n        var j = k - 1\n        while j >=\
    \ 0 && result[j] < arr[i] {\n            j -= 1\n        }\n        if j < k -\
    \ 1 {\n            result.insert(arr[i], at: j + 1)\n            result.removeLast()\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 0..<k {\n        var maxIndex = i\n        for j in i+1..<arr.count {\n    \
    \        if arr[j] > arr[maxIndex] {\n                maxIndex = j\n         \
    \   }\n        }\n        result.append(arr[maxIndex])\n        arr.swapAt(i,\
    \ maxIndex)\n    }\n    return result", "    var result = [Int]()\n    var heap\
    \ = Heap<Int>(sort: >)\n    for num in arr {\n        heap.insert(element: num)\n\
    \        if heap.count > k {\n            heap.remove()\n        }\n    }\n  \
    \  while !heap.isEmpty {\n        result.append(heap.remove()!)\n    }\n    return\
    \ result", "    var result = [Int]()\n    for i in 0..<k {\n        var maxIndex\
    \ = i\n        for j in i+1..<arr.count {\n            if arr[j] > arr[maxIndex]\
    \ {\n                maxIndex = j\n            }\n        }\n        result.append(arr[maxIndex])\n\
    \        arr.swapAt(i, maxIndex)\n    }\n    return result", "    var result =\
    \ [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n    for num in arr {\n      \
    \  maxHeap.insert(element: num)\n        if maxHeap.count > k {\n            maxHeap.remove()\n\
    \        }\n    }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        if maxHeap.count < k {\n         \
    \   maxHeap.insert(arr[i])\n        } else if arr[i] > maxHeap.peek()! {\n   \
    \         maxHeap.remove()\n            maxHeap.insert(arr[i])\n        }\n  \
    \  }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    var index = 0\n   \
    \ while result.count < k {\n        var max = Int.min\n        var maxIndex =\
    \ 0\n        for i in index..<arr.count {\n            if arr[i] > max {\n   \
    \             max = arr[i]\n                maxIndex = i\n            }\n    \
    \    }\n        result.append(max)\n        index = maxIndex + 1\n    }\n    return\
    \ result", "    var result = [Int]()\n    for i in 0..<k {\n        result.append(arr[i])\n\
    \    }\n    result.sort()\n    for i in k..<arr.count {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            result.sort()\n        }\n  \
    \  }\n    return result", "    var result = [Int]()\n    var heap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        heap.insert(element: num)\n        if heap.count\
    \ > k {\n            heap.remove()\n        }\n    }\n    while !heap.isEmpty\
    \ {\n        result.append(heap.remove()!)\n    }\n    return result", "    var\
    \ result = [Int]()\n    var heap = Heap<Int>(sort: >)\n    for num in arr {\n\
    \        heap.insert(element: num)\n        if heap.count > k {\n            heap.remove()\n\
    \        }\n    }\n    while !heap.isEmpty {\n        result.append(heap.remove()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result", "  \
    \  var result = [Int]()\n    var heap = Heap<Int>(sort: >)\n    for num in arr\
    \ {\n        heap.insert(element: num)\n        if heap.count > k {\n        \
    \    heap.remove()\n        }\n    }\n    while !heap.isEmpty {\n        result.append(heap.remove()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    var heap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        heap.insert(element: num)\n        if heap.count\
    \ > k {\n            heap.remove()\n        }\n    }\n    while !heap.isEmpty\
    \ {\n        result.append(heap.remove()!)\n    }\n    return result", "    var\
    \ result = [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n    for num in arr {\n\
    \        maxHeap.insert(element: num)\n        if maxHeap.count > k {\n      \
    \      maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty {\n    \
    \    result.append(maxHeap.remove()!)\n    }\n    return result", "    var result\
    \ = [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n    for num in arr {\n    \
    \    maxHeap.insert(element: num)\n        if maxHeap.count > k {\n          \
    \  maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result", "  \
    \  var result = [Int]()\n    for i in 0..<k {\n        result.append(arr[i])\n\
    \    }\n    result.sort()\n    for i in k..<arr.count {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            result.sort()\n        }\n  \
    \  }\n    return result", "    var result = [Int]()\n    var heap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        heap.insert(element: num)\n        if heap.count\
    \ > k {\n            heap.remove()\n        }\n    }\n    while !heap.isEmpty\
    \ {\n        result.append(heap.remove()!)\n    }\n    return result", "    var\
    \ result = [Int]()\n    for i in 0..<k {\n        var max = Int.min\n        var\
    \ maxIndex = -1\n        for j in i..<arr.count {\n            if arr[j] > max\
    \ {\n                max = arr[j]\n                maxIndex = j\n            }\n\
    \        }\n        result.append(max)\n        arr.swapAt(i, maxIndex)\n    }\n\
    \    return result", "    var result = [Int]()\n    for num in arr {\n       \
    \ while result.count > 0 && result.last! < num && result.count + arr.count - arr.firstIndex(of:\
    \ num)! > k {\n            result.removeLast()\n        }\n        result.append(num)\n\
    \    }\n    return Array(result.prefix(k))", "    var result = [Int]()\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n    for num in arr {\n        maxHeap.insert(element:\
    \ num)\n        if maxHeap.count > k {\n            maxHeap.remove()\n       \
    \ }\n    }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    for num in arr {\n\
    \        while result.count > 0 && result.last! < num && result.count + arr.count\
    \ - arr.firstIndex(of: num)! > k {\n            result.removeLast()\n        }\n\
    \        result.append(num)\n    }\n    return Array(result.prefix(k))", "   \
    \ var result = [Int]()\n    for i in 0..<k {\n        var maxIndex = i\n     \
    \   for j in i+1..<arr.count {\n            if arr[j] > arr[maxIndex] {\n    \
    \            maxIndex = j\n            }\n        }\n        result.append(arr[maxIndex])\n\
    \        arr.swapAt(i, maxIndex)\n    }\n    return result", "    var result =\
    \ [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n    for num in arr {\n      \
    \  maxHeap.insert(element: num)\n        if maxHeap.count > k {\n            maxHeap.remove()\n\
    \        }\n    }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in 0..<k {\n\
    \        result.append(arr[i])\n    }\n    result.sort()\n    for i in k..<arr.count\
    \ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n       \
    \     result.sort()\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for i in 0..<k {\n        result.append(arr[i])\n    }\n    for i in k..<arr.count\
    \ {\n        var j = 0\n        while j < k && arr[i] > result[j] {\n        \
    \    j += 1\n        }\n        if j < k {\n            result.insert(arr[i],\
    \ at: j)\n            result.removeLast()\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n    for num in\
    \ arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count > k {\n\
    \            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty {\n\
    \        result.append(maxHeap.remove()!)\n    }\n    return result", "    var\
    \ result = [Int]()\n    for i in 0..<k {\n        var maxIndex = i\n        for\
    \ j in i+1..<arr.count {\n            if arr[j] > arr[maxIndex] {\n          \
    \      maxIndex = j\n            }\n        }\n        result.append(arr[maxIndex])\n\
    \        arr.swapAt(i, maxIndex)\n    }\n    return result", "    var result =\
    \ [Int]()\n    for num in arr {\n        while result.count > 0 && result.last!\
    \ < num && result.count + arr.count - arr.firstIndex(of: num)! > k {\n       \
    \     result.removeLast()\n        }\n        result.append(num)\n    }\n    return\
    \ Array(result.prefix(k))", "    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var maxIndex = 0\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result", "    var result = [Int]()\n\
    \    var maxHeap = Heap<Int>(sort: >)\n    for num in arr {\n        maxHeap.insert(element:\
    \ num)\n        if maxHeap.count > k {\n            maxHeap.remove()\n       \
    \ }\n    }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result", "  \
    \  var result = [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n    for num in\
    \ arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count > k {\n\
    \            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty {\n\
    \        result.append(maxHeap.remove()!)\n    }\n    return result", "    var\
    \ result = [Int]()\n    for i in 0..<k {\n        result.append(arr[i])\n    }\n\
    \    result.sort()\n    for i in k..<arr.count {\n        var j = 0\n        while\
    \ j < k && arr[i] > result[j] {\n            j += 1\n        }\n        if j <\
    \ k {\n            result.insert(arr[i], at: j)\n            result.removeLast()\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 0..<k {\n        result.append(arr[i])\n    }\n    result.sort()\n    for i\
    \ in k..<arr.count {\n        if arr[i] > result[0] {\n            result[0] =\
    \ arr[i]\n            result.sort()\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for i in 0..<k {\n        var maxIndex = i\n   \
    \     for j in i+1..<arr.count {\n            if arr[j] > arr[maxIndex] {\n  \
    \              maxIndex = j\n            }\n        }\n        result.append(arr[maxIndex])\n\
    \        arr.swapAt(i, maxIndex)\n    }\n    return result", "    var result =\
    \ [Int]()\n    for i in 0..<k {\n        var max = Int.min\n        var maxIndex\
    \ = -1\n        for j in i..<arr.count {\n            if arr[j] > max {\n    \
    \            max = arr[j]\n                maxIndex = j\n            }\n     \
    \   }\n        result.append(max)\n        arr.swapAt(i, maxIndex)\n    }\n  \
    \  return result", "    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        if maxHeap.count < k {\n         \
    \   maxHeap.insert(arr[i])\n        } else if arr[i] > maxHeap.peek()! {\n   \
    \         maxHeap.pop()\n            maxHeap.insert(arr[i])\n        }\n    }\n\
    \    while !maxHeap.isEmpty {\n        result.append(maxHeap.pop()!)\n    }\n\
    \    return result", "    var result = [Int]()\n    var arr = arr\n    for _ in\
    \ 0..<k {\n        var max = Int.min\n        var index = 0\n        for i in\
    \ 0..<arr.count {\n            if arr[i] > max {\n                max = arr[i]\n\
    \                index = i\n            }\n        }\n        result.append(max)\n\
    \        arr.remove(at: index)\n    }\n    return result", "    var result = [Int]()\n\
    \    var maxHeap = Heap<Int>(sort: >)\n    for num in arr {\n        maxHeap.insert(element:\
    \ num)\n        if maxHeap.count > k {\n            maxHeap.remove()\n       \
    \ }\n    }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    var i = 0\n    while\
    \ i < k {\n        result.append(arr[i])\n        i += 1\n    }\n    result.sort()\n\
    \    while i < arr.count {\n        if arr[i] > result[0] {\n            result[0]\
    \ = arr[i]\n            result.sort()\n        }\n        i += 1\n    }\n    return\
    \ result", "    var result = [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n \
    \   for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result", "  \
    \  var result = [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n    for num in\
    \ arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count > k {\n\
    \            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty {\n\
    \        result.append(maxHeap.remove()!)\n    }\n    return result", "    var\
    \ result = [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n    for num in arr {\n\
    \        maxHeap.insert(element: num)\n        if maxHeap.count > k {\n      \
    \      maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty {\n    \
    \    result.append(maxHeap.remove()!)\n    }\n    return result", "    var result\
    \ = [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n    for num in arr {\n    \
    \    maxHeap.insert(element: num)\n        if maxHeap.count > k {\n          \
    \  maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in 0..<k {\n\
    \        var maxIndex = i\n        for j in i+1..<arr.count {\n            if\
    \ arr[j] > arr[maxIndex] {\n                maxIndex = j\n            }\n    \
    \    }\n        result.append(arr[maxIndex])\n        let temp = arr[i]\n    \
    \    arr[i] = arr[maxIndex]\n        arr[maxIndex] = temp\n    }\n    return result",
  "    var result = [Int]()\n    var heap = Heap<Int>(sort: >)\n    for i in 0..<arr.count\
    \ {\n        heap.insert(arr[i])\n        if heap.count > k {\n            heap.remove()\n\
    \        }\n    }\n    while !heap.isEmpty {\n        result.append(heap.remove()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var maxIndex = -1\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result", "    var result = [Int]()\n\
    \    var maxHeap = Heap<Int>(sort: >)\n    for i in 0..<arr.count {\n        maxHeap.insert(arr[i])\n\
    \        if maxHeap.count > k {\n            maxHeap.remove()\n        }\n   \
    \ }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    var maxHeap = MinHeap<Int>()\n\
    \    for i in 0..<arr.count {\n        if maxHeap.size < k {\n            maxHeap.insert(key:\
    \ arr[i])\n        } else if arr[i] > maxHeap.peek()! {\n            maxHeap.remove()\n\
    \            maxHeap.insert(key: arr[i])\n        }\n    }\n    while !maxHeap.isEmpty()\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result", "  \
    \  var result = [Int]()\n    var index = 0\n    while result.count < k {\n   \
    \     var max = Int.min\n        var maxIndex = 0\n        for i in index..<arr.count\
    \ {\n            if arr[i] > max {\n                max = arr[i]\n           \
    \     maxIndex = i\n            }\n        }\n        result.append(max)\n   \
    \     index = maxIndex + 1\n    }\n    return result", "    var result = [Int]()\n\
    \    for i in 0..<k {\n        var max = Int.min\n        var maxIndex = 0\n \
    \       for j in i..<arr.count {\n            if arr[j] > max {\n            \
    \    max = arr[j]\n                maxIndex = j\n            }\n        }\n  \
    \      result.append(max)\n        arr.swapAt(i, maxIndex)\n    }\n    return\
    \ result", "    var result = [Int]()\n    for i in 0..<k {\n        var maxIndex\
    \ = i\n        for j in i+1..<arr.count {\n            if arr[j] > arr[maxIndex]\
    \ {\n                maxIndex = j\n            }\n        }\n        result.append(arr[maxIndex])\n\
    \        arr.swapAt(i, maxIndex)\n    }\n    return result", "    var result =\
    \ [Int]()\n    for i in 0..<k {\n        result.append(arr[i])\n    }\n    for\
    \ i in k..<arr.count {\n        if arr[i] > result[0] {\n            result[0]\
    \ = arr[i]\n            for j in 1..<k {\n                if result[j] < result[j\
    \ - 1] {\n                    result.swapAt(j, j - 1)\n                } else\
    \ {\n                    break\n                }\n            }\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    var maxHeap = MaxHeap<Int>()\n\
    \    for i in 0..<arr.count {\n        if maxHeap.count < k {\n            maxHeap.insert(arr[i])\n\
    \        } else if arr[i] > maxHeap.peek()! {\n            maxHeap.remove()\n\
    \            maxHeap.insert(arr[i])\n        }\n    }\n    while !maxHeap.isEmpty()\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result", "  \
    \  var result = [Int]()\n    for i in 0..<k {\n        result.append(arr[i])\n\
    \    }\n    result.sort()\n    for i in k..<arr.count {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            result.sort()\n        }\n  \
    \  }\n    return result", "    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result", "  \
    \  var result = [Int]()\n    for i in 0..<k {\n        var max = Int.min\n   \
    \     var maxIndex = -1\n        for j in i..<arr.count {\n            if arr[j]\
    \ > max {\n                max = arr[j]\n                maxIndex = j\n      \
    \      }\n        }\n        result.append(max)\n        arr.swapAt(i, maxIndex)\n\
    \    }\n    return result", "    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        maxHeap.insert(arr[i])\n        if\
    \ maxHeap.count > k {\n            maxHeap.remove()\n        }\n    }\n    while\
    \ !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n    }\n    return\
    \ result", "    var result = [Int]()\n    var arr = arr\n    for _ in 0..<k {\n\
    \        var index = 0\n        for i in 1..<arr.count {\n            if arr[i]\
    \ > arr[index] {\n                index = i\n            }\n        }\n      \
    \  result.append(arr[index])\n        arr.remove(at: index)\n    }\n    return\
    \ result", "    var result = [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n \
    \   for i in 0..<arr.count {\n        if maxHeap.count < k {\n            maxHeap.insert(arr[i])\n\
    \        } else if arr[i] > maxHeap.peek()! {\n            maxHeap.pop()\n   \
    \         maxHeap.insert(arr[i])\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.pop()!)\n    }\n    return result", "    var\
    \ result = [Int]()\n    for i in 0..<k {\n        result.append(arr[i])\n    }\n\
    \    result.sort()\n    for i in k..<arr.count {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            result.sort()\n        }\n  \
    \  }\n    return result", "    var result = [Int]()\n    for i in 0..<k {\n  \
    \      result.append(arr[i])\n    }\n    result.sort()\n    for i in k..<arr.count\
    \ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n       \
    \     result.sort()\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var maxHeap = Heap<Int>(sort: >)\n    for i in 0..<arr.count {\n        maxHeap.insert(arr[i])\n\
    \        if maxHeap.count > k {\n            maxHeap.remove()\n        }\n   \
    \ }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var maxIndex = -1\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result", "    var result = [Int]()\n\
    \    var maxHeap = Heap<Int>(sort: >)\n    for num in arr {\n        maxHeap.insert(element:\
    \ num)\n        if maxHeap.count > k {\n            maxHeap.remove()\n       \
    \ }\n    }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    var heap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        heap.insert(arr[i])\n        if heap.count\
    \ > k {\n            heap.remove()\n        }\n    }\n    while !heap.isEmpty\
    \ {\n        result.append(heap.remove()!)\n    }\n    return result", "    var\
    \ result = [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n    for num in arr {\n\
    \        maxHeap.insert(element: num)\n        if maxHeap.count > k {\n      \
    \      maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty {\n    \
    \    result.append(maxHeap.remove()!)\n    }\n    return result", "    var result\
    \ = [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n    for i in 0..<arr.count\
    \ {\n        maxHeap.insert(arr[i])\n        if maxHeap.count > k {\n        \
    \    maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty {\n      \
    \  result.append(maxHeap.remove()!)\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 0..<k {\n        var max = Int.min\n        var maxIndex\
    \ = 0\n        for j in i..<arr.count {\n            if arr[j] > max {\n     \
    \           max = arr[j]\n                maxIndex = j\n            }\n      \
    \  }\n        result.append(max)\n        arr.swapAt(i, maxIndex)\n    }\n   \
    \ return result", "    var result = [Int]()\n    for i in 0..<k {\n        result.append(arr[i])\n\
    \    }\n    result.sort()\n    for i in k..<arr.count {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            result.sort()\n        }\n  \
    \  }\n    return result", "    var result = [Int]()\n    if arr.count == 0 ||\
    \ k == 0 {\n        return result\n    }\n    var heap = Heap<Int>(sort: >)\n\
    \    for num in arr {\n        heap.insert(element: num)\n        if heap.count\
    \ > k {\n            heap.remove()\n        }\n    }\n    while !heap.isEmpty\
    \ {\n        result.append(heap.remove()!)\n    }\n    return result", "    var\
    \ result = [Int]()\n    var arr = arr\n    for _ in 0..<k {\n        var max =\
    \ Int.min\n        var maxIndex = 0\n        for i in 0..<arr.count {\n      \
    \      if arr[i] > max {\n                max = arr[i]\n                maxIndex\
    \ = i\n            }\n        }\n        result.append(max)\n        arr.remove(at:\
    \ maxIndex)\n    }\n    return result", "    var result = [Int]()\n    var maxHeap\
    \ = Heap<Int>(sort: >)\n    for i in 0..<arr.count {\n        maxHeap.insert(arr[i])\n\
    \        if maxHeap.count > k {\n            maxHeap.remove()\n        }\n   \
    \ }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result", "  \
    \  var result = [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n    for num in\
    \ arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count > k {\n\
    \            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty {\n\
    \        result.append(maxHeap.remove()!)\n    }\n    return result", "    var\
    \ result = [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n    for num in arr {\n\
    \        maxHeap.insert(element: num)\n        if maxHeap.count > k {\n      \
    \      maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty {\n    \
    \    result.append(maxHeap.remove()!)\n    }\n    return result", "    var result\
    \ = [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n    for num in arr {\n    \
    \    maxHeap.insert(element: num)\n        if maxHeap.count > k {\n          \
    \  maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var maxIndex = 0\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result", "    var result = [Int]()\n\
    \    var maxHeap = Heap<Int>(sort: >)\n    for i in 0..<arr.count {\n        if\
    \ maxHeap.count < k {\n            maxHeap.insert(arr[i])\n        } else if arr[i]\
    \ > maxHeap.peek()! {\n            maxHeap.pop()\n            maxHeap.insert(arr[i])\n\
    \        }\n    }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.pop()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in 0..<k {\n\
    \        result.append(arr[i])\n    }\n    result.sort()\n    for i in k..<arr.count\
    \ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n       \
    \     result.sort()\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var maxHeap = Heap<Int>(sort: >)\n    for num in arr {\n        maxHeap.insert(element:\
    \ num)\n        if maxHeap.count > k {\n            maxHeap.remove()\n       \
    \ }\n    }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        if maxHeap.count < k {\n         \
    \   maxHeap.insert(arr[i])\n        } else if arr[i] > maxHeap.peek()! {\n   \
    \         maxHeap.pop()\n            maxHeap.insert(arr[i])\n        }\n    }\n\
    \    while !maxHeap.isEmpty {\n        result.append(maxHeap.pop()!)\n    }\n\
    \    return result", "    var result = [Int]()\n    var heap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        heap.insert(element: num)\n        if heap.count\
    \ > k {\n            heap.remove()\n        }\n    }\n    while !heap.isEmpty\
    \ {\n        result.append(heap.remove()!)\n    }\n    return result", "    var\
    \ result = [Int]()\n    for i in 0..<k {\n        result.append(arr[i])\n    }\n\
    \    for i in k..<arr.count {\n        var j = 0\n        while j < k && arr[i]\
    \ > result[j] {\n            j += 1\n        }\n        if j < k {\n         \
    \   result.insert(arr[i], at: j)\n            result.removeLast()\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in 0..<k {\n\
    \        var maxIndex = i\n        for j in i+1..<arr.count {\n            if\
    \ arr[j] > arr[maxIndex] {\n                maxIndex = j\n            }\n    \
    \    }\n        result.append(arr[maxIndex])\n        arr.swapAt(i, maxIndex)\n\
    \    }\n    return result", "    var result = [Int]()\n    var heap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        heap.insert(element: num)\n        if heap.count\
    \ > k {\n            heap.remove()\n        }\n    }\n    while !heap.isEmpty\
    \ {\n        result.append(heap.remove()!)\n    }\n    return result", "    var\
    \ result = [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n    for num in arr {\n\
    \        maxHeap.insert(element: num)\n        if maxHeap.count > k {\n      \
    \      maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty {\n    \
    \    result.append(maxHeap.remove()!)\n    }\n    return result", "    var result\
    \ = [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n    for num in arr {\n    \
    \    maxHeap.insert(element: num)\n        if maxHeap.count > k {\n          \
    \  maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in 0..<k {\n\
    \        result.append(arr[i])\n    }\n    for i in k..<arr.count {\n        if\
    \ arr[i] > result[0] {\n            result[0] = arr[i]\n            result.sort()\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 0..<k {\n        var max = arr[i]\n        var maxIndex = i\n        for j in\
    \ i+1..<arr.count {\n            if arr[j] > max {\n                max = arr[j]\n\
    \                maxIndex = j\n            }\n        }\n        result.append(max)\n\
    \        arr.swapAt(i, maxIndex)\n    }\n    return result", "    var result =\
    \ [Int]()\n    var i = 0\n    while i < k {\n        var max = Int.min\n     \
    \   var maxIndex = 0\n        for j in i..<arr.count {\n            if arr[j]\
    \ > max {\n                max = arr[j]\n                maxIndex = j\n      \
    \      }\n        }\n        result.append(max)\n        i = maxIndex + 1\n  \
    \  }\n    return result", "    var result = [Int]()\n    for i in 0..<k {\n  \
    \      result.append(arr[i])\n    }\n    result.sort()\n    for i in k..<arr.count\
    \ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n       \
    \     result.sort()\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var arr = arr\n    for _ in 0..<k {\n        var maxIndex = 0\n        for\
    \ i in 1..<arr.count {\n            if arr[i] > arr[maxIndex] {\n            \
    \    maxIndex = i\n            }\n        }\n        result.append(arr[maxIndex])\n\
    \        arr.remove(at: maxIndex)\n    }\n    return result", "    var result\
    \ = [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n    for i in 0..<arr.count\
    \ {\n        maxHeap.insert(arr[i])\n        if maxHeap.count > k {\n        \
    \    maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty {\n      \
    \  result.append(maxHeap.remove()!)\n    }\n    return result", "    var result\
    \ = [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n    for i in 0..<arr.count\
    \ {\n        if maxHeap.count < k {\n            maxHeap.insert(arr[i])\n    \
    \    } else if arr[i] > maxHeap.peek()! {\n            maxHeap.remove()\n    \
    \        maxHeap.insert(arr[i])\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result", "  \
    \  var result = [Int]()\n    for i in 0..<k {\n        var max = Int.min\n   \
    \     var index = 0\n        for j in i..<arr.count {\n            if arr[j] >\
    \ max {\n                max = arr[j]\n                index = j\n           \
    \ }\n        }\n        result.append(max)\n        arr.swapAt(i, index)\n   \
    \ }\n    return result", "    var result = [Int]()\n    for i in 0..<k {\n   \
    \     var maxIndex = i\n        for j in i+1..<arr.count {\n            if arr[j]\
    \ > arr[maxIndex] {\n                maxIndex = j\n            }\n        }\n\
    \        result.append(arr[maxIndex])\n        arr.swapAt(i, maxIndex)\n    }\n\
    \    return result", "    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result", "  \
    \  var result = [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n    for num in\
    \ arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count > k {\n\
    \            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty {\n\
    \        result.append(maxHeap.remove()!)\n    }\n    return result", "    var\
    \ result = [Int]()\n    var queue = [Int]()\n    for i in 0..<arr.count {\n  \
    \      while !queue.isEmpty && arr[i] > queue.last! && queue.count + arr.count\
    \ - i > k {\n            queue.removeLast()\n        }\n        if queue.count\
    \ < k {\n            queue.append(arr[i])\n        }\n    }\n    return queue",
  "    var result = [Int]()\n    var arr = arr\n    for _ in 0..<k {\n        var\
    \ max = Int.min\n        var maxIndex = 0\n        for i in 0..<arr.count {\n\
    \            if arr[i] > max {\n                max = arr[i]\n               \
    \ maxIndex = i\n            }\n        }\n        result.append(max)\n       \
    \ arr.remove(at: maxIndex)\n    }\n    return result", "    var result = [Int]()\n\
    \    for num in arr {\n        while !result.isEmpty && result.count + arr.count\
    \ - arr.firstIndex(of: num)! > k && result.last! < num {\n            result.removeLast()\n\
    \        }\n        result.append(num)\n    }\n    return Array(result.prefix(k))",
  "    var result = [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n    for i in 0..<arr.count\
    \ {\n        if maxHeap.count < k {\n            maxHeap.insert(arr[i])\n    \
    \    } else if arr[i] > maxHeap.peek()! {\n            maxHeap.pop()\n       \
    \     maxHeap.insert(arr[i])\n        }\n    }\n    while !maxHeap.isEmpty {\n\
    \        result.append(maxHeap.pop()!)\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 0..<k {\n        result.append(arr[i])\n    }\n    result.sort()\n\
    \    for i in k..<arr.count {\n        if arr[i] > result[0] {\n            result[0]\
    \ = arr[i]\n            result.sort()\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    if arr.count == 0 || k == 0 {\n        return result\n\
    \    }\n    for i in 0..<arr.count {\n        while result.count > 0 && result.count\
    \ + arr.count - i > k && result.last! < arr[i] {\n            result.removeLast()\n\
    \        }\n        if result.count < k {\n            result.append(arr[i])\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var maxHeap\
    \ = Heap<Int>(sort: >)\n    for num in arr {\n        maxHeap.insert(element:\
    \ num)\n        if maxHeap.count > k {\n            maxHeap.remove()\n       \
    \ }\n    }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var maxIndex = 0\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result", "    var result = [Int]()\n\
    \    var arr = arr\n    for _ in 0..<k {\n        var maxIndex = 0\n        for\
    \ i in 1..<arr.count {\n            if arr[i] > arr[maxIndex] {\n            \
    \    maxIndex = i\n            }\n        }\n        result.append(arr[maxIndex])\n\
    \        arr.remove(at: maxIndex)\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 0..<k {\n        var maxIndex = i\n        for j in\
    \ i+1..<arr.count {\n            if arr[j] > arr[maxIndex] {\n               \
    \ maxIndex = j\n            }\n        }\n        result.append(arr[maxIndex])\n\
    \        let temp = arr[i]\n        arr[i] = arr[maxIndex]\n        arr[maxIndex]\
    \ = temp\n    }\n    return result", "    var result = [Int]()\n    for i in 0..<k\
    \ {\n        var max = Int.min\n        var maxIndex = 0\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result", "    var result = [Int]()\n\
    \    for i in 0..<k {\n        result.append(arr[i])\n    }\n    for i in k..<arr.count\
    \ {\n        var j = k - 1\n        while j >= 0 && result[j] < arr[i] {\n   \
    \         j -= 1\n        }\n        if j < k - 1 {\n            result.insert(arr[i],\
    \ at: j + 1)\n            result.removeLast()\n        }\n    }\n    return result",
  "    var result = [Int]()\n    for i in 0..<k {\n        result.append(arr[i])\n\
    \    }\n    result.sort()\n    for i in k..<arr.count {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            result.sort()\n        }\n  \
    \  }\n    return result", "    var result = [Int]()\n    for i in 0..<k {\n  \
    \      result.append(arr[i])\n    }\n    result.sort()\n    for i in k..<arr.count\
    \ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n       \
    \     result.sort()\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var maxHeap = Heap<Int>(sort: >)\n    for num in arr {\n        maxHeap.insert(element:\
    \ num)\n        if maxHeap.count > k {\n            maxHeap.remove()\n       \
    \ }\n    }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in 0..<k {\n\
    \        var maxIndex = i\n        for j in i+1..<arr.count {\n            if\
    \ arr[j] > arr[maxIndex] {\n                maxIndex = j\n            }\n    \
    \    }\n        result.append(arr[maxIndex])\n        arr.swapAt(i, maxIndex)\n\
    \    }\n    return result", "    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result", "  \
    \  var result = [Int]()\n    for i in 0..<k {\n        result.append(arr[i])\n\
    \    }\n    result.sort()\n    for i in k..<arr.count {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            result.sort()\n        }\n  \
    \  }\n    return result", "    var result = [Int]()\n    var arr = arr\n    for\
    \ _ in 0..<k {\n        var maxIndex = 0\n        for i in 1..<arr.count {\n \
    \           if arr[i] > arr[maxIndex] {\n                maxIndex = i\n      \
    \      }\n        }\n        result.append(arr[maxIndex])\n        arr.remove(at:\
    \ maxIndex)\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 0..<k {\n        result.append(arr[i])\n    }\n    for i in k..<arr.count {\n\
    \        var j = k - 1\n        while j >= 0 && result[j] < arr[i] {\n       \
    \     j -= 1\n        }\n        if j < k - 1 {\n            result.insert(arr[i],\
    \ at: j + 1)\n            result.removeLast()\n        }\n    }\n    return result",
  "    var result = [Int]()\n    for i in 0..<k {\n        result.append(arr[i])\n\
    \    }\n    for i in k..<arr.count {\n        var j = k - 1\n        while j >=\
    \ 0 && result[j] < arr[i] {\n            j -= 1\n        }\n        if j < k -\
    \ 1 {\n            result.insert(arr[i], at: j + 1)\n            result.removeLast()\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var maxHeap\
    \ = Heap<Int>(sort: >)\n    for num in arr {\n        maxHeap.insert(element:\
    \ num)\n        if maxHeap.count > k {\n            maxHeap.remove()\n       \
    \ }\n    }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in 0..<k {\n\
    \        var maxIndex = i\n        for j in i+1..<arr.count {\n            if\
    \ arr[j] > arr[maxIndex] {\n                maxIndex = j\n            }\n    \
    \    }\n        result.append(arr[maxIndex])\n        arr.swapAt(i, maxIndex)\n\
    \    }\n    return result", "    var result = [Int]()\n    var arr = arr\n   \
    \ for _ in 0..<k {\n        var max = Int.min\n        var maxIndex = 0\n    \
    \    for i in 0..<arr.count {\n            if arr[i] > max {\n               \
    \ max = arr[i]\n                maxIndex = i\n            }\n        }\n     \
    \   result.append(max)\n        arr.remove(at: maxIndex)\n    }\n    return result",
  "    var result = [Int]()\n    for i in 0..<k {\n        result.append(arr[i])\n\
    \    }\n    for i in k..<arr.count {\n        var j = k - 1\n        while j >=\
    \ 0 && result[j] < arr[i] {\n            j -= 1\n        }\n        if j < k -\
    \ 1 {\n            result.insert(arr[i], at: j + 1)\n            result.removeLast()\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var maxHeap\
    \ = Heap<Int>(sort: >)\n    for num in arr {\n        maxHeap.insert(element:\
    \ num)\n        if maxHeap.count > k {\n            maxHeap.remove()\n       \
    \ }\n    }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var maxIndex = -1\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result", "    var result = [Int]()\n\
    \    var queue = [Int]()\n    for i in 0..<arr.count {\n        while !queue.isEmpty\
    \ && arr[i] > queue.last! && queue.count + arr.count - i > k {\n            queue.removeLast()\n\
    \        }\n        if queue.count < k {\n            queue.append(arr[i])\n \
    \       }\n    }\n    return queue", "    var result = [Int]()\n    var arr =\
    \ arr\n    for _ in 0..<k {\n        var maxIndex = 0\n        for i in 1..<arr.count\
    \ {\n            if arr[i] > arr[maxIndex] {\n                maxIndex = i\n \
    \           }\n        }\n        result.append(arr[maxIndex])\n        arr.remove(at:\
    \ maxIndex)\n    }\n    return result", "    var result = [Int]()\n    var maxHeap\
    \ = Heap<Int>(sort: >)\n    for num in arr {\n        maxHeap.insert(element:\
    \ num)\n        if maxHeap.count > k {\n            maxHeap.remove()\n       \
    \ }\n    }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in 0..<k {\n\
    \        result.append(arr[i])\n    }\n    for i in k..<arr.count {\n        var\
    \ j = k - 1\n        while j >= 0 && result[j] < arr[i] {\n            result[j\
    \ + 1] = result[j]\n            j -= 1\n        }\n        result[j + 1] = arr[i]\n\
    \    }\n    return result", "    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result", "  \
    \  var result = [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n    for num in\
    \ arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count > k {\n\
    \            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty {\n\
    \        result.append(maxHeap.remove()!)\n    }\n    return result", "    var\
    \ result = [Int]()\n    var queue = [Int]()\n    for i in 0..<arr.count {\n  \
    \      while !queue.isEmpty && arr[i] > queue.last! && queue.count + arr.count\
    \ - i > k {\n            queue.removeLast()\n        }\n        if queue.count\
    \ < k {\n            queue.append(arr[i])\n        }\n    }\n    return queue",
  "    var result = [Int]()\n    var heap = Heap<Int>(sort: >)\n    for num in arr\
    \ {\n        heap.insert(element: num)\n        if heap.count > k {\n        \
    \    heap.remove()\n        }\n    }\n    while !heap.isEmpty {\n        result.append(heap.remove()!)\n\
    \    }\n    return result", "    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result", "  \
    \  var result = [Int]()\n    for i in 0..<k {\n        var maxIndex = i\n    \
    \    for j in i+1..<arr.count {\n            if arr[j] > arr[maxIndex] {\n   \
    \             maxIndex = j\n            }\n        }\n        result.append(arr[maxIndex])\n\
    \        arr.swapAt(i, maxIndex)\n    }\n    return result", "    var result =\
    \ [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n    for num in arr {\n      \
    \  maxHeap.insert(element: num)\n        if maxHeap.count > k {\n            maxHeap.remove()\n\
    \        }\n    }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result"]
stop_tokens:
- "\n}"
