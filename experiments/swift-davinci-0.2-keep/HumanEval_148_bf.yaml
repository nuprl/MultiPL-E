name: HumanEval_148_bf
language: swift
prompt: "\n/// There are eight planets in our solar system: the closerst to the Sun\
  \ \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
  /// Uranus, Neptune.\n/// Write a function that takes two planet names as strings\
  \ planet1 and planet2. \n/// The function should return a tuple containing all planets\
  \ whose orbits are \n/// located between the orbit of planet1 and the orbit of planet2,\
  \ sorted by \n/// the proximity to the sun. \n/// The function should return an\
  \ empty tuple if planet1 or planet2\n/// are not correct planet names. \n/// Examples\n\
  /// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n/// bf(\"Earth\"\
  , \"Mercury\") ==> (\"Venus\")\n/// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\",\
  \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunc bf(planet1: String, planet2:\
  \ String) -> [String] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
  ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
  ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\"\
  , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\"\
  , planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
  ])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
  \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
  , planet2: \"Makemake\") == [] as [String])"
completions: ["    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    let startIndex = planets.firstIndex(of:\
    \ planet1) ?? -1\n    let endIndex = planets.firstIndex(of: planet2) ?? -1\n \
    \   if startIndex == -1 || endIndex == -1 {\n        return []\n    }\n    let\
    \ result = planets[startIndex...endIndex].sorted(by: { planets.firstIndex(of:\
    \ $0)! < planets.firstIndex(of: $1)! })\n    return result", "    let planets\
    \ = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"]\n    let firstIndex = planets.firstIndex(of: planet1)\n\
    \    let secondIndex = planets.firstIndex(of: planet2)\n    if firstIndex == nil\
    \ || secondIndex == nil {\n        return []\n    }\n    if firstIndex! < secondIndex!\
    \ {\n        return Array(planets[firstIndex! + 1..<secondIndex!])\n    } else\
    \ {\n        return Array(planets[secondIndex! + 1..<firstIndex!])\n    }", " \
    \   let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"]\n    let p1 = planets.firstIndex(of: planet1)\n\
    \    let p2 = planets.firstIndex(of: planet2)\n    if p1 == nil || p2 == nil {\n\
    \        return []\n    }\n    let start = min(p1!, p2!)\n    let end = max(p1!,\
    \ p2!)\n    return Array(planets[start...end])", "    let planets = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ]\n    let index1 = planets.firstIndex(of: planet1)\n    let index2 = planets.firstIndex(of:\
    \ planet2)\n    if index1 == nil || index2 == nil {\n        return []\n    }\n\
    \    let start = min(index1!, index2!)\n    let end = max(index1!, index2!)\n\
    \    return Array(planets[start...end])", "    let planets = [\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ]\n    let planet1Index = planets.firstIndex(of: planet1)\n    let planet2Index\
    \ = planets.firstIndex(of: planet2)\n    if planet1Index == nil || planet2Index\
    \ == nil {\n        return []\n    }\n    let startIndex = min(planet1Index!,\
    \ planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n    return\
    \ Array(planets[startIndex...endIndex])", "    let planets = [\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ]\n    let planet1Index = planets.firstIndex(of: planet1)\n    let planet2Index\
    \ = planets.firstIndex(of: planet2)\n    if planet1Index == nil || planet2Index\
    \ == nil {\n        return []\n    }\n    let start = min(planet1Index!, planet2Index!)\n\
    \    let end = max(planet1Index!, planet2Index!)\n    return Array(planets[start...end])",
  "    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"]\n    let index1 = planets.firstIndex(of: planet1)\n\
    \    let index2 = planets.firstIndex(of: planet2)\n    if index1 == nil || index2\
    \ == nil {\n        return []\n    }\n    let start = min(index1!, index2!)\n\
    \    let end = max(index1!, index2!)\n    return Array(planets[start...end])",
  "    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    var start\
    \ = 0\n    var end = 0\n    for (index, planet) in planets.enumerated() {\n  \
    \      if planet == planet1 {\n            start = index\n        }\n        if\
    \ planet == planet2 {\n            end = index\n        }\n    }\n    if start\
    \ > end {\n        for i in end...start {\n            result.append(planets[i])\n\
    \        }\n    } else {\n        for i in start...end {\n            result.append(planets[i])\n\
    \        }\n    }\n    return result", "    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n   \
    \ let first = planets.firstIndex(of: planet1) ?? -1\n    let second = planets.firstIndex(of:\
    \ planet2) ?? -1\n    if first == -1 || second == -1 {\n        return []\n  \
    \  }\n    let min = min(first, second)\n    let max = max(first, second)\n   \
    \ return Array(planets[min...max])", "    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n   \
    \ let planet1Index = planets.firstIndex(of: planet1)\n    let planet2Index = planets.firstIndex(of:\
    \ planet2)\n    if planet1Index == nil || planet2Index == nil {\n        return\
    \ []\n    }\n    let startIndex = min(planet1Index!, planet2Index!)\n    let endIndex\
    \ = max(planet1Index!, planet2Index!)\n    let result = planets[startIndex...endIndex]\n\
    \    return Array(result)", "    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planetsSet\
    \ = Set(planets)\n    guard planetsSet.contains(planet1) && planetsSet.contains(planet2)\
    \ else {\n        return []\n    }\n    let startIndex = planets.firstIndex(of:\
    \ planet1)!\n    let endIndex = planets.firstIndex(of: planet2)!\n    let result\
    \ = planets[min(startIndex, endIndex) + 1..<max(startIndex, endIndex)]\n    return\
    \ Array(result)", "    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else { return [] }\n    return\
    \ p1 < p2 ? Array(planets[p1+1..<p2]) : Array(planets[p2+1..<p1])", "    let planets\
    \ = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"]\n    guard let index1 = planets.firstIndex(of: planet1),\n\
    \        let index2 = planets.firstIndex(of: planet2) else {\n            return\
    \ []\n    }\n    let start = min(index1, index2)\n    let end = max(index1, index2)\n\
    \    return Array(planets[start...end])", "    let planets = [\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ]\n    let index1 = planets.firstIndex(of: planet1)\n    let index2 = planets.firstIndex(of:\
    \ planet2)\n    if index1 == nil || index2 == nil {\n        return []\n    }\n\
    \    if index1! < index2! {\n        return Array(planets[index1! + 1..<index2!])\n\
    \    } else {\n        return Array(planets[index2! + 1..<index1!])\n    }", " \
    \   let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])", "    let planets = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ]\n    let planet1Index = planets.firstIndex(of: planet1)\n    let planet2Index\
    \ = planets.firstIndex(of: planet2)\n    if planet1Index == nil || planet2Index\
    \ == nil {\n        return []\n    }\n    let startIndex = min(planet1Index!,\
    \ planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n    return\
    \ Array(planets[startIndex...endIndex])", "    let planets = [\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ]\n    let startIndex = planets.firstIndex(of: planet1) ?? -1\n    let endIndex\
    \ = planets.firstIndex(of: planet2) ?? -1\n    if startIndex == -1 || endIndex\
    \ == -1 {\n        return []\n    }\n    if startIndex < endIndex {\n        return\
    \ Array(planets[startIndex + 1...endIndex - 1])\n    } else {\n        return\
    \ Array(planets[endIndex + 1...startIndex - 1])\n    }", "    let planets = [\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"]\n    let planet1Index = planets.firstIndex(of: planet1)\n    let\
    \ planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index == nil ||\
    \ planet2Index == nil {\n        return []\n    }\n    let startIndex = min(planet1Index!,\
    \ planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n    return\
    \ Array(planets[startIndex...endIndex])", "    let planets = [\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ]\n    let planet1Index = planets.firstIndex(of: planet1)\n    let planet2Index\
    \ = planets.firstIndex(of: planet2)\n    if planet1Index == nil || planet2Index\
    \ == nil {\n        return []\n    }\n    let planetsBetween = planets[planet1Index!...planet2Index!]\n\
    \    return Array(planetsBetween)", "    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n   \
    \ let planet1Index = planets.firstIndex(of: planet1)\n    let planet2Index = planets.firstIndex(of:\
    \ planet2)\n    if planet1Index == nil || planet2Index == nil {\n        return\
    \ []\n    }\n    let startIndex = min(planet1Index!, planet2Index!)\n    let endIndex\
    \ = max(planet1Index!, planet2Index!)\n    return Array(planets[startIndex...endIndex])"]
stop_tokens:
- "\n}"
