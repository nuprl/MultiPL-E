language: swift
name: HumanEval_37_sort_even
results:
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    var odds = [Int]()\n    for i in 0..<l.count {\n        if i\
    \ % 2 == 0 {\n            odds.append(l[i])\n        } else {\n            evens.append(l[i])\n\
    \        }\n    }\n    evens.sort()\n    var result = [Int]()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            result.append(odds[i/2])\n        }\
    \ else {\n            result.append(evens[i/2])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpudc2u8uw/tmpudc2u8uw.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac85ab8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac85a884b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac85a884988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac85a8837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudc2u8uw                        0x0000555679f21983 <unavailable> + 6531

    5    libc.so.6                          0x00002ac85ad79460 __libc_start_main +
    245

    6    tmpudc2u8uw                        0x0000555679f213d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens = [Int]()\n   \
    \ var odds = [Int]()\n    var result = [Int]()\n    for (index, value) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            odds.append(value)\n        } else\
    \ {\n            evens.append(value)\n        }\n    }\n    evens.sort()\n   \
    \ for (index, value) in l.enumerated() {\n        if index % 2 == 0 {\n      \
    \      result.append(value)\n        } else {\n            result.append(evens.removeFirst())\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpfy5xd5zh/tmpfy5xd5zh.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade9e052c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade9dd49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade9dd49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade9dd487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfy5xd5zh                        0x0000556f6da15a93 <unavailable> + 6803

    5    libc.so.6                          0x00002ade9e23e460 __libc_start_main +
    245

    6    tmpfy5xd5zh                        0x0000556f6da154e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            continue\n        }\n        var min\
    \ = l[i]\n        var min_index = i\n        for j in i..<l.count {\n        \
    \    if l[j] < min {\n                min = l[j]\n                min_index =\
    \ j\n            }\n        }\n        l[i] = min\n        l[min_index] = l[i]\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpk05nyoac/tmpk05nyoac.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44a0716c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44a040db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44a040d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44a040c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk05nyoac                        0x0000564a0c3d8803 <unavailable> + 6147

    5    libc.so.6                          0x00002b44a0902460 __libc_start_main +
    245

    6    tmpk05nyoac                        0x0000564a0c3d8259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    var odds = [Int]()\n    for (index, element) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            odds.append(element)\n        }\
    \ else {\n            evens.append(element)\n        }\n    }\n    evens.sort()\n\
    \    for (index, element) in evens.enumerated() {\n        l[index * 2 + 1] =\
    \ element\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpp65j1wlx/tmpp65j1wlx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cf8990c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cf8687b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cf8687988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cf86867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp65j1wlx                        0x000056101b91ca43 <unavailable> + 6723

    5    libc.so.6                          0x00002b7cf8b7c460 __libc_start_main +
    245

    6    tmpp65j1wlx                        0x000056101b91c499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens:\
    \ [Int] = []\n    var odds: [Int] = []\n    for (index, value) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            odds.append(value)\n        } else\
    \ {\n            evens.append(value)\n        }\n    }\n    evens.sort()\n   \
    \ for (index, value) in evens.enumerated() {\n        l[index * 2 + 1] = value\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpotsp76n8/tmpotsp76n8.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad64edddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad64ead4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad64ead4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad64ead37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpotsp76n8                        0x000055dbdb42a9f3 <unavailable> + 6643

    5    libc.so.6                          0x00002ad64efc9460 __libc_start_main +
    245

    6    tmpotsp76n8                        0x000055dbdb42a449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var result = l\n    var evens\
    \ = [Int]()\n    for (index, value) in l.enumerated() {\n        if index % 2\
    \ == 0 {\n            evens.append(value)\n        }\n    }\n    evens.sort()\n\
    \    for (index, value) in evens.enumerated() {\n        result[index * 2] = value\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    var odds = [Int]()\n    for i in 0..<l.count {\n        if i\
    \ % 2 == 0 {\n            odds.append(l[i])\n        } else {\n            evens.append(l[i])\n\
    \        }\n    }\n    evens.sort()\n    for i in 0..<evens.count {\n        odds.insert(evens[i],\
    \ at: i*2+1)\n    }\n    return odds\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpj5vdg1_1/tmpj5vdg1_1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4be0085c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bdfd7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bdfd7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bdfd7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj5vdg1_1                        0x000055df02c889d3 <unavailable> + 6611

    5    libc.so.6                          0x00002b4be0271460 __libc_start_main +
    245

    6    tmpj5vdg1_1                        0x000055df02c88429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        let sub = l[i..<l.count]\n        let sorted\
    \ = sub.sorted()\n        for j in 0..<sub.count {\n            l[i+j] = sorted[j]\n\
    \        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp0qgzmwty/tmp0qgzmwty.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fd1706c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fd13fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fd13fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fd13fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0qgzmwty                        0x000055aa05254c03 <unavailable> + 7171

    5    libc.so.6                          0x00002b1fd18f2460 __libc_start_main +
    245

    6    tmp0qgzmwty                        0x000055aa05254659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even =\
    \ [Int]()\n    var odd = [Int]()\n    for i in 0..<l.count {\n        if i % 2\
    \ == 0 {\n            even.append(l[i])\n        } else {\n            odd.append(l[i])\n\
    \        }\n    }\n    even.sort()\n    for i in 0..<even.count {\n        l[2*i]\
    \ = even[i]\n    }\n    for i in 0..<odd.count {\n        l[2*i+1] = odd[i]\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even_indicies = [Int]()\n\
    \    var odd_indicies = [Int]()\n    var even_indicies_sorted = [Int]()\n    var\
    \ l_sorted = [Int]()\n    for (index, value) in l.enumerated() {\n        if index\
    \ % 2 == 0 {\n            even_indicies.append(value)\n        } else {\n    \
    \        odd_indicies.append(value)\n        }\n    }\n    even_indicies_sorted\
    \ = even_indicies.sorted()\n    for (index, value) in l.enumerated() {\n     \
    \   if index % 2 == 0 {\n            l_sorted.append(even_indicies_sorted[index\
    \ / 2])\n        } else {\n            l_sorted.append(odd_indicies[index / 2])\n\
    \        }\n    }\n    return l_sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens = [Int]()\n   \
    \ var odds = [Int]()\n    var result = [Int]()\n    for (index, value) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            odds.append(value)\n        } else\
    \ {\n            evens.append(value)\n        }\n    }\n    evens.sort()\n   \
    \ for (index, value) in l.enumerated() {\n        if index % 2 == 0 {\n      \
    \      result.append(value)\n        } else {\n            result.append(evens.removeFirst())\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpfy5xd5zh/tmpfy5xd5zh.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade9e052c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade9dd49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade9dd49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade9dd487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfy5xd5zh                        0x0000556f6da15a93 <unavailable> + 6803

    5    libc.so.6                          0x00002ade9e23e460 __libc_start_main +
    245

    6    tmpfy5xd5zh                        0x0000556f6da154e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even_indicies\
    \ = [Int]()\n    var even_values = [Int]()\n    for i in 0..<l.count {\n     \
    \   if i % 2 == 0 {\n            even_indicies.append(i)\n            even_values.append(l[i])\n\
    \        }\n    }\n    even_values.sort()\n    for i in 0..<even_indicies.count\
    \ {\n        l[even_indicies[i]] = even_values[i]\n    }\n    return l\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens = [Int]()\n   \
    \ var odds = [Int]()\n    var result = [Int]()\n    for (index, value) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            odds.append(value)\n        } else\
    \ {\n            evens.append(value)\n        }\n    }\n    evens.sort()\n   \
    \ for (index, value) in l.enumerated() {\n        if index % 2 == 0 {\n      \
    \      result.append(value)\n        } else {\n            result.append(evens.removeFirst())\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpfy5xd5zh/tmpfy5xd5zh.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade9e052c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade9dd49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade9dd49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade9dd487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfy5xd5zh                        0x0000556f6da15a93 <unavailable> + 6803

    5    libc.so.6                          0x00002ade9e23e460 __libc_start_main +
    245

    6    tmpfy5xd5zh                        0x0000556f6da154e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            l[i] = evens[i/2]\n        }\n    }\n\
    \    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            l[i] = evens[i/2]\n        }\n    }\n\
    \    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    var odds = [Int]()\n    for i in 0..<l.count {\n        if i\
    \ % 2 == 0 {\n            odds.append(l[i])\n        } else {\n            evens.append(l[i])\n\
    \        }\n    }\n    evens.sort()\n    for i in 0..<evens.count {\n        l[2*i+1]\
    \ = evens[i]\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp5dflfpvc/tmp5dflfpvc.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd3aaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd3a79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd3a79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd3a7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5dflfpvc                        0x00005566c5a659d3 <unavailable> + 6611

    5    libc.so.6                          0x00002afd3ac8f460 __libc_start_main +
    245

    6    tmp5dflfpvc                        0x00005566c5a65429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens = [Int]()\n   \
    \ var odds = [Int]()\n    var result = [Int]()\n    var i = 0\n    while i < l.count\
    \ {\n        if i % 2 == 0 {\n            odds.append(l[i])\n        } else {\n\
    \            evens.append(l[i])\n        }\n        i += 1\n    }\n    evens.sort()\n\
    \    i = 0\n    while i < l.count {\n        if i % 2 == 0 {\n            result.append(odds[i/2])\n\
    \        } else {\n            result.append(evens[i/2])\n        }\n        i\
    \ += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpdaya9axe/tmpdaya9axe.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56954cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56951c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56951c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56951c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdaya9axe                        0x0000563d09a9f883 <unavailable> + 6275

    5    libc.so.6                          0x00002b56956b9460 __libc_start_main +
    245

    6    tmpdaya9axe                        0x0000563d09a9f2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_copy = l\n    for i\
    \ in stride(from: 0, to: l.count, by: 2) {\n        l_copy[i] = l[i]\n    }\n\
    \    for i in stride(from: 1, to: l.count, by: 2) {\n        l_copy[i] = l[i]\n\
    \    }\n    return l_copy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpr0w0hf2_/tmpr0w0hf2_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac96e991c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac96e688b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac96e688988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac96e6877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr0w0hf2_                        0x000055efba7c3883 <unavailable> + 6275

    5    libc.so.6                          0x00002ac96eb7d460 __libc_start_main +
    245

    6    tmpr0w0hf2_                        0x000055efba7c32d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    var odds = [Int]()\n    for i in 0..<l.count {\n        if i\
    \ % 2 == 0 {\n            odds.append(l[i])\n        } else {\n            evens.append(l[i])\n\
    \        }\n    }\n    evens.sort()\n    for i in 0..<evens.count {\n        odds.insert(evens[i],\
    \ at: i * 2 + 1)\n    }\n    return odds\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpqxzulf4s/tmpqxzulf4s.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec8dcc5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec8d9bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec8d9bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec8d9bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqxzulf4s                        0x00005649590f99d3 <unavailable> + 6611

    5    libc.so.6                          0x00002aec8deb1460 __libc_start_main +
    245

    6    tmpqxzulf4s                        0x00005649590f9429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n        evens.append(l[i])\n\
    \    }\n    evens.sort()\n    for i in stride(from: 0, to: l.count, by: 2) {\n\
    \        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even_indicies\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ even_indicies.append(i)\n        }\n    }\n    for i in 0..<even_indicies.count\
    \ {\n        for j in 0..<even_indicies.count - 1 {\n            if l[even_indicies[j]]\
    \ > l[even_indicies[j + 1]] {\n                let temp = l[even_indicies[j]]\n\
    \                l[even_indicies[j]] = l[even_indicies[j + 1]]\n             \
    \   l[even_indicies[j + 1]] = temp\n            }\n        }\n    }\n    return\
    \ l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1,\
    \ 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2,\
    \ 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens:\
    \ [Int] = []\n    var odds: [Int] = []\n    for (i, e) in l.enumerated() {\n \
    \       if i % 2 == 0 {\n            odds.append(e)\n        } else {\n      \
    \      evens.append(e)\n        }\n    }\n    evens.sort()\n    for (i, e) in\
    \ evens.enumerated() {\n        l[2 * i + 1] = e\n    }\n    return l\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpkzp4y7pm/tmpkzp4y7pm.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8ac9f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8ac6e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8ac6e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8ac6e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkzp4y7pm                        0x000055e4850299f3 <unavailable> + 6643

    5    libc.so.6                          0x00002ae8acbdc460 __libc_start_main +
    245

    6    tmpkzp4y7pm                        0x000055e485029449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even_l = [Int]()\n  \
    \  var odd_l = [Int]()\n    var result = [Int]()\n    for (index, value) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            even_l.append(value)\n        }\
    \ else {\n            odd_l.append(value)\n        }\n    }\n    even_l.sort()\n\
    \    for (index, value) in even_l.enumerated() {\n        result.append(value)\n\
    \        result.append(odd_l[index])\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b37ae45fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37ae156561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b37ae156286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b37ae15613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b37ae155bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b37adf57e83 <unavailable> + 188035

    6    tmpp_pkr28c                        0x0000557cb40e1071 <unavailable> + 8305

    7    tmpp_pkr28c                        0x0000557cb40e07b4 <unavailable> + 6068

    8    libc.so.6                          0x00002b37ae64b460 __libc_start_main +
    245

    9    tmpp_pkr28c                        0x0000557cb40e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            l[i] = evens[i/2]\n        }\n    }\n\
    \    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var newList = l\n    var\
    \ evenIndexes = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            evenIndexes.append(i)\n        }\n    }\n    for i in evenIndexes\
    \ {\n        let subArray = newList[i..<newList.count]\n        let sortedSubArray\
    \ = subArray.sorted()\n        newList.replaceSubrange(i..<newList.count, with:\
    \ sortedSubArray)\n    }\n    return newList\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp20v4t0fc/tmp20v4t0fc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab12b185c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab12ae7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab12ae7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab12ae7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp20v4t0fc                        0x0000564e134cbb83 <unavailable> + 7043

    5    libc.so.6                          0x00002ab12b371460 __libc_start_main +
    245

    6    tmp20v4t0fc                        0x0000564e134cb5d9 <unavailable> + 5593

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even_indicies: [Int]\
    \ = []\n    var odd_indicies: [Int] = []\n    var new_list: [Int] = []\n    var\
    \ i = 0\n    while i < l.count {\n        if i % 2 == 0 {\n            odd_indicies.append(l[i])\n\
    \        } else {\n            even_indicies.append(l[i])\n        }\n       \
    \ i += 1\n    }\n    even_indicies.sort()\n    i = 0\n    while i < l.count {\n\
    \        if i % 2 == 0 {\n            new_list.append(odd_indicies[i/2])\n   \
    \     } else {\n            new_list.append(even_indicies[i/2])\n        }\n \
    \       i += 1\n    }\n    return new_list\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpm0wb7c3x/tmpm0wb7c3x.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2165002c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2164cf9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2164cf9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2164cf87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm0wb7c3x                        0x000055c37b52c833 <unavailable> + 6195

    5    libc.so.6                          0x00002b21651ee460 __libc_start_main +
    245

    6    tmpm0wb7c3x                        0x000055c37b52c289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    var odds = [Int]()\n    var result = [Int]()\n    for (index,\
    \ value) in l.enumerated() {\n        if index % 2 == 0 {\n            odds.append(value)\n\
    \        } else {\n            evens.append(value)\n        }\n    }\n    evens.sort()\n\
    \    for (index, value) in l.enumerated() {\n        if index % 2 == 0 {\n   \
    \         result.append(value)\n        } else {\n            result.append(evens.removeFirst())\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpspejxmkr/tmpspejxmkr.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abca2284c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abca1f7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abca1f7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abca1f7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpspejxmkr                        0x000055c55b9a2a93 <unavailable> + 6803

    5    libc.so.6                          0x00002abca2470460 __libc_start_main +
    245

    6    tmpspejxmkr                        0x000055c55b9a24e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    var odds = [Int]()\n    for (index, value) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            odds.append(value)\n        } else\
    \ {\n            evens.append(value)\n        }\n    }\n    evens.sort()\n   \
    \ for (index, value) in evens.enumerated() {\n        l[index * 2 + 1] = value\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpcvwiz4w0/tmpcvwiz4w0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47dba8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47db786b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47db786988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47db7857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcvwiz4w0                        0x000055d428647a43 <unavailable> + 6723

    5    libc.so.6                          0x00002b47dbc7b460 __libc_start_main +
    245

    6    tmpcvwiz4w0                        0x000055d428647499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even_indices:\
    \ [Int] = []\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n          \
    \  even_indices.append(i)\n        }\n    }\n    for i in even_indices {\n   \
    \     let slice = l[i...i+1]\n        let sorted = slice.sorted()\n        l[i]\
    \ = sorted[0]\n        l[i+1] = sorted[1]\n    }\n    return l\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/Array.swift:418: Fatal error: Array index is out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a393bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a390b2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5a390b2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5a390b213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5a390b1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b5a3909b196 <unavailable> + 1339798

    6    libswiftCore.so                    0x00002b5a392ec457 <unavailable> + 3769431

    7    libswiftCore.so                    0x00002b5a390e7911 <unavailable> + 1653009

    8    libswiftCore.so                    0x00002b5a391ae7c0 MutableCollection.subscript.getter
    + 212

    9    tmpcfmc4ejd                        0x0000558719c4b22a <unavailable> + 8746

    10   tmpcfmc4ejd                        0x0000558719c4a964 <unavailable> + 6500

    11   libc.so.6                          0x00002b5a395a7460 __libc_start_main +
    245

    12   tmpcfmc4ejd                        0x0000558719c4a649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    var odds = [Int]()\n    var sorted_evens = [Int]()\n    var sorted_l\
    \ = [Int]()\n    for (index, value) in l.enumerated() {\n        if index % 2\
    \ == 0 {\n            odds.append(value)\n        } else {\n            evens.append(value)\n\
    \        }\n    }\n    sorted_evens = evens.sorted()\n    for (index, value) in\
    \ odds.enumerated() {\n        sorted_l.append(value)\n        sorted_l.append(sorted_evens[index])\n\
    \    }\n    return sorted_l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b11420a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1141d9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1141d9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1141d9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1141d99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1141b99e83 <unavailable> + 188035

    6    tmpi_4g4vvz                        0x000055965605008e <unavailable> + 8334

    7    tmpi_4g4vvz                        0x000055965604f734 <unavailable> + 5940

    8    libc.so.6                          0x00002b114228f460 __libc_start_main +
    245

    9    tmpi_4g4vvz                        0x000055965604f419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    var odds = [Int]()\n    for i in 0..<l.count {\n        if i\
    \ % 2 == 0 {\n            odds.append(l[i])\n        } else {\n            evens.append(l[i])\n\
    \        }\n    }\n    evens.sort()\n    for i in 0..<evens.count {\n        odds.insert(evens[i],\
    \ at: i * 2 + 1)\n    }\n    return odds\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpqxzulf4s/tmpqxzulf4s.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec8dcc5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec8d9bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec8d9bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec8d9bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqxzulf4s                        0x00005649590f99d3 <unavailable> + 6611

    5    libc.so.6                          0x00002aec8deb1460 __libc_start_main +
    245

    6    tmpqxzulf4s                        0x00005649590f9429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var result = l\n    var even_indicies\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ even_indicies.append(i)\n        }\n    }\n    for i in even_indicies {\n  \
    \      result[i] = sort_even_helper(l: l, index: i)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmppzi7k1er.swift:18:21: error: cannot find 'sort_even_helper' in\
    \ scope\n        result[i] = sort_even_helper(l: l, index: i)\n              \
    \      ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824709
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even_indicies\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ even_indicies.append(i)\n        }\n    }\n    for i in 0..<even_indicies.count\
    \ {\n        for j in 0..<even_indicies.count {\n            if l[even_indicies[i]]\
    \ < l[even_indicies[j]] {\n                let temp = l[even_indicies[i]]\n  \
    \              l[even_indicies[i]] = l[even_indicies[j]]\n                l[even_indicies[j]]\
    \ = temp\n            }\n        }\n    }\n    return l\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824709
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            l[i] = evens[i/2]\n        }\n    }\n\
    \    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    if l.count == 0 {\n     \
    \   return []\n    }\n    if l.count == 1 {\n        return l\n    }\n    var\
    \ l = l\n    var l_even = [Int]()\n    var l_odd = [Int]()\n    for (index, value)\
    \ in l.enumerated() {\n        if index % 2 == 0 {\n            l_even.append(value)\n\
    \        } else {\n            l_odd.append(value)\n        }\n    }\n    l_even.sort()\n\
    \    for (index, value) in l_even.enumerated() {\n        l[index * 2] = value\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    var odds = [Int]()\n    for (index, value) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            odds.append(value)\n        } else\
    \ {\n            evens.append(value)\n        }\n    }\n    evens.sort()\n   \
    \ for (index, value) in evens.enumerated() {\n        l[index * 2 + 1] = value\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpcvwiz4w0/tmpcvwiz4w0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47dba8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47db786b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47db786988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47db7857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcvwiz4w0                        0x000055d428647a43 <unavailable> + 6723

    5    libc.so.6                          0x00002b47dbc7b460 __libc_start_main +
    245

    6    tmpcvwiz4w0                        0x000055d428647499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even_indicies:\
    \ [Int] = []\n    var odd_indicies: [Int] = []\n    for i in 0..<l.count {\n \
    \       if i % 2 == 0 {\n            even_indicies.append(l[i])\n        } else\
    \ {\n            odd_indicies.append(l[i])\n        }\n    }\n    even_indicies.sort()\n\
    \    for i in 0..<even_indicies.count {\n        l[2*i] = even_indicies[i]\n \
    \   }\n    for i in 0..<odd_indicies.count {\n        l[2*i+1] = odd_indicies[i]\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824709
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var i = 0\n\
    \    while i < l.count {\n        if i % 2 == 0 {\n            i += 1\n      \
    \      continue\n        }\n        var j = i + 1\n        while j < l.count {\n\
    \            if l[j] < l[i] {\n                let temp = l[i]\n             \
    \   l[i] = l[j]\n                l[j] = temp\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpj_1pc854/tmpj_1pc854.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac927f4ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac927c41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac927c41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac927c407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj_1pc854                        0x00005648f2156713 <unavailable> + 5907

    5    libc.so.6                          0x00002ac928136460 __libc_start_main +
    245

    6    tmpj_1pc854                        0x00005648f2156169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        if i + 1 < l.count {\n            if l[i]\
    \ > l[i + 1] {\n                l.swapAt(i, i + 1)\n            }\n        }\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpd6iwumme/tmpd6iwumme.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6578724c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b657841bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b657841b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b657841a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd6iwumme                        0x000055ad2bd118d3 <unavailable> + 6355

    5    libc.so.6                          0x00002b6578910460 __libc_start_main +
    245

    6    tmpd6iwumme                        0x000055ad2bd11329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    var odds = [Int]()\n    var sorted_evens = [Int]()\n    var sorted_l\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ odds.append(l[i])\n        } else {\n            evens.append(l[i])\n      \
    \  }\n    }\n    sorted_evens = evens.sorted()\n    for i in 0..<l.count {\n \
    \       if i % 2 == 0 {\n            sorted_l.append(odds[i/2])\n        } else\
    \ {\n            sorted_l.append(sorted_evens[i/2])\n        }\n    }\n    return\
    \ sorted_l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpzmuepdi2/tmpzmuepdi2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6377fd4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6377ccbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6377ccb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6377cca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzmuepdi2                        0x0000559e9cc70903 <unavailable> + 6403

    5    libc.so.6                          0x00002b63781c0460 __libc_start_main +
    245

    6    tmpzmuepdi2                        0x0000559e9cc70359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    var odds = [Int]()\n    for (index, value) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            odds.append(value)\n        } else\
    \ {\n            evens.append(value)\n        }\n    }\n    evens.sort()\n   \
    \ for (index, value) in evens.enumerated() {\n        l[index * 2 + 1] = value\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpcvwiz4w0/tmpcvwiz4w0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47dba8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47db786b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47db786988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47db7857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcvwiz4w0                        0x000055d428647a43 <unavailable> + 6723

    5    libc.so.6                          0x00002b47dbc7b460 __libc_start_main +
    245

    6    tmpcvwiz4w0                        0x000055d428647499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var result = l\n    var even_indicies\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ even_indicies.append(i)\n        }\n    }\n    for i in even_indicies {\n  \
    \      var temp = [Int]()\n        for j in i..<l.count {\n            if j %\
    \ 2 == 0 {\n                temp.append(l[j])\n            }\n        }\n    \
    \    temp.sort()\n        for j in 0..<temp.count {\n            result[i + j]\
    \ = temp[j]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp55q0zl7b/tmp55q0zl7b.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8456eccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456bc3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456bc3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8456bc27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp55q0zl7b                        0x000055853eb3c984 <unavailable> + 6532

    5    libc.so.6                          0x00002b84570b8460 __libc_start_main +
    245

    6    tmp55q0zl7b                        0x000055853eb3c589 <unavailable> + 5513

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n        evens.append(l[i])\n\
    \    }\n    evens.sort()\n    for i in stride(from: 0, to: l.count, by: 2) {\n\
    \        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even_indicies: [Int]\
    \ = []\n    var odd_indicies: [Int] = []\n    for (index, value) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            even_indicies.append(value)\n  \
    \      } else {\n            odd_indicies.append(value)\n        }\n    }\n  \
    \  even_indicies.sort()\n    var result: [Int] = []\n    for (index, value) in\
    \ even_indicies.enumerated() {\n        result.append(value)\n        result.append(odd_indicies[index])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b468dbaec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b468d8a5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b468d8a5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b468d8a513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b468d8a4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b468d6a4e83 <unavailable> + 188035

    6    tmpdplqcakp                        0x00005573e3099042 <unavailable> + 8258

    7    tmpdplqcakp                        0x00005573e3098764 <unavailable> + 5988

    8    libc.so.6                          0x00002b468dd9a460 __libc_start_main +
    245

    9    tmpdplqcakp                        0x00005573e3098449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even_indicies\
    \ = [Int]()\n    var odd_indicies = [Int]()\n    for i in 0..<l.count {\n    \
    \    if i % 2 == 0 {\n            even_indicies.append(i)\n        } else {\n\
    \            odd_indicies.append(i)\n        }\n    }\n    for i in even_indicies\
    \ {\n        for j in even_indicies {\n            if l[i] < l[j] {\n        \
    \        let temp = l[i]\n                l[i] = l[j]\n                l[j] =\
    \ temp\n            }\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_copy = l\n    for i\
    \ in stride(from: 0, to: l.count, by: 2) {\n        if i + 1 < l.count {\n   \
    \         if l[i] > l[i + 1] {\n                l_copy[i] = l[i + 1]\n       \
    \         l_copy[i + 1] = l[i]\n            }\n        }\n    }\n    return l_copy\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3cd5s6lp/tmp3cd5s6lp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afac9b17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afac980eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afac980e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afac980d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3cd5s6lp                        0x0000563fa952d883 <unavailable> + 6275

    5    libc.so.6                          0x00002afac9d03460 __libc_start_main +
    245

    6    tmp3cd5s6lp                        0x0000563fa952d2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_even = [Int]()\n  \
    \  var l_odd = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            l_even.append(l[i])\n        } else {\n            l_odd.append(l[i])\n\
    \        }\n    }\n    l_even.sort()\n    var l_new = [Int]()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            l_new.append(l_even[i/2])\n        }\
    \ else {\n            l_new.append(l_odd[i/2])\n        }\n    }\n    return l_new\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    var odds = [Int]()\n    var result = [Int]()\n    for (index,\
    \ value) in l.enumerated() {\n        if index % 2 == 0 {\n            odds.append(value)\n\
    \        } else {\n            evens.append(value)\n        }\n    }\n    evens.sort()\n\
    \    for (index, value) in l.enumerated() {\n        if index % 2 == 0 {\n   \
    \         result.append(value)\n        } else {\n            result.append(evens.removeFirst())\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpspejxmkr/tmpspejxmkr.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abca2284c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abca1f7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abca1f7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abca1f7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpspejxmkr                        0x000055c55b9a2a93 <unavailable> + 6803

    5    libc.so.6                          0x00002abca2470460 __libc_start_main +
    245

    6    tmpspejxmkr                        0x000055c55b9a24e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even_indicies\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ even_indicies.append(i)\n        }\n    }\n    for i in 0..<even_indicies.count\
    \ {\n        for j in i..<even_indicies.count {\n            if l[even_indicies[i]]\
    \ > l[even_indicies[j]] {\n                let temp = l[even_indicies[i]]\n  \
    \              l[even_indicies[i]] = l[even_indicies[j]]\n                l[even_indicies[j]]\
    \ = temp\n            }\n        }\n    }\n    return l\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824709
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens:\
    \ [Int] = []\n    var odds: [Int] = []\n    var i = 0\n    while i < l.count {\n\
    \        if i % 2 == 0 {\n            odds.append(l[i])\n        } else {\n  \
    \          evens.append(l[i])\n        }\n        i += 1\n    }\n    evens.sort()\n\
    \    i = 0\n    while i < l.count {\n        if i % 2 == 0 {\n            l[i]\
    \ = odds[i / 2]\n        } else {\n            l[i] = evens[i / 2]\n        }\n\
    \        i += 1\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpq_on850v/tmpq_on850v.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a621cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a61ec6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a61ec6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a61ec57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq_on850v                        0x000055b762bc4883 <unavailable> + 6275

    5    libc.so.6                          0x00002b9a623bb460 __libc_start_main +
    245

    6    tmpq_on850v                        0x000055b762bc42d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        if i + 1 < l.count {\n            if l[i]\
    \ > l[i + 1] {\n                l.swapAt(i, i + 1)\n            }\n        }\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpd6iwumme/tmpd6iwumme.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6578724c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b657841bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b657841b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b657841a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd6iwumme                        0x000055ad2bd118d3 <unavailable> + 6355

    5    libc.so.6                          0x00002b6578910460 __libc_start_main +
    245

    6    tmpd6iwumme                        0x000055ad2bd11329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even_indicies\
    \ = [Int]()\n    var even_values = [Int]()\n    for (index, value) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            even_indicies.append(index)\n  \
    \          even_values.append(value)\n        }\n    }\n    even_values.sort()\n\
    \    for (index, value) in even_indicies.enumerated() {\n        l[value] = even_values[index]\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    var result = [Int]()\n    for i in 0..<l.count {\n      \
    \  if i % 2 == 0 {\n            odd.append(l[i])\n        } else {\n         \
    \   even.append(l[i])\n        }\n    }\n    even.sort()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            result.append(odd[i/2])\n        } else\
    \ {\n            result.append(even[i/2])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmphhkhlh5l/tmphhkhlh5l.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad34f264c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad34ef5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad34ef5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad34ef5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphhkhlh5l                        0x00005621719e2983 <unavailable> + 6531

    5    libc.so.6                          0x00002ad34f450460 __libc_start_main +
    245

    6    tmphhkhlh5l                        0x00005621719e23d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            l[i] = evens[i/2]\n        }\n    }\n\
    \    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_even = [Int]()\n  \
    \  var l_odd = [Int]()\n    var l_sorted = [Int]()\n    for (index, value) in\
    \ l.enumerated() {\n        if index % 2 == 0 {\n            l_even.append(value)\n\
    \        } else {\n            l_odd.append(value)\n        }\n    }\n    l_even.sort()\n\
    \    for (index, value) in l_even.enumerated() {\n        l_sorted.append(value)\n\
    \        l_sorted.append(l_odd[index])\n    }\n    return l_sorted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b37ee682c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37ee379561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b37ee379286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b37ee37913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b37ee378bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b37ee178e83 <unavailable> + 188035

    6    tmpk0khh2g0                        0x000055b87c51d071 <unavailable> + 8305

    7    tmpk0khh2g0                        0x000055b87c51c7b4 <unavailable> + 6068

    8    libc.so.6                          0x00002b37ee86e460 __libc_start_main +
    245

    9    tmpk0khh2g0                        0x000055b87c51c499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var result: [Int] = []\n\
    \    var evens: [Int] = []\n    for (i, num) in l.enumerated() {\n        if i\
    \ % 2 == 0 {\n            result.append(num)\n        } else {\n            evens.append(num)\n\
    \        }\n    }\n    evens.sort()\n    for (i, num) in evens.enumerated() {\n\
    \        result.insert(num, at: 2 * i + 1)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpvc_c20rv/tmpvc_c20rv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0f14c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0f11bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0f11bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0f11ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvc_c20rv                        0x0000555c7df139f3 <unavailable> + 6643

    5    libc.so.6                          0x00002ad0f16b0460 __libc_start_main +
    245

    6    tmpvc_c20rv                        0x0000555c7df13449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            continue\n        }\n        var j =\
    \ i\n        while j > 0 && l[j] < l[j - 1] {\n            l.swapAt(j, j - 1)\n\
    \            j -= 1\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp1klx3t24/tmp1klx3t24.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaec4f86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaec4c7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaec4c7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaec4c7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1klx3t24                        0x000056288e30c853 <unavailable> + 6227

    5    libc.so.6                          0x00002aaec5172460 __libc_start_main +
    245

    6    tmp1klx3t24                        0x000056288e30c2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even_indicies:\
    \ [Int] = []\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n          \
    \  even_indicies.append(i)\n        }\n    }\n    for i in even_indicies {\n \
    \       let even_list = l[i+1..<l.count]\n        let sorted_even_list = even_list.sorted()\n\
    \        l.removeSubrange(i+1..<l.count)\n        l.append(contentsOf: sorted_even_list)\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpl8ko09jk/tmpl8ko09jk.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba36bc5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba36b954b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba36b954988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba36b9537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl8ko09jk                        0x000055f561b88bd3 <unavailable> + 7123

    5    libc.so.6                          0x00002ba36be49460 __libc_start_main +
    245

    6    tmpl8ko09jk                        0x000055f561b88629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        if i + 1 < l.count {\n            if l[i]\
    \ > l[i + 1] {\n                l.swapAt(i, i + 1)\n            }\n        }\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpd6iwumme/tmpd6iwumme.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6578724c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b657841bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b657841b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b657841a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd6iwumme                        0x000055ad2bd118d3 <unavailable> + 6355

    5    libc.so.6                          0x00002b6578910460 __libc_start_main +
    245

    6    tmpd6iwumme                        0x000055ad2bd11329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even_indicies:\
    \ [Int] = []\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n          \
    \  even_indicies.append(i)\n        }\n    }\n    var even_values: [Int] = []\n\
    \    for i in even_indicies {\n        even_values.append(l[i])\n    }\n    even_values.sort()\n\
    \    for i in 0..<even_values.count {\n        l[even_indicies[i]] = even_values[i]\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824709
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even_indicies\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ even_indicies.append(i)\n        }\n    }\n    var even_values = [Int]()\n \
    \   for i in even_indicies {\n        even_values.append(l[i])\n    }\n    even_values.sort()\n\
    \    for i in 0..<even_values.count {\n        l[even_indicies[i]] = even_values[i]\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824709
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even_indicies\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ even_indicies.append(i)\n        }\n    }\n    for i in even_indicies {\n  \
    \      l[i] = sort_even_helper(l[i])\n    }\n    return l\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpmezr7w6x.swift:18:16: error: cannot find 'sort_even_helper' in\
    \ scope\n        l[i] = sort_even_helper(l[i])\n               ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824709
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_copy = l\n    var even_indicies\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ even_indicies.append(i)\n        }\n    }\n    for i in even_indicies {\n  \
    \      l_copy[i] = l[i].sorted()\n    }\n    return l_copy\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpe4wta112.swift:18:26: error: value of type 'Int' has no member\
    \ 'sorted'\n        l_copy[i] = l[i].sorted()\n                    ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824709
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            l[i] = evens[i/2]\n        }\n    }\n\
    \    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var l_even\
    \ = [Int]()\n    var l_odd = [Int]()\n    for (index, element) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            l_even.append(element)\n       \
    \ } else {\n            l_odd.append(element)\n        }\n    }\n    l_even.sort()\n\
    \    for (index, element) in l_even.enumerated() {\n        l[index * 2] = element\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    var odds = [Int]()\n    for i in 0..<l.count {\n        if i\
    \ % 2 == 0 {\n            odds.append(l[i])\n        } else {\n            evens.append(l[i])\n\
    \        }\n    }\n    evens.sort()\n    for i in 0..<evens.count {\n        odds.insert(evens[i],\
    \ at: i * 2 + 1)\n    }\n    return odds\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpqxzulf4s/tmpqxzulf4s.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec8dcc5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec8d9bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec8d9bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec8d9bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqxzulf4s                        0x00005649590f99d3 <unavailable> + 6611

    5    libc.so.6                          0x00002aec8deb1460 __libc_start_main +
    245

    6    tmpqxzulf4s                        0x00005649590f9429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n        evens.append(l[i])\n\
    \    }\n    evens.sort()\n    for i in stride(from: 0, to: l.count, by: 2) {\n\
    \        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            continue\n        }\n        for j in\
    \ 0..<l.count {\n            if j % 2 == 0 {\n                continue\n     \
    \       }\n            if l[i] < l[j] {\n                let temp = l[i]\n   \
    \             l[i] = l[j]\n                l[j] = temp\n            }\n      \
    \  }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpxvczf2__/tmpxvczf2__.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b987beaec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b987bba5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b987bba5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b987bba47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxvczf2__                        0x000055eab0dcc803 <unavailable> + 6147

    5    libc.so.6                          0x00002b987c09a460 __libc_start_main +
    245

    6    tmpxvczf2__                        0x000055eab0dcc259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        let slice = l[i..<l.count]\n        let sorted\
    \ = slice.sorted()\n        for j in 0..<slice.count {\n            l[i+j] = sorted[j]\n\
    \        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp6hoh4hku/tmp6hoh4hku.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b284178dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2841484b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2841484988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28414837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6hoh4hku                        0x00005595c97e5c03 <unavailable> + 7171

    5    libc.so.6                          0x00002b2841979460 __libc_start_main +
    245

    6    tmp6hoh4hku                        0x00005595c97e5659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    var odds = [Int]()\n    for (i, x) in l.enumerated() {\n    \
    \    if i % 2 == 0 {\n            odds.append(x)\n        } else {\n         \
    \   evens.append(x)\n        }\n    }\n    evens.sort()\n    for (i, x) in evens.enumerated()\
    \ {\n        l[i * 2 + 1] = x\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3z7ialz7/tmp3z7ialz7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac86f7dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac86f4d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac86f4d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac86f4d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3z7ialz7                        0x00005627f0a7aa43 <unavailable> + 6723

    5    libc.so.6                          0x00002ac86f9ca460 __libc_start_main +
    245

    6    tmp3z7ialz7                        0x00005627f0a7a499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even_indicies\
    \ = [Int]()\n    var odd_indicies = [Int]()\n    for i in 0..<l.count {\n    \
    \    if i % 2 == 0 {\n            even_indicies.append(i)\n        } else {\n\
    \            odd_indicies.append(i)\n        }\n    }\n    var even_values = [Int]()\n\
    \    for i in even_indicies {\n        even_values.append(l[i])\n    }\n    even_values.sort()\n\
    \    for i in 0..<even_indicies.count {\n        l[even_indicies[i]] = even_values[i]\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824709
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even_indices\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ even_indices.append(i)\n        }\n    }\n    for i in 0..<even_indices.count\
    \ {\n        for j in 0..<even_indices.count - 1 {\n            if l[even_indices[j]]\
    \ > l[even_indices[j + 1]] {\n                let temp = l[even_indices[j]]\n\
    \                l[even_indices[j]] = l[even_indices[j + 1]]\n               \
    \ l[even_indices[j + 1]] = temp\n            }\n        }\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even_indicies = [Int]()\n\
    \    var odd_indicies = [Int]()\n    var sorted_even_indicies = [Int]()\n    var\
    \ sorted_list = [Int]()\n    \n    for i in 0..<l.count {\n        if i % 2 ==\
    \ 0 {\n            odd_indicies.append(l[i])\n        } else {\n            even_indicies.append(l[i])\n\
    \        }\n    }\n    \n    sorted_even_indicies = even_indicies.sorted()\n \
    \   \n    for i in 0..<l.count {\n        if i % 2 == 0 {\n            sorted_list.append(odd_indicies[i/2])\n\
    \        } else {\n            sorted_list.append(sorted_even_indicies[i/2])\n\
    \        }\n    }\n    \n    return sorted_list\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp5_9rp7o2/tmp5_9rp7o2.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeef034fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeef0046b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeef0046988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeef00457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5_9rp7o2                        0x000056245b8d8903 <unavailable> + 6403

    5    libc.so.6                          0x00002aeef053b460 __libc_start_main +
    245

    6    tmp5_9rp7o2                        0x000056245b8d8359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n        evens.append(l[i])\n\
    \    }\n    evens.sort()\n    for i in stride(from: 0, to: l.count, by: 2) {\n\
    \        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i...i+1] = l[i...i+1].sorted()\n    }\n\
    \    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmparnbdjri.swift:12:33: error: cannot assign value of type '[Int]'\
    \ to subscript of type 'ArraySlice<Int>'\n        l[i...i+1] = l[i...i+1].sorted()\n\
    \                     ~~~~~~~~~~~^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824709
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even_indicies\
    \ = [Int]()\n    var odd_indicies = [Int]()\n    for i in 0..<l.count {\n    \
    \    if i % 2 == 0 {\n            even_indicies.append(i)\n        } else {\n\
    \            odd_indicies.append(i)\n        }\n    }\n    for i in even_indicies\
    \ {\n        for j in even_indicies {\n            if l[i] < l[j] {\n        \
    \        let temp = l[i]\n                l[i] = l[j]\n                l[j] =\
    \ temp\n            }\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var i = 0\n\
    \    while i < l.count {\n        if i % 2 == 0 {\n            i += 1\n      \
    \      continue\n        }\n        var j = i\n        while j > 0 && l[j] < l[j\
    \ - 1] {\n            l.swapAt(j, j - 1)\n            j -= 1\n        }\n    \
    \    i += 1\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpv0lwwil4/tmpv0lwwil4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d0e10ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d0de05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d0de05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d0de047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0lwwil4                        0x0000561e5756f753 <unavailable> + 5971

    5    libc.so.6                          0x00002b1d0e2fa460 __libc_start_main +
    245

    6    tmpv0lwwil4                        0x0000561e5756f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    var odds = [Int]()\n    for i in 0..<l.count {\n        if i\
    \ % 2 == 0 {\n            odds.append(l[i])\n        } else {\n            evens.append(l[i])\n\
    \        }\n    }\n    evens.sort()\n    for i in 0..<evens.count {\n        odds.insert(evens[i],\
    \ at: i * 2 + 1)\n    }\n    return odds\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpqxzulf4s/tmpqxzulf4s.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec8dcc5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec8d9bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec8d9bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec8d9bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqxzulf4s                        0x00005649590f99d3 <unavailable> + 6611

    5    libc.so.6                          0x00002aec8deb1460 __libc_start_main +
    245

    6    tmpqxzulf4s                        0x00005649590f9429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var i = 0\n\
    \    while i < l.count {\n        if i % 2 == 0 {\n            i += 1\n      \
    \      continue\n        }\n        var j = i + 1\n        while j < l.count {\n\
    \            if l[j] < l[i] {\n                let temp = l[i]\n             \
    \   l[i] = l[j]\n                l[j] = temp\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpj_1pc854/tmpj_1pc854.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac927f4ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac927c41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac927c41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac927c407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj_1pc854                        0x00005648f2156713 <unavailable> + 5907

    5    libc.so.6                          0x00002ac928136460 __libc_start_main +
    245

    6    tmpj_1pc854                        0x00005648f2156169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    var odds = [Int]()\n    for (i, num) in l.enumerated() {\n  \
    \      if i % 2 == 0 {\n            odds.append(num)\n        } else {\n     \
    \       evens.append(num)\n        }\n    }\n    evens.sort()\n    for (i, num)\
    \ in evens.enumerated() {\n        l[i * 2 + 1] = num\n    }\n    return l\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp60q4evqy/tmp60q4evqy.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4880d12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4880a09b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4880a09988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4880a087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp60q4evqy                        0x00005565bea99a43 <unavailable> + 6723

    5    libc.so.6                          0x00002b4880efe460 __libc_start_main +
    245

    6    tmp60q4evqy                        0x00005565bea99499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    var odds = [Int]()\n    var result = [Int]()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            odds.append(l[i])\n        } else {\n\
    \            evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i\
    \ in 0..<l.count {\n        if i % 2 == 0 {\n            result.append(odds[i/2])\n\
    \        } else {\n            result.append(evens[i/2])\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpm0en02j1/tmpm0en02j1.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f22210c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f21f07b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f21f07988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f21f067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm0en02j1                        0x0000560200ee7983 <unavailable> + 6531

    5    libc.so.6                          0x00002b9f223fc460 __libc_start_main +
    245

    6    tmpm0en02j1                        0x0000560200ee73d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var i = 0\n\
    \    while i < l.count {\n        if i % 2 == 0 {\n            i += 1\n      \
    \      continue\n        }\n        var j = i + 1\n        while j < l.count {\n\
    \            if l[j] < l[i] {\n                let temp = l[i]\n             \
    \   l[i] = l[j]\n                l[j] = temp\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpj_1pc854/tmpj_1pc854.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac927f4ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac927c41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac927c41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac927c407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj_1pc854                        0x00005648f2156713 <unavailable> + 5907

    5    libc.so.6                          0x00002ac928136460 __libc_start_main +
    245

    6    tmpj_1pc854                        0x00005648f2156169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            l[i] = evens[i/2]\n        }\n    }\n\
    \    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens = [Int]()\n   \
    \ var odds = [Int]()\n    var result = [Int]()\n    for i in 0..<l.count {\n \
    \       if i % 2 == 0 {\n            odds.append(l[i])\n        } else {\n   \
    \         evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i in\
    \ 0..<l.count {\n        if i % 2 == 0 {\n            result.append(odds[i/2])\n\
    \        } else {\n            result.append(evens[i/2])\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpy2fu1orj/tmpy2fu1orj.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b995aefdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b995abf4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b995abf4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b995abf37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy2fu1orj                        0x000055eddc7ca983 <unavailable> + 6531

    5    libc.so.6                          0x00002b995b0e9460 __libc_start_main +
    245

    6    tmpy2fu1orj                        0x000055eddc7ca3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            l[i] = evens[i/2]\n        }\n    }\n\
    \    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_copy = l\n    var even_indicies\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ even_indicies.append(i)\n        }\n    }\n    for i in even_indicies {\n  \
    \      l_copy[i] = l_copy[i].sorted()\n    }\n    return l_copy\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp9psie0gw.swift:18:31: error: value of type 'Int' has no member\
    \ 'sorted'\n        l_copy[i] = l_copy[i].sorted()\n                    ~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824709
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var new_l = l\n    var even_l\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ even_l.append(l[i])\n        }\n    }\n    even_l.sort()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            new_l[i] = even_l[i/2]\n        }\n\
    \    }\n    return new_l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        let slice = l[i..<l.count]\n        let sorted\
    \ = slice.sorted()\n        for j in 0..<slice.count {\n            l[i+j] = sorted[j]\n\
    \        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp6hoh4hku/tmp6hoh4hku.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b284178dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2841484b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2841484988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28414837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6hoh4hku                        0x00005595c97e5c03 <unavailable> + 7171

    5    libc.so.6                          0x00002b2841979460 __libc_start_main +
    245

    6    tmp6hoh4hku                        0x00005595c97e5659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var result = l\n    var evens\
    \ = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n        evens.append(l[i])\n\
    \    }\n    evens.sort()\n    for i in stride(from: 0, to: l.count, by: 2) {\n\
    \        result[i] = evens[i/2]\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824709
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var i = 0\n\
    \    while i < l.count {\n        if i % 2 == 0 {\n            l[i] = l[i]\n \
    \       } else {\n            l[i] = l[i].sorted()[0]\n        }\n        i +=\
    \ 1\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp8r8ync00.swift:16:21: error: no exact matches in call to subscript\
    \ \n            l[i] = l[i].sorted()[0]\n                    ^\nSwift.Array:17:23:\
    \ note: candidate expects value of type 'Range<Int>' for parameter #1 (got 'Int')\n\
    \    @inlinable public subscript(bounds: Range<Int>) -> ArraySlice<Element> {\
    \ get set }\n                      ^\nSwift.Collection:3:23: note: candidate expects\
    \ value of type '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n    @inlinable\
    \ public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get }\n \
    \                     ^\nSwift.MutableCollection:3:23: note: candidate expects\
    \ value of type '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n    @inlinable\
    \ public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get set }\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var i = 0\n\
    \    while i < l.count {\n        if i % 2 == 0 {\n            i += 1\n      \
    \      continue\n        }\n        var j = i + 1\n        while j < l.count {\n\
    \            if l[j] < l[i] {\n                let temp = l[i]\n             \
    \   l[i] = l[j]\n                l[j] = temp\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpj_1pc854/tmpj_1pc854.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac927f4ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac927c41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac927c41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac927c407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj_1pc854                        0x00005648f2156713 <unavailable> + 5907

    5    libc.so.6                          0x00002ac928136460 __libc_start_main +
    245

    6    tmpj_1pc854                        0x00005648f2156169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even_indicies\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ even_indicies.append(i)\n        }\n    }\n    for i in 0..<even_indicies.count\
    \ {\n        for j in i+1..<even_indicies.count {\n            if l[even_indicies[i]]\
    \ > l[even_indicies[j]] {\n                let temp = l[even_indicies[i]]\n  \
    \              l[even_indicies[i]] = l[even_indicies[j]]\n                l[even_indicies[j]]\
    \ = temp\n            }\n        }\n    }\n    return l\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens = [Int]()\n   \
    \ var odds = [Int]()\n    var result = [Int]()\n    for i in 0..<l.count {\n \
    \       if i % 2 == 0 {\n            odds.append(l[i])\n        } else {\n   \
    \         evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i in\
    \ 0..<l.count {\n        if i % 2 == 0 {\n            result.append(odds[i/2])\n\
    \        } else {\n            result.append(evens[i/2])\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpy2fu1orj/tmpy2fu1orj.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b995aefdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b995abf4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b995abf4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b995abf37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy2fu1orj                        0x000055eddc7ca983 <unavailable> + 6531

    5    libc.so.6                          0x00002b995b0e9460 __libc_start_main +
    245

    6    tmpy2fu1orj                        0x000055eddc7ca3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even_indicies:\
    \ [Int] = []\n    var odd_indicies: [Int] = []\n    for i in 0..<l.count {\n \
    \       if i % 2 == 0 {\n            even_indicies.append(l[i])\n        } else\
    \ {\n            odd_indicies.append(l[i])\n        }\n    }\n    even_indicies.sort()\n\
    \    for i in 0..<l.count {\n        if i % 2 == 0 {\n            l[i] = even_indicies[i/2]\n\
    \        } else {\n            l[i] = odd_indicies[i/2]\n        }\n    }\n  \
    \  return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    var odds = [Int]()\n    for i in 0..<l.count {\n        if i\
    \ % 2 == 0 {\n            odds.append(l[i])\n        } else {\n            evens.append(l[i])\n\
    \        }\n    }\n    evens.sort()\n    for i in 0..<evens.count {\n        odds.insert(evens[i],\
    \ at: i * 2 + 1)\n    }\n    return odds\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpqxzulf4s/tmpqxzulf4s.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec8dcc5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec8d9bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec8d9bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec8d9bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqxzulf4s                        0x00005649590f99d3 <unavailable> + 6611

    5    libc.so.6                          0x00002aec8deb1460 __libc_start_main +
    245

    6    tmpqxzulf4s                        0x00005649590f9429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    var odds = [Int]()\n    for i in 0..<l.count {\n        if i\
    \ % 2 == 0 {\n            odds.append(l[i])\n        } else {\n            evens.append(l[i])\n\
    \        }\n    }\n    evens.sort()\n    for i in 0..<evens.count {\n        l[i\
    \ * 2 + 1] = evens[i]\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp5dc0dos6/tmp5dc0dos6.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e04772c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e04469b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e04469988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e044687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5dc0dos6                        0x00005638d34a99d3 <unavailable> + 6611

    5    libc.so.6                          0x00002b6e0495e460 __libc_start_main +
    245

    6    tmp5dc0dos6                        0x00005638d34a9429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even_indicies\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ even_indicies.append(i)\n        }\n    }\n    for i in even_indicies {\n  \
    \      var sub_list = [Int]()\n        for j in i..<l.count {\n            if\
    \ j % 2 == 0 {\n                sub_list.append(l[j])\n            }\n       \
    \ }\n        sub_list.sort()\n        for j in i..<l.count {\n            if j\
    \ % 2 == 0 {\n                l[j] = sub_list[j - i]\n            }\n        }\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adbab6b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbab3a8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adbab3a8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adbab3a813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adbab3a7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adbab1a7e83 <unavailable> + 188035

    6    tmp8_j7894h                        0x0000564b5ffc0565 <unavailable> + 9573

    7    tmp8_j7894h                        0x0000564b5ffbf8a4 <unavailable> + 6308

    8    libc.so.6                          0x00002adbab89d460 __libc_start_main +
    245

    9    tmp8_j7894h                        0x0000564b5ffbf589 <unavailable> + 5513

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_even: [Int] = []\n\
    \    var l_odd: [Int] = []\n    var l_sorted: [Int] = []\n    for (index, value)\
    \ in l.enumerated() {\n        if index % 2 == 0 {\n            l_odd.append(value)\n\
    \        } else {\n            l_even.append(value)\n        }\n    }\n    l_even.sort()\n\
    \    for (index, value) in l.enumerated() {\n        if index % 2 == 0 {\n   \
    \         l_sorted.append(value)\n        } else {\n            l_sorted.append(l_even[0])\n\
    \            l_even.remove(at: 0)\n        }\n    }\n    return l_sorted\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmppe4fysk6/tmppe4fysk6.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3fa54fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3fa246b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3fa246988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3fa2457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppe4fysk6                        0x0000558fbc6a0a43 <unavailable> + 6723

    5    libc.so.6                          0x00002af3fa73b460 __libc_start_main +
    245

    6    tmppe4fysk6                        0x0000558fbc6a0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var result = l\n    for i\
    \ in stride(from: 0, to: l.count, by: 2) {\n        result[i] = l[i]\n    }\n\
    \    for i in stride(from: 1, to: l.count, by: 2) {\n        result[i] = l[i]\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpdp_kb3fi/tmpdp_kb3fi.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31410ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3140de2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3140de2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3140de17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdp_kb3fi                        0x000055ba0ace4883 <unavailable> + 6275

    5    libc.so.6                          0x00002b31412d7460 __libc_start_main +
    245

    6    tmpdp_kb3fi                        0x000055ba0ace42d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    var odds = [Int]()\n    for (i, x) in l.enumerated() {\n    \
    \    if i % 2 == 0 {\n            odds.append(x)\n        } else {\n         \
    \   evens.append(x)\n        }\n    }\n    evens.sort()\n    for (i, x) in evens.enumerated()\
    \ {\n        l[i * 2 + 1] = x\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3z7ialz7/tmp3z7ialz7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac86f7dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac86f4d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac86f4d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac86f4d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3z7ialz7                        0x00005627f0a7aa43 <unavailable> + 6723

    5    libc.so.6                          0x00002ac86f9ca460 __libc_start_main +
    245

    6    tmp3z7ialz7                        0x00005627f0a7a499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even =\
    \ [Int]()\n    var odd = [Int]()\n    for i in 0..<l.count {\n        if i % 2\
    \ == 0 {\n            even.append(l[i])\n        } else {\n            odd.append(l[i])\n\
    \        }\n    }\n    even.sort()\n    for i in 0..<even.count {\n        l[i\
    \ * 2] = even[i]\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824709
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            l[i] = evens[i/2]\n        }\n    }\n\
    \    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even_indicies\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ even_indicies.append(i)\n        }\n    }\n    for i in 0..<even_indicies.count\
    \ {\n        for j in 0..<even_indicies.count - 1 {\n            if l[even_indicies[j]]\
    \ > l[even_indicies[j + 1]] {\n                let temp = l[even_indicies[j]]\n\
    \                l[even_indicies[j]] = l[even_indicies[j + 1]]\n             \
    \   l[even_indicies[j + 1]] = temp\n            }\n        }\n    }\n    return\
    \ l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1,\
    \ 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2,\
    \ 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    var odds = [Int]()\n    for (i, e) in l.enumerated() {\n    \
    \    if i % 2 == 0 {\n            odds.append(e)\n        } else {\n         \
    \   evens.append(e)\n        }\n    }\n    evens.sort()\n    for (i, e) in evens.enumerated()\
    \ {\n        l[i * 2 + 1] = e\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp0ienu2jc/tmp0ienu2jc.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd20d47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd20a3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd20a3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd20a3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ienu2jc                        0x00005632ecbbea43 <unavailable> + 6723

    5    libc.so.6                          0x00002abd20f33460 __libc_start_main +
    245

    6    tmp0ienu2jc                        0x00005632ecbbe499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even_indicies:\
    \ [Int] = []\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n          \
    \  even_indicies.append(i)\n        }\n    }\n    for i in even_indicies {\n \
    \       var temp: [Int] = []\n        for j in i..<l.count {\n            if j\
    \ % 2 == 0 {\n                temp.append(l[j])\n            }\n        }\n  \
    \      temp.sort()\n        for j in i..<l.count {\n            if j % 2 == 0\
    \ {\n                l[j] = temp[j - i]\n            }\n        }\n    }\n   \
    \ return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aba2ef02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba2ebf9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aba2ebf9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aba2ebf913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aba2ebf8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aba2e9f8e83 <unavailable> + 188035

    6    tmpzqf5y8to                        0x000056475124652b <unavailable> + 9515

    7    tmpzqf5y8to                        0x0000564751245854 <unavailable> + 6228

    8    libc.so.6                          0x00002aba2f0ee460 __libc_start_main +
    245

    9    tmpzqf5y8to                        0x0000564751245539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            l[i] = evens[i/2]\n        }\n    }\n\
    \    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_copy = l\n    for i\
    \ in stride(from: 0, to: l.count, by: 2) {\n        l_copy[i] = l[i]\n    }\n\
    \    for i in stride(from: 1, to: l.count, by: 2) {\n        l_copy[i] = l[i]\n\
    \    }\n    return l_copy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpr0w0hf2_/tmpr0w0hf2_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac96e991c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac96e688b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac96e688988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac96e6877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr0w0hf2_                        0x000055efba7c3883 <unavailable> + 6275

    5    libc.so.6                          0x00002ac96eb7d460 __libc_start_main +
    245

    6    tmpr0w0hf2_                        0x000055efba7c32d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var i = 0\n\
    \    while i < l.count {\n        if i % 2 == 0 {\n            i += 1\n      \
    \      continue\n        }\n        var j = i + 1\n        while j < l.count {\n\
    \            if l[j] < l[i] {\n                l.swapAt(i, j)\n            }\n\
    \            j += 1\n        }\n        i += 1\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpqc06ed9y/tmpqc06ed9y.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93bcaf1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93bc7e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93bc7e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93bc7e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqc06ed9y                        0x00005581ac460753 <unavailable> + 5971

    5    libc.so.6                          0x00002b93bccdd460 __libc_start_main +
    245

    6    tmpqc06ed9y                        0x00005581ac4601a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var i = 0\n\
    \    while i < l.count {\n        if i % 2 == 0 {\n            i += 1\n      \
    \      continue\n        }\n        let sub = l[i...i+1]\n        let sorted =\
    \ sub.sorted()\n        l[i] = sorted[0]\n        l[i+1] = sorted[1]\n       \
    \ i += 2\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmptafgmr06/tmptafgmr06.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b63d67aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b63d64a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b63d64a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63d64a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptafgmr06                        0x0000564f66c4f943 <unavailable> + 6467

    5    libc.so.6                          0x00002b63d699a460 __libc_start_main +
    245

    6    tmptafgmr06                        0x0000564f66c4f399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824710
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    var odds = [Int]()\n    for (i, n) in l.enumerated() {\n    \
    \    if i % 2 == 0 {\n            odds.append(n)\n        } else {\n         \
    \   evens.append(n)\n        }\n    }\n    evens.sort()\n    for (i, n) in evens.enumerated()\
    \ {\n        l[i * 2 + 1] = n\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpn_1qf0im/tmpn_1qf0im.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6107d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6104c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6104c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6104c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn_1qf0im                        0x00005588e9c4aa43 <unavailable> + 6723

    5    libc.so.6                          0x00002ad6109be460 __libc_start_main +
    245

    6    tmpn_1qf0im                        0x00005588e9c4a499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824710
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even_list = [Int]()\n\
    \    var odd_list = [Int]()\n    var sorted_list = [Int]()\n    for (index, value)\
    \ in l.enumerated() {\n        if index % 2 == 0 {\n            even_list.append(value)\n\
    \        } else {\n            odd_list.append(value)\n        }\n    }\n    even_list.sort()\n\
    \    for (index, value) in even_list.enumerated() {\n        sorted_list.append(value)\n\
    \        sorted_list.append(odd_list[index])\n    }\n    return sorted_list\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002afc7f5e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc7f2d8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afc7f2d8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afc7f2d813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afc7f2d7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002afc7f0d7e83 <unavailable> + 188035

    6    tmpkae6o6cc                        0x0000562dee0c0071 <unavailable> + 8305

    7    tmpkae6o6cc                        0x0000562dee0bf7b4 <unavailable> + 6068

    8    libc.so.6                          0x00002afc7f7cd460 __libc_start_main +
    245

    9    tmpkae6o6cc                        0x0000562dee0bf499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824710
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var l_even\
    \ = [Int]()\n    var l_odd = [Int]()\n    for i in 0..<l.count {\n        if i\
    \ % 2 == 0 {\n            l_even.append(l[i])\n        } else {\n            l_odd.append(l[i])\n\
    \        }\n    }\n    l_even.sort()\n    var l_new = [Int]()\n    for i in 0..<l_even.count\
    \ {\n        l_new.append(l_even[i])\n        l_new.append(l_odd[i])\n    }\n\
    \    return l_new\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac105f51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac105c48561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac105c48286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac105c4813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac105c47bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac105a47e83 <unavailable> + 188035

    6    tmp_t41ck9e                        0x000055b349b2d0ac <unavailable> + 8364

    7    tmp_t41ck9e                        0x000055b349b2c6f4 <unavailable> + 5876

    8    libc.so.6                          0x00002ac10613d460 __libc_start_main +
    245

    9    tmp_t41ck9e                        0x000055b349b2c3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824710
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens = [Int]()\n   \
    \ var odds = [Int]()\n    var result = [Int]()\n    for (index, value) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            odds.append(value)\n        } else\
    \ {\n            evens.append(value)\n        }\n    }\n    evens.sort()\n   \
    \ for (index, value) in odds.enumerated() {\n        result.append(value)\n  \
    \      result.append(evens[index])\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b850586ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8505565561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8505565286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b850556513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8505564bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8505364e83 <unavailable> + 188035

    6    tmpo7vrzcp1                        0x0000563e88932071 <unavailable> + 8305

    7    tmpo7vrzcp1                        0x0000563e889317b4 <unavailable> + 6068

    8    libc.so.6                          0x00002b8505a5a460 __libc_start_main +
    245

    9    tmpo7vrzcp1                        0x0000563e88931499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    var odds = [Int]()\n    var result = [Int]()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            odds.append(l[i])\n        } else {\n\
    \            evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i\
    \ in 0..<l.count {\n        if i % 2 == 0 {\n            result.append(odds[i/2])\n\
    \        } else {\n            result.append(evens[i/2])\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpm0en02j1/tmpm0en02j1.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f22210c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f21f07b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f21f07988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f21f067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm0en02j1                        0x0000560200ee7983 <unavailable> + 6531

    5    libc.so.6                          0x00002b9f223fc460 __libc_start_main +
    245

    6    tmpm0en02j1                        0x0000560200ee73d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var l_even\
    \ = [Int]()\n    var l_odd = [Int]()\n    var l_even_sorted = [Int]()\n    var\
    \ l_sorted = [Int]()\n    var i = 0\n    for _ in l {\n        if i % 2 == 0 {\n\
    \            l_even.append(l[i])\n        } else {\n            l_odd.append(l[i])\n\
    \        }\n        i += 1\n    }\n    l_even_sorted = l_even.sorted()\n    i\
    \ = 0\n    for _ in l {\n        if i % 2 == 0 {\n            l_sorted.append(l_even_sorted[i/2])\n\
    \        } else {\n            l_sorted.append(l_odd[i/2])\n        }\n      \
    \  i += 1\n    }\n    return l_sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824710
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var new_l = l\n    var even_l\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ even_l.append(l[i])\n        }\n    }\n    even_l.sort()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            new_l[i] = even_l[i/2]\n        }\n\
    \    }\n    return new_l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824709
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even_indicies\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ even_indicies.append(i)\n        }\n    }\n    for i in 0..<even_indicies.count\
    \ {\n        for j in i+1..<even_indicies.count {\n            if l[even_indicies[i]]\
    \ > l[even_indicies[j]] {\n                let temp = l[even_indicies[i]]\n  \
    \              l[even_indicies[i]] = l[even_indicies[j]]\n                l[even_indicies[j]]\
    \ = temp\n            }\n        }\n    }\n    return l\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824709
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even_indicies\
    \ = [Int]()\n    var even_values = [Int]()\n    for i in 0..<l.count {\n     \
    \   if i % 2 == 0 {\n            even_indicies.append(i)\n            even_values.append(l[i])\n\
    \        }\n    }\n    even_values.sort()\n    for i in 0..<even_indicies.count\
    \ {\n        l[even_indicies[i]] = even_values[i]\n    }\n    return l\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens:\
    \ [Int] = []\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n          \
    \  evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            l[i] = evens[i/2]\n        }\n    }\n\
    \    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824710
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            continue\n        }\n        var j =\
    \ i\n        while j > 0 && l[j - 1] > l[j] {\n            l.swapAt(j - 1, j)\n\
    \            j -= 1\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpuq3zb5u6/tmpuq3zb5u6.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fc75cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fc72c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fc72c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fc72c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuq3zb5u6                        0x0000563626c4d853 <unavailable> + 6227

    5    libc.so.6                          0x00002b1fc77b9460 __libc_start_main +
    245

    6    tmpuq3zb5u6                        0x0000563626c4d2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659824710
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            l[i] = evens[i/2]\n        }\n    }\n\
    \    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens:\
    \ [Int] = []\n    for (i, x) in l.enumerated() {\n        if i % 2 == 0 {\n  \
    \          evens.append(x)\n        }\n    }\n    evens.sort()\n    for (i, x)\
    \ in l.enumerated() {\n        if i % 2 == 0 {\n            l[i] = evens.removeFirst()\n\
    \        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824710
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even_indicies\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ even_indicies.append(i)\n        }\n    }\n    for i in 0..<even_indicies.count\
    \ {\n        for j in 0..<even_indicies.count - 1 {\n            if l[even_indicies[j]]\
    \ > l[even_indicies[j + 1]] {\n                let temp = l[even_indicies[j]]\n\
    \                l[even_indicies[j]] = l[even_indicies[j + 1]]\n             \
    \   l[even_indicies[j + 1]] = temp\n            }\n        }\n    }\n    return\
    \ l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1,\
    \ 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2,\
    \ 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    var odds = [Int]()\n    for (index, value) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            odds.append(value)\n        } else\
    \ {\n            evens.append(value)\n        }\n    }\n    evens.sort()\n   \
    \ for (index, value) in evens.enumerated() {\n        l[index * 2 + 1] = value\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpcvwiz4w0/tmpcvwiz4w0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47dba8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47db786b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47db786988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47db7857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcvwiz4w0                        0x000055d428647a43 <unavailable> + 6723

    5    libc.so.6                          0x00002b47dbc7b460 __libc_start_main +
    245

    6    tmpcvwiz4w0                        0x000055d428647499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    var odds = [Int]()\n    for i in 0..<l.count {\n        if i\
    \ % 2 == 0 {\n            odds.append(l[i])\n        } else {\n            evens.append(l[i])\n\
    \        }\n    }\n    evens.sort()\n    for i in 0..<evens.count {\n        odds.insert(evens[i],\
    \ at: i * 2 + 1)\n    }\n    return odds\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpqxzulf4s/tmpqxzulf4s.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec8dcc5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec8d9bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec8d9bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec8d9bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqxzulf4s                        0x00005649590f99d3 <unavailable> + 6611

    5    libc.so.6                          0x00002aec8deb1460 __libc_start_main +
    245

    6    tmpqxzulf4s                        0x00005649590f9429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var new_l = l\n    var even_indicies\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ even_indicies.append(i)\n        }\n    }\n    for i in even_indicies {\n  \
    \      new_l[i] = l[i]\n    }\n    return new_l\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpd_xo7tk0/tmpd_xo7tk0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75bf90ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75bf601b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75bf601988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75bf6007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_xo7tk0                        0x000055b3e512fa13 <unavailable> + 6675

    5    libc.so.6                          0x00002b75bfaf6460 __libc_start_main +
    245

    6    tmpd_xo7tk0                        0x000055b3e512f469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659824710
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_even = [Int]()\n  \
    \  var l_odd = [Int]()\n    var l_sorted = [Int]()\n    for (index, element) in\
    \ l.enumerated() {\n        if index % 2 == 0 {\n            l_even.append(element)\n\
    \        } else {\n            l_odd.append(element)\n        }\n    }\n    l_even.sort()\n\
    \    for (index, element) in l_even.enumerated() {\n        l_sorted.append(element)\n\
    \        l_sorted.append(l_odd[index])\n    }\n    return l_sorted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e63745c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e6343c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7e6343c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7e6343c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7e6343bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7e6323be83 <unavailable> + 188035

    6    tmp5nk6hbe2                        0x000055ed494bd071 <unavailable> + 8305

    7    tmp5nk6hbe2                        0x000055ed494bc7b4 <unavailable> + 6068

    8    libc.so.6                          0x00002b7e63931460 __libc_start_main +
    245

    9    tmp5nk6hbe2                        0x000055ed494bc499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824710
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        if i + 1 < l.count {\n            if l[i]\
    \ > l[i + 1] {\n                l.swapAt(i, i + 1)\n            }\n        }\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpd6iwumme/tmpd6iwumme.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6578724c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b657841bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b657841b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b657841a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd6iwumme                        0x000055ad2bd118d3 <unavailable> + 6355

    5    libc.so.6                          0x00002b6578910460 __libc_start_main +
    245

    6    tmpd6iwumme                        0x000055ad2bd11329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even =\
    \ [Int]()\n    var odd = [Int]()\n    var i = 0\n    while i < l.count {\n   \
    \     if i % 2 == 0 {\n            odd.append(l[i])\n        } else {\n      \
    \      even.append(l[i])\n        }\n        i += 1\n    }\n    even.sort()\n\
    \    i = 0\n    while i < even.count {\n        l[i * 2 + 1] = even[i]\n     \
    \   i += 1\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmprxpgqb_9/tmprxpgqb_9.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7bcead6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7bce7cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7bce7cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7bce7cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprxpgqb_9                        0x0000560598d4d8e3 <unavailable> + 6371

    5    libc.so.6                          0x00002b7bcecc2460 __libc_start_main +
    245

    6    tmprxpgqb_9                        0x0000560598d4d339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824710
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        for j in stride(from: i + 2, to: l.count,\
    \ by: 2) {\n            if l[i] > l[j] {\n                l.swapAt(i, j)\n   \
    \         }\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824710
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            l[i] = evens[i/2]\n        }\n    }\n\
    \    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even_indicies\
    \ = [Int]()\n    var odd_indicies = [Int]()\n    for i in 0..<l.count {\n    \
    \    if i % 2 == 0 {\n            even_indicies.append(i)\n        } else {\n\
    \            odd_indicies.append(i)\n        }\n    }\n    for i in even_indicies\
    \ {\n        for j in even_indicies {\n            if l[i] < l[j] {\n        \
    \        l.swapAt(i, j)\n            }\n        }\n    }\n    return l\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824710
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens = [Int]()\n   \
    \ var odds = [Int]()\n    var result = [Int]()\n    for i in 0..<l.count {\n \
    \       if i % 2 == 0 {\n            odds.append(l[i])\n        } else {\n   \
    \         evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i in\
    \ 0..<l.count {\n        if i % 2 == 0 {\n            result.append(odds[i/2])\n\
    \        } else {\n            result.append(evens[i/2])\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpy2fu1orj/tmpy2fu1orj.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b995aefdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b995abf4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b995abf4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b995abf37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy2fu1orj                        0x000055eddc7ca983 <unavailable> + 6531

    5    libc.so.6                          0x00002b995b0e9460 __libc_start_main +
    245

    6    tmpy2fu1orj                        0x000055eddc7ca3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l2 = l\n    var i = 0\n\
    \    while i < l.count {\n        if i % 2 == 0 {\n            l2[i] = l[i]\n\
    \        } else {\n            l2[i] = l[i]\n            l2[i] = l2[i].sort()\n\
    \        }\n        i += 1\n    }\n    return l2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpk7jny1bl.swift:17:27: error: value of type 'Int' has no member\
    \ 'sort'\n            l2[i] = l2[i].sort()\n                    ~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659824709
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n        evens.append(l[i])\n\
    \    }\n    evens.sort()\n    for i in stride(from: 0, to: l.count, by: 2) {\n\
    \        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens:\
    \ [Int] = []\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n          \
    \  evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            l[i] = evens[i/2]\n        }\n    }\n\
    \    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824710
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            continue\n        }\n        let sub\
    \ = l[i..<l.count]\n        let sorted = sub.sorted()\n        for j in 0..<sub.count\
    \ {\n            l[i + j] = sorted[j]\n        }\n    }\n    return l\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpf6e2acd_/tmpf6e2acd_.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c46cbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c469b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c469b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c469b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf6e2acd_                        0x00005617a06fe9f3 <unavailable> + 6643

    5    libc.so.6                          0x00002b2c46ea7460 __libc_start_main +
    245

    6    tmpf6e2acd_                        0x00005617a06fe449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659824710
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even =\
    \ [Int]()\n    var odd = [Int]()\n    for (i, x) in l.enumerated() {\n       \
    \ if i % 2 == 0 {\n            even.append(x)\n        } else {\n            odd.append(x)\n\
    \        }\n    }\n    even.sort()\n    for (i, x) in even.enumerated() {\n  \
    \      l[i * 2] = x\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824710
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even_indicies: [Int]\
    \ = []\n    var odd_indicies: [Int] = []\n    var result: [Int] = []\n    for\
    \ (index, value) in l.enumerated() {\n        if index % 2 == 0 {\n          \
    \  odd_indicies.append(value)\n        } else {\n            even_indicies.append(value)\n\
    \        }\n    }\n    even_indicies.sort()\n    for (index, value) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            result.append(value)\n        }\
    \ else {\n            result.append(even_indicies.removeFirst())\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpjiw30hqw/tmpjiw30hqw.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6f03e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6f00dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6f00dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6f00db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjiw30hqw                        0x000056089f6a6a33 <unavailable> + 6707

    5    libc.so.6                          0x00002ba6f05d1460 __libc_start_main +
    245

    6    tmpjiw30hqw                        0x000056089f6a6489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659824710
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even_indicies\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ even_indicies.append(i)\n        }\n    }\n    for i in even_indicies {\n  \
    \      for j in i..<l.count {\n            if l[j] < l[i] {\n                l.swapAt(i,\
    \ j)\n            }\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp20azhakz/tmp20azhakz.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a1a407c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a1a0feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a1a0fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a1a0fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp20azhakz                        0x000056394c71da63 <unavailable> + 6755

    5    libc.so.6                          0x00002b4a1a5f3460 __libc_start_main +
    245

    6    tmp20azhakz                        0x000056394c71d4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824710
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens:\
    \ [Int] = []\n    var odds: [Int] = []\n    for i in 0..<l.count {\n        if\
    \ i % 2 == 0 {\n            odds.append(l[i])\n        } else {\n            evens.append(l[i])\n\
    \        }\n    }\n    evens.sort()\n    for i in 0..<evens.count {\n        odds.insert(evens[i],\
    \ at: i * 2 + 1)\n    }\n    return odds\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpqmc8yqcj/tmpqmc8yqcj.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3bdaa2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3bda726b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3bda726988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3bda7257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqmc8yqcj                        0x000055cff0d78983 <unavailable> + 6531

    5    libc.so.6                          0x00002b3bdac1b460 __libc_start_main +
    245

    6    tmpqmc8yqcj                        0x000055cff0d783d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824710
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens = [Int]()\n   \
    \ var odds = [Int]()\n    var sorted_evens = [Int]()\n    var sorted_list = [Int]()\n\
    \    for (index, value) in l.enumerated() {\n        if index % 2 == 0 {\n   \
    \         odds.append(value)\n        } else {\n            evens.append(value)\n\
    \        }\n    }\n    sorted_evens = evens.sorted()\n    for (index, value) in\
    \ odds.enumerated() {\n        sorted_list.append(value)\n        sorted_list.append(sorted_evens[index])\n\
    \    }\n    return sorted_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b19f51ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19f4ec3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b19f4ec3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b19f4ec313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b19f4ec2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b19f4cc2e83 <unavailable> + 188035

    6    tmpt0_l_aim                        0x000056443c39a050 <unavailable> + 8272

    7    tmpt0_l_aim                        0x000056443c399734 <unavailable> + 5940

    8    libc.so.6                          0x00002b19f53b8460 __libc_start_main +
    245

    9    tmpt0_l_aim                        0x000056443c399419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824710
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even_indicies\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ even_indicies.append(i)\n        }\n    }\n    for i in 0..<even_indicies.count\
    \ {\n        for j in i..<even_indicies.count {\n            if l[even_indicies[i]]\
    \ > l[even_indicies[j]] {\n                let temp = l[even_indicies[i]]\n  \
    \              l[even_indicies[i]] = l[even_indicies[j]]\n                l[even_indicies[j]]\
    \ = temp\n            }\n        }\n    }\n    return l\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824709
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even_indicies\
    \ = [Int]()\n    for (index, value) in l.enumerated() {\n        if index % 2\
    \ == 0 {\n            even_indicies.append(value)\n        }\n    }\n    even_indicies.sort()\n\
    \    for (index, value) in l.enumerated() {\n        if index % 2 == 0 {\n   \
    \         l[index] = even_indicies[index/2]\n        }\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824710
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var result = l\n    var evens\
    \ = [Int]()\n    for (index, value) in l.enumerated() {\n        if index % 2\
    \ == 0 {\n            evens.append(value)\n        }\n    }\n    evens.sort()\n\
    \    for (index, value) in evens.enumerated() {\n        result[index * 2] = value\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even_list\
    \ = [Int]()\n    var odd_list = [Int]()\n    var sorted_list = [Int]()\n    for\
    \ i in 0..<l.count {\n        if i % 2 == 0 {\n            even_list.append(l[i])\n\
    \        } else {\n            odd_list.append(l[i])\n        }\n    }\n    even_list.sort()\n\
    \    for i in 0..<l.count {\n        if i % 2 == 0 {\n            sorted_list.append(even_list[i/2])\n\
    \        } else {\n            sorted_list.append(odd_list[i/2])\n        }\n\
    \    }\n    return sorted_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824710
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    var odds = [Int]()\n    for (index, value) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            odds.append(value)\n        } else\
    \ {\n            evens.append(value)\n        }\n    }\n    evens.sort()\n   \
    \ for (index, value) in evens.enumerated() {\n        l[index * 2 + 1] = value\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpcvwiz4w0/tmpcvwiz4w0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47dba8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47db786b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47db786988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47db7857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcvwiz4w0                        0x000055d428647a43 <unavailable> + 6723

    5    libc.so.6                          0x00002b47dbc7b460 __libc_start_main +
    245

    6    tmpcvwiz4w0                        0x000055d428647499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            l[i] = evens[i/2]\n        }\n    }\n\
    \    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l2 = l\n    for i in\
    \ stride(from: 0, to: l.count, by: 2) {\n        l2[i] = l[i]\n    }\n    for\
    \ i in stride(from: 1, to: l.count, by: 2) {\n        l2[i] = l[i]\n    }\n  \
    \  return l2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp6ndevr59/tmp6ndevr59.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64330a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6432d97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6432d97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6432d967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ndevr59                        0x0000560c4bf84883 <unavailable> + 6275

    5    libc.so.6                          0x00002b643328c460 __libc_start_main +
    245

    6    tmp6ndevr59                        0x0000560c4bf842d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824710
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var new_list = l\n    var\
    \ even_list = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n \
    \           even_list.append(l[i])\n        }\n    }\n    even_list.sort()\n \
    \   for i in 0..<l.count {\n        if i % 2 == 0 {\n            new_list[i] =\
    \ even_list[i/2]\n        }\n    }\n    return new_list\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824710
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens\
    \ = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n        evens.append(l[i])\n\
    \    }\n    evens.sort()\n    for i in stride(from: 0, to: l.count, by: 2) {\n\
    \        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var result: [Int] = []\n\
    \    var evens: [Int] = []\n    for (i, num) in l.enumerated() {\n        if i\
    \ % 2 == 0 {\n            result.append(num)\n        } else {\n            evens.append(num)\n\
    \        }\n    }\n    evens.sort()\n    for (i, num) in evens.enumerated() {\n\
    \        result.insert(num, at: i * 2 + 1)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpg4n3e8q5/tmpg4n3e8q5.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00486b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00483acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00483ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00483ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg4n3e8q5                        0x0000563477f1e9f3 <unavailable> + 6643

    5    libc.so.6                          0x00002b00488a1460 __libc_start_main +
    245

    6    tmpg4n3e8q5                        0x0000563477f1e449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659824710
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens:\
    \ [Int] = []\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n          \
    \  evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            l[i] = evens[i/2]\n        }\n    }\n\
    \    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824710
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even_list = [Int]()\n\
    \    var odd_list = [Int]()\n    var sorted_list = [Int]()\n    for (index, value)\
    \ in l.enumerated() {\n        if index % 2 == 0 {\n            even_list.append(value)\n\
    \        } else {\n            odd_list.append(value)\n        }\n    }\n    even_list.sort()\n\
    \    for (index, value) in even_list.enumerated() {\n        sorted_list.append(value)\n\
    \        sorted_list.append(odd_list[index])\n    }\n    return sorted_list\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002afc7f5e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc7f2d8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afc7f2d8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afc7f2d813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afc7f2d7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002afc7f0d7e83 <unavailable> + 188035

    6    tmpkae6o6cc                        0x0000562dee0c0071 <unavailable> + 8305

    7    tmpkae6o6cc                        0x0000562dee0bf7b4 <unavailable> + 6068

    8    libc.so.6                          0x00002afc7f7cd460 __libc_start_main +
    245

    9    tmpkae6o6cc                        0x0000562dee0bf499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824710
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        if i + 1 < l.count {\n            if l[i]\
    \ > l[i + 1] {\n                l.swapAt(i, i + 1)\n            }\n        }\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpd6iwumme/tmpd6iwumme.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6578724c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b657841bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b657841b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b657841a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd6iwumme                        0x000055ad2bd118d3 <unavailable> + 6355

    5    libc.so.6                          0x00002b6578910460 __libc_start_main +
    245

    6    tmpd6iwumme                        0x000055ad2bd11329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var evens:\
    \ [Int] = []\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n          \
    \  evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            l[i] = evens[i/2]\n        }\n    }\n\
    \    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824710
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens = [Int]()\n   \
    \ var odds = [Int]()\n    var result = [Int]()\n    for (index, value) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            odds.append(value)\n        } else\
    \ {\n            evens.append(value)\n        }\n    }\n    evens.sort()\n   \
    \ for (index, value) in l.enumerated() {\n        if index % 2 == 0 {\n      \
    \      result.append(value)\n        } else {\n            result.append(evens.removeFirst())\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpfy5xd5zh/tmpfy5xd5zh.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade9e052c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade9dd49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade9dd49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade9dd487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfy5xd5zh                        0x0000556f6da15a93 <unavailable> + 6803

    5    libc.so.6                          0x00002ade9e23e460 __libc_start_main +
    245

    6    tmpfy5xd5zh                        0x0000556f6da154e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even_indices\
    \ = [Int]()\n    var odd_indices = [Int]()\n    for i in 0..<l.count {\n     \
    \   if i % 2 == 0 {\n            even_indices.append(l[i])\n        } else {\n\
    \            odd_indices.append(l[i])\n        }\n    }\n    even_indices.sort()\n\
    \    var new_l = [Int]()\n    for i in 0..<even_indices.count {\n        new_l.append(even_indices[i])\n\
    \        new_l.append(odd_indices[i])\n    }\n    return new_l\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6737a99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6737790561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6737790286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b673779013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b673778fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b673758fe83 <unavailable> + 188035

    6    tmpzbk42rxp                        0x0000561f37bc60ac <unavailable> + 8364

    7    tmpzbk42rxp                        0x0000561f37bc56f4 <unavailable> + 5876

    8    libc.so.6                          0x00002b6737c85460 __libc_start_main +
    245

    9    tmpzbk42rxp                        0x0000561f37bc53d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824710
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even_indices\
    \ = [Int]()\n    var odd_indices = [Int]()\n    var even_values = [Int]()\n  \
    \  var odd_values = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0\
    \ {\n            even_indices.append(i)\n            even_values.append(l[i])\n\
    \        } else {\n            odd_indices.append(i)\n            odd_values.append(l[i])\n\
    \        }\n    }\n    even_values.sort()\n    for i in 0..<even_indices.count\
    \ {\n        l[even_indices[i]] = even_values[i]\n    }\n    return l\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824710
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens = [Int]()\n   \
    \ var odds = [Int]()\n    var result = [Int]()\n    for (index, value) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            odds.append(value)\n        } else\
    \ {\n            evens.append(value)\n        }\n    }\n    evens.sort()\n   \
    \ for (index, value) in l.enumerated() {\n        if index % 2 == 0 {\n      \
    \      result.append(value)\n        } else {\n            result.append(evens.removeFirst())\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpfy5xd5zh/tmpfy5xd5zh.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade9e052c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade9dd49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade9dd49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade9dd487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfy5xd5zh                        0x0000556f6da15a93 <unavailable> + 6803

    5    libc.so.6                          0x00002ade9e23e460 __libc_start_main +
    245

    6    tmpfy5xd5zh                        0x0000556f6da154e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even_indicies\
    \ = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ even_indicies.append(i)\n        }\n    }\n    for i in 0..<even_indicies.count\
    \ {\n        for j in 0..<even_indicies.count - 1 {\n            if l[even_indicies[j]]\
    \ > l[even_indicies[j + 1]] {\n                let temp = l[even_indicies[j]]\n\
    \                l[even_indicies[j]] = l[even_indicies[j + 1]]\n             \
    \   l[even_indicies[j + 1]] = temp\n            }\n        }\n    }\n    return\
    \ l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1,\
    \ 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2,\
    \ 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var even =\
    \ [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n            even.append(l[i])\n\
    \        }\n    }\n    even.sort()\n    for i in 0..<l.count {\n        if i %\
    \ 2 == 0 {\n            l[i] = even[i/2]\n        }\n    }\n    return l\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824710
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5ofd0.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var i = 0\n\
    \    while i < l.count {\n        if i % 2 == 0 {\n            i += 1\n      \
    \      continue\n        }\n        var j = i + 1\n        while j < l.count {\n\
    \            if l[j] < l[i] {\n                let temp = l[i]\n             \
    \   l[i] = l[j]\n                l[j] = temp\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpj_1pc854/tmpj_1pc854.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac927f4ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac927c41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac927c41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac927c407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj_1pc854                        0x00005648f2156713 <unavailable> + 5907

    5    libc.so.6                          0x00002ac928136460 __libc_start_main +
    245

    6    tmpj_1pc854                        0x00005648f2156169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824709
